// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24

import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:573
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9072

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 968,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	176, 803,
	193, 803,
	207, 229,
	281, 229,
	289, 659,
	316, 229,
	325, 659,
	362, 659,
	386, 229,
	409, 659,
	-2, 0,
	-1, 75,
	207, 233,
	-2, 0,
	-1, 76,
	105, 968,
	182, 968,
	395, 968,
	396, 968,
	-2, 0,
	-1, 87,
	118, 942,
	132, 942,
	190, 942,
	218, 942,
	247, 942,
	257, 942,
	391, 942,
	-2, 929,
	-1, 115,
	123, 583,
	206, 583,
	379, 583,
	-2, 0,
	-1, 116,
	4, 970,
	21, 970,
	22, 970,
	23, 970,
	24, 970,
	25, 970,
	27, 970,
	32, 970,
	37, 970,
	38, 970,
	39, 970,
	40, 970,
	41, 970,
	42, 970,
	43, 970,
	44, 970,
	45, 970,
	46, 970,
	48, 970,
	49, 970,
	50, 970,
	51, 970,
	52, 970,
	53, 970,
	56, 970,
	57, 970,
	58, 970,
	59, 970,
	61, 970,
	62, 970,
	66, 970,
	67, 970,
	68, 970,
	69, 970,
	70, 970,
	72, 970,
	73, 970,
	74, 970,
	75, 970,
	77, 970,
	79, 970,
	80, 970,
	81, 970,
	84, 970,
	85, 970,
	93, 970,
	94, 970,
	95, 970,
	96, 970,
	97, 970,
	98, 970,
	99, 970,
	100, 970,
	102, 970,
	104, 970,
	105, 970,
	107, 970,
	110, 970,
	111, 970,
	112, 970,
	114, 970,
	116, 970,
	117, 970,
	119, 970,
	120, 970,
	121, 970,
	122, 970,
	123, 970,
	124, 970,
	125, 970,
	126, 970,
	127, 970,
	128, 970,
	129, 970,
	131, 970,
	137, 970,
	138, 970,
	139, 970,
	140, 970,
	141, 970,
	142, 970,
	144, 970,
	146, 970,
	150, 970,
	151, 970,
	153, 970,
	154, 970,
	156, 970,
	157, 970,
	159, 970,
	160, 970,
	161, 970,
	162, 970,
	163, 970,
	164, 970,
	165, 970,
	166, 970,
	167, 970,
	168, 970,
	171, 970,
	172, 970,
	176, 970,
	177, 970,
	178, 970,
	179, 970,
	182, 970,
	183, 970,
	184, 970,
	185, 970,
	186, 970,
	187, 970,
	188, 970,
	189, 970,
	191, 970,
	193, 970,
	196, 970,
	197, 970,
	198, 970,
	200, 970,
	201, 970,
	204, 970,
	205, 970,
	206, 970,
	207, 970,
	209, 970,
	210, 970,
	212, 970,
	213, 970,
	215, 970,
	216, 970,
	219, 970,
	220, 970,
	223, 970,
	225, 970,
	226, 970,
	227, 970,
	228, 970,
	229, 970,
	230, 970,
	231, 970,
	232, 970,
	233, 970,
	235, 970,
	236, 970,
	237, 970,
	238, 970,
	240, 970,
	243, 970,
	244, 970,
	245, 970,
	246, 970,
	248, 970,
	249, 970,
	250, 970,
	252, 970,
	253, 970,
	254, 970,
	255, 970,
	258, 970,
	259, 970,
	261, 970,
	263, 970,
	264, 970,
	265, 970,
	266, 970,
	267, 970,
	268, 970,
	269, 970,
	270, 970,
	271, 970,
	273, 970,
	274, 970,
	275, 970,
	276, 970,
	277, 970,
	278, 970,
	280, 970,
	282, 970,
	283, 970,
	284, 970,
	285, 970,
	286, 970,
	287, 970,
	288, 970,
	289, 970,
	290, 970,
	292, 970,
	293, 970,
	294, 970,
	295, 970,
	296, 970,
	298, 970,
	299, 970,
	300, 970,
	301, 970,
	302, 970,
	303, 970,
	304, 970,
	305, 970,
	307, 970,
	309, 970,
	310, 970,
	311, 970,
	312, 970,
	313, 970,
	314, 970,
	316, 970,
	317, 970,
	318, 970,
	319, 970,
	320, 970,
	321, 970,
	322, 970,
	323, 970,
	325, 970,
	326, 970,
	327, 970,
	328, 970,
	329, 970,
	330, 970,
	331, 970,
	332, 970,
	333, 970,
	334, 970,
	336, 970,
	337, 970,
	338, 970,
	339, 970,
	341, 970,
	342, 970,
	343, 970,
	344, 970,
	346, 970,
	347, 970,
	348, 970,
	349, 970,
	350, 970,
	351, 970,
	352, 970,
	353, 970,
	354, 970,
	355, 970,
	356, 970,
	357, 970,
	359, 970,
	360, 970,
	361, 970,
	363, 970,
	364, 970,
	365, 970,
	366, 970,
	367, 970,
	368, 970,
	369, 970,
	370, 970,
	371, 970,
	373, 970,
	374, 970,
	375, 970,
	376, 970,
	379, 970,
	380, 970,
	381, 970,
	382, 970,
	383, 970,
	385, 970,
	386, 970,
	387, 970,
	389, 970,
	390, 970,
	393, 970,
	394, 970,
	395, 970,
	396, 970,
	397, 970,
	399, 970,
	401, 970,
	402, 970,
	403, 970,
	404, 970,
	405, 970,
	406, 970,
	407, 970,
	409, 970,
	410, 970,
	411, 970,
	416, 970,
	417, 970,
	418, 970,
	419, 970,
	420, 970,
	421, 970,
	-2, 0,
	-1, 117,
	1, 860,
	196, 860,
	280, 860,
	287, 860,
	424, 860,
	447, 860,
	-2, 0,
	-1, 119,
	1, 860,
	447, 860,
	-2, 0,
	-1, 120,
	1, 860,
	447, 860,
	-2, 0,
	-1, 121,
	1, 864,
	447, 864,
	-2, 0,
	-1, 145,
	118, 941,
	132, 941,
	190, 941,
	218, 941,
	247, 941,
	257, 941,
	391, 941,
	-2, 938,
	-1, 175,
	4, 977,
	5, 977,
	6, 977,
	7, 977,
	8, 977,
	9, 977,
	10, 977,
	21, 977,
	22, 977,
	23, 977,
	24, 977,
	25, 977,
	27, 977,
	32, 977,
	33, 977,
	37, 977,
	38, 977,
	39, 977,
	40, 977,
	41, 977,
	42, 977,
	43, 977,
	44, 977,
	45, 977,
	46, 977,
	48, 977,
	49, 977,
	50, 977,
	51, 977,
	52, 977,
	53, 977,
	54, 977,
	55, 977,
	56, 977,
	57, 977,
	58, 977,
	59, 977,
	61, 977,
	62, 977,
	64, 977,
	66, 977,
	67, 977,
	68, 977,
	69, 977,
	70, 977,
	72, 977,
	73, 977,
	74, 977,
	75, 977,
	77, 977,
	79, 977,
	80, 977,
	81, 977,
	83, 977,
	84, 977,
	85, 977,
	86, 977,
	87, 977,
	88, 977,
	89, 977,
	90, 977,
	91, 977,
	92, 977,
	93, 977,
	94, 977,
	95, 977,
	96, 977,
	97, 977,
	98, 977,
	99, 977,
	100, 977,
	101, 977,
	102, 977,
	104, 977,
	105, 977,
	107, 977,
	110, 977,
	111, 977,
	112, 977,
	114, 977,
	116, 977,
	117, 977,
	119, 977,
	120, 977,
	121, 977,
	122, 977,
	123, 977,
	124, 977,
	125, 977,
	126, 977,
	127, 977,
	128, 977,
	129, 977,
	130, 977,
	131, 977,
	137, 977,
	138, 977,
	139, 977,
	140, 977,
	141, 977,
	142, 977,
	144, 977,
	146, 977,
	149, 977,
	150, 977,
	151, 977,
	153, 977,
	154, 977,
	156, 977,
	157, 977,
	159, 977,
	160, 977,
	161, 977,
	162, 977,
	163, 977,
	164, 977,
	165, 977,
	166, 977,
	167, 977,
	168, 977,
	169, 977,
	171, 977,
	172, 977,
	176, 977,
	177, 977,
	178, 977,
	179, 977,
	181, 977,
	182, 977,
	183, 977,
	184, 977,
	185, 977,
	186, 977,
	187, 977,
	188, 977,
	189, 977,
	191, 977,
	193, 977,
	194, 977,
	195, 977,
	196, 977,
	197, 977,
	198, 977,
	199, 977,
	200, 977,
	201, 977,
	204, 977,
	205, 977,
	206, 977,
	207, 977,
	209, 977,
	210, 977,
	212, 977,
	213, 977,
	214, 977,
	215, 977,
	216, 977,
	217, 977,
	219, 977,
	220, 977,
	223, 977,
	225, 977,
	226, 977,
	227, 977,
	228, 977,
	229, 977,
	230, 977,
	231, 977,
	232, 977,
	233, 977,
	234, 977,
	235, 977,
	236, 977,
	237, 977,
	238, 977,
	239, 977,
	240, 977,
	241, 977,
	242, 977,
	243, 977,
	244, 977,
	245, 977,
	246, 977,
	248, 977,
	249, 977,
	250, 977,
	253, 977,
	254, 977,
	255, 977,
	258, 977,
	259, 977,
	260, 977,
	261, 977,
	262, 977,
	263, 977,
	264, 977,
	265, 977,
	266, 977,
	267, 977,
	268, 977,
	269, 977,
	270, 977,
	271, 977,
	273, 977,
	274, 977,
	275, 977,
	276, 977,
	277, 977,
	278, 977,
	280, 977,
	282, 977,
	283, 977,
	284, 977,
	285, 977,
	286, 977,
	287, 977,
	288, 977,
	289, 977,
	290, 977,
	292, 977,
	293, 977,
	294, 977,
	295, 977,
	296, 977,
	298, 977,
	299, 977,
	300, 977,
	301, 977,
	302, 977,
	303, 977,
	304, 977,
	305, 977,
	307, 977,
	308, 977,
	309, 977,
	310, 977,
	311, 977,
	312, 977,
	313, 977,
	314, 977,
	316, 977,
	317, 977,
	318, 977,
	319, 977,
	320, 977,
	321, 977,
	322, 977,
	323, 977,
	325, 977,
	326, 977,
	327, 977,
	328, 977,
	329, 977,
	330, 977,
	331, 977,
	332, 977,
	333, 977,
	334, 977,
	335, 977,
	336, 977,
	337, 977,
	338, 977,
	339, 977,
	340, 977,
	341, 977,
	342, 977,
	343, 977,
	344, 977,
	346, 977,
	347, 977,
	348, 977,
	349, 977,
	350, 977,
	351, 977,
	352, 977,
	353, 977,
	354, 977,
	355, 977,
	356, 977,
	357, 977,
	359, 977,
	360, 977,
	361, 977,
	363, 977,
	364, 977,
	365, 977,
	366, 977,
	367, 977,
	368, 977,
	369, 977,
	370, 977,
	371, 977,
	373, 977,
	374, 977,
	375, 977,
	376, 977,
	379, 977,
	380, 977,
	381, 977,
	382, 977,
	383, 977,
	384, 977,
	385, 977,
	386, 977,
	387, 977,
	389, 977,
	390, 977,
	392, 977,
	393, 977,
	394, 977,
	395, 977,
	396, 977,
	397, 977,
	398, 977,
	399, 977,
	401, 977,
	402, 977,
	403, 977,
	404, 977,
	405, 977,
	406, 977,
	407, 977,
	409, 977,
	410, 977,
	411, 977,
	416, 977,
	417, 977,
	418, 977,
	419, 977,
	420, 977,
	421, 977,
	422, 977,
	430, 977,
	435, 977,
	436, 977,
	437, 977,
	444, 977,
	449, 977,
	-2, 0,
	-1, 537,
	148, 1636,
	377, 1636,
	427, 1636,
	446, 1636,
	-2, 0,
	-1, 538,
	148, 1712,
	377, 1712,
	427, 1712,
	446, 1712,
	-2, 0,
	-1, 539,
	148, 1626,
	377, 1626,
	427, 1626,
	446, 1626,
	-2, 0,
	-1, 541,
	148, 1796,
	377, 1796,
	427, 1796,
	446, 1796,
	-2, 0,
	-1, 543,
	148, 1824,
	377, 1824,
	427, 1824,
	446, 1824,
	-2, 0,
	-1, 550,
	148, 1720,
	377, 1720,
	427, 1720,
	446, 1720,
	-2, 458,
	-1, 567,
	446, 1586,
	448, 1586,
	-2, 628,
	-1, 568,
	446, 1588,
	448, 1588,
	-2, 629,
	-1, 569,
	446, 1587,
	448, 1587,
	-2, 630,
	-1, 570,
	448, 1534,
	-2, 631,
	-1, 715,
	1, 556,
	443, 556,
	445, 556,
	447, 556,
	-2, 0,
	-1, 716,
	1, 627,
	145, 627,
	443, 627,
	445, 627,
	447, 627,
	-2, 0,
	-1, 722,
	1, 570,
	443, 570,
	445, 570,
	447, 570,
	-2, 0,
	-1, 724,
	1, 574,
	443, 574,
	445, 574,
	447, 574,
	-2, 0,
	-1, 726,
	1, 584,
	443, 584,
	445, 584,
	447, 584,
	-2, 0,
	-1, 727,
	1, 593,
	443, 593,
	445, 593,
	447, 593,
	-2, 0,
	-1, 728,
	1, 595,
	443, 595,
	445, 595,
	447, 595,
	-2, 0,
	-1, 732,
	1, 609,
	443, 609,
	445, 609,
	447, 609,
	-2, 0,
	-1, 733,
	1, 611,
	443, 611,
	445, 611,
	447, 611,
	-2, 0,
	-1, 776,
	132, 981,
	218, 981,
	247, 981,
	-2, 938,
	-1, 791,
	132, 980,
	218, 980,
	247, 980,
	-2, 938,
	-1, 815,
	446, 1585,
	-2, 466,
	-1, 844,
	444, 1577,
	-2, 1568,
	-1, 850,
	5, 1108,
	-2, 1617,
	-1, 851,
	5, 1109,
	-2, 1621,
	-1, 852,
	5, 1110,
	-2, 1620,
	-1, 853,
	5, 1111,
	-2, 1822,
	-1, 854,
	5, 1112,
	-2, 1722,
	-1, 855,
	5, 1113,
	-2, 1788,
	-1, 856,
	5, 1114,
	-2, 1790,
	-1, 857,
	5, 1115,
	-2, 1801,
	-1, 858,
	5, 1116,
	-2, 1791,
	-1, 859,
	5, 1117,
	-2, 1792,
	-1, 860,
	5, 1118,
	-2, 1616,
	-1, 861,
	5, 1119,
	-2, 1835,
	-1, 862,
	5, 1120,
	-2, 1687,
	-1, 863,
	5, 1121,
	-2, 1729,
	-1, 864,
	5, 1122,
	-2, 1731,
	-1, 865,
	5, 1123,
	-2, 1691,
	-1, 866,
	5, 1124,
	444, 1595,
	-2, 1586,
	-1, 867,
	5, 1180,
	444, 1180,
	-2, 1870,
	-1, 872,
	444, 1596,
	-2, 1587,
	-1, 874,
	5, 1128,
	-2, 1868,
	-1, 875,
	5, 1129,
	-2, 1869,
	-1, 876,
	5, 1130,
	-2, 1690,
	-1, 877,
	5, 1131,
	-2, 1881,
	-1, 878,
	5, 1132,
	-2, 1692,
	-1, 879,
	5, 1133,
	-2, 1693,
	-1, 880,
	5, 1134,
	-2, 1694,
	-1, 881,
	5, 1135,
	-2, 1850,
	-1, 882,
	5, 1136,
	-2, 1879,
	-1, 883,
	5, 1137,
	-2, 1671,
	-1, 884,
	5, 1138,
	-2, 1672,
	-1, 885,
	5, 1152,
	-2, 1862,
	-1, 887,
	5, 1127,
	-2, 1858,
	-1, 888,
	5, 1127,
	-2, 1857,
	-1, 889,
	5, 1127,
	-2, 1874,
	-1, 890,
	5, 1144,
	-2, 1852,
	-1, 891,
	5, 1145,
	-2, 1618,
	-1, 892,
	5, 1155,
	-2, 1851,
	-1, 893,
	5, 1157,
	-2, 1890,
	-1, 895,
	5, 1168,
	-2, 1646,
	-1, 896,
	5, 1179,
	-2, 1883,
	-1, 897,
	5, 1171,
	-2, 1884,
	-1, 898,
	5, 1179,
	-2, 1885,
	-1, 899,
	5, 1175,
	-2, 1886,
	-1, 900,
	5, 1095,
	-2, 1700,
	-1, 901,
	5, 1096,
	-2, 1701,
	-1, 902,
	446, 1583,
	-2, 1567,
	-1, 903,
	444, 1910,
	-2, 1584,
	-1, 923,
	5, 1163,
	-2, 1811,
	-1, 940,
	5, 1162,
	-2, 1891,
	-1, 950,
	5, 1164,
	410, 1164,
	-2, 1853,
	-1, 951,
	5, 1165,
	410, 1165,
	-2, 1854,
	-1, 987,
	444, 1595,
	-2, 1586,
	-1, 1016,
	148, 1824,
	377, 1824,
	427, 1824,
	446, 1824,
	-2, 0,
	-1, 1017,
	1, 446,
	447, 446,
	-2, 872,
	-1, 1137,
	298, 1564,
	437, 1564,
	-2, 1563,
	-1, 1160,
	449, 1564,
	-2, 1565,
	-1, 1195,
	289, 659,
	409, 659,
	-2, 228,
	-1, 1215,
	269, 966,
	-2, 776,
	-1, 1224,
	251, 1590,
	-2, 0,
	-1, 1288,
	1, 336,
	443, 336,
	445, 336,
	447, 336,
	-2, 940,
	-1, 1291,
	4, 1889,
	11, 1889,
	12, 1889,
	14, 1889,
	15, 1889,
	16, 1889,
	17, 1889,
	18, 1889,
	19, 1889,
	21, 1889,
	22, 1889,
	23, 1889,
	24, 1889,
	25, 1889,
	27, 1889,
	30, 1889,
	32, 1889,
	34, 1889,
	37, 1889,
	38, 1889,
	39, 1889,
	40, 1889,
	41, 1889,
	42, 1889,
	43, 1889,
	44, 1889,
	45, 1889,
	46, 1889,
	48, 1889,
	49, 1889,
	50, 1889,
	51, 1889,
	52, 1889,
	53, 1889,
	56, 1889,
	57, 1889,
	58, 1889,
	59, 1889,
	61, 1889,
	62, 1889,
	63, 1889,
	66, 1889,
	67, 1889,
	68, 1889,
	69, 1889,
	70, 1889,
	71, 1889,
	72, 1889,
	73, 1889,
	74, 1889,
	75, 1889,
	77, 1889,
	78, 1889,
	79, 1889,
	80, 1889,
	81, 1889,
	83, 1889,
	84, 1889,
	85, 1889,
	93, 1889,
	94, 1889,
	95, 1889,
	96, 1889,
	97, 1889,
	98, 1889,
	99, 1889,
	100, 1889,
	102, 1889,
	104, 1889,
	105, 1889,
	107, 1889,
	110, 1889,
	111, 1889,
	112, 1889,
	114, 1889,
	116, 1889,
	117, 1889,
	119, 1889,
	120, 1889,
	121, 1889,
	122, 1889,
	123, 1889,
	124, 1889,
	125, 1889,
	126, 1889,
	127, 1889,
	128, 1889,
	129, 1889,
	133, 1889,
	134, 1889,
	135, 1889,
	136, 1889,
	137, 1889,
	138, 1889,
	139, 1889,
	140, 1889,
	141, 1889,
	142, 1889,
	143, 1889,
	144, 1889,
	146, 1889,
	149, 1889,
	150, 1889,
	151, 1889,
	153, 1889,
	154, 1889,
	156, 1889,
	157, 1889,
	159, 1889,
	160, 1889,
	161, 1889,
	162, 1889,
	163, 1889,
	164, 1889,
	165, 1889,
	166, 1889,
	167, 1889,
	168, 1889,
	169, 1889,
	170, 1889,
	171, 1889,
	172, 1889,
	173, 1889,
	174, 1889,
	175, 1889,
	177, 1889,
	178, 1889,
	179, 1889,
	181, 1889,
	182, 1889,
	183, 1889,
	184, 1889,
	185, 1889,
	186, 1889,
	187, 1889,
	188, 1889,
	189, 1889,
	191, 1889,
	193, 1889,
	194, 1889,
	195, 1889,
	196, 1889,
	197, 1889,
	198, 1889,
	199, 1889,
	200, 1889,
	201, 1889,
	202, 1889,
	203, 1889,
	204, 1889,
	205, 1889,
	206, 1889,
	207, 1889,
	209, 1889,
	210, 1889,
	212, 1889,
	213, 1889,
	214, 1889,
	215, 1889,
	216, 1889,
	217, 1889,
	219, 1889,
	220, 1889,
	223, 1889,
	224, 1889,
	225, 1889,
	226, 1889,
	227, 1889,
	228, 1889,
	229, 1889,
	230, 1889,
	231, 1889,
	232, 1889,
	233, 1889,
	234, 1889,
	235, 1889,
	236, 1889,
	237, 1889,
	238, 1889,
	241, 1889,
	243, 1889,
	244, 1889,
	245, 1889,
	246, 1889,
	248, 1889,
	249, 1889,
	250, 1889,
	253, 1889,
	254, 1889,
	255, 1889,
	256, 1889,
	258, 1889,
	259, 1889,
	261, 1889,
	263, 1889,
	264, 1889,
	265, 1889,
	266, 1889,
	267, 1889,
	268, 1889,
	269, 1889,
	270, 1889,
	271, 1889,
	273, 1889,
	274, 1889,
	275, 1889,
	276, 1889,
	277, 1889,
	278, 1889,
	280, 1889,
	282, 1889,
	283, 1889,
	284, 1889,
	285, 1889,
	286, 1889,
	287, 1889,
	288, 1889,
	289, 1889,
	290, 1889,
	292, 1889,
	293, 1889,
	294, 1889,
	295, 1889,
	296, 1889,
	297, 1889,
	298, 1889,
	299, 1889,
	300, 1889,
	301, 1889,
	302, 1889,
	303, 1889,
	304, 1889,
	305, 1889,
	307, 1889,
	308, 1889,
	309, 1889,
	310, 1889,
	311, 1889,
	312, 1889,
	313, 1889,
	314, 1889,
	315, 1889,
	316, 1889,
	317, 1889,
	318, 1889,
	319, 1889,
	320, 1889,
	321, 1889,
	322, 1889,
	323, 1889,
	325, 1889,
	326, 1889,
	327, 1889,
	328, 1889,
	329, 1889,
	330, 1889,
	331, 1889,
	332, 1889,
	333, 1889,
	334, 1889,
	336, 1889,
	337, 1889,
	338, 1889,
	339, 1889,
	340, 1889,
	341, 1889,
	342, 1889,
	343, 1889,
	344, 1889,
	346, 1889,
	347, 1889,
	348, 1889,
	349, 1889,
	350, 1889,
	351, 1889,
	352, 1889,
	353, 1889,
	354, 1889,
	355, 1889,
	356, 1889,
	357, 1889,
	359, 1889,
	360, 1889,
	361, 1889,
	363, 1889,
	364, 1889,
	365, 1889,
	366, 1889,
	367, 1889,
	368, 1889,
	369, 1889,
	370, 1889,
	371, 1889,
	373, 1889,
	374, 1889,
	375, 1889,
	376, 1889,
	379, 1889,
	380, 1889,
	381, 1889,
	382, 1889,
	383, 1889,
	385, 1889,
	386, 1889,
	387, 1889,
	389, 1889,
	390, 1889,
	393, 1889,
	394, 1889,
	395, 1889,
	396, 1889,
	397, 1889,
	399, 1889,
	401, 1889,
	402, 1889,
	403, 1889,
	404, 1889,
	405, 1889,
	406, 1889,
	407, 1889,
	409, 1889,
	410, 1889,
	411, 1889,
	416, 1889,
	417, 1889,
	418, 1889,
	419, 1889,
	420, 1889,
	421, 1889,
	422, 1889,
	423, 1889,
	425, 1889,
	426, 1889,
	427, 1889,
	428, 1889,
	429, 1889,
	430, 1889,
	432, 1889,
	433, 1889,
	434, 1889,
	435, 1889,
	436, 1889,
	437, 1889,
	438, 1889,
	439, 1889,
	440, 1889,
	442, 1889,
	445, 1889,
	446, 1889,
	448, 1889,
	449, 1889,
	-2, 0,
	-1, 1294,
	148, 1796,
	377, 1796,
	427, 1796,
	446, 1796,
	-2, 0,
	-1, 1364,
	1, 1842,
	443, 1842,
	445, 1842,
	446, 1842,
	447, 1842,
	-2, 607,
	-1, 1365,
	1, 1794,
	443, 1794,
	445, 1794,
	446, 1794,
	447, 1794,
	-2, 608,
	-1, 1378,
	1, 867,
	447, 867,
	-2, 872,
	-1, 1383,
	132, 980,
	218, 980,
	247, 980,
	-2, 938,
	-1, 1476,
	118, 942,
	132, 942,
	190, 942,
	218, 942,
	247, 942,
	257, 942,
	391, 942,
	-2, 1336,
	-1, 1529,
	445, 1469,
	-2, 0,
	-1, 1564,
	118, 942,
	132, 942,
	190, 942,
	218, 942,
	247, 942,
	257, 942,
	391, 942,
	-2, 1052,
	-1, 1618,
	444, 1167,
	-2, 1155,
	-1, 1657,
	1, 448,
	447, 448,
	-2, 872,
	-1, 1910,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1216,
	-1, 1911,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1217,
	-1, 1912,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1218,
	-1, 1913,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1219,
	-1, 1914,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1220,
	-1, 1915,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1221,
	-1, 1916,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1222,
	-1, 1917,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1223,
	-1, 1929,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1235,
	-1, 1930,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1236,
	-1, 1931,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	425, 0,
	426, 0,
	427, 0,
	428, 0,
	429, 0,
	-2, 1237,
	-1, 1934,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1242,
	-1, 1940,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1246,
	-1, 1942,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1254,
	-1, 1943,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1255,
	-1, 1944,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1256,
	-1, 1945,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1257,
	-1, 2038,
	5, 1124,
	148, 1480,
	444, 1595,
	-2, 1586,
	-1, 2039,
	148, 1481,
	-2, 1846,
	-1, 2040,
	148, 1482,
	-2, 1719,
	-1, 2041,
	148, 1483,
	-2, 1647,
	-1, 2042,
	148, 1484,
	-2, 1681,
	-1, 2043,
	148, 1485,
	-2, 1717,
	-1, 2044,
	148, 1486,
	-2, 1787,
	-1, 2112,
	1, 1053,
	83, 1053,
	118, 1053,
	132, 1053,
	145, 1053,
	149, 1053,
	155, 1053,
	158, 1053,
	181, 1053,
	190, 1053,
	199, 1053,
	214, 1053,
	218, 1053,
	234, 1053,
	247, 1053,
	251, 1053,
	257, 1053,
	306, 1053,
	308, 1053,
	391, 1053,
	400, 1053,
	413, 1053,
	414, 1053,
	415, 1053,
	424, 1053,
	443, 1053,
	445, 1053,
	447, 1053,
	448, 1053,
	-2, 1052,
	-1, 2117,
	444, 1569,
	-2, 1581,
	-1, 2138,
	444, 1166,
	-2, 1156,
	-1, 2351,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1244,
	-1, 2352,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1248,
	-1, 2358,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1250,
	-1, 2538,
	196, 872,
	280, 872,
	287, 872,
	424, 872,
	-2, 445,
	-1, 2609,
	445, 1539,
	448, 1539,
	-2, 1555,
	-1, 2623,
	269, 966,
	-2, 776,
	-1, 2700,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1252,
	-1, 2707,
	194, 0,
	195, 0,
	241, 0,
	-2, 1271,
	-1, 2770,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1300,
	-1, 2771,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1301,
	-1, 2772,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1302,
	-1, 2776,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1306,
	-1, 2777,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1307,
	-1, 2778,
	14, 0,
	15, 0,
	16, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1308,
	-1, 2820,
	444, 1570,
	-2, 1582,
	-1, 2901,
	446, 1992,
	-2, 915,
	-1, 2943,
	194, 0,
	195, 0,
	241, 0,
	-2, 1272,
	-1, 2946,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1275,
	-1, 2947,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1277,
	-1, 3088,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1276,
	-1, 3089,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1278,
	-1, 3099,
	194, 0,
	-2, 1309,
	-1, 3189,
	194, 0,
	-2, 1310,
	-1, 3298,
	40, 0,
	169, 0,
	217, 0,
	340, 0,
	422, 0,
	430, 0,
	-2, 1849,
}

const sqlPrivate = 57344

const sqlLast = 69073

var sqlAct = [...]int{

	872, 3297, 3043, 3127, 3380, 3152, 3307, 3130, 3370, 3269,
	3271, 2263, 3255, 3308, 3268, 3309, 3155, 2272, 2069, 3116,
	1823, 2738, 2610, 3193, 3296, 1280, 2264, 988, 3080, 801,
	3057, 1897, 2840, 2887, 2892, 3002, 2379, 2104, 1588, 207,
	1141, 207, 207, 1957, 2632, 207, 207, 207, 207, 207,
	2640, 1391, 207, 2897, 2607, 548, 2841, 792, 1559, 2547,
	569, 2344, 1589, 3103, 1042, 2377, 2645, 2634, 980, 2260,
	2513, 2237, 1557, 2500, 2304, 1567, 2978, 1784, 207, 2240,
	665, 2460, 569, 1349, 2303, 2297, 1781, 2295, 1134, 2100,
	2476, 1538, 2273, 1773, 2793, 1576, 1774, 2169, 1701, 32,
	2105, 1023, 1710, 2487, 3194, 1502, 2221, 1484, 2459, 2160,
	1970, 2167, 1894, 1988, 2340, 86, 2238, 1890, 800, 138,
	2644, 1153, 829, 1276, 1728, 1734, 4, 868, 1030, 1689,
	1378, 2000, 1954, 1539, 1150, 2198, 1687, 2518, 2066, 2199,
	2608, 1143, 789, 199, 1289, 1770, 1273, 2266, 1209, 516,
	570, 2307, 3153, 1497, 1982, 201, 1802, 972, 1283, 975,
	1019, 571, 1263, 2092, 1548, 954, 200, 2077, 1971, 2034,
	207, 207, 1465, 145, 1392, 894, 1390, 532, 565, 1769,
	1790, 1239, 542, 791, 1287, 641, 2107, 610, 146, 1700,
	519, 1163, 828, 707, 952, 138, 527, 1377, 977, 2809,
	1396, 1221, 2810, 660, 2375, 1804, 2265, 1824, 1804, 58,
	3408, 1804, 1558, 2086, 2216, 574, 1027, 796, 3399, 3398,
	59, 2086, 2086, 1985, 2695, 3379, 577, 500, 1741, 2186,
	3366, 1737, 524, 3016, 63, 3364, 3329, 574, 3016, 2086,
	1816, 2651, 3327, 3324, 2086, 2086, 3325, 1474, 577, 661,
	2127, 3321, 3318, 969, 3322, 1741, 2103, 2652, 3294, 3293,
	674, 1741, 1741, 797, 69, 3290, 2536, 3289, 1816, 1184,
	1816, 3251, 175, 3178, 58, 3250, 663, 3241, 2131, 796,
	3016, 3240, 827, 1741, 3016, 59, 1986, 3234, 3228, 1178,
	1741, 3016, 3226, 3191, 75, 3016, 2131, 3177, 3174, 63,
	1741, 3016, 3144, 85, 2079, 1741, 3143, 76, 3136, 1741,
	177, 1741, 777, 3135, 3109, 3090, 3016, 1741, 2131, 3071,
	1006, 1816, 2664, 2432, 2433, 3040, 175, 776, 2086, 69,
	3034, 3015, 2945, 2086, 3016, 2131, 2911, 2903, 784, 2904,
	2904, 175, 1027, 2815, 2805, 77, 2816, 2806, 2799, 2731,
	2796, 2086, 1741, 176, 1987, 1984, 955, 955, 1001, 75,
	1404, 1405, 2394, 169, 177, 956, 2796, 2395, 85, 1404,
	1405, 170, 76, 2671, 2473, 2471, 2672, 2086, 2086, 177,
	2470, 2424, 2407, 2086, 2086, 2408, 1407, 2396, 2293, 2078,
	2086, 1820, 147, 3035, 2144, 1407, 2130, 2086, 2124, 2131,
	2119, 2086, 2085, 1741, 1741, 2086, 1819, 176, 2086, 1820,
	77, 2672, 1406, 958, 959, 2432, 2433, 169, 2450, 2451,
	2452, 1406, 176, 2213, 2158, 170, 1660, 2664, 2247, 1002,
	2343, 1740, 169, 1183, 2156, 2129, 1534, 1162, 2432, 2433,
	170, 2450, 2451, 2452, 960, 1351, 147, 2653, 1989, 3406,
	957, 783, 78, 1177, 782, 2438, 1805, 2941, 175, 1805,
	781, 147, 1805, 780, 2432, 2433, 2654, 2450, 2451, 2452,
	2378, 779, 844, 775, 774, 2447, 2325, 2253, 773, 772,
	771, 1680, 871, 2940, 144, 81, 770, 82, 769, 768,
	767, 766, 1412, 765, 764, 705, 177, 1172, 2447, 704,
	703, 1412, 702, 2432, 2433, 207, 175, 701, 700, 699,
	698, 697, 696, 695, 207, 694, 693, 78, 664, 692,
	691, 115, 690, 689, 2447, 688, 687, 686, 685, 684,
	683, 1434, 1435, 1436, 682, 207, 2448, 681, 673, 176,
	672, 632, 207, 631, 177, 1983, 590, 2438, 589, 144,
	81, 588, 82, 580, 579, 578, 2993, 2651, 207, 1045,
	207, 207, 1146, 207, 1045, 207, 1002, 116, 555, 2136,
	2438, 175, 2957, 207, 207, 554, 1029, 553, 147, 148,
	1034, 2905, 1427, 664, 552, 536, 115, 176, 197, 196,
	195, 175, 194, 193, 999, 192, 2438, 169, 207, 2813,
	1812, 2432, 2433, 1803, 2078, 170, 1870, 191, 190, 177,
	189, 175, 207, 188, 1146, 1146, 207, 207, 187, 207,
	1002, 2453, 186, 185, 184, 183, 147, 2449, 2448, 177,
	182, 207, 116, 181, 180, 2438, 179, 799, 178, 207,
	2516, 1475, 2401, 2390, 148, 2225, 2254, 2453, 2120, 177,
	986, 2448, 176, 207, 207, 207, 207, 207, 1146, 1146,
	983, 2447, 169, 1146, 1560, 207, 1146, 207, 2111, 1166,
	170, 2025, 176, 1428, 1017, 2023, 2021, 2448, 1685, 2432,
	2433, 2019, 169, 1171, 1284, 1176, 1403, 1182, 1156, 1826,
	170, 662, 176, 3314, 1505, 870, 2017, 1574, 1491, 1505,
	1504, 1168, 169, 1036, 1137, 1504, 826, 990, 1160, 3295,
	170, 147, 1146, 3224, 3184, 1038, 2448, 1131, 1136, 2449,
	1139, 1508, 3126, 1165, 1014, 3181, 1503, 2269, 574, 3072,
	3065, 147, 207, 2438, 1164, 3179, 2995, 2977, 2976, 577,
	2964, 2963, 2449, 2962, 2961, 1486, 207, 2434, 2435, 2436,
	2437, 2439, 2440, 1226, 2955, 1825, 2954, 968, 2953, 1222,
	1222, 207, 2952, 2876, 2829, 2828, 2826, 2819, 2449, 2790,
	1299, 2789, 1215, 1218, 2788, 2715, 2711, 1302, 797, 2675,
	2511, 2467, 138, 2458, 1408, 1409, 1410, 1411, 1413, 1414,
	1292, 1277, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 1160,
	2431, 2428, 2427, 1778, 1290, 2252, 1486, 2449, 2425, 2414,
	2413, 2438, 2412, 1383, 2448, 1043, 1267, 1270, 1223, 175,
	1154, 2409, 2406, 2384, 1296, 2383, 2376, 2294, 2112, 2444,
	2445, 2446, 1993, 1403, 1384, 1746, 2443, 2441, 2442, 2434,
	2435, 2436, 2437, 2439, 2440, 1744, 1404, 1405, 1402, 3378,
	1473, 3377, 2444, 2445, 2446, 1404, 1405, 177, 3330, 2443,
	2441, 2442, 2434, 2435, 2436, 2437, 2439, 2440, 989, 2740,
	1314, 3196, 1407, 982, 1487, 3285, 1485, 3283, 2444, 2445,
	2446, 1407, 3219, 3216, 984, 2443, 2441, 2442, 2434, 2435,
	2436, 2437, 2439, 2440, 3213, 3212, 3208, 2530, 1406, 3202,
	176, 3173, 1307, 1376, 3172, 2449, 1426, 1406, 1681, 2200,
	169, 1960, 3122, 3101, 1404, 1405, 3077, 2339, 170, 1382,
	3076, 3055, 3052, 3064, 2443, 2441, 2442, 2434, 2435, 2436,
	2437, 2439, 2440, 3047, 1389, 2992, 1487, 1966, 1381, 147,
	1407, 2975, 2925, 2922, 2856, 2855, 2844, 2843, 2801, 1379,
	175, 2706, 797, 2665, 207, 2626, 2597, 2578, 2557, 175,
	2556, 2532, 2432, 2433, 2472, 2405, 1406, 2404, 1429, 1430,
	1431, 1432, 2389, 2367, 777, 2234, 1509, 1506, 1412, 1385,
	207, 1498, 1495, 1536, 2140, 2139, 1545, 1412, 177, 776,
	207, 1045, 207, 207, 207, 1399, 1400, 177, 2115, 2097,
	1146, 569, 207, 207, 1507, 2084, 569, 207, 1434, 1435,
	1436, 2015, 207, 1469, 1573, 1582, 1537, 1434, 1435, 1436,
	1533, 1532, 2443, 2441, 2442, 2434, 2435, 2436, 2437, 2439,
	2440, 176, 1655, 1531, 2133, 1530, 1568, 1045, 1529, 1528,
	176, 169, 1499, 1500, 1527, 1526, 1412, 2557, 1525, 170,
	169, 1827, 1523, 1522, 1542, 1543, 1521, 1520, 170, 1427,
	1683, 1404, 1405, 1519, 1518, 1517, 1516, 1654, 1427, 1515,
	2268, 1514, 1513, 1512, 1511, 1488, 1470, 3051, 2493, 147,
	1468, 1463, 1013, 1004, 996, 2994, 2949, 1407, 2825, 2808,
	138, 2804, 797, 2393, 2438, 2432, 2433, 1585, 1556, 2098,
	2432, 2433, 1652, 2434, 2435, 2436, 2437, 2439, 2440, 2528,
	1680, 3217, 1466, 1406, 2024, 1569, 1031, 2635, 2022, 2020,
	3070, 1580, 811, 3036, 2018, 1033, 1578, 1595, 2581, 2811,
	2667, 2666, 1433, 1024, 1027, 1560, 1565, 1680, 1505, 2016,
	955, 1705, 2854, 3182, 1504, 2411, 2410, 1657, 1535, 1322,
	1428, 1676, 1374, 3180, 1658, 1680, 574, 2349, 1583, 1428,
	1518, 574, 1146, 207, 3125, 2188, 1028, 577, 1679, 1045,
	1518, 1824, 577, 1562, 762, 1032, 1493, 2202, 1018, 1584,
	1620, 3156, 1351, 1666, 1651, 2612, 1775, 2611, 2681, 2592,
	1350, 1695, 1723, 1586, 3104, 3381, 2265, 2742, 805, 967,
	2399, 3315, 2001, 2138, 3326, 1524, 1404, 1405, 207, 207,
	1501, 2605, 763, 1779, 1766, 207, 1199, 1025, 3323, 1555,
	2647, 1672, 2836, 3265, 1026, 207, 2888, 2438, 1985, 2301,
	3026, 3233, 1407, 3353, 207, 1197, 207, 1187, 207, 758,
	795, 1311, 207, 2145, 3354, 756, 2540, 1577, 754, 1725,
	627, 1709, 1727, 3403, 207, 1731, 3151, 3316, 1406, 1859,
	752, 3147, 3146, 749, 556, 1857, 2542, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 3145, 2870, 1592, 2867, 1472,
	2866, 1986, 2833, 1686, 1146, 207, 1146, 1762, 2832, 2162,
	2162, 1146, 2388, 2387, 207, 1198, 207, 207, 2448, 1735,
	2859, 2161, 794, 1165, 2011, 1796, 1146, 1146, 574, 207,
	1738, 1346, 2386, 1787, 1164, 207, 1828, 628, 2010, 577,
	569, 207, 2529, 207, 2385, 207, 1348, 207, 1412, 207,
	1410, 1411, 1413, 1414, 2353, 1033, 1730, 2218, 1024, 207,
	1667, 2212, 1765, 207, 1739, 2209, 2190, 562, 2126, 1987,
	1984, 1027, 207, 205, 1941, 1380, 1161, 1899, 1434, 1435,
	1436, 2171, 1024, 1232, 1838, 1231, 1230, 1867, 1229, 796,
	2261, 207, 1756, 1755, 1309, 1702, 3232, 207, 2436, 2437,
	2439, 2440, 746, 3085, 2682, 1032, 1251, 1210, 1033, 2449,
	1304, 994, 1690, 2189, 1345, 3013, 1691, 1045, 1193, 797,
	1868, 1834, 2152, 1699, 1956, 1789, 2118, 1956, 1792, 1427,
	3132, 2580, 2181, 1319, 1807, 1742, 1841, 1809, 1794, 2148,
	1811, 3010, 1025, 1208, 1814, 1290, 1703, 1704, 564, 1026,
	1830, 2150, 1874, 2134, 1877, 1754, 622, 986, 1032, 986,
	1387, 3287, 2180, 1989, 1822, 2846, 1025, 983, 2174, 983,
	1793, 3312, 679, 1026, 993, 1341, 1581, 1895, 1896, 3022,
	1207, 1012, 3011, 2151, 1836, 1837, 1964, 1014, 1821, 2684,
	1989, 1962, 2683, 1829, 2322, 574, 2149, 2722, 1972, 1973,
	1414, 1692, 1045, 1305, 991, 2642, 577, 1671, 1670, 2001,
	3345, 1680, 1677, 1694, 1569, 2725, 1972, 1998, 1848, 1323,
	1428, 1195, 815, 793, 1359, 621, 1342, 2441, 2442, 2434,
	2435, 2436, 2437, 2439, 2440, 3393, 1872, 1595, 1595, 2440,
	558, 2052, 1869, 1875, 3353, 207, 2643, 1681, 2200, 2589,
	630, 629, 2033, 2584, 2037, 2037, 2050, 563, 1972, 1722,
	1983, 2070, 2072, 2341, 2342, 2723, 2076, 1696, 1871, 1045,
	207, 1873, 2206, 1866, 1681, 2200, 1876, 2539, 1697, 207,
	777, 1373, 207, 777, 777, 1045, 1027, 1344, 1804, 3313,
	1620, 1620, 1681, 2200, 797, 1886, 1707, 560, 1887, 1888,
	2173, 2642, 2116, 1210, 1674, 1997, 3209, 797, 2600, 1989,
	1027, 797, 2541, 1351, 2125, 2569, 2113, 3020, 659, 1496,
	3006, 2857, 2159, 3007, 760, 1705, 2099, 759, 1690, 2526,
	2109, 2110, 1691, 750, 557, 2089, 750, 2868, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 1858, 1968, 751, 1310,
	795, 750, 1856, 737, 1690, 2249, 2568, 1697, 1691, 1989,
	3009, 2210, 2571, 3311, 207, 1697, 1995, 2931, 3360, 620,
	561, 619, 3012, 1898, 1250, 788, 1308, 790, 737, 3095,
	982, 559, 982, 2573, 3276, 3221, 1192, 2575, 1462, 2847,
	3248, 984, 797, 984, 1621, 2093, 1045, 1592, 1592, 623,
	788, 207, 3344, 1992, 796, 3133, 2045, 2403, 2061, 207,
	2074, 2108, 3373, 2172, 1320, 2328, 138, 1692, 1356, 207,
	2082, 2083, 794, 1675, 2128, 2090, 2094, 2095, 2572, 1694,
	2926, 955, 207, 3021, 2822, 1146, 1565, 680, 1007, 2933,
	786, 1328, 737, 1692, 738, 3310, 2355, 207, 1045, 1955,
	3352, 207, 207, 3350, 2878, 1694, 2008, 1938, 2002, 1507,
	2135, 2009, 747, 512, 788, 1321, 2013, 2014, 1318, 738,
	1306, 992, 1840, 3008, 3162, 2163, 3054, 207, 2630, 207,
	2256, 1768, 207, 1696, 2193, 2364, 3394, 507, 1544, 796,
	1005, 3082, 1693, 2143, 1000, 1386, 2331, 207, 2235, 787,
	1499, 1500, 1357, 581, 207, 1963, 207, 2362, 207, 1696,
	2185, 2175, 2177, 2142, 207, 499, 1011, 207, 3246, 207,
	2207, 207, 2192, 207, 207, 1711, 207, 1146, 1146, 1146,
	2146, 1146, 1395, 738, 3343, 207, 207, 2220, 207, 1805,
	2215, 2117, 1715, 1547, 1595, 207, 2932, 3247, 1551, 1726,
	2222, 2973, 2166, 2289, 2290, 2227, 207, 2229, 207, 2313,
	2315, 1706, 2201, 2203, 2204, 2205, 2183, 1668, 1705, 3388,
	2219, 2519, 1358, 1697, 2244, 1137, 2191, 207, 207, 207,
	1554, 207, 739, 2258, 1712, 3138, 1936, 1939, 2330, 2208,
	1160, 3081, 3137, 2211, 3120, 3371, 3199, 1620, 2091, 1697,
	2267, 1165, 2267, 1688, 207, 2327, 574, 739, 2359, 1551,
	1394, 2835, 2223, 1552, 2232, 2276, 2300, 577, 2631, 2360,
	815, 2553, 2365, 793, 815, 1547, 2502, 2248, 2549, 2257,
	2239, 1462, 1129, 2236, 1935, 1788, 1665, 1129, 1681, 1678,
	2314, 1554, 2222, 1952, 2222, 1777, 2285, 2316, 138, 2317,
	2271, 2320, 2157, 2321, 2326, 1716, 2291, 2779, 1776, 1549,
	2287, 3025, 1750, 3372, 1882, 1950, 1160, 1160, 3024, 1478,
	2286, 739, 1290, 1483, 1552, 2292, 3222, 2721, 2302, 2282,
	2194, 2283, 2329, 2284, 740, 2288, 3083, 3256, 2974, 1394,
	1329, 1551, 2278, 2356, 1550, 3374, 1393, 2503, 582, 583,
	1663, 2333, 1863, 207, 1592, 2381, 2382, 1553, 1693, 740,
	3387, 2489, 1661, 2893, 3058, 1664, 2233, 1253, 1717, 1718,
	2391, 1160, 741, 1554, 3121, 1395, 2336, 1713, 2559, 678,
	2558, 2338, 986, 2347, 1693, 508, 1835, 2501, 2335, 671,
	2490, 1549, 983, 2088, 2087, 2123, 2122, 741, 2121, 986,
	1224, 2246, 2432, 2433, 794, 1714, 1552, 1937, 3204, 983,
	1883, 2361, 1697, 1238, 3044, 3128, 1946, 1225, 1553, 1236,
	2363, 785, 2676, 740, 1947, 1393, 1550, 1948, 514, 1786,
	1953, 2354, 3357, 3154, 585, 584, 797, 509, 2780, 3118,
	2602, 1045, 1733, 3259, 2781, 3205, 2979, 2469, 2392, 2474,
	2794, 2006, 3359, 3328, 2481, 2482, 3023, 207, 2520, 3218,
	207, 741, 1732, 2483, 2195, 2196, 3100, 207, 3223, 2972,
	207, 207, 1045, 1371, 3119, 510, 2872, 511, 2504, 1353,
	2461, 1045, 2705, 2523, 586, 587, 2426, 207, 1339, 1719,
	1729, 2398, 3129, 1337, 1335, 2506, 1333, 2497, 2366, 1331,
	1553, 3260, 207, 3206, 2243, 1325, 1234, 2507, 2508, 2217,
	2488, 2187, 2141, 1703, 1704, 2478, 1575, 2496, 1572, 1372,
	207, 207, 207, 2485, 2486, 3253, 207, 2491, 1300, 207,
	2462, 2510, 2005, 2537, 2438, 1855, 207, 207, 207, 207,
	207, 790, 2515, 2324, 2514, 2323, 2543, 2319, 1865, 1845,
	207, 207, 1720, 1653, 2527, 1510, 3306, 2492, 207, 1303,
	1214, 2999, 2464, 2465, 2466, 2891, 2852, 2850, 2834, 1949,
	207, 1146, 2475, 207, 676, 677, 2629, 2614, 1951, 1045,
	2613, 2262, 2524, 2251, 669, 670, 1045, 2250, 2555, 2230,
	2554, 207, 1818, 1817, 207, 207, 2561, 2535, 2565, 2566,
	2550, 748, 1815, 1237, 207, 982, 1813, 1146, 207, 1235,
	1146, 1146, 1146, 2733, 1595, 2448, 984, 207, 513, 1370,
	2521, 2522, 982, 207, 1810, 1352, 2619, 1808, 2615, 207,
	2583, 207, 2546, 984, 1338, 1806, 2538, 1797, 207, 1336,
	1334, 1747, 1332, 1745, 2576, 1330, 2577, 2560, 2544, 2563,
	1595, 1324, 1233, 2505, 1736, 1724, 1721, 1708, 2590, 1698,
	2638, 1146, 1146, 2633, 3166, 3354, 3279, 1620, 2598, 207,
	207, 1695, 2345, 207, 2595, 2663, 2596, 2579, 1854, 1397,
	2574, 2637, 2649, 3074, 2588, 2585, 207, 964, 1045, 207,
	207, 1045, 207, 3073, 1684, 2679, 1695, 2480, 2586, 2594,
	1189, 2192, 2587, 1620, 2599, 2495, 2449, 2593, 207, 2498,
	3168, 965, 2162, 1765, 1129, 2179, 2162, 2902, 1705, 1842,
	3211, 753, 755, 2178, 1368, 1369, 1735, 2176, 2509, 2591,
	1861, 3186, 1735, 2214, 1404, 1405, 902, 2517, 2980, 2197,
	2646, 2182, 1546, 2346, 797, 1404, 1405, 2533, 2534, 2646,
	2678, 1045, 1401, 2184, 815, 2689, 2674, 2636, 2655, 3252,
	1129, 1398, 1045, 3225, 207, 2620, 2708, 2882, 2622, 2623,
	2624, 1407, 138, 2877, 1592, 203, 2818, 502, 503, 2270,
	2662, 520, 502, 520, 530, 535, 1406, 515, 551, 2075,
	1656, 1587, 3369, 966, 2525, 3386, 203, 1406, 1475, 2657,
	2658, 2659, 2743, 2660, 2661, 1313, 2717, 2718, 2719, 2686,
	1592, 1312, 2691, 2824, 668, 2690, 2728, 2648, 203, 2669,
	2670, 2693, 2154, 2687, 2531, 2442, 2434, 2435, 2436, 2437,
	2439, 2440, 2432, 2433, 526, 1160, 1404, 1405, 2155, 1895,
	2749, 2012, 2517, 2154, 2153, 2007, 2713, 2791, 1980, 1355,
	1595, 2950, 1354, 2823, 2720, 1895, 2759, 207, 1473, 1471,
	2724, 2726, 2727, 2732, 3395, 3112, 3068, 3046, 2739, 2921,
	2910, 207, 2886, 2875, 2874, 2745, 2873, 1045, 2849, 2746,
	2656, 2627, 2625, 2280, 2255, 2231, 2787, 1967, 1800, 2748,
	1799, 803, 1129, 2812, 2807, 1798, 1780, 207, 2756, 1595,
	1595, 2783, 1758, 1620, 1757, 2758, 502, 502, 1753, 1752,
	1751, 1749, 986, 1748, 203, 1595, 1595, 1388, 1367, 1366,
	986, 986, 983, 1347, 986, 1343, 2803, 1340, 1326, 2784,
	983, 983, 1262, 1261, 983, 1260, 2797, 2798, 2222, 1259,
	1258, 207, 1257, 2795, 1154, 1965, 1595, 1043, 986, 1256,
	2800, 138, 1620, 1620, 1885, 1255, 1254, 2860, 983, 2792,
	1252, 1247, 1246, 1245, 1478, 1244, 1243, 1206, 1620, 1620,
	1205, 2814, 1204, 207, 207, 207, 2869, 1203, 1202, 1201,
	1200, 1194, 2871, 2821, 1188, 1186, 1185, 1010, 1009, 939,
	1045, 207, 2830, 849, 1659, 1146, 2864, 761, 614, 1620,
	745, 3131, 1361, 74, 1196, 601, 68, 2730, 2848, 3264,
	1592, 2057, 207, 2838, 735, 2567, 2744, 1844, 2736, 1327,
	1846, 2494, 2906, 2096, 3245, 207, 207, 1146, 1146, 1146,
	1581, 207, 207, 207, 2958, 2895, 207, 207, 2402, 3192,
	3094, 2865, 2004, 207, 1492, 2858, 70, 837, 922, 2898,
	2917, 2192, 2899, 3000, 2837, 2306, 1045, 2305, 2930, 1592,
	1592, 2894, 804, 2881, 1048, 1669, 843, 1682, 2137, 2036,
	1591, 846, 1593, 848, 847, 1592, 1592, 2885, 2222, 2889,
	2851, 1594, 2853, 2883, 1494, 845, 1590, 2053, 2478, 2245,
	2274, 2948, 1241, 2896, 2900, 725, 1673, 1961, 1999, 2397,
	1489, 207, 817, 2908, 2907, 2944, 1592, 839, 1996, 1003,
	2912, 2918, 2919, 2913, 2924, 816, 2935, 2920, 1765, 2499,
	2641, 2817, 2923, 2276, 3063, 1881, 2337, 1878, 617, 2928,
	1129, 2429, 1981, 2820, 995, 982, 2058, 2051, 2047, 1375,
	2827, 1464, 2275, 982, 982, 2936, 984, 982, 1035, 820,
	1959, 1480, 2371, 2512, 984, 984, 2650, 2132, 984, 1889,
	1767, 963, 207, 962, 961, 3270, 3267, 2929, 1662, 2147,
	1456, 982, 1045, 2616, 1045, 833, 1159, 2479, 2677, 1211,
	3210, 1455, 984, 757, 3201, 2914, 2915, 2916, 1022, 1595,
	1021, 1020, 2552, 207, 207, 207, 3392, 2845, 2971, 174,
	171, 173, 172, 2862, 2601, 207, 90, 37, 36, 35,
	17, 207, 114, 207, 113, 1129, 207, 207, 207, 207,
	207, 112, 111, 110, 109, 108, 2884, 207, 207, 1146,
	107, 1045, 2981, 1146, 2982, 2983, 3018, 2985, 106, 105,
	104, 997, 1620, 2987, 103, 2514, 102, 2991, 101, 207,
	668, 100, 1045, 2997, 99, 1146, 98, 2984, 3042, 97,
	96, 2988, 95, 94, 3017, 207, 93, 92, 3048, 2998,
	91, 1008, 3028, 34, 547, 544, 50, 49, 551, 3033,
	89, 88, 1129, 16, 33, 14, 207, 54, 55, 803,
	13, 29, 1045, 803, 203, 3060, 203, 203, 1129, 1151,
	3019, 203, 30, 2638, 2996, 80, 3037, 79, 3062, 203,
	1167, 3029, 3030, 3049, 28, 3075, 3038, 15, 1045, 27,
	3041, 3059, 3027, 986, 3069, 1169, 3061, 1173, 25, 1179,
	3032, 3067, 26, 983, 1191, 11, 8, 3045, 7, 10,
	12, 3056, 3050, 24, 143, 142, 73, 141, 1213, 1592,
	72, 140, 203, 203, 1045, 1151, 3084, 139, 3086, 3106,
	207, 71, 207, 3066, 1045, 207, 23, 203, 9, 22,
	135, 1765, 67, 207, 3102, 1249, 2646, 3091, 137, 136,
	64, 3078, 134, 133, 65, 132, 131, 3039, 66, 203,
	203, 203, 203, 1151, 130, 3115, 207, 21, 5, 53,
	6, 551, 3079, 203, 3110, 2680, 3107, 3108, 207, 1129,
	83, 84, 1298, 31, 2986, 207, 62, 61, 60, 1301,
	1146, 3114, 20, 52, 19, 207, 3150, 165, 164, 163,
	2990, 3158, 162, 3134, 3113, 158, 157, 2057, 2057, 161,
	159, 160, 156, 129, 167, 3159, 207, 166, 3161, 3140,
	154, 3148, 151, 3171, 150, 153, 155, 152, 1595, 149,
	3164, 1129, 3157, 168, 128, 207, 3165, 57, 203, 3175,
	3176, 207, 127, 126, 3170, 125, 124, 123, 56, 207,
	18, 2898, 203, 3169, 2, 986, 3163, 1, 0, 0,
	0, 2638, 0, 3207, 0, 983, 0, 535, 3198, 0,
	3190, 0, 0, 0, 0, 0, 207, 207, 3195, 1595,
	3197, 1620, 3185, 2053, 2053, 0, 0, 0, 0, 0,
	3167, 0, 0, 207, 1146, 0, 0, 0, 0, 207,
	0, 0, 0, 1146, 1146, 3220, 0, 2057, 2057, 2057,
	0, 207, 3239, 207, 3141, 3142, 982, 0, 1043, 1457,
	1458, 1459, 1460, 1461, 3227, 0, 0, 984, 3237, 3238,
	3231, 0, 1620, 207, 3230, 3249, 3215, 3242, 0, 207,
	207, 0, 1045, 3261, 3092, 0, 0, 0, 0, 1477,
	3236, 0, 207, 3272, 1595, 1490, 0, 3280, 3235, 0,
	0, 0, 0, 0, 3282, 3273, 3284, 3111, 3277, 0,
	0, 0, 3291, 3266, 0, 0, 0, 3274, 3292, 0,
	3092, 0, 207, 2053, 2053, 2053, 0, 3214, 1592, 0,
	1898, 3288, 3286, 0, 0, 3317, 0, 0, 0, 986,
	0, 0, 3302, 3303, 3305, 3304, 3243, 1620, 3244, 983,
	0, 0, 0, 0, 0, 3333, 3331, 3335, 207, 986,
	0, 3319, 0, 0, 0, 3341, 0, 3340, 3332, 983,
	3342, 0, 0, 0, 3262, 3337, 0, 207, 0, 1592,
	3338, 3339, 0, 0, 0, 0, 3334, 0, 3336, 0,
	0, 0, 0, 3351, 3349, 3281, 3348, 0, 0, 0,
	502, 207, 3355, 0, 0, 3272, 3358, 3356, 0, 3363,
	0, 3365, 0, 0, 1540, 1540, 1540, 3368, 982, 3367,
	0, 203, 0, 203, 3362, 0, 203, 0, 0, 984,
	0, 0, 3376, 3375, 0, 0, 1167, 0, 1151, 203,
	3383, 3385, 3382, 0, 3384, 0, 0, 203, 1167, 520,
	3389, 0, 203, 1167, 1592, 3396, 0, 3397, 551, 0,
	0, 0, 0, 0, 0, 0, 3390, 3391, 0, 2276,
	0, 0, 3400, 3401, 3402, 3404, 3405, 0, 0, 0,
	0, 0, 0, 803, 3409, 0, 0, 0, 0, 2432,
	2433, 0, 2450, 2451, 2452, 3407, 3361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2710, 0,
	0, 0, 0, 0, 1129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1404, 1405, 0, 0, 1898, 0,
	0, 0, 0, 0, 0, 1129, 0, 2057, 2057, 2447,
	0, 0, 0, 0, 1129, 0, 2368, 2369, 0, 0,
	1407, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 0, 0, 815, 0, 0,
	0, 0, 982, 0, 0, 0, 1406, 0, 0, 0,
	815, 0, 0, 984, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2438, 0, 2053, 2053, 0, 0, 2057, 2057, 2057,
	2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057,
	2057, 2057, 2057, 2057, 2057, 2057, 0, 2057, 0, 0,
	0, 0, 1129, 0, 203, 203, 2455, 2456, 2457, 1129,
	0, 203, 0, 0, 0, 0, 1412, 0, 0, 0,
	0, 1785, 2453, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 203, 0, 203, 0, 0, 0, 502, 0,
	0, 0, 0, 0, 0, 0, 1434, 1435, 1436, 0,
	1801, 0, 2448, 2053, 2053, 2053, 2053, 2053, 2053, 2053,
	2053, 2053, 2053, 2053, 2053, 2053, 2053, 2053, 2053, 2053,
	2053, 2053, 0, 2053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 551, 0, 0, 3013, 0, 0, 1427, 0, 0,
	203, 0, 1151, 203, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 1129, 551, 0, 0, 0, 0,
	3010, 203, 0, 3003, 0, 0, 203, 203, 0, 203,
	0, 203, 0, 203, 0, 203, 3001, 0, 0, 0,
	0, 0, 3005, 2449, 0, 1860, 0, 0, 0, 1862,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 3011, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1129, 0, 0, 535, 0, 0,
	0, 0, 0, 551, 0, 1129, 0, 0, 1428, 0,
	0, 3004, 0, 0, 0, 0, 1879, 0, 1884, 0,
	0, 0, 0, 0, 1891, 0, 0, 0, 0, 0,
	0, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 0, 1940, 0, 1942,
	1943, 1944, 1945, 2444, 2445, 2446, 0, 0, 0, 0,
	2443, 2441, 2442, 2434, 2435, 2436, 2437, 2439, 2440, 1969,
	0, 0, 0, 0, 0, 0, 0, 2432, 2433, 0,
	2450, 2451, 2452, 0, 1477, 0, 0, 0, 1994, 0,
	0, 0, 0, 0, 0, 0, 2709, 0, 0, 3006,
	1129, 0, 3007, 0, 0, 0, 2701, 2702, 1408, 1409,
	1410, 1411, 1413, 1414, 0, 0, 0, 0, 0, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 0, 0, 0, 0,
	2049, 502, 2060, 2062, 2067, 0, 0, 2447, 0, 3009,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 3012, 0, 0, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 203, 0, 502, 0, 0, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2760, 2761, 2762, 2763,
	2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773,
	2774, 2775, 2776, 2777, 2778, 0, 2782, 0, 0, 2438,
	0, 0, 0, 1129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2432, 2433, 0, 2450, 2451, 2452, 0,
	122, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 117, 0,
	520, 0, 3008, 0, 0, 0, 0, 0, 0, 0,
	2453, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 119, 0, 1129,
	0, 0, 0, 2447, 0, 0, 0, 2170, 0, 38,
	2448, 69, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 41, 0, 0, 0, 2057, 42, 0, 203, 0,
	0, 75, 0, 0, 120, 0, 0, 0, 0, 40,
	85, 0, 0, 203, 76, 43, 0, 203, 2224, 0,
	0, 0, 0, 0, 0, 0, 0, 2226, 0, 2228,
	0, 0, 0, 0, 2057, 2438, 0, 0, 0, 0,
	0, 44, 0, 203, 0, 1167, 0, 0, 203, 0,
	0, 0, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 2449, 2454, 1785, 0, 0, 0, 0, 0, 0,
	2170, 2053, 502, 0, 2279, 1129, 0, 1129, 0, 0,
	203, 0, 0, 203, 0, 203, 2453, 203, 0, 203,
	203, 0, 1151, 0, 0, 0, 0, 0, 0, 0,
	0, 2298, 668, 0, 2170, 0, 0, 0, 0, 0,
	2053, 203, 0, 0, 0, 0, 2448, 0, 0, 0,
	0, 0, 1167, 2057, 1167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1129, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 203, 203, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 1129, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	203, 2444, 2445, 2446, 0, 0, 0, 0, 2443, 2441,
	2442, 2434, 2435, 2436, 2437, 2439, 2440, 0, 0, 0,
	48, 144, 81, 0, 82, 1129, 46, 0, 0, 2053,
	121, 0, 0, 0, 0, 0, 47, 2449, 0, 0,
	0, 0, 0, 175, 0, 0, 0, 0, 2351, 2352,
	0, 1129, 0, 0, 2358, 51, 0, 0, 115, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 1475, 0, 2372, 2373, 0, 0, 0, 0, 1994,
	0, 177, 0, 0, 0, 0, 0, 1129, 2380, 0,
	58, 0, 0, 0, 0, 0, 0, 1129, 0, 1167,
	0, 59, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2400, 63, 148, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 2415, 0,
	815, 0, 0, 0, 169, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 69, 0, 2444, 2445, 2446,
	0, 0, 0, 0, 2443, 2441, 2442, 2434, 2435, 2436,
	2437, 2439, 2440, 147, 0, 0, 3, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 2067, 2067, 2067, 0,
	0, 0, 0, 0, 85, 0, 203, 0, 76, 0,
	0, 1540, 0, 0, 203, 203, 0, 0, 203, 2484,
	0, 0, 0, 502, 0, 0, 502, 0, 0, 0,
	0, 0, 0, 502, 0, 0, 502, 502, 0, 0,
	0, 0, 203, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 1167, 3099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1167, 0,
	0, 0, 0, 0, 0, 0, 803, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 2170, 2548, 803,
	0, 0, 2170, 3123, 0, 2548, 0, 0, 0, 0,
	0, 0, 2170, 2548, 2170, 2548, 2548, 58, 0, 0,
	0, 0, 0, 0, 2570, 0, 203, 203, 59, 0,
	0, 0, 0, 0, 0, 1129, 0, 0, 0, 0,
	0, 815, 63, 0, 0, 0, 203, 0, 0, 1151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 2604, 0, 0,
	2606, 2609, 69, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 3189, 203, 0, 144, 81, 0, 82, 1151,
	0, 903, 75, 0, 0, 2170, 0, 502, 2639, 0,
	0, 85, 0, 0, 2170, 76, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 664,
	0, 0, 115, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 203, 1785, 0, 0, 1785,
	0, 0, 0, 77, 0, 177, 0, 0, 0, 0,
	0, 204, 2685, 0, 0, 1151, 203, 0, 203, 0,
	0, 0, 0, 0, 0, 1404, 1405, 0, 116, 0,
	0, 0, 2692, 204, 203, 0, 1891, 0, 0, 0,
	148, 0, 2696, 2697, 0, 0, 2700, 0, 176, 0,
	2703, 1407, 0, 0, 0, 0, 0, 0, 169, 2707,
	0, 0, 0, 0, 0, 0, 170, 0, 2714, 1404,
	1405, 2484, 0, 0, 0, 0, 0, 1406, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 147, 0, 0,
	2741, 0, 2734, 0, 0, 1407, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 2750, 2751, 0, 2752, 2753, 2754, 0, 0, 2755,
	0, 1406, 0, 2757, 0, 0, 0, 0, 0, 1426,
	0, 2939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 144, 81, 0, 82, 0, 1429, 1430, 1431,
	1432, 0, 0, 0, 2785, 2786, 0, 1412, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2704, 664, 203, 0, 115,
	0, 0, 2802, 502, 0, 0, 0, 1434, 1435, 1436,
	0, 1429, 1430, 1431, 1432, 0, 0, 502, 0, 0,
	0, 1412, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1167, 0, 116, 0, 869, 0, 0,
	0, 1434, 1435, 1436, 0, 2831, 0, 148, 1427, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 2839,
	2842, 0, 0, 0, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 202, 551, 0, 0,
	0, 0, 2861, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 0, 147, 0, 0, 575, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2879,
	203, 203, 0, 0, 0, 0, 0, 0, 0, 575,
	0, 1433, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	0, 0, 0, 0, 0, 1540, 0, 0, 2170, 203,
	0, 0, 0, 0, 0, 0, 2909, 0, 0, 0,
	0, 2298, 2298, 0, 0, 1433, 0, 668, 668, 2170,
	0, 0, 1785, 1785, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2937, 2938, 0, 0, 0, 0, 2942, 2943, 0,
	0, 0, 2946, 2947, 0, 985, 0, 0, 0, 2951,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2959, 2956, 0,
	0, 0, 0, 0, 0, 2960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 1167, 0,
	1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 204,
	1050, 204, 204, 1050, 0, 1050, 204, 0, 0, 2170,
	2548, 2170, 0, 0, 204, 978, 0, 0, 0, 0,
	0, 1167, 0, 0, 0, 0, 2842, 2170, 0, 2548,
	0, 0, 1167, 1167, 203, 2170, 2548, 0, 0, 0,
	0, 0, 0, 203, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 1050, 1050, 204, 204, 0,
	0, 0, 0, 0, 0, 3053, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 208, 0, 0, 0, 0,
	0, 2170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 204, 204, 204, 0, 1050,
	1050, 0, 1167, 0, 1050, 2842, 0, 1050, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3087, 3088, 3089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3097, 3098,
	0, 0, 0, 1050, 0, 0, 0, 568, 0, 0,
	0, 0, 3105, 0, 0, 0, 0, 2432, 2433, 0,
	2450, 2451, 2452, 204, 0, 0, 2170, 0, 2548, 0,
	0, 3117, 0, 0, 0, 0, 0, 204, 0, 203,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2842,
	0, 0, 0, 0, 0, 0, 0, 3139, 0, 0,
	0, 0, 551, 0, 0, 0, 0, 0, 0, 803,
	0, 0, 0, 0, 2609, 0, 0, 2447, 0, 0,
	0, 203, 0, 0, 0, 2842, 0, 0, 2842, 0,
	0, 1167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2842,
	2842, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 202, 202, 0,
	0, 2741, 202, 0, 0, 0, 0, 502, 0, 0,
	575, 0, 0, 0, 0, 3117, 0, 0, 0, 2438,
	0, 0, 0, 0, 0, 3200, 0, 0, 3203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2170, 2548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 202, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 0, 2548, 0, 0, 202, 0,
	2453, 0, 0, 0, 0, 0, 0, 1167, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 202, 202, 202, 0, 0, 0, 0, 0, 3257,
	2448, 0, 0, 0, 202, 1167, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	803, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1404, 1405, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 2741, 3301,
	3301, 3301, 1050, 0, 204, 204, 0, 0, 0, 1407,
	0, 1050, 204, 0, 0, 0, 0, 204, 3320, 202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 2170, 1406, 2842, 0, 2842, 0,
	0, 2449, 0, 1426, 0, 0, 0, 0, 1050, 0,
	0, 3301, 0, 3117, 0, 0, 0, 0, 0, 1404,
	1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1167, 1440, 0,
	0, 0, 0, 0, 0, 1407, 0, 0, 1453, 2699,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1429, 1430, 1431, 1432, 0,
	0, 1406, 0, 0, 0, 1412, 0, 0, 0, 1426,
	0, 0, 3301, 0, 0, 0, 1423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1040, 0, 1434, 1435, 1436, 0, 0,
	1158, 2444, 2445, 2446, 0, 0, 0, 0, 2443, 2441,
	2442, 2434, 2435, 2436, 2437, 2439, 2440, 0, 0, 0,
	0, 0, 0, 1050, 204, 0, 0, 0, 0, 0,
	1050, 1429, 1430, 1431, 1432, 0, 0, 0, 0, 0,
	0, 1412, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 1046, 0, 0, 1147, 0, 1046,
	0, 0, 0, 0, 0, 0, 1242, 1444, 1454, 204,
	204, 1434, 1435, 1436, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1266, 1266,
	1266, 1158, 1450, 1451, 0, 204, 0, 204, 0, 204,
	1421, 1422, 1297, 0, 0, 0, 0, 0, 0, 1147,
	1147, 0, 1563, 0, 985, 1442, 0, 202, 0, 1433,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	202, 1563, 0, 0, 0, 0, 0, 1428, 575, 1452,
	0, 0, 0, 575, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1147, 1147, 1050, 0, 1050, 1147, 0,
	0, 1147, 1050, 0, 0, 204, 0, 1360, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 1050, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 204, 204, 0, 204, 1433, 204, 0, 204, 873,
	204, 0, 0, 0, 0, 0, 0, 1147, 0, 0,
	0, 0, 0, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1417, 1415, 1416, 1408, 1409, 1410,
	1411, 1413, 1414, 0, 0, 0, 0, 0, 1050, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1404,
	1405, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1407, 0, 0, 0, 0,
	1443, 0, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0,
	1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 0,
	0, 1406, 0, 0, 0, 202, 202, 0, 0, 1426,
	0, 0, 202, 1050, 0, 0, 1404, 1405, 0, 0,
	0, 0, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 202, 0, 202, 0, 202, 0, 0, 838, 87,
	0, 0, 1407, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2698, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1406, 0,
	0, 1429, 1430, 1431, 1432, 1570, 1426, 0, 0, 0,
	1050, 1412, 0, 0, 0, 0, 0, 0, 1579, 0,
	0, 0, 0, 204, 0, 0, 1050, 0, 0, 0,
	0, 202, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 1434, 1435, 1436, 0, 87, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 0, 0, 575, 202, 0,
	202, 0, 202, 0, 202, 0, 202, 0, 1429, 1430,
	1431, 1432, 0, 0, 0, 0, 1046, 0, 1412, 0,
	0, 0, 0, 0, 0, 1147, 568, 0, 0, 202,
	0, 568, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1454, 0, 778, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 798, 0, 0, 0,
	0, 0, 1046, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 0, 0,
	0, 0, 0, 0, 0, 0, 973, 0, 0, 0,
	204, 0, 1442, 0, 0, 0, 0, 0, 0, 1427,
	204, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 1050, 0, 0, 0,
	0, 0, 0, 1428, 0, 0, 0, 0, 204, 1050,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 1760, 0, 0, 0, 0, 0, 0,
	1772, 0, 0, 0, 0, 0, 0, 1147, 0, 0,
	1428, 0, 0, 0, 1046, 204, 0, 0, 204, 1242,
	204, 1791, 204, 1791, 204, 204, 0, 0, 1050, 1050,
	1050, 0, 1050, 0, 0, 1445, 0, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 202,
	1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 204,
	204, 0, 204, 0, 0, 0, 0, 0, 0, 1772,
	0, 0, 1832, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 1047, 0,
	1843, 1148, 0, 1047, 0, 0, 1849, 1443, 1850, 0,
	1851, 0, 1852, 0, 1853, 1446, 0, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 0, 1147,
	0, 1147, 0, 0, 0, 0, 1147, 1864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1147, 1147, 1148, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 1404, 1405, 0, 0, 1148, 1148, 202,
	0, 0, 1148, 0, 0, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 575, 1407,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1046, 0, 202, 1406, 0, 0, 0, 202,
	0, 1148, 0, 1426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 1050, 0, 202, 0, 202, 0, 202, 0,
	202, 202, 0, 0, 0, 0, 0, 0, 0, 2357,
	0, 0, 87, 0, 87, 0, 87, 0, 0, 0,
	0, 0, 202, 1050, 0, 1429, 1430, 1431, 1432, 0,
	0, 0, 1050, 0, 0, 1412, 0, 1046, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 202, 202, 2114, 202, 0,
	0, 0, 0, 0, 0, 1434, 1435, 1436, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 798, 87, 0, 0, 0, 0, 0, 0, 87,
	0, 204, 204, 0, 1046, 0, 87, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 1427, 58, 0, 0,
	1046, 204, 1050, 0, 0, 0, 0, 0, 59, 0,
	1050, 0, 0, 0, 0, 0, 0, 1050, 0, 0,
	0, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 1050, 204,
	0, 1050, 1050, 1050, 0, 0, 0, 0, 204, 0,
	0, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 1428, 0, 0,
	0, 85, 1050, 1050, 0, 76, 0, 0, 0, 0,
	204, 0, 1158, 0, 0, 0, 0, 0, 0, 778,
	0, 1046, 0, 0, 0, 0, 0, 0, 0, 1050,
	1047, 204, 1050, 204, 0, 0, 0, 1467, 0, 1148,
	0, 0, 2242, 77, 0, 0, 0, 1772, 0, 204,
	0, 0, 0, 0, 0, 1476, 0, 985, 0, 1482,
	1147, 0, 0, 0, 0, 985, 985, 0, 0, 985,
	0, 0, 0, 1046, 1404, 1405, 1047, 0, 0, 2281,
	0, 0, 1266, 0, 1266, 0, 1266, 0, 1158, 1158,
	0, 0, 1050, 1563, 0, 0, 0, 0, 0, 0,
	1407, 0, 0, 1050, 0, 0, 0, 0, 0, 0,
	2318, 0, 0, 0, 1417, 1415, 1416, 1408, 1409, 1410,
	1411, 1413, 1414, 0, 0, 0, 1406, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 202, 0, 0,
	0, 0, 2332, 1158, 2334, 0, 0, 0, 0, 0,
	78, 0, 1147, 1147, 1147, 0, 1147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 202, 2348,
	0, 0, 0, 0, 0, 1563, 0, 0, 0, 0,
	2350, 0, 144, 81, 0, 82, 0, 202, 0, 0,
	87, 0, 0, 1561, 0, 1564, 1429, 1430, 1431, 1432,
	0, 1148, 0, 0, 175, 0, 1412, 0, 1047, 0,
	0, 0, 0, 0, 0, 0, 664, 0, 1050, 115,
	0, 202, 0, 0, 0, 202, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 1434, 1435, 1436, 0,
	0, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 176, 202, 1427, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 202, 0, 202,
	0, 0, 0, 0, 0, 204, 204, 0, 0, 0,
	0, 0, 0, 0, 1293, 202, 0, 0, 0, 0,
	0, 1050, 204, 1148, 0, 1148, 1050, 0, 0, 0,
	1148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1148, 1148, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 1050, 1050,
	1050, 0, 0, 0, 0, 0, 0, 0, 1428, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1050, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1046, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 1046, 0, 0,
	0, 0, 0, 0, 0, 0, 1046, 0, 0, 0,
	0, 0, 0, 0, 0, 2582, 2242, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1417, 1415, 1416, 1408, 1409,
	1410, 1411, 1413, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 798, 1050, 0, 1050, 0, 0, 0, 2617,
	0, 0, 0, 2621, 0, 0, 0, 0, 0, 0,
	0, 1047, 2628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1147, 0, 0, 0,
	0, 0, 0, 0, 1046, 0, 0, 0, 0, 204,
	0, 1046, 0, 0, 0, 0, 0, 0, 204, 204,
	1050, 0, 1050, 0, 1050, 0, 0, 0, 0, 0,
	0, 0, 1147, 0, 2673, 1147, 1147, 1147, 0, 0,
	0, 202, 202, 1050, 0, 0, 1050, 0, 1047, 0,
	0, 0, 0, 0, 0, 2688, 0, 1158, 202, 0,
	0, 0, 0, 0, 1047, 778, 0, 0, 778, 778,
	0, 0, 706, 2694, 737, 0, 0, 0, 0, 0,
	985, 0, 0, 1050, 0, 0, 1147, 1147, 0, 0,
	0, 0, 0, 0, 0, 0, 713, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 1050,
	202, 0, 0, 1046, 0, 0, 1046, 0, 0, 0,
	0, 0, 0, 1958, 0, 0, 0, 0, 0, 0,
	0, 712, 0, 0, 0, 0, 714, 798, 0, 0,
	742, 0, 0, 0, 0, 1050, 720, 721, 0, 0,
	1476, 0, 731, 0, 1476, 1050, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 738, 715, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 1046, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1046, 0, 0,
	0, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 1050, 0, 0, 1148, 0, 0, 0, 973, 0,
	651, 0, 0, 716, 985, 0, 0, 1047, 0, 0,
	710, 0, 0, 0, 0, 1564, 0, 204, 0, 0,
	0, 0, 0, 633, 1563, 0, 717, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 0, 634, 0, 719, 0, 0, 0, 0,
	0, 0, 635, 0, 0, 202, 0, 0, 0, 0,
	723, 0, 0, 0, 202, 202, 0, 636, 0, 0,
	0, 0, 1046, 739, 0, 0, 1148, 1148, 1148, 0,
	1148, 0, 0, 656, 204, 1050, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 1050, 0, 0, 637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2880,
	0, 0, 0, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 722, 0, 0, 2890, 0, 0, 0,
	0, 204, 0, 1050, 0, 639, 0, 0, 640, 87,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 655, 0, 0, 0, 0, 87,
	0, 0, 0, 708, 726, 740, 0, 0, 2927, 0,
	0, 0, 0, 0, 87, 1046, 87, 0, 0, 709,
	1147, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 0, 727, 0, 0, 0, 743, 744, 0,
	202, 0, 0, 741, 0, 0, 0, 0, 0, 0,
	730, 0, 1147, 1147, 1147, 0, 0, 0, 0, 87,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1046, 202, 642, 0, 0, 0, 0, 87, 0,
	0, 734, 0, 0, 0, 0, 0, 0, 0, 659,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 658, 0, 0,
	0, 0, 0, 0, 644, 0, 0, 645, 0, 0,
	0, 0, 0, 653, 0, 0, 0, 0, 0, 0,
	646, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 647,
	654, 0, 0, 3031, 0, 0, 0, 0, 0, 648,
	202, 0, 2242, 0, 0, 0, 0, 1046, 0, 1046,
	650, 1047, 0, 0, 0, 649, 0, 0, 1958, 0,
	1047, 0, 0, 0, 0, 0, 657, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 652, 0, 1476,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 0, 1147, 0, 1046, 0, 1147, 0,
	1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 1046, 0, 1440,
	1147, 0, 0, 0, 0, 0, 1407, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1148, 0, 0, 0, 0, 0, 0, 0, 1047, 0,
	0, 0, 1406, 0, 0, 1047, 0, 1046, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 0, 3124, 1148,
	1148, 1148, 0, 1046, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 973, 973, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1046,
	3160, 0, 1429, 1430, 1431, 1432, 0, 0, 0, 1046,
	1148, 1148, 1412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3183, 0, 0, 0, 0, 0, 1047, 1444, 1454,
	1047, 0, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 1451, 1147, 0, 0, 0, 0,
	0, 1421, 1422, 87, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	1047, 0, 0, 87, 0, 87, 0, 0, 3229, 0,
	1452, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3263, 0, 798, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 3278, 0, 1147,
	0, 0, 0, 0, 0, 0, 0, 0, 1147, 1147,
	0, 0, 87, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 1046, 0, 0,
	0, 0, 0, 0, 0, 0, 1047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1418, 1419, 1425, 1424, 1420, 1446,
	0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	0, 0, 0, 0, 2967, 0, 0, 2966, 0, 0,
	0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1047,
	1440, 0, 0, 0, 1148, 0, 0, 1407, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1406, 0, 0, 1148, 1148, 1148, 973,
	0, 1426, 0, 0, 0, 0, 0, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1047, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0,
	0, 0, 0, 1429, 1430, 1431, 1432, 0, 0, 1440,
	0, 0, 0, 1412, 0, 0, 1407, 0, 0, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1454, 0, 1406, 1434, 1435, 1436, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 0, 0, 0, 0, 0,
	0, 1047, 0, 1047, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 1429, 1430, 1431, 1432, 0, 0, 0, 0,
	0, 0, 1412, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1148, 0,
	1047, 0, 1148, 0, 0, 0, 0, 0, 1444, 1454,
	0, 0, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	0, 1047, 0, 0, 1148, 0, 0, 1433, 0, 0,
	0, 0, 0, 1450, 1451, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 0, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 1047, 0, 1427, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 0, 0, 0, 0, 1047, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1047, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 1428, 1418, 1419, 1425, 1424, 1420,
	1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413,
	1414, 0, 0, 0, 0, 2420, 0, 0, 2421, 1445,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 1148,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1418, 1419, 1425, 1424, 1420, 1446,
	0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	0, 0, 0, 0, 1990, 0, 0, 1991, 0, 0,
	0, 0, 0, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 1148, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1047, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1958,
	212, 213, 214, 215, 216, 1051, 217, 1052, 1053, 1054,
	1055, 453, 1056, 1057, 1058, 1059, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 1060, 224, 225, 226,
	227, 228, 229, 1061, 1062, 230, 458, 459, 460, 1063,
	231, 461, 1064, 1049, 1065, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 1066, 241, 0, 242, 243,
	244, 1067, 924, 245, 246, 1068, 1069, 1071, 1070, 1072,
	1073, 1074, 247, 248, 249, 250, 251, 252, 462, 463,
	1075, 253, 1076, 255, 254, 1077, 256, 1078, 1079, 257,
	258, 259, 1080, 260, 1081, 261, 262, 1082, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 1083,
	209, 1084, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 1085, 279, 1086, 1087, 925, 280,
	281, 1088, 282, 468, 1089, 469, 283, 1090, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 927, 1091,
	476, 292, 0, 0, 87, 210, 291, 293, 300, 1092,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 1093,
	475, 1094, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 1095, 312, 311,
	1096, 313, 477, 931, 314, 315, 932, 1097, 316, 317,
	1098, 1099, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 1100, 211,
	934, 1101, 478, 479, 332, 333, 1102, 334, 335, 336,
	1103, 1104, 338, 339, 340, 1105, 1106, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 1107, 350, 351, 482, 352, 483, 353, 1108, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	1109, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 1110, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 1111, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 1112, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 1113, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 1114, 419, 420,
	418, 1115, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 1116, 488, 489, 490, 491, 1117, 1118, 428, 429,
	492, 430, 493, 1119, 431, 432, 433, 0, 434, 435,
	1120, 1121, 436, 437, 438, 439, 441, 1122, 442, 1123,
	440, 443, 444, 445, 494, 495, 496, 1124, 447, 446,
	497, 1125, 1126, 1127, 1128, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1044, 0, 0, 0, 0, 0, 0,
	0, 2101, 0, 0, 0, 0, 0, 0, 0, 2102,
	212, 213, 214, 215, 216, 1051, 217, 1052, 1053, 1054,
	1055, 453, 1056, 1057, 1058, 1059, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 1060, 224, 225, 226,
	227, 228, 229, 1061, 1062, 230, 458, 459, 460, 1063,
	231, 461, 1064, 1049, 1065, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 1066, 241, 0, 242, 243,
	244, 1067, 924, 245, 246, 1068, 1069, 1071, 1070, 1072,
	1073, 1074, 247, 248, 249, 250, 251, 252, 462, 463,
	1075, 253, 1076, 255, 254, 1077, 256, 1078, 1079, 257,
	258, 259, 1080, 260, 1081, 261, 262, 1082, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 1083,
	209, 1084, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 1085, 279, 1086, 1087, 925, 280,
	281, 1088, 282, 468, 1089, 469, 283, 1090, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 927, 1091,
	476, 292, 0, 0, 0, 210, 291, 293, 300, 1092,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 1093,
	475, 1094, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 1095, 312, 311,
	1096, 313, 477, 931, 314, 315, 932, 1097, 316, 317,
	1098, 1099, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 1100, 211,
	934, 1101, 478, 479, 332, 333, 1102, 334, 335, 336,
	1103, 1104, 338, 339, 340, 1105, 1106, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 1107, 350, 351, 482, 352, 483, 353, 1108, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	1109, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 1110, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 1111, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 1112, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 1113, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 1114, 419, 420,
	418, 1115, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 1116, 488, 489, 490, 491, 1117, 1118, 428, 429,
	492, 430, 493, 1119, 431, 432, 433, 0, 434, 435,
	1120, 1121, 436, 437, 438, 439, 441, 1122, 442, 1123,
	440, 443, 444, 445, 494, 495, 496, 1124, 447, 446,
	497, 1125, 1126, 1127, 1128, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2989, 212, 213, 214, 215, 216, 1051, 217, 1052,
	1053, 1054, 1055, 453, 1056, 1057, 1058, 1059, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 1060, 224,
	225, 226, 227, 228, 229, 1061, 1062, 230, 458, 459,
	460, 1063, 231, 461, 1064, 1049, 1065, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 1066, 241, 0,
	242, 243, 244, 1067, 924, 245, 246, 1068, 1069, 1071,
	1070, 1072, 1073, 1074, 247, 248, 249, 250, 251, 252,
	462, 463, 1075, 253, 1076, 255, 254, 1077, 256, 1078,
	1079, 257, 258, 259, 1080, 260, 1081, 261, 262, 1082,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 1083, 209, 1084, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 1085, 279, 1086, 1087,
	925, 280, 281, 1088, 282, 468, 1089, 469, 283, 1090,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	927, 1091, 476, 292, 0, 0, 0, 210, 291, 293,
	300, 1092, 926, 294, 473, 296, 295, 297, 298, 299,
	474, 1093, 475, 1094, 301, 928, 929, 302, 303, 304,
	930, 305, 306, 0, 0, 307, 308, 309, 310, 1095,
	312, 311, 1096, 313, 477, 931, 314, 315, 932, 1097,
	316, 317, 1098, 1099, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 933, 328, 329, 331, 330,
	1100, 211, 934, 1101, 478, 479, 332, 333, 1102, 334,
	335, 336, 1103, 1104, 338, 339, 340, 1105, 1106, 341,
	480, 935, 342, 936, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 1107, 350, 351, 482, 352, 483, 353,
	1108, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 1109, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 1110, 376, 937,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 1111, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 1112, 403, 383, 384,
	404, 938, 405, 486, 406, 407, 1113, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 1114,
	419, 420, 418, 1115, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 1116, 488, 489, 490, 491, 1117, 1118,
	428, 429, 492, 430, 493, 1119, 431, 432, 433, 0,
	434, 435, 1120, 1121, 436, 437, 438, 439, 441, 1122,
	442, 1123, 440, 443, 444, 445, 494, 495, 496, 1124,
	447, 446, 497, 1125, 1126, 1127, 1128, 448, 449, 498,
	450, 451, 452, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3093, 0,
	212, 213, 214, 215, 216, 1051, 217, 1052, 1053, 1054,
	1055, 453, 1056, 1057, 1058, 1059, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 1060, 224, 225, 226,
	227, 228, 229, 1061, 1062, 230, 458, 459, 460, 1063,
	231, 461, 1064, 1049, 1065, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 1066, 241, 0, 242, 243,
	244, 1067, 924, 245, 246, 1068, 1069, 1071, 1070, 1072,
	1073, 1074, 247, 248, 249, 250, 251, 252, 462, 463,
	1075, 253, 1076, 255, 254, 1077, 256, 1078, 1079, 257,
	258, 259, 1080, 260, 1081, 261, 262, 1082, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 1083,
	209, 1084, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 1085, 279, 1086, 1087, 925, 280,
	281, 1088, 282, 468, 1089, 469, 283, 1090, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 927, 1091,
	476, 292, 0, 0, 0, 210, 291, 293, 300, 1092,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 1093,
	475, 1094, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 1095, 312, 311,
	1096, 313, 477, 931, 314, 315, 932, 1097, 316, 317,
	1098, 1099, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 1100, 211,
	934, 1101, 478, 479, 332, 333, 1102, 334, 335, 336,
	1103, 1104, 338, 339, 340, 1105, 1106, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 1107, 350, 351, 482, 352, 483, 353, 1108, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	1109, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 1110, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 1111, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 1112, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 1113, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 1114, 419, 420,
	418, 1115, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 1116, 488, 489, 490, 491, 1117, 1118, 428, 429,
	492, 430, 493, 1119, 431, 432, 433, 0, 434, 435,
	1120, 1121, 436, 437, 438, 439, 441, 1122, 442, 1123,
	440, 443, 444, 445, 494, 495, 496, 1124, 447, 446,
	497, 1125, 1126, 1127, 1128, 448, 449, 498, 450, 451,
	452, 1044, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2737, 0, 212, 213,
	214, 215, 216, 1051, 217, 1052, 1053, 1054, 1055, 453,
	1056, 1057, 1058, 1059, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 1060, 224, 225, 226, 227, 228,
	229, 1061, 1062, 230, 458, 459, 460, 1063, 231, 461,
	1064, 1049, 1065, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 1066, 241, 0, 242, 243, 244, 1067,
	924, 245, 246, 1068, 1069, 1071, 1070, 1072, 1073, 1074,
	247, 248, 249, 250, 251, 252, 462, 463, 1075, 253,
	1076, 255, 254, 1077, 256, 1078, 1079, 257, 258, 259,
	1080, 260, 1081, 261, 262, 1082, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 1083, 209, 1084,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 1085, 279, 1086, 1087, 925, 280, 281, 1088,
	282, 468, 1089, 469, 283, 1090, 284, 285, 286, 287,
	288, 289, 290, 470, 471, 472, 927, 1091, 476, 292,
	0, 0, 0, 210, 291, 293, 300, 1092, 926, 294,
	473, 296, 295, 297, 298, 299, 474, 1093, 475, 1094,
	301, 928, 929, 302, 303, 304, 930, 305, 306, 0,
	0, 307, 308, 309, 310, 1095, 312, 311, 1096, 313,
	477, 931, 314, 315, 932, 1097, 316, 317, 1098, 1099,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 933, 328, 329, 331, 330, 1100, 211, 934, 1101,
	478, 479, 332, 333, 1102, 334, 335, 336, 1103, 1104,
	338, 339, 340, 1105, 1106, 341, 480, 935, 342, 936,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 1107,
	350, 351, 482, 352, 483, 353, 1108, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 1109, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 1110, 376, 937, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 1111, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 1112, 403, 383, 384, 404, 938, 405, 486,
	406, 407, 1113, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 1114, 419, 420, 418, 1115,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 1116,
	488, 489, 490, 491, 1117, 1118, 428, 429, 492, 430,
	493, 1119, 431, 432, 433, 0, 434, 435, 1120, 1121,
	436, 437, 438, 439, 441, 1122, 442, 1123, 440, 443,
	444, 445, 494, 495, 496, 1124, 447, 446, 497, 1125,
	1126, 1127, 1128, 448, 449, 498, 450, 451, 452, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2729, 0, 212, 213, 214, 215,
	216, 1051, 217, 1052, 1053, 1054, 1055, 453, 1056, 1057,
	1058, 1059, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 1060, 224, 225, 226, 227, 228, 229, 1061,
	1062, 230, 458, 459, 460, 1063, 231, 461, 1064, 1049,
	1065, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 1066, 241, 0, 242, 243, 244, 1067, 924, 245,
	246, 1068, 1069, 1071, 1070, 1072, 1073, 1074, 247, 248,
	249, 250, 251, 252, 462, 463, 1075, 253, 1076, 255,
	254, 1077, 256, 1078, 1079, 257, 258, 259, 1080, 260,
	1081, 261, 262, 1082, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 1083, 209, 1084, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	1085, 279, 1086, 1087, 925, 280, 281, 1088, 282, 468,
	1089, 469, 283, 1090, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 927, 1091, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 1092, 926, 294, 473, 296,
	295, 297, 298, 299, 474, 1093, 475, 1094, 301, 928,
	929, 302, 303, 304, 930, 305, 306, 0, 0, 307,
	308, 309, 310, 1095, 312, 311, 1096, 313, 477, 931,
	314, 315, 932, 1097, 316, 317, 1098, 1099, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 933,
	328, 329, 331, 330, 1100, 211, 934, 1101, 478, 479,
	332, 333, 1102, 334, 335, 336, 1103, 1104, 338, 339,
	340, 1105, 1106, 341, 480, 935, 342, 936, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 1107, 350, 351,
	482, 352, 483, 353, 1108, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 1109, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 1110, 376, 937, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 1111,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	1112, 403, 383, 384, 404, 938, 405, 486, 406, 407,
	1113, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 1114, 419, 420, 418, 1115, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 1116, 488, 489,
	490, 491, 1117, 1118, 428, 429, 492, 430, 493, 1119,
	431, 432, 433, 0, 434, 435, 1120, 1121, 436, 437,
	438, 439, 441, 1122, 442, 1123, 440, 443, 444, 445,
	494, 495, 496, 1124, 447, 446, 497, 1125, 1126, 1127,
	1128, 448, 449, 498, 450, 451, 452, 1044, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2603, 0, 212, 213, 214, 215, 216, 1051,
	217, 1052, 1053, 1054, 1055, 453, 1056, 1057, 1058, 1059,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	1060, 224, 225, 226, 227, 228, 229, 1061, 1062, 230,
	458, 459, 460, 1063, 231, 461, 1064, 1049, 1065, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 1066,
	241, 0, 242, 243, 244, 1067, 924, 245, 246, 1068,
	1069, 1071, 1070, 1072, 1073, 1074, 247, 248, 249, 250,
	251, 252, 462, 463, 1075, 253, 1076, 255, 254, 1077,
	256, 1078, 1079, 257, 258, 259, 1080, 260, 1081, 261,
	262, 1082, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 465, 466, 1083, 209, 1084, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 1085, 279,
	1086, 1087, 925, 280, 281, 1088, 282, 468, 1089, 469,
	283, 1090, 284, 285, 286, 287, 288, 289, 290, 470,
	471, 472, 927, 1091, 476, 292, 0, 0, 0, 210,
	291, 293, 300, 1092, 926, 294, 473, 296, 295, 297,
	298, 299, 474, 1093, 475, 1094, 301, 928, 929, 302,
	303, 304, 930, 305, 306, 0, 0, 307, 308, 309,
	310, 1095, 312, 311, 1096, 313, 477, 931, 314, 315,
	932, 1097, 316, 317, 1098, 1099, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 933, 328, 329,
	331, 330, 1100, 211, 934, 1101, 478, 479, 332, 333,
	1102, 334, 335, 336, 1103, 1104, 338, 339, 340, 1105,
	1106, 341, 480, 935, 342, 936, 481, 343, 337, 344,
	345, 346, 347, 348, 349, 1107, 350, 351, 482, 352,
	483, 353, 1108, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 1109, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 1110,
	376, 937, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 1111, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 1112, 403,
	383, 384, 404, 938, 405, 486, 406, 407, 1113, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 1114, 419, 420, 418, 1115, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 1116, 488, 489, 490, 491,
	1117, 1118, 428, 429, 492, 430, 493, 1119, 431, 432,
	433, 0, 434, 435, 1120, 1121, 436, 437, 438, 439,
	441, 1122, 442, 1123, 440, 443, 444, 445, 494, 495,
	496, 1124, 447, 446, 497, 1125, 1126, 1127, 1128, 448,
	449, 498, 450, 451, 452, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2003, 0, 212, 213, 214, 215, 216, 1051, 217, 1052,
	1053, 1054, 1055, 453, 1056, 1057, 1058, 1059, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 1060, 224,
	225, 226, 227, 228, 229, 1061, 1062, 230, 458, 459,
	460, 1063, 231, 461, 1064, 1049, 1065, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 1066, 241, 0,
	242, 243, 244, 1067, 924, 245, 246, 1068, 1069, 1071,
	1070, 1072, 1073, 1074, 247, 248, 249, 250, 251, 252,
	462, 463, 1075, 253, 1076, 255, 254, 1077, 256, 1078,
	1079, 257, 258, 259, 1080, 260, 1081, 261, 262, 1082,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 1083, 209, 1084, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 1085, 279, 1086, 1087,
	925, 280, 281, 1088, 282, 468, 1089, 469, 283, 1090,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	927, 1091, 476, 292, 0, 0, 0, 210, 291, 293,
	300, 1092, 926, 294, 473, 296, 295, 297, 298, 299,
	474, 1093, 475, 1094, 301, 928, 929, 302, 303, 304,
	930, 305, 306, 0, 0, 307, 308, 309, 310, 1095,
	312, 311, 1096, 313, 477, 931, 314, 315, 932, 1097,
	316, 317, 1098, 1099, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 933, 328, 329, 331, 330,
	1100, 211, 934, 1101, 478, 479, 332, 333, 1102, 334,
	335, 336, 1103, 1104, 338, 339, 340, 1105, 1106, 341,
	480, 935, 342, 936, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 1107, 350, 351, 482, 352, 483, 353,
	1108, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 1109, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 1110, 376, 937,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 1111, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 1112, 403, 383, 384,
	404, 938, 405, 486, 406, 407, 1113, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 1114,
	419, 420, 418, 1115, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 1116, 488, 489, 490, 491, 1117, 1118,
	428, 429, 492, 430, 493, 1119, 431, 432, 433, 0,
	434, 435, 1120, 1121, 436, 437, 438, 439, 441, 1122,
	442, 1123, 440, 443, 444, 445, 494, 495, 496, 1124,
	447, 446, 497, 1125, 1126, 1127, 1128, 448, 449, 498,
	450, 451, 452, 1152, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1743, 0,
	0, 0, 212, 213, 214, 215, 216, 1051, 217, 1052,
	1053, 1054, 1055, 453, 1056, 1057, 1058, 1059, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 1060, 224,
	225, 226, 227, 228, 229, 1061, 1062, 230, 458, 459,
	460, 1063, 231, 461, 1064, 1049, 1065, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 1066, 241, 0,
	242, 243, 244, 1067, 924, 245, 246, 1068, 1069, 1071,
	1070, 1072, 1073, 1074, 247, 248, 249, 250, 251, 252,
	462, 463, 1075, 253, 1076, 255, 254, 1077, 256, 1078,
	1079, 257, 258, 259, 1080, 260, 1081, 261, 262, 1082,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 1083, 209, 1084, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 1085, 279, 1086, 1087,
	925, 280, 281, 1088, 282, 468, 1089, 469, 283, 1090,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	927, 1091, 476, 292, 0, 0, 0, 210, 291, 293,
	300, 1092, 926, 294, 473, 296, 295, 297, 298, 299,
	474, 1093, 475, 1094, 301, 928, 929, 302, 303, 304,
	930, 305, 306, 0, 0, 307, 308, 309, 310, 1095,
	312, 311, 1096, 313, 477, 931, 314, 315, 932, 1097,
	316, 317, 1098, 1099, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 933, 328, 329, 331, 330,
	1100, 211, 934, 1101, 478, 479, 332, 333, 1102, 334,
	335, 336, 1103, 1104, 338, 339, 340, 1105, 1106, 341,
	480, 935, 342, 936, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 1107, 350, 351, 482, 352, 483, 353,
	1108, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 1109, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 1110, 376, 937,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 1111, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 1112, 403, 383, 384,
	404, 938, 405, 486, 406, 407, 1113, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 1114,
	419, 420, 418, 1115, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 1116, 488, 489, 490, 491, 1117, 1118,
	428, 429, 492, 430, 493, 1119, 431, 432, 433, 0,
	434, 435, 1120, 1121, 436, 437, 438, 439, 441, 1122,
	442, 1123, 440, 443, 444, 445, 494, 495, 496, 1124,
	447, 446, 497, 1125, 1126, 1127, 1128, 448, 449, 498,
	450, 451, 452, 1041, 0, 1044, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 1051, 217, 1052,
	1053, 1054, 1055, 453, 1056, 1057, 1058, 1059, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 1060, 224,
	225, 226, 227, 228, 229, 1061, 1062, 230, 458, 459,
	460, 1063, 231, 461, 1064, 1049, 1065, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 1066, 241, 0,
	242, 243, 244, 1067, 924, 245, 246, 1068, 1069, 1071,
	1070, 1072, 1073, 1074, 247, 248, 249, 250, 251, 252,
	462, 463, 1075, 253, 1076, 255, 254, 1077, 256, 1078,
	1079, 257, 258, 259, 1080, 260, 1081, 261, 262, 1082,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 1083, 209, 1084, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 1085, 279, 1086, 1087,
	925, 280, 281, 1088, 282, 468, 1089, 469, 283, 1090,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	927, 1091, 476, 292, 0, 0, 0, 210, 291, 293,
	300, 1092, 926, 294, 473, 296, 295, 297, 298, 299,
	474, 1093, 475, 1094, 301, 928, 929, 302, 303, 304,
	930, 305, 306, 0, 0, 307, 308, 309, 310, 1095,
	312, 311, 1096, 313, 477, 931, 314, 315, 932, 1097,
	316, 317, 1098, 1099, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 933, 328, 329, 331, 330,
	1100, 211, 934, 1101, 478, 479, 332, 333, 1102, 334,
	335, 336, 1103, 1104, 338, 339, 340, 1105, 1106, 341,
	480, 935, 342, 936, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 1107, 350, 351, 482, 352, 483, 353,
	1108, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 1109, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 1110, 376, 937,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 1111, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 1112, 403, 383, 384,
	404, 938, 405, 486, 406, 407, 1113, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 1114,
	419, 420, 418, 1115, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 1116, 488, 489, 490, 491, 1117, 1118,
	428, 429, 492, 430, 493, 1119, 431, 432, 433, 0,
	434, 435, 1120, 1121, 436, 437, 438, 439, 441, 1122,
	442, 1123, 440, 443, 444, 445, 494, 495, 496, 1124,
	447, 446, 497, 1125, 1126, 1127, 1128, 448, 449, 498,
	450, 451, 452, 1044, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 1051, 217, 1052, 1053, 1054,
	1055, 453, 1056, 1057, 1058, 1059, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 1060, 224, 225, 226,
	227, 228, 229, 1061, 1062, 230, 458, 459, 460, 1063,
	231, 461, 1064, 1049, 1065, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 1066, 241, 0, 242, 243,
	244, 1067, 924, 245, 246, 1068, 1069, 1071, 1070, 1072,
	1073, 1074, 247, 248, 249, 250, 251, 252, 462, 463,
	1075, 253, 1076, 255, 254, 1077, 256, 1078, 1079, 257,
	258, 259, 1080, 260, 1081, 261, 262, 1082, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 1083,
	209, 1084, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 1085, 279, 1086, 1087, 925, 280,
	281, 1088, 282, 468, 1089, 469, 283, 1090, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 927, 1091,
	476, 292, 0, 0, 0, 210, 291, 293, 300, 1092,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 1093,
	475, 1094, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 1095, 312, 311,
	1096, 313, 477, 931, 314, 315, 932, 1097, 316, 317,
	1098, 1099, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 1100, 211,
	934, 1101, 478, 479, 332, 333, 1102, 334, 335, 336,
	1103, 1104, 338, 339, 340, 1105, 1106, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 1107, 350, 351, 482, 352, 483, 353, 1108, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	1109, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 1110, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 1111, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 1112, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 1113, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 1114, 419, 420,
	418, 1115, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 1116, 488, 489, 490, 491, 1117, 1118, 428, 429,
	492, 430, 493, 1119, 431, 432, 433, 0, 434, 435,
	1120, 1121, 436, 437, 438, 439, 441, 1122, 442, 1123,
	440, 443, 444, 445, 494, 495, 496, 1124, 447, 446,
	497, 1125, 1126, 1127, 1128, 448, 449, 498, 450, 451,
	452, 1979, 0, 866, 823, 824, 825, 821, 822, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 1976, 217, 0, 0, 0,
	0, 915, 840, 0, 0, 0, 218, 219, 220, 454,
	881, 860, 892, 850, 891, 890, 0, 224, 852, 851,
	227, 228, 229, 842, 914, 230, 950, 951, 460, 0,
	231, 921, 0, 904, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 907, 905, 906, 911, 909,
	908, 910, 247, 248, 249, 250, 895, 252, 888, 887,
	812, 253, 0, 255, 254, 0, 256, 1977, 0, 257,
	886, 259, 0, 260, 0, 261, 262, 0, 818, 263,
	264, 266, 269, 265, 270, 271, 272, 941, 942, 831,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 885,
	883, 884, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 948, 0, 841, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 916, 917, 920, 927, 0,
	918, 862, 0, 0, 0, 210, 291, 293, 300, 0,
	926, 294, 874, 865, 876, 878, 879, 880, 875, 0,
	867, 0, 301, 928, 929, 302, 303, 304, 930, 900,
	901, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 949, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 854, 325, 933, 328, 329, 331, 330, 809, 211,
	934, 832, 919, 889, 332, 333, 0, 863, 335, 864,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 944, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 882, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 819, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 855, 856, 858, 859,
	394, 398, 401, 402, 912, 403, 383, 384, 404, 938,
	405, 877, 857, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 923, 412, 413, 414, 945, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 494, 893, 940, 1975, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 810, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 806, 807, 1978, 0, 0, 0,
	0, 0, 0, 836, 1974, 0, 0, 799, 834, 866,
	823, 824, 825, 821, 822, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 915, 840, 0,
	0, 0, 218, 219, 220, 454, 881, 860, 892, 850,
	891, 890, 0, 224, 852, 851, 227, 228, 229, 842,
	914, 230, 950, 951, 460, 0, 231, 921, 0, 904,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 924, 245,
	246, 907, 905, 906, 911, 909, 908, 910, 247, 248,
	249, 250, 895, 252, 888, 887, 812, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 886, 259, 0, 260,
	0, 261, 262, 0, 818, 263, 264, 266, 269, 265,
	270, 271, 272, 941, 942, 831, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 885, 883, 884, 0, 278,
	0, 279, 0, 0, 925, 280, 281, 0, 282, 948,
	0, 841, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 916, 917, 920, 927, 0, 918, 862, 0, 0,
	0, 210, 291, 293, 300, 0, 926, 294, 874, 865,
	876, 878, 879, 880, 875, 0, 867, 0, 301, 928,
	929, 302, 303, 304, 930, 900, 901, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 949, 931,
	314, 315, 932, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 854, 325, 933,
	328, 329, 331, 330, 809, 211, 934, 832, 919, 889,
	332, 333, 0, 863, 335, 864, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	944, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 882, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 937, 377, 378, 379, 380, 819, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 175,
	399, 400, 855, 856, 858, 859, 394, 398, 401, 402,
	912, 403, 383, 384, 404, 938, 405, 877, 857, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 923, 412,
	413, 414, 945, 0, 419, 420, 418, 177, 421, 422,
	423, 424, 425, 267, 426, 268, 853, 0, 896, 897,
	898, 899, 0, 0, 428, 429, 946, 430, 947, 830,
	431, 432, 433, 0, 434, 435, 0, 813, 436, 437,
	438, 439, 441, 913, 442, 0, 861, 443, 444, 445,
	1291, 893, 940, 0, 447, 446, 497, 0, 0, 0,
	169, 448, 449, 498, 450, 451, 452, 810, 170, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	806, 807, 866, 823, 824, 825, 821, 822, 835, 1481,
	1479, 0, 0, 0, 834, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	915, 840, 0, 0, 0, 218, 219, 220, 454, 881,
	860, 892, 850, 891, 890, 0, 224, 852, 851, 227,
	228, 229, 842, 914, 230, 950, 951, 460, 0, 231,
	921, 0, 904, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 924, 245, 246, 907, 905, 906, 911, 909, 908,
	910, 247, 248, 249, 250, 895, 252, 888, 887, 812,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 886,
	259, 0, 260, 0, 261, 262, 0, 818, 263, 264,
	266, 269, 265, 270, 271, 272, 941, 942, 831, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 885, 883,
	884, 0, 278, 0, 279, 0, 0, 925, 280, 281,
	0, 282, 948, 0, 841, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 916, 917, 920, 927, 0, 918,
	862, 0, 0, 0, 210, 291, 293, 300, 0, 926,
	294, 874, 865, 876, 878, 879, 880, 875, 0, 867,
	0, 301, 928, 929, 302, 303, 304, 930, 900, 901,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 949, 931, 314, 315, 932, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	854, 325, 933, 328, 329, 331, 330, 809, 211, 934,
	832, 919, 889, 332, 333, 0, 863, 335, 864, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 944, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 882, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 937, 377, 378, 379,
	380, 819, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 175, 399, 400, 855, 856, 858, 859, 394,
	398, 401, 402, 912, 403, 383, 384, 404, 938, 405,
	877, 857, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 923, 412, 413, 414, 945, 0, 419, 420, 418,
	177, 421, 422, 423, 424, 425, 267, 426, 268, 853,
	0, 896, 897, 898, 899, 0, 0, 428, 429, 946,
	430, 947, 830, 431, 432, 433, 0, 434, 435, 0,
	813, 436, 437, 438, 439, 441, 913, 442, 0, 861,
	443, 444, 445, 1291, 893, 940, 0, 447, 446, 497,
	0, 0, 0, 169, 448, 449, 498, 450, 451, 452,
	810, 170, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 806, 807, 866, 823, 824, 825, 821,
	822, 835, 1481, 2370, 0, 0, 0, 834, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 915, 840, 0, 0, 0, 218, 219,
	220, 454, 881, 860, 892, 850, 891, 890, 0, 224,
	852, 851, 227, 228, 229, 842, 914, 230, 950, 951,
	460, 0, 231, 921, 0, 904, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 924, 245, 246, 907, 905, 906,
	911, 909, 908, 910, 247, 248, 249, 250, 895, 252,
	888, 887, 812, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 886, 259, 0, 260, 0, 261, 262, 0,
	818, 263, 264, 266, 269, 265, 270, 271, 272, 941,
	942, 831, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 885, 883, 884, 0, 278, 0, 279, 0, 0,
	925, 280, 281, 0, 282, 948, 0, 841, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 916, 917, 920,
	927, 0, 918, 862, 0, 0, 0, 210, 291, 293,
	300, 0, 926, 294, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 301, 928, 929, 302, 303, 304,
	930, 900, 901, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 949, 931, 314, 315, 932, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 854, 325, 933, 328, 329, 331, 330,
	809, 211, 934, 832, 919, 889, 332, 333, 0, 863,
	335, 864, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 944, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 882,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 937,
	377, 378, 379, 380, 819, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 175, 399, 400, 855, 856,
	858, 859, 394, 398, 401, 402, 912, 403, 383, 384,
	404, 938, 405, 877, 857, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 923, 412, 413, 414, 945, 0,
	419, 420, 418, 177, 421, 422, 423, 424, 425, 267,
	426, 268, 853, 0, 896, 897, 898, 899, 0, 0,
	428, 429, 946, 430, 947, 830, 431, 432, 433, 0,
	434, 435, 0, 813, 436, 437, 438, 439, 441, 913,
	442, 0, 861, 443, 444, 445, 1291, 893, 940, 0,
	447, 446, 497, 0, 0, 0, 169, 448, 449, 498,
	450, 451, 452, 810, 170, 0, 0, 0, 0, 0,
	0, 808, 0, 0, 0, 0, 806, 807, 866, 823,
	824, 825, 821, 822, 835, 1481, 1479, 0, 0, 0,
	834, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 915, 840, 0, 0,
	0, 218, 219, 220, 454, 881, 860, 892, 850, 891,
	890, 2063, 224, 852, 851, 227, 228, 229, 842, 914,
	230, 950, 951, 460, 0, 231, 921, 0, 904, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	907, 905, 906, 911, 909, 908, 910, 247, 248, 249,
	250, 895, 252, 888, 887, 812, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 886, 259, 0, 260, 0,
	261, 262, 0, 818, 263, 264, 266, 269, 265, 270,
	271, 272, 941, 942, 831, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 885, 883, 884, 0, 278, 0,
	279, 0, 2068, 925, 280, 281, 0, 282, 948, 0,
	841, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	916, 917, 920, 927, 0, 918, 862, 0, 0, 0,
	210, 291, 293, 300, 0, 926, 294, 874, 865, 876,
	878, 879, 880, 875, 0, 867, 0, 301, 928, 929,
	302, 303, 304, 930, 900, 901, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 2064, 313, 949, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 854, 325, 933, 328,
	329, 331, 330, 809, 211, 934, 832, 919, 889, 332,
	333, 0, 863, 335, 864, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 944,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 882, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 819, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 855, 856, 858, 859, 394, 398, 401, 402, 912,
	403, 383, 384, 404, 938, 405, 877, 857, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 923, 412, 413,
	414, 945, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 853, 0, 896, 897, 898,
	899, 0, 2065, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 494,
	893, 940, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 810, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 0, 806,
	807, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 802, 834, 866, 823, 824, 825, 821, 822,
	835, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 915, 840, 0, 0, 0, 218, 219, 220,
	454, 881, 860, 892, 850, 891, 890, 0, 224, 852,
	851, 227, 228, 229, 842, 914, 230, 950, 951, 460,
	0, 231, 921, 0, 904, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 924, 245, 246, 907, 905, 906, 911,
	909, 908, 910, 247, 248, 249, 250, 895, 252, 888,
	887, 812, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 886, 259, 0, 260, 0, 261, 262, 0, 818,
	263, 264, 266, 269, 265, 270, 271, 272, 941, 942,
	831, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	885, 883, 884, 0, 278, 0, 279, 0, 0, 925,
	280, 281, 0, 282, 948, 0, 841, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 916, 917, 920, 927,
	0, 918, 862, 0, 0, 0, 210, 291, 293, 300,
	0, 926, 294, 874, 865, 876, 878, 879, 880, 875,
	0, 867, 0, 301, 928, 929, 302, 303, 304, 930,
	900, 901, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 949, 931, 314, 315, 932, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 854, 325, 933, 328, 329, 331, 330, 809,
	211, 934, 832, 919, 889, 332, 333, 0, 863, 335,
	864, 814, 0, 338, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 944, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 882, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 937, 377,
	378, 379, 380, 819, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 855, 856, 858,
	859, 394, 398, 401, 402, 912, 403, 383, 384, 404,
	938, 405, 877, 857, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 923, 412, 413, 414, 945, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 434,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 494, 893, 940, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 810, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 806, 807, 866, 823, 824,
	825, 821, 822, 835, 836, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 915, 840, 0, 0, 0,
	218, 219, 220, 454, 881, 860, 892, 850, 891, 890,
	0, 224, 852, 851, 227, 228, 229, 842, 914, 230,
	950, 951, 460, 0, 231, 921, 0, 904, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 3275, 244, 0, 924, 245, 246, 907,
	905, 906, 911, 909, 908, 910, 247, 248, 249, 250,
	895, 252, 888, 887, 812, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 886, 259, 0, 260, 0, 261,
	262, 0, 818, 263, 264, 266, 269, 265, 270, 271,
	272, 941, 942, 831, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 885, 883, 884, 0, 278, 0, 279,
	0, 0, 925, 280, 281, 0, 282, 948, 0, 841,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 916,
	917, 920, 927, 0, 918, 862, 0, 0, 0, 210,
	291, 293, 300, 0, 926, 294, 874, 865, 876, 878,
	879, 880, 875, 0, 867, 0, 301, 928, 929, 302,
	303, 304, 930, 900, 901, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 949, 931, 314, 315,
	932, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 854, 325, 933, 328, 329,
	331, 330, 809, 211, 934, 832, 919, 889, 332, 333,
	0, 863, 335, 864, 814, 0, 338, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 944, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 882, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 937, 377, 378, 379, 380, 819, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	855, 856, 858, 859, 394, 398, 401, 402, 912, 403,
	383, 384, 404, 938, 405, 877, 857, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 923, 412, 413, 414,
	945, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 853, 0, 896, 897, 898, 899,
	0, 0, 428, 429, 946, 430, 947, 830, 431, 432,
	433, 0, 434, 435, 0, 813, 436, 437, 438, 439,
	441, 913, 442, 0, 861, 443, 444, 445, 494, 893,
	940, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 810, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 806, 807,
	866, 823, 824, 825, 821, 822, 835, 836, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 915, 840,
	0, 0, 0, 218, 219, 220, 454, 881, 860, 892,
	850, 891, 890, 0, 224, 852, 851, 227, 228, 229,
	842, 914, 230, 950, 951, 460, 0, 231, 921, 0,
	904, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 3149, 244, 0, 924,
	245, 246, 907, 905, 906, 911, 909, 908, 910, 247,
	248, 249, 250, 895, 252, 888, 887, 812, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 886, 259, 0,
	260, 0, 261, 262, 0, 818, 263, 264, 266, 269,
	265, 270, 271, 272, 941, 942, 831, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 885, 883, 884, 0,
	278, 0, 279, 0, 0, 925, 280, 281, 0, 282,
	948, 0, 841, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 916, 917, 920, 927, 0, 918, 862, 0,
	0, 0, 210, 291, 293, 300, 0, 926, 294, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 301,
	928, 929, 302, 303, 304, 930, 900, 901, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 949,
	931, 314, 315, 932, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 854, 325,
	933, 328, 329, 331, 330, 809, 211, 934, 832, 919,
	889, 332, 333, 0, 863, 335, 864, 814, 0, 338,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 944, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 882, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 937, 377, 378, 379, 380, 819,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 855, 856, 858, 859, 394, 398, 401,
	402, 912, 403, 383, 384, 404, 938, 405, 877, 857,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 923,
	412, 413, 414, 945, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 853, 0, 896,
	897, 898, 899, 0, 0, 428, 429, 946, 430, 947,
	830, 431, 432, 433, 0, 434, 435, 0, 813, 436,
	437, 438, 439, 441, 913, 442, 0, 861, 443, 444,
	445, 494, 893, 940, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 810, 0,
	0, 0, 0, 0, 0, 0, 808, 0, 0, 0,
	0, 806, 807, 866, 823, 824, 825, 821, 822, 835,
	836, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 915, 840, 0, 0, 0, 218, 219, 220, 454,
	881, 860, 892, 850, 891, 890, 0, 224, 852, 851,
	227, 228, 229, 842, 914, 230, 950, 951, 460, 0,
	231, 921, 0, 904, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 907, 905, 906, 911, 909,
	908, 910, 247, 248, 249, 250, 895, 252, 888, 887,
	812, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	886, 259, 0, 260, 0, 261, 262, 0, 818, 263,
	264, 266, 269, 265, 270, 271, 272, 941, 942, 831,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 885,
	883, 884, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 948, 0, 841, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 916, 917, 920, 927, 0,
	918, 862, 0, 0, 0, 210, 291, 293, 300, 0,
	926, 294, 874, 865, 876, 878, 879, 880, 875, 0,
	867, 0, 301, 928, 929, 302, 303, 304, 930, 900,
	901, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 949, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 854, 325, 933, 328, 329, 331, 330, 809, 2901,
	934, 832, 919, 889, 332, 333, 0, 863, 335, 864,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 944, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 882, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 819, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 855, 856, 858, 859,
	394, 398, 401, 402, 912, 403, 383, 384, 404, 938,
	405, 877, 857, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 923, 412, 413, 414, 945, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 494, 893, 940, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 810, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 806, 807, 1541, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 834, 866,
	823, 824, 825, 821, 822, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 915, 840, 0,
	0, 0, 218, 219, 220, 454, 881, 860, 892, 850,
	891, 890, 0, 224, 852, 851, 227, 228, 229, 842,
	914, 230, 950, 951, 460, 0, 231, 921, 0, 904,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 924, 245,
	246, 907, 905, 906, 911, 909, 908, 910, 247, 248,
	249, 250, 895, 252, 888, 887, 812, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 886, 259, 0, 260,
	0, 261, 262, 0, 818, 263, 264, 266, 269, 265,
	270, 271, 272, 941, 942, 831, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 885, 883, 884, 0, 278,
	0, 279, 0, 0, 925, 280, 281, 0, 282, 948,
	0, 841, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 916, 917, 920, 927, 0, 918, 862, 0, 0,
	0, 210, 291, 293, 300, 0, 926, 294, 874, 865,
	876, 878, 879, 880, 875, 0, 867, 0, 301, 928,
	929, 302, 303, 304, 930, 900, 901, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 949, 931,
	314, 315, 932, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 854, 325, 933,
	328, 329, 331, 330, 809, 211, 934, 832, 919, 889,
	332, 333, 0, 863, 335, 864, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	944, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 882, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 937, 377, 378, 379, 380, 819, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 855, 856, 858, 859, 394, 398, 401, 402,
	912, 403, 383, 384, 404, 938, 405, 877, 857, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 923, 412,
	413, 414, 945, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 853, 0, 896, 897,
	898, 899, 0, 0, 428, 429, 946, 430, 947, 830,
	431, 432, 433, 0, 434, 435, 0, 813, 436, 437,
	438, 439, 441, 913, 442, 0, 861, 443, 444, 445,
	494, 893, 940, 2716, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 810, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	806, 807, 866, 823, 824, 825, 821, 822, 835, 836,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	915, 840, 0, 0, 0, 218, 219, 220, 454, 881,
	860, 892, 850, 891, 890, 0, 224, 852, 851, 227,
	228, 229, 842, 914, 230, 950, 951, 460, 0, 231,
	921, 0, 904, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 924, 245, 246, 907, 905, 906, 911, 909, 908,
	910, 247, 248, 249, 250, 895, 252, 888, 887, 812,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 886,
	259, 0, 260, 0, 261, 262, 0, 818, 263, 264,
	266, 269, 265, 270, 271, 272, 941, 942, 831, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 885, 883,
	884, 0, 278, 0, 279, 0, 0, 925, 280, 281,
	0, 282, 948, 0, 841, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 916, 917, 920, 927, 0, 918,
	862, 0, 0, 0, 1893, 291, 293, 300, 0, 926,
	294, 874, 865, 876, 878, 879, 880, 875, 0, 867,
	0, 301, 928, 929, 302, 303, 304, 930, 900, 901,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 949, 931, 314, 315, 932, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	854, 325, 933, 328, 329, 331, 330, 809, 211, 934,
	832, 919, 889, 332, 333, 0, 863, 335, 864, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 944, 352, 483, 353, 1892, 354, 0,
	355, 356, 357, 358, 359, 360, 882, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 937, 377, 378, 379,
	380, 819, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 855, 856, 858, 859, 394,
	398, 401, 402, 912, 403, 383, 384, 404, 938, 405,
	877, 857, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 923, 412, 413, 414, 945, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 853,
	0, 896, 897, 898, 899, 0, 0, 428, 429, 946,
	430, 947, 830, 431, 432, 433, 0, 434, 435, 0,
	813, 436, 437, 438, 439, 441, 913, 442, 0, 861,
	443, 444, 445, 494, 893, 940, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	810, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 806, 807, 866, 823, 824, 825, 821,
	822, 835, 836, 0, 0, 0, 0, 834, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 915, 840, 0, 0, 0, 218, 219,
	220, 454, 881, 860, 892, 850, 891, 890, 0, 224,
	852, 851, 227, 228, 229, 842, 914, 230, 950, 951,
	460, 0, 231, 921, 0, 904, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 924, 245, 246, 907, 905, 906,
	911, 909, 908, 910, 247, 248, 249, 250, 895, 252,
	888, 887, 812, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 886, 259, 0, 260, 0, 261, 262, 0,
	818, 263, 264, 266, 269, 265, 270, 271, 272, 941,
	942, 831, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 885, 883, 884, 0, 278, 0, 279, 0, 0,
	925, 280, 281, 0, 282, 948, 0, 841, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 916, 917, 920,
	927, 0, 918, 862, 0, 0, 0, 210, 291, 293,
	300, 0, 926, 294, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 301, 928, 929, 302, 303, 304,
	930, 900, 901, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 949, 931, 314, 315, 932, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 854, 325, 933, 328, 329, 331, 330,
	809, 211, 934, 832, 919, 889, 332, 333, 0, 863,
	335, 864, 814, 0, 338, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 944, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 882,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 937,
	377, 378, 379, 380, 819, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 855, 856,
	858, 859, 394, 398, 401, 402, 912, 403, 383, 384,
	404, 938, 405, 877, 857, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 923, 412, 413, 414, 945, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 853, 0, 896, 897, 898, 899, 0, 0,
	428, 429, 946, 430, 947, 830, 431, 432, 433, 0,
	434, 435, 0, 813, 436, 437, 438, 439, 441, 913,
	442, 0, 861, 443, 444, 445, 494, 893, 940, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 810, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 0, 0, 0, 806, 807, 866, 823,
	824, 825, 821, 822, 835, 836, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 915, 840, 0, 0,
	0, 218, 219, 220, 454, 881, 860, 892, 850, 891,
	890, 0, 224, 852, 851, 227, 228, 229, 842, 914,
	230, 950, 951, 460, 0, 231, 921, 0, 904, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	907, 905, 906, 911, 909, 908, 910, 247, 248, 249,
	250, 895, 252, 888, 887, 812, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 886, 259, 0, 260, 0,
	261, 262, 0, 818, 263, 264, 266, 269, 265, 270,
	271, 272, 941, 942, 831, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 885, 883, 884, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 948, 0,
	841, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	916, 917, 920, 927, 0, 918, 862, 0, 0, 0,
	210, 291, 293, 300, 0, 926, 294, 874, 865, 876,
	878, 879, 880, 875, 0, 867, 0, 301, 928, 929,
	302, 303, 304, 930, 900, 901, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 949, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 854, 325, 933, 328,
	329, 331, 330, 809, 211, 934, 832, 919, 889, 332,
	333, 0, 863, 335, 864, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 944,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 882, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 819, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 855, 856, 858, 859, 394, 398, 401, 402, 912,
	403, 383, 384, 404, 938, 405, 877, 857, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 923, 412, 413,
	414, 945, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 494,
	893, 940, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 810, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 0, 806,
	807, 1541, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 834, 866, 823, 824, 825, 821, 822,
	835, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 915, 840, 0, 0, 0, 218, 219, 220,
	454, 881, 860, 892, 850, 891, 890, 0, 224, 852,
	851, 227, 228, 229, 842, 914, 230, 950, 951, 460,
	0, 231, 921, 0, 904, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 924, 245, 246, 907, 905, 906, 911,
	909, 908, 910, 247, 248, 249, 250, 895, 252, 888,
	887, 812, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 886, 259, 0, 260, 0, 261, 262, 0, 818,
	263, 264, 266, 269, 265, 270, 271, 272, 941, 942,
	831, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	885, 883, 884, 0, 278, 0, 279, 0, 2068, 925,
	280, 281, 0, 282, 948, 0, 841, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 916, 917, 920, 927,
	0, 918, 862, 0, 0, 0, 210, 291, 293, 300,
	0, 926, 294, 874, 865, 876, 878, 879, 880, 875,
	0, 867, 0, 301, 928, 929, 302, 303, 304, 930,
	900, 901, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 949, 931, 314, 315, 932, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 854, 325, 933, 328, 329, 331, 330, 809,
	211, 934, 832, 919, 889, 332, 333, 0, 863, 335,
	864, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 944, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 882, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 937, 377,
	378, 379, 380, 819, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 855, 856, 858,
	859, 394, 398, 401, 402, 912, 403, 383, 384, 404,
	938, 405, 877, 857, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 923, 412, 413, 414, 945, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 434,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 494, 893, 940, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 810, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 806, 807, 866, 823, 824,
	825, 821, 822, 835, 836, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 915, 840, 0, 0, 0,
	218, 219, 220, 454, 881, 860, 892, 850, 891, 890,
	0, 224, 852, 851, 227, 228, 229, 842, 914, 230,
	950, 951, 460, 0, 231, 921, 0, 904, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 924, 245, 246, 907,
	905, 906, 911, 909, 908, 910, 247, 248, 249, 250,
	895, 252, 888, 887, 812, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 886, 259, 0, 260, 0, 261,
	262, 0, 818, 263, 264, 266, 269, 265, 270, 271,
	272, 941, 942, 831, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 885, 883, 884, 0, 278, 0, 279,
	0, 0, 925, 280, 281, 0, 282, 948, 0, 841,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 916,
	917, 920, 927, 0, 918, 862, 0, 0, 0, 210,
	291, 293, 300, 0, 926, 294, 874, 865, 876, 878,
	879, 880, 875, 0, 867, 0, 301, 928, 929, 302,
	303, 304, 930, 900, 901, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 949, 931, 314, 315,
	932, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 854, 325, 933, 328, 329,
	331, 330, 809, 211, 934, 832, 919, 889, 332, 333,
	0, 863, 335, 864, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 944, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 882, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 937, 377, 378, 379, 380, 819, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	855, 856, 858, 859, 394, 398, 401, 402, 912, 403,
	383, 384, 404, 938, 405, 877, 857, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 923, 412, 413, 414,
	945, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 853, 0, 896, 897, 898, 899,
	0, 0, 428, 429, 946, 430, 947, 830, 431, 432,
	433, 0, 434, 435, 0, 813, 436, 437, 438, 439,
	441, 913, 442, 0, 861, 443, 444, 445, 494, 893,
	940, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 810, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 806, 807,
	0, 0, 0, 0, 0, 0, 0, 836, 1479, 0,
	0, 2073, 834, 866, 823, 824, 825, 821, 822, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 915, 840, 0, 0, 0, 218, 219, 220, 454,
	881, 860, 892, 850, 891, 890, 0, 224, 852, 851,
	227, 228, 229, 842, 914, 230, 950, 951, 460, 0,
	231, 921, 0, 904, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 907, 905, 906, 911, 909,
	908, 910, 247, 248, 249, 250, 895, 252, 888, 887,
	812, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	886, 259, 0, 260, 0, 261, 262, 0, 818, 263,
	264, 266, 269, 265, 270, 271, 272, 941, 942, 831,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 885,
	883, 884, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 948, 0, 841, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 916, 917, 920, 927, 0,
	918, 862, 0, 0, 0, 210, 291, 293, 300, 0,
	926, 294, 874, 865, 876, 878, 879, 880, 875, 0,
	867, 0, 301, 928, 929, 302, 303, 304, 930, 900,
	901, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 949, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 854, 325, 933, 328, 329, 331, 330, 809, 211,
	934, 832, 919, 889, 332, 333, 0, 863, 335, 864,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 944, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 882, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 819, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 855, 856, 858, 859,
	394, 398, 401, 402, 912, 403, 383, 384, 404, 938,
	405, 877, 857, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 923, 412, 413, 414, 945, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 494, 893, 940, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 810, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 806, 807, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 2071, 834, 866,
	823, 824, 825, 821, 822, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 915, 840, 0,
	0, 0, 218, 219, 220, 454, 881, 860, 892, 850,
	891, 890, 0, 224, 852, 851, 227, 228, 229, 842,
	914, 230, 950, 951, 460, 0, 231, 921, 0, 904,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 924, 245,
	246, 907, 905, 906, 911, 909, 908, 910, 247, 248,
	249, 250, 895, 252, 888, 887, 812, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 886, 259, 0, 260,
	0, 261, 262, 0, 818, 263, 264, 266, 269, 265,
	270, 271, 272, 941, 942, 831, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 885, 883, 884, 0, 278,
	0, 279, 0, 0, 925, 280, 281, 0, 282, 948,
	0, 841, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 916, 917, 920, 927, 0, 918, 862, 0, 0,
	0, 210, 291, 293, 300, 0, 926, 294, 874, 865,
	876, 878, 879, 880, 875, 0, 867, 0, 301, 928,
	929, 302, 303, 304, 930, 900, 901, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 949, 931,
	314, 315, 932, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 854, 325, 933,
	328, 329, 331, 330, 809, 211, 934, 832, 919, 889,
	332, 333, 0, 863, 335, 864, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	944, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 882, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 937, 377, 378, 379, 380, 819, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 855, 856, 858, 859, 394, 398, 401, 402,
	912, 403, 383, 384, 404, 938, 405, 877, 857, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 923, 412,
	413, 414, 945, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 853, 0, 896, 897,
	898, 899, 0, 0, 428, 429, 946, 430, 947, 830,
	431, 432, 433, 0, 434, 435, 0, 813, 436, 437,
	438, 439, 441, 913, 442, 0, 861, 443, 444, 445,
	494, 893, 940, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 810, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	806, 807, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 2059, 834, 866, 823, 824, 825, 821,
	822, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 915, 840, 0, 0, 0, 218, 219,
	220, 454, 881, 860, 892, 850, 891, 890, 0, 224,
	852, 851, 227, 228, 229, 842, 914, 230, 950, 951,
	460, 0, 231, 921, 0, 904, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 924, 245, 246, 907, 905, 906,
	911, 909, 908, 910, 247, 248, 249, 250, 895, 252,
	888, 887, 812, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 886, 259, 0, 260, 0, 261, 262, 0,
	818, 263, 264, 266, 269, 265, 270, 271, 272, 941,
	942, 831, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 885, 883, 884, 0, 278, 0, 279, 0, 0,
	925, 280, 281, 0, 282, 948, 0, 841, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 916, 917, 920,
	927, 0, 918, 862, 0, 0, 0, 210, 291, 293,
	300, 0, 926, 294, 874, 865, 876, 878, 879, 880,
	875, 0, 867, 0, 301, 928, 929, 302, 303, 304,
	930, 900, 901, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 949, 931, 314, 315, 932, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 854, 325, 933, 328, 329, 331, 330,
	809, 211, 934, 832, 919, 889, 332, 333, 0, 863,
	335, 864, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 935, 342, 936, 943, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 944, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 882,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 937,
	377, 378, 379, 380, 819, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 855, 856,
	858, 859, 394, 398, 401, 402, 912, 403, 383, 384,
	404, 938, 405, 877, 857, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 923, 412, 413, 414, 945, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 853, 0, 896, 897, 898, 899, 0, 0,
	428, 429, 946, 430, 947, 830, 431, 432, 433, 0,
	434, 435, 0, 813, 436, 437, 438, 439, 441, 913,
	442, 0, 861, 443, 444, 445, 494, 893, 940, 0,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 810, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 0, 0, 0, 806, 807, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 2048,
	834, 866, 823, 824, 825, 821, 822, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 915,
	840, 0, 0, 0, 218, 219, 220, 454, 881, 860,
	892, 850, 891, 890, 0, 224, 852, 851, 227, 228,
	229, 842, 914, 230, 950, 951, 460, 0, 231, 921,
	0, 904, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	924, 245, 246, 907, 905, 906, 911, 909, 908, 910,
	247, 248, 249, 250, 895, 252, 888, 887, 812, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 886, 259,
	0, 260, 0, 261, 262, 0, 818, 263, 264, 266,
	269, 265, 270, 271, 272, 941, 942, 831, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 885, 883, 884,
	0, 278, 0, 279, 0, 0, 925, 280, 281, 0,
	282, 948, 0, 841, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 916, 917, 920, 927, 0, 918, 862,
	0, 0, 0, 210, 291, 293, 300, 0, 926, 294,
	874, 865, 876, 878, 879, 880, 875, 0, 867, 0,
	301, 928, 929, 302, 303, 304, 930, 900, 901, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	949, 931, 314, 315, 932, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 854,
	325, 933, 328, 329, 331, 330, 809, 211, 934, 832,
	919, 889, 332, 333, 0, 863, 335, 864, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 935, 342, 936,
	943, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 944, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 882, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 937, 377, 378, 379, 380,
	819, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 855, 856, 858, 859, 394, 398,
	401, 402, 912, 403, 383, 384, 404, 938, 405, 877,
	857, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	923, 412, 413, 414, 945, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 853, 0,
	896, 897, 898, 899, 0, 0, 428, 429, 946, 430,
	947, 830, 431, 432, 433, 0, 434, 435, 0, 813,
	436, 437, 438, 439, 441, 913, 442, 0, 861, 443,
	444, 445, 494, 893, 940, 0, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 810,
	0, 0, 0, 0, 0, 0, 0, 808, 0, 0,
	0, 0, 806, 807, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 2046, 834, 2038, 823, 824,
	825, 821, 822, 835, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 915, 840, 0, 0, 0,
	218, 219, 220, 454, 881, 860, 892, 850, 891, 890,
	0, 224, 852, 851, 227, 228, 229, 842, 914, 230,
	950, 951, 460, 0, 231, 921, 0, 904, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 924, 245, 246, 907,
	905, 906, 911, 909, 908, 910, 247, 248, 249, 250,
	895, 2041, 888, 887, 812, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 886, 259, 0, 260, 0, 261,
	262, 0, 818, 263, 264, 266, 269, 265, 270, 271,
	272, 941, 942, 831, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 885, 883, 884, 0, 278, 0, 279,
	0, 0, 925, 280, 281, 0, 282, 948, 0, 841,
	283, 0, 284, 285, 2042, 287, 288, 289, 290, 916,
	917, 920, 927, 0, 918, 862, 0, 0, 0, 210,
	291, 293, 300, 0, 926, 294, 874, 865, 876, 878,
	879, 880, 875, 0, 867, 0, 301, 928, 929, 302,
	303, 304, 930, 900, 901, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 949, 931, 314, 315,
	932, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 2043, 2040, 326, 854, 325, 933, 328, 329,
	331, 330, 809, 211, 934, 832, 919, 889, 332, 333,
	0, 863, 335, 864, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 944, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 882, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 937, 377, 378, 379, 380, 819, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 2044, 0, 399, 400,
	855, 856, 858, 859, 394, 398, 401, 402, 912, 403,
	383, 384, 404, 938, 405, 877, 857, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 923, 412, 413, 414,
	945, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 853, 0, 896, 897, 898, 899,
	0, 0, 428, 429, 946, 430, 947, 830, 431, 432,
	433, 0, 434, 435, 0, 813, 436, 437, 438, 439,
	441, 913, 442, 0, 861, 443, 444, 445, 494, 893,
	940, 0, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 2039, 452, 810, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 0, 0, 806, 807,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 2035, 834, 2038, 823, 824, 825, 821, 822, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 915, 840, 0, 0, 0, 218, 219, 220, 454,
	881, 860, 892, 850, 891, 890, 0, 224, 852, 851,
	227, 228, 229, 842, 914, 230, 950, 951, 460, 0,
	231, 921, 0, 904, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 907, 905, 906, 911, 909,
	908, 910, 247, 248, 249, 250, 895, 2041, 888, 887,
	812, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	886, 259, 0, 260, 0, 261, 262, 0, 818, 263,
	264, 266, 269, 265, 270, 271, 272, 941, 942, 831,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 885,
	883, 884, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 948, 0, 841, 283, 0, 284, 285,
	2042, 287, 288, 289, 290, 916, 917, 920, 927, 0,
	918, 862, 0, 0, 0, 210, 291, 293, 300, 0,
	926, 294, 874, 865, 876, 878, 879, 880, 875, 0,
	867, 0, 301, 928, 929, 302, 303, 304, 930, 900,
	901, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 949, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 2043, 2040,
	326, 854, 325, 933, 328, 329, 331, 330, 809, 211,
	934, 832, 919, 889, 332, 333, 0, 863, 335, 864,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 944, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 882, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 819, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 2044, 0, 399, 400, 855, 856, 858, 859,
	394, 398, 401, 402, 912, 403, 383, 384, 404, 938,
	405, 877, 857, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 923, 412, 413, 414, 945, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 494, 893, 940, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 2039,
	452, 810, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 806, 807, 866, 823, 824, 825,
	821, 822, 835, 836, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 915, 840, 0, 0, 0, 218,
	219, 220, 454, 881, 860, 892, 850, 891, 890, 0,
	224, 852, 851, 227, 228, 229, 842, 914, 230, 950,
	951, 460, 0, 231, 921, 0, 904, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 924, 245, 246, 907, 905,
	906, 911, 909, 908, 910, 247, 248, 249, 250, 895,
	252, 888, 887, 812, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 886, 259, 0, 260, 0, 261, 262,
	0, 818, 263, 264, 266, 269, 265, 270, 271, 272,
	941, 942, 831, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 885, 883, 884, 0, 278, 0, 279, 0,
	0, 925, 280, 281, 0, 282, 948, 0, 841, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 916, 917,
	920, 927, 0, 918, 862, 0, 0, 0, 210, 291,
	293, 300, 0, 926, 294, 874, 865, 876, 878, 879,
	880, 875, 0, 867, 0, 301, 928, 929, 302, 303,
	304, 930, 900, 901, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 949, 931, 314, 315, 932,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 854, 325, 933, 328, 329, 331,
	330, 809, 211, 934, 832, 919, 889, 332, 333, 0,
	863, 335, 864, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 935, 342, 936, 943, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 944, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	882, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	937, 377, 378, 379, 380, 819, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 855,
	856, 858, 859, 394, 398, 401, 402, 912, 403, 383,
	384, 404, 938, 405, 877, 857, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 923, 412, 413, 414, 945,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 853, 0, 896, 897, 898, 899, 0,
	0, 428, 429, 946, 430, 947, 830, 431, 432, 433,
	0, 434, 435, 0, 813, 436, 437, 438, 439, 441,
	913, 442, 0, 861, 443, 444, 445, 494, 893, 940,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 810, 0, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 806, 807, 0,
	0, 0, 0, 0, 1487, 0, 836, 0, 0, 0,
	0, 834, 866, 823, 824, 825, 821, 822, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 1880, 217, 0, 0, 0, 0,
	915, 840, 0, 0, 0, 218, 219, 220, 454, 881,
	860, 892, 850, 891, 890, 0, 224, 852, 851, 227,
	228, 229, 842, 914, 230, 950, 951, 460, 0, 231,
	921, 0, 904, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 924, 245, 246, 907, 905, 906, 911, 909, 908,
	910, 247, 248, 249, 250, 895, 252, 888, 887, 812,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 886,
	259, 0, 260, 0, 261, 262, 0, 818, 263, 264,
	266, 269, 265, 270, 271, 272, 941, 942, 831, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 885, 883,
	884, 0, 278, 0, 279, 0, 0, 925, 280, 281,
	0, 282, 948, 0, 841, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 916, 917, 920, 927, 0, 918,
	862, 0, 0, 0, 210, 291, 293, 300, 0, 926,
	294, 874, 865, 876, 878, 879, 880, 875, 0, 867,
	0, 301, 928, 929, 302, 303, 304, 930, 900, 901,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 949, 931, 314, 315, 932, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	854, 325, 933, 328, 329, 331, 330, 809, 211, 934,
	832, 919, 889, 332, 333, 0, 863, 335, 864, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 944, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 882, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 937, 377, 378, 379,
	380, 819, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 855, 856, 858, 859, 394,
	398, 401, 402, 912, 403, 383, 384, 404, 938, 405,
	877, 857, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 923, 412, 413, 414, 945, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 853,
	0, 896, 897, 898, 899, 0, 0, 428, 429, 946,
	430, 947, 830, 431, 432, 433, 0, 434, 435, 0,
	813, 436, 437, 438, 439, 441, 913, 442, 0, 861,
	443, 444, 445, 494, 893, 940, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	810, 0, 0, 0, 0, 0, 0, 0, 808, 0,
	0, 0, 0, 806, 807, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 1181, 834, 866, 823,
	824, 825, 821, 822, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 915, 840, 0, 0,
	0, 218, 219, 220, 454, 881, 860, 892, 850, 891,
	890, 0, 224, 852, 851, 227, 228, 229, 842, 914,
	230, 950, 951, 460, 0, 231, 921, 0, 904, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	907, 905, 906, 911, 909, 908, 910, 247, 248, 249,
	250, 895, 252, 888, 887, 812, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 886, 259, 0, 260, 0,
	261, 262, 0, 818, 263, 264, 266, 269, 265, 270,
	271, 272, 941, 942, 831, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 885, 883, 884, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 948, 0,
	841, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	1180, 917, 920, 927, 0, 918, 862, 0, 0, 0,
	210, 291, 293, 300, 0, 926, 294, 874, 865, 876,
	878, 879, 880, 875, 0, 867, 0, 301, 928, 929,
	302, 303, 304, 930, 900, 901, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 949, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 854, 325, 933, 328,
	329, 331, 330, 809, 211, 934, 832, 919, 889, 332,
	333, 0, 863, 335, 864, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 944,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 882, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 819, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 855, 856, 858, 859, 394, 398, 401, 402, 912,
	403, 383, 384, 404, 938, 405, 877, 857, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 923, 412, 413,
	414, 945, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 853, 0, 896, 897, 898,
	899, 0, 0, 428, 429, 946, 430, 947, 830, 431,
	432, 433, 0, 434, 435, 0, 813, 436, 437, 438,
	439, 441, 913, 442, 0, 861, 443, 444, 445, 494,
	893, 940, 0, 447, 446, 497, 0, 0, 0, 0,
	448, 449, 498, 450, 451, 452, 810, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 0, 0, 806,
	807, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 1175, 834, 866, 823, 824, 825, 821, 822,
	835, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 915, 840, 0, 0, 0, 218, 219, 220,
	454, 881, 860, 892, 850, 891, 890, 0, 224, 852,
	851, 227, 228, 229, 842, 914, 230, 950, 951, 460,
	0, 231, 921, 0, 904, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 924, 245, 246, 907, 905, 906, 911,
	909, 908, 910, 247, 248, 249, 250, 895, 252, 888,
	887, 812, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 886, 259, 0, 260, 0, 261, 262, 0, 818,
	263, 264, 266, 269, 265, 270, 271, 272, 941, 942,
	831, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	885, 883, 884, 0, 278, 0, 279, 0, 0, 925,
	280, 281, 0, 282, 948, 0, 841, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 1174, 917, 920, 927,
	0, 918, 862, 0, 0, 0, 210, 291, 293, 300,
	0, 926, 294, 874, 865, 876, 878, 879, 880, 875,
	0, 867, 0, 301, 928, 929, 302, 303, 304, 930,
	900, 901, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 949, 931, 314, 315, 932, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 854, 325, 933, 328, 329, 331, 330, 809,
	211, 934, 832, 919, 889, 332, 333, 0, 863, 335,
	864, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	935, 342, 936, 943, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 944, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 882, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 937, 377,
	378, 379, 380, 819, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 855, 856, 858,
	859, 394, 398, 401, 402, 912, 403, 383, 384, 404,
	938, 405, 877, 857, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 923, 412, 413, 414, 945, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 853, 0, 896, 897, 898, 899, 0, 0, 428,
	429, 946, 430, 947, 830, 431, 432, 433, 0, 434,
	435, 0, 813, 436, 437, 438, 439, 441, 913, 442,
	0, 861, 443, 444, 445, 494, 893, 940, 0, 447,
	446, 497, 0, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 810, 0, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 0, 806, 807, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 1170, 834,
	866, 823, 824, 825, 821, 822, 835, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 915, 840,
	0, 0, 0, 218, 219, 220, 454, 881, 860, 892,
	850, 891, 890, 0, 224, 852, 851, 227, 228, 229,
	842, 914, 230, 950, 951, 460, 0, 231, 921, 0,
	904, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 924,
	245, 246, 907, 905, 906, 911, 909, 908, 910, 247,
	248, 249, 250, 895, 252, 888, 887, 812, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 886, 259, 0,
	260, 0, 261, 262, 0, 818, 263, 264, 266, 269,
	265, 270, 271, 272, 941, 942, 831, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 885, 883, 884, 0,
	278, 0, 279, 0, 0, 925, 280, 281, 0, 282,
	948, 0, 841, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 916, 917, 920, 927, 0, 918, 862, 0,
	0, 0, 210, 291, 293, 300, 0, 926, 294, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 301,
	928, 929, 302, 303, 304, 930, 900, 901, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 949,
	931, 314, 315, 932, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 854, 325,
	933, 328, 329, 331, 330, 809, 211, 934, 832, 919,
	889, 332, 333, 0, 863, 335, 864, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 944, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 882, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 937, 377, 378, 379, 380, 819,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 855, 856, 858, 859, 394, 398, 401,
	402, 912, 403, 383, 384, 404, 938, 405, 877, 857,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 923,
	412, 413, 414, 945, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 853, 0, 896,
	897, 898, 899, 0, 0, 428, 429, 946, 430, 947,
	830, 431, 432, 433, 0, 434, 435, 0, 813, 436,
	437, 438, 439, 441, 913, 442, 0, 861, 443, 444,
	445, 494, 893, 940, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 810, 0,
	0, 0, 0, 0, 0, 0, 808, 0, 0, 0,
	0, 806, 807, 866, 823, 824, 825, 821, 822, 835,
	836, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 915, 840, 0, 0, 0, 218, 219, 220, 454,
	881, 860, 892, 850, 891, 890, 0, 224, 852, 851,
	227, 228, 229, 842, 914, 230, 950, 951, 460, 0,
	231, 921, 0, 904, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 907, 905, 906, 911, 909,
	908, 910, 247, 248, 249, 250, 895, 252, 888, 887,
	812, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	886, 259, 0, 260, 0, 261, 262, 0, 818, 263,
	264, 266, 269, 265, 270, 271, 272, 941, 942, 831,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 885,
	883, 884, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 948, 0, 841, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 916, 917, 920, 927, 0,
	918, 862, 0, 0, 0, 210, 291, 293, 300, 0,
	926, 294, 874, 865, 876, 878, 879, 880, 875, 0,
	867, 0, 301, 928, 929, 302, 303, 304, 930, 900,
	901, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 949, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 854, 325, 933, 328, 329, 331, 330, 809, 211,
	934, 832, 919, 889, 332, 333, 0, 863, 335, 864,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 943, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 944, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 882, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 819, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 855, 856, 858, 859,
	394, 398, 401, 402, 912, 403, 383, 384, 404, 938,
	405, 877, 857, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 923, 412, 413, 414, 945, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	853, 0, 896, 897, 898, 899, 0, 0, 428, 429,
	946, 430, 947, 830, 431, 432, 433, 0, 434, 435,
	0, 813, 436, 437, 438, 439, 441, 913, 442, 0,
	861, 443, 444, 445, 494, 893, 940, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 810, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 0, 0, 0, 806, 807, 866, 823, 824, 825,
	821, 822, 835, 836, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 915, 840, 0, 0, 0, 218,
	219, 220, 454, 881, 860, 892, 850, 891, 890, 0,
	224, 852, 851, 227, 228, 229, 842, 914, 230, 950,
	951, 460, 0, 231, 921, 0, 904, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 924, 245, 3300, 907, 905,
	906, 911, 909, 908, 910, 247, 248, 249, 250, 895,
	252, 888, 887, 812, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 886, 259, 0, 260, 0, 261, 262,
	0, 818, 263, 264, 266, 269, 265, 270, 271, 272,
	941, 942, 831, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 885, 883, 884, 0, 278, 0, 279, 0,
	0, 925, 280, 281, 0, 282, 948, 0, 841, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 916, 917,
	920, 927, 0, 918, 862, 0, 0, 0, 210, 291,
	293, 300, 0, 926, 294, 874, 865, 876, 878, 879,
	880, 875, 0, 867, 0, 301, 928, 929, 302, 303,
	304, 930, 900, 901, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 949, 931, 314, 315, 932,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 854, 325, 933, 328, 329, 331,
	330, 809, 211, 934, 832, 919, 889, 332, 333, 0,
	863, 335, 864, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 935, 342, 936, 943, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 944, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	882, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	937, 377, 378, 379, 380, 819, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 855,
	856, 858, 859, 394, 398, 401, 402, 912, 403, 383,
	384, 404, 938, 405, 877, 857, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 923, 412, 413, 414, 945,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 853, 0, 896, 897, 898, 899, 0,
	0, 428, 429, 946, 430, 947, 830, 431, 432, 433,
	0, 3299, 435, 0, 813, 436, 437, 438, 439, 441,
	913, 442, 0, 861, 443, 444, 445, 494, 893, 940,
	0, 447, 446, 497, 0, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 810, 0, 0, 0, 0, 0,
	0, 0, 808, 0, 0, 0, 0, 806, 807, 866,
	823, 824, 825, 821, 822, 835, 836, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 915, 840, 0,
	0, 0, 218, 219, 220, 3298, 881, 860, 892, 850,
	891, 890, 0, 224, 852, 851, 227, 228, 229, 842,
	914, 230, 950, 951, 460, 0, 231, 921, 0, 904,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 924, 245,
	3300, 907, 905, 906, 911, 909, 908, 910, 247, 248,
	249, 250, 895, 252, 888, 887, 812, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 886, 259, 0, 260,
	0, 261, 262, 0, 818, 263, 264, 266, 269, 265,
	270, 271, 272, 941, 942, 831, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 885, 883, 884, 0, 278,
	0, 279, 0, 0, 925, 280, 281, 0, 282, 948,
	0, 841, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 916, 917, 920, 927, 0, 918, 862, 0, 0,
	0, 210, 291, 293, 300, 0, 926, 294, 874, 865,
	876, 878, 879, 880, 875, 0, 867, 0, 301, 928,
	929, 302, 303, 304, 930, 900, 901, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 949, 931,
	314, 315, 932, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 854, 325, 933,
	328, 329, 331, 330, 809, 211, 934, 832, 919, 889,
	332, 333, 0, 863, 335, 864, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	944, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 882, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 937, 377, 378, 379, 380, 819, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 855, 856, 858, 859, 394, 398, 401, 402,
	912, 403, 383, 384, 404, 938, 405, 877, 857, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 923, 412,
	413, 414, 945, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 853, 0, 896, 897,
	898, 899, 0, 0, 428, 429, 946, 430, 947, 830,
	431, 432, 433, 0, 3299, 435, 0, 813, 436, 437,
	438, 439, 441, 913, 442, 0, 861, 443, 444, 445,
	494, 893, 940, 0, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 810, 0, 0,
	0, 0, 0, 0, 0, 808, 0, 0, 0, 0,
	806, 807, 866, 823, 824, 825, 821, 822, 835, 836,
	0, 0, 0, 0, 834, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	915, 840, 0, 0, 0, 218, 219, 220, 454, 881,
	860, 892, 850, 891, 890, 0, 224, 852, 851, 227,
	228, 229, 842, 914, 230, 950, 951, 460, 0, 231,
	921, 0, 904, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 924, 245, 246, 907, 905, 906, 911, 909, 908,
	910, 247, 248, 249, 250, 895, 252, 888, 887, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 886,
	259, 0, 260, 0, 261, 262, 0, 818, 263, 264,
	266, 269, 265, 270, 271, 272, 941, 942, 831, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 885, 883,
	884, 0, 278, 0, 279, 0, 0, 925, 280, 281,
	0, 282, 948, 0, 841, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 916, 917, 920, 927, 0, 918,
	862, 0, 0, 0, 210, 291, 293, 300, 0, 926,
	294, 874, 865, 876, 878, 879, 880, 875, 0, 867,
	0, 301, 928, 929, 302, 303, 304, 930, 900, 901,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 949, 931, 314, 315, 932, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	854, 325, 933, 328, 329, 331, 330, 0, 211, 934,
	832, 919, 889, 332, 333, 0, 863, 335, 864, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 944, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 882, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 937, 377, 378, 379,
	380, 819, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 855, 856, 858, 859, 394,
	398, 401, 402, 912, 403, 383, 384, 404, 938, 405,
	877, 857, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 923, 412, 413, 414, 945, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 853,
	0, 896, 897, 898, 899, 0, 0, 428, 429, 946,
	430, 947, 830, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 913, 442, 0, 861,
	443, 444, 445, 494, 893, 940, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	866, 823, 824, 825, 821, 822, 835, 0, 2056, 0,
	0, 0, 0, 2054, 2055, 0, 0, 212, 213, 214,
	215, 216, 836, 217, 0, 0, 0, 834, 915, 840,
	0, 0, 0, 218, 219, 220, 0, 881, 860, 892,
	850, 891, 890, 0, 224, 852, 851, 227, 228, 229,
	842, 914, 230, 950, 951, 460, 0, 231, 921, 0,
	904, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 924,
	245, 3300, 907, 905, 906, 911, 909, 908, 910, 247,
	248, 249, 250, 895, 252, 888, 887, 812, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 886, 259, 0,
	260, 0, 261, 262, 0, 818, 263, 264, 266, 269,
	265, 270, 271, 272, 941, 942, 831, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 885, 883, 884, 0,
	278, 0, 279, 0, 0, 925, 280, 281, 0, 282,
	948, 0, 841, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 916, 917, 920, 0, 0, 918, 862, 0,
	0, 0, 210, 291, 293, 300, 0, 926, 294, 874,
	865, 876, 878, 879, 880, 875, 0, 867, 0, 301,
	0, 0, 302, 303, 304, 930, 900, 901, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 949,
	931, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 854, 325,
	933, 328, 329, 331, 330, 809, 211, 0, 832, 919,
	889, 332, 333, 0, 863, 335, 864, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 944, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 882, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 937, 377, 378, 379, 380, 819,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 855, 856, 858, 859, 394, 398, 401,
	402, 912, 403, 383, 384, 404, 0, 405, 877, 857,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 923,
	412, 413, 414, 945, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 853, 0, 896,
	897, 898, 899, 0, 0, 428, 429, 946, 430, 947,
	830, 431, 432, 433, 0, 3299, 435, 0, 813, 436,
	437, 438, 439, 441, 913, 442, 0, 861, 443, 444,
	445, 494, 893, 940, 0, 447, 446, 497, 0, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 799, 0, 987,
	0, 806, 807, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 834, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 915, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	914, 230, 458, 459, 460, 0, 231, 921, 0, 904,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 924, 245,
	246, 907, 905, 906, 911, 909, 908, 910, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 941, 942, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 925, 280, 281, 0, 282, 948,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 916, 917, 920, 927, 0, 918, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 926, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 928,
	929, 302, 303, 304, 930, 305, 306, 0, 0, 307,
	308, 309, 310, 974, 312, 311, 0, 313, 949, 931,
	314, 315, 932, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 933,
	328, 329, 331, 330, 0, 211, 934, 0, 919, 479,
	332, 333, 0, 334, 335, 336, 0, 979, 338, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 943, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	944, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 937, 377, 378, 379, 380, 485, 981,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 175,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	912, 403, 383, 384, 404, 938, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 945, 0, 419, 420, 418, 177, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 946, 430, 947, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 913, 442, 0, 440, 443, 444, 445,
	1291, 495, 496, 0, 447, 446, 497, 987, 0, 0,
	169, 448, 449, 498, 450, 451, 452, 0, 170, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 915, 0, 971, 0, 1566,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	0, 224, 225, 226, 227, 228, 229, 0, 914, 230,
	458, 459, 460, 0, 231, 921, 0, 904, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 924, 245, 246, 907,
	905, 906, 911, 909, 908, 910, 247, 248, 249, 250,
	251, 252, 462, 463, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 941, 942, 0, 209, 0, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 0, 279,
	0, 0, 925, 280, 281, 0, 282, 948, 0, 469,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 916,
	917, 920, 927, 0, 918, 292, 0, 0, 0, 210,
	291, 293, 300, 0, 926, 294, 473, 296, 295, 297,
	298, 299, 474, 0, 475, 0, 301, 928, 929, 302,
	303, 304, 930, 305, 306, 0, 0, 307, 308, 309,
	310, 974, 312, 311, 0, 313, 949, 931, 314, 315,
	932, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 933, 328, 329,
	331, 330, 0, 211, 934, 0, 919, 479, 332, 333,
	0, 334, 335, 336, 0, 979, 338, 339, 340, 0,
	0, 341, 480, 935, 342, 936, 943, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 944, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 937, 377, 378, 379, 380, 485, 981, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 175, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 912, 403,
	383, 384, 404, 938, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	945, 0, 419, 420, 418, 177, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 946, 430, 947, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 913, 442, 0, 440, 443, 444, 445, 1291, 495,
	496, 0, 447, 446, 497, 0, 0, 0, 169, 448,
	449, 498, 450, 451, 452, 0, 170, 0, 0, 2477,
	0, 987, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 971, 0, 1566, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 915,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 914, 230, 458, 459, 460, 0, 231, 921,
	0, 904, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	924, 245, 246, 907, 905, 906, 911, 909, 908, 910,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 941, 942, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 925, 280, 281, 0,
	282, 948, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 916, 917, 920, 927, 0, 918, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 926, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 928, 929, 302, 303, 304, 930, 305, 306, 0,
	0, 307, 308, 309, 310, 974, 312, 311, 0, 313,
	949, 931, 314, 315, 932, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 933, 328, 329, 331, 330, 0, 211, 934, 0,
	919, 479, 332, 333, 0, 334, 335, 336, 0, 979,
	338, 339, 340, 0, 0, 341, 480, 935, 342, 936,
	943, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 944, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 937, 377, 378, 379, 380,
	485, 981, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 912, 403, 383, 384, 404, 938, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 945, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 946, 430,
	947, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 913, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 0,
	970, 0, 987, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 971,
	915, 976, 0, 0, 0, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 0, 224, 225, 226, 227,
	228, 229, 0, 914, 230, 458, 459, 460, 0, 231,
	921, 0, 904, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 924, 245, 246, 907, 905, 906, 911, 909, 908,
	910, 247, 248, 249, 250, 251, 252, 462, 463, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 941, 942, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 0, 279, 0, 0, 925, 280, 281,
	0, 282, 948, 0, 469, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 916, 917, 920, 927, 0, 918,
	292, 0, 0, 0, 210, 291, 293, 300, 0, 926,
	294, 473, 296, 295, 297, 298, 299, 474, 0, 475,
	0, 301, 928, 929, 302, 303, 304, 930, 305, 306,
	0, 0, 307, 308, 309, 310, 974, 312, 311, 0,
	313, 949, 931, 314, 315, 932, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 933, 328, 329, 331, 330, 0, 211, 934,
	0, 919, 479, 332, 333, 0, 334, 335, 336, 0,
	979, 338, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 943, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 944, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 937, 377, 378, 379,
	380, 485, 981, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 912, 403, 383, 384, 404, 938, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 945, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 946,
	430, 947, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 913, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	987, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 915, 0,
	971, 0, 976, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 914, 230, 458, 459, 460, 0, 231, 921, 0,
	904, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 924,
	245, 246, 907, 905, 906, 911, 909, 908, 910, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 941, 942, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 925, 280, 281, 0, 282,
	948, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 916, 917, 920, 927, 0, 918, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 926, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	928, 929, 302, 303, 304, 930, 305, 306, 0, 0,
	307, 308, 309, 310, 974, 312, 311, 0, 313, 949,
	931, 314, 315, 932, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	933, 328, 329, 331, 330, 0, 211, 934, 0, 919,
	479, 332, 333, 0, 334, 335, 336, 0, 979, 338,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 943,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 944, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 937, 377, 378, 379, 380, 485,
	981, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 912, 403, 383, 384, 404, 938, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 945, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 946, 430, 947,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 913, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 987, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 915, 0, 971, 0,
	976, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 914,
	230, 458, 459, 460, 0, 231, 921, 0, 904, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	907, 905, 906, 911, 909, 908, 910, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 941, 942, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 948, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	916, 917, 920, 927, 0, 918, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 949, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 211, 934, 0, 919, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 944,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 981, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 912,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 945, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 946, 430, 947, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 913, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 799, 0, 1145, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 1468, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 1049, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 927, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 0, 934, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 175, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 177, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 1291,
	495, 496, 0, 447, 446, 497, 1288, 0, 1145, 169,
	448, 449, 498, 450, 451, 452, 0, 170, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 147, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 1049, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 927, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 0, 934, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 175, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 177, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 1291,
	495, 496, 0, 447, 446, 497, 0, 0, 0, 169,
	448, 449, 498, 450, 451, 452, 0, 170, 0, 0,
	0, 0, 1145, 1144, 0, 0, 0, 0, 1142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 458, 459, 460, 0, 231,
	461, 0, 1049, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 924, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 462, 463, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 465, 466, 0, 209,
	0, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 0, 279, 0, 0, 925, 280, 281,
	0, 282, 468, 0, 469, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 470, 471, 472, 927, 0, 476,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 926,
	294, 473, 296, 295, 297, 298, 299, 474, 0, 475,
	0, 301, 928, 929, 302, 303, 304, 930, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 477, 931, 314, 315, 932, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 933, 328, 329, 331, 330, 0, 0, 934,
	0, 478, 479, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 935, 342,
	936, 481, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 937, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 938, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	0, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	1145, 1144, 0, 0, 0, 0, 1142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 2668, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	1049, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 924,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 925, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 927, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 926, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	928, 929, 302, 303, 304, 930, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	931, 314, 315, 932, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	933, 328, 329, 331, 330, 0, 0, 934, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 935, 342, 936, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 937, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 938, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 987, 0,
	0, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 915, 0, 0, 0,
	1295, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 914,
	230, 458, 459, 460, 0, 231, 921, 0, 904, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 924, 245, 246,
	907, 905, 906, 911, 909, 908, 910, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 941, 942, 0, 209, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 925, 280, 281, 0, 282, 948, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	916, 917, 920, 927, 0, 918, 292, 0, 0, 0,
	210, 291, 293, 300, 0, 926, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 928, 929,
	302, 303, 304, 930, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 949, 931, 314,
	315, 932, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 933, 328,
	329, 331, 330, 0, 211, 934, 0, 919, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 935, 342, 936, 943, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 944,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 937, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 0, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 912,
	403, 383, 384, 404, 938, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 945, 0, 419, 420, 418, 0, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 946, 430, 947, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 913, 442, 0, 440, 443, 444, 445, 494,
	495, 496, 0, 447, 446, 497, 799, 0, 206, 0,
	448, 449, 498, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 214, 215, 216,
	0, 217, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 218, 219, 220, 454, 455, 221, 456, 222, 223,
	457, 0, 224, 225, 226, 227, 228, 229, 0, 0,
	230, 458, 459, 460, 0, 231, 461, 0, 0, 0,
	232, 233, 234, 235, 236, 0, 238, 239, 240, 237,
	0, 241, 0, 242, 243, 244, 0, 0, 245, 246,
	0, 0, 0, 0, 0, 0, 0, 247, 248, 249,
	250, 251, 252, 462, 463, 0, 253, 0, 255, 254,
	0, 256, 0, 0, 257, 258, 259, 0, 260, 0,
	261, 262, 0, 464, 263, 264, 266, 269, 265, 270,
	271, 272, 465, 466, 0, 0, 0, 0, 0, 0,
	0, 273, 274, 275, 467, 276, 277, 0, 278, 0,
	279, 0, 0, 0, 280, 281, 0, 282, 468, 0,
	469, 283, 0, 284, 285, 286, 287, 288, 289, 290,
	470, 471, 472, 0, 0, 476, 292, 0, 0, 0,
	0, 291, 293, 300, 0, 0, 294, 473, 296, 295,
	297, 298, 299, 474, 0, 475, 0, 301, 0, 0,
	302, 303, 304, 0, 305, 306, 0, 0, 307, 308,
	309, 310, 0, 312, 311, 0, 313, 477, 0, 314,
	315, 0, 0, 316, 317, 0, 0, 318, 0, 319,
	320, 323, 321, 322, 324, 326, 327, 325, 0, 328,
	329, 331, 330, 0, 0, 0, 0, 478, 479, 332,
	333, 0, 334, 335, 336, 0, 0, 338, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 337,
	344, 345, 346, 347, 348, 349, 0, 350, 351, 482,
	352, 483, 353, 0, 354, 0, 355, 356, 357, 358,
	359, 360, 484, 361, 362, 0, 363, 364, 365, 366,
	367, 0, 369, 370, 371, 368, 372, 373, 374, 375,
	0, 376, 0, 377, 378, 379, 380, 485, 381, 0,
	382, 386, 387, 388, 389, 390, 391, 392, 175, 399,
	400, 393, 395, 396, 397, 394, 398, 401, 402, 0,
	403, 383, 384, 404, 0, 405, 486, 406, 407, 0,
	417, 408, 409, 410, 385, 411, 415, 416, 412, 413,
	414, 487, 0, 419, 420, 418, 177, 421, 422, 423,
	424, 425, 267, 426, 268, 427, 0, 488, 489, 490,
	491, 0, 0, 428, 429, 492, 430, 493, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 1291,
	495, 496, 0, 447, 446, 497, 206, 0, 0, 169,
	448, 449, 498, 450, 451, 452, 0, 170, 0, 0,
	0, 0, 0, 212, 213, 214, 215, 216, 0, 217,
	0, 0, 0, 0, 453, 0, 0, 0, 147, 218,
	219, 220, 454, 455, 221, 456, 222, 223, 457, 0,
	224, 225, 226, 227, 228, 229, 0, 0, 230, 458,
	459, 460, 0, 231, 461, 0, 0, 0, 232, 233,
	234, 235, 236, 0, 238, 239, 240, 237, 0, 241,
	0, 242, 243, 244, 0, 0, 245, 246, 0, 0,
	0, 0, 0, 0, 0, 247, 248, 249, 250, 251,
	252, 462, 463, 0, 253, 0, 255, 254, 0, 256,
	0, 0, 257, 258, 259, 0, 260, 0, 261, 262,
	0, 464, 263, 264, 266, 269, 265, 270, 271, 272,
	465, 466, 0, 209, 0, 0, 0, 0, 0, 273,
	274, 275, 467, 276, 277, 0, 278, 0, 279, 0,
	0, 0, 280, 281, 0, 282, 468, 0, 469, 283,
	0, 284, 285, 286, 287, 288, 289, 290, 470, 471,
	472, 0, 0, 476, 292, 0, 0, 0, 210, 291,
	293, 300, 0, 0, 294, 473, 296, 295, 297, 298,
	299, 474, 0, 475, 0, 301, 0, 0, 302, 303,
	304, 0, 305, 306, 0, 0, 307, 308, 309, 310,
	0, 312, 311, 0, 313, 477, 0, 314, 315, 0,
	0, 316, 317, 0, 0, 318, 0, 319, 320, 323,
	321, 322, 324, 326, 327, 325, 0, 328, 329, 331,
	330, 0, 211, 0, 0, 478, 479, 332, 333, 0,
	334, 335, 336, 0, 0, 338, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 337, 344, 345,
	346, 347, 348, 349, 0, 350, 351, 482, 352, 483,
	353, 0, 354, 0, 355, 356, 357, 358, 359, 360,
	484, 361, 362, 0, 363, 364, 365, 366, 367, 0,
	369, 370, 371, 368, 372, 373, 374, 375, 0, 376,
	0, 377, 378, 379, 380, 485, 381, 0, 382, 386,
	387, 388, 389, 390, 391, 392, 0, 399, 400, 393,
	395, 396, 397, 394, 398, 401, 402, 0, 403, 383,
	384, 404, 0, 405, 486, 406, 407, 0, 417, 408,
	409, 410, 385, 411, 415, 416, 412, 413, 414, 487,
	0, 419, 420, 418, 0, 421, 422, 423, 424, 425,
	267, 426, 268, 427, 0, 488, 489, 490, 491, 0,
	0, 428, 429, 492, 430, 493, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 494, 495, 496,
	0, 447, 446, 497, 206, 0, 0, 0, 448, 449,
	498, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 214, 215, 216, 0, 217, 0, 0,
	0, 0, 453, 0, 0, 0, 1571, 218, 219, 220,
	454, 455, 221, 456, 222, 223, 457, 0, 224, 225,
	226, 227, 228, 229, 0, 0, 230, 458, 459, 460,
	0, 231, 461, 0, 0, 0, 232, 233, 234, 235,
	236, 0, 238, 239, 240, 237, 0, 241, 0, 242,
	243, 244, 0, 0, 245, 246, 0, 0, 0, 0,
	0, 0, 0, 247, 248, 249, 250, 251, 252, 462,
	463, 0, 253, 0, 255, 254, 0, 256, 0, 0,
	257, 258, 259, 0, 260, 0, 261, 262, 0, 464,
	263, 264, 266, 269, 265, 270, 271, 272, 465, 466,
	0, 209, 0, 0, 0, 0, 0, 273, 274, 275,
	467, 276, 277, 0, 278, 0, 279, 0, 0, 0,
	280, 281, 0, 282, 468, 0, 469, 283, 0, 284,
	285, 286, 287, 288, 289, 290, 470, 471, 472, 0,
	0, 476, 292, 0, 0, 0, 210, 291, 293, 300,
	0, 0, 294, 473, 296, 295, 297, 298, 299, 474,
	0, 475, 0, 301, 0, 0, 302, 303, 304, 0,
	305, 306, 0, 0, 307, 308, 309, 310, 0, 312,
	311, 0, 313, 477, 0, 314, 315, 0, 0, 316,
	317, 0, 0, 318, 0, 319, 320, 323, 321, 322,
	324, 326, 327, 325, 0, 328, 329, 331, 330, 0,
	211, 0, 0, 478, 479, 332, 333, 0, 334, 335,
	336, 0, 0, 338, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 337, 344, 345, 346, 347,
	348, 349, 0, 350, 351, 482, 352, 483, 353, 0,
	354, 0, 355, 356, 357, 358, 359, 360, 484, 361,
	362, 0, 363, 364, 365, 366, 367, 0, 369, 370,
	371, 368, 372, 373, 374, 375, 0, 376, 0, 377,
	378, 379, 380, 485, 381, 0, 382, 386, 387, 388,
	389, 390, 391, 392, 0, 399, 400, 393, 395, 396,
	397, 394, 398, 401, 402, 0, 403, 383, 384, 404,
	0, 405, 486, 406, 407, 0, 417, 408, 409, 410,
	385, 411, 415, 416, 412, 413, 414, 487, 0, 419,
	420, 418, 0, 421, 422, 423, 424, 425, 267, 426,
	268, 427, 0, 488, 489, 490, 491, 0, 0, 428,
	429, 492, 430, 493, 0, 431, 432, 433, 0, 434,
	435, 0, 0, 436, 437, 438, 439, 441, 0, 442,
	0, 440, 443, 444, 445, 494, 495, 496, 0, 447,
	446, 497, 206, 0, 0, 0, 448, 449, 498, 450,
	451, 452, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 214, 215, 216, 0, 217, 0, 0, 0, 0,
	453, 0, 2618, 0, 0, 218, 219, 220, 454, 455,
	221, 456, 222, 223, 457, 0, 224, 225, 226, 227,
	228, 229, 0, 0, 230, 458, 459, 460, 0, 231,
	461, 0, 0, 0, 232, 233, 234, 235, 236, 0,
	238, 239, 240, 237, 0, 241, 0, 242, 243, 244,
	0, 0, 245, 246, 0, 0, 0, 0, 0, 0,
	0, 247, 248, 249, 250, 251, 252, 462, 463, 0,
	253, 0, 255, 254, 0, 256, 0, 0, 257, 258,
	259, 0, 260, 0, 261, 262, 0, 464, 263, 264,
	266, 269, 265, 270, 271, 272, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 273, 274, 275, 467, 276,
	277, 0, 278, 0, 279, 0, 0, 0, 280, 281,
	0, 282, 468, 0, 469, 283, 0, 284, 285, 286,
	287, 288, 289, 290, 470, 471, 472, 0, 0, 476,
	292, 0, 0, 0, 0, 291, 293, 300, 0, 0,
	294, 473, 296, 295, 297, 298, 299, 474, 0, 475,
	0, 301, 0, 0, 302, 303, 304, 0, 305, 306,
	0, 0, 307, 308, 309, 310, 0, 312, 311, 0,
	313, 477, 0, 314, 315, 0, 0, 316, 317, 0,
	0, 318, 0, 319, 320, 323, 321, 322, 324, 326,
	327, 325, 0, 328, 329, 331, 330, 0, 0, 0,
	0, 478, 479, 332, 333, 0, 334, 335, 336, 0,
	0, 338, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 337, 344, 345, 346, 347, 348, 349,
	0, 350, 351, 482, 352, 483, 353, 0, 354, 0,
	355, 356, 357, 358, 359, 360, 484, 361, 362, 0,
	363, 364, 365, 366, 367, 0, 369, 370, 371, 368,
	372, 373, 374, 375, 0, 376, 0, 377, 378, 379,
	380, 485, 381, 0, 382, 386, 387, 388, 389, 390,
	391, 392, 0, 399, 400, 393, 395, 396, 397, 394,
	398, 401, 402, 0, 403, 383, 384, 404, 0, 405,
	486, 406, 407, 0, 417, 408, 409, 410, 385, 411,
	415, 416, 412, 413, 414, 487, 0, 419, 420, 418,
	0, 421, 422, 423, 424, 425, 267, 426, 268, 427,
	0, 488, 489, 490, 491, 0, 0, 428, 429, 492,
	430, 493, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 494, 495, 496, 0, 447, 446, 497,
	206, 0, 0, 0, 448, 449, 498, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	0, 0, 2277, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 249, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 0, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 0, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 0, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 675, 0,
	567, 0, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 214,
	215, 216, 0, 217, 0, 0, 0, 0, 453, 0,
	2740, 0, 0, 218, 219, 220, 454, 455, 221, 456,
	222, 223, 457, 0, 224, 225, 226, 227, 228, 229,
	0, 0, 230, 458, 459, 460, 0, 231, 461, 0,
	0, 0, 232, 233, 234, 235, 236, 0, 238, 239,
	240, 237, 0, 241, 0, 242, 243, 244, 0, 0,
	245, 246, 0, 0, 0, 0, 0, 0, 0, 247,
	248, 573, 250, 251, 252, 462, 463, 0, 253, 0,
	255, 254, 0, 256, 0, 0, 257, 258, 259, 0,
	260, 0, 261, 262, 0, 464, 263, 264, 266, 269,
	265, 270, 271, 272, 465, 466, 0, 209, 0, 0,
	0, 0, 0, 273, 274, 275, 467, 276, 277, 0,
	278, 0, 279, 0, 0, 0, 280, 281, 0, 282,
	468, 0, 469, 283, 0, 284, 285, 286, 287, 288,
	289, 290, 470, 471, 472, 0, 0, 476, 292, 0,
	0, 0, 210, 291, 293, 300, 0, 0, 294, 473,
	296, 295, 297, 298, 299, 474, 0, 475, 0, 301,
	0, 0, 302, 303, 304, 0, 305, 306, 0, 0,
	307, 308, 309, 310, 0, 312, 311, 0, 313, 477,
	0, 314, 315, 0, 0, 316, 317, 0, 0, 318,
	0, 319, 320, 323, 321, 322, 324, 326, 327, 325,
	0, 328, 329, 331, 330, 0, 211, 0, 0, 478,
	479, 332, 333, 0, 334, 335, 336, 0, 0, 338,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 337, 344, 345, 346, 347, 348, 349, 0, 350,
	351, 482, 352, 483, 353, 0, 354, 0, 355, 356,
	357, 358, 359, 360, 484, 361, 362, 0, 363, 364,
	365, 366, 367, 0, 369, 370, 371, 368, 372, 373,
	374, 375, 0, 376, 0, 377, 378, 379, 380, 485,
	381, 0, 382, 386, 387, 388, 389, 390, 391, 392,
	0, 399, 400, 393, 395, 396, 397, 394, 398, 401,
	402, 0, 403, 383, 384, 404, 0, 405, 486, 406,
	407, 0, 417, 408, 409, 410, 385, 411, 415, 416,
	412, 413, 414, 487, 0, 419, 420, 418, 572, 421,
	422, 423, 424, 425, 267, 426, 268, 427, 0, 488,
	489, 490, 491, 0, 0, 428, 429, 492, 430, 493,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 494, 495, 496, 0, 447, 446, 497, 0, 566,
	0, 567, 448, 449, 498, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 576, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 573, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 470, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 211, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 572,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 567, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 576, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 573, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 211, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	1847, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 572, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 567,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 576, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	573, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 572, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 206, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 576, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 0, 0,
	476, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	0, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 211,
	0, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1317, 0, 1145, 1144, 0, 0, 0, 0, 1142,
	0, 0, 0, 0, 0, 0, 576, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 1049, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 1316, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 927, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 0,
	934, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 1315, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1286, 0, 1145, 1144, 0, 0, 0, 0, 1142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 1049, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 1285, 471, 472, 927, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 0,
	934, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1282, 0, 1145, 1144, 0, 0, 0, 0, 1142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 1049, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 1281, 471, 472, 927, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 0,
	934, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1220, 0, 1145, 1144, 0, 0, 0, 0, 1142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 1049, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 1219, 471, 472, 927, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 0,
	934, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1217, 0, 1145, 1144, 0, 0, 0, 0, 1142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 1049, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 1216, 471, 472, 927, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 0,
	934, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1138, 0, 1145, 1144, 0, 0, 0, 0, 1142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 1049, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 1140, 471, 472, 927, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 0,
	934, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1145, 1144, 0, 0, 0, 0, 1142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 1049, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	924, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 925, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 470, 471, 472, 927, 0, 476, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 926, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 928, 929, 302, 303, 304, 930, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 931, 314, 315, 932, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 933, 328, 329, 331, 330, 0, 0, 934, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 935, 342, 936,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 937, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 938, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1145,
	1144, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 1049,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 924, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 925, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 927, 0, 476, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 926, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 928,
	929, 302, 303, 304, 930, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 931,
	314, 315, 932, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 933,
	328, 329, 331, 330, 0, 0, 934, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 935, 342, 936, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 937, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 938, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 1145, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 1049, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 924, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 925, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 927, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	926, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 928, 929, 302, 303, 304, 930, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 931, 314, 315, 932, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 933, 328, 329, 331, 330, 0, 0,
	934, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 935,
	342, 936, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 937, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 938,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 206, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	458, 459, 460, 2171, 231, 461, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 2168,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 462, 463, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 465, 466, 0, 2312, 0, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 0, 279,
	2174, 0, 0, 280, 281, 0, 282, 468, 0, 469,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 470,
	471, 472, 0, 0, 476, 292, 0, 0, 0, 2309,
	291, 293, 300, 0, 0, 294, 473, 296, 295, 297,
	298, 299, 474, 0, 475, 0, 2311, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 477, 0, 314, 315,
	2308, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 478, 479, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 482, 352,
	483, 353, 2173, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 2310, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 206, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 2171, 231, 461,
	0, 0, 2165, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 2168, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 2174, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 2164, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 2173, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 2172,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1362,
	0, 206, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 470, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 211, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 1365, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 1363,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 1364, 446, 497, 1133,
	0, 206, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 1135, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 211, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 979,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1130,
	0, 206, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 1132, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 211, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 979,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 1037,
	0, 206, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 209, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 1039, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 210, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 211, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 979,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 529,
	0, 206, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 528, 216, 518, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 521,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 522,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 470, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 523, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 517,
	0, 206, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 518, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 521,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 522,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 470, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 523, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 206, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 211, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 979, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 2241, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 211, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1833, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 209, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 210, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 211, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 206,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 1771, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1764, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1763, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1759, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1761, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1275, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1274, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1272, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1271, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1269, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1268, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1265, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1264, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1240, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 1155, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 209, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 1157, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 210, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 211, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 206, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	209, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 0, 0,
	476, 292, 0, 0, 0, 210, 291, 293, 300, 0,
	0, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 211,
	0, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 206, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	458, 459, 460, 0, 231, 461, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 521, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 462, 463, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 522, 282, 468, 0, 469,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 470,
	471, 472, 0, 0, 476, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 473, 296, 295, 297,
	298, 299, 474, 0, 475, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 477, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 478, 479, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 523, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 667, 0, 206, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	458, 459, 460, 0, 231, 461, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 462, 463, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 468, 0, 469,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 470,
	471, 472, 0, 0, 476, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 473, 296, 295, 297,
	298, 299, 474, 0, 475, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 477, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 478, 479, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 666, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 0, 447, 446, 497, 506, 0, 206, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 214, 215, 216, 505,
	217, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	458, 459, 460, 0, 231, 461, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 462, 463, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 468, 0, 469,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 470,
	471, 472, 0, 0, 476, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 473, 296, 295, 297,
	298, 299, 474, 0, 475, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 477, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 478, 479, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 482, 352,
	483, 504, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 206, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 2106, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 470, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 0, 447, 446, 497, 206,
	2299, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 206, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	2863, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 0, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 206, 2299, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 470, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 2296, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 206, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 212, 213, 214, 215, 216, 1839, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1831, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 549, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	1015, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 550, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	546, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 545, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1783, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 1782, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 549, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 539, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 550, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	546, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 1294, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 545, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1279, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 1278, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1228, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 1227, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1212, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 1149, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 0,
	447, 446, 497, 549, 0, 206, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	1015, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 470, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 550, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	546, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 545, 489, 490, 491, 0, 0,
	428, 1016, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 206,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 212, 213, 214, 215,
	216, 998, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 549, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 539, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 537, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 538, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 550, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 540, 381,
	0, 382, 386, 387, 546, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 541, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 545, 489,
	490, 491, 0, 0, 428, 543, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 533, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 534, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 531, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 525, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 0, 447, 446, 497, 501, 0, 206,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 206, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 0, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 206, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	458, 459, 460, 0, 231, 461, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 462, 463, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 468, 0, 469,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 2564,
	471, 472, 0, 0, 476, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 473, 296, 295, 297,
	298, 299, 474, 0, 475, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 477, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 478, 479, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 403,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 206, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 2562, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 206, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 2551, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 206,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 2259, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 361, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 206, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 468, 0, 469, 283, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 0, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 337, 344, 345, 346, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 358, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 381, 0, 382, 534, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 206, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 0, 0, 0, 212, 213, 214, 215, 216, 0,
	217, 0, 0, 0, 0, 453, 0, 1795, 0, 0,
	218, 219, 220, 454, 455, 221, 456, 222, 223, 457,
	0, 224, 225, 226, 227, 228, 229, 0, 0, 230,
	458, 459, 460, 0, 231, 461, 0, 0, 0, 232,
	233, 234, 235, 236, 0, 238, 239, 240, 237, 0,
	241, 0, 242, 243, 244, 0, 0, 245, 246, 0,
	0, 0, 0, 0, 0, 0, 247, 248, 249, 250,
	251, 252, 462, 463, 0, 253, 0, 255, 254, 0,
	256, 0, 0, 257, 258, 259, 0, 260, 0, 261,
	262, 0, 464, 263, 264, 266, 269, 265, 270, 271,
	272, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	273, 274, 275, 467, 276, 277, 0, 278, 0, 279,
	0, 0, 0, 280, 281, 0, 282, 468, 0, 469,
	283, 0, 284, 285, 286, 287, 288, 289, 290, 470,
	471, 472, 0, 0, 476, 292, 0, 0, 0, 0,
	291, 293, 300, 0, 0, 294, 473, 296, 295, 297,
	298, 299, 474, 0, 475, 0, 301, 0, 0, 302,
	303, 304, 0, 305, 306, 0, 0, 307, 308, 309,
	310, 0, 312, 311, 0, 313, 477, 0, 314, 315,
	0, 0, 316, 317, 0, 0, 318, 0, 319, 320,
	323, 321, 322, 324, 326, 327, 325, 0, 328, 329,
	331, 330, 0, 0, 0, 0, 478, 479, 332, 333,
	0, 334, 335, 336, 0, 0, 338, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 337, 344,
	345, 346, 347, 348, 349, 0, 350, 351, 482, 352,
	483, 353, 0, 354, 0, 355, 356, 357, 358, 359,
	360, 484, 361, 362, 0, 363, 364, 365, 366, 367,
	0, 369, 370, 371, 368, 372, 373, 374, 375, 0,
	376, 0, 377, 378, 379, 380, 485, 381, 0, 382,
	386, 387, 388, 389, 390, 391, 392, 0, 399, 400,
	393, 395, 396, 397, 394, 398, 401, 402, 0, 0,
	383, 384, 404, 0, 405, 486, 406, 407, 0, 417,
	408, 409, 410, 385, 411, 415, 416, 412, 413, 414,
	487, 0, 419, 420, 418, 0, 421, 422, 423, 424,
	425, 267, 426, 268, 427, 0, 488, 489, 490, 491,
	0, 0, 428, 429, 492, 430, 493, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 494, 495,
	496, 206, 447, 446, 497, 0, 0, 0, 0, 448,
	449, 498, 450, 451, 452, 0, 0, 0, 212, 213,
	214, 215, 216, 0, 217, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 218, 219, 220, 454, 455, 221,
	456, 222, 223, 457, 0, 224, 225, 226, 227, 228,
	229, 0, 0, 230, 458, 459, 460, 0, 231, 461,
	0, 0, 0, 232, 233, 234, 235, 236, 0, 238,
	239, 240, 237, 0, 241, 0, 242, 243, 244, 0,
	0, 245, 246, 0, 0, 0, 0, 0, 0, 0,
	247, 248, 249, 250, 251, 252, 462, 463, 0, 253,
	0, 255, 254, 0, 256, 0, 0, 257, 258, 259,
	0, 260, 0, 261, 262, 0, 464, 263, 264, 266,
	269, 265, 270, 271, 272, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 273, 274, 275, 467, 276, 277,
	0, 278, 0, 279, 0, 0, 0, 280, 281, 0,
	282, 468, 0, 469, 283, 0, 284, 285, 286, 287,
	288, 289, 290, 1248, 471, 472, 0, 0, 476, 292,
	0, 0, 0, 0, 291, 293, 300, 0, 0, 294,
	473, 296, 295, 297, 298, 299, 474, 0, 475, 0,
	301, 0, 0, 302, 303, 304, 0, 305, 306, 0,
	0, 307, 308, 309, 310, 0, 312, 311, 0, 313,
	477, 0, 314, 315, 0, 0, 316, 317, 0, 0,
	318, 0, 319, 320, 323, 321, 322, 324, 326, 327,
	325, 0, 328, 329, 331, 330, 0, 0, 0, 0,
	478, 479, 332, 333, 0, 334, 335, 336, 0, 0,
	338, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 337, 344, 345, 346, 347, 348, 349, 0,
	350, 351, 482, 352, 483, 353, 0, 354, 0, 355,
	356, 357, 358, 359, 360, 484, 361, 362, 0, 363,
	364, 365, 366, 367, 0, 369, 370, 371, 368, 372,
	373, 374, 375, 0, 376, 0, 377, 378, 379, 380,
	485, 381, 0, 382, 386, 387, 388, 389, 390, 391,
	392, 0, 399, 400, 393, 395, 396, 397, 394, 398,
	401, 402, 0, 403, 383, 384, 404, 0, 405, 486,
	406, 407, 0, 417, 408, 409, 410, 385, 411, 415,
	416, 412, 413, 414, 487, 0, 419, 420, 418, 0,
	421, 422, 423, 424, 425, 267, 426, 268, 427, 0,
	488, 489, 490, 491, 0, 0, 428, 429, 492, 430,
	493, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 494, 495, 496, 206, 447, 446, 497, 0,
	0, 0, 0, 448, 449, 498, 450, 451, 452, 0,
	0, 0, 212, 213, 214, 215, 216, 0, 217, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 218, 219,
	220, 454, 455, 221, 456, 222, 223, 457, 0, 224,
	225, 226, 227, 228, 229, 0, 0, 230, 458, 459,
	460, 0, 231, 461, 0, 0, 0, 232, 233, 234,
	235, 236, 0, 238, 239, 240, 237, 0, 241, 0,
	242, 243, 244, 0, 0, 245, 246, 0, 0, 0,
	0, 0, 0, 0, 247, 248, 249, 250, 251, 252,
	462, 463, 0, 253, 0, 255, 254, 0, 256, 0,
	0, 257, 258, 259, 0, 260, 0, 261, 262, 0,
	464, 263, 264, 266, 269, 265, 270, 271, 272, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 273, 274,
	275, 467, 276, 277, 0, 278, 0, 279, 0, 0,
	0, 280, 281, 0, 282, 468, 0, 469, 283, 0,
	284, 285, 286, 287, 288, 289, 290, 1190, 471, 472,
	0, 0, 476, 292, 0, 0, 0, 0, 291, 293,
	300, 0, 0, 294, 473, 296, 295, 297, 298, 299,
	474, 0, 475, 0, 301, 0, 0, 302, 303, 304,
	0, 305, 306, 0, 0, 307, 308, 309, 310, 0,
	312, 311, 0, 313, 477, 0, 314, 315, 0, 0,
	316, 317, 0, 0, 318, 0, 319, 320, 323, 321,
	322, 324, 326, 327, 325, 0, 328, 329, 331, 330,
	0, 0, 0, 0, 478, 479, 332, 333, 0, 334,
	335, 336, 0, 0, 338, 339, 340, 0, 0, 341,
	480, 0, 342, 0, 481, 343, 337, 344, 345, 346,
	347, 348, 349, 0, 350, 351, 482, 352, 483, 353,
	0, 354, 0, 355, 356, 357, 358, 359, 360, 484,
	361, 362, 0, 363, 364, 365, 366, 367, 0, 369,
	370, 371, 368, 372, 373, 374, 375, 0, 376, 0,
	377, 378, 379, 380, 485, 381, 0, 382, 386, 387,
	388, 389, 390, 391, 392, 0, 399, 400, 393, 395,
	396, 397, 394, 398, 401, 402, 0, 403, 383, 384,
	404, 0, 405, 486, 406, 407, 0, 417, 408, 409,
	410, 385, 411, 415, 416, 412, 413, 414, 487, 0,
	419, 420, 418, 0, 421, 422, 423, 424, 425, 267,
	426, 268, 427, 0, 488, 489, 490, 491, 0, 0,
	428, 429, 492, 430, 493, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 494, 495, 496, 206,
	447, 446, 497, 0, 0, 0, 0, 448, 449, 498,
	450, 451, 452, 0, 0, 0, 212, 213, 214, 215,
	216, 0, 217, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 218, 219, 220, 454, 455, 221, 456, 222,
	223, 457, 0, 224, 225, 226, 227, 228, 229, 0,
	0, 230, 458, 459, 460, 0, 231, 461, 0, 0,
	0, 232, 233, 234, 235, 236, 0, 238, 239, 240,
	237, 0, 241, 0, 242, 243, 244, 0, 0, 245,
	246, 0, 0, 0, 0, 0, 0, 0, 247, 248,
	249, 250, 251, 252, 462, 463, 0, 253, 0, 255,
	254, 0, 256, 0, 0, 257, 258, 259, 0, 260,
	0, 261, 262, 0, 464, 263, 264, 266, 269, 265,
	270, 271, 272, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 273, 274, 275, 467, 276, 277, 0, 278,
	0, 279, 0, 0, 0, 280, 281, 0, 282, 468,
	0, 469, 283, 0, 284, 285, 286, 287, 288, 289,
	290, 470, 471, 472, 0, 0, 476, 292, 0, 0,
	0, 0, 291, 293, 300, 0, 0, 294, 473, 296,
	295, 297, 298, 299, 474, 0, 475, 0, 301, 0,
	0, 302, 303, 304, 0, 305, 306, 0, 0, 307,
	308, 309, 310, 0, 312, 311, 0, 313, 477, 0,
	314, 315, 0, 0, 316, 317, 0, 0, 318, 0,
	319, 320, 323, 321, 322, 324, 326, 327, 325, 0,
	328, 329, 331, 330, 0, 0, 0, 0, 478, 479,
	332, 333, 0, 334, 335, 336, 0, 0, 338, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	337, 344, 345, 346, 347, 348, 349, 0, 350, 351,
	482, 352, 483, 353, 0, 354, 0, 355, 356, 357,
	358, 359, 360, 484, 953, 362, 0, 363, 364, 365,
	366, 367, 0, 369, 370, 371, 368, 372, 373, 374,
	375, 0, 376, 0, 377, 378, 379, 380, 485, 381,
	0, 382, 386, 387, 388, 389, 390, 391, 392, 0,
	399, 400, 393, 395, 396, 397, 394, 398, 401, 402,
	0, 403, 383, 384, 404, 0, 405, 486, 406, 407,
	0, 417, 408, 409, 410, 385, 411, 415, 416, 412,
	413, 414, 487, 0, 419, 420, 418, 0, 421, 422,
	423, 424, 425, 267, 426, 268, 427, 0, 488, 489,
	490, 491, 0, 0, 428, 429, 492, 430, 493, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	494, 495, 496, 206, 447, 446, 497, 0, 0, 0,
	0, 448, 449, 498, 450, 451, 452, 0, 0, 0,
	212, 213, 214, 215, 216, 0, 217, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 218, 219, 220, 454,
	455, 221, 456, 222, 223, 457, 0, 224, 225, 226,
	227, 228, 229, 0, 0, 230, 458, 459, 460, 0,
	231, 461, 0, 0, 0, 232, 233, 234, 235, 236,
	0, 238, 239, 240, 237, 0, 241, 0, 242, 243,
	244, 0, 0, 245, 246, 0, 0, 0, 0, 0,
	0, 0, 247, 248, 249, 250, 251, 252, 462, 463,
	0, 253, 0, 255, 254, 0, 256, 0, 0, 257,
	258, 259, 0, 260, 0, 261, 262, 0, 464, 263,
	264, 266, 269, 265, 270, 271, 272, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 273, 274, 275, 467,
	276, 277, 0, 278, 0, 279, 0, 0, 0, 280,
	281, 0, 282, 468, 0, 469, 0, 0, 284, 285,
	286, 287, 288, 289, 290, 470, 471, 472, 0, 0,
	476, 292, 0, 0, 0, 0, 291, 293, 300, 0,
	0, 294, 473, 296, 295, 297, 298, 299, 474, 0,
	475, 0, 301, 0, 0, 302, 303, 304, 0, 305,
	306, 0, 0, 307, 308, 309, 310, 0, 312, 311,
	0, 313, 477, 0, 314, 315, 0, 0, 316, 317,
	0, 0, 318, 0, 319, 320, 323, 321, 322, 324,
	326, 327, 325, 0, 328, 329, 331, 330, 0, 0,
	0, 0, 478, 479, 332, 333, 0, 334, 335, 336,
	0, 0, 338, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 337, 344, 345, 0, 347, 348,
	349, 0, 350, 351, 482, 352, 483, 353, 0, 354,
	0, 355, 356, 357, 0, 359, 360, 484, 361, 362,
	0, 363, 364, 365, 366, 367, 0, 369, 370, 371,
	368, 372, 373, 374, 375, 0, 376, 0, 377, 378,
	379, 380, 485, 0, 0, 382, 386, 387, 388, 389,
	390, 391, 392, 0, 399, 400, 393, 395, 396, 397,
	394, 398, 401, 402, 0, 403, 383, 384, 404, 0,
	405, 486, 406, 407, 0, 417, 408, 409, 410, 385,
	411, 415, 416, 412, 413, 414, 487, 0, 419, 420,
	418, 0, 421, 422, 423, 424, 425, 267, 426, 268,
	427, 0, 488, 489, 490, 491, 0, 0, 428, 429,
	492, 430, 493, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 494, 495, 496, 0, 447, 446,
	497, 0, 0, 0, 0, 448, 449, 498, 450, 451,
	452, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 1407, 0, 0,
	1453, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1406, 0, 0, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 1404, 1405, 0, 1437,
	1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 1407, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1429, 1430, 1431, 1432, 0, 1406, 0,
	0, 0, 0, 1412, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1454, 0, 0, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 0, 0, 0, 1429, 1430,
	1431, 1432, 0, 0, 0, 0, 0, 1442, 1412, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 1444, 1454, 0, 0, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 1433, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1428, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1428, 0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 1445, 0, 0, 0, 0,
	1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420,
	1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413,
	1414, 0, 0, 0, 0, 0, 1406, 0, 2965, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 0, 1404,
	1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 1407, 0, 1443, 1453, 0,
	1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 1429, 1430, 1431, 1432,
	0, 1406, 0, 2712, 0, 0, 1412, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 1423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 0, 0,
	0, 1429, 1430, 1431, 1432, 0, 0, 0, 0, 0,
	1442, 1412, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 1444, 1454, 0,
	0, 1434, 1435, 1436, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	1433, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1428, 0, 0, 0, 1404, 1405, 0,
	1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 1445, 0,
	0, 0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419,
	1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409,
	1410, 1411, 1413, 1414, 0, 0, 0, 0, 0, 1406,
	0, 2423, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 1407, 0,
	1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0,
	1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 1429,
	1430, 1431, 1432, 0, 1406, 0, 2422, 0, 0, 1412,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 1423,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1454, 0, 0, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 0, 0, 0, 1429, 1430, 1431, 1432, 0, 0,
	0, 0, 0, 1442, 1412, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 1433, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1428, 0, 0, 0,
	1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 1445, 0, 0, 0, 0, 1407, 0, 1443, 1453,
	0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415,
	1416, 1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 0,
	0, 0, 1406, 0, 2419, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 0, 1404, 1405, 0, 1437, 1438,
	1439, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424,
	1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411,
	1413, 1414, 1429, 1430, 1431, 1432, 0, 1406, 0, 2418,
	0, 0, 1412, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 1423, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1454,
	0, 0, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 1451, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 0, 0, 0, 1429, 1430, 1431,
	1432, 0, 0, 0, 0, 0, 1442, 1412, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 1451,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 1433, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1428, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 1445, 0, 0, 0, 0, 1407,
	0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446,
	0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	0, 0, 0, 0, 0, 1406, 0, 2417, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	1423, 0, 0, 0, 0, 0, 0, 0, 1404, 1405,
	0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 1407, 0, 1443, 1453, 0, 1418,
	1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 1429, 1430, 1431, 1432, 0,
	1406, 0, 1991, 0, 0, 1412, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 1451, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 0, 0, 0,
	1429, 1430, 1431, 1432, 0, 0, 0, 0, 0, 1442,
	1412, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 1444, 1454, 0, 0,
	1434, 1435, 1436, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 1451, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 1433,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1428, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1428, 0, 0, 0, 1404, 1405, 0, 1437,
	1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 1445, 0, 0,
	0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425,
	1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410,
	1411, 1413, 1414, 0, 0, 0, 0, 3258, 1406, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 1407, 0, 1443,
	1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417,
	1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 1429, 1430,
	1431, 1432, 3254, 1406, 0, 0, 0, 0, 1412, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1454, 0, 0, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	0, 0, 0, 1429, 1430, 1431, 1432, 0, 0, 0,
	0, 0, 1442, 1412, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 1444,
	1454, 0, 0, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 1433, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1428, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1428, 0, 0, 0, 1404,
	1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	1445, 0, 0, 0, 0, 1407, 0, 1443, 1453, 0,
	1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 0, 0,
	3188, 1406, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 1423, 0, 0, 0,
	0, 0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420,
	1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413,
	1414, 1429, 1430, 1431, 1432, 3187, 1406, 0, 0, 0,
	0, 1412, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 1423, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1454, 0,
	0, 1434, 1435, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 0, 0, 0, 1429, 1430, 1431, 1432,
	0, 0, 0, 0, 0, 1442, 1412, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 1433, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1428, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 0,
	0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 1445, 0, 0, 0, 0, 1407, 0,
	1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0,
	1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 0,
	0, 0, 0, 3096, 1406, 0, 0, 0, 0, 0,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 1423,
	0, 0, 0, 0, 0, 0, 0, 1404, 1405, 0,
	1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419,
	1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409,
	1410, 1411, 1413, 1414, 1429, 1430, 1431, 1432, 3014, 1406,
	0, 0, 0, 0, 1412, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 0, 0, 0, 1429,
	1430, 1431, 1432, 0, 0, 0, 0, 0, 1442, 1412,
	0, 0, 0, 0, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 1444, 1454, 0, 0, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 1433, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1428, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 0, 0, 0, 1404, 1405, 0, 1437, 1438,
	1439, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 1445, 0, 0, 0,
	0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424,
	1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411,
	1413, 1414, 0, 0, 0, 0, 2970, 1406, 0, 0,
	0, 0, 0, 0, 0, 1426, 0, 0, 0, 0,
	0, 0, 1423, 0, 0, 0, 0, 0, 0, 0,
	1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 1407, 0, 1443, 1453,
	0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415,
	1416, 1408, 1409, 1410, 1411, 1413, 1414, 1429, 1430, 1431,
	1432, 2969, 1406, 0, 0, 0, 0, 1412, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 1451,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 0,
	0, 0, 1429, 1430, 1431, 1432, 0, 0, 0, 0,
	0, 1442, 1412, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 1444, 1454,
	0, 0, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 1451, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 1433, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 1404, 1405,
	0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 0, 1445,
	0, 0, 0, 0, 1407, 0, 1443, 1453, 0, 1418,
	1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 0, 0, 0, 0, 2968,
	1406, 0, 0, 0, 0, 0, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 1407,
	0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446,
	0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	1429, 1430, 1431, 1432, 2934, 1406, 0, 0, 0, 0,
	1412, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	1423, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1454, 0, 0,
	1434, 1435, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 1451, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 0, 0, 0, 1429, 1430, 1431, 1432, 0,
	0, 0, 0, 0, 1442, 1412, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 1451, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 1433, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1428, 1452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417,
	1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 0, 0,
	0, 0, 2747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 1407, 0, 0,
	1453, 0, 0, 0, 1443, 0, 0, 1418, 1419, 1425,
	1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410,
	1411, 1413, 1414, 1406, 0, 2374, 0, 0, 0, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 1404, 1405, 0, 1437,
	1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	2345, 0, 1407, 0, 0, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1429, 1430, 1431, 1432, 0, 1406, 0,
	0, 0, 0, 1412, 3347, 0, 1426, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1454, 0, 0, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 2346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 0, 0, 0, 1429, 1430,
	1431, 1432, 0, 0, 0, 0, 0, 1442, 1412, 0,
	0, 0, 0, 0, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 1444, 1454, 0, 0, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 0, 3346, 1421, 1422, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 1433, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1428, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1428, 0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1440, 0, 1445, 0, 0, 0, 0,
	1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420,
	1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413,
	1414, 0, 0, 0, 0, 0, 1406, 0, 0, 0,
	0, 0, 0, 0, 1426, 0, 0, 0, 0, 0,
	0, 1423, 2081, 0, 0, 0, 0, 0, 0, 1404,
	1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 2080, 0, 0, 1407, 0, 1443, 1453, 0,
	1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 1429, 1430, 1431, 1432,
	0, 1406, 0, 0, 0, 0, 1412, 0, 2462, 1426,
	0, 2461, 0, 0, 0, 0, 1423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 0, 0,
	0, 1429, 1430, 1431, 1432, 0, 0, 0, 0, 0,
	1442, 1412, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 1444, 1454, 0,
	0, 1434, 1435, 1436, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	1433, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1428, 0, 0, 0, 1404, 1405, 0,
	1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 1445, 0,
	0, 0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419,
	1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409,
	1410, 1411, 1413, 1414, 0, 0, 0, 0, 0, 1406,
	0, 0, 0, 0, 0, 0, 0, 1426, 0, 0,
	0, 0, 0, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448,
	1449, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 1407, 0,
	1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0,
	1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 1429,
	1430, 1431, 1432, 0, 1406, 0, 0, 0, 0, 1412,
	0, 0, 1426, 0, 0, 0, 0, 0, 0, 1423,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1454, 0, 0, 1434,
	1435, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 0, 0, 0, 1429, 1430, 1431, 1432, 0, 0,
	0, 0, 0, 1442, 1412, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0, 0,
	0, 0, 1441, 796, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 1433, 0, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1428, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1428, 0, 0, 0,
	1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1440,
	0, 1445, 0, 0, 0, 0, 1407, 0, 1443, 1453,
	0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415,
	1416, 1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 0,
	0, 0, 1406, 2735, 0, 0, 0, 0, 0, 0,
	1426, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 0, 1404, 1405, 0, 1437, 1438,
	1439, 1447, 1448, 1449, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 2463, 0,
	0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425, 1424,
	1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410, 1411,
	1413, 1414, 1429, 1430, 1431, 1432, 0, 1406, 0, 0,
	0, 0, 1412, 0, 0, 1426, 0, 2468, 0, 0,
	0, 0, 1423, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1454,
	0, 0, 1434, 1435, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 1451, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 0, 0, 0, 1429, 1430, 1431,
	1432, 0, 0, 0, 0, 0, 1442, 1412, 0, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 1444, 1454, 0, 0, 1434, 1435, 1436,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 1451,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 1433, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1428, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1428,
	0, 0, 0, 1404, 1405, 0, 1437, 1438, 1439, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 1445, 0, 0, 0, 0, 1407,
	0, 1443, 1453, 0, 1418, 1419, 1425, 1424, 1420, 1446,
	0, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414,
	0, 0, 0, 0, 0, 1406, 0, 0, 0, 0,
	0, 0, 0, 1426, 0, 0, 0, 0, 0, 0,
	1423, 0, 0, 0, 0, 0, 0, 0, 1404, 1405,
	0, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1440, 0, 0,
	0, 2416, 0, 0, 1407, 0, 1443, 1453, 0, 1418,
	1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416, 1408,
	1409, 1410, 1411, 1413, 1414, 1429, 1430, 1431, 1432, 0,
	1406, 0, 0, 0, 0, 1412, 0, 0, 1426, 0,
	0, 0, 0, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1454, 0, 0, 1434, 1435, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 1451, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 0, 0, 0,
	1429, 1430, 1431, 1432, 0, 0, 0, 0, 0, 1442,
	1412, 0, 0, 0, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 1444, 1454, 0, 0,
	1434, 1435, 1436, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 1451, 0, 2430, 0, 0, 0, 0, 1421,
	1422, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 1433,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1428, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1428, 0, 0, 0, 1404, 1405, 0, 1437,
	1438, 1439, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1440, 0, 1445, 0, 0,
	0, 0, 1407, 0, 1443, 1453, 0, 1418, 1419, 1425,
	1424, 1420, 1446, 0, 1417, 1415, 1416, 1408, 1409, 1410,
	1411, 1413, 1414, 0, 0, 0, 0, 0, 1406, 0,
	0, 0, 0, 0, 0, 0, 1426, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 1404, 1405, 0, 1437, 1438, 1439, 1447, 1448, 1449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1407, 0, 1443,
	1453, 0, 1418, 1419, 1425, 1424, 1420, 1446, 0, 1417,
	1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 1429, 1430,
	1431, 1432, 0, 1406, 0, 0, 0, 0, 1412, 0,
	0, 1426, 0, 0, 0, 0, 0, 0, 1423, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1454, 0, 0, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	0, 0, 0, 1429, 1430, 1431, 1432, 0, 0, 0,
	0, 0, 1442, 1412, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 1444,
	1454, 0, 0, 1434, 1435, 1436, 0, 0, 0, 1404,
	1405, 1441, 1437, 1438, 1439, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 1407, 0, 0, 1453, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 1433, 0, 1427, 0, 0, 0, 0, 0,
	0, 1406, 0, 0, 0, 0, 0, 0, 0, 1426,
	1428, 1452, 0, 0, 0, 0, 1423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 1429, 1430, 1431, 1432, 0, 0, 0, 0, 0,
	0, 1412, 0, 0, 0, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1454, 0,
	1445, 1434, 1435, 1436, 0, 0, 0, 1443, 0, 0,
	1418, 1419, 1425, 1424, 1420, 1446, 0, 1417, 1415, 1416,
	1408, 1409, 1410, 1411, 1413, 1414, 0, 0, 0, 0,
	1421, 1422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 1418, 1419, 1425, 1424, 1420,
	1446, 1617, 1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 1629, 1611,
	1618, 1601, 1639, 1638, 0, 0, 1603, 1602, 0, 0,
	0, 0, 0, 1428, 1649, 1650, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1640, 0, 1636, 1635, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1634, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1633, 1631, 1632,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 591, 0, 0, 0,
	1443, 0, 0, 1418, 1419, 1425, 1424, 1420, 1446, 1613,
	1417, 1415, 1416, 1408, 1409, 1410, 1411, 1413, 1414, 592,
	1622, 1616, 1624, 1626, 1627, 1628, 1623, 0, 1621, 0,
	0, 0, 0, 0, 0, 0, 0, 1645, 1646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	612, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1605,
	594, 0, 0, 595, 0, 0, 0, 0, 0, 0,
	0, 1637, 0, 0, 0, 1614, 0, 1615, 0, 618,
	0, 0, 0, 0, 0, 596, 0, 0, 0, 0,
	0, 0, 0, 0, 616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 597, 0, 0, 0, 1630, 0, 0, 0, 1598,
	1596, 1597, 1600, 1599, 0, 0, 0, 0, 0, 0,
	0, 598, 0, 0, 599, 622, 0, 0, 0, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1606, 1607, 1609, 1610, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1625,
	1608, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1604, 0,
	1641, 1642, 1643, 1644, 621, 0, 0, 0, 0, 0,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1612, 0,
	0, 0, 0, 1619, 1647, 0, 0, 0, 0, 0,
	600, 0, 0, 0, 0, 0, 0, 0, 0, 603,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 611, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 0, 0, 620, 0,
	619, 0, 0, 0, 0, 608, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 609, 0, 0, 0,
	0, 615, 0, 0, 0, 0, 626, 0, 623, 0,
	0, 0, 613,
}
var sqlPact = [...]int{

	3989, -1000, -1000, -1000, -1000, -1000, -1000, 191, 189, 187,
	186, 183, 178, 177, 176, 175, -1000, -1000, -1000, 171,
	-1000, -1000, 166, -1000, 163, 161, 160, 148, -1000, 146,
	145, -1000, -1000, -1000, -1000, 143, 142, 141, 47949, 1554,
	57345, 49173, 1751, 2066, 42637, 56935, 42227, 56525, 56115, 138,
	-1000, 55705, 137, 130, 128, -1000, -1000, 121, 1262, 34407,
	108, 107, 106, 1791, 104, 101, -1000, 99, -1000, 68674,
	1145, -1000, 96, 94, -1000, 7708, 247, 48763, 2027, 93,
	91, 33996, 2017, -1000, -1000, 1406, -1000, -1000, 90, 87,
	83, 82, 81, 80, 79, 78, 76, -1000, 75, 73,
	72, 69, 68, 66, 65, 64, 63, 62, 61, 60,
	55, 53, 52, 48, -1000, 7560, 1390, 1261, 1258, 1246,
	1243, 1237, 794, 47, 46, 44, 43, 42, 41, -1000,
	-1000, 39, 33, 32, 31, -1000, 27, 26, 134, 24,
	16, 13, 7, 4, 1728, 2036, 1122, 635, 16020, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 61385,
	57749, 3, -34, -3, -1000, 2325, 755, 28658, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 424, -1000,
	-1000, -1000, 261, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1399,
	640, -1000, -1000, -1000, 55295, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 57749, -1000, 1533, -19, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 639, -1000, 1529, 172, 1474, -1000,
	-1000, -1000, -1000, -1000, 57749, -1000, -1000, 2626, 2625, 1469,
	638, 54891, -1000, 1176, -1000, 745, 18631, -1000, 968, -1000,
	18631, 257, -1000, -1000, -1000, -1000, -1000, 41817, 12991, 41407,
	40997, 38139, 54481, 12571, 47545, 989, -1000, -1000, -1000, -1000,
	-1000, -11, 35619, 57749, -1000, 255, -1000, -1000, -1000, -1000,
	-1000, -1000, 24836, 495, 24390, 287, 23944, 267, -1000, -1000,
	-1000, -1000, 2624, 2623, 855, 2622, 2261, 60981, 1314, 2619,
	1211, 919, 807, 2618, 2617, 2616, 2615, 2610, 2608, 2605,
	1108, 54071, 2055, 37719, 37299, 47949, 47949, 1864, 53661, -1000,
	-1000, 1012, 1009, -1000, -1000, -1000, -1000, 2144, 2057, 2051,
	47135, -1000, -1000, 2604, 2603, 2601, 2600, 2599, 60577, 1302,
	2598, 1800, 2594, 2593, 2587, 2580, 2578, 2577, 2573, 2571,
	2570, -1000, 46725, 46315, 45905, 45495, 53251, 36879, 36459, -1000,
	-1000, -1000, 30294, 6820, 52841, 31136, 47949, -1000, -1000, 25269,
	-52, -1000, -1000, -1000, 2020, -1000, 25269, -52, -1000, 2054,
	1398, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1664, 1239,
	2443, 36039, 1421, 1088, 2143, 2566, 1729, 2137, 2134, 2132,
	2131, 2126, 2565, 1182, 2563, 1198, 2561, 1188, 2117, 2487,
	1512, 40587, 2557, 2556, 2292, 2111, 2011, -1000, -1000, -1000,
	-1000, 1150, -1000, -1000, -1000, 43041, -1000, -1000, 937, -1000,
	-1000, 937, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 988,
	59769, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1522, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1639, -1000, 1448, -1000, -1000,
	2555, 2036, 1768, 2293, 2293, 2293, 2344, 403, 388, -1000,
	134, -1000, -1000, 68015, -1000, -1000, 25269, 25269, 25269, 25269,
	25269, 1416, -1000, 637, -1000, -1000, 670, -1000, 636, 569,
	-1000, -1000, -1000, -1000, -1000, -1000, 632, 2494, -1000, 845,
	-1000, -1000, -1000, -1000, 2430, -1000, 15141, -1000, -1000, -1000,
	432, 631, 25269, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 252,
	760, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 538, 1332, 537, 537, 537,
	-1000, -1000, 800, -1000, -1000, -1000, 282, 533, 277, 532,
	-1000, -1000, -1000, -1000, 2050, 630, 629, -1000, 628, 627,
	625, -1000, -1000, -1000, 622, 621, 620, 619, 613, 612,
	609, 608, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 795,
	-1000, 604, 601, 600, 595, 594, 591, 589, 577, 576,
	-1000, -1000, -12, 57749, -1000, 424, -12, -1000, -1000, 572,
	-1000, 19064, 19064, 19064, -1000, -1000, 1527, 25269, -1000, 1832,
	-1000, 4333, -237, 712, 29474, -1000, 27823, 712, 678, 32362,
	-1000, 2010, -1000, -1000, 570, 251, -1000, -1000, 2008, 57749,
	13409, 57749, 47949, 47949, -1000, -1000, 25269, -1000, -1000, 38557,
	35215, 57749, 48353, 2397, 68517, 35215, 57749, 2048, -1000, -1000,
	-1000, 57749, -1000, 25269, -1000, 2396, 1152, -22, -1000, -1000,
	-1000, -1000, -1000, -1000, 1786, 1767, 931, 1612, 1493, -1000,
	18631, 2249, -1000, -1000, -1000, 232, 13409, -1000, 1595, 2180,
	1067, -1000, 1606, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1288, 2178, -1000, 1781, 2177, 1251, -1000, -1000, 777,
	2176, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1541, -1000, -1000, 2284, -1000, -1000, 1784, 2175, -218, -1000,
	-1000, 38557, 35619, -17, -1000, -1000, -44, -1000, 12151, 68015,
	-1000, -1000, -1000, 68015, 726, -1000, -1000, 2164, -1000, 68015,
	716, -1000, -1000, 2162, -1000, -1000, -1000, 2551, -1000, 2549,
	1713, 2548, 2547, 2546, -1000, 1295, 1327, 2542, -1000, 2540,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 45085, 44675, 805,
	-1000, 1520, -1000, -1000, 44265, 771, 1709, -1000, -1000, 1696,
	-1000, 769, -1000, 2534, 52431, 1893, 771, 1686, -1000, -1000,
	-1000, -1000, -1000, 47949, -1000, 47949, -1000, 47949, -1000, 1124,
	-1000, 60173, -237, -1000, -1000, -1000, -1000, -1000, 2158, 2533,
	2528, 2526, -1000, 57749, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 155, 2156, -1000, -1000, 155, 2148, -1000,
	155, 2145, -1000, 152, 2127, -1000, -1000, 1525, 2123, -1000,
	-127, 2114, -1000, -1000, -127, 2113, -1000, -39, -1000, -1000,
	-1000, 755, -1000, 29884, 52021, 38557, 756, 607, 68015, -1000,
	38557, 68015, -1000, 44265, -1000, 51611, 43861, -1000, -1000, 1049,
	1826, -1000, -1000, -1000, -1000, 38557, 38557, -1000, 51201, -1000,
	-1000, -1000, 1424, 2286, 47949, -1000, -1000, 2044, -1000, 34811,
	47949, -1000, 47949, -1000, 47949, -1000, 47949, -1000, 47949, -1000,
	-1000, -1000, -1000, -1000, 2173, 1263, 1257, -1000, 57749, -1000,
	-1000, 2303, 57749, -1000, -1000, -1000, 1776, -1000, -1000, -1000,
	-1000, 47949, -1000, -1000, -1000, -1000, -1000, -1000, 2043, -1000,
	1201, -1000, 1048, -1000, -1000, 158, -1000, -1000, -22, -1000,
	59769, -1000, -1000, 2036, 1768, -1000, 57749, -1000, -1000, -1000,
	2036, 1575, 1847, 23498, 1815, 25269, 134, -1000, -1000, 134,
	134, 18198, -1000, -1000, 68517, 68517, 13409, 994, 25269, 25269,
	25269, 25269, 25269, 25269, 25269, 25269, 25269, 25269, 25269, 25269,
	25269, 25269, 25269, 25269, 25269, 25269, 25269, 25269, 25269, 25269,
	25269, 25269, 25269, 25269, 25269, 25269, 25269, 25269, 25269, 25269,
	25269, 25269, 25269, 1707, 25269, 987, 25269, 25269, 25269, 25269,
	1825, -1000, -1000, 1381, 467, 1450, -1000, 2465, 2465, 2465,
	68090, 68090, 493, 2525, 670, -1000, 25269, -1000, -52, 25269,
	13829, -1000, 2480, 1130, -1000, -1000, 388, 8689, 1659, -1000,
	387, 14275, -1000, -1000, -1000, 15141, 569, 23052, 25269, 790,
	68015, 11733, 2034, 1936, -1000, 2477, -1000, -1000, 2430, -1000,
	-1000, -1000, -1000, 2430, 955, 941, 2473, -1000, 2430, 2430,
	567, 694, 679, 674, 673, 669, 25269, 25269, 25269, 25269,
	25269, 25269, 25269, 25269, -1000, 22619, 22173, 21727, 26568, 21281,
	25269, 15574, 20835, 20389, 57749, -12, 2395, 25269, 156, -1000,
	66558, -1000, 156, 156, 561, -43, 68015, 1835, 1834, 29066,
	1689, 1425, 1425, 1425, -1000, 555, 656, 712, 9209, 49577,
	1443, 712, 712, 222, 241, 383, 27415, 1832, 49577, -1000,
	-1000, 47949, 554, 13829, 13409, 1065, -45, 202, 1844, 1842,
	1841, -1000, -47, 756, 981, -165, -1000, 182, -49, -1000,
	1001, -1000, -1000, -1000, -1000, 125, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 793, 541,
	540, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 538, 1332, 537, 537, 537, -1000, -1000,
	-1000, 282, 533, 277, 532, -1000, -1000, -1000, -1000, -1000,
	-1000, 2004, -44, 48353, 748, -51, 863, -22, -1000, 937,
	-1000, 1142, -1000, -1000, -1000, -1000, -1000, -1000, 1052, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2493, -1000, 2475, -1000,
	-1000, 2470, -14, -1000, -1000, 13409, -1000, -24, 1235, -1000,
	40177, 2291, 2287, 2279, 1116, -1000, 1073, 2333, 43041, 2356,
	17, -1000, 2003, -1000, -1000, 744, 1041, 979, 43041, 1781,
	-1000, 68517, -1000, 1877, 2331, 1102, 1129, 1102, 1102, 1147,
	-1000, 43041, 978, 1382, 38557, -1000, 974, -1000, -25, 2336,
	2, -1000, 2001, 970, -1000, -1000, 47949, 13409, 710, -17,
	35619, 57749, 199, -1000, 25269, -52, 25269, -52, -1000, -1000,
	2110, -1000, -1000, -1000, 2523, 1304, 1799, -1000, -1000, -1000,
	531, 1684, 1781, 1681, -1000, -1000, 43451, 1996, 57749, 1849,
	-20, 47949, -1000, -1000, 1376, -1000, 2108, 2104, 361, 2522,
	-1000, 1519, 1680, -1000, -1000, -1000, 59365, 1015, 2102, 783,
	626, 2385, 626, 33178, -1000, 57749, -1000, 57749, -1000, -1000,
	-1000, 2521, -1000, 47949, -1000, -1000, 47949, -1000, 47949, -1000,
	47949, -1000, 47949, 47949, -1000, 57749, 38557, 38557, 38557, 4530,
	39369, -57, 382, -1000, 50797, 57749, 829, 39773, -208, 756,
	710, -1000, 710, -1000, 47949, 2042, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 57749, -1000, 57749, -1000, -1000,
	-1000, -1000, -1000, -1000, 1151, -1000, 2040, -1000, 2038, -1000,
	30, -1000, -1000, -1000, -1000, 1610, 47949, 47949, 47949, -1000,
	43041, -1000, -1000, 2036, -1000, -1000, -1000, -1000, -1000, 68015,
	-1000, 473, -1000, -1000, 68015, 1240, 1854, -1000, 1854, -18,
	-1000, 66175, 1819, 47949, -1000, -1000, -1000, -1000, -1000, 736,
	903, 903, 1050, 1050, 1050, 1050, 2374, 358, 3453, 1195,
	6125, 6125, 6125, 6125, 6125, 6125, 6125, 6125, 844, 349,
	349, 844, 844, 844, 844, 844, 349, 349, 349, 6125,
	6125, 6125, 68090, 5678, 7003, 25269, 25269, 967, 1378, 467,
	6622, 25269, 835, 835, 835, 835, -1000, 1667, -1000, -1000,
	-1000, -1000, 1990, 529, 26568, 26568, -1000, -1000, -1000, -1000,
	14708, 25269, -1000, -1000, -1000, -1000, 19943, -1000, -1000, 65722,
	-248, 381, -204, 22, -1000, 25269, 25269, 25269, 380, -1000,
	378, -1000, -1000, 957, -1000, 945, 926, 925, -1000, 528,
	197, 25269, 57749, -1000, 63424, 650, -81, -1000, -58, 1087,
	-1000, 25269, 196, -1000, 1436, 523, 521, 377, -63, 376,
	725, 724, 367, 365, 364, 25269, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 67707, 63349, 63041, 62966,
	8580, 62658, 62583, -64, 363, -1000, 1978, -204, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 357, -1000, 356, -1000, 67632,
	-204, 355, 3992, -1000, 26568, 26568, 26568, -1000, 338, -1000,
	66483, -1000, 67324, 19510, 19510, 19510, 336, 67249, 25269, -204,
	-65, -1000, -70, -1000, -1000, 520, -71, 783, 19064, 28247,
	13409, -1000, 783, 783, 25269, -1000, 25269, 29066, 29066, 1750,
	1831, 29066, -1000, -1000, -1000, -1000, 49577, 633, 712, 49577,
	-1000, 2430, 1881, -1000, -1000, -1000, 57749, 424, -1000, 49577,
	49577, 13409, 712, -1000, 335, 31544, 22, 194, -1000, -1000,
	13409, 1856, 1856, 1856, -1000, 1975, 57749, 2410, -1000, 1346,
	-1000, 68517, -1000, 667, 889, -1000, 2456, 517, -1000, 2430,
	2430, 57749, 118, 18631, -1000, 937, -1000, -1000, 1177, -1000,
	1315, -1000, 893, -1000, -1000, -1000, 18631, -1000, 1621, 47949,
	57749, 57749, -1000, -1000, 1679, 58961, 1672, 68517, 57749, -1000,
	-1000, 516, 514, 1816, 1814, 57749, 57749, 58557, 58153, 57749,
	1359, 25269, 1433, 1379, -52, -1000, -52, 513, 1021, 47949,
	47949, 1245, -1000, -1000, -1000, -1000, -1000, 47949, -1000, -1000,
	2454, -1000, 1102, -1000, -1000, -1000, 1102, 1781, 1241, 47949,
	38557, 774, 57749, 1387, -52, -1000, -52, 512, 13409, 1300,
	-1000, 1915, -1000, -1000, -1000, 11315, 68015, -1000, 68015, -1000,
	57749, -1000, 802, 57749, 39773, 770, 2101, -1000, 1781, 2098,
	424, -1000, -1000, 32770, -44, 756, 38557, 47949, -20, 38557,
	38557, 38557, 2520, 511, 2519, -1000, 47949, 2097, 1517, 1669,
	2189, 690, 57749, 1437, -1000, 25269, 1285, -1000, 31954, 815,
	57749, 1189, 109, -1000, -1000, -1000, 20, 57749, -1000, 2518,
	-1000, -1000, 155, 155, 155, -1000, 152, 1525, -1000, -127,
	-127, -1000, -1000, 4530, 756, -21, 509, -1000, 704, 703,
	30718, 38557, -72, -1000, -1000, -1000, -1000, -1000, 47949, 57749,
	603, 1886, 57749, -1000, 756, -1000, -1000, 773, -1000, 1032,
	-44, -44, -1000, 1149, 1146, 57749, -1000, 13409, 57749, 47949,
	13409, 47949, -1000, -1000, -1000, -1000, -1000, 1240, -1000, 25269,
	-1000, -1000, -1000, 18198, -1000, -1000, -1000, 47949, -225, 25269,
	25269, 6058, 5602, 25269, 26568, 26568, -1000, 25269, 4748, -1000,
	-1000, -1000, -1000, -1000, 1974, 507, 25269, 68517, 3846, 3408,
	-1000, 331, 62275, 844, -1000, 25269, -1000, 330, 17765, -1000,
	66866, -40, -40, -1000, 2489, 1737, 1326, 1276, 1157, 2448,
	10897, -204, -96, -1000, -1000, 494, -1000, 2138, -1000, 25269,
	66941, 10479, -1000, 33586, 784, 1437, -1000, -1000, 2430, 721,
	-1000, -1000, -1000, 721, -1000, 65647, 68517, 68517, 25269, 25269,
	-1000, 25269, 25269, 25269, -1000, -1000, 25269, -1000, -1000, 1972,
	25269, -1000, 68517, 68517, 26568, 26568, 26568, 26568, 26568, 26568,
	26568, 26568, 26568, 26568, 26568, 26568, 26568, 26568, 26568, 26568,
	26568, 26568, 26568, 1839, 26568, 2461, 2461, 2461, -1000, 2025,
	1972, 25269, 25269, 68517, 329, 326, 324, -1000, 25269, -204,
	-1000, -1000, 4530, -1000, 1935, -1000, -82, -1000, 1832, -1000,
	-1000, 1935, 1935, -97, 68015, -1000, 1750, -1000, 504, 25269,
	29066, -1000, 648, -1000, -101, -1000, 49577, -1000, 646, -249,
	-1000, 702, -1000, -1000, -1000, 424, -1000, -1000, -1000, 153,
	49577, -1000, -102, -1000, 2382, 322, 13409, -1000, -1000, -1000,
	-1000, -1000, -1000, -52, -44, 1470, 2488, -1000, 2445, -1000,
	645, 321, 2430, 320, 319, -44, 57749, -1000, -22, -1000,
	-1000, -1000, 25269, -1000, -1000, -1000, 921, 915, -1000, 2089,
	-1000, 1662, -1000, 820, -1000, 1311, 25269, 25269, 503, 502,
	1343, 2516, 2088, 1525, 2087, 1525, -1000, -1000, 723, -1000,
	68015, 501, 500, -1000, -24, 1234, -1000, -1000, 25269, 25269,
	50389, -1000, 2284, -1000, 913, -1000, -1000, -1000, 1781, 911,
	-1000, -1000, 1358, -1000, -1000, -1000, -1000, 25269, -1000, -25,
	909, 756, 1968, -1000, 2514, 2512, 2511, 318, -37, -1000,
	2379, 1495, 57749, 47949, 47949, 2373, 710, -1000, 2430, -1000,
	-1000, -1000, -1000, 771, -1000, -1000, 2510, -1000, 826, 13409,
	47949, 2086, 1793, 690, 38965, -1000, 771, 1847, -1000, 68015,
	-1000, 1189, 17319, 2282, -108, -1000, 135, -1000, -1000, -1000,
	783, 33178, 29066, 25269, 2508, -109, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 49985, 49985, 38557, 38557, 38557, 756,
	57749, 57749, 39773, 2507, 499, 57749, 57749, 498, -1000, -1000,
	-1000, 1465, 47949, -1000, -1000, 767, -1000, -1000, 1389, 1591,
	-1000, 1477, 65339, -1000, 2277, 13409, 2363, 835, 25269, 25269,
	4704, 453, 427, 835, 25269, 25269, 68517, 68258, -113, 25269,
	25269, -1000, 25269, 643, 68015, 2486, 25269, 317, 313, 311,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 309, -1000,
	-1000, -1000, -1000, -1000, 68015, 25269, 126, -1000, -1000, -1000,
	61789, -1000, 25269, 299, 298, -1000, -1000, -1000, 296, 295,
	62200, 8139, 65264, 64956, 64881, 68015, 2025, 68015, -1000, -1000,
	951, 951, 1089, 1089, 1089, 1089, 2461, 2031, 312, 1084,
	590, 590, 590, 492, 668, 668, 590, 590, 590, 1961,
	1733, 497, 5356, -1000, -1000, 68015, 68015, 293, -1000, -1000,
	-1000, -204, 292, 1928, 2330, -1000, 29066, 1928, 1928, -1000,
	-1000, 57749, 68015, -1000, -237, -1000, 2430, -1000, -1000, 1881,
	-1000, 9639, -1000, 13409, -1000, -1000, 31544, -1000, 491, -1000,
	110, -1000, -1000, -1000, 642, -1000, -1000, 291, -1000, -1000,
	-44, 68015, 57749, 57749, 57749, 2082, -1000, 3640, -1000, 64573,
	-114, -1000, 66175, 25269, 57749, -1000, 1368, 1857, 843, -1000,
	57749, -1000, 57749, -1000, -1000, 57749, 57749, 47949, 57749, 57749,
	-115, 68015, -55, -1000, 696, -1000, 47949, 47949, 38557, -120,
	13409, -1000, 38557, -1000, -1000, -1000, 1875, -52, -1000, 2505,
	489, 1781, -52, -1000, 634, -1000, -1000, 478, 57749, 1515,
	477, 13409, 1795, 690, 38965, -1000, 1015, 1189, -1000, -1000,
	-59, -1000, 479, -52, 57749, 2504, 1437, -1000, -98, 68015,
	-1000, 693, -1000, -126, -1000, -1000, 284, -1000, 2239, 2229,
	-1000, -1000, 25269, 476, 472, 57749, 1705, -1000, -1000, -1000,
	-1000, 13409, 1031, -1000, -1000, -1000, 2277, 835, 835, 25269,
	25269, 25269, 835, 68258, -130, -1000, 835, 835, -204, -1000,
	-1000, 66866, -1000, -1000, -1000, -1000, 68015, 10061, 1401, -1000,
	64498, -1000, -1000, -1000, -1000, 25269, 25269, -1000, -1000, -1000,
	-1000, -1000, 26568, 1958, 469, 68517, -1000, -1000, 780, 25269,
	25269, 1832, 780, 780, -131, 712, -1000, -1000, -1000, 2430,
	110, -1000, 2503, 13409, -1000, -1000, -1000, -1000, -1000, 57749,
	-1000, 57749, -1000, 13409, 57749, 1948, 1642, -1000, -1000, 1810,
	468, 26568, 47949, 720, 1952, 1339, 25269, -1000, -132, -137,
	1640, -1000, -1000, 1633, 25269, -1000, 68517, 1525, 1525, -139,
	-143, -1000, 908, 885, 884, 57749, 16886, -1000, -1000, -1000,
	879, -1000, -127, 1387, 1903, 766, -1000, 39773, 770, -1000,
	-1000, -1000, 25269, -1000, 47949, 25269, 1513, -1000, 690, 38965,
	-1000, 2189, -1000, 2195, 57749, 2274, -1000, -1000, -1000, 1847,
	467, -1000, 756, 460, 457, -147, 25269, 25269, -148, -175,
	-1000, 709, 699, -1000, -1000, 47949, -1000, 835, 835, 835,
	-1000, 269, -1000, -1000, 1437, 2323, -1000, 64190, 64115, 404,
	26568, 68517, -152, -1000, 57749, 68015, -204, -1000, -1000, -1000,
	49577, 428, -1000, -1000, 1371, -1000, -1000, -1000, 57749, 1647,
	-1000, -1000, 25269, 5356, 455, 25269, -1000, -1000, 1868, 1981,
	1875, 452, -1000, -1000, -1000, -1000, 1305, -1000, -1000, 68015,
	2297, -1000, -1000, 451, 450, 57749, 57749, 439, 684, 1951,
	-1000, 438, 770, -1000, 1409, -1000, 1872, 268, 2369, -153,
	826, -157, 47949, 38965, -1000, 1793, 991, -158, 57749, 1189,
	-1000, -1000, 38557, 38557, 1339, -164, -168, -1000, 1705, -1000,
	57749, -1000, 57749, -1000, -1000, 1523, 25269, -1000, -1000, 404,
	-170, -1000, -177, -1000, 2365, -1000, -1000, -1000, -1000, 2046,
	63807, 1752, 57749, 63732, 1979, -1000, -1000, 1387, 57749, 47949,
	823, 13409, 1389, 1389, -1000, -1000, 25269, 16453, 1408, 25269,
	-1000, 47949, -1000, 2212, 1875, -52, 1339, 433, 1339, 431,
	-1000, 1795, 1115, -1000, 783, -1000, -1000, -178, -180, 1875,
	1339, -1000, -1000, -186, -187, 264, 26135, 26135, 26135, -204,
	-1000, 57749, 425, 2065, -1000, 1484, 1312, 248, 846, -1000,
	-1000, 1952, -193, 424, -1000, 25269, -1000, -194, -1000, 813,
	-202, -1000, 799, -203, -1000, 1945, -1000, -209, 414, -1000,
	1387, 766, 1875, 25269, 1875, 25269, -1000, 33178, -1000, 756,
	756, 1387, 1875, -1000, -1000, -1000, -1000, -1000, 26986, 1548,
	1187, 66100, -1000, -1000, -1000, -1000, 57749, -1000, 1492, 1489,
	1139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1752,
	68015, -1000, 1389, 1902, -1000, 1389, 1944, -1000, 1392, -1000,
	57749, 770, -1000, 1387, -210, 1387, -215, -207, -1000, -1000,
	-1000, 1387, 2402, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2200, -1000, 838, 1649, 1649, 1484, -1000, 407, -1000, 405,
	-1000, -220, -1000, 782, 1339, 782, 1339, -1000, -1000, 25702,
	-1000, 2413, -1000, -1000, 1758, -1000, 1952, 25269, 25269, 1472,
	-1000, 2502, 1875, -1000, 1875, -1000, -1000, -1000, -1000, -1000,
	-226, -227, -1000, -1000, -1000, -1000, 1387, 1387, 1387, 876,
	782, 782, -1000, 5, -1000, -1000, 25269, -235, 1387, -1000,
}
var sqlPgo = [...]int{

	0, 3127, 3124, 3120, 3118, 3117, 3116, 3115, 3113, 3112,
	3107, 3104, 3103, 3099, 3097, 3096, 3095, 3094, 3092, 3090,
	3087, 3084, 3083, 3082, 3081, 3080, 3079, 3076, 3075, 3072,
	3069, 3068, 3067, 3064, 3063, 3062, 3058, 3057, 3056, 3053,
	3051, 3050, 3045, 3042, 28, 3040, 3039, 3038, 3037, 3034,
	3028, 3026, 3025, 3024, 3023, 3022, 3020, 3019, 3018, 3012,
	3010, 3009, 3008, 3006, 3001, 2997, 2991, 2990, 2987, 2986,
	2985, 2984, 2983, 2980, 126, 2979, 2978, 2976, 2975, 2972,
	2968, 2959, 2957, 2954, 2947, 2945, 2942, 2931, 2930, 99,
	2928, 2927, 2925, 2924, 2923, 2921, 2920, 2917, 2916, 2915,
	182, 2914, 2913, 2910, 2907, 2906, 2903, 2902, 2900, 2899,
	2896, 2894, 2891, 2888, 2886, 2884, 2880, 2879, 2878, 2870,
	2865, 2864, 2863, 2862, 2861, 2854, 2852, 193, 137, 2850,
	2849, 2848, 2847, 2846, 2844, 85, 87, 20, 2843, 80,
	115, 188, 6158, 173, 2842, 2841, 2840, 2839, 2837, 61,
	129, 136, 125, 124, 156, 2836, 2832, 69, 44, 34,
	30, 93, 2831, 2830, 2828, 2376, 77, 2824, 2823, 190,
	177, 2821, 706, 2820, 134, 89, 86, 111, 66, 2819,
	104, 19, 2818, 186, 59, 2817, 121, 64, 31, 4917,
	5215, 2816, 88, 201, 79, 143, 166, 155, 161, 150,
	127, 472, 2815, 180, 2813, 123, 146, 2810, 2809, 2808,
	54, 140, 2, 5, 152, 9, 2807, 14, 2806, 10,
	2805, 2804, 2803, 2801, 27, 120, 2800, 36, 57, 2799,
	32, 95, 149, 2797, 167, 2796, 90, 2793, 191, 145,
	162, 18, 168, 2792, 2791, 2790, 2789, 2788, 91, 17,
	92, 2782, 2781, 94, 176, 2779, 50, 116, 71, 102,
	200, 83, 163, 103, 164, 169, 2778, 2777, 2776, 138,
	2774, 2772, 113, 154, 2771, 2768, 33, 51, 174, 53,
	2767, 2766, 114, 2765, 147, 2764, 2761, 2760, 197, 130,
	160, 7, 74, 84, 26, 11, 172, 110, 72, 73,
	2759, 2382, 1531, 1198, 2755, 108, 81, 43, 76, 107,
	192, 38, 2749, 2748, 1122, 2747, 2742, 2740, 2739, 131,
	2738, 2737, 2736, 100, 37, 58, 2735, 117, 56, 75,
	198, 70, 159, 157, 181, 2732, 133, 2730, 101, 106,
	2729, 144, 184, 62, 2726, 282, 105, 2725, 153, 2724,
	2721, 2714, 2713, 122, 2712, 2711, 175, 2710, 112, 2709,
	2708, 139, 135, 247, 29, 2707, 55, 256, 2706, 141,
	40, 2705, 158, 25, 0, 5979, 4641, 5275, 2704, 1363,
	2702, 151, 97, 2697, 2695, 2694, 2693, 35, 12, 6,
	8, 15, 13, 695, 482, 2688, 2687, 68, 96, 118,
	2686, 194, 165, 2684, 2682, 2680, 63, 2679, 23, 2678,
	21, 2674, 2664, 24, 1, 2663, 2661, 178, 2660, 179,
	2659, 2657, 2427, 2655, 189, 2654, 98, 2649, 128, 109,
	2648, 2646, 2645, 2644, 185, 2643, 187, 2642, 22, 16,
	3, 2641, 2640, 2638, 148, 4, 2241, 2637, 2634, 67,
	142, 65, 2633, 2629, 132,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	424, 424, 17, 27, 18, 28, 12, 426, 426, 426,
	426, 21, 19, 19, 29, 138, 138, 138, 138, 16,
	16, 24, 24, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 423, 423, 153, 153, 152, 148,
	148, 427, 427, 154, 154, 154, 156, 156, 33, 33,
	87, 87, 87, 139, 80, 80, 80, 80, 80, 80,
	80, 75, 75, 372, 372, 373, 373, 134, 134, 135,
	135, 135, 135, 136, 136, 137, 137, 137, 47, 35,
	35, 35, 35, 35, 35, 35, 36, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 38, 38, 38, 38,
	38, 38, 45, 45, 45, 45, 128, 128, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 432, 432,
	433, 433, 434, 434, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 59,
	59, 226, 226, 204, 204, 49, 49, 419, 419, 239,
	239, 340, 340, 61, 61, 62, 62, 62, 62, 62,
	62, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 70, 70,
	70, 71, 71, 71, 68, 68, 68, 66, 66, 66,
	65, 65, 65, 69, 69, 69, 67, 67, 67, 240,
	240, 72, 72, 72, 72, 72, 72, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 342, 342,
	73, 73, 73, 312, 312, 76, 76, 270, 270, 77,
	77, 77, 77, 77, 78, 78, 78, 78, 88, 88,
	88, 88, 422, 422, 232, 232, 169, 169, 169, 169,
	83, 83, 83, 83, 84, 84, 84, 85, 85, 133,
	133, 94, 94, 94, 94, 94, 93, 93, 93, 93,
	93, 93, 39, 39, 39, 40, 40, 41, 41, 42,
	42, 43, 43, 44, 44, 44, 44, 44, 96, 96,
	428, 428, 98, 95, 95, 95, 97, 97, 97, 97,
	99, 100, 100, 100, 100, 100, 100, 101, 101, 366,
	366, 247, 247, 364, 364, 380, 380, 365, 365, 208,
	208, 208, 208, 208, 209, 209, 209, 371, 371, 371,
	371, 371, 371, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	118, 118, 118, 127, 127, 127, 127, 127, 127, 127,
	120, 120, 120, 111, 111, 103, 103, 103, 103, 107,
	107, 107, 107, 107, 104, 104, 108, 108, 110, 110,
	112, 112, 112, 112, 112, 112, 105, 105, 105, 105,
	114, 114, 114, 114, 113, 113, 123, 123, 123, 123,
	123, 123, 326, 326, 119, 119, 119, 119, 122, 122,
	122, 122, 261, 261, 117, 117, 117, 121, 121, 124,
	124, 124, 124, 106, 106, 106, 437, 437, 437, 125,
	125, 116, 116, 126, 126, 126, 126, 126, 126, 126,
	115, 115, 115, 425, 425, 109, 420, 420, 417, 417,
	417, 417, 417, 417, 417, 418, 418, 421, 421, 81,
	81, 81, 54, 54, 438, 438, 438, 55, 55, 439,
	439, 439, 436, 436, 436, 436, 436, 436, 436, 436,
	210, 210, 211, 211, 293, 293, 293, 293, 293, 212,
	212, 155, 155, 155, 215, 216, 216, 213, 213, 214,
	214, 214, 218, 218, 217, 220, 220, 219, 292, 385,
	385, 386, 386, 386, 386, 386, 386, 386, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 383, 383,
	383, 384, 381, 381, 382, 382, 382, 382, 440, 440,
	440, 440, 440, 440, 441, 441, 291, 291, 224, 224,
	388, 388, 388, 388, 389, 389, 389, 389, 389, 392,
	391, 390, 390, 390, 390, 390, 322, 322, 322, 58,
	58, 58, 258, 258, 257, 257, 259, 259, 259, 259,
	259, 259, 259, 259, 259, 259, 259, 259, 259, 259,
	130, 130, 56, 56, 56, 161, 161, 53, 53, 53,
	443, 443, 57, 57, 57, 444, 444, 60, 60, 60,
	60, 60, 60, 52, 52, 52, 52, 52, 445, 445,
	276, 276, 275, 275, 230, 230, 328, 173, 173, 149,
	149, 149, 20, 22, 22, 15, 15, 15, 15, 15,
	15, 30, 30, 31, 31, 26, 26, 429, 429, 430,
	430, 82, 82, 86, 86, 86, 92, 92, 129, 129,
	129, 129, 129, 129, 129, 34, 34, 34, 34, 46,
	46, 46, 46, 90, 447, 447, 447, 91, 91, 446,
	446, 168, 168, 168, 168, 170, 170, 288, 288, 289,
	289, 448, 448, 290, 290, 290, 290, 163, 162, 164,
	164, 51, 51, 51, 157, 157, 158, 158, 159, 159,
	160, 160, 449, 449, 79, 79, 79, 132, 132, 203,
	203, 284, 284, 284, 225, 225, 178, 178, 287, 287,
	285, 285, 285, 285, 256, 256, 256, 131, 131, 235,
	235, 249, 249, 250, 250, 337, 337, 251, 89, 89,
	142, 142, 140, 140, 140, 140, 140, 140, 450, 450,
	141, 141, 141, 143, 143, 143, 143, 143, 143, 143,
	146, 146, 146, 146, 147, 147, 147, 145, 145, 399,
	399, 399, 401, 401, 402, 398, 398, 400, 400, 442,
	442, 260, 260, 260, 222, 223, 221, 221, 451, 451,
	228, 228, 227, 229, 229, 327, 327, 327, 254, 254,
	254, 254, 279, 279, 277, 277, 278, 278, 280, 280,
	281, 281, 281, 282, 282, 283, 283, 253, 253, 308,
	308, 144, 144, 144, 234, 234, 234, 236, 236, 299,
	299, 299, 299, 299, 300, 300, 298, 298, 298, 298,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 330,
	330, 237, 237, 331, 286, 286, 415, 415, 415, 416,
	416, 325, 325, 332, 332, 332, 332, 332, 332, 323,
	323, 324, 324, 338, 339, 339, 264, 264, 264, 264,
	262, 262, 263, 263, 333, 333, 333, 333, 255, 255,
	334, 334, 334, 335, 294, 295, 295, 343, 343, 343,
	343, 358, 233, 233, 233, 452, 452, 344, 344, 344,
	344, 344, 344, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 348, 348, 348, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 357, 357, 357, 357,
	357, 349, 349, 354, 354, 355, 355, 355, 350, 351,
	356, 356, 356, 356, 453, 453, 360, 360, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 346, 346, 346,
	353, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 271, 271, 272, 272, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 303, 303, 303, 303, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 393, 393, 393, 393, 393, 393, 393, 393,
	396, 396, 397, 397, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 403, 403, 404, 404, 406, 406, 407,
	407, 408, 409, 409, 409, 410, 411, 411, 405, 405,
	412, 412, 412, 412, 413, 413, 414, 414, 414, 414,
	414, 314, 314, 315, 315, 321, 321, 321, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 171, 171, 171, 171, 171, 245,
	245, 243, 243, 243, 246, 246, 244, 244, 242, 242,
	241, 241, 311, 311, 309, 309, 313, 313, 265, 265,
	359, 359, 359, 359, 359, 359, 359, 266, 266, 266,
	274, 267, 267, 268, 268, 268, 268, 268, 305, 306,
	269, 269, 269, 307, 307, 316, 320, 320, 319, 318,
	318, 317, 317, 296, 296, 297, 297, 252, 252, 454,
	454, 248, 248, 336, 336, 336, 336, 206, 206, 238,
	238, 205, 205, 198, 198, 199, 199, 199, 199, 231,
	231, 361, 361, 361, 362, 363, 310, 188, 187, 175,
	176, 186, 185, 184, 174, 177, 181, 182, 183, 179,
	180, 194, 193, 192, 190, 191, 341, 200, 200, 201,
	201, 201, 202, 202, 202, 202, 172, 172, 195, 195,
	196, 197, 197, 189, 189, 189, 165, 165, 165, 166,
	166, 167, 167, 370, 370, 368, 368, 368, 369, 369,
	369, 369, 367, 367, 367, 367, 367, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 374, 374, 374, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 376, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 379, 379,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 5, 3, 5, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 6, 3, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 6, 5, 1, 2, 1,
	3, 2, 0, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 2, 3, 0, 2,
	3, 2, 3, 2, 6, 4, 7, 2, 6, 4,
	7, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 2, 4, 3, 2,
	2, 1, 2, 1, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 5, 4, 6, 4, 3,
	0, 1, 3, 2, 4, 2, 4, 1, 6, 3,
	1, 1, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 1, 3, 2, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 2, 3, 3, 3, 7, 5,
	3, 3, 2, 0, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 3, 4, 3, 1, 1, 1, 2,
	3, 2, 3, 6, 6, 7, 9, 6, 3, 4,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	3, 2, 10, 13, 0, 2, 3, 9, 12, 0,
	2, 3, 1, 1, 2, 2, 2, 2, 1, 0,
	1, 0, 1, 3, 1, 1, 1, 1, 3, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 5, 8, 5, 11, 0, 1,
	3, 3, 2, 2, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 5,
	8, 4, 1, 0, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 2, 2, 2, 2, 2, 3, 1,
	4, 2, 4, 7, 3, 3, 0, 3, 6, 3,
	1, 1, 8, 7, 5, 0, 1, 6, 7, 6,
	5, 3, 4, 14, 17, 14, 17, 4, 0, 2,
	2, 0, 1, 0, 1, 3, 2, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	3, 4, 3, 0, 2, 2, 0, 10, 3, 2,
	0, 1, 3, 1, 1, 3, 3, 5, 1, 1,
	3, 3, 2, 3, 4, 3, 4, 5, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 3, 4, 1, 5, 3, 4, 5, 1,
	5, 1, 3, 2, 0, 3, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 3,
	2, 1, 0, 5, 1, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 2, 1, 0, 2, 5, 2,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 5, 4, 1, 2, 1, 4, 1,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 2,
	5, 1, 4, 2, 5, 1, 4, 3, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 1, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	4, 6, 5, 7, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 1, 5, 5, 3, 1, 1, 1, 2, 2,
	2, 4, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 8, 8, 6, 4,
	6, 6, 6, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 4,
	3, 4, 3, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 1, 2, 3, 2, 3, 2, 3, 1, 0,
	1, 3, 1, 3, 3, 3, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 2, 2,
	3, 2, 1, 1, 1, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 3, 1, 1, 1, 1, 5, 3, 1, 1,
	3, 1, 2, 2, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 447, -74, -47, -45, -76, -77, -62,
	-75, -78, -73, -88, -92, -82, -94, -129, -3, -33,
	-35, -48, -61, -63, -72, -80, -79, -81, -83, -87,
	-86, -39, -89, -93, -102, -130, -131, -132, 80, 67,
	120, 102, 107, 126, 152, 278, 307, 317, 301, -97,
	-98, 336, -34, -46, -91, -90, -4, -10, 27, 38,
	-36, -37, -38, 52, -56, -53, -50, -59, -431, 82,
	-400, -64, -67, -69, -435, 112, 125, 163, 270, -84,
	-85, 303, 305, -41, -40, 121, -140, -142, -95, -96,
	-133, -103, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, 339, 385, 39, 348, 68,
	115, 311, 21, -5, -6, -7, -8, -9, -11, -22,
	-49, -51, -52, -54, -55, -60, -57, -58, -399, -65,
	-66, -68, -70, -71, 302, -143, -141, 444, 397, -13,
	-17, -18, -14, -16, -19, -15, -23, -27, -28, -25,
	-24, -26, -29, -30, -31, -32, -20, -21, -12, 415,
	423, -146, -144, -145, -147, 324, 405, 362, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, -190, -195,
	-196, -197, -189, -165, -376, -379, 4, -374, -377, 131,
	176, 240, 21, 22, 23, 24, 25, 27, 37, 38,
	39, 42, 44, 45, 48, 49, 50, 51, 52, 53,
	56, 61, 66, 67, 68, 69, 70, 75, 72, 73,
	74, 77, 79, 80, 81, 84, 85, 93, 94, 95,
	96, 97, 98, 102, 105, 104, 107, 110, 111, 112,
	114, 116, 117, 120, 121, 124, 122, 368, 370, 123,
	125, 126, 127, 137, 138, 139, 141, 142, 144, 146,
	150, 151, 153, 157, 159, 160, 161, 162, 163, 164,
	165, 177, 172, 178, 182, 185, 184, 186, 187, 188,
	179, 193, 196, 197, 198, 200, 201, 204, 205, 206,
	207, 210, 209, 212, 215, 216, 219, 220, 223, 225,
	226, 228, 229, 227, 230, 233, 231, 232, 235, 236,
	238, 237, 245, 246, 248, 249, 250, 265, 253, 254,
	255, 258, 261, 264, 266, 267, 268, 269, 270, 271,
	273, 274, 276, 278, 280, 282, 283, 284, 285, 286,
	287, 289, 290, 292, 293, 294, 295, 296, 301, 298,
	299, 300, 302, 303, 304, 305, 307, 309, 310, 311,
	312, 314, 316, 337, 338, 350, 317, 318, 319, 320,
	321, 322, 323, 327, 331, 328, 329, 330, 332, 325,
	326, 333, 334, 336, 339, 341, 343, 344, 347, 348,
	349, 351, 354, 355, 356, 352, 353, 346, 361, 359,
	360, 363, 364, 365, 366, 367, 369, 371, 379, 380,
	382, 385, 386, 387, 389, 390, 393, 394, 395, 396,
	401, 397, 399, 402, 403, 404, 410, 409, 416, 417,
	419, 420, 421, 32, 40, 41, 43, 46, 57, 58,
	59, 62, 99, 100, 119, 128, 129, 140, 154, 156,
	166, 167, 168, 183, 189, 191, 171, 213, 243, 244,
	259, 263, 275, 277, 288, 313, 342, 357, 373, 374,
	375, 376, 381, 383, 405, 406, 407, 411, 418, 251,
	-183, 2, -165, -165, 278, 26, 2, 26, 274, 326,
	364, 366, 2, 192, 2, -422, -232, 2, 26, -169,
	-165, 82, 152, 324, -183, 2, -422, -232, 24, 2,
	-165, 2, -170, 2, 317, -165, 447, 77, 220, 61,
	313, 333, -100, 380, -99, 373, 319, -101, -366, 2,
	233, -165, 447, 447, 447, 447, 2, 362, 268, 409,
	325, 398, 95, 285, 176, -417, 2, 4, -377, -374,
	-199, -198, 362, 95, -197, -189, 437, -196, 447, 447,
	447, 2, 197, 198, 284, 283, 333, 334, 447, 447,
	447, 2, 25, 55, 76, 79, 101, 127, 147, 150,
	256, -432, 226, 265, 282, 319, 332, 361, 371, 382,
	-436, 349, 56, 398, -443, 387, 110, -275, 95, 366,
	364, 220, 151, 394, 309, 155, 392, 105, 182, 396,
	395, 447, 447, 25, 55, 64, 79, 110, 127, 147,
	150, -434, 265, 282, 316, 319, 332, 361, 371, 387,
	382, 2, 409, 325, 362, 176, 95, 398, 309, 281,
	-74, 2, 444, 29, 336, -139, 362, 2, -165, 197,
	198, 2, 447, 447, -417, 2, 197, 198, 2, 56,
	321, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 2, -127, 333, 349,
	160, 38, 61, 26, 66, 96, 153, 176, 177, 205,
	76, 77, 283, 220, 198, -326, 334, 363, 320, 359,
	380, 82, 399, 310, 421, -425, 122, 4, 95, 233,
	335, 373, 70, 367, 368, -442, 2, 362, -446, 2,
	380, 380, 2, -446, 2, -446, 2, -168, 2, 380,
	377, -447, 380, 418, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, -141, -143, -142, 447,
	447, 447, 447, 447, -127, 333, 2, 61, 26, -450,
	145, -227, -228, 391, 190, 118, 257, -140, -142, 2,
	-399, -364, 2, -301, -380, -303, 435, 436, 430, 239,
	422, -314, 101, 392, 251, -379, -304, -316, 119, 313,
	-246, 8, 9, 5, 6, 7, -172, -345, -310, -353,
	384, 130, 242, -202, 449, 10, 444, -396, -142, -315,
	33, 156, 54, -368, -201, -347, -355, -351, -352, -452,
	44, 50, 49, 371, 232, 327, 328, 343, 329, 330,
	42, 401, 172, 248, 250, 184, 4, 191, -200, -189,
	-393, -394, -374, -375, 183, 189, 185, 342, 186, 187,
	188, 41, 288, 141, 142, 140, 111, 100, 99, 244,
	46, 45, 43, 406, -356, 97, 373, 374, 375, 376,
	200, 201, -165, -376, 64, 87, 88, 86, 91, 90,
	92, 89, 335, 398, 55, 32, 166, 167, 171, 243,
	168, 62, -395, 353, 83, 149, 181, 169, 194, 195,
	199, 214, 217, 234, 241, 260, 262, 308, 340, -453,
	407, 128, 129, 263, 275, 357, 381, 383, 154, 213,
	57, 58, -401, 289, -402, -183, -401, 447, 447, 448,
	447, -221, -222, -223, 2, 26, 108, 444, 2, -329,
	2, 442, -333, -142, 208, -332, 444, -330, -190, 252,
	-397, 314, -393, -394, -172, -189, -201, 4, -224, 444,
	446, 95, 362, 65, 2, -270, 444, -165, 26, -139,
	251, 377, 448, -312, 444, 251, 148, 254, -165, 2,
	2, 337, 2, 444, -100, 59, 380, -289, 2, -290,
	-162, -163, -164, -338, 196, 280, 287, 424, 421, -364,
	-428, 148, 427, 377, -364, -247, 446, 2, -333, 166,
	-190, 2, -187, -367, 4, -374, -377, -375, -378, 64,
	-376, 26, 28, 29, 30, 31, 33, 34, 35, 36,
	47, 54, 55, 60, 63, 65, 76, 82, 86, 87,
	89, 88, 90, 91, 92, 101, 103, 106, 108, 109,
	113, 115, 118, 130, 132, 145, 147, 148, 152, 155,
	158, 170, 180, 190, 192, 208, 211, 218, 221, 222,
	239, 242, 247, 251, 252, 256, 257, 272, 279, 291,
	306, 324, 335, 345, 358, 362, 372, 377, 378, 384,
	391, 392, 398, 400, 408, 412, 413, 414, 415, -379,
	2, -333, 166, 2, -192, 166, -333, -195, 2, -372,
	166, -370, 10, -369, 5, 4, -374, -377, -375, 2,
	-174, -165, 2, -186, -367, 2, -205, 166, -190, -191,
	-195, 377, 448, -238, -198, -199, -231, -165, 446, -301,
	2, -89, 2, -301, 166, 2, -89, 166, 2, -301,
	166, 2, -89, 166, 2, 2, 2, 382, 2, 79,
	166, -165, 362, 94, 2, 300, -433, 316, 386, 409,
	2, 2, 2, 2, 2, 2, 2, 362, 325, -444,
	289, -179, 2, -165, 145, -372, 166, 2, -372, 166,
	2, -193, -195, -193, 176, 193, -174, 166, 2, 366,
	364, 366, 364, 148, 2, 192, 2, 192, 2, -334,
	2, -335, -190, 2, 2, 2, 2, 2, 166, -165,
	362, 94, 2, 207, 2, 2, 2, 2, 2, 2,
	2, 2, 2, -240, 166, 2, -190, -240, 166, 2,
	-240, 166, 2, -206, 166, 2, -205, -174, 166, 2,
	-373, 166, 2, -372, -373, 166, 2, -342, 2, -341,
	-369, 405, -74, 444, 333, 444, -372, -190, -301, -89,
	148, -301, -89, 145, 2, 95, 362, -127, 2, 145,
	400, 2, 8, 2, -372, 286, 137, 2, 337, 2,
	283, 334, 61, 421, 148, 2, 2, -420, 2, 251,
	148, 2, 148, 2, 148, 2, 148, 2, 148, 2,
	2, 283, 334, 2, 379, 206, 123, 2, 148, -261,
	2, 415, 148, 2, 5, 2, 196, 280, 350, 2,
	-190, -437, 2, 362, 409, 325, 2, 2, 72, 73,
	148, 2, 148, 421, 2, -255, -333, -288, -289, -288,
	377, -170, -450, -227, -228, -127, 337, 2, 2, -450,
	-254, -277, -278, 218, 132, 247, -260, 26, 108, -260,
	-260, 48, 445, 445, 11, 12, 63, 37, 435, 436,
	437, 438, 143, 439, 440, 433, 434, 432, 425, 426,
	429, 202, 203, 78, 428, 427, 71, 224, 315, 133,
	134, 135, 136, 297, 173, 174, 175, 14, 15, 16,
	30, 256, 217, 422, 169, 340, 430, 17, 18, 19,
	194, 195, 241, 40, 170, -171, -207, -301, -301, -301,
	-301, -301, 262, 444, -252, -296, 442, -142, 444, 444,
	444, 5, 444, 5, -363, 8, -142, -301, -314, 445,
	-244, 444, -142, -314, -309, 444, 313, 442, 444, -317,
	-301, 446, -403, 416, -349, 444, 277, -348, 444, -348,
	-348, 410, -346, 444, 423, 417, 444, -346, 444, 444,
	145, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 410, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 448, -401, -224, 444, -248, -336,
	-301, 437, -248, -248, 251, -241, -301, 83, -264, 199,
	234, 149, 214, 308, 181, -363, -74, -298, 449, -325,
	423, -142, -330, -189, -142, -332, 444, -329, -325, 437,
	-190, 444, 148, 444, 446, 148, -231, -367, -174, -190,
	-200, -201, -241, -372, -417, -231, -169, 34, -311, -343,
	-344, -357, -345, -354, -350, -353, 293, 294, 292, 296,
	295, 44, 50, 49, 371, 232, 327, 328, 343, 329,
	330, 42, 401, 172, 248, 250, 184, 4, 43, 406,
	-356, 191, 183, 189, 185, 342, 186, 187, 188, 41,
	288, 141, 142, 140, 111, 100, 99, 244, 46, 45,
	97, 373, 374, 375, 376, 200, 201, 407, 353, 57,
	58, -417, -231, 145, -366, -241, 34, -289, 2, -448,
	448, 216, -209, 223, 238, 159, 252, 419, 245, -371,
	5, 4, -310, -322, 101, 220, -353, 9, 436, -361,
	8, 435, -365, -364, 85, 446, -367, -151, 298, -150,
	23, 27, 112, 403, 124, -214, 178, 268, 119, 346,
	-424, -426, 318, 369, 370, 74, 245, 298, 119, -257,
	-259, 34, 93, 236, 264, 51, 164, 227, 228, 348,
	411, 119, 298, 415, 119, -426, 298, -426, -153, 346,
	-424, -426, 318, 298, -152, -214, 119, 449, -372, -238,
	448, 448, -367, 437, 119, 119, 119, 119, 2, 2,
	239, 2, 2, 2, 150, -436, -434, 2, 2, 2,
	-190, 166, -192, 166, 2, -195, 409, -226, 251, -419,
	-239, 362, -190, -161, -398, 415, 239, 239, 34, 444,
	2, -176, 166, 2, -166, -165, 176, -398, 239, -334,
	-203, -190, -203, 336, -183, 34, -298, 119, 2, 2,
	2, -165, -154, 448, 53, 304, 119, -154, 119, -154,
	119, -154, 448, 119, -154, 119, 448, 119, 119, 445,
	448, -342, -372, -137, 415, 148, 82, 444, -373, -419,
	-174, 2, -190, 2, 362, 200, -372, -372, -366, 26,
	338, 2, 73, -190, -421, 145, -418, 309, -417, -190,
	-190, -190, -190, -190, 145, 2, 379, 2, 379, 2,
	-165, 67, -165, 216, -190, 145, 362, 176, 362, -154,
	448, -170, -450, -254, -366, -450, -278, -277, -280, -301,
	26, -283, 139, 235, -301, -303, -141, -141, -141, -229,
	-327, -301, 279, 176, -358, -343, -343, -188, -367, 373,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, -301, -301, -301, -301, -301,
	-301, -301, -301, -301, -301, 217, 169, 340, 40, 170,
	-301, 377, -301, -301, -301, -301, 231, 239, 242, 384,
	130, 393, 108, 245, -454, 358, 36, -307, -142, -245,
	444, -321, 31, 345, 26, -314, 444, 2, -296, -301,
	-297, -242, -241, -241, 445, 408, 26, 108, 437, 2,
	8, -271, -273, 420, 230, 98, 161, 229, -272, 323,
	445, 448, 34, 445, -301, -242, -313, -309, -241, -320,
	-319, 412, -367, 437, -404, 138, 155, 8, -363, -363,
	373, 373, 8, -363, -363, 444, 445, 2, 445, 2,
	445, 2, 445, 2, 445, 2, -301, -301, -301, -301,
	-301, -301, -301, -241, -265, 2, -359, -241, 4, 420,
	230, 98, 161, 229, 323, -265, 2, -266, 2, -301,
	-241, -267, -302, -303, 435, 436, 430, -314, -268, 2,
	-301, -242, -301, 47, 211, 378, -269, -301, 148, -241,
	-241, 2, -241, 2, -402, 34, -241, -234, 448, 148,
	34, 4, -234, -234, 444, 445, 448, 199, 199, -329,
	-264, 199, -262, 260, -262, -262, -415, 444, 443, -325,
	-175, 442, 450, -367, -324, -323, 34, -183, 258, -325,
	-325, 446, 445, -324, -190, 444, -241, -367, 351, 445,
	446, 194, 194, 194, 445, -137, 377, 415, -74, 253,
	445, 448, -233, 33, 442, -273, 444, -360, 410, 444,
	444, 148, -232, -428, 445, 380, -290, -208, 287, 344,
	299, 331, 360, 9, 8, 8, 448, -367, 448, 377,
	-429, 76, 65, -292, 166, 65, -381, -177, 76, -382,
	-165, 60, 392, 279, 147, -429, 76, -429, 76, 76,
	336, 349, 48, -333, 37, -89, 212, 148, 421, 362,
	377, -333, -259, -343, 93, 227, 228, 48, -362, -361,
	436, -362, 48, -362, -362, -362, 415, -192, -333, 377,
	269, -372, 377, 448, 37, -89, 212, 148, 377, -205,
	-175, -339, -338, -198, -165, 446, -301, -89, -301, -89,
	119, 2, -444, 207, 444, -224, 239, -258, -257, 239,
	-194, 2, -190, 148, -231, -340, 192, 448, -239, 269,
	119, 119, 444, 116, 285, 2, 251, 239, -176, 166,
	-157, 365, 119, -295, -294, 413, -284, -89, 444, 101,
	34, -284, -249, -250, -337, -251, -177, 444, -183, -165,
	2, -190, -240, -240, -240, -205, -206, -174, -372, -373,
	-373, -74, -341, 445, 445, -136, 255, -135, -165, 5,
	-139, 400, -211, -293, -292, -383, -384, -381, 217, 176,
	392, 193, 131, -137, -338, -137, -339, -339, -190, 145,
	-231, -231, 333, 145, 145, 446, -261, 285, 95, 362,
	268, 176, -190, -205, -190, -333, -450, -281, -361, 444,
	-282, 313, 314, 448, -149, 35, 106, 204, -190, 421,
	117, -301, -301, 377, -454, 358, -307, 117, -301, 231,
	242, 384, 130, 393, 108, 245, 148, 444, -302, -302,
	445, -243, -301, -301, 443, 452, 445, -451, 448, -227,
	-301, -241, -241, 445, 445, 377, 377, 377, 377, 444,
	446, -241, -231, 443, 443, 448, 445, -318, -319, 113,
	-301, 446, -409, 261, 444, 444, 445, 445, 448, 445,
	421, 421, 445, 445, 445, -301, 34, 448, 448, 448,
	445, 448, 448, 448, 445, 445, 148, 445, 445, -274,
	272, 445, 11, 12, 435, 436, 437, 438, 143, 439,
	440, 433, 434, 432, 425, 426, 427, 71, 224, 315,
	14, 15, 16, 194, 170, -302, -302, -302, 445, -305,
	-306, 148, 145, 34, -269, -269, -269, 445, 148, -241,
	445, 445, 444, 445, -295, -336, -236, 2, -329, -185,
	-367, -295, -295, -241, -301, -329, -329, -263, 400, 251,
	199, -329, -323, 445, -416, -363, -325, -324, -363, -300,
	-299, 146, 35, 106, 237, -183, -224, -324, -324, -367,
	-325, 445, -237, -331, -397, -451, 446, -367, -128, 5,
	242, -128, -128, 148, -231, 24, 273, -343, 442, 443,
	8, 8, 444, -363, -363, -231, 148, -364, -289, 390,
	69, 287, 373, -364, -150, -190, -177, -184, -165, 239,
	-292, 166, -156, 239, -343, -184, 444, 444, 204, 204,
	-177, -184, 166, -177, 166, -184, -184, -423, 287, 246,
	-301, 219, 285, 240, -151, 298, -89, -89, 444, -428,
	400, 107, -190, -194, 298, -200, -362, -362, -257, 298,
	-192, -372, 415, -174, -152, -89, -89, 444, -175, -153,
	298, -134, 165, 437, -165, 409, -165, -210, -211, -165,
	-438, 417, 415, 119, 119, -224, -204, -190, 442, -137,
	-372, -190, -372, -372, -372, 2, 444, 2, -190, 119,
	251, 239, -158, 114, -449, 427, -174, -228, -227, -301,
	-256, -287, 306, 251, -225, -178, -177, 405, -183, -256,
	-235, 448, 148, 427, 446, -225, 2, -154, -154, -154,
	-154, -154, -74, -137, 448, 444, 427, 427, 444, -372,
	-372, 445, 448, -190, -176, 176, 176, -182, -166, -137,
	-42, 415, 362, 333, 333, -165, -186, -174, -190, -187,
	-205, -282, -301, -327, -190, 449, -301, -301, 117, 117,
	-301, -302, -302, -301, 117, 148, 444, -301, -311, 30,
	30, 445, 448, -297, -301, 445, 408, -451, -451, -451,
	5, 230, 161, 229, -272, 229, -272, -272, 8, 437,
	-367, 445, -309, 115, -301, 372, -367, 437, -410, -180,
	444, -165, 413, -227, -363, -346, -346, 445, -358, -343,
	-301, -301, -301, -301, -301, -301, -305, -301, -358, -343,
	-302, -302, -302, -302, -302, -302, -302, -302, -302, -302,
	-302, -302, -302, -302, -302, -302, -302, -302, -302, 108,
	239, 245, -302, -306, -305, -301, -301, -343, 445, 445,
	445, -241, -74, -253, 155, -339, 448, -253, -253, 445,
	-263, 444, -301, -329, 443, 445, 448, -324, 443, 448,
	451, 427, -224, 446, -323, 445, 448, -286, 34, 445,
	-367, -89, 254, 5, 8, 443, 445, -363, 445, 445,
	-231, -301, 377, 377, 119, 239, 402, -385, -382, -301,
	-230, -328, -301, 444, 444, -148, 112, 336, -430, 2,
	119, -154, 119, -154, 419, 444, 444, 377, -429, 76,
	-241, -301, -138, 101, -366, -426, 377, 377, 269, -241,
	377, -137, 148, 2, 2, 2, 445, 34, 249, -165,
	-190, -192, 34, -339, -363, -161, 2, -276, 400, -175,
	-190, 119, -159, 210, -449, -370, -398, -279, -277, -256,
	-248, 240, 75, 445, 448, 446, -295, -250, -236, -301,
	2, 445, -135, -136, -372, -372, -372, -137, -139, -139,
	-293, 2, 444, -176, -166, 444, 255, -190, -261, -216,
	-215, 268, 245, 252, 445, -149, -175, -301, -301, 117,
	30, 30, -301, -301, -311, 445, -301, -301, -241, 443,
	5, -301, 445, 445, 445, 445, -301, 446, -411, -165,
	-301, 445, 445, 445, 445, 448, 448, 445, 445, 445,
	445, -306, 148, 108, 245, 444, 445, 445, -308, 158,
	48, -329, -308, -308, -231, -298, -363, -299, -175, 442,
	-367, -331, 444, 446, 443, 445, -177, -184, -292, 119,
	-386, 76, -387, 63, 131, 82, 239, 242, 392, 279,
	60, 101, 291, 34, 445, 445, 448, -149, -230, -231,
	239, 355, 101, 239, 101, 94, 387, -177, -184, -231,
	-231, -190, -177, -184, 445, 448, 427, -194, -192, -372,
	445, -175, -373, -212, 179, -89, 2, 444, -224, -258,
	-89, 443, 444, -165, 251, 444, -175, -160, 209, -449,
	-370, -157, -256, -285, 444, 251, -89, -178, 2, -228,
	427, 445, 445, 94, 94, -230, 444, 444, -231, -43,
	-44, 176, 76, 271, -187, 362, -149, -301, -301, -301,
	445, -451, -367, 437, -405, 268, 445, -301, -301, -302,
	148, 444, -311, -406, 414, -301, -241, -406, -406, 445,
	-325, -363, 2, -292, -184, -188, -181, -165, 131, 166,
	242, 204, 444, -302, -190, 444, 2, -440, 103, 180,
	-291, -441, 81, 356, -328, 445, 445, 242, 242, -301,
	-343, -154, -154, 445, 445, 377, 377, 377, -366, 80,
	-364, 377, -213, -214, 170, -439, 415, -210, -438, -230,
	-190, -230, 251, -449, -370, -158, 109, -231, 76, -279,
	-307, -137, 444, 444, 445, -230, -230, 445, 448, 26,
	444, 26, 444, -190, 445, -228, 48, 445, 445, -302,
	-311, 445, -407, -408, -180, -324, 443, -387, -181, 239,
	-301, -167, 444, -301, 180, 104, 162, -212, 444, 291,
	-173, 63, 444, 444, -177, -184, 444, 427, 148, 444,
	-438, 266, 94, 236, 445, 34, 445, -276, 445, -190,
	-370, -159, 395, 240, 445, -184, -256, -373, -373, -291,
	445, 445, -44, -231, -231, -412, 285, 314, 157, -241,
	445, 448, 34, 119, 445, -388, 225, -165, 445, 104,
	162, -213, -231, -190, -427, 400, -188, -218, -217, -215,
	-220, -219, -215, -241, -364, 80, 266, -241, -190, 94,
	-212, -89, -291, 444, -291, 444, -160, 336, -294, 445,
	445, -212, -291, 445, 445, 445, -413, -414, 40, 389,
	85, -301, -413, -413, -408, -410, 131, -389, -392, -391,
	251, 341, 149, 267, 445, 355, 411, -440, 445, -224,
	-301, 445, 448, 405, 445, 448, 405, 445, 148, 445,
	444, -213, -439, -212, -230, -212, -230, -249, -137, -137,
	-213, -212, -414, 276, 144, 313, 276, 144, -181, -391,
	251, -392, 251, 395, 105, -388, -217, 170, -219, 148,
	266, -231, -438, -213, 445, -213, 445, -295, -213, 30,
	-390, 236, 304, 53, 336, -390, -389, 444, 444, 445,
	-445, 413, -291, -445, -291, -414, 22, 242, 101, -440,
	-241, -241, -155, 53, 304, 2, -212, -212, 445, 445,
	-213, -213, -213, 377, -445, -445, 444, -241, 445, -213,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 337, 338,
	340, 341, 342, 344, 345, 347, 349, 351, 353, 354,
	356, 358, 359, 360, 361, 362, 364, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 411,
	413, 0, 838, 840, 842, 844, 27, 28, 0, 0,
	169, 171, 173, 0, 198, 200, 202, 203, 205, -2,
	0, 291, 292, 294, 296, -2, -2, 0, 0, 400,
	402, 0, 0, 422, 423, 0, 928, -2, 416, 418,
	420, 483, 485, 487, 489, 491, 493, 495, 496, 498,
	500, 502, 504, 506, 508, 510, 512, 514, 516, 518,
	520, 522, 524, 526, 528, -2, -2, -2, 0, -2,
	-2, -2, 856, 31, 33, 35, 37, 39, 41, 59,
	254, 255, 257, 259, 261, 264, 265, 267, 967, 298,
	300, 302, 304, 306, 0, -2, 981, 0, 0, 43,
	44, 45, 46, 47, 48, 49, 66, 67, 68, 69,
	70, 71, 72, 52, 54, 55, 61, 62, 64, 0,
	0, 943, 945, 947, 949, -2, 0, 0, 7, 9,
	11, 13, 15, 17, 19, 21, 23, 339, 343, 346,
	348, 350, 352, 355, 357, 363, 365, 367, 729, 1564,
	1578, 1579, 1580, 1583, 1584, 1585, 1586, 1587, 1588, 1911,
	1991, 1992, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 0,
	378, 376, 1558, 379, 1748, 381, 383, 285, 286, 287,
	288, 289, 290, 0, 152, 0, 393, 387, 392, 394,
	396, 397, 398, 399, 374, 372, 0, 393, 1610, 391,
	836, 837, 831, 832, 1781, 866, 412, -2, -2, -2,
	1880, -2, 444, -2, 451, 1883, 1783, 454, 0, 456,
	-2, 459, 839, 841, 843, 29, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, -2, -2, -2,
	-2, 0, 0, 1644, 1535, 1580, 1538, 1533, 170, 172,
	174, 175, 0, 0, 0, 0, 0, 0, 199, 201,
	204, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	785, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	653, 0, 0, 658, 780, 781, 802, 0, 0, 0,
	0, 293, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 0, 0, 0, 0, 0, 232,
	331, 332, 0, 968, 0, 0, 0, 150, 143, 0,
	0, 641, 401, 403, 0, 142, 0, 0, 835, 0,
	0, 417, 419, 421, 484, 486, 488, 490, 492, 494,
	497, 499, 501, 503, 505, 507, 509, 511, 513, 515,
	517, 519, 521, 523, 525, 527, 529, 530, 0, 0,
	0, 0, 0, 534, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, -2, -2, -2, 0,
	0, 0, -2, -2, 0, 0, 0, 533, 535, 536,
	537, 0, 582, 623, 624, 0, 771, 969, 868, 846,
	859, 868, 848, 849, 850, 851, 852, 857, 858, 861,
	0, 853, 854, 855, 32, 34, 36, 38, 40, 42,
	256, 258, 260, 262, 266, 268, -2, 941, 942, 299,
	301, 303, 305, 307, 404, 0, 406, 0, 534, 932,
	0, -2, 0, 973, 973, 973, 0, 0, 942, 940,
	0, 409, 410, 463, 464, 1198, 0, 0, 0, 0,
	0, 1433, 1282, 0, 465, -2, 1313, 1315, 1859, 1880,
	1432, 1317, 1318, 1319, 1320, 1321, 0, 0, 1324, 0,
	1326, 1327, 1328, 1329, 0, 1331, 0, 1335, 1336, 1337,
	0, 1864, 1512, 1576, -2, 1103, 1104, 1105, 1106, 1107,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1572, 0,
	1404, 1351, -2, 1597, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1653, -2, -2, -2,
	-2, -2, -2, -2, 1159, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1894, 1355, 1356, 1357, 1358, 1359,
	1360, 1361, 1362, 1363, 0, 1848, 1865, 1866, 1871, 1873,
	1867, 1856, 1374, -2, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1160,
	-2, 1860, 1861, 1876, 1877, 1882, 1887, 1888, 1863, 1872,
	-2, -2, 959, 1756, 962, 729, 960, 944, 946, 0,
	948, 0, 0, 0, 953, 976, 974, 0, 1012, 957,
	958, 968, 1029, 1052, 0, 1034, 0, 1052, 1074, 0,
	1039, 1776, 1352, 1353, 0, 1580, 1577, -2, 0, 0,
	0, 0, 0, 0, 195, 375, 0, 380, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 414,
	415, 0, 439, 0, 443, 1855, -2, -2, 447, 869,
	873, 874, 875, 876, 0, 0, 0, 0, 0, 453,
	0, 0, 440, 441, 457, 460, 0, 50, 0, 1865,
	1074, 51, 0, 1548, 1602, 1603, 1604, 1605, 1606, 1894,
	1910, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	53, 0, 1865, 56, 0, 1865, 0, -2, 60, 0,
	1865, 153, 154, 1593, 1594, 1598, 1599, 1600, 1601, 63,
	0, 1554, 65, 0, 1551, 73, 0, 1865, 0, 1532,
	-2, 0, 0, 633, 1529, 1534, 634, 1539, 0, 176,
	177, 178, 179, 180, 1865, 182, 183, 0, 185, 186,
	1865, 188, 189, 0, 191, 207, 208, 0, 210, 0,
	1865, 0, 0, 0, 216, -2, 233, 0, 230, 0,
	220, 221, 223, 224, 225, 226, 227, 0, 0, 0,
	786, 272, 270, 1559, 0, -2, 1865, 774, 777, 1865,
	779, 791, 1562, 0, -2, 0, 966, 1865, 883, 654,
	655, 656, 657, 0, 284, 0, 896, 0, 898, 0,
	918, 1080, 1029, 234, 235, 236, 237, 238, 1865, 0,
	0, 0, 243, 0, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 135, 1865, 310, 329, 135, 1865, 313,
	135, 1865, 316, 135, 1865, 319, 1527, 135, 1865, 322,
	323, 1865, 325, 155, 326, 1865, 328, 0, -2, 368,
	1566, -2, 334, 0, -2, 0, 167, 0, 639, 640,
	0, 833, 834, 0, 424, 0, 0, 531, 532, 0,
	0, 542, 543, 544, 545, 1754, 1668, 548, 0, 551,
	572, 586, 0, 0, 0, 555, 557, 638, 559, 0,
	0, 561, 0, 563, 0, 565, 0, 567, 0, 569,
	571, 573, 587, 575, 0, 0, 0, 585, 0, 590,
	591, 0, 0, 596, 597, 598, 0, 600, 601, 602,
	603, 0, 605, 606, -2, -2, 610, 612, 0, 618,
	0, 622, 0, 538, 539, 135, 1078, 845, -2, 847,
	0, 863, 935, -2, 0, 405, 0, 408, 939, 933,
	938, 990, 991, 0, 0, 0, 0, 971, 972, 0,
	0, 0, 930, 931, 0, 0, 0, 0, 1438, 1439,
	1440, 1441, 1442, 1443, 1446, 1447, 1444, 1445, 1448, 1449,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 1452, 1453,
	0, 0, 1455, 0, 1457, 0, 0, 0, 0, 0,
	0, 1261, 1263, 1520, 0, 0, 1454, 1203, 1204, 1205,
	1240, 1241, 0, 0, 1314, 1517, 1516, 1316, 0, 1469,
	0, 1323, 0, 1195, 1330, 1545, -2, 0, 1433, 1464,
	0, 0, 1338, 1339, 1340, 0, 0, 1469, 0, 0,
	1511, 0, 1406, 0, 1139, 0, 1140, 1141, 0, 1142,
	1143, 1156, 1169, 0, 0, 0, 0, 1173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1161, 0, 0, 0, 1492, -2,
	0, 0, 0, 0, 0, 961, 0, 0, 1016, 1521,
	1525, 1526, 1016, 1016, 0, 0, 1470, 0, 0, 0,
	0, 1071, 1071, 1071, 1069, 1046, 0, 1052, 0, 1062,
	0, 1052, 1052, 0, -2, 1034, 0, 0, 1062, 1075,
	1076, 0, 0, 0, 0, 0, 0, 1581, 0, 0,
	0, 1568, 0, 167, 0, 385, 395, 968, 0, 1472,
	1094, 1090, 1097, 1098, 1099, 1100, 1146, 1147, 1148, 1149,
	1150, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, -2, 1157,
	1159, 1180, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
	1136, 1137, 1138, 1152, 0, 1127, 1127, 1127, 1144, 1145,
	1168, 1179, 1171, 1179, 1175, 1095, 1096, 1162, 1163, 1164,
	1165, 0, 389, 0, 0, 0, 0, -2, 449, 0,
	871, 0, 877, 474, 475, 476, 879, 880, 0, 452,
	477, 478, 479, 480, 481, 482, 0, 746, 0, 748,
	1541, 0, 450, 467, 455, 0, 461, 74, 828, 103,
	0, 828, 828, 0, 0, 122, 0, 0, 0, 0,
	0, 92, 99, 80, 81, 0, 0, 0, 0, 57,
	754, 0, 757, 0, 0, 0, 0, 0, 0, 0,
	769, 0, 0, 0, 0, 91, 0, 86, 76, 0,
	0, 94, 101, 0, 126, 128, 0, 0, 1065, 632,
	0, 0, 1581, 1537, 0, 0, 0, 0, 209, 211,
	0, 213, 214, 215, 0, 785, 0, 222, 219, 263,
	729, 1865, 753, 1865, 751, 1563, 0, 0, 0, 282,
	277, 0, 279, 772, 0, 965, 0, 0, 0, 0,
	792, 0, 1865, 797, 1550, 1589, 1590, 885, 0, 1086,
	0, 899, 0, 0, 1081, 0, 1083, 0, 240, 241,
	242, 0, 308, 0, 133, 134, 0, 311, 0, 314,
	0, 317, 0, 0, 320, 0, 0, 0, 0, 968,
	0, 0, 0, 145, 0, 0, 0, 0, 167, 167,
	1065, 426, 1065, 428, 0, 0, 546, 547, 549, 550,
	552, 553, 619, 554, 558, 0, 626, 1772, 636, 560,
	562, 564, 566, 568, 0, 577, 0, 579, 0, 581,
	593, 592, 594, 599, 604, 0, 0, 0, 0, 770,
	0, 862, 936, 938, 407, 934, 988, 989, 994, 998,
	999, 1002, 1005, 1006, 996, 1198, 954, 955, 956, 982,
	983, 811, 0, 1991, 1199, 1091, 1200, 1201, 1547, 0,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	-2, -2, -2, -2, -2, -2, -2, -2, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, -2,
	-2, -2, 1238, 1239, -2, 1456, 1458, 0, 1520, 0,
	-2, 0, -2, -2, -2, -2, 1258, 0, 1260, 1265,
	1267, 1269, 0, 0, 0, 0, 1519, 1279, 1503, 1504,
	0, 0, 1435, 1436, 1437, 1264, 0, 1283, 1518, 1515,
	0, 0, 1468, 979, 1342, 0, 0, 0, 0, 1349,
	0, 1546, 1194, 1181, 1182, 1183, 1184, 1185, 1186, 1196,
	1334, 1466, 0, 1465, 0, 0, 0, 1476, 0, 1510,
	1506, 0, 1569, 1575, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1386, 0, 1479, -2, -2,
	-2, -2, -2, -2, -2, 0, 1388, 0, 1390, 1470,
	1489, 0, 0, 1284, 0, 0, 0, 1433, 0, 1393,
	1470, 1497, 0, 0, 0, 0, 0, 1470, 0, 1502,
	0, 1400, 0, 1402, 963, 0, 0, 1086, 0, 0,
	0, 1524, 1086, 1086, 0, 1011, 0, 0, 0, 0,
	0, 0, 1066, 1070, 1067, 1068, 0, 0, 1052, 1062,
	1026, 0, 0, 1549, 1032, 1061, 0, 729, 1051, 1062,
	1062, 0, -2, 1036, 0, 0, 979, -2, 168, 728,
	0, 0, 0, 0, 377, 0, 0, 0, 370, 0,
	373, 0, 1087, 1089, 0, 1101, 0, 0, -2, 0,
	0, 0, 0, 0, 442, 0, 870, 878, 0, 471,
	0, 473, 0, 747, 1543, 1542, 0, 462, 0, 0,
	0, 0, 827, 105, 1865, 0, 137, 0, 0, 713,
	1555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 755, 756, 758, 764, 766, 0, 760, 1544,
	0, 761, 0, 763, 765, 767, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	1531, 158, 1064, 1530, 1540, 0, 181, 184, 187, 190,
	0, 217, 0, 0, 661, 644, 0, 749, 752, 0,
	729, 784, 1561, 0, 271, 167, 0, 0, 278, 0,
	0, 0, 0, 0, 0, 790, 0, 0, 0, 1865,
	887, 893, 0, 981, 1085, 0, 916, 901, 0, 0,
	0, 916, 920, 921, 923, 924, 0, 0, 1082, 0,
	244, 330, 135, 135, 135, 1528, 135, 135, 156, 324,
	327, 333, 369, 968, 167, 165, 1735, 163, 160, 162,
	0, 0, 0, 662, 664, 665, 666, 667, 0, 1590,
	0, 1696, 1590, 140, 167, 276, 425, 430, 540, 0,
	637, 635, 576, 0, 0, 0, 589, 0, 0, 0,
	0, 0, 620, 621, 625, 1079, 937, 0, 1000, 0,
	997, 1003, 1004, 0, 985, 809, 810, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 1280, 0, -2, 1259,
	1262, 1266, 1268, 1270, 0, 0, 0, 0, 0, 0,
	1459, 0, 1461, 1281, 1513, 1516, 1431, 0, 0, 978,
	979, 979, 979, 1348, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 1474, 1475, 0, 1341, 0, 1507, 0,
	0, 0, 1350, 0, 0, 0, 1151, 1125, 0, 1179,
	1177, 1178, 1172, 1179, 1176, 0, 0, 0, 0, 0,
	1369, 0, 0, 0, 1373, 1385, 0, 1387, 1389, 0,
	0, 1391, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1287, 1288, 1289, 1392, 1495,
	1496, 0, 0, 0, 0, 0, 0, 1398, 0, 1501,
	1399, 1401, 968, 1013, 1008, 1522, 1065, 1015, 1017, 1523,
	1552, 1008, 1008, 0, 1471, 1054, 0, 1056, 0, 0,
	0, 1058, 0, 1047, 0, 1049, 1062, 1031, 0, 0,
	1024, 0, 1021, 1022, 1023, 729, 1060, 1033, 1037, 1569,
	0, 1077, 0, 1041, 1044, 0, 0, 1582, 192, 196,
	197, 193, 194, 0, 384, 0, 0, 1473, 0, 1092,
	0, 0, 0, 0, 0, 388, 0, 438, -2, 469,
	470, 472, 0, 468, 104, 815, 0, 0, 1553, 0,
	107, 1865, 116, 0, 690, 0, 0, 0, 0, 0,
	830, 0, 1865, 135, 1865, 135, 118, 121, 0, 125,
	123, 0, 0, 681, 75, 828, 78, 84, 0, 0,
	0, 90, 0, 821, 0, 759, 762, 768, 58, 0,
	823, 813, 0, 812, 127, 79, 85, 0, 825, 77,
	0, 167, 0, 1536, 0, 0, 0, 0, 660, -2,
	0, 0, 0, 0, 0, 0, 1065, 273, 0, 275,
	281, 280, 775, -2, 778, 787, 0, 789, 801, 0,
	0, 0, 889, 893, 0, 892, 966, 993, 980, 1084,
	894, 916, 0, 0, 0, 904, 906, 903, 900, 897,
	1086, 0, 0, 0, 0, 0, 239, 309, 312, 315,
	318, 321, 335, 144, 0, 0, 0, 0, 0, 167,
	0, 0, 0, 0, 0, 1590, 1590, 0, 1557, 141,
	427, 0, 0, 578, 580, 593, 613, 614, 676, 0,
	617, 0, 0, 984, 811, 0, 1202, 1243, 0, 0,
	-2, 0, 0, 1247, 0, 0, 0, -2, 0, 0,
	0, 1460, 1462, 0, 1515, 1343, 0, 0, 0, 0,
	1325, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 0, 1332,
	1333, 1434, 1477, 1505, 1509, 0, 1570, 1574, 1412, 1413,
	1417, 1560, 0, 0, 0, 1170, 1174, 1354, 0, 0,
	0, 0, 0, 0, 0, 1478, 1488, 1490, 1285, 1286,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	-2, -2, -2, 1303, 1304, 1305, -2, -2, -2, 0,
	0, 0, 1491, 1493, 1494, 1498, 1499, 0, 1395, 1396,
	1397, 1500, 0, 1010, 0, 1014, 0, 1010, 1010, 975,
	1055, 0, 1073, 1057, 1029, 1048, 0, 1038, 1027, 0,
	1028, 0, 1059, 0, 1035, 1040, 0, 1043, 0, 1343,
	-2, 151, 386, 371, 0, 1093, 1102, 0, 1154, 1158,
	390, 1063, 0, 0, 0, 0, 136, 688, 712, 0,
	0, 804, 811, 0, 0, 109, 0, 0, 0, 117,
	0, 114, 0, 120, 124, 0, 0, 0, 0, 0,
	0, 87, 88, 89, 0, 93, 0, 0, 0, 0,
	0, 138, 0, 212, 783, 218, 670, 0, 645, 0,
	729, 753, 0, 269, 0, 773, 788, 0, 0, 0,
	0, 0, 891, 893, 0, 884, 885, 916, 992, 895,
	914, -2, 913, 0, 0, 0, 981, 922, 919, 925,
	926, 0, 164, 0, 159, 161, 0, 147, 0, 0,
	663, 668, 0, 0, 0, 0, 0, 541, 588, 615,
	675, 0, 0, 995, 1001, 986, 811, 1245, 1249, 0,
	0, 0, 1251, -2, 0, 1273, -2, -2, 1463, 1514,
	1322, 979, 1344, 1346, 1347, 1197, 1508, 0, 1419, 1416,
	0, 1403, 1126, 1364, 1365, 0, 0, 1368, 1370, 1371,
	1372, 1487, 0, 0, 0, 0, 1394, 964, 1408, 0,
	0, 1018, 1408, 1408, 0, 1052, 1050, 1025, 1019, 0,
	1570, 1042, 0, 0, 1088, 1153, 817, 819, 106, 0,
	689, 0, 692, 0, 0, 0, 0, 699, 700, 0,
	0, 0, 0, 0, 718, 727, 0, 806, 0, 0,
	0, 111, 130, 0, 0, 829, 0, 135, 135, 0,
	0, 816, 0, 0, 0, 0, 0, 822, 824, 814,
	0, 826, 157, 678, 0, 649, 646, 661, 644, 750,
	782, 274, 0, 800, 0, 0, 0, 881, 893, 0,
	886, 887, 283, 0, 0, 0, 902, 905, 907, 993,
	0, 166, 167, 0, 0, 0, 0, 0, 0, 429,
	431, 0, 0, 437, 674, 0, 987, 1253, -2, -2,
	1274, 0, 1571, 1573, 981, 0, 1405, 0, 0, -2,
	0, 0, 0, 950, 0, 1009, 1007, 951, 952, 1072,
	1062, 0, 1045, 108, 0, 693, 694, 1556, 696, 0,
	698, 701, 0, 703, 1592, 0, 707, 714, 719, 0,
	670, 0, 724, 725, 805, 716, 0, 110, 112, 129,
	808, 113, 119, 0, 0, 0, 0, 0, 0, 1638,
	96, 0, 644, 677, 0, 647, 0, 0, 0, 0,
	801, 0, 0, 0, 888, 889, 0, 0, 0, 916,
	927, 146, 0, 0, 727, 0, 0, 711, 0, 433,
	0, 435, 0, 616, 1345, 1423, 0, 1366, 1367, -2,
	0, 1311, 1407, 1409, 0, 1030, 1020, 691, 695, 0,
	0, 733, 0, 0, 0, 722, 723, 678, 0, 0,
	132, 0, 0, 0, 818, 820, 0, 0, 0, 0,
	642, 0, 650, 0, 670, 0, 727, 0, 727, 0,
	890, 891, 0, 909, 910, 912, 917, 0, 0, 670,
	727, 710, 432, 0, 0, 0, 0, 0, 0, 1418,
	1312, 0, 0, 0, 702, 738, 0, 0, 0, 720,
	721, 718, 0, 729, 115, 0, 807, 0, 682, 0,
	0, 685, 0, 0, 97, 1638, 95, 0, 0, 651,
	678, 649, 670, 0, 670, 0, 882, 0, 911, 167,
	167, 678, 670, 434, 436, 1415, 1420, 1424, -2, 1829,
	1641, 0, 1421, 1422, 1410, 1411, 0, 704, 734, 735,
	0, 730, 731, 732, 1591, 705, 706, 715, 726, 733,
	131, 679, 0, 0, 680, 0, 0, 100, 0, 102,
	0, 644, 648, 678, 0, 678, 0, 1086, 148, 149,
	708, 678, 0, 1426, 1427, 1428, 1429, 1430, 697, 736,
	0, 737, 0, 0, 0, 738, 683, 0, 686, 0,
	98, 0, 643, 798, 727, 798, 727, 908, 709, 0,
	739, 0, 742, 743, 0, 740, 718, 0, 0, 673,
	793, 0, 670, 795, 670, 1425, 741, 744, 745, 717,
	0, 0, 669, 671, 672, 799, 678, 678, 678, 0,
	798, 798, 684, 0, 794, 796, 0, 0, 678, 687,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 433, 3, 439, 434, 3,
	444, 445, 437, 435, 448, 436, 446, 438, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 452, 3,
	425, 427, 426, 429, 449, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 442, 3, 443, 440, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 450, 432, 451, 430,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 428, 57768, 431, 57769, 441,
	57770, 447, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1036
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1041
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1045
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1046
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1047
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1048
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1049
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1050
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1051
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1052
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1053
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1057
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1138
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1153
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1157
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1162
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1174
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1186
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1205
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1228
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1232
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1237
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1248
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1254
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1261
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1271
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1279
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1286
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1294
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1301
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1309
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1314
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1318
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1323
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1329
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1337
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1346
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1358
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1368
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1372
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1386
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1391
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1398
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1402
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1408
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1412
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1419
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1424
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1429
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1434
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1444
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1453
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1477
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1487
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1494
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1504
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1513
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1522
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1527
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1534
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1542
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1557
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1565
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1569
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1579
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1586
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1594
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1604
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1633
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1660
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1663
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1667
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1704
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1709
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1713
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1719
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1724
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1729
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1733
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1749
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1752
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1756
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1760
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1778
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1782
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1788
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1792
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1800
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1816
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1830
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1843
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1844
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1845
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1846
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1864
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1869
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1879
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1888
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1896
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1902
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1915
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1932
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1941
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1945
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1949
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1954
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1970
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1976
		{
			sqlVAL.union.val = &sqlDollar[1].str
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1980
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1992
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1993
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1995
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1996
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1997
		{
			return helpWith(sqllex, "CREATE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2000
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2001
		{
			return unimplemented(sqllex, "create cast")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2002
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2003
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2004
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2005
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2006
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2007
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2008
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2009
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2010
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2011
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2012
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2013
		{
			return unimplemented(sqllex, "create operator")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2014
		{
			return unimplemented(sqllex, "create publication")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2015
		{
			return unimplemented(sqllex, "create rule")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2016
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			return unimplemented(sqllex, "create server")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2018
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2019
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2020
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2023
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2024
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2027
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2028
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2031
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2032
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2035
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2036
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2037
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2039
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2040
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2042
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2043
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2044
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2045
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2046
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2049
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2050
		{
			return unimplemented(sqllex, "drop server")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2051
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2058
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2059
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2060
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2061
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2063
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2064
		{
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2065
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2066
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2076
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				AsOf:        sqlDollar[7].union.asOfClause(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2084
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2088
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2092
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2098
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2103
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2120
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2130
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2134
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2140
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2151
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2155
		{

			sqlVAL.union.val = nil
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2169
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2179
		{
			return helpWith(sqllex, "DELETE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2186
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2193
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2203
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2204
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2205
		{
			return helpWith(sqllex, "DROP")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2208
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2209
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2210
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2211
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2212
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2220
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2224
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2235
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2239
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2242
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2254
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2265
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2273
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2280
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2288
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2296
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2311
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2315
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2318
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2326
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2330
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2333
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2337
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2342
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2365
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2368
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2370
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2378
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2385
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2389
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2392
		{
			return helpWith(sqllex, "DELETE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2394
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2395
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2396
		{
			return helpWith(sqllex, "INSERT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2397
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2399
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2400
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2403
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2408
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2409
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2410
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2414
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2428
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2436
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2444
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2452
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2462
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2468
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2476
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2486
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2490
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2498
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2501
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2521
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2525
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2529
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2532
		{
			return helpWith(sqllex, "GRANT")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2552
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2556
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2560
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2563
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2568
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2572
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2583
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2587
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2601
		{
			return helpWith(sqllex, "RESET")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2602
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2610
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2614
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2617
		{
			return helpWith(sqllex, "RESET")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2625
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2628
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2639
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2642
		{
			return helpWith(sqllex, "USE")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2646
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2647
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2648
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2649
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2655
		{
			return helpWith(sqllex, "USE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2671
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2686
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2689
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2707
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2716
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2720
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2724
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2730
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2740
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2744
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2748
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2752
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2756
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2767
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2770
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2780
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2796
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2800
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2805
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2822
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2825
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2827
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2830
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2834
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2853
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2860
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2866
		{
			return unimplemented(sqllex, "set from current")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2867
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2875
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2880
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2887
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2891
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2897
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2929
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2939
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2943
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2947
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2951
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2955
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2961
		{
			sqlVAL.union.val = tree.Low
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2965
		{
			sqlVAL.union.val = tree.Normal
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2969
		{
			sqlVAL.union.val = tree.High
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2980
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2984
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2988
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2997
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3009
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3010
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3011
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3012
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3013
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3014
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3016
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3017
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3019
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3020
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3021
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3022
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3023
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3024
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3025
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3027
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3029
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3031
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3053
		{
			sqlVAL.str = "client_encoding"
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3056
		{
			sqlVAL.str = "timezone"
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3057
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3071
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3076
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3081
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3092
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3101
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3109
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3116
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3124
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3131
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3141
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3148
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3150
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3153
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3161
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3165
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3173
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3176
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3189
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3197
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3205
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3209
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3211
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3215
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3217
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3221
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3229
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3233
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3235
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3239
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3247
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3250
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3252
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3256
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3266
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3269
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3281
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3283
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3286
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3288
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3292
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3295
		{
			sqlVAL.union.val = true
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3296
		{
			sqlVAL.union.val = false
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3304
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3307
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3309
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3313
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3323
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3333
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3343
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3349
		{
			sqlVAL.union.val = true
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3350
		{
			sqlVAL.union.val = false
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3357
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3361
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3364
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3371
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3375
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3383
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3388
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3393
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3397
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3405
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3410
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3415
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3428
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3431
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3439
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3446
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3450
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3454
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3461
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
			}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3475
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3479
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3490
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3495
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3498
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3506
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3514
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3519
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3639
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3643
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3647
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3686
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3690
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3695
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3699
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3708
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3715
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3719
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3731
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3740
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3743
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3779
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3792
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3806
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3807
		{
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3808
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3812
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3824
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3837
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3838
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3839
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3853
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3854
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3855
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3856
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3857
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3858
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3859
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3860
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3865
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3871
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3875
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3881
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3887
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3890
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:3894
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3903
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3910
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3915
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3920
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3926
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3933
		{
			sqlVAL.str = ""
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3940
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3946
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3953
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3960
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3966
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3976
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3986
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:3996
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4007
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4022
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4028
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4032
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4036
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4040
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4044
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4048
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4052
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4070
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4074
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4078
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4082
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4086
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4090
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4094
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4104
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4108
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4112
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 708:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4119
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4129
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4141
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4151
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4163
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4168
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4174
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4180
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4191
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4201
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4213
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4214
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4215
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4216
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4217
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4218
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4235
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4239
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4245
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4249
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4269
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4273
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4277
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4281
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4290
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4306
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4330
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4334
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4338
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4342
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4352
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4358
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4377
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4382
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4386
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4390
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4393
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4397
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4398
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4400
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4401
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4402
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4405
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4407
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4409
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4411
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4412
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4414
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4415
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4417
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4419
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4427
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4430
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4438
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4442
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4445
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4449
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4453
		{
			sqlVAL.union.val = nil
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4463
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4467
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4470
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4475
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4476
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4484
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4492
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4493
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4496
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4497
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4503
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4505
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4507
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4509
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4511
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4513
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4529
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4543
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4558
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4572
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4586
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4589
		{
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4590
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4594
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = false
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4615
		{
			sqlVAL.union.val = true
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = false
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4625
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4629
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4638
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4649
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4650
		{
			sqlVAL.str = ""
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4654
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4658
		{
			sqlVAL.union.val = tree.Descending
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 812:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4668
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4675
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4679
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4685
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4691
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4697
		{
			table := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4707
		{
			table := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4717
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4719
		{
			return unimplementedWithIssue(sqllex, 32555)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4723
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4729
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4737
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4743
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4755
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4760
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4761
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4764
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4765
		{
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4776
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4798
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4806
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4809
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4813
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4814
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4815
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4831
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4834
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4836
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4839
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4849
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4852
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4854
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4857
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4861
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4866
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4867
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4868
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4876
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4883
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4886
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4887
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4891
		{
			sqlVAL.str = ""
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4899
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4903
		{
			sqlVAL.str = ""
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4909
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4913
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4919
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4923
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4929
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4933
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4946
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4948
		{
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4952
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4957
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4961
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4971
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4983
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 881:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4997
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5007
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5017
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5021
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5025
		{
			sqlVAL.str = ""
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5031
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5035
		{
			sqlVAL.str = ""
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5041
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5045
		{
			sqlVAL.str = ""
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5051
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.str = ""
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5060
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5061
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5073
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5080
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5087
		{
			return helpWith(sqllex, "INSERT")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5105
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5109
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5118
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5125
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5129
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5139
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5163
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5167
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5171
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5177
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5180
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5181
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5183
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5189
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5194
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5198
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 917:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5226
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5230
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5231
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5235
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5252
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5255
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5259
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5302
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5308
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5312
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5327
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5331
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5335
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5339
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5343
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5347
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5352
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5353
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5358
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5393
		{
			return helpWith(sqllex, "SELECT")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5394
		{
			return helpWith(sqllex, "VALUES")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5395
		{
			return helpWith(sqllex, "TABLE")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5444
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5456
		{
			return helpWith(sqllex, "SELECT")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5460
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5478
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5493
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5500
		{
			return helpWith(sqllex, "TABLE")
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5512
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5516
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5520
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5524
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 964:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5534
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5542
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5543
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5547
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5551
		{
			sqlVAL.union.val = nil
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5556
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5557
		{
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5561
		{
			sqlVAL.union.val = true
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5565
		{
			sqlVAL.union.val = false
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5569
		{
			sqlVAL.union.val = false
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5575
		{
			sqlVAL.union.val = true
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5581
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5586
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5587
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5590
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5591
		{
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5595
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5599
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5605
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5611
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5615
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5621
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5625
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5630
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5645
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5654
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5665
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5669
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5678
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5684
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5691
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5698
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5707
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5711
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5715
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5721
		{
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5722
		{
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5725
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5726
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5743
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5747
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5753
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5757
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5779
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5781
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5793
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5796
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5798
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5804
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5814
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5818
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5823
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5828
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5834
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5840
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5845
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5857
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5861
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5865
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = flags
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5874
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5901
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5915
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5925
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5932
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5942
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5946
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5962
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5968
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5972
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5978
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5980
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5984
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5990
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5992
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5995
		{
			sqlVAL.union.val = nil
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5996
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5997
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6001
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6011
		{
			sqlVAL.union.val = true
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6015
		{
			sqlVAL.union.val = false
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6035
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6039
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6043
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6055
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6061
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6065
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6072
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6078
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6085
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6091
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6095
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6099
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6103
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6109
		{
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6110
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6121
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6125
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6131
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6132
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6133
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6137
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6142
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6156
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6160
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6166
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6174
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6191
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6203
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6217
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6226
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6248
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6250
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6259
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6270
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6271
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6288
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6292
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6296
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6300
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6304
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6308
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6312
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6316
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6320
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6324
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6328
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6332
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6336
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6340
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6352
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6356
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6387
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6391
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6395
		{
			sqlVAL.union.val = nil
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6402
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6406
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6410
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6414
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6422
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6426
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6430
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6434
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6438
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6442
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6446
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6450
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6454
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6468
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6475
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6479
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6490
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6494
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6498
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6502
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6508
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6523
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6529
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6535
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6543
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6547
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6557
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6570
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6576
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6580
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6584
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6588
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6597
		{
			sqlVAL.union.val = true
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6598
		{
			sqlVAL.union.val = false
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6603
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6607
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6612
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = &coltypes.TTime{PrecisionSet: true, Precision: int(prec)}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6619
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6620
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6622
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6630
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
			} else {
				sqlVAL.union.val = &coltypes.TTimestamp{PrecisionSet: true, Precision: int(prec)}
			}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6646
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6655
		{
			sqlVAL.union.val = true
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6656
		{
			sqlVAL.union.val = false
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6657
		{
			sqlVAL.union.val = false
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6661
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6667
		{
			sqlVAL.union.val = tree.Year
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6671
		{
			sqlVAL.union.val = tree.Month
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = tree.Day
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6693
		{
			sqlVAL.union.val = tree.Month
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6697
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6701
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6705
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6717
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6724
		{
			sqlVAL.union.val = nil
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = tree.Second
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6733
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6761
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6765
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6768
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6777
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6786
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6798
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6802
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6806
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6810
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6814
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6818
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6822
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6826
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6830
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6834
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6870
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6878
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6882
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6890
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6898
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6902
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6918
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6926
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6930
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6934
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6958
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6974
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6986
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6990
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6994
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7006
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7021
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7031
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7035
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7047
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7051
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7055
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7067
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7071
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7075
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7083
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7087
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7109
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7129
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7165
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7185
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7193
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7197
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7303
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7308
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7310
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7314
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7317
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7335
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7344
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7372
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7376
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7380
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7383
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7394
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7395
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7397
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7408
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7419
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7426
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7440
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7442
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7446
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7460
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7470
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7474
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7478
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7482
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7486
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7528
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7533
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7535
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7538
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7540
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7543
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7548
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7553
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7555
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7558
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7563
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7572
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7573
		{
			return unimplemented(sqllex, "treat")
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7575
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7579
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7583
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7587
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7591
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7594
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7599
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7604
		{
			return unimplemented(sqllex, "within group")
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7605
		{
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7609
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7620
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7624
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7630
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7640
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7663
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.str = ""
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7689
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7693
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7704
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7725
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7731
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7744
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7791
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7807
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7811
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7818
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = tree.Any
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7834
		{
			sqlVAL.union.val = tree.Some
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7838
		{
			sqlVAL.union.val = tree.All
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7846
		{
			sqlVAL.union.val = tree.Div
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7850
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7851
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = tree.LT
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = tree.GT
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7855
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = tree.LE
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = tree.GE
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = tree.NE
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = tree.Like
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7865
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7906
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7921
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7927
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7931
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7944
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7964
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7968
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8010
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8014
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8024
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8074
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8080
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8100
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8112
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8119
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8129
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8139
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8152
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8169
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8178
		{
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8179
		{
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8210
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8218
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8251
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8259
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8295
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8303
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8325
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8336
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8347
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8357
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8457
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8464
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8468
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8472
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8486
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8494
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8525
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8540
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8549
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = res
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.str = ""
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8582
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8586
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
