// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:55
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:564
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8540

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	426, 57,
	-2, 911,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	170, 746,
	187, 746,
	-2, 0,
	-1, 60,
	102, 911,
	176, 911,
	374, 911,
	375, 911,
	-2, 0,
	-1, 74,
	115, 885,
	128, 885,
	184, 885,
	211, 885,
	239, 885,
	247, 885,
	371, 885,
	-2, 874,
	-1, 108,
	120, 555,
	200, 555,
	361, 555,
	-2, 0,
	-1, 113,
	4, 913,
	20, 913,
	21, 913,
	22, 913,
	23, 913,
	25, 913,
	30, 913,
	35, 913,
	36, 913,
	37, 913,
	38, 913,
	39, 913,
	40, 913,
	41, 913,
	42, 913,
	43, 913,
	44, 913,
	46, 913,
	47, 913,
	48, 913,
	49, 913,
	50, 913,
	51, 913,
	52, 913,
	55, 913,
	56, 913,
	57, 913,
	58, 913,
	60, 913,
	61, 913,
	65, 913,
	66, 913,
	67, 913,
	68, 913,
	69, 913,
	71, 913,
	72, 913,
	73, 913,
	74, 913,
	76, 913,
	78, 913,
	79, 913,
	82, 913,
	83, 913,
	91, 913,
	92, 913,
	93, 913,
	94, 913,
	95, 913,
	96, 913,
	97, 913,
	98, 913,
	100, 913,
	102, 913,
	104, 913,
	107, 913,
	108, 913,
	109, 913,
	111, 913,
	113, 913,
	114, 913,
	116, 913,
	117, 913,
	118, 913,
	119, 913,
	120, 913,
	121, 913,
	122, 913,
	123, 913,
	124, 913,
	125, 913,
	133, 913,
	134, 913,
	135, 913,
	136, 913,
	137, 913,
	138, 913,
	140, 913,
	142, 913,
	146, 913,
	148, 913,
	149, 913,
	151, 913,
	152, 913,
	154, 913,
	155, 913,
	156, 913,
	157, 913,
	158, 913,
	159, 913,
	160, 913,
	161, 913,
	162, 913,
	165, 913,
	166, 913,
	171, 913,
	172, 913,
	173, 913,
	176, 913,
	177, 913,
	178, 913,
	179, 913,
	180, 913,
	181, 913,
	182, 913,
	183, 913,
	185, 913,
	187, 913,
	190, 913,
	191, 913,
	192, 913,
	194, 913,
	195, 913,
	198, 913,
	199, 913,
	200, 913,
	202, 913,
	203, 913,
	205, 913,
	206, 913,
	208, 913,
	209, 913,
	212, 913,
	213, 913,
	216, 913,
	218, 913,
	221, 913,
	222, 913,
	223, 913,
	224, 913,
	225, 913,
	227, 913,
	228, 913,
	229, 913,
	230, 913,
	235, 913,
	236, 913,
	237, 913,
	238, 913,
	240, 913,
	241, 913,
	243, 913,
	244, 913,
	245, 913,
	248, 913,
	249, 913,
	251, 913,
	253, 913,
	254, 913,
	255, 913,
	256, 913,
	257, 913,
	258, 913,
	259, 913,
	260, 913,
	262, 913,
	263, 913,
	264, 913,
	265, 913,
	266, 913,
	268, 913,
	269, 913,
	270, 913,
	271, 913,
	272, 913,
	273, 913,
	274, 913,
	275, 913,
	276, 913,
	278, 913,
	279, 913,
	280, 913,
	281, 913,
	282, 913,
	284, 913,
	285, 913,
	286, 913,
	287, 913,
	288, 913,
	289, 913,
	290, 913,
	292, 913,
	294, 913,
	295, 913,
	296, 913,
	297, 913,
	298, 913,
	299, 913,
	301, 913,
	302, 913,
	303, 913,
	304, 913,
	305, 913,
	306, 913,
	307, 913,
	309, 913,
	310, 913,
	311, 913,
	312, 913,
	313, 913,
	314, 913,
	315, 913,
	316, 913,
	317, 913,
	319, 913,
	320, 913,
	321, 913,
	322, 913,
	324, 913,
	325, 913,
	326, 913,
	327, 913,
	329, 913,
	330, 913,
	331, 913,
	332, 913,
	333, 913,
	334, 913,
	335, 913,
	336, 913,
	337, 913,
	338, 913,
	339, 913,
	340, 913,
	342, 913,
	343, 913,
	345, 913,
	346, 913,
	347, 913,
	348, 913,
	349, 913,
	350, 913,
	351, 913,
	352, 913,
	353, 913,
	355, 913,
	356, 913,
	357, 913,
	358, 913,
	361, 913,
	362, 913,
	363, 913,
	364, 913,
	366, 913,
	367, 913,
	369, 913,
	370, 913,
	373, 913,
	374, 913,
	375, 913,
	376, 913,
	378, 913,
	380, 913,
	381, 913,
	382, 913,
	383, 913,
	384, 913,
	385, 913,
	387, 913,
	388, 913,
	389, 913,
	394, 913,
	395, 913,
	396, 913,
	397, 913,
	398, 913,
	399, 913,
	-2, 0,
	-1, 135,
	115, 884,
	128, 884,
	184, 884,
	211, 884,
	239, 884,
	247, 884,
	371, 884,
	-2, 877,
	-1, 140,
	1, 807,
	190, 807,
	268, 807,
	273, 807,
	425, 807,
	426, 807,
	-2, 0,
	-1, 142,
	1, 807,
	425, 807,
	426, 807,
	-2, 0,
	-1, 143,
	1, 807,
	425, 807,
	426, 807,
	-2, 0,
	-1, 144,
	1, 811,
	425, 811,
	426, 811,
	-2, 0,
	-1, 172,
	4, 920,
	5, 920,
	6, 920,
	7, 920,
	8, 920,
	9, 920,
	20, 920,
	21, 920,
	22, 920,
	23, 920,
	25, 920,
	30, 920,
	31, 920,
	35, 920,
	36, 920,
	37, 920,
	38, 920,
	39, 920,
	40, 920,
	41, 920,
	42, 920,
	43, 920,
	44, 920,
	46, 920,
	47, 920,
	48, 920,
	49, 920,
	50, 920,
	51, 920,
	52, 920,
	53, 920,
	54, 920,
	55, 920,
	56, 920,
	57, 920,
	58, 920,
	60, 920,
	61, 920,
	63, 920,
	65, 920,
	66, 920,
	67, 920,
	68, 920,
	69, 920,
	71, 920,
	72, 920,
	73, 920,
	74, 920,
	76, 920,
	78, 920,
	79, 920,
	81, 920,
	82, 920,
	83, 920,
	84, 920,
	85, 920,
	86, 920,
	87, 920,
	88, 920,
	89, 920,
	90, 920,
	91, 920,
	92, 920,
	93, 920,
	94, 920,
	95, 920,
	96, 920,
	97, 920,
	98, 920,
	99, 920,
	100, 920,
	102, 920,
	104, 920,
	107, 920,
	108, 920,
	109, 920,
	111, 920,
	113, 920,
	114, 920,
	116, 920,
	117, 920,
	118, 920,
	119, 920,
	120, 920,
	121, 920,
	122, 920,
	123, 920,
	124, 920,
	125, 920,
	126, 920,
	127, 920,
	133, 920,
	134, 920,
	135, 920,
	136, 920,
	137, 920,
	138, 920,
	140, 920,
	142, 920,
	145, 920,
	146, 920,
	148, 920,
	149, 920,
	151, 920,
	152, 920,
	154, 920,
	155, 920,
	156, 920,
	157, 920,
	158, 920,
	159, 920,
	160, 920,
	161, 920,
	162, 920,
	163, 920,
	165, 920,
	166, 920,
	171, 920,
	172, 920,
	173, 920,
	175, 920,
	176, 920,
	177, 920,
	178, 920,
	179, 920,
	180, 920,
	181, 920,
	182, 920,
	183, 920,
	185, 920,
	187, 920,
	188, 920,
	189, 920,
	190, 920,
	191, 920,
	192, 920,
	193, 920,
	194, 920,
	195, 920,
	198, 920,
	199, 920,
	200, 920,
	202, 920,
	203, 920,
	205, 920,
	206, 920,
	207, 920,
	208, 920,
	209, 920,
	210, 920,
	212, 920,
	213, 920,
	216, 920,
	218, 920,
	219, 920,
	220, 920,
	221, 920,
	222, 920,
	223, 920,
	224, 920,
	225, 920,
	226, 920,
	227, 920,
	228, 920,
	229, 920,
	230, 920,
	231, 920,
	233, 920,
	234, 920,
	235, 920,
	236, 920,
	237, 920,
	238, 920,
	240, 920,
	241, 920,
	244, 920,
	245, 920,
	248, 920,
	249, 920,
	250, 920,
	251, 920,
	252, 920,
	253, 920,
	254, 920,
	255, 920,
	256, 920,
	257, 920,
	258, 920,
	259, 920,
	260, 920,
	262, 920,
	263, 920,
	264, 920,
	265, 920,
	266, 920,
	268, 920,
	269, 920,
	270, 920,
	271, 920,
	272, 920,
	273, 920,
	274, 920,
	275, 920,
	276, 920,
	278, 920,
	279, 920,
	280, 920,
	281, 920,
	282, 920,
	284, 920,
	285, 920,
	286, 920,
	287, 920,
	288, 920,
	289, 920,
	290, 920,
	292, 920,
	293, 920,
	294, 920,
	295, 920,
	296, 920,
	297, 920,
	298, 920,
	299, 920,
	301, 920,
	302, 920,
	303, 920,
	304, 920,
	305, 920,
	306, 920,
	307, 920,
	309, 920,
	310, 920,
	311, 920,
	312, 920,
	313, 920,
	314, 920,
	315, 920,
	316, 920,
	317, 920,
	318, 920,
	319, 920,
	320, 920,
	321, 920,
	322, 920,
	323, 920,
	324, 920,
	325, 920,
	326, 920,
	327, 920,
	329, 920,
	330, 920,
	331, 920,
	332, 920,
	333, 920,
	334, 920,
	335, 920,
	336, 920,
	337, 920,
	338, 920,
	339, 920,
	340, 920,
	342, 920,
	343, 920,
	345, 920,
	346, 920,
	347, 920,
	348, 920,
	349, 920,
	350, 920,
	351, 920,
	352, 920,
	353, 920,
	355, 920,
	356, 920,
	357, 920,
	358, 920,
	361, 920,
	362, 920,
	363, 920,
	364, 920,
	365, 920,
	366, 920,
	367, 920,
	369, 920,
	370, 920,
	373, 920,
	374, 920,
	375, 920,
	376, 920,
	377, 920,
	378, 920,
	380, 920,
	381, 920,
	382, 920,
	383, 920,
	384, 920,
	385, 920,
	387, 920,
	388, 920,
	389, 920,
	394, 920,
	395, 920,
	396, 920,
	397, 920,
	398, 920,
	399, 920,
	400, 920,
	408, 920,
	413, 920,
	414, 920,
	415, 920,
	422, 920,
	428, 920,
	-2, 0,
	-1, 175,
	1, 57,
	426, 57,
	-2, 911,
	-1, 208,
	424, 1510,
	427, 1510,
	-2, 598,
	-1, 209,
	424, 1512,
	427, 1512,
	-2, 599,
	-1, 210,
	424, 1511,
	427, 1511,
	-2, 600,
	-1, 211,
	427, 1462,
	-2, 601,
	-1, 625,
	144, 1630,
	359, 1630,
	405, 1630,
	424, 1630,
	-2, 0,
	-1, 626,
	144, 1550,
	359, 1550,
	405, 1550,
	424, 1550,
	-2, 0,
	-1, 628,
	144, 1703,
	359, 1703,
	405, 1703,
	424, 1703,
	-2, 0,
	-1, 630,
	144, 1731,
	359, 1731,
	405, 1731,
	424, 1731,
	-2, 0,
	-1, 637,
	144, 1635,
	359, 1635,
	405, 1635,
	424, 1635,
	-2, 432,
	-1, 670,
	1, 528,
	421, 528,
	423, 528,
	425, 528,
	426, 528,
	-2, 0,
	-1, 671,
	1, 597,
	141, 597,
	421, 597,
	423, 597,
	425, 597,
	426, 597,
	-2, 0,
	-1, 677,
	1, 542,
	421, 542,
	423, 542,
	425, 542,
	426, 542,
	-2, 0,
	-1, 679,
	1, 546,
	421, 546,
	423, 546,
	425, 546,
	426, 546,
	-2, 0,
	-1, 681,
	1, 556,
	421, 556,
	423, 556,
	425, 556,
	426, 556,
	-2, 0,
	-1, 682,
	1, 562,
	421, 562,
	423, 562,
	425, 562,
	426, 562,
	-2, 0,
	-1, 683,
	1, 565,
	421, 565,
	423, 565,
	425, 565,
	426, 565,
	-2, 0,
	-1, 687,
	1, 579,
	421, 579,
	423, 579,
	425, 579,
	426, 579,
	-2, 0,
	-1, 688,
	1, 581,
	421, 581,
	423, 581,
	425, 581,
	426, 581,
	-2, 0,
	-1, 716,
	128, 924,
	211, 924,
	239, 924,
	-2, 880,
	-1, 724,
	128, 923,
	211, 923,
	239, 923,
	-2, 878,
	-1, 751,
	422, 1807,
	-2, 1212,
	-1, 752,
	422, 1808,
	-2, 1213,
	-1, 779,
	422, 1504,
	-2, 1495,
	-1, 785,
	5, 1046,
	-2, 1540,
	-1, 786,
	5, 1047,
	-2, 1545,
	-1, 787,
	5, 1048,
	-2, 1544,
	-1, 788,
	5, 1049,
	-2, 1728,
	-1, 789,
	5, 1050,
	-2, 1637,
	-1, 790,
	5, 1051,
	-2, 1696,
	-1, 791,
	5, 1052,
	-2, 1698,
	-1, 792,
	5, 1053,
	-2, 1708,
	-1, 793,
	5, 1054,
	-2, 1699,
	-1, 794,
	5, 1055,
	-2, 1700,
	-1, 795,
	5, 1056,
	-2, 1539,
	-1, 796,
	5, 1057,
	-2, 1739,
	-1, 797,
	5, 1058,
	-2, 1606,
	-1, 798,
	5, 1059,
	-2, 1644,
	-1, 799,
	5, 1060,
	-2, 1645,
	-1, 800,
	5, 1061,
	-2, 1610,
	-1, 801,
	5, 1062,
	422, 1519,
	-2, 1510,
	-1, 802,
	5, 1110,
	422, 1110,
	-2, 1774,
	-1, 807,
	422, 1520,
	-2, 1511,
	-1, 809,
	5, 1066,
	-2, 1772,
	-1, 810,
	5, 1067,
	-2, 1609,
	-1, 811,
	5, 1068,
	-2, 1611,
	-1, 812,
	5, 1069,
	-2, 1612,
	-1, 813,
	5, 1070,
	-2, 1613,
	-1, 814,
	5, 1071,
	-2, 1773,
	-1, 815,
	5, 1072,
	-2, 1785,
	-1, 816,
	5, 1073,
	-2, 1754,
	-1, 817,
	5, 1074,
	-2, 1783,
	-1, 818,
	5, 1075,
	-2, 1592,
	-1, 819,
	5, 1076,
	-2, 1593,
	-1, 820,
	5, 1090,
	-2, 1766,
	-1, 822,
	5, 1065,
	-2, 1762,
	-1, 823,
	5, 1065,
	-2, 1761,
	-1, 824,
	5, 1065,
	-2, 1778,
	-1, 825,
	5, 1082,
	-2, 1756,
	-1, 826,
	5, 1083,
	-2, 1541,
	-1, 827,
	5, 1100,
	-2, 1755,
	-1, 829,
	5, 1101,
	-2, 1569,
	-1, 830,
	5, 1102,
	-2, 1787,
	-1, 831,
	5, 1104,
	-2, 1788,
	-1, 832,
	5, 1106,
	-2, 1789,
	-1, 833,
	5, 1108,
	-2, 1729,
	-1, 834,
	5, 1034,
	-2, 1619,
	-1, 835,
	5, 1035,
	-2, 1620,
	-1, 855,
	5, 1098,
	-2, 1718,
	-1, 872,
	5, 1100,
	-2, 1758,
	-1, 873,
	5, 1100,
	-2, 1757,
	-1, 874,
	5, 1097,
	-2, 1793,
	-1, 935,
	422, 1519,
	-2, 1510,
	-1, 950,
	284, 1492,
	415, 1492,
	-2, 1491,
	-1, 1099,
	258, 909,
	-2, 725,
	-1, 1111,
	242, 1514,
	-2, 0,
	-1, 1154,
	1, 299,
	421, 299,
	425, 299,
	426, 299,
	-2, 883,
	-1, 1157,
	4, 1792,
	10, 1792,
	11, 1792,
	13, 1792,
	14, 1792,
	15, 1792,
	16, 1792,
	17, 1792,
	18, 1792,
	20, 1792,
	21, 1792,
	22, 1792,
	23, 1792,
	25, 1792,
	28, 1792,
	30, 1792,
	32, 1792,
	35, 1792,
	36, 1792,
	37, 1792,
	38, 1792,
	39, 1792,
	40, 1792,
	41, 1792,
	42, 1792,
	43, 1792,
	44, 1792,
	46, 1792,
	47, 1792,
	48, 1792,
	49, 1792,
	50, 1792,
	51, 1792,
	52, 1792,
	55, 1792,
	56, 1792,
	57, 1792,
	58, 1792,
	60, 1792,
	61, 1792,
	62, 1792,
	65, 1792,
	66, 1792,
	67, 1792,
	68, 1792,
	69, 1792,
	70, 1792,
	71, 1792,
	72, 1792,
	73, 1792,
	74, 1792,
	76, 1792,
	77, 1792,
	78, 1792,
	79, 1792,
	81, 1792,
	82, 1792,
	83, 1792,
	91, 1792,
	92, 1792,
	93, 1792,
	94, 1792,
	95, 1792,
	96, 1792,
	97, 1792,
	98, 1792,
	100, 1792,
	102, 1792,
	104, 1792,
	107, 1792,
	108, 1792,
	109, 1792,
	111, 1792,
	113, 1792,
	114, 1792,
	116, 1792,
	117, 1792,
	118, 1792,
	119, 1792,
	120, 1792,
	121, 1792,
	122, 1792,
	123, 1792,
	124, 1792,
	125, 1792,
	129, 1792,
	130, 1792,
	131, 1792,
	132, 1792,
	133, 1792,
	134, 1792,
	135, 1792,
	136, 1792,
	137, 1792,
	138, 1792,
	139, 1792,
	140, 1792,
	142, 1792,
	145, 1792,
	146, 1792,
	148, 1792,
	149, 1792,
	151, 1792,
	152, 1792,
	154, 1792,
	155, 1792,
	156, 1792,
	157, 1792,
	158, 1792,
	159, 1792,
	160, 1792,
	161, 1792,
	162, 1792,
	163, 1792,
	164, 1792,
	165, 1792,
	166, 1792,
	167, 1792,
	168, 1792,
	169, 1792,
	171, 1792,
	172, 1792,
	173, 1792,
	175, 1792,
	176, 1792,
	177, 1792,
	178, 1792,
	179, 1792,
	180, 1792,
	181, 1792,
	182, 1792,
	183, 1792,
	185, 1792,
	187, 1792,
	188, 1792,
	189, 1792,
	190, 1792,
	191, 1792,
	192, 1792,
	193, 1792,
	194, 1792,
	195, 1792,
	196, 1792,
	197, 1792,
	198, 1792,
	199, 1792,
	200, 1792,
	202, 1792,
	203, 1792,
	205, 1792,
	206, 1792,
	207, 1792,
	208, 1792,
	209, 1792,
	210, 1792,
	212, 1792,
	213, 1792,
	216, 1792,
	217, 1792,
	218, 1792,
	221, 1792,
	222, 1792,
	223, 1792,
	224, 1792,
	225, 1792,
	226, 1792,
	227, 1792,
	228, 1792,
	229, 1792,
	230, 1792,
	233, 1792,
	235, 1792,
	236, 1792,
	237, 1792,
	238, 1792,
	240, 1792,
	241, 1792,
	244, 1792,
	245, 1792,
	246, 1792,
	248, 1792,
	249, 1792,
	251, 1792,
	253, 1792,
	254, 1792,
	255, 1792,
	256, 1792,
	257, 1792,
	258, 1792,
	259, 1792,
	260, 1792,
	262, 1792,
	263, 1792,
	264, 1792,
	265, 1792,
	266, 1792,
	268, 1792,
	269, 1792,
	270, 1792,
	271, 1792,
	272, 1792,
	273, 1792,
	274, 1792,
	275, 1792,
	276, 1792,
	278, 1792,
	279, 1792,
	280, 1792,
	281, 1792,
	282, 1792,
	283, 1792,
	284, 1792,
	285, 1792,
	286, 1792,
	287, 1792,
	288, 1792,
	289, 1792,
	290, 1792,
	292, 1792,
	293, 1792,
	294, 1792,
	295, 1792,
	296, 1792,
	297, 1792,
	298, 1792,
	299, 1792,
	300, 1792,
	301, 1792,
	302, 1792,
	303, 1792,
	304, 1792,
	305, 1792,
	306, 1792,
	307, 1792,
	309, 1792,
	310, 1792,
	311, 1792,
	312, 1792,
	313, 1792,
	314, 1792,
	315, 1792,
	316, 1792,
	317, 1792,
	319, 1792,
	320, 1792,
	321, 1792,
	322, 1792,
	323, 1792,
	324, 1792,
	325, 1792,
	326, 1792,
	327, 1792,
	329, 1792,
	330, 1792,
	331, 1792,
	332, 1792,
	333, 1792,
	334, 1792,
	335, 1792,
	336, 1792,
	337, 1792,
	338, 1792,
	339, 1792,
	340, 1792,
	342, 1792,
	343, 1792,
	345, 1792,
	346, 1792,
	347, 1792,
	348, 1792,
	349, 1792,
	350, 1792,
	351, 1792,
	352, 1792,
	353, 1792,
	355, 1792,
	356, 1792,
	357, 1792,
	358, 1792,
	361, 1792,
	362, 1792,
	363, 1792,
	364, 1792,
	366, 1792,
	367, 1792,
	369, 1792,
	370, 1792,
	373, 1792,
	374, 1792,
	375, 1792,
	376, 1792,
	378, 1792,
	380, 1792,
	381, 1792,
	382, 1792,
	383, 1792,
	384, 1792,
	385, 1792,
	387, 1792,
	388, 1792,
	389, 1792,
	394, 1792,
	395, 1792,
	396, 1792,
	397, 1792,
	398, 1792,
	399, 1792,
	400, 1792,
	401, 1792,
	403, 1792,
	404, 1792,
	405, 1792,
	406, 1792,
	407, 1792,
	408, 1792,
	410, 1792,
	411, 1792,
	412, 1792,
	413, 1792,
	414, 1792,
	415, 1792,
	416, 1792,
	417, 1792,
	418, 1792,
	420, 1792,
	423, 1792,
	424, 1792,
	427, 1792,
	428, 1792,
	-2, 0,
	-1, 1176,
	144, 1703,
	359, 1703,
	405, 1703,
	424, 1703,
	-2, 0,
	-1, 1206,
	144, 1731,
	359, 1731,
	405, 1731,
	424, 1731,
	-2, 0,
	-1, 1207,
	190, 819,
	268, 819,
	273, 819,
	-2, 419,
	-1, 1278,
	1, 1746,
	421, 1746,
	423, 1746,
	424, 1746,
	425, 1746,
	426, 1746,
	-2, 577,
	-1, 1279,
	1, 1701,
	421, 1701,
	423, 1701,
	424, 1701,
	425, 1701,
	426, 1701,
	-2, 578,
	-1, 1289,
	128, 923,
	211, 923,
	239, 923,
	-2, 881,
	-1, 1379,
	115, 885,
	128, 885,
	184, 885,
	211, 885,
	239, 885,
	247, 885,
	371, 885,
	-2, 1265,
	-1, 1431,
	423, 1397,
	-2, 0,
	-1, 1435,
	190, 819,
	268, 819,
	273, 819,
	-2, 814,
	-1, 1469,
	115, 885,
	128, 885,
	184, 885,
	211, 885,
	239, 885,
	247, 885,
	371, 885,
	-2, 993,
	-1, 1690,
	190, 819,
	268, 819,
	273, 819,
	-2, 421,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1145,
	-1, 1791,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1146,
	-1, 1792,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1147,
	-1, 1793,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1148,
	-1, 1794,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1149,
	-1, 1795,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1150,
	-1, 1796,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1151,
	-1, 1797,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1152,
	-1, 1809,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1164,
	-1, 1810,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1165,
	-1, 1811,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	196, 0,
	197, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1166,
	-1, 1814,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1171,
	-1, 1820,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1175,
	-1, 1822,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1183,
	-1, 1823,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1184,
	-1, 1824,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1185,
	-1, 1825,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1186,
	-1, 1913,
	5, 1062,
	144, 1408,
	422, 1519,
	-2, 1510,
	-1, 1914,
	144, 1409,
	-2, 1750,
	-1, 1915,
	144, 1410,
	-2, 1634,
	-1, 1916,
	144, 1411,
	-2, 1570,
	-1, 1917,
	144, 1412,
	-2, 1601,
	-1, 1918,
	144, 1413,
	-2, 1633,
	-1, 1919,
	144, 1414,
	-2, 1695,
	-1, 1988,
	1, 994,
	81, 994,
	115, 994,
	128, 994,
	145, 994,
	150, 994,
	153, 994,
	175, 994,
	184, 994,
	193, 994,
	207, 994,
	211, 994,
	226, 994,
	239, 994,
	242, 994,
	247, 994,
	291, 994,
	293, 994,
	371, 994,
	379, 994,
	391, 994,
	392, 994,
	402, 994,
	421, 994,
	423, 994,
	425, 994,
	426, 994,
	427, 994,
	-2, 993,
	-1, 1993,
	422, 1496,
	-2, 1508,
	-1, 2077,
	423, 1467,
	427, 1467,
	-2, 1483,
	-1, 2213,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1173,
	-1, 2214,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1177,
	-1, 2220,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1179,
	-1, 2456,
	258, 909,
	-2, 725,
	-1, 2527,
	190, 819,
	268, 819,
	273, 819,
	-2, 418,
	-1, 2545,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1181,
	-1, 2552,
	188, 0,
	189, 0,
	233, 0,
	-2, 1200,
	-1, 2613,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1230,
	-1, 2614,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1231,
	-1, 2615,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1232,
	-1, 2619,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1236,
	-1, 2620,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1237,
	-1, 2621,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1238,
	-1, 2663,
	422, 1497,
	-2, 1509,
	-1, 2779,
	188, 0,
	189, 0,
	233, 0,
	-2, 1201,
	-1, 2782,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1204,
	-1, 2783,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1206,
	-1, 2926,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1205,
	-1, 2927,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	163, 0,
	164, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1207,
	-1, 2937,
	188, 0,
	-2, 1239,
	-1, 3024,
	188, 0,
	-2, 1240,
	-1, 3120,
	38, 0,
	163, 0,
	210, 0,
	323, 0,
	400, 0,
	408, 0,
	-2, 1753,
}

const sqlPrivate = 57344

const sqlLast = 61100

var sqlAct = [...]int{

	807, 2708, 1948, 3119, 3184, 3129, 2880, 2110, 3097, 3099,
	2965, 3084, 3130, 3096, 3131, 2118, 1083, 2954, 2583, 2916,
	1608, 3028, 2895, 2726, 1777, 2851, 954, 2721, 2206, 2836,
	1614, 1980, 2672, 1057, 1464, 2241, 1144, 3118, 2239, 1292,
	2941, 210, 725, 1837, 2468, 2731, 499, 2479, 2673, 2075,
	2466, 2107, 2359, 499, 2370, 970, 1105, 2674, 1462, 1140,
	499, 2321, 593, 499, 499, 2377, 499, 210, 2814, 499,
	499, 2474, 2145, 2079, 2335, 2143, 499, 2119, 1443, 1558,
	1541, 964, 1555, 1567, 499, 1559, 1570, 779, 2078, 1981,
	2005, 2636, 2346, 947, 1377, 2060, 3029, 1582, 550, 494,
	1774, 1976, 2320, 1501, 1866, 1849, 1769, 1387, 2202, 733,
	129, 1435, 1715, 546, 2478, 2437, 1524, 1518, 1556, 1480,
	1945, 803, 1996, 1983, 1482, 1834, 1877, 2034, 2881, 1444,
	1209, 1399, 2061, 2033, 1423, 1472, 1860, 1127, 585, 928,
	956, 1155, 2076, 1137, 1552, 923, 2112, 1147, 2082, 496,
	211, 73, 212, 495, 615, 902, 1968, 1368, 1909, 1293,
	1453, 920, 635, 1291, 206, 764, 1714, 499, 499, 1850,
	129, 1953, 724, 1615, 135, 1153, 629, 588, 1576, 1124,
	1493, 1061, 925, 543, 1434, 1297, 662, 136, 900, 600,
	479, 1108, 2652, 2237, 482, 2653, 2111, 1463, 2540, 499,
	499, 499, 959, 499, 499, 973, 973, 608, 1609, 1584,
	1584, 1584, 729, 2517, 499, 499, 479, 2062, 3211, 3205,
	482, 3204, 1962, 1962, 3181, 1962, 3180, 1979, 2850, 3177,
	2850, 602, 2485, 1533, 3149, 3148, 3145, 3142, 1962, 1962,
	3146, 3143, 1596, 3139, 1308, 1309, 3116, 1533, 2486, 3115,
	1533, 3114, 739, 1533, 3113, 1596, 3079, 3065, 1596, 729,
	2156, 1533, 934, 967, 3059, 2450, 3057, 1955, 2850, 1311,
	2850, 1082, 3055, 3053, 3026, 2994, 2850, 2850, 2156, 1533,
	2992, 1527, 2983, 2982, 2850, 129, 1533, 1533, 2975, 730,
	903, 903, 1533, 2974, 2947, 1064, 1310, 2850, 1533, 2928,
	950, 2909, 2875, 2156, 717, 2500, 1962, 2871, 2849, 2062,
	917, 1962, 2850, 1308, 1309, 2781, 2745, 716, 2737, 2156,
	2738, 1962, 2738, 2658, 2648, 734, 2642, 2659, 2649, 2576,
	1962, 2507, 2332, 1533, 2639, 2442, 1962, 2288, 1311, 2287,
	2283, 1962, 2268, 1962, 1962, 2256, 2269, 2141, 2174, 952,
	2155, 2257, 1962, 2138, 2156, 1863, 904, 1601, 1192, 765,
	940, 944, 949, 479, 1063, 1310, 1062, 482, 3080, 1179,
	806, 1308, 1309, 1316, 1341, 1342, 1343, 1351, 1352, 1353,
	2135, 1533, 2071, 1961, 1962, 1600, 1533, 1962, 3012, 1601,
	2293, 2294, 1962, 2311, 2312, 2313, 1311, 1596, 906, 1357,
	907, 1338, 1339, 1340, 1533, 2639, 1954, 1693, 2777, 172,
	2049, 1994, 2500, 2092, 2442, 1864, 2205, 2185, 1532, 1439,
	1060, 175, 2487, 1310, 1175, 1174, 1173, 805, 1172, 1081,
	172, 1330, 971, 1058, 762, 2293, 2294, 1180, 1327, 2240,
	1171, 2488, 1316, 1170, 1169, 174, 1585, 1585, 1585, 1168,
	2308, 1331, 1167, 2293, 2294, 1166, 1165, 1164, 1163, 1162,
	1161, 1160, 1159, 908, 905, 723, 174, 2293, 2294, 722,
	1338, 1339, 1340, 1712, 721, 720, 719, 715, 714, 713,
	1865, 1862, 712, 711, 710, 173, 709, 708, 707, 706,
	1333, 1334, 1335, 1336, 166, 2308, 1180, 705, 701, 700,
	1316, 699, 167, 660, 659, 1076, 173, 658, 499, 499,
	657, 499, 959, 959, 499, 499, 499, 656, 499, 2299,
	1331, 499, 655, 137, 1348, 1358, 2829, 499, 1338, 1339,
	1340, 2485, 654, 653, 1332, 1308, 1309, 499, 499, 499,
	499, 499, 959, 959, 137, 931, 2100, 1378, 1533, 959,
	1954, 652, 651, 650, 649, 648, 647, 1325, 1326, 646,
	1311, 645, 644, 643, 2299, 642, 1867, 641, 2314, 640,
	639, 1346, 624, 1308, 1309, 623, 622, 172, 1331, 1148,
	621, 499, 2299, 499, 1592, 1583, 1753, 1310, 620, 619,
	534, 533, 505, 504, 959, 499, 2299, 2309, 1311, 1113,
	503, 485, 930, 1332, 1095, 484, 483, 196, 195, 932,
	1098, 828, 194, 174, 1109, 1109, 193, 192, 499, 191,
	190, 189, 1141, 188, 187, 1310, 186, 185, 184, 499,
	183, 182, 181, 1330, 180, 179, 178, 177, 176, 1987,
	2793, 1180, 2309, 2739, 1337, 1177, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 173, 2656, 2373, 2262, 1861, 3136, 1099,
	1102, 1332, 166, 1075, 1316, 2252, 2194, 959, 2072, 2065,
	167, 1900, 1718, 1479, 2309, 1131, 1134, 2775, 1898, 1465,
	2310, 2161, 1393, 1896, 1349, 1611, 1389, 499, 1126, 1156,
	1223, 137, 1333, 1334, 1335, 1336, 1085, 1894, 1066, 1892,
	730, 1304, 1316, 499, 2101, 3117, 3019, 1110, 2995, 2964,
	2052, 547, 1070, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 2914, 2910, 2813, 2310, 732, 2903, 3015, 2812,
	1338, 1339, 1340, 2800, 578, 3013, 549, 2799, 2798, 2797,
	2791, 1182, 1207, 2790, 2789, 40, 1217, 2788, 2760, 1610,
	1221, 2758, 1289, 2662, 2633, 2115, 2632, 2310, 2631, 1290,
	44, 1347, 2293, 2294, 1322, 1323, 1329, 1328, 1324, 1350,
	2560, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	1331, 2556, 2445, 2305, 2306, 2307, 2441, 2368, 2328, 577,
	2304, 2302, 2303, 2295, 2296, 2297, 2298, 2300, 2301, 2319,
	2292, 2289, 2286, 916, 2284, 1204, 2267, 2246, 1390, 2245,
	1388, 172, 2238, 172, 1231, 2142, 1988, 1871, 579, 1304,
	1376, 1389, 1564, 1303, 1538, 3209, 59, 581, 1536, 3192,
	3191, 60, 1084, 2585, 3109, 2304, 2302, 2303, 2295, 2296,
	2297, 2298, 2300, 2301, 3108, 3103, 1337, 174, 3050, 174,
	1224, 3049, 3046, 3045, 3040, 2099, 2295, 2296, 2297, 2298,
	2300, 2301, 3037, 1332, 1288, 2511, 63, 2304, 2302, 2303,
	2295, 2296, 2297, 2298, 2300, 2301, 3011, 3010, 1840, 1713,
	2035, 2960, 2939, 2022, 1308, 1309, 2893, 173, 2201, 173,
	2889, 2299, 2885, 2883, 2828, 2811, 166, 499, 166, 2715,
	2714, 2712, 499, 2690, 167, 2689, 167, 2902, 717, 1311,
	2679, 2678, 2644, 1300, 1301, 2551, 2513, 2501, 1450, 2460,
	1441, 716, 1305, 2426, 730, 137, 2409, 137, 499, 2387,
	2293, 2294, 2386, 2331, 2266, 2265, 1310, 2251, 1312, 1313,
	1314, 1315, 1317, 1318, 1330, 1846, 2229, 1220, 1400, 1397,
	2163, 1991, 1973, 1960, 1890, 1401, 1402, 1372, 1547, 1478,
	1473, 1442, 1403, 2352, 172, 1433, 1432, 1431, 64, 2309,
	1430, 1429, 1428, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 1427, 1426, 1308, 1309, 172, 1425, 2549, 1447,
	1448, 1422, 1421, 1420, 1308, 1309, 138, 66, 1419, 67,
	174, 1418, 1417, 1333, 1334, 1335, 1336, 1416, 1424, 1311,
	934, 1415, 934, 1316, 1460, 2293, 2294, 172, 172, 1311,
	1414, 1413, 174, 1412, 1411, 903, 1410, 1612, 580, 129,
	1373, 108, 172, 1461, 2387, 1371, 1310, 1203, 1187, 1158,
	173, 1338, 1339, 1340, 1152, 3031, 1310, 2913, 2785, 166,
	2757, 1438, 2310, 174, 174, 1308, 1309, 167, 2651, 2299,
	959, 499, 173, 2647, 2255, 1974, 1500, 973, 174, 1488,
	1470, 166, 1436, 1390, 2509, 1369, 730, 2158, 2114, 167,
	1311, 1474, 2293, 2294, 2469, 499, 973, 499, 499, 2173,
	1440, 1331, 1899, 173, 173, 499, 1525, 1712, 2908, 1897,
	137, 1712, 166, 166, 1895, 1467, 1548, 1310, 173, 1286,
	167, 167, 499, 1316, 2293, 2294, 2062, 166, 1893, 499,
	1891, 499, 1563, 499, 1712, 167, 3016, 499, 2654, 2963,
	1417, 548, 137, 3014, 1417, 2172, 1494, 2037, 2503, 2502,
	1465, 1338, 1339, 1340, 2299, 763, 137, 2988, 1520, 1198,
	1407, 1609, 1405, 2430, 1395, 1599, 1408, 1337, 1406, 959,
	2425, 2420, 1218, 2302, 2303, 2295, 2296, 2297, 2298, 2300,
	2301, 2408, 2273, 2272, 1332, 1546, 2271, 499, 959, 210,
	499, 499, 959, 2270, 1316, 2211, 1686, 1216, 1699, 959,
	2688, 1331, 210, 499, 898, 1560, 499, 499, 2519, 1573,
	2419, 1514, 499, 2942, 2111, 2587, 1688, 1530, 1219, 1544,
	479, 1063, 1565, 1062, 482, 3137, 2260, 1878, 1404, 3147,
	3144, 2481, 2309, 915, 973, 1676, 2668, 3093, 899, 1587,
	2722, 2149, 1589, 959, 959, 1591, 499, 1375, 523, 1594,
	542, 499, 1531, 2299, 512, 201, 210, 499, 1863, 499,
	1580, 499, 3170, 499, 2529, 499, 2863, 2175, 3208, 3064,
	1605, 1228, 2007, 3171, 2987, 499, 3138, 499, 894, 2986,
	892, 1262, 2985, 1678, 1332, 2984, 499, 1680, 202, 2510,
	1126, 743, 2702, 2697, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 931, 1534, 931, 1744, 1483, 1575, 1156,
	1484, 1578, 1931, 1742, 890, 2310, 888, 499, 1864, 728,
	2696, 973, 524, 1542, 2665, 885, 2664, 2250, 1690, 2249,
	1495, 2309, 2248, 541, 2247, 1603, 2215, 511, 479, 1607,
	2140, 2055, 482, 1756, 1602, 2297, 2298, 2300, 2301, 2048,
	2044, 479, 1700, 1604, 1711, 482, 2010, 1492, 2025, 1821,
	930, 1261, 930, 1204, 1437, 203, 1677, 932, 1606, 932,
	1059, 2879, 1703, 1702, 1687, 1712, 1709, 1889, 1888, 1496,
	1497, 1887, 1998, 1865, 1862, 1851, 1852, 1886, 727, 1779,
	1722, 1723, 1704, 2693, 1485, 1752, 1716, 1312, 1313, 1314,
	1315, 1317, 1318, 1851, 973, 479, 1487, 1998, 1724, 482,
	1226, 3063, 1318, 2108, 2310, 1750, 3018, 1087, 1997, 2532,
	1733, 2059, 1751, 1720, 2707, 1836, 2070, 2303, 2295, 2296,
	2297, 2298, 2300, 2301, 1194, 1908, 703, 2017, 1912, 1912,
	1922, 1924, 1929, 1474, 1851, 2967, 613, 2178, 499, 3111,
	499, 729, 205, 614, 2534, 1952, 1307, 1489, 2016, 2180,
	2533, 1719, 1755, 614, 1754, 2681, 204, 1706, 197, 1867,
	1314, 1315, 1317, 1318, 973, 499, 2159, 1836, 1483, 1773,
	2009, 1484, 717, 1727, 499, 717, 717, 499, 3187, 2181,
	973, 1992, 1775, 1776, 499, 1765, 1579, 2041, 1766, 1767,
	2301, 2179, 499, 2191, 200, 1885, 1878, 1975, 1875, 1867,
	499, 1985, 1986, 1713, 2035, 1989, 1285, 1713, 2035, 1202,
	526, 525, 1260, 499, 1273, 1195, 959, 2295, 2296, 2297,
	2298, 2300, 2301, 730, 1197, 1847, 1257, 499, 973, 198,
	1713, 2035, 1490, 499, 499, 3170, 730, 1236, 1778, 3133,
	730, 2003, 934, 1646, 2203, 2204, 2859, 1621, 499, 202,
	1861, 499, 3162, 1844, 499, 1485, 2528, 1999, 1842, 934,
	1873, 2570, 201, 903, 2476, 726, 1516, 1487, 2416, 3194,
	1584, 1707, 199, 499, 1258, 2008, 1708, 2411, 2477, 1749,
	499, 540, 499, 1513, 499, 1920, 2056, 499, 2226, 499,
	1965, 499, 1949, 499, 499, 1950, 499, 959, 959, 959,
	1498, 1940, 959, 3042, 2027, 2003, 2042, 2011, 2013, 2224,
	499, 499, 950, 499, 1970, 1971, 1966, 1470, 1489, 1958,
	1959, 1879, 2530, 730, 2139, 896, 203, 2476, 895, 2057,
	886, 2089, 2002, 1398, 2133, 2134, 2698, 2122, 1227, 2990,
	2095, 2036, 2038, 2039, 2040, 2045, 2918, 1867, 1483, 535,
	3134, 1484, 2129, 2019, 3185, 1743, 2105, 1486, 539, 2399,
	2027, 2026, 1741, 2046, 886, 2682, 887, 2691, 1621, 1621,
	2003, 2521, 3077, 2148, 2043, 886, 2028, 2131, 2857, 1225,
	499, 691, 479, 1063, 1490, 2063, 482, 1086, 1691, 1490,
	1502, 3161, 1995, 804, 2398, 2968, 2567, 2164, 2093, 1208,
	1521, 738, 1270, 1490, 1870, 2124, 2221, 1993, 1506, 2922,
	129, 2429, 2151, 205, 2136, 3186, 691, 2222, 3135, 973,
	2227, 499, 2217, 129, 2126, 2117, 2127, 204, 2128, 2933,
	2405, 499, 1517, 499, 480, 1485, 738, 2130, 1366, 497,
	540, 2917, 1156, 2137, 2132, 3188, 519, 1487, 2524, 1503,
	499, 499, 499, 545, 499, 2150, 589, 596, 2160, 545,
	480, 2568, 589, 611, 1306, 200, 1196, 2401, 704, 618,
	692, 1713, 1710, 499, 1835, 2264, 2168, 638, 2169, 2162,
	1271, 1969, 542, 2762, 1984, 2858, 1213, 2403, 729, 2747,
	1193, 3075, 1726, 1401, 1402, 2769, 3132, 537, 1489, 1645,
	198, 1244, 3169, 1818, 1237, 692, 3195, 1585, 1424, 2165,
	2196, 2189, 736, 2190, 691, 3160, 1507, 539, 2167, 3076,
	1296, 3167, 3000, 2176, 2438, 931, 2402, 1201, 1486, 2892,
	2464, 2919, 538, 201, 738, 2523, 1452, 2103, 2923, 1490,
	1550, 1449, 931, 199, 1191, 1272, 1178, 1867, 2223, 2520,
	502, 2434, 1238, 1832, 1529, 1235, 2225, 1843, 2243, 2244,
	545, 545, 1621, 2218, 1214, 541, 1523, 2622, 933, 1215,
	737, 499, 2253, 2977, 1830, 536, 1213, 1508, 1509, 2809,
	2976, 3034, 930, 1490, 1522, 3200, 1504, 1213, 2200, 932,
	2958, 532, 497, 497, 497, 1295, 965, 497, 2862, 930,
	1456, 2667, 693, 692, 2465, 2861, 932, 480, 1065, 2383,
	1481, 1519, 1505, 527, 2379, 2198, 2104, 3085, 1698, 1574,
	1645, 1645, 2522, 1562, 1366, 1561, 1557, 1549, 1816, 1819,
	1459, 2566, 2360, 1496, 1497, 1747, 1694, 693, 2727, 2896,
	2959, 542, 1295, 2389, 2216, 2388, 2186, 1761, 1454, 2209,
	2330, 2254, 1721, 606, 1214, 2091, 537, 973, 2074, 1215,
	2073, 2333, 1457, 2342, 1452, 1214, 2340, 2341, 2349, 599,
	1215, 1826, 1964, 499, 1456, 1815, 499, 1963, 1294, 1827,
	1696, 1455, 1828, 499, 727, 1833, 499, 499, 973, 1510,
	2709, 538, 730, 2623, 1697, 694, 499, 499, 499, 2624,
	2363, 2443, 499, 2259, 1459, 499, 1296, 2356, 1486, 2355,
	1572, 2810, 499, 499, 499, 499, 499, 2364, 2365, 2361,
	3199, 1111, 1967, 2367, 541, 1294, 499, 486, 1456, 1123,
	694, 2372, 695, 499, 536, 693, 1457, 2860, 1112, 1762,
	3174, 1245, 3, 934, 2882, 499, 959, 1511, 1458, 499,
	2433, 934, 934, 2439, 2376, 934, 973, 1121, 1459, 2003,
	499, 2956, 2351, 2325, 2326, 2327, 973, 695, 2354, 2390,
	2385, 2393, 2357, 973, 2815, 2380, 1454, 2029, 2391, 934,
	2395, 2396, 2410, 583, 2334, 499, 2637, 499, 1817, 499,
	1457, 2337, 959, 499, 2957, 499, 959, 959, 959, 2344,
	2345, 3176, 2847, 2350, 499, 1883, 2362, 2938, 2808, 1455,
	499, 2451, 2891, 1829, 1645, 499, 2706, 499, 2322, 2374,
	1546, 1831, 1458, 1488, 499, 2348, 735, 2550, 694, 2844,
	2421, 2371, 2496, 576, 36, 1283, 1267, 1265, 2417, 2404,
	2285, 499, 604, 605, 1098, 2228, 2472, 1255, 1488, 959,
	959, 528, 2166, 2471, 2412, 575, 35, 2427, 597, 598,
	2054, 2415, 2024, 2499, 1540, 695, 2422, 499, 2444, 2845,
	1477, 2413, 2480, 2447, 2428, 2414, 1458, 2384, 1525, 1284,
	1188, 2480, 574, 32, 2339, 1525, 2515, 1253, 2454, 2483,
	2440, 2470, 2323, 2418, 1098, 499, 573, 79, 2193, 529,
	2192, 497, 1093, 2188, 497, 2030, 2031, 497, 497, 497,
	499, 965, 2890, 1122, 1116, 2366, 487, 488, 938, 2170,
	497, 2497, 1882, 1730, 2490, 2491, 2492, 1679, 2493, 2494,
	497, 497, 497, 497, 965, 530, 1740, 531, 2489, 2452,
	2482, 1120, 1251, 2455, 2456, 2457, 1409, 2516, 129, 572,
	78, 1094, 2495, 973, 3128, 1249, 2704, 1528, 2514, 1247,
	2553, 2578, 2347, 973, 3082, 499, 730, 582, 2833, 569,
	23, 570, 24, 2725, 638, 2686, 596, 1282, 1266, 1264,
	1241, 2562, 2563, 2564, 884, 2525, 2526, 2527, 497, 1254,
	2684, 2666, 1119, 2436, 490, 489, 2505, 2506, 2531, 2463,
	2436, 2840, 2588, 2109, 2841, 568, 30, 2097, 2536, 36,
	2096, 1199, 2538, 567, 21, 2094, 2088, 1598, 565, 20,
	566, 19, 638, 555, 15, 1597, 931, 1595, 1593, 1252,
	2508, 35, 2634, 1618, 931, 931, 1590, 2843, 931, 556,
	16, 491, 492, 2558, 564, 57, 1588, 2846, 1586, 1539,
	2467, 1537, 1526, 2569, 2571, 2572, 499, 1515, 32, 563,
	56, 2584, 931, 1621, 2589, 2577, 554, 55, 499, 562,
	12, 1512, 79, 3004, 973, 1739, 2591, 553, 50, 2655,
	497, 1499, 2626, 930, 1250, 1491, 2207, 2650, 560, 47,
	932, 930, 930, 2599, 2601, 930, 497, 1248, 932, 932,
	3171, 1246, 932, 561, 48, 552, 49, 559, 7, 558,
	6, 2912, 2695, 2911, 912, 557, 38, 551, 37, 930,
	1717, 3006, 1240, 2015, 2627, 78, 932, 889, 891, 2701,
	2635, 2638, 2640, 2641, 1118, 2736, 913, 934, 2643, 2877,
	2058, 129, 2842, 499, 499, 23, 499, 24, 1998, 1775,
	2592, 499, 1998, 2705, 1618, 1618, 2208, 2657, 1298, 2014,
	2053, 3044, 2047, 2012, 973, 499, 2716, 1775, 2602, 959,
	2023, 1684, 1685, 2171, 1239, 934, 2670, 584, 2852, 3021,
	2575, 30, 1308, 1309, 2816, 2646, 499, 2032, 2018, 21,
	2581, 2685, 2740, 2687, 20, 2729, 19, 1302, 2630, 15,
	2003, 499, 499, 959, 959, 959, 2050, 499, 499, 2020,
	3081, 2732, 2728, 2888, 2661, 16, 1621, 914, 499, 2027,
	57, 973, 499, 499, 973, 499, 2753, 2675, 2692, 2713,
	2711, 2710, 2116, 499, 1310, 56, 2719, 2718, 2098, 1299,
	2087, 973, 55, 2122, 1951, 12, 607, 2733, 1689, 1613,
	1308, 1309, 3183, 50, 2498, 2734, 2730, 2766, 3198, 1378,
	2784, 2742, 2756, 2741, 47, 2723, 2293, 2294, 2771, 2754,
	2755, 1308, 1309, 2748, 934, 1311, 2763, 2749, 1764, 48,
	2573, 49, 2780, 7, 2767, 6, 499, 2183, 2182, 1621,
	618, 38, 1230, 37, 1451, 545, 2512, 1229, 2761, 2183,
	2184, 2663, 1310, 2764, 1884, 1859, 1269, 2786, 2759, 1268,
	2565, 1376, 1374, 2950, 2906, 1645, 1468, 2744, 933, 2720,
	2461, 497, 2337, 2459, 2102, 1566, 1281, 1280, 1263, 1259,
	1256, 1242, 1200, 1692, 897, 1621, 1621, 702, 2966, 1275,
	2683, 3092, 2772, 689, 2397, 499, 1729, 1243, 1618, 1551,
	2750, 2751, 2752, 1621, 1621, 973, 1731, 973, 2353, 1972,
	3074, 2807, 2794, 2263, 3027, 499, 499, 499, 2932, 1881,
	1394, 53, 773, 854, 2834, 2669, 2081, 2080, 976, 1701,
	499, 778, 1911, 1617, 1621, 499, 781, 499, 1619, 784,
	499, 499, 499, 499, 499, 783, 782, 499, 499, 959,
	1620, 2853, 1396, 973, 780, 2823, 2821, 959, 1616, 2818,
	2819, 2855, 1932, 2090, 2827, 499, 499, 2120, 680, 1705,
	931, 1841, 2830, 1876, 2003, 2820, 973, 934, 2258, 959,
	1391, 2831, 754, 775, 741, 1874, 1186, 753, 2358, 499,
	2832, 2475, 2864, 2878, 2822, 2884, 2660, 934, 971, 2901,
	2869, 1058, 2865, 2872, 480, 2898, 2824, 1760, 931, 2870,
	2856, 2199, 1757, 516, 2290, 2887, 934, 1151, 1645, 1937,
	2866, 2867, 2897, 2003, 2921, 2817, 2472, 930, 1065, 1930,
	497, 1545, 2899, 2907, 932, 1926, 2905, 1287, 497, 1367,
	2121, 2873, 1222, 757, 973, 2886, 2480, 1098, 1839, 2371,
	934, 2924, 1383, 2900, 2876, 1571, 2233, 2369, 2484, 2157,
	1768, 911, 497, 910, 497, 930, 497, 909, 2675, 2944,
	545, 3098, 932, 3095, 2920, 1695, 2929, 2894, 2177, 1360,
	973, 769, 2338, 2446, 499, 1091, 499, 3043, 973, 499,
	1359, 1645, 2940, 893, 3036, 1212, 2874, 499, 1211, 1210,
	2382, 3193, 2675, 973, 2680, 171, 2948, 931, 168, 2945,
	2946, 170, 2953, 169, 2432, 82, 34, 33, 107, 106,
	638, 105, 480, 1065, 589, 104, 103, 2971, 102, 101,
	2970, 100, 2972, 99, 2826, 480, 1065, 1645, 1645, 965,
	497, 2003, 98, 499, 97, 638, 96, 95, 959, 2969,
	94, 2952, 93, 499, 92, 1645, 1645, 2951, 91, 90,
	749, 1621, 89, 88, 930, 87, 2991, 86, 2993, 85,
	2949, 932, 2997, 973, 3002, 84, 2999, 634, 631, 638,
	81, 3009, 80, 31, 497, 26, 1645, 111, 934, 480,
	497, 3001, 497, 499, 497, 112, 497, 2732, 497, 499,
	3003, 25, 3008, 3007, 77, 76, 3017, 499, 1745, 29,
	1746, 18, 2980, 2981, 11, 17, 22, 3039, 2472, 497,
	3025, 934, 134, 934, 3033, 3020, 133, 934, 132, 131,
	3030, 934, 3032, 3005, 130, 499, 499, 14, 13, 126,
	2675, 499, 128, 127, 125, 124, 123, 3056, 122, 3041,
	638, 499, 959, 3054, 121, 10, 8, 499, 110, 9,
	931, 959, 959, 2915, 2518, 499, 70, 499, 71, 499,
	27, 2930, 43, 2675, 3078, 2675, 3058, 3062, 3061, 2675,
	931, 42, 3070, 2675, 41, 109, 162, 2979, 499, 161,
	160, 499, 3047, 499, 159, 973, 3088, 3068, 3069, 931,
	155, 3048, 3101, 3102, 154, 3100, 3104, 2930, 158, 156,
	157, 153, 120, 3106, 164, 1778, 3105, 930, 3107, 3094,
	3090, 163, 3066, 3112, 932, 151, 148, 147, 150, 3067,
	1778, 499, 1067, 931, 1071, 3110, 1077, 930, 152, 149,
	146, 165, 119, 118, 932, 3071, 117, 3072, 116, 115,
	3127, 114, 3126, 5, 499, 2, 930, 3152, 3140, 3153,
	1, 3151, 499, 932, 3124, 3125, 1932, 1932, 0, 0,
	0, 3089, 0, 0, 3159, 0, 0, 3156, 0, 499,
	0, 618, 0, 545, 3157, 3158, 0, 2230, 2231, 0,
	930, 3154, 3155, 0, 3168, 3166, 3165, 932, 933, 1618,
	1058, 0, 3172, 0, 0, 3100, 3175, 3173, 545, 3178,
	3179, 0, 0, 1645, 3182, 933, 0, 545, 0, 2122,
	497, 1621, 0, 0, 0, 0, 3189, 2006, 3190, 0,
	0, 0, 0, 0, 3150, 497, 0, 3197, 0, 0,
	0, 3196, 1184, 497, 3201, 3202, 934, 934, 3203, 1189,
	0, 0, 0, 0, 0, 0, 497, 0, 0, 0,
	3206, 3207, 3210, 509, 0, 1932, 1932, 1932, 3212, 0,
	497, 931, 0, 1621, 0, 0, 480, 2064, 741, 0,
	0, 0, 741, 0, 0, 0, 2316, 2317, 2318, 0,
	0, 2077, 0, 0, 1065, 0, 0, 497, 2675, 2675,
	0, 517, 0, 0, 931, 0, 931, 0, 0, 0,
	931, 0, 0, 0, 931, 515, 1571, 0, 0, 0,
	0, 0, 1778, 2006, 0, 545, 0, 497, 930, 0,
	497, 0, 497, 0, 497, 932, 497, 497, 0, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1621,
	0, 0, 1618, 2146, 596, 0, 2006, 0, 0, 0,
	0, 930, 0, 930, 0, 0, 0, 930, 932, 0,
	932, 930, 0, 0, 932, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1361,
	1362, 1363, 1364, 1365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 571, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 1309, 1380, 0, 0,
	0, 0, 1392, 589, 0, 1618, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 506,
	0, 0, 0, 0, 497, 0, 0, 1310, 0, 0,
	0, 1618, 1618, 1645, 1065, 1330, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1618,
	1618, 0, 500, 497, 497, 497, 0, 497, 0, 0,
	0, 0, 512, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 509, 0, 0, 0, 497, 510, 0, 2544,
	1618, 0, 0, 0, 0, 1645, 0, 0, 0, 931,
	931, 0, 0, 209, 1333, 1334, 1335, 1336, 0, 0,
	508, 0, 0, 0, 1316, 0, 0, 0, 1932, 1932,
	517, 0, 507, 0, 1445, 1445, 1445, 0, 808, 209,
	0, 0, 0, 0, 515, 0, 0, 0, 0, 2546,
	2547, 0, 1338, 1339, 1340, 514, 0, 0, 0, 28,
	518, 0, 0, 0, 0, 511, 930, 930, 0, 0,
	0, 0, 0, 932, 932, 513, 0, 0, 0, 0,
	0, 1645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 1932, 1932, 1932,
	1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932, 1932,
	1932, 1932, 1932, 1932, 1932, 1932, 0, 1932, 2603, 2604,
	2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614,
	2615, 2616, 2617, 2618, 2619, 2620, 2621, 0, 2625, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 0, 0, 960, 0, 0, 974, 974, 933,
	0, 0, 0, 0, 0, 1332, 0, 933, 933, 0,
	0, 933, 0, 0, 0, 0, 545, 0, 0, 545,
	0, 1308, 1309, 0, 0, 0, 545, 0, 0, 545,
	545, 0, 0, 1381, 0, 1468, 0, 1386, 0, 497,
	2006, 2378, 1308, 1309, 0, 2006, 1311, 1618, 2378, 0,
	0, 512, 0, 0, 0, 2006, 2378, 2006, 2378, 2378,
	961, 0, 0, 975, 975, 0, 510, 1311, 0, 497,
	0, 0, 0, 1310, 0, 0, 1545, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 497, 508,
	0, 0, 965, 0, 1310, 0, 0, 0, 0, 0,
	0, 507, 0, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 514, 2543, 0, 0, 1571, 518,
	1571, 0, 497, 0, 511, 0, 497, 0, 497, 0,
	1333, 1334, 1335, 1336, 513, 2847, 0, 497, 0, 0,
	1316, 0, 0, 965, 0, 0, 0, 0, 2006, 0,
	545, 0, 0, 741, 741, 0, 0, 2006, 0, 0,
	0, 1316, 2844, 0, 0, 2837, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 1065, 0, 0, 0, 2835, 0,
	0, 0, 1069, 2839, 1074, 0, 1080, 0, 0, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 2845, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2535, 1758,
	2838, 1763, 0, 0, 0, 0, 0, 1770, 0, 1331,
	0, 0, 0, 497, 0, 0, 0, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 0, 1820, 1337, 1822, 1823, 1824, 1825, 0,
	0, 0, 1185, 0, 960, 960, 0, 1618, 2586, 1190,
	0, 1332, 0, 0, 1848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1380,
	0, 0, 1332, 1872, 960, 960, 0, 0, 0, 0,
	0, 960, 0, 0, 2840, 0, 0, 2841, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1618,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 0, 0, 0,
	961, 961, 0, 0, 1928, 0, 1939, 1941, 1946, 0,
	2843, 774, 74, 0, 926, 0, 960, 0, 0, 0,
	2846, 0, 0, 933, 0, 0, 0, 0, 0, 545,
	961, 961, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 545, 0, 0, 1308, 1309, 0, 0, 0, 0,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	493, 2677, 0, 0, 0, 1618, 0, 0, 0, 1311,
	1932, 0, 74, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 0, 961, 0, 0, 0, 0, 0, 0, 960,
	0, 2937, 0, 0, 0, 0, 1310, 0, 0, 0,
	0, 0, 0, 0, 1330, 0, 0, 1932, 0, 0,
	0, 2066, 0, 2068, 0, 2842, 2006, 1571, 0, 1571,
	0, 0, 0, 0, 497, 0, 0, 0, 2961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 497, 0,
	0, 718, 0, 0, 0, 0, 0, 0, 2219, 731,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 2006,
	933, 0, 0, 1333, 1334, 1335, 1336, 0, 0, 0,
	0, 0, 0, 1316, 2146, 2146, 0, 0, 0, 1378,
	596, 596, 0, 0, 0, 0, 921, 74, 0, 0,
	0, 1065, 0, 0, 0, 965, 497, 578, 497, 0,
	1932, 1338, 1339, 1340, 0, 0, 497, 0, 40, 0,
	0, 0, 0, 942, 0, 0, 0, 0, 969, 0,
	0, 3024, 0, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2293, 2294, 0, 2311, 2312, 2313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 577, 0, 0, 0, 0, 1845, 0, 2795,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1381, 0, 0, 0, 0,
	0, 579, 0, 0, 0, 0, 0, 0, 0, 59,
	581, 0, 0, 2308, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 1337, 1065, 0,
	0, 1936, 0, 0, 0, 0, 0, 0, 0, 63,
	0, 0, 0, 1468, 1332, 0, 0, 0, 2006, 2378,
	2006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2677, 1065, 0, 0, 0, 0, 2006, 0,
	2378, 0, 2299, 1065, 1065, 497, 2006, 2378, 0, 0,
	497, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2677, 2315, 1065, 2077,
	2213, 2214, 0, 0, 0, 0, 2220, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2314, 2006, 0, 0, 2234, 2235, 0, 0, 0,
	0, 1872, 0, 0, 0, 0, 0, 0, 0, 2242,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	2309, 0, 0, 0, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 2261, 0, 0, 0, 0, 0, 138,
	66, 0, 67, 0, 0, 2274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 960, 0, 0, 0, 0, 0, 0, 974,
	0, 580, 0, 0, 108, 0, 0, 0, 0, 0,
	74, 0, 74, 0, 74, 0, 0, 2006, 974, 2378,
	0, 0, 2955, 0, 0, 0, 174, 1946, 1946, 1946,
	497, 0, 1089, 2310, 2677, 0, 0, 0, 1107, 1445,
	0, 0, 0, 0, 0, 0, 0, 2343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 1130, 1130, 1130, 969, 975, 173, 2677, 0, 2677,
	731, 0, 0, 2677, 0, 166, 497, 2677, 0, 0,
	0, 0, 0, 167, 975, 0, 1065, 0, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2400, 0, 137, 0, 0, 0, 0, 0,
	960, 209, 0, 0, 960, 0, 0, 0, 0, 1183,
	74, 960, 0, 0, 209, 0, 2586, 74, 0, 0,
	0, 0, 545, 0, 0, 0, 2305, 2306, 2307, 0,
	2955, 0, 0, 2304, 2302, 2303, 2295, 2296, 2297, 2298,
	2300, 2301, 0, 0, 0, 0, 974, 961, 0, 0,
	0, 0, 0, 0, 0, 960, 960, 0, 2006, 2378,
	0, 0, 0, 0, 497, 0, 961, 0, 209, 0,
	961, 0, 0, 0, 497, 0, 0, 961, 0, 0,
	2378, 0, 0, 0, 0, 0, 2473, 0, 1065, 0,
	1065, 0, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 1274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3086, 975, 0, 1065, 0, 497, 0, 0, 0,
	0, 961, 961, 0, 0, 1936, 1936, 0, 0, 0,
	0, 0, 0, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 718, 0, 741, 741, 0,
	0, 0, 578, 0, 2586, 0, 0, 0, 0, 0,
	741, 0, 0, 40, 0, 0, 0, 1370, 0, 0,
	0, 1308, 1309, 0, 0, 0, 2537, 1065, 44, 0,
	1770, 0, 2677, 2677, 1379, 2006, 2541, 2542, 1385, 0,
	2545, 0, 0, 0, 2548, 0, 1311, 0, 0, 975,
	0, 0, 2955, 2552, 0, 0, 0, 577, 0, 0,
	0, 0, 2559, 0, 0, 2343, 974, 0, 0, 0,
	0, 0, 0, 1310, 1936, 1936, 1936, 2021, 0, 0,
	0, 1330, 0, 0, 0, 2579, 579, 0, 0, 0,
	0, 0, 0, 0, 59, 581, 0, 0, 0, 60,
	0, 0, 2593, 2594, 2051, 2595, 2596, 2597, 0, 0,
	2598, 0, 0, 0, 0, 0, 2600, 0, 0, 0,
	0, 2067, 0, 2069, 0, 2212, 0, 0, 0, 0,
	0, 0, 975, 0, 63, 0, 974, 0, 0, 0,
	1333, 1334, 1335, 1336, 0, 0, 0, 2628, 2629, 0,
	1316, 0, 974, 0, 0, 0, 0, 0, 0, 0,
	2113, 0, 2113, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2645, 0, 0, 0, 0, 1338, 1339,
	1340, 74, 0, 0, 1466, 0, 1469, 0, 960, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	974, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 2671, 0, 0, 0, 0, 0, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 1331, 0,
	0, 39, 0, 2694, 0, 0, 64, 0, 0, 0,
	0, 0, 40, 140, 0, 2699, 0, 0, 0, 0,
	2700, 0, 0, 0, 961, 2703, 0, 44, 0, 0,
	0, 0, 0, 0, 138, 66, 975, 67, 0, 960,
	960, 960, 46, 142, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 172, 51, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 580, 0, 0, 108,
	0, 1445, 0, 0, 0, 0, 52, 0, 0, 0,
	54, 1332, 2743, 0, 0, 58, 0, 0, 143, 0,
	0, 174, 0, 59, 72, 0, 0, 0, 60, 61,
	0, 0, 0, 0, 0, 961, 961, 961, 0, 0,
	961, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1543, 0, 62, 0, 0, 0, 1936, 1936, 1554,
	0, 173, 0, 63, 0, 0, 0, 0, 2773, 2774,
	166, 0, 0, 0, 2778, 2779, 0, 0, 167, 2782,
	2783, 0, 0, 0, 0, 1577, 2787, 1577, 0, 0,
	0, 974, 0, 0, 0, 0, 0, 0, 0, 137,
	0, 0, 0, 0, 0, 2792, 0, 0, 0, 0,
	0, 0, 2796, 0, 0, 0, 0, 0, 0, 0,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	0, 0, 0, 0, 0, 0, 1936, 1936, 1936, 1936,
	1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936,
	1936, 1936, 1936, 1936, 1936, 0, 1936, 975, 0, 0,
	0, 1682, 0, 0, 0, 64, 1308, 1309, 0, 0,
	0, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 75, 138, 66, 0, 67, 0, 68, 0,
	0, 2854, 144, 0, 0, 1728, 0, 69, 0, 0,
	0, 1734, 0, 1735, 172, 1736, 0, 1737, 1310, 1738,
	0, 0, 0, 0, 0, 83, 1330, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	1748, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	174, 0, 0, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 718, 718, 0, 0, 0, 0, 0, 0,
	2293, 2294, 113, 2311, 2312, 2313, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 1333, 1334, 1335, 1336, 0,
	173, 0, 0, 0, 0, 1316, 0, 0, 0, 166,
	2925, 2926, 2927, 0, 2406, 0, 2407, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1838, 0, 0, 1338, 1339, 1340, 2935, 2936, 137, 974,
	2308, 4, 0, 731, 2423, 0, 2424, 0, 0, 0,
	2943, 0, 0, 0, 0, 0, 1379, 0, 0, 0,
	1379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	974, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2448, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 2458, 0, 0, 0, 2978, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 0, 2299,
	0, 0, 0, 0, 2989, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 960, 0,
	0, 0, 0, 1308, 1309, 0, 975, 0, 974, 1351,
	1352, 1353, 0, 1469, 0, 0, 0, 0, 974, 1337,
	0, 1990, 0, 0, 0, 974, 0, 0, 1311, 2293,
	2294, 1357, 2311, 2312, 2313, 74, 1332, 0, 0, 0,
	0, 0, 0, 0, 960, 0, 0, 2776, 960, 960,
	960, 0, 0, 0, 0, 1310, 0, 2309, 0, 0,
	0, 0, 74, 1330, 961, 3035, 0, 0, 3038, 0,
	0, 969, 0, 0, 975, 0, 0, 0, 0, 74,
	0, 74, 0, 0, 975, 0, 0, 0, 0, 2308,
	0, 975, 0, 3051, 0, 0, 0, 0, 1554, 0,
	0, 960, 960, 0, 0, 0, 0, 0, 0, 0,
	961, 0, 0, 0, 961, 961, 961, 0, 74, 0,
	74, 0, 1333, 1334, 1335, 1336, 0, 0, 2125, 0,
	0, 1130, 1316, 1130, 0, 1130, 0, 969, 969, 0,
	2310, 0, 74, 0, 0, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 74, 1348, 1358, 2299, 0,
	1338, 1339, 1340, 0, 0, 0, 0, 961, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3123, 3123, 3123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3141, 0,
	0, 0, 0, 1346, 0, 974, 2152, 2314, 0, 0,
	1331, 0, 0, 0, 0, 974, 0, 40, 0, 0,
	0, 0, 0, 0, 0, 3123, 0, 0, 0, 1936,
	0, 0, 44, 0, 0, 0, 2309, 0, 0, 0,
	0, 0, 0, 2305, 2306, 2307, 0, 0, 0, 0,
	2304, 2302, 2303, 2295, 2296, 2297, 2298, 2300, 2301, 0,
	0, 2153, 0, 0, 0, 2187, 1936, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 0, 3123, 0,
	2154, 0, 0, 1332, 2195, 969, 2197, 2293, 2294, 581,
	2311, 2312, 2313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2555, 1349, 2210, 0, 2310,
	0, 0, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2308, 0, 1936,
	2746, 1838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1379, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 1347, 0, 0, 0, 0, 0, 0,
	0, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 0, 0, 0, 0, 974, 0, 0, 0,
	0, 960, 2305, 2306, 2307, 0, 2299, 0, 0, 2304,
	2302, 2303, 2295, 2296, 2297, 2298, 2300, 2301, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 960, 960, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 66,
	0, 67, 0, 974, 0, 2314, 974, 0, 0, 0,
	0, 0, 975, 0, 0, 0, 0, 961, 0, 172,
	0, 0, 0, 974, 0, 0, 0, 921, 0, 0,
	580, 0, 0, 108, 2309, 921, 921, 0, 0, 921,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 961, 961, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	2375, 0, 975, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 74, 0, 74, 173, 0, 0, 0, 0,
	1107, 0, 0, 0, 166, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 0, 0, 0, 2310, 0, 0,
	0, 0, 74, 0, 74, 0, 0, 0, 0, 0,
	0, 2904, 0, 137, 2431, 0, 0, 974, 0, 974,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 74,
	0, 0, 0, 2449, 0, 1311, 0, 2453, 1357, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 2462, 0,
	0, 960, 0, 0, 0, 974, 731, 0, 0, 960,
	0, 0, 1310, 0, 0, 0, 0, 0, 0, 0,
	1330, 0, 0, 975, 0, 975, 0, 1327, 974, 0,
	74, 960, 0, 0, 0, 0, 0, 0, 0, 0,
	2305, 2306, 2307, 0, 0, 0, 0, 2304, 2302, 2303,
	2295, 2296, 2297, 2298, 2300, 2301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 975, 0, 0, 0, 961, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 0, 0, 0, 0, 0, 1316,
	0, 0, 0, 0, 975, 0, 974, 961, 0, 0,
	0, 0, 2996, 0, 2539, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	2293, 2294, 0, 2311, 2312, 2313, 0, 0, 0, 0,
	0, 0, 974, 0, 0, 0, 0, 0, 1354, 1355,
	974, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	1346, 0, 975, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 2293, 2294, 0, 2311, 2312, 2313,
	2308, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 2554, 0, 0, 0, 1345, 0, 975, 0,
	960, 0, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 0, 74, 0, 974, 0, 0, 0, 0,
	0, 0, 0, 1337, 2308, 0, 0, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 2299,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 961, 0, 0, 0,
	0, 1308, 1309, 1349, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 975, 0, 0, 0, 0, 1311, 0, 2314, 1357,
	0, 0, 0, 2299, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 960, 960, 0, 0, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 0, 2309, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 0, 2717, 0, 974, 0, 0,
	1347, 0, 2314, 1322, 1323, 1329, 1328, 1324, 1350, 2724,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0,
	961, 0, 0, 2803, 0, 0, 0, 2802, 921, 961,
	961, 2309, 0, 0, 0, 0, 0, 0, 74, 0,
	1333, 1334, 1335, 1336, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2310, 0, 0, 975, 0, 0, 0, 2765, 0, 969,
	0, 0, 0, 0, 1348, 1358, 0, 2768, 1338, 1339,
	1340, 0, 0, 0, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 1354,
	1355, 0, 0, 1344, 0, 0, 0, 1325, 1326, 0,
	1311, 0, 0, 1357, 2310, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	0, 0, 0, 0, 1356, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 2305, 2306, 2307, 0, 0, 0, 0,
	2304, 2302, 2303, 2295, 2296, 2297, 2298, 2300, 2301, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 1334, 1335, 1336, 0, 0,
	0, 1332, 0, 0, 1316, 0, 0, 2305, 2306, 2307,
	0, 0, 0, 0, 2304, 2302, 2303, 2295, 2296, 2297,
	2298, 2300, 2301, 0, 1349, 0, 2868, 0, 1348, 1358,
	0, 1107, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 1346, 0, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	0, 0, 0, 0, 2279, 0, 0, 0, 2280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2962, 0, 0, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 2998, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3073, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3091, 259, 260,
	261, 262, 977, 263, 978, 979, 980, 981, 215, 982,
	983, 984, 985, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 986, 270, 271, 272, 273, 274, 275,
	276, 987, 988, 277, 220, 221, 222, 989, 278, 223,
	990, 962, 991, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 992, 288, 0, 289, 290, 993, 856,
	291, 292, 994, 995, 997, 996, 998, 999, 1000, 293,
	294, 501, 295, 296, 297, 224, 225, 1001, 298, 1002,
	299, 1003, 300, 1004, 1005, 301, 302, 303, 1006, 304,
	1007, 305, 306, 1008, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 1009, 857, 1010, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 1011,
	322, 1012, 1013, 858, 323, 1014, 324, 230, 1015, 231,
	325, 1016, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 860, 1017, 238, 333, 0, 0, 0, 1018, 332,
	334, 341, 1019, 859, 335, 235, 337, 336, 338, 339,
	340, 236, 1020, 237, 1021, 342, 861, 862, 343, 344,
	345, 863, 346, 347, 0, 0, 348, 349, 350, 1022,
	352, 351, 1023, 353, 239, 864, 354, 355, 865, 1024,
	356, 357, 1025, 1026, 358, 0, 359, 937, 936, 360,
	361, 363, 364, 362, 866, 365, 366, 368, 367, 1027,
	1028, 867, 1029, 240, 241, 369, 370, 1030, 371, 372,
	1031, 1032, 373, 374, 1033, 1034, 375, 242, 868, 376,
	869, 243, 377, 378, 379, 380, 381, 382, 383, 1035,
	384, 244, 385, 245, 386, 1036, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 1037, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 1038,
	407, 870, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 1039, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 1040, 432, 413, 414,
	433, 871, 434, 248, 435, 436, 1041, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 1042,
	447, 448, 1043, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 1044, 250, 251, 252, 456, 1045, 1046, 457,
	458, 253, 254, 1047, 459, 460, 0, 461, 462, 1048,
	1049, 463, 464, 465, 467, 1050, 468, 1051, 466, 469,
	470, 471, 255, 256, 1052, 473, 472, 257, 1053, 1054,
	1055, 1056, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 1977, 0,
	0, 0, 0, 0, 0, 0, 0, 1978, 259, 260,
	261, 262, 977, 263, 978, 979, 980, 981, 215, 982,
	983, 984, 985, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 986, 270, 271, 272, 273, 274, 275,
	276, 987, 988, 277, 220, 221, 222, 989, 278, 223,
	990, 962, 991, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 992, 288, 0, 289, 290, 993, 856,
	291, 292, 994, 995, 997, 996, 998, 999, 1000, 293,
	294, 501, 295, 296, 297, 224, 225, 1001, 298, 1002,
	299, 1003, 300, 1004, 1005, 301, 302, 303, 1006, 304,
	1007, 305, 306, 1008, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 1009, 857, 1010, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 1011,
	322, 1012, 1013, 858, 323, 1014, 324, 230, 1015, 231,
	325, 1016, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 860, 1017, 238, 333, 0, 0, 0, 1018, 332,
	334, 341, 1019, 859, 335, 235, 337, 336, 338, 339,
	340, 236, 1020, 237, 1021, 342, 861, 862, 343, 344,
	345, 863, 346, 347, 0, 0, 348, 349, 350, 1022,
	352, 351, 1023, 353, 239, 864, 354, 355, 865, 1024,
	356, 357, 1025, 1026, 358, 0, 359, 937, 936, 360,
	361, 363, 364, 362, 866, 365, 366, 368, 367, 1027,
	1028, 867, 1029, 240, 241, 369, 370, 1030, 371, 372,
	1031, 1032, 373, 374, 1033, 1034, 375, 242, 868, 376,
	869, 243, 377, 378, 379, 380, 381, 382, 383, 1035,
	384, 244, 385, 245, 386, 1036, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 1037, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 1038,
	407, 870, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 1039, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 1040, 432, 413, 414,
	433, 871, 434, 248, 435, 436, 1041, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 1042,
	447, 448, 1043, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 1044, 250, 251, 252, 456, 1045, 1046, 457,
	458, 253, 254, 1047, 459, 460, 0, 461, 462, 1048,
	1049, 463, 464, 465, 467, 1050, 468, 1051, 466, 469,
	470, 471, 255, 256, 1052, 473, 472, 257, 1053, 1054,
	1055, 1056, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2825, 259,
	260, 261, 262, 977, 263, 978, 979, 980, 981, 215,
	982, 983, 984, 985, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 986, 270, 271, 272, 273, 274,
	275, 276, 987, 988, 277, 220, 221, 222, 989, 278,
	223, 990, 962, 991, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 992, 288, 0, 289, 290, 993,
	856, 291, 292, 994, 995, 997, 996, 998, 999, 1000,
	293, 294, 501, 295, 296, 297, 224, 225, 1001, 298,
	1002, 299, 1003, 300, 1004, 1005, 301, 302, 303, 1006,
	304, 1007, 305, 306, 1008, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 1009, 857, 1010, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	1011, 322, 1012, 1013, 858, 323, 1014, 324, 230, 1015,
	231, 325, 1016, 326, 327, 328, 329, 330, 331, 232,
	233, 234, 860, 1017, 238, 333, 0, 0, 0, 1018,
	332, 334, 341, 1019, 859, 335, 235, 337, 336, 338,
	339, 340, 236, 1020, 237, 1021, 342, 861, 862, 343,
	344, 345, 863, 346, 347, 0, 0, 348, 349, 350,
	1022, 352, 351, 1023, 353, 239, 864, 354, 355, 865,
	1024, 356, 357, 1025, 1026, 358, 0, 359, 937, 936,
	360, 361, 363, 364, 362, 866, 365, 366, 368, 367,
	1027, 1028, 867, 1029, 240, 241, 369, 370, 1030, 371,
	372, 1031, 1032, 373, 374, 1033, 1034, 375, 242, 868,
	376, 869, 243, 377, 378, 379, 380, 381, 382, 383,
	1035, 384, 244, 385, 245, 386, 1036, 387, 388, 389,
	390, 391, 392, 246, 393, 394, 1037, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	1038, 407, 870, 408, 409, 410, 411, 247, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 1039, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 1040, 432, 413,
	414, 433, 871, 434, 248, 435, 436, 1041, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 249,
	1042, 447, 448, 1043, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 1044, 250, 251, 252, 456, 1045, 1046,
	457, 458, 253, 254, 1047, 459, 460, 0, 461, 462,
	1048, 1049, 463, 464, 465, 467, 1050, 468, 1051, 466,
	469, 470, 471, 255, 256, 1052, 473, 472, 257, 1053,
	1054, 1055, 1056, 474, 475, 258, 476, 477, 478, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2931, 259, 260, 261, 262, 977,
	263, 978, 979, 980, 981, 215, 982, 983, 984, 985,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	986, 270, 271, 272, 273, 274, 275, 276, 987, 988,
	277, 220, 221, 222, 989, 278, 223, 990, 962, 991,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	992, 288, 0, 289, 290, 993, 856, 291, 292, 994,
	995, 997, 996, 998, 999, 1000, 293, 294, 501, 295,
	296, 297, 224, 225, 1001, 298, 1002, 299, 1003, 300,
	1004, 1005, 301, 302, 303, 1006, 304, 1007, 305, 306,
	1008, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 1009, 857, 1010, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 1011, 322, 1012, 1013,
	858, 323, 1014, 324, 230, 1015, 231, 325, 1016, 326,
	327, 328, 329, 330, 331, 232, 233, 234, 860, 1017,
	238, 333, 0, 0, 0, 1018, 332, 334, 341, 1019,
	859, 335, 235, 337, 336, 338, 339, 340, 236, 1020,
	237, 1021, 342, 861, 862, 343, 344, 345, 863, 346,
	347, 0, 0, 348, 349, 350, 1022, 352, 351, 1023,
	353, 239, 864, 354, 355, 865, 1024, 356, 357, 1025,
	1026, 358, 0, 359, 937, 936, 360, 361, 363, 364,
	362, 866, 365, 366, 368, 367, 1027, 1028, 867, 1029,
	240, 241, 369, 370, 1030, 371, 372, 1031, 1032, 373,
	374, 1033, 1034, 375, 242, 868, 376, 869, 243, 377,
	378, 379, 380, 381, 382, 383, 1035, 384, 244, 385,
	245, 386, 1036, 387, 388, 389, 390, 391, 392, 246,
	393, 394, 1037, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 1038, 407, 870, 408,
	409, 410, 411, 247, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 1039, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 1040, 432, 413, 414, 433, 871, 434,
	248, 435, 436, 1041, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 249, 1042, 447, 448, 1043,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 1044,
	250, 251, 252, 456, 1045, 1046, 457, 458, 253, 254,
	1047, 459, 460, 0, 461, 462, 1048, 1049, 463, 464,
	465, 467, 1050, 468, 1051, 466, 469, 470, 471, 255,
	256, 1052, 473, 472, 257, 1053, 1054, 1055, 1056, 474,
	475, 258, 476, 477, 478, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2582, 259, 260, 261, 262, 977, 263, 978, 979, 980,
	981, 215, 982, 983, 984, 985, 264, 265, 266, 216,
	217, 267, 218, 268, 269, 219, 986, 270, 271, 272,
	273, 274, 275, 276, 987, 988, 277, 220, 221, 222,
	989, 278, 223, 990, 962, 991, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 992, 288, 0, 289,
	290, 993, 856, 291, 292, 994, 995, 997, 996, 998,
	999, 1000, 293, 294, 501, 295, 296, 297, 224, 225,
	1001, 298, 1002, 299, 1003, 300, 1004, 1005, 301, 302,
	303, 1006, 304, 1007, 305, 306, 1008, 226, 307, 308,
	310, 313, 309, 314, 315, 227, 228, 1009, 857, 1010,
	0, 0, 0, 0, 316, 317, 318, 229, 319, 320,
	0, 321, 1011, 322, 1012, 1013, 858, 323, 1014, 324,
	230, 1015, 231, 325, 1016, 326, 327, 328, 329, 330,
	331, 232, 233, 234, 860, 1017, 238, 333, 0, 0,
	0, 1018, 332, 334, 341, 1019, 859, 335, 235, 337,
	336, 338, 339, 340, 236, 1020, 237, 1021, 342, 861,
	862, 343, 344, 345, 863, 346, 347, 0, 0, 348,
	349, 350, 1022, 352, 351, 1023, 353, 239, 864, 354,
	355, 865, 1024, 356, 357, 1025, 1026, 358, 0, 359,
	937, 936, 360, 361, 363, 364, 362, 866, 365, 366,
	368, 367, 1027, 1028, 867, 1029, 240, 241, 369, 370,
	1030, 371, 372, 1031, 1032, 373, 374, 1033, 1034, 375,
	242, 868, 376, 869, 243, 377, 378, 379, 380, 381,
	382, 383, 1035, 384, 244, 385, 245, 386, 1036, 387,
	388, 389, 390, 391, 392, 246, 393, 394, 1037, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 1038, 407, 870, 408, 409, 410, 411, 247,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 1039,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 1040,
	432, 413, 414, 433, 871, 434, 248, 435, 436, 1041,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 249, 1042, 447, 448, 1043, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 1044, 250, 251, 252, 456,
	1045, 1046, 457, 458, 253, 254, 1047, 459, 460, 0,
	461, 462, 1048, 1049, 463, 464, 465, 467, 1050, 468,
	1051, 466, 469, 470, 471, 255, 256, 1052, 473, 472,
	257, 1053, 1054, 1055, 1056, 474, 475, 258, 476, 477,
	478, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2574, 259, 260, 261,
	262, 977, 263, 978, 979, 980, 981, 215, 982, 983,
	984, 985, 264, 265, 266, 216, 217, 267, 218, 268,
	269, 219, 986, 270, 271, 272, 273, 274, 275, 276,
	987, 988, 277, 220, 221, 222, 989, 278, 223, 990,
	962, 991, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 992, 288, 0, 289, 290, 993, 856, 291,
	292, 994, 995, 997, 996, 998, 999, 1000, 293, 294,
	501, 295, 296, 297, 224, 225, 1001, 298, 1002, 299,
	1003, 300, 1004, 1005, 301, 302, 303, 1006, 304, 1007,
	305, 306, 1008, 226, 307, 308, 310, 313, 309, 314,
	315, 227, 228, 1009, 857, 1010, 0, 0, 0, 0,
	316, 317, 318, 229, 319, 320, 0, 321, 1011, 322,
	1012, 1013, 858, 323, 1014, 324, 230, 1015, 231, 325,
	1016, 326, 327, 328, 329, 330, 331, 232, 233, 234,
	860, 1017, 238, 333, 0, 0, 0, 1018, 332, 334,
	341, 1019, 859, 335, 235, 337, 336, 338, 339, 340,
	236, 1020, 237, 1021, 342, 861, 862, 343, 344, 345,
	863, 346, 347, 0, 0, 348, 349, 350, 1022, 352,
	351, 1023, 353, 239, 864, 354, 355, 865, 1024, 356,
	357, 1025, 1026, 358, 0, 359, 937, 936, 360, 361,
	363, 364, 362, 866, 365, 366, 368, 367, 1027, 1028,
	867, 1029, 240, 241, 369, 370, 1030, 371, 372, 1031,
	1032, 373, 374, 1033, 1034, 375, 242, 868, 376, 869,
	243, 377, 378, 379, 380, 381, 382, 383, 1035, 384,
	244, 385, 245, 386, 1036, 387, 388, 389, 390, 391,
	392, 246, 393, 394, 1037, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 1038, 407,
	870, 408, 409, 410, 411, 247, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 1039, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 1040, 432, 413, 414, 433,
	871, 434, 248, 435, 436, 1041, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 249, 1042, 447,
	448, 1043, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 1044, 250, 251, 252, 456, 1045, 1046, 457, 458,
	253, 254, 1047, 459, 460, 0, 461, 462, 1048, 1049,
	463, 464, 465, 467, 1050, 468, 1051, 466, 469, 470,
	471, 255, 256, 1052, 473, 472, 257, 1053, 1054, 1055,
	1056, 474, 475, 258, 476, 477, 478, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2435, 259, 260, 261, 262, 977, 263, 978,
	979, 980, 981, 215, 982, 983, 984, 985, 264, 265,
	266, 216, 217, 267, 218, 268, 269, 219, 986, 270,
	271, 272, 273, 274, 275, 276, 987, 988, 277, 220,
	221, 222, 989, 278, 223, 990, 962, 991, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 992, 288,
	0, 289, 290, 993, 856, 291, 292, 994, 995, 997,
	996, 998, 999, 1000, 293, 294, 501, 295, 296, 297,
	224, 225, 1001, 298, 1002, 299, 1003, 300, 1004, 1005,
	301, 302, 303, 1006, 304, 1007, 305, 306, 1008, 226,
	307, 308, 310, 313, 309, 314, 315, 227, 228, 1009,
	857, 1010, 0, 0, 0, 0, 316, 317, 318, 229,
	319, 320, 0, 321, 1011, 322, 1012, 1013, 858, 323,
	1014, 324, 230, 1015, 231, 325, 1016, 326, 327, 328,
	329, 330, 331, 232, 233, 234, 860, 1017, 238, 333,
	0, 0, 0, 1018, 332, 334, 341, 1019, 859, 335,
	235, 337, 336, 338, 339, 340, 236, 1020, 237, 1021,
	342, 861, 862, 343, 344, 345, 863, 346, 347, 0,
	0, 348, 349, 350, 1022, 352, 351, 1023, 353, 239,
	864, 354, 355, 865, 1024, 356, 357, 1025, 1026, 358,
	0, 359, 937, 936, 360, 361, 363, 364, 362, 866,
	365, 366, 368, 367, 1027, 1028, 867, 1029, 240, 241,
	369, 370, 1030, 371, 372, 1031, 1032, 373, 374, 1033,
	1034, 375, 242, 868, 376, 869, 243, 377, 378, 379,
	380, 381, 382, 383, 1035, 384, 244, 385, 245, 386,
	1036, 387, 388, 389, 390, 391, 392, 246, 393, 394,
	1037, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 1038, 407, 870, 408, 409, 410,
	411, 247, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 1039, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 1040, 432, 413, 414, 433, 871, 434, 248, 435,
	436, 1041, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 249, 1042, 447, 448, 1043, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 1044, 250, 251,
	252, 456, 1045, 1046, 457, 458, 253, 254, 1047, 459,
	460, 0, 461, 462, 1048, 1049, 463, 464, 465, 467,
	1050, 468, 1051, 466, 469, 470, 471, 255, 256, 1052,
	473, 472, 257, 1053, 1054, 1055, 1056, 474, 475, 258,
	476, 477, 478, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1880, 259,
	260, 261, 262, 977, 263, 978, 979, 980, 981, 215,
	982, 983, 984, 985, 264, 265, 266, 216, 217, 267,
	218, 268, 269, 219, 986, 270, 271, 272, 273, 274,
	275, 276, 987, 988, 277, 220, 221, 222, 989, 278,
	223, 990, 962, 991, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 992, 288, 0, 289, 290, 993,
	856, 291, 292, 994, 995, 997, 996, 998, 999, 1000,
	293, 294, 501, 295, 296, 297, 224, 225, 1001, 298,
	1002, 299, 1003, 300, 1004, 1005, 301, 302, 303, 1006,
	304, 1007, 305, 306, 1008, 226, 307, 308, 310, 313,
	309, 314, 315, 227, 228, 1009, 857, 1010, 0, 0,
	0, 0, 316, 317, 318, 229, 319, 320, 0, 321,
	1011, 322, 1012, 1013, 858, 323, 1014, 324, 230, 1015,
	231, 325, 1016, 326, 327, 328, 329, 330, 331, 232,
	233, 234, 860, 1017, 238, 333, 0, 0, 0, 1018,
	332, 334, 341, 1019, 859, 335, 235, 337, 336, 338,
	339, 340, 236, 1020, 237, 1021, 342, 861, 862, 343,
	344, 345, 863, 346, 347, 0, 0, 348, 349, 350,
	1022, 352, 351, 1023, 353, 239, 864, 354, 355, 865,
	1024, 356, 357, 1025, 1026, 358, 0, 359, 937, 936,
	360, 361, 363, 364, 362, 866, 365, 366, 368, 367,
	1027, 1028, 867, 1029, 240, 241, 369, 370, 1030, 371,
	372, 1031, 1032, 373, 374, 1033, 1034, 375, 242, 868,
	376, 869, 243, 377, 378, 379, 380, 381, 382, 383,
	1035, 384, 244, 385, 245, 386, 1036, 387, 388, 389,
	390, 391, 392, 246, 393, 394, 1037, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	1038, 407, 870, 408, 409, 410, 411, 247, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 1039, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 1040, 432, 413,
	414, 433, 871, 434, 248, 435, 436, 1041, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 249,
	1042, 447, 448, 1043, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 1044, 250, 251, 252, 456, 1045, 1046,
	457, 458, 253, 254, 1047, 459, 460, 0, 461, 462,
	1048, 1049, 463, 464, 465, 467, 1050, 468, 1051, 466,
	469, 470, 471, 255, 256, 1052, 473, 472, 257, 1053,
	1054, 1055, 1056, 474, 475, 258, 476, 477, 478, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1535, 259, 260, 261, 262, 977,
	263, 978, 979, 980, 981, 215, 982, 983, 984, 985,
	264, 265, 266, 216, 217, 267, 218, 268, 269, 219,
	986, 270, 271, 272, 273, 274, 275, 276, 987, 988,
	277, 220, 221, 222, 989, 278, 223, 990, 962, 991,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	992, 288, 0, 289, 290, 993, 856, 291, 292, 994,
	995, 997, 996, 998, 999, 1000, 293, 294, 501, 295,
	296, 297, 224, 225, 1001, 298, 1002, 299, 1003, 300,
	1004, 1005, 301, 302, 303, 1006, 304, 1007, 305, 306,
	1008, 226, 307, 308, 310, 313, 309, 314, 315, 227,
	228, 1009, 857, 1010, 0, 0, 0, 0, 316, 317,
	318, 229, 319, 320, 0, 321, 1011, 322, 1012, 1013,
	858, 323, 1014, 324, 230, 1015, 231, 325, 1016, 326,
	327, 328, 329, 330, 331, 232, 233, 234, 860, 1017,
	238, 333, 0, 0, 0, 1018, 332, 334, 341, 1019,
	859, 335, 235, 337, 336, 338, 339, 340, 236, 1020,
	237, 1021, 342, 861, 862, 343, 344, 345, 863, 346,
	347, 0, 0, 348, 349, 350, 1022, 352, 351, 1023,
	353, 239, 864, 354, 355, 865, 1024, 356, 357, 1025,
	1026, 358, 0, 359, 937, 936, 360, 361, 363, 364,
	362, 866, 365, 366, 368, 367, 1027, 1028, 867, 1029,
	240, 241, 369, 370, 1030, 371, 372, 1031, 1032, 373,
	374, 1033, 1034, 375, 242, 868, 376, 869, 243, 377,
	378, 379, 380, 381, 382, 383, 1035, 384, 244, 385,
	245, 386, 1036, 387, 388, 389, 390, 391, 392, 246,
	393, 394, 1037, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 1038, 407, 870, 408,
	409, 410, 411, 247, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 1039, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 1040, 432, 413, 414, 433, 871, 434,
	248, 435, 436, 1041, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 249, 1042, 447, 448, 1043,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 1044,
	250, 251, 252, 456, 1045, 1046, 457, 458, 253, 254,
	1047, 459, 460, 0, 461, 462, 1048, 1049, 463, 464,
	465, 467, 1050, 468, 1051, 466, 469, 470, 471, 255,
	256, 1052, 473, 472, 257, 1053, 1054, 1055, 1056, 474,
	475, 258, 476, 477, 478, 1858, 0, 801, 760, 761,
	758, 759, 771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 1855, 263, 0,
	0, 0, 0, 847, 776, 0, 0, 0, 264, 265,
	266, 216, 816, 795, 827, 785, 826, 825, 0, 270,
	271, 787, 786, 274, 275, 276, 777, 846, 277, 873,
	872, 222, 0, 278, 853, 0, 836, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 287, 284, 0, 288,
	0, 289, 290, 0, 856, 291, 292, 839, 837, 838,
	843, 841, 840, 842, 293, 294, 501, 295, 829, 297,
	823, 822, 750, 298, 0, 299, 0, 300, 1856, 0,
	301, 821, 303, 0, 304, 0, 305, 306, 0, 755,
	307, 308, 310, 313, 309, 314, 315, 875, 876, 767,
	857, 0, 0, 0, 0, 0, 316, 317, 318, 820,
	818, 819, 0, 321, 0, 322, 0, 0, 858, 323,
	0, 324, 877, 0, 231, 325, 0, 326, 327, 328,
	329, 330, 331, 848, 849, 852, 860, 0, 850, 797,
	0, 0, 0, 0, 332, 334, 341, 0, 859, 335,
	809, 800, 810, 811, 812, 813, 814, 0, 802, 0,
	342, 861, 862, 343, 344, 345, 863, 834, 835, 0,
	0, 348, 349, 350, 0, 352, 351, 0, 353, 878,
	864, 354, 355, 865, 0, 356, 357, 0, 0, 358,
	0, 359, 752, 751, 360, 361, 363, 789, 362, 866,
	365, 366, 368, 367, 747, 0, 867, 768, 851, 824,
	369, 370, 0, 798, 799, 0, 0, 373, 374, 0,
	0, 375, 242, 868, 376, 869, 879, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 880, 385, 245, 386,
	0, 387, 388, 389, 390, 391, 392, 817, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 870, 408, 409, 410,
	411, 756, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 790, 791, 793, 794, 424, 430,
	431, 844, 432, 413, 414, 433, 871, 434, 815, 792,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 855,
	441, 442, 443, 881, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 788, 0, 830, 831,
	832, 833, 0, 0, 457, 458, 882, 883, 766, 459,
	460, 0, 461, 462, 0, 0, 463, 464, 465, 467,
	845, 468, 0, 796, 469, 470, 471, 255, 874, 1854,
	473, 472, 257, 0, 0, 0, 0, 474, 475, 258,
	476, 477, 478, 748, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 744, 745, 1857, 0,
	0, 0, 0, 0, 0, 772, 1853, 0, 0, 0,
	732, 770, 801, 760, 761, 758, 759, 771, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 847, 776,
	0, 0, 0, 264, 265, 266, 216, 816, 795, 827,
	785, 826, 825, 0, 270, 271, 787, 786, 274, 275,
	276, 777, 846, 277, 873, 872, 222, 0, 278, 853,
	0, 836, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 292, 839, 837, 838, 843, 841, 840, 842, 293,
	294, 501, 295, 829, 297, 823, 822, 750, 298, 0,
	299, 0, 300, 0, 0, 301, 821, 303, 0, 304,
	0, 305, 306, 0, 755, 307, 308, 310, 313, 309,
	314, 315, 875, 876, 767, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 820, 818, 819, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 877, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 848, 849,
	852, 860, 0, 850, 797, 0, 0, 0, 0, 332,
	334, 341, 0, 859, 335, 809, 800, 810, 811, 812,
	813, 814, 0, 802, 0, 342, 861, 862, 343, 344,
	345, 863, 834, 835, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 878, 864, 354, 355, 865, 0,
	356, 357, 0, 0, 358, 0, 359, 752, 751, 360,
	361, 363, 789, 362, 866, 365, 366, 368, 367, 747,
	0, 867, 768, 851, 824, 369, 370, 0, 798, 799,
	0, 0, 373, 374, 0, 0, 375, 242, 868, 376,
	869, 879, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 880, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 817, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 870, 408, 409, 410, 411, 756, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 172, 428, 429, 790,
	791, 793, 794, 424, 430, 431, 844, 432, 413, 414,
	433, 871, 434, 815, 792, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 855, 441, 442, 443, 881, 0,
	447, 448, 174, 449, 450, 451, 452, 453, 311, 454,
	312, 788, 0, 830, 831, 832, 833, 0, 0, 457,
	458, 882, 883, 766, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 845, 468, 0, 796, 469,
	470, 471, 1157, 874, 0, 473, 472, 257, 0, 0,
	0, 166, 474, 475, 258, 476, 477, 478, 748, 167,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 744, 745, 801, 760, 761, 758, 759, 771, 0,
	1384, 1382, 0, 0, 0, 0, 770, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 847,
	776, 0, 0, 0, 264, 265, 266, 216, 816, 795,
	827, 785, 826, 825, 0, 270, 271, 787, 786, 274,
	275, 276, 777, 846, 277, 873, 872, 222, 0, 278,
	853, 0, 836, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	856, 291, 292, 839, 837, 838, 843, 841, 840, 842,
	293, 294, 501, 295, 829, 297, 823, 822, 750, 298,
	0, 299, 0, 300, 0, 0, 301, 821, 303, 0,
	304, 0, 305, 306, 0, 755, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 767, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 820, 818, 819, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	231, 325, 0, 326, 327, 328, 329, 330, 331, 848,
	849, 852, 860, 0, 850, 797, 0, 0, 0, 0,
	332, 334, 341, 0, 859, 335, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 342, 861, 862, 343,
	344, 345, 863, 834, 835, 0, 0, 348, 349, 350,
	0, 352, 351, 0, 353, 878, 864, 354, 355, 865,
	0, 356, 357, 0, 0, 358, 0, 359, 752, 751,
	360, 361, 363, 789, 362, 866, 365, 366, 368, 367,
	747, 0, 867, 768, 851, 824, 369, 370, 0, 798,
	799, 0, 0, 373, 374, 0, 0, 375, 242, 868,
	376, 869, 879, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 880, 385, 245, 386, 0, 387, 388, 389,
	390, 391, 392, 817, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 870, 408, 409, 410, 411, 756, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 172, 428, 429,
	790, 791, 793, 794, 424, 430, 431, 844, 432, 413,
	414, 433, 871, 434, 815, 792, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 855, 441, 442, 443, 881,
	0, 447, 448, 174, 449, 450, 451, 452, 453, 311,
	454, 312, 788, 0, 830, 831, 832, 833, 0, 0,
	457, 458, 882, 883, 766, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 845, 468, 0, 796,
	469, 470, 471, 1157, 874, 0, 473, 472, 257, 0,
	0, 0, 166, 474, 475, 258, 476, 477, 478, 748,
	167, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 801, 760, 761, 758, 759, 771,
	0, 1384, 2232, 0, 0, 0, 0, 770, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 776, 0, 0, 0, 264, 265, 266, 216, 816,
	795, 827, 785, 826, 825, 0, 270, 271, 787, 786,
	274, 275, 276, 777, 846, 277, 873, 872, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 501, 295, 829, 297, 823, 822, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 821, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 767, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	848, 849, 852, 860, 0, 850, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 342, 861, 862,
	343, 344, 345, 863, 834, 835, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 878, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 752,
	751, 360, 361, 363, 789, 362, 866, 365, 366, 368,
	367, 747, 0, 867, 768, 851, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 756, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 172, 428,
	429, 790, 791, 793, 794, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 792, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 174, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 457, 458, 882, 883, 766, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 845, 468, 0,
	796, 469, 470, 471, 1157, 874, 0, 473, 472, 257,
	0, 0, 0, 166, 474, 475, 258, 476, 477, 478,
	748, 167, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 801, 760, 761, 758, 759,
	771, 0, 1384, 1382, 0, 0, 0, 0, 770, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 795, 827, 785, 826, 825, 1942, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 501, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 1947, 858, 323, 0, 324,
	877, 0, 231, 325, 0, 326, 327, 328, 329, 330,
	331, 848, 849, 852, 860, 0, 850, 797, 0, 0,
	0, 0, 332, 334, 341, 0, 859, 335, 809, 800,
	810, 811, 812, 813, 814, 0, 802, 0, 342, 861,
	862, 343, 344, 345, 863, 834, 835, 0, 0, 348,
	349, 350, 0, 352, 351, 1943, 353, 878, 864, 354,
	355, 865, 0, 356, 357, 0, 0, 358, 0, 359,
	752, 751, 360, 361, 363, 789, 362, 866, 365, 366,
	368, 367, 747, 0, 867, 768, 851, 824, 369, 370,
	0, 798, 799, 0, 0, 373, 374, 0, 0, 375,
	242, 868, 376, 869, 879, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 880, 385, 245, 386, 0, 387,
	388, 389, 390, 391, 392, 817, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 756,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 790, 791, 793, 794, 424, 430, 431, 844,
	432, 413, 414, 433, 871, 434, 815, 792, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 855, 441, 442,
	443, 881, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 788, 0, 830, 831, 832, 833,
	0, 1944, 457, 458, 882, 883, 766, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 845, 468,
	0, 796, 469, 470, 471, 255, 874, 0, 473, 472,
	257, 0, 0, 0, 0, 474, 475, 258, 476, 477,
	478, 748, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 744, 745, 801, 760, 761, 758,
	759, 771, 0, 772, 0, 0, 0, 0, 0, 770,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 847, 776, 0, 0, 0, 264, 265, 266,
	216, 816, 795, 827, 785, 826, 825, 0, 270, 271,
	787, 786, 274, 275, 276, 777, 846, 277, 873, 872,
	222, 0, 278, 853, 0, 836, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 839, 837, 838, 843,
	841, 840, 842, 293, 294, 501, 295, 829, 297, 823,
	822, 750, 298, 0, 299, 0, 300, 0, 0, 301,
	821, 303, 0, 304, 0, 305, 306, 0, 755, 307,
	308, 310, 313, 309, 314, 315, 875, 876, 767, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 820, 818,
	819, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 877, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 848, 849, 852, 860, 0, 850, 797, 0,
	0, 0, 0, 332, 334, 341, 0, 859, 335, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 342,
	861, 862, 343, 344, 345, 863, 834, 835, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 878, 864,
	354, 355, 865, 0, 356, 357, 0, 0, 358, 0,
	359, 752, 751, 360, 361, 363, 789, 362, 866, 365,
	366, 368, 367, 747, 2735, 867, 768, 851, 824, 369,
	370, 0, 798, 799, 0, 0, 373, 374, 0, 0,
	375, 242, 868, 376, 869, 879, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 880, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 817, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 870, 408, 409, 410, 411,
	756, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 790, 791, 793, 794, 424, 430, 431,
	844, 432, 413, 414, 433, 871, 434, 815, 792, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 855, 441,
	442, 443, 881, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 457, 458, 882, 883, 766, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 845,
	468, 0, 796, 469, 470, 471, 255, 874, 0, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 1446, 801, 760,
	761, 758, 759, 771, 772, 0, 0, 0, 0, 0,
	770, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 847, 776, 0, 0, 0, 264,
	265, 266, 216, 816, 795, 827, 785, 826, 825, 0,
	270, 271, 787, 786, 274, 275, 276, 777, 846, 277,
	873, 872, 222, 0, 278, 853, 0, 836, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 856, 291, 292, 839, 837,
	838, 843, 841, 840, 842, 293, 294, 501, 295, 829,
	297, 823, 822, 750, 298, 0, 299, 0, 300, 0,
	0, 301, 821, 303, 0, 304, 0, 305, 306, 0,
	755, 307, 308, 310, 313, 309, 314, 315, 875, 876,
	767, 857, 0, 0, 0, 0, 0, 316, 317, 318,
	820, 818, 819, 0, 321, 0, 322, 0, 0, 858,
	323, 0, 324, 877, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 848, 849, 852, 860, 0, 850,
	797, 0, 0, 0, 1772, 332, 334, 341, 0, 859,
	335, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 342, 861, 862, 343, 344, 345, 863, 834, 835,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	878, 864, 354, 355, 865, 0, 356, 357, 0, 0,
	358, 0, 359, 752, 751, 360, 361, 363, 789, 362,
	866, 365, 366, 368, 367, 747, 0, 867, 768, 851,
	824, 369, 370, 0, 798, 799, 0, 0, 373, 374,
	0, 0, 375, 242, 868, 376, 869, 879, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 880, 385, 245,
	386, 1771, 387, 388, 389, 390, 391, 392, 817, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 870, 408, 409,
	410, 411, 756, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 790, 791, 793, 794, 424,
	430, 431, 844, 432, 413, 414, 433, 871, 434, 815,
	792, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	855, 441, 442, 443, 881, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 457, 458, 882, 883, 766,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 845, 468, 0, 796, 469, 470, 471, 255, 874,
	0, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 0,
	0, 0, 0, 0, 0, 0, 772, 0, 0, 0,
	0, 740, 770, 801, 760, 761, 758, 759, 771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 847,
	776, 0, 0, 0, 264, 265, 266, 216, 816, 795,
	827, 785, 826, 825, 0, 270, 271, 787, 786, 274,
	275, 276, 777, 846, 277, 873, 872, 222, 0, 278,
	853, 0, 836, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	856, 291, 292, 839, 837, 838, 843, 841, 840, 842,
	293, 294, 501, 295, 829, 297, 823, 822, 750, 298,
	0, 299, 0, 300, 0, 0, 301, 821, 303, 0,
	304, 0, 305, 306, 0, 755, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 767, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 820, 818, 819, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	231, 325, 0, 326, 327, 328, 329, 330, 331, 848,
	849, 852, 860, 0, 850, 797, 0, 0, 0, 0,
	332, 334, 341, 0, 859, 335, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 342, 861, 862, 343,
	344, 345, 863, 834, 835, 0, 0, 348, 349, 350,
	0, 352, 351, 0, 353, 878, 864, 354, 355, 865,
	0, 356, 357, 0, 0, 358, 0, 359, 752, 751,
	360, 361, 363, 789, 362, 866, 365, 366, 368, 367,
	747, 0, 867, 768, 851, 824, 369, 370, 0, 798,
	799, 742, 0, 373, 374, 0, 0, 375, 242, 868,
	376, 869, 879, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 880, 385, 245, 386, 0, 387, 388, 389,
	390, 391, 392, 817, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 870, 408, 409, 410, 411, 756, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	790, 791, 793, 794, 424, 430, 431, 844, 432, 413,
	414, 433, 871, 434, 815, 792, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 855, 441, 442, 443, 881,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 788, 0, 830, 831, 832, 833, 0, 0,
	457, 458, 882, 883, 766, 459, 460, 0, 461, 462,
	0, 0, 463, 464, 465, 467, 845, 468, 0, 796,
	469, 470, 471, 255, 874, 0, 473, 472, 257, 0,
	0, 0, 0, 474, 475, 258, 476, 477, 478, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 801, 760, 761, 758, 759, 771,
	0, 772, 0, 0, 0, 0, 0, 770, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 776, 0, 0, 0, 264, 265, 266, 216, 816,
	795, 827, 785, 826, 825, 0, 270, 271, 787, 786,
	274, 275, 276, 777, 846, 277, 873, 872, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 501, 295, 829, 297, 823, 822, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 821, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 767, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	848, 849, 852, 860, 0, 850, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 342, 861, 862,
	343, 344, 345, 863, 834, 835, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 878, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 752,
	751, 360, 361, 363, 789, 362, 866, 365, 366, 368,
	367, 747, 0, 867, 768, 851, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 756, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 790, 791, 793, 794, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 792, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 457, 458, 882, 883, 766, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 845, 468, 0,
	796, 469, 470, 471, 255, 874, 2561, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 801, 760, 761, 758, 759,
	771, 0, 772, 0, 0, 0, 0, 0, 770, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 795, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 501, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 325, 0, 326, 327, 328, 329, 330,
	331, 848, 849, 852, 860, 0, 850, 797, 0, 0,
	0, 0, 332, 334, 341, 0, 859, 335, 809, 800,
	810, 811, 812, 813, 814, 0, 802, 0, 342, 861,
	862, 343, 344, 345, 863, 834, 835, 0, 0, 348,
	349, 350, 0, 352, 351, 0, 353, 878, 864, 354,
	355, 865, 0, 356, 357, 0, 0, 358, 0, 359,
	752, 751, 360, 361, 363, 789, 362, 866, 365, 366,
	368, 367, 747, 0, 867, 768, 851, 824, 369, 370,
	0, 798, 799, 742, 0, 373, 374, 0, 0, 375,
	242, 868, 376, 869, 879, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 880, 385, 245, 386, 0, 387,
	388, 389, 390, 391, 392, 817, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 756,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 790, 791, 793, 794, 424, 430, 431, 844,
	432, 413, 414, 433, 871, 434, 815, 792, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 855, 441, 442,
	443, 881, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 788, 0, 830, 831, 832, 833,
	0, 0, 457, 458, 882, 883, 766, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 845, 468,
	0, 796, 469, 470, 471, 255, 874, 0, 473, 472,
	257, 0, 0, 0, 0, 474, 475, 258, 476, 477,
	478, 748, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 744, 745, 801, 760, 761, 758,
	759, 771, 0, 772, 0, 0, 0, 0, 0, 770,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 847, 776, 0, 0, 0, 264, 265, 266,
	216, 816, 795, 827, 785, 826, 825, 0, 270, 271,
	787, 786, 274, 275, 276, 777, 846, 277, 873, 872,
	222, 0, 278, 853, 0, 836, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 839, 837, 838, 843,
	841, 840, 842, 293, 294, 501, 295, 829, 297, 823,
	822, 750, 298, 0, 299, 0, 300, 0, 0, 301,
	821, 303, 0, 304, 0, 305, 306, 0, 755, 307,
	308, 310, 313, 309, 314, 315, 875, 876, 767, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 820, 818,
	819, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 877, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 848, 849, 852, 860, 0, 850, 797, 0,
	0, 0, 0, 332, 334, 341, 0, 859, 335, 809,
	800, 810, 811, 812, 813, 814, 0, 802, 0, 342,
	861, 862, 343, 344, 345, 863, 834, 835, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 878, 864,
	354, 355, 865, 0, 356, 357, 0, 0, 358, 0,
	359, 752, 751, 360, 361, 363, 789, 362, 866, 365,
	366, 368, 367, 747, 0, 867, 768, 851, 824, 369,
	370, 0, 798, 799, 0, 0, 373, 374, 0, 0,
	375, 242, 868, 376, 869, 879, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 880, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 817, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 870, 408, 409, 410, 411,
	756, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 790, 791, 793, 794, 424, 430, 431,
	844, 432, 413, 414, 433, 871, 434, 815, 792, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 855, 441,
	442, 443, 881, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 788, 0, 830, 831, 832,
	833, 0, 0, 457, 458, 882, 883, 766, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 845,
	468, 0, 796, 469, 470, 471, 255, 874, 0, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 748, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 744, 745, 1446, 801, 760,
	761, 758, 759, 771, 772, 0, 0, 0, 0, 0,
	770, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 847, 776, 0, 0, 0, 264,
	265, 266, 216, 816, 795, 827, 785, 826, 825, 0,
	270, 271, 787, 786, 274, 275, 276, 777, 846, 277,
	873, 872, 222, 0, 278, 853, 0, 836, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 856, 291, 292, 839, 837,
	838, 843, 841, 840, 842, 293, 294, 501, 295, 829,
	297, 823, 822, 750, 298, 0, 299, 0, 300, 0,
	0, 301, 821, 303, 0, 304, 0, 305, 306, 0,
	755, 307, 308, 310, 313, 309, 314, 315, 875, 876,
	767, 857, 0, 0, 0, 0, 0, 316, 317, 318,
	820, 818, 819, 0, 321, 0, 322, 0, 1947, 858,
	323, 0, 324, 877, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 848, 849, 852, 860, 0, 850,
	797, 0, 0, 0, 0, 332, 334, 341, 0, 859,
	335, 809, 800, 810, 811, 812, 813, 814, 0, 802,
	0, 342, 861, 862, 343, 344, 345, 863, 834, 835,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	878, 864, 354, 355, 865, 0, 356, 357, 0, 0,
	358, 0, 359, 752, 751, 360, 361, 363, 789, 362,
	866, 365, 366, 368, 367, 747, 0, 867, 768, 851,
	824, 369, 370, 0, 798, 799, 0, 0, 373, 374,
	0, 0, 375, 242, 868, 376, 869, 879, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 880, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 817, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 870, 408, 409,
	410, 411, 756, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 790, 791, 793, 794, 424,
	430, 431, 844, 432, 413, 414, 433, 871, 434, 815,
	792, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	855, 441, 442, 443, 881, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 788, 0, 830,
	831, 832, 833, 0, 0, 457, 458, 882, 883, 766,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 845, 468, 0, 796, 469, 470, 471, 255, 874,
	0, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 748, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 744, 745, 801,
	760, 761, 758, 759, 771, 0, 772, 0, 0, 0,
	0, 0, 770, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 795, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 501, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 325, 0, 326,
	327, 328, 329, 330, 331, 848, 849, 852, 860, 0,
	850, 797, 0, 0, 0, 0, 332, 334, 341, 0,
	859, 335, 809, 800, 810, 811, 812, 813, 814, 0,
	802, 0, 342, 861, 862, 343, 344, 345, 863, 834,
	835, 0, 0, 348, 349, 350, 0, 352, 351, 0,
	353, 878, 864, 354, 355, 865, 0, 356, 357, 0,
	0, 358, 0, 359, 752, 751, 360, 361, 363, 789,
	362, 866, 365, 366, 368, 367, 747, 0, 867, 768,
	851, 824, 369, 370, 0, 798, 799, 0, 0, 373,
	374, 0, 0, 375, 242, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	245, 386, 0, 387, 388, 389, 390, 391, 392, 817,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 756, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 790, 791, 793, 794,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	815, 792, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 855, 441, 442, 443, 881, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 788, 0,
	830, 831, 832, 833, 0, 0, 457, 458, 882, 883,
	766, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 845, 468, 0, 796, 469, 470, 471, 255,
	874, 0, 473, 472, 257, 0, 0, 0, 0, 474,
	475, 258, 476, 477, 478, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	0, 0, 0, 0, 0, 0, 0, 772, 1382, 0,
	0, 0, 1938, 770, 801, 760, 761, 758, 759, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 776, 0, 0, 0, 264, 265, 266, 216, 816,
	795, 827, 785, 826, 825, 0, 270, 271, 787, 786,
	274, 275, 276, 777, 846, 277, 873, 872, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 501, 295, 829, 297, 823, 822, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 821, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 767, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	848, 849, 852, 860, 0, 850, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 342, 861, 862,
	343, 344, 345, 863, 834, 835, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 878, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 752,
	751, 360, 361, 363, 789, 362, 866, 365, 366, 368,
	367, 747, 0, 867, 768, 851, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 756, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 790, 791, 793, 794, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 792, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 457, 458, 882, 883, 766, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 845, 468, 0,
	796, 469, 470, 471, 255, 874, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 0, 1927, 770, 801,
	760, 761, 758, 759, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 795, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 501, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 325, 0, 326,
	327, 328, 329, 330, 331, 848, 849, 852, 860, 0,
	850, 797, 0, 0, 0, 0, 332, 334, 341, 0,
	859, 335, 809, 800, 810, 811, 812, 813, 814, 0,
	802, 0, 342, 861, 862, 343, 344, 345, 863, 834,
	835, 0, 0, 348, 349, 350, 0, 352, 351, 0,
	353, 878, 864, 354, 355, 865, 0, 356, 357, 0,
	0, 358, 0, 359, 752, 751, 360, 361, 363, 789,
	362, 866, 365, 366, 368, 367, 747, 0, 867, 768,
	851, 824, 369, 370, 0, 798, 799, 0, 0, 373,
	374, 0, 0, 375, 242, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	245, 386, 0, 387, 388, 389, 390, 391, 392, 817,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 756, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 790, 791, 793, 794,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	815, 792, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 855, 441, 442, 443, 881, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 788, 0,
	830, 831, 832, 833, 0, 0, 457, 458, 882, 883,
	766, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 845, 468, 0, 796, 469, 470, 471, 255,
	874, 0, 473, 472, 257, 0, 0, 0, 0, 474,
	475, 258, 476, 477, 478, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	0, 0, 0, 0, 0, 0, 0, 772, 0, 0,
	0, 0, 1925, 770, 801, 760, 761, 758, 759, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 776, 0, 0, 0, 264, 265, 266, 216, 816,
	795, 827, 785, 826, 825, 0, 270, 271, 787, 786,
	274, 275, 276, 777, 846, 277, 873, 872, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 501, 295, 829, 297, 823, 822, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 821, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 767, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	848, 849, 852, 860, 0, 850, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 342, 861, 862,
	343, 344, 345, 863, 834, 835, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 878, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 752,
	751, 360, 361, 363, 789, 362, 866, 365, 366, 368,
	367, 747, 0, 867, 768, 851, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 756, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 790, 791, 793, 794, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 792, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 457, 458, 882, 883, 766, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 845, 468, 0,
	796, 469, 470, 471, 255, 874, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 0, 1923, 770, 801,
	760, 761, 758, 759, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 795, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 501, 295,
	829, 297, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 325, 0, 326,
	327, 328, 329, 330, 331, 848, 849, 852, 860, 0,
	850, 797, 0, 0, 0, 0, 332, 334, 341, 0,
	859, 335, 809, 800, 810, 811, 812, 813, 814, 0,
	802, 0, 342, 861, 862, 343, 344, 345, 863, 834,
	835, 0, 0, 348, 349, 350, 0, 352, 351, 0,
	353, 878, 864, 354, 355, 865, 0, 356, 357, 0,
	0, 358, 0, 359, 752, 751, 360, 361, 363, 789,
	362, 866, 365, 366, 368, 367, 747, 0, 867, 768,
	851, 824, 369, 370, 0, 798, 799, 0, 0, 373,
	374, 0, 0, 375, 242, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	245, 386, 0, 387, 388, 389, 390, 391, 392, 817,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 756, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 790, 791, 793, 794,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	815, 792, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 855, 441, 442, 443, 881, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 788, 0,
	830, 831, 832, 833, 0, 0, 457, 458, 882, 883,
	766, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 845, 468, 0, 796, 469, 470, 471, 255,
	874, 0, 473, 472, 257, 0, 0, 0, 0, 474,
	475, 258, 476, 477, 478, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	0, 0, 0, 0, 0, 0, 0, 772, 0, 0,
	0, 0, 1921, 770, 1913, 760, 761, 758, 759, 771,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 776, 0, 0, 0, 264, 265, 266, 216, 816,
	795, 827, 785, 826, 825, 0, 270, 271, 787, 786,
	274, 275, 276, 777, 846, 277, 873, 872, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 501, 295, 829, 1916, 823, 822, 750,
	298, 0, 299, 0, 300, 0, 0, 301, 821, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 767, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 325, 0, 326, 327, 1917, 329, 330, 331,
	848, 849, 852, 860, 0, 850, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 342, 861, 862,
	343, 344, 345, 863, 834, 835, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 878, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 752,
	751, 1918, 1915, 363, 789, 362, 866, 365, 366, 368,
	367, 747, 0, 867, 768, 851, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 756, 412,
	0, 416, 417, 418, 419, 420, 421, 1919, 0, 428,
	429, 790, 791, 793, 794, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 792, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 457, 458, 882, 883, 766, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 845, 468, 0,
	796, 469, 470, 471, 255, 874, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 1914, 478,
	748, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 744, 745, 0, 0, 0, 0, 0,
	0, 0, 772, 0, 0, 0, 0, 1910, 770, 1913,
	760, 761, 758, 759, 771, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 0,
	263, 0, 0, 0, 0, 847, 776, 0, 0, 0,
	264, 265, 266, 216, 816, 795, 827, 785, 826, 825,
	0, 270, 271, 787, 786, 274, 275, 276, 777, 846,
	277, 873, 872, 222, 0, 278, 853, 0, 836, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 287, 284,
	0, 288, 0, 289, 290, 0, 856, 291, 292, 839,
	837, 838, 843, 841, 840, 842, 293, 294, 501, 295,
	829, 1916, 823, 822, 750, 298, 0, 299, 0, 300,
	0, 0, 301, 821, 303, 0, 304, 0, 305, 306,
	0, 755, 307, 308, 310, 313, 309, 314, 315, 875,
	876, 767, 857, 0, 0, 0, 0, 0, 316, 317,
	318, 820, 818, 819, 0, 321, 0, 322, 0, 0,
	858, 323, 0, 324, 877, 0, 231, 325, 0, 326,
	327, 1917, 329, 330, 331, 848, 849, 852, 860, 0,
	850, 797, 0, 0, 0, 0, 332, 334, 341, 0,
	859, 335, 809, 800, 810, 811, 812, 813, 814, 0,
	802, 0, 342, 861, 862, 343, 344, 345, 863, 834,
	835, 0, 0, 348, 349, 350, 0, 352, 351, 0,
	353, 878, 864, 354, 355, 865, 0, 356, 357, 0,
	0, 358, 0, 359, 752, 751, 1918, 1915, 363, 789,
	362, 866, 365, 366, 368, 367, 747, 0, 867, 768,
	851, 824, 369, 370, 0, 798, 799, 0, 0, 373,
	374, 0, 0, 375, 242, 868, 376, 869, 879, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 880, 385,
	245, 386, 0, 387, 388, 389, 390, 391, 392, 817,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 870, 408,
	409, 410, 411, 756, 412, 0, 416, 417, 418, 419,
	420, 421, 1919, 0, 428, 429, 790, 791, 793, 794,
	424, 430, 431, 844, 432, 413, 414, 433, 871, 434,
	815, 792, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 855, 441, 442, 443, 881, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 788, 0,
	830, 831, 832, 833, 0, 0, 457, 458, 882, 883,
	766, 459, 460, 0, 461, 462, 0, 0, 463, 464,
	465, 467, 845, 468, 0, 796, 469, 470, 471, 255,
	874, 0, 473, 472, 257, 0, 0, 0, 0, 474,
	475, 258, 476, 1914, 478, 748, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 0, 744, 745,
	801, 760, 761, 758, 759, 771, 0, 772, 0, 0,
	0, 0, 0, 770, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 847, 776, 0, 0,
	0, 264, 265, 266, 216, 816, 795, 827, 785, 826,
	825, 0, 270, 271, 787, 786, 274, 275, 276, 777,
	846, 277, 873, 872, 222, 0, 278, 853, 0, 836,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	839, 837, 838, 843, 841, 840, 842, 293, 294, 501,
	295, 829, 297, 823, 822, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 821, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 767, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 820, 818, 819, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 848, 849, 852, 860,
	0, 850, 797, 0, 0, 0, 0, 332, 334, 341,
	0, 859, 335, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 342, 861, 862, 343, 344, 345, 863,
	834, 835, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 878, 864, 354, 355, 865, 0, 356, 357,
	0, 0, 358, 0, 359, 752, 751, 360, 361, 363,
	789, 362, 866, 365, 366, 368, 367, 747, 0, 867,
	768, 851, 824, 369, 370, 0, 798, 799, 0, 0,
	373, 374, 0, 0, 375, 242, 868, 376, 869, 879,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 880,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	817, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 756, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 790, 791, 793,
	794, 424, 430, 431, 844, 432, 413, 414, 433, 871,
	434, 815, 792, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 855, 441, 442, 443, 881, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 457, 458, 882,
	883, 766, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 845, 468, 0, 796, 469, 470, 471,
	255, 874, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 748, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 0, 0, 0, 0, 0, 1390, 0, 772, 0,
	0, 0, 0, 0, 770, 801, 760, 761, 758, 759,
	771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 1759, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 795, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 501, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 325, 0, 326, 327, 328, 329, 330,
	331, 848, 849, 852, 860, 0, 850, 797, 0, 0,
	0, 0, 332, 334, 341, 0, 859, 335, 809, 800,
	810, 811, 812, 813, 814, 0, 802, 0, 342, 861,
	862, 343, 344, 345, 863, 834, 835, 0, 0, 348,
	349, 350, 0, 352, 351, 0, 353, 878, 864, 354,
	355, 865, 0, 356, 357, 0, 0, 358, 0, 359,
	752, 751, 360, 361, 363, 789, 362, 866, 365, 366,
	368, 367, 747, 0, 867, 768, 851, 824, 369, 370,
	0, 798, 799, 0, 0, 373, 374, 0, 0, 375,
	242, 868, 376, 869, 879, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 880, 385, 245, 386, 0, 387,
	388, 389, 390, 391, 392, 817, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 756,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 790, 791, 793, 794, 424, 430, 431, 844,
	432, 413, 414, 433, 871, 434, 815, 792, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 855, 441, 442,
	443, 881, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 788, 0, 830, 831, 832, 833,
	0, 0, 457, 458, 882, 883, 766, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 845, 468,
	0, 796, 469, 470, 471, 255, 874, 0, 473, 472,
	257, 0, 0, 0, 0, 474, 475, 258, 476, 477,
	478, 748, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 744, 745, 0, 0, 0, 0,
	0, 0, 0, 772, 0, 0, 0, 0, 1079, 770,
	801, 760, 761, 758, 759, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 847, 776, 0, 0,
	0, 264, 265, 266, 216, 816, 795, 827, 785, 826,
	825, 0, 270, 271, 787, 786, 274, 275, 276, 777,
	846, 277, 873, 872, 222, 0, 278, 853, 0, 836,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	839, 837, 838, 843, 841, 840, 842, 293, 294, 501,
	295, 829, 297, 823, 822, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 821, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 767, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 820, 818, 819, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 1078, 849, 852, 860,
	0, 850, 797, 0, 0, 0, 0, 332, 334, 341,
	0, 859, 335, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 342, 861, 862, 343, 344, 345, 863,
	834, 835, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 878, 864, 354, 355, 865, 0, 356, 357,
	0, 0, 358, 0, 359, 752, 751, 360, 361, 363,
	789, 362, 866, 365, 366, 368, 367, 747, 0, 867,
	768, 851, 824, 369, 370, 0, 798, 799, 0, 0,
	373, 374, 0, 0, 375, 242, 868, 376, 869, 879,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 880,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	817, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 756, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 790, 791, 793,
	794, 424, 430, 431, 844, 432, 413, 414, 433, 871,
	434, 815, 792, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 855, 441, 442, 443, 881, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 457, 458, 882,
	883, 766, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 845, 468, 0, 796, 469, 470, 471,
	255, 874, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 748, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 0, 0, 0, 0, 0, 0, 0, 772, 0,
	0, 0, 0, 1073, 770, 801, 760, 761, 758, 759,
	771, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 0, 263, 0, 0, 0,
	0, 847, 776, 0, 0, 0, 264, 265, 266, 216,
	816, 795, 827, 785, 826, 825, 0, 270, 271, 787,
	786, 274, 275, 276, 777, 846, 277, 873, 872, 222,
	0, 278, 853, 0, 836, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 287, 284, 0, 288, 0, 289,
	290, 0, 856, 291, 292, 839, 837, 838, 843, 841,
	840, 842, 293, 294, 501, 295, 829, 297, 823, 822,
	750, 298, 0, 299, 0, 300, 0, 0, 301, 821,
	303, 0, 304, 0, 305, 306, 0, 755, 307, 308,
	310, 313, 309, 314, 315, 875, 876, 767, 857, 0,
	0, 0, 0, 0, 316, 317, 318, 820, 818, 819,
	0, 321, 0, 322, 0, 0, 858, 323, 0, 324,
	877, 0, 231, 325, 0, 326, 327, 328, 329, 330,
	331, 1072, 849, 852, 860, 0, 850, 797, 0, 0,
	0, 0, 332, 334, 341, 0, 859, 335, 809, 800,
	810, 811, 812, 813, 814, 0, 802, 0, 342, 861,
	862, 343, 344, 345, 863, 834, 835, 0, 0, 348,
	349, 350, 0, 352, 351, 0, 353, 878, 864, 354,
	355, 865, 0, 356, 357, 0, 0, 358, 0, 359,
	752, 751, 360, 361, 363, 789, 362, 866, 365, 366,
	368, 367, 747, 0, 867, 768, 851, 824, 369, 370,
	0, 798, 799, 0, 0, 373, 374, 0, 0, 375,
	242, 868, 376, 869, 879, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 880, 385, 245, 386, 0, 387,
	388, 389, 390, 391, 392, 817, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 870, 408, 409, 410, 411, 756,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 790, 791, 793, 794, 424, 430, 431, 844,
	432, 413, 414, 433, 871, 434, 815, 792, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 855, 441, 442,
	443, 881, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 788, 0, 830, 831, 832, 833,
	0, 0, 457, 458, 882, 883, 766, 459, 460, 0,
	461, 462, 0, 0, 463, 464, 465, 467, 845, 468,
	0, 796, 469, 470, 471, 255, 874, 0, 473, 472,
	257, 0, 0, 0, 0, 474, 475, 258, 476, 477,
	478, 748, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 744, 745, 0, 0, 0, 0,
	0, 0, 0, 772, 0, 0, 0, 0, 1068, 770,
	801, 760, 761, 758, 759, 771, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 847, 776, 0, 0,
	0, 264, 265, 266, 216, 816, 795, 827, 785, 826,
	825, 0, 270, 271, 787, 786, 274, 275, 276, 777,
	846, 277, 873, 872, 222, 0, 278, 853, 0, 836,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	839, 837, 838, 843, 841, 840, 842, 293, 294, 501,
	295, 829, 297, 823, 822, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 821, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 767, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 820, 818, 819, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 848, 849, 852, 860,
	0, 850, 797, 0, 0, 0, 0, 332, 334, 341,
	0, 859, 335, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 342, 861, 862, 343, 344, 345, 863,
	834, 835, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 878, 864, 354, 355, 865, 0, 356, 357,
	0, 0, 358, 0, 359, 752, 751, 360, 361, 363,
	789, 362, 866, 365, 366, 368, 367, 747, 0, 867,
	768, 851, 824, 369, 370, 0, 798, 799, 0, 0,
	373, 374, 0, 0, 375, 242, 868, 376, 869, 879,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 880,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	817, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 756, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 790, 791, 793,
	794, 424, 430, 431, 844, 432, 413, 414, 433, 871,
	434, 815, 792, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 855, 441, 442, 443, 881, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 457, 458, 882,
	883, 766, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 845, 468, 0, 796, 469, 470, 471,
	255, 874, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 748, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 744,
	745, 801, 760, 761, 758, 759, 771, 0, 772, 0,
	0, 0, 0, 0, 770, 0, 0, 259, 260, 261,
	262, 0, 263, 0, 0, 0, 0, 847, 776, 0,
	0, 0, 264, 265, 266, 216, 816, 795, 827, 785,
	826, 825, 0, 270, 271, 787, 786, 274, 275, 276,
	777, 846, 277, 873, 872, 222, 0, 278, 853, 0,
	836, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	287, 284, 0, 288, 0, 289, 290, 0, 856, 291,
	292, 839, 837, 838, 843, 841, 840, 842, 293, 294,
	501, 295, 829, 297, 823, 822, 750, 298, 0, 299,
	0, 300, 0, 0, 301, 821, 303, 0, 304, 0,
	305, 306, 0, 755, 307, 308, 310, 313, 309, 314,
	315, 875, 876, 767, 857, 0, 0, 0, 0, 0,
	316, 317, 318, 820, 818, 819, 0, 321, 0, 322,
	0, 0, 858, 323, 0, 324, 877, 0, 231, 325,
	0, 326, 327, 328, 329, 330, 331, 848, 849, 852,
	860, 0, 850, 797, 0, 0, 0, 0, 332, 334,
	341, 0, 859, 335, 809, 800, 810, 811, 812, 813,
	814, 0, 802, 0, 342, 861, 862, 343, 344, 345,
	863, 834, 835, 0, 0, 348, 349, 350, 0, 352,
	351, 0, 353, 878, 864, 354, 355, 865, 0, 356,
	357, 0, 0, 358, 0, 359, 752, 751, 360, 361,
	363, 789, 362, 866, 365, 366, 368, 367, 747, 0,
	867, 768, 851, 824, 369, 370, 0, 798, 799, 0,
	0, 373, 374, 0, 0, 375, 242, 868, 376, 869,
	879, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	880, 385, 245, 386, 0, 387, 388, 389, 390, 391,
	392, 817, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	870, 408, 409, 410, 411, 756, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 790, 791,
	793, 794, 424, 430, 431, 844, 432, 413, 414, 433,
	871, 434, 815, 792, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 855, 441, 442, 443, 881, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	788, 0, 830, 831, 832, 833, 0, 0, 457, 458,
	882, 883, 766, 459, 460, 0, 461, 462, 0, 0,
	463, 464, 465, 467, 845, 468, 0, 796, 469, 470,
	471, 255, 874, 0, 473, 472, 257, 0, 0, 0,
	0, 474, 475, 258, 476, 477, 478, 748, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	744, 745, 801, 760, 761, 758, 759, 771, 0, 772,
	0, 0, 0, 0, 0, 770, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 847, 776,
	0, 0, 0, 264, 265, 266, 216, 816, 795, 827,
	785, 826, 825, 0, 270, 271, 787, 786, 274, 275,
	276, 777, 846, 277, 873, 872, 222, 0, 278, 853,
	0, 836, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 3122, 839, 837, 838, 843, 841, 840, 842, 293,
	294, 501, 295, 829, 297, 823, 822, 750, 298, 0,
	299, 0, 300, 0, 0, 301, 821, 303, 0, 304,
	0, 305, 306, 0, 755, 307, 308, 310, 313, 309,
	314, 315, 875, 876, 767, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 820, 818, 819, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 877, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 848, 849,
	852, 860, 0, 850, 797, 0, 0, 0, 0, 332,
	334, 341, 0, 859, 335, 809, 800, 810, 811, 812,
	813, 814, 0, 802, 0, 342, 861, 862, 343, 344,
	345, 863, 834, 835, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 878, 864, 354, 355, 865, 0,
	356, 357, 0, 0, 358, 0, 359, 752, 751, 360,
	361, 363, 789, 362, 866, 365, 366, 368, 367, 747,
	0, 867, 768, 851, 824, 369, 370, 0, 798, 799,
	0, 0, 373, 374, 0, 0, 375, 242, 868, 376,
	869, 879, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 880, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 817, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 870, 408, 409, 410, 411, 756, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 790,
	791, 793, 794, 424, 430, 431, 844, 432, 413, 414,
	433, 871, 434, 815, 792, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 855, 441, 442, 443, 881, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 788, 0, 830, 831, 832, 833, 0, 0, 457,
	458, 882, 883, 766, 459, 460, 0, 3121, 462, 0,
	0, 463, 464, 465, 467, 845, 468, 0, 796, 469,
	470, 471, 255, 874, 0, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 748, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 744, 745, 801, 760, 761, 758, 759, 771, 0,
	772, 0, 0, 0, 0, 0, 770, 0, 0, 259,
	260, 261, 262, 0, 263, 0, 0, 0, 0, 847,
	776, 0, 0, 0, 264, 265, 266, 3120, 816, 795,
	827, 785, 826, 825, 0, 270, 271, 787, 786, 274,
	275, 276, 777, 846, 277, 873, 872, 222, 0, 278,
	853, 0, 836, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 287, 284, 0, 288, 0, 289, 290, 0,
	856, 291, 3122, 839, 837, 838, 843, 841, 840, 842,
	293, 294, 501, 295, 829, 297, 823, 822, 750, 298,
	0, 299, 0, 300, 0, 0, 301, 821, 303, 0,
	304, 0, 305, 306, 0, 755, 307, 308, 310, 313,
	309, 314, 315, 875, 876, 767, 857, 0, 0, 0,
	0, 0, 316, 317, 318, 820, 818, 819, 0, 321,
	0, 322, 0, 0, 858, 323, 0, 324, 877, 0,
	231, 325, 0, 326, 327, 328, 329, 330, 331, 848,
	849, 852, 860, 0, 850, 797, 0, 0, 0, 0,
	332, 334, 341, 0, 859, 335, 809, 800, 810, 811,
	812, 813, 814, 0, 802, 0, 342, 861, 862, 343,
	344, 345, 863, 834, 835, 0, 0, 348, 349, 350,
	0, 352, 351, 0, 353, 878, 864, 354, 355, 865,
	0, 356, 357, 0, 0, 358, 0, 359, 752, 751,
	360, 361, 363, 789, 362, 866, 365, 366, 368, 367,
	747, 0, 867, 768, 851, 824, 369, 370, 0, 798,
	799, 0, 0, 373, 374, 0, 0, 375, 242, 868,
	376, 869, 879, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 880, 385, 245, 386, 0, 387, 388, 389,
	390, 391, 392, 817, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 870, 408, 409, 410, 411, 756, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	790, 791, 793, 794, 424, 430, 431, 844, 432, 413,
	414, 433, 871, 434, 815, 792, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 855, 441, 442, 443, 881,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 788, 0, 830, 831, 832, 833, 0, 0,
	457, 458, 882, 883, 766, 459, 460, 0, 3121, 462,
	0, 0, 463, 464, 465, 467, 845, 468, 0, 796,
	469, 470, 471, 255, 874, 0, 473, 472, 257, 0,
	0, 0, 0, 474, 475, 258, 476, 477, 478, 748,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 744, 745, 801, 760, 761, 758, 759, 771,
	0, 772, 0, 0, 0, 0, 0, 770, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 776, 0, 0, 0, 264, 265, 266, 216, 816,
	795, 827, 785, 826, 825, 0, 270, 271, 787, 786,
	274, 275, 276, 777, 846, 277, 873, 872, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 501, 295, 829, 297, 823, 822, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 821, 303,
	0, 304, 0, 305, 306, 0, 755, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 767, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 820, 818, 819, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	848, 849, 852, 860, 0, 850, 797, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 809, 800, 810,
	811, 812, 813, 814, 0, 802, 0, 342, 861, 862,
	343, 344, 345, 863, 834, 835, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 878, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 937,
	936, 360, 361, 363, 789, 362, 866, 365, 366, 368,
	367, 0, 0, 867, 768, 851, 824, 369, 370, 0,
	798, 799, 0, 0, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 817, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 756, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 790, 791, 793, 794, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 815, 792, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 855, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 788, 0, 830, 831, 832, 833, 0,
	0, 457, 458, 882, 883, 766, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 845, 468, 0,
	796, 469, 470, 471, 255, 874, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	801, 760, 761, 758, 759, 771, 0, 0, 1935, 0,
	0, 0, 0, 1933, 1934, 0, 259, 260, 261, 262,
	0, 263, 772, 0, 0, 0, 847, 776, 770, 0,
	0, 264, 265, 266, 0, 816, 795, 827, 785, 826,
	825, 0, 270, 271, 787, 786, 274, 275, 276, 777,
	846, 277, 873, 872, 222, 0, 278, 853, 0, 836,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 3122,
	839, 837, 838, 843, 841, 840, 842, 293, 294, 501,
	295, 829, 297, 823, 822, 750, 298, 0, 299, 0,
	300, 0, 0, 301, 821, 303, 0, 304, 0, 305,
	306, 0, 755, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 767, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 820, 818, 819, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 848, 849, 852, 0,
	0, 850, 797, 0, 0, 0, 0, 332, 334, 341,
	0, 859, 335, 809, 800, 810, 811, 812, 813, 814,
	0, 802, 0, 342, 0, 0, 343, 344, 345, 863,
	834, 835, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 878, 864, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 752, 751, 360, 361, 363,
	789, 362, 866, 365, 366, 368, 367, 747, 0, 0,
	768, 851, 824, 369, 370, 0, 798, 799, 0, 0,
	373, 374, 0, 0, 375, 242, 868, 376, 869, 879,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 880,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	817, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 756, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 790, 791, 793,
	794, 424, 430, 431, 844, 432, 413, 414, 433, 0,
	434, 815, 792, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 855, 441, 442, 443, 881, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 788,
	0, 830, 831, 832, 833, 0, 0, 457, 458, 882,
	883, 766, 459, 460, 0, 3121, 462, 0, 0, 463,
	464, 465, 467, 845, 468, 0, 796, 469, 470, 471,
	255, 874, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 732, 0, 935, 0, 0, 0, 0, 744,
	745, 0, 0, 0, 0, 0, 0, 0, 772, 0,
	259, 260, 261, 262, 770, 263, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 846, 277, 220, 221, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 0, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	848, 849, 852, 860, 0, 850, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 861, 862,
	343, 344, 345, 863, 346, 347, 0, 0, 348, 349,
	350, 922, 352, 351, 0, 353, 878, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 937,
	936, 360, 361, 363, 364, 362, 866, 365, 366, 368,
	367, 0, 0, 867, 0, 851, 241, 369, 370, 0,
	371, 372, 0, 927, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 247, 929,
	0, 416, 417, 418, 419, 420, 421, 422, 172, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	881, 0, 447, 448, 174, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 882, 883, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 845, 468, 0,
	466, 469, 470, 471, 1157, 256, 0, 473, 472, 257,
	0, 0, 935, 166, 474, 475, 258, 476, 477, 478,
	0, 167, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 847, 0,
	919, 0, 1471, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 846, 277, 220, 221, 222, 0, 278, 853,
	0, 836, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 292, 839, 837, 838, 843, 841, 840, 842, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 875, 876, 0, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 877, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 848, 849,
	852, 860, 0, 850, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 859, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 861, 862, 343, 344,
	345, 863, 346, 347, 0, 0, 348, 349, 350, 922,
	352, 351, 0, 353, 878, 864, 354, 355, 865, 0,
	356, 357, 0, 0, 358, 0, 359, 937, 936, 360,
	361, 363, 364, 362, 866, 365, 366, 368, 367, 0,
	0, 867, 0, 851, 241, 369, 370, 0, 371, 372,
	0, 927, 373, 374, 0, 0, 375, 242, 868, 376,
	869, 879, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 880, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 870, 408, 409, 410, 411, 247, 929, 0, 416,
	417, 418, 419, 420, 421, 422, 172, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 844, 432, 413, 414,
	433, 871, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 881, 0,
	447, 448, 174, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 882, 883, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 845, 468, 0, 466, 469,
	470, 471, 1157, 256, 0, 473, 472, 257, 2336, 0,
	935, 166, 474, 475, 258, 476, 477, 478, 0, 167,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 847, 0, 919, 0,
	1471, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	846, 277, 220, 221, 222, 0, 278, 853, 0, 836,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	839, 837, 838, 843, 841, 840, 842, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	875, 876, 0, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 877, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 848, 849, 852, 860,
	0, 850, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 859, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 861, 862, 343, 344, 345, 863,
	346, 347, 0, 0, 348, 349, 350, 922, 352, 351,
	0, 353, 878, 864, 354, 355, 865, 0, 356, 357,
	0, 0, 358, 0, 359, 937, 936, 360, 361, 363,
	364, 362, 866, 365, 366, 368, 367, 0, 0, 867,
	0, 851, 241, 369, 370, 0, 371, 372, 0, 927,
	373, 374, 0, 0, 375, 242, 868, 376, 869, 879,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 880,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 247, 929, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 844, 432, 413, 414, 433, 871,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 881, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 882,
	883, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 845, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 918, 0, 935, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 847, 0, 919, 0, 924, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 846, 277,
	220, 221, 222, 0, 278, 853, 0, 836, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 856, 291, 292, 839, 837,
	838, 843, 841, 840, 842, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 875, 876,
	0, 857, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 858,
	323, 0, 324, 877, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 848, 849, 852, 860, 0, 850,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 859,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 861, 862, 343, 344, 345, 863, 346, 347,
	0, 0, 348, 349, 350, 922, 352, 351, 0, 353,
	878, 864, 354, 355, 865, 0, 356, 357, 0, 0,
	358, 0, 359, 937, 936, 360, 361, 363, 364, 362,
	866, 365, 366, 368, 367, 0, 0, 867, 0, 851,
	241, 369, 370, 0, 371, 372, 0, 927, 373, 374,
	0, 0, 375, 242, 868, 376, 869, 879, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 880, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 870, 408, 409,
	410, 411, 247, 929, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 844, 432, 413, 414, 433, 871, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 881, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 882, 883, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 845, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 0, 0, 935, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 847, 0, 919, 0, 924, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 846, 277, 220, 221,
	222, 0, 278, 853, 0, 836, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 839, 837, 838, 843,
	841, 840, 842, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 875, 876, 0, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 877, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 848, 849, 852, 860, 0, 850, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 859, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	861, 862, 343, 344, 345, 863, 346, 347, 0, 0,
	348, 349, 350, 922, 352, 351, 0, 353, 878, 864,
	354, 355, 865, 0, 356, 357, 0, 0, 358, 0,
	359, 937, 936, 360, 361, 363, 364, 362, 866, 365,
	366, 368, 367, 0, 0, 867, 0, 851, 241, 369,
	370, 0, 371, 372, 0, 927, 373, 374, 0, 0,
	375, 242, 868, 376, 869, 879, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 880, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 870, 408, 409, 410, 411,
	247, 929, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	844, 432, 413, 414, 433, 871, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 881, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 882, 883, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 845,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 0, 0, 935, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	847, 0, 919, 0, 924, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 846, 277, 220, 221, 222, 0,
	278, 853, 0, 836, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 839, 837, 838, 843, 841, 840,
	842, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 875, 876, 0, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 877,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	848, 849, 852, 860, 0, 850, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 861, 862,
	343, 344, 345, 863, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 878, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 937,
	936, 360, 361, 363, 364, 362, 866, 365, 366, 368,
	367, 0, 0, 867, 0, 851, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 879, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 880, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 844, 432,
	413, 414, 433, 871, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	881, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 882, 883, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 845, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	0, 0, 935, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 847, 0,
	0, 0, 2676, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 846, 277, 220, 221, 222, 0, 278, 853,
	0, 836, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 292, 839, 837, 838, 843, 841, 840, 842, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 875, 876, 0, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 877, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 848, 849,
	852, 860, 0, 850, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 859, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 861, 862, 343, 344,
	345, 863, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 878, 864, 354, 355, 865, 0,
	356, 357, 0, 0, 358, 0, 359, 937, 936, 360,
	361, 363, 364, 362, 866, 365, 366, 368, 367, 0,
	0, 867, 0, 851, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 868, 376,
	869, 879, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 880, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 870, 408, 409, 410, 411, 247, 929, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 844, 432, 413, 414,
	433, 871, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 881, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 882, 883, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 845, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 1154, 0,
	958, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	1371, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 962,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 860,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 859, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 861, 862, 343, 344, 345, 863,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 864, 354, 355, 865, 0, 356, 357,
	0, 0, 358, 0, 359, 937, 936, 360, 361, 363,
	364, 362, 866, 365, 366, 368, 367, 0, 0, 867,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 868, 376, 869, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 172, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 871,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	174, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	1157, 256, 0, 473, 472, 257, 0, 0, 0, 166,
	474, 475, 258, 476, 477, 478, 0, 167, 958, 957,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 137, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 962, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 856, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 857, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 858,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 860, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 859,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 861, 862, 343, 344, 345, 863, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 864, 354, 355, 865, 0, 356, 357, 0, 0,
	358, 0, 359, 937, 936, 360, 361, 363, 364, 362,
	866, 365, 366, 368, 367, 0, 0, 867, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 868, 376, 869, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 870, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 871, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 958, 957, 0, 0, 0, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 2504, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 962, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 860, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 861, 862,
	343, 344, 345, 863, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 937,
	936, 360, 361, 363, 364, 362, 866, 365, 366, 368,
	367, 0, 0, 867, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 871, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	0, 0, 935, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 847, 0,
	0, 0, 1181, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 846, 277, 220, 221, 222, 0, 278, 853,
	0, 836, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 292, 839, 837, 838, 843, 841, 840, 842, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 875, 876, 0, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 877, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 848, 849,
	852, 860, 0, 850, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 859, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 861, 862, 343, 344,
	345, 863, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 878, 864, 354, 355, 865, 0,
	356, 357, 0, 0, 358, 0, 359, 937, 936, 360,
	361, 363, 364, 362, 866, 365, 366, 368, 367, 0,
	0, 867, 0, 851, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 868, 376,
	869, 879, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 880, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 870, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 844, 432, 413, 414,
	433, 871, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 881, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 882, 883, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 845, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 732, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 172, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	174, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	1157, 256, 0, 473, 472, 257, 0, 0, 498, 166,
	474, 475, 258, 476, 477, 478, 0, 167, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 137, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 0, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 2123, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 0, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 2585, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	1234, 0, 958, 957, 0, 0, 0, 955, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 1476, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 962, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 857, 0, 0, 0, 0,
	0, 1233, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 860, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 859, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 861, 862, 343, 344,
	345, 863, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 864, 354, 355, 865, 0,
	356, 357, 0, 0, 358, 0, 359, 937, 936, 360,
	361, 363, 364, 362, 866, 365, 366, 368, 367, 0,
	0, 867, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 868, 376,
	869, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	1232, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 870, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 871, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 1150, 0,
	958, 957, 0, 0, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 962,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 856, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 857, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 858, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 1149, 233, 234, 860,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 859, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 861, 862, 343, 344, 345, 863,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 864, 354, 355, 865, 0, 356, 357,
	0, 0, 358, 0, 359, 937, 936, 360, 361, 363,
	364, 362, 866, 365, 366, 368, 367, 0, 0, 867,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 868, 376, 869, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 870,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 871,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 1146, 0, 958, 957,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 962, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 856, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 857, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 858,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 1145, 233, 234, 860, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 859,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 861, 862, 343, 344, 345, 863, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 864, 354, 355, 865, 0, 356, 357, 0, 0,
	358, 0, 359, 937, 936, 360, 361, 363, 364, 362,
	866, 365, 366, 368, 367, 0, 0, 867, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 868, 376, 869, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 870, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 871, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 1104, 0, 958, 957, 0, 0,
	0, 955, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 962, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 1103, 233, 234, 860, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 859, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	861, 862, 343, 344, 345, 863, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 864,
	354, 355, 865, 0, 356, 357, 0, 0, 358, 0,
	359, 937, 936, 360, 361, 363, 364, 362, 866, 365,
	366, 368, 367, 0, 0, 867, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 868, 376, 869, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 870, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 871, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 1101, 0, 958, 957, 0, 0, 0, 955,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 962, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	1100, 233, 234, 860, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 861, 862,
	343, 344, 345, 863, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 937,
	936, 360, 361, 363, 364, 362, 866, 365, 366, 368,
	367, 0, 0, 867, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 871, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	951, 0, 958, 957, 0, 0, 0, 955, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 962, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 856,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 857, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 858, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 953, 233,
	234, 860, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 859, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 861, 862, 343, 344,
	345, 863, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 864, 354, 355, 865, 0,
	356, 357, 0, 0, 358, 0, 359, 937, 936, 360,
	361, 363, 364, 362, 866, 365, 366, 368, 367, 0,
	0, 867, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 868, 376,
	869, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 870, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 871, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 958, 957,
	0, 0, 0, 955, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 962, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 856, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 857, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 858,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 860, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 859,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 861, 862, 343, 344, 345, 863, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 864, 354, 355, 865, 0, 356, 357, 0, 0,
	358, 0, 359, 937, 936, 360, 361, 363, 364, 362,
	866, 365, 366, 368, 367, 0, 0, 867, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 868, 376, 869, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 870, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 871, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 958, 957, 0, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 962, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 856, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 857, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 858, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 860, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 859, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 861, 862,
	343, 344, 345, 863, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 864, 354, 355,
	865, 0, 356, 357, 0, 0, 358, 0, 359, 937,
	936, 360, 361, 363, 364, 362, 866, 365, 366, 368,
	367, 0, 0, 867, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	868, 376, 869, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 870, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 871, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 958, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 962, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 856, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 857,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 858, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 860, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 859, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	861, 862, 343, 344, 345, 863, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 864,
	354, 355, 865, 0, 356, 357, 0, 0, 358, 0,
	359, 937, 936, 360, 361, 363, 364, 362, 866, 365,
	366, 368, 367, 0, 0, 867, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 868, 376, 869, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 870, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 871, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 603, 0, 208, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 214, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 213, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	207, 0, 208, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 481, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 214, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 213, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 208, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 481, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 214, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 1732, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 213, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 208, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 481, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 214, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 213, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 498, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 481, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	498, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 481,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 2007, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 2004, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 2086, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 2010,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 2084, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 2083, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 2009, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 2085, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 498, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 2007, 278, 223,
	0, 0, 2001, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 2004, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 2010, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 2000, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 2009, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	2008, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 610, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 609,
	587, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 590, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 591, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 592, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 586, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 587, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 590, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 591, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 592, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	498, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 590, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 591, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 592, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 1276, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 1279, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 1277, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 1278, 472, 257, 1125, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 927, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 946, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	948, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 927, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	943, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 945, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 927, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 939, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 941, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 927,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 595, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 594, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 522, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 521, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 520, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 498, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 1982, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 498, 2147, 0, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 498, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 927, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 498, 2147, 0, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 2144, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 498, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	259, 260, 261, 262, 1725, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	1683, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 1681, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 636, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 1205, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 637,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 633, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 632,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 1569, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 1568, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 498, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 1553, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 636, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	1205, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 637, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 633, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 632, 251, 252,
	456, 0, 0, 457, 1206, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 636, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	626, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 637, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 633, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 1176, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 632, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	1143, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 1142, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 1139, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 1138, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 1136, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 1135, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 1133, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 1132, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 1129, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	1128, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 498, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 259, 260, 261, 262, 1117, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 1115, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	1114, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	1106, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 1097, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 1096, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 1092, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 1088, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 1090, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 966, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	968, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	963, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 0, 473, 472, 257, 636, 0,
	498, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 626, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 625,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 637, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 627, 412, 0, 416, 417, 633,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 628, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 632, 251, 252, 456, 0, 0, 457, 630, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 616, 0, 498, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 617, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	0, 473, 472, 257, 612, 0, 498, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 0, 473,
	472, 257, 601, 0, 498, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 0, 473, 472, 257,
	544, 0, 498, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 232, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 498, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 498, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 0, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 2394, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 432, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 498, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 2392, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	498, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 325, 0,
	326, 327, 328, 329, 330, 331, 2381, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 390, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 498, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 0, 0, 259, 260,
	261, 262, 0, 263, 0, 0, 0, 0, 215, 0,
	0, 0, 0, 264, 265, 266, 216, 217, 267, 218,
	268, 269, 219, 0, 270, 271, 272, 273, 274, 275,
	276, 0, 0, 277, 220, 221, 222, 0, 278, 223,
	0, 0, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 287, 284, 0, 288, 0, 289, 290, 0, 0,
	291, 292, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 501, 295, 296, 297, 224, 225, 0, 298, 0,
	299, 0, 300, 0, 0, 301, 302, 303, 0, 304,
	0, 305, 306, 0, 226, 307, 308, 310, 313, 309,
	314, 315, 227, 228, 0, 0, 0, 0, 0, 0,
	0, 316, 317, 318, 229, 319, 320, 0, 321, 0,
	322, 0, 0, 0, 323, 0, 324, 230, 0, 231,
	325, 0, 326, 327, 328, 329, 330, 331, 2106, 233,
	234, 0, 0, 238, 333, 0, 0, 0, 0, 332,
	334, 341, 0, 0, 335, 235, 337, 336, 338, 339,
	340, 236, 0, 237, 0, 342, 0, 0, 343, 344,
	345, 0, 346, 347, 0, 0, 348, 349, 350, 0,
	352, 351, 0, 353, 239, 0, 354, 355, 0, 0,
	356, 357, 0, 0, 358, 0, 359, 0, 0, 360,
	361, 363, 364, 362, 0, 365, 366, 368, 367, 0,
	0, 0, 0, 240, 241, 369, 370, 0, 371, 372,
	0, 0, 373, 374, 0, 0, 375, 242, 0, 376,
	0, 243, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 244, 385, 245, 386, 0, 387, 388, 389, 390,
	391, 392, 246, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 0, 408, 409, 410, 411, 247, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 0, 432, 413, 414,
	433, 0, 434, 248, 435, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 249, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 0, 250, 251, 252, 456, 0, 0, 457,
	458, 253, 254, 0, 459, 460, 0, 461, 462, 0,
	0, 463, 464, 465, 467, 0, 468, 0, 466, 469,
	470, 471, 255, 256, 498, 473, 472, 257, 0, 0,
	0, 0, 474, 475, 258, 476, 477, 478, 0, 0,
	259, 260, 261, 262, 0, 263, 0, 0, 0, 0,
	215, 0, 0, 0, 0, 264, 265, 266, 216, 217,
	267, 218, 268, 269, 219, 0, 270, 271, 272, 273,
	274, 275, 276, 0, 0, 277, 220, 221, 222, 0,
	278, 223, 0, 0, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 287, 284, 0, 288, 0, 289, 290,
	0, 0, 291, 292, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 501, 295, 296, 297, 224, 225, 0,
	298, 0, 299, 0, 300, 0, 0, 301, 302, 303,
	0, 304, 0, 305, 306, 0, 226, 307, 308, 310,
	313, 309, 314, 315, 227, 228, 0, 0, 0, 0,
	0, 0, 0, 316, 317, 318, 229, 319, 320, 0,
	321, 0, 322, 0, 0, 0, 323, 0, 324, 230,
	0, 231, 325, 0, 326, 327, 328, 329, 330, 331,
	232, 233, 234, 0, 0, 238, 333, 0, 0, 0,
	0, 332, 334, 341, 0, 0, 335, 235, 337, 336,
	338, 339, 340, 236, 0, 237, 0, 342, 0, 0,
	343, 344, 345, 0, 346, 347, 0, 0, 348, 349,
	350, 0, 352, 351, 0, 353, 239, 0, 354, 355,
	0, 0, 356, 357, 0, 0, 358, 0, 359, 0,
	0, 360, 361, 363, 364, 362, 0, 365, 366, 368,
	367, 0, 0, 0, 0, 240, 241, 369, 370, 0,
	371, 372, 0, 0, 373, 374, 0, 0, 375, 242,
	0, 376, 0, 243, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 244, 385, 245, 386, 0, 387, 388,
	389, 390, 391, 392, 246, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 0, 408, 409, 410, 411, 247, 412,
	0, 617, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 0, 432,
	413, 414, 433, 0, 434, 248, 435, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	249, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 0, 250, 251, 252, 456, 0,
	0, 457, 458, 253, 254, 0, 459, 460, 0, 461,
	462, 0, 0, 463, 464, 465, 467, 0, 468, 0,
	466, 469, 470, 471, 255, 256, 498, 473, 472, 257,
	0, 0, 0, 0, 474, 475, 258, 476, 477, 478,
	0, 0, 259, 260, 261, 262, 0, 263, 0, 0,
	0, 0, 215, 0, 1581, 0, 0, 264, 265, 266,
	216, 217, 267, 218, 268, 269, 219, 0, 270, 271,
	272, 273, 274, 275, 276, 0, 0, 277, 220, 221,
	222, 0, 278, 223, 0, 0, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 287, 284, 0, 288, 0,
	289, 290, 0, 0, 291, 292, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 501, 295, 296, 297, 224,
	225, 0, 298, 0, 299, 0, 300, 0, 0, 301,
	302, 303, 0, 304, 0, 305, 306, 0, 226, 307,
	308, 310, 313, 309, 314, 315, 227, 228, 0, 0,
	0, 0, 0, 0, 0, 316, 317, 318, 229, 319,
	320, 0, 321, 0, 322, 0, 0, 0, 323, 0,
	324, 230, 0, 231, 325, 0, 326, 327, 328, 329,
	330, 331, 232, 233, 234, 0, 0, 238, 333, 0,
	0, 0, 0, 332, 334, 341, 0, 0, 335, 235,
	337, 336, 338, 339, 340, 236, 0, 237, 0, 342,
	0, 0, 343, 344, 345, 0, 346, 347, 0, 0,
	348, 349, 350, 0, 352, 351, 0, 353, 239, 0,
	354, 355, 0, 0, 356, 357, 0, 0, 358, 0,
	359, 0, 0, 360, 361, 363, 364, 362, 0, 365,
	366, 368, 367, 0, 0, 0, 0, 240, 241, 369,
	370, 0, 371, 372, 0, 0, 373, 374, 0, 0,
	375, 242, 0, 376, 0, 243, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 244, 385, 245, 386, 0,
	387, 388, 389, 390, 391, 392, 246, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 0, 408, 409, 410, 411,
	247, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	0, 0, 413, 414, 433, 0, 434, 248, 435, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 249, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 0, 250, 251, 252,
	456, 0, 0, 457, 458, 253, 254, 0, 459, 460,
	0, 461, 462, 0, 0, 463, 464, 465, 467, 0,
	468, 0, 466, 469, 470, 471, 255, 256, 498, 473,
	472, 257, 0, 0, 0, 0, 474, 475, 258, 476,
	477, 478, 0, 0, 259, 260, 261, 262, 0, 263,
	0, 0, 0, 0, 215, 0, 0, 0, 0, 264,
	265, 266, 216, 217, 267, 218, 268, 269, 219, 0,
	270, 271, 272, 273, 274, 275, 276, 0, 0, 277,
	220, 221, 222, 0, 278, 223, 0, 0, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 287, 284, 0,
	288, 0, 289, 290, 0, 0, 291, 292, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 501, 295, 296,
	297, 224, 225, 0, 298, 0, 299, 0, 300, 0,
	0, 301, 302, 303, 0, 304, 0, 305, 306, 0,
	226, 307, 308, 310, 313, 309, 314, 315, 227, 228,
	0, 0, 0, 0, 0, 0, 0, 316, 317, 318,
	229, 319, 320, 0, 321, 0, 322, 0, 0, 0,
	323, 0, 324, 230, 0, 231, 325, 0, 326, 327,
	328, 329, 330, 331, 232, 233, 234, 0, 0, 238,
	333, 0, 0, 0, 0, 332, 334, 341, 0, 0,
	335, 235, 337, 336, 338, 339, 340, 236, 0, 237,
	0, 342, 0, 0, 343, 344, 345, 0, 346, 347,
	0, 0, 348, 349, 350, 0, 352, 351, 0, 353,
	239, 0, 354, 355, 0, 0, 356, 357, 0, 0,
	358, 0, 359, 0, 0, 360, 361, 363, 364, 362,
	0, 365, 366, 368, 367, 0, 0, 0, 0, 240,
	241, 369, 370, 0, 371, 372, 0, 0, 373, 374,
	0, 0, 375, 242, 0, 376, 0, 243, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 244, 385, 245,
	386, 0, 387, 388, 389, 390, 391, 392, 246, 901,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 0, 408, 409,
	410, 411, 247, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 0, 432, 413, 414, 433, 0, 434, 248,
	435, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 249, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 0, 250,
	251, 252, 456, 0, 0, 457, 458, 253, 254, 0,
	459, 460, 0, 461, 462, 0, 0, 463, 464, 465,
	467, 0, 468, 0, 466, 469, 470, 471, 255, 256,
	498, 473, 472, 257, 0, 0, 0, 0, 474, 475,
	258, 476, 477, 478, 0, 0, 259, 260, 261, 262,
	0, 263, 0, 0, 0, 0, 215, 0, 0, 0,
	0, 264, 265, 266, 216, 217, 267, 218, 268, 269,
	219, 0, 270, 271, 272, 273, 274, 275, 276, 0,
	0, 277, 220, 221, 222, 0, 278, 223, 0, 0,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 287,
	284, 0, 288, 0, 289, 290, 0, 0, 291, 292,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 501,
	295, 296, 297, 224, 225, 0, 298, 0, 299, 0,
	300, 0, 0, 301, 302, 303, 0, 304, 0, 305,
	306, 0, 226, 307, 308, 310, 313, 309, 314, 315,
	227, 228, 0, 0, 0, 0, 0, 0, 0, 316,
	317, 318, 229, 319, 320, 0, 321, 0, 322, 0,
	0, 0, 323, 0, 324, 230, 0, 231, 0, 0,
	326, 327, 328, 329, 330, 331, 232, 233, 234, 0,
	0, 238, 333, 0, 0, 0, 0, 332, 334, 341,
	0, 0, 335, 235, 337, 336, 338, 339, 340, 236,
	0, 237, 0, 342, 0, 0, 343, 344, 345, 0,
	346, 347, 0, 0, 348, 349, 350, 0, 352, 351,
	0, 353, 239, 0, 354, 355, 0, 0, 356, 357,
	0, 0, 358, 0, 359, 0, 0, 360, 361, 363,
	364, 362, 0, 365, 366, 368, 367, 0, 0, 0,
	0, 240, 241, 369, 370, 0, 371, 372, 0, 0,
	373, 374, 0, 0, 375, 242, 0, 376, 0, 243,
	377, 378, 379, 0, 381, 382, 383, 0, 384, 244,
	385, 245, 386, 0, 387, 388, 389, 0, 391, 392,
	246, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 0,
	408, 409, 410, 411, 247, 0, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 0, 432, 413, 414, 433, 0,
	434, 248, 435, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 249, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	0, 250, 251, 252, 456, 0, 0, 457, 458, 253,
	254, 0, 459, 460, 0, 461, 462, 0, 0, 463,
	464, 465, 467, 0, 468, 0, 466, 469, 470, 471,
	255, 256, 0, 473, 472, 257, 0, 0, 0, 0,
	474, 475, 258, 476, 477, 478, 1308, 1309, 0, 1341,
	1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 0, 0, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 1334, 1335, 1336, 0,
	1310, 0, 0, 0, 0, 1316, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1358, 0, 0, 1338, 1339, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 1355, 0, 0, 0, 0,
	0, 0, 1325, 1326, 0, 0, 0, 1333, 1334, 1335,
	1336, 0, 0, 0, 0, 0, 1346, 1316, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1356,
	0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 1337,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 1356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 1308,
	1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 1349, 0, 0, 1311, 0, 1347, 1357, 0, 1322,
	1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0, 1868,
	0, 1310, 0, 1869, 0, 0, 0, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 1311, 0, 1347, 1357,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 1333, 1334,
	1335, 1336, 0, 1310, 0, 2801, 0, 0, 1316, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1355, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 0, 0,
	1333, 1334, 1335, 1336, 0, 0, 0, 0, 0, 1346,
	1316, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1356, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 1337, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 1356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 1349, 0, 0, 1311, 0, 1347,
	1357, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0,
	0, 0, 0, 0, 1310, 0, 2557, 0, 0, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343,
	1351, 1352, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 1311,
	0, 1347, 1357, 0, 1322, 1323, 1329, 1328, 1324, 1350,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	0, 1333, 1334, 1335, 1336, 0, 1310, 0, 2282, 0,
	0, 1316, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1355, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 1333, 1334, 1335, 1336, 0, 0, 0,
	0, 0, 1346, 1316, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 0, 1348, 1358, 0,
	0, 1338, 1339, 1340, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1355, 0, 0, 0, 0, 0, 0,
	1325, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 1337, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 1349, 0, 0,
	1311, 0, 1347, 1357, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 0, 0, 0, 0, 0, 0, 1310, 0, 2281,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 1311, 0, 1347, 1357, 0, 1322, 1323, 1329,
	1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 0, 1333, 1334, 1335, 1336, 0, 1310,
	0, 2278, 0, 0, 1316, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 1333, 1334, 1335, 1336,
	0, 0, 0, 0, 0, 1346, 1316, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1337, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	1356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	1349, 0, 0, 1311, 0, 1347, 1357, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 0, 0, 0, 0, 0, 0,
	1310, 0, 2277, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 1311, 0, 1347, 1357, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 1333, 1334, 1335,
	1336, 0, 1310, 0, 2276, 0, 0, 1316, 0, 0,
	1330, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 0, 0, 0, 0, 1346, 1316,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1356, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1337, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1349, 0, 0, 0, 0, 1347, 0,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 1869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 1357, 0, 0, 0, 0,
	1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1310,
	0, 0, 0, 3087, 0, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 1308,
	1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1344, 0, 0,
	0, 0, 0, 0, 1311, 0, 0, 1357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1333, 1334, 1335, 1336,
	0, 1310, 0, 0, 0, 0, 1316, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 1333, 1334,
	1335, 1336, 0, 0, 0, 0, 0, 1346, 1316, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1356, 0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1355, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	1337, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 0, 0,
	0, 0, 1356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1349, 0, 0, 0, 0, 1347, 0, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0,
	3083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 1309, 0, 1341,
	1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 1357, 0, 0, 0, 0, 1347,
	0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1310, 0,
	0, 0, 3023, 0, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 1357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 1334, 1335, 1336, 0,
	1310, 0, 0, 0, 0, 1316, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1358, 0, 0, 1338, 1339, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 1355, 0, 0, 0, 0,
	0, 0, 1325, 1326, 0, 0, 0, 1333, 1334, 1335,
	1336, 0, 0, 0, 0, 0, 1346, 1316, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1356,
	0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 1337,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 1356, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 1347, 0, 0, 1322,
	1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0, 3022,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 1357, 0, 0, 0, 0, 1347, 0,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 1310, 0, 0,
	0, 2973, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 1308, 1309, 0,
	1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	0, 0, 1311, 0, 0, 1357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 1334, 1335, 1336, 0, 1310,
	0, 0, 0, 0, 1316, 0, 0, 1330, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 1333, 1334, 1335, 1336,
	0, 0, 0, 0, 0, 1346, 1316, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1354, 1355, 0, 0, 0,
	0, 0, 0, 1325, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1337, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	1356, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1332, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 0, 0, 0, 0, 1347, 0, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 0, 0, 0, 0, 2934, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343,
	1351, 1352, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 1357, 0, 0, 0, 0, 1347, 0, 0,
	1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320,
	1312, 1313, 1314, 1315, 1317, 1318, 1310, 0, 0, 0,
	2848, 0, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 1308, 1309, 0, 1341,
	1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1344, 0, 0, 0, 0, 0,
	0, 1311, 0, 0, 1357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1333, 1334, 1335, 1336, 0, 1310, 0,
	0, 0, 0, 1316, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 1358, 0,
	0, 1338, 1339, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1355, 0, 0, 0, 0, 0, 0,
	1325, 1326, 0, 0, 0, 1333, 1334, 1335, 1336, 0,
	0, 0, 0, 0, 1346, 1316, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1356, 0, 1348,
	1358, 0, 0, 1338, 1339, 1340, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 1355, 0, 0, 0, 0,
	0, 0, 1325, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1337, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 1356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1345, 0, 0, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1349,
	0, 0, 0, 0, 1347, 0, 0, 1322, 1323, 1329,
	1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 0, 0, 0, 0, 2806, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 1357, 0, 0, 0, 0, 1347, 0, 0, 1322,
	1323, 1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 1310, 0, 0, 0, 2805,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 0, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1344, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 1357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1333, 1334, 1335, 1336, 0, 1310, 0, 0,
	0, 0, 1316, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 1358, 0, 0,
	1338, 1339, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1355, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 0, 1333, 1334, 1335, 1336, 0, 0,
	0, 0, 0, 1346, 1316, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 0, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1337, 0, 0, 0,
	0, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 0, 0, 0, 0, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328,
	1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 0, 0, 0, 0, 2804, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1357, 0, 0, 0, 0, 1347, 0, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 1310, 0, 0, 0, 2770, 0,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 1327,
	0, 0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343,
	1351, 1352, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1344, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 1357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 1335, 1336, 0, 1310, 0, 0, 0,
	0, 1316, 0, 0, 1330, 0, 0, 0, 0, 0,
	0, 1327, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1355, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 1333, 1334, 1335, 1336, 0, 0, 0,
	0, 0, 1346, 1316, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 0, 1348, 1358, 0,
	0, 1338, 1339, 1340, 0, 0, 0, 0, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1354, 1355, 0, 0, 0, 0, 0, 0,
	1325, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 1337, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 0, 0, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 0, 0,
	0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 0, 0, 0, 0, 2590, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 1357,
	0, 0, 0, 0, 1347, 0, 0, 1322, 1323, 1329,
	1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314,
	1315, 1317, 1318, 1310, 0, 2236, 0, 0, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 0, 0, 1311, 0,
	0, 1357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1333, 1334, 1335, 1336, 0, 1310, 0, 0, 0, 0,
	1316, 3164, 0, 1330, 0, 0, 0, 0, 0, 0,
	1327, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 1333, 1334, 1335, 1336, 0, 0, 0, 0,
	0, 1346, 1316, 0, 2323, 0, 0, 2322, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1356, 0, 1348, 1358, 0, 0,
	1338, 1339, 1340, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1355, 0, 0, 3163, 0, 0, 0, 1325,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 1337, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 1356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 1349, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351,
	1352, 1353, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 1344, 0, 0, 0, 0, 2207, 0, 1311, 0,
	0, 1357, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1310, 1349, 0, 0, 0,
	0, 1347, 0, 1330, 1322, 1323, 1329, 1328, 1324, 1350,
	1327, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1333, 1334, 1335, 1336, 0, 0, 0, 0,
	0, 0, 1316, 1347, 0, 0, 1322, 1323, 1329, 1328,
	1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 0, 0, 0, 0, 1348, 1358, 0, 0,
	1338, 1339, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1354, 1355, 0, 0, 0, 0, 0, 0, 1325,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1957, 0, 0, 0, 0, 0, 1308,
	1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 1344, 0, 0,
	0, 1956, 0, 0, 1311, 0, 0, 1357, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 0, 1349, 0, 0, 1330,
	0, 0, 0, 0, 0, 0, 1327, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 1334,
	1335, 1336, 0, 0, 0, 0, 0, 0, 1316, 0,
	0, 0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328,
	1324, 1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315,
	1317, 1318, 1348, 1358, 0, 0, 1338, 1339, 1340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 1355, 0,
	0, 0, 0, 0, 0, 1325, 1326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1356, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1308, 1309, 0, 1341, 1342,
	1343, 1351, 1352, 1353, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 1344, 0, 0, 0, 0, 0, 0,
	1311, 0, 0, 1357, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1310, 0, 0,
	0, 0, 1349, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 1327, 0, 0, 0, 0, 0, 0, 0,
	0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 0, 0, 1311, 0, 0, 1357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1333, 1334, 1335, 1336, 0, 0,
	0, 0, 0, 1310, 1316, 0, 0, 0, 0, 1347,
	0, 1330, 1322, 1323, 1329, 1328, 1324, 1350, 1327, 1321,
	1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1348, 1358,
	0, 0, 1338, 1339, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1354, 1355, 0, 0, 0, 0, 0,
	0, 1325, 1326, 0, 0, 0, 0, 0, 0, 0,
	1333, 1334, 1335, 1336, 0, 1346, 0, 0, 0, 0,
	1316, 0, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1356, 0,
	0, 0, 0, 0, 1348, 1358, 0, 0, 1338, 1339,
	1340, 1345, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 0, 0, 0, 0, 0, 0, 1325, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 1356, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1349, 1347, 0, 0, 1322, 1323,
	1329, 1328, 1324, 1350, 0, 1321, 1319, 1320, 1312, 1313,
	1314, 1315, 1317, 1318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 1357, 0, 0, 0,
	0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350,
	0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318,
	1310, 0, 0, 0, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 0, 0, 1327, 0, 0, 0, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1344, 0,
	0, 0, 2324, 0, 0, 1311, 0, 0, 1357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 1334, 1335,
	1336, 0, 1310, 0, 0, 0, 0, 1316, 0, 0,
	1330, 0, 2329, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 0, 0, 0, 0, 1346, 1316,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1356, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1337, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1308, 1309, 0, 1341, 1342, 1343, 1351, 1352, 1353, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 1344, 0,
	0, 0, 0, 0, 0, 1311, 0, 0, 1357, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1310, 1349, 0, 0, 0, 0, 1347, 0,
	1330, 1322, 1323, 1329, 1328, 1324, 1350, 1327, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1333,
	1334, 1335, 1336, 0, 0, 0, 0, 0, 0, 1316,
	1347, 0, 0, 1322, 1323, 1329, 1328, 1324, 1350, 0,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 0,
	0, 0, 0, 1348, 1358, 0, 0, 1338, 1339, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1354, 1355,
	0, 0, 0, 0, 0, 0, 1325, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2291, 0, 0, 0, 0, 1308, 1309, 0, 1341,
	1342, 1343, 1351, 1352, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 1337, 1344, 0, 0, 0, 2275, 0,
	0, 1311, 0, 0, 1357, 0, 0, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 0, 0, 1349, 0, 0, 1330, 0, 0, 0,
	0, 0, 0, 1327, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 1309, 0, 1341, 1342, 1343, 1351, 1352,
	1353, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 0, 0, 0, 0, 0, 0, 1311, 0, 0,
	1357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 1334, 1335, 1336, 0,
	0, 0, 0, 0, 1310, 1316, 0, 0, 0, 0,
	1347, 0, 1330, 1322, 1323, 1329, 1328, 1324, 1350, 1327,
	1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317, 1318, 1348,
	1358, 0, 0, 1338, 1339, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 1355, 0, 0, 0, 0,
	0, 0, 1325, 1326, 0, 0, 0, 0, 0, 0,
	0, 1333, 1334, 1335, 1336, 0, 1346, 0, 0, 0,
	0, 1316, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1356,
	0, 0, 0, 0, 0, 1348, 1358, 0, 0, 1338,
	1339, 1340, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1354, 1355, 0, 0, 0, 0, 0, 0, 1325, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 1346, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1308, 1309,
	0, 1341, 1342, 1343, 1351, 1352, 1353, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 1311, 0, 0, 1357, 0, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1310, 0, 0, 0, 0, 1349, 1347, 0, 1330, 1322,
	1323, 1329, 1328, 1324, 1350, 1327, 1321, 1319, 1320, 1312,
	1313, 1314, 1315, 1317, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1333, 1334, 1335,
	1336, 0, 0, 0, 0, 0, 0, 1316, 0, 0,
	0, 0, 1347, 0, 0, 1322, 1323, 1329, 1328, 1324,
	1350, 0, 1321, 1319, 1320, 1312, 1313, 1314, 1315, 1317,
	1318, 1348, 1358, 0, 0, 1338, 1339, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 1355, 0, 0,
	0, 0, 0, 0, 1325, 1326, 0, 1643, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1356, 1654, 1637, 1644, 1627, 1664, 1663, 0, 0,
	0, 1629, 1628, 0, 0, 0, 0, 0, 0, 1673,
	1672, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 1665, 0,
	1661, 1660, 0, 0, 0, 0, 0, 0, 1332, 0,
	0, 1659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 0, 0, 1658,
	1656, 1657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1639,
	0, 0, 0, 661, 0, 691, 0, 0, 0, 0,
	1647, 1642, 1648, 1649, 1650, 1651, 1652, 0, 1646, 0,
	0, 0, 0, 0, 0, 668, 0, 1670, 1671, 0,
	0, 0, 0, 0, 0, 0, 0, 666, 1347, 0,
	0, 1322, 1323, 1329, 1328, 1324, 1350, 0, 1321, 1319,
	1320, 1312, 1313, 1314, 1315, 1317, 1318, 1631, 0, 0,
	0, 667, 0, 0, 0, 0, 669, 0, 0, 1662,
	696, 0, 0, 1640, 1641, 0, 675, 676, 0, 0,
	0, 686, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 692, 670, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1655, 0, 0,
	0, 1624, 1622, 1623, 1626, 1625, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1632, 1633, 1635, 1636, 0, 671,
	0, 0, 0, 0, 0, 0, 665, 0, 1653, 1634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1675,
	0, 672, 673, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1630, 0, 1666, 1667,
	1668, 1669, 0, 679, 0, 0, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1638, 678, 0, 0, 0, 1674, 0,
	0, 0, 0, 0, 0, 0, 693, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	677, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 688, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 663, 681, 694,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 664, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 684, 0, 0, 682, 0, 0, 0,
	697, 698, 0, 0, 0, 0, 695, 0, 0, 0,
	0, 0, 0, 685, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 687,
}
var sqlPact = [...]int{

	4976, -1000, -5, -1000, -1000, -1000, 213, -1000, -1000, -1000,
	-1000, 212, 211, 210, -1000, 209, 207, 206, 205, 203,
	202, 201, 199, 198, 196, 195, 194, -1000, -1000, 192,
	-1000, -1000, -1000, -1000, 191, 187, 183, -1000, 182, 1456,
	32488, 181, 180, 176, 2025, 50260, 1608, 175, 168, -1000,
	167, 3407, 38272, 1136, 1889, -1000, 166, 165, 1647, 49878,
	709, 2081, 35174, 37884, 1967, 49490, 32100, 1951, 34786, 49102,
	-1000, -1000, 1131, -1000, -1000, 48714, 164, 163, 155, 151,
	150, -1000, 147, 48326, 145, 144, 142, 140, 138, 137,
	-1000, 136, 134, 131, 130, 129, 128, 127, 126, 108,
	107, 97, 92, 85, 82, 79, 78, -1000, 60721, 76,
	74, 73, -1000, 1424, 72, 64, 63, 62, 61, -1000,
	-1000, -1000, 59, 58, 57, 54, -1000, 53, 52, 122,
	51, 50, 49, 44, 40, -1000, 1194, 724, 1810, 13549,
	1313, 1304, 1302, 1268, 1266, 832, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 52934, 50260, 39, -27,
	38, -1000, 2412, 801, 23874, 4976, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37496, 37108,
	36720, 30548, 47938, 47550, 10245, 10245, 1001, -1000, -1000, -1000,
	-1000, -1000, -7, 33634, 50260, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	274, -1000, -1000, -1000, -1000, -1000, -1000, 20266, 710, 19841,
	503, 19416, 269, 410, -1000, -1000, -1000, 272, -1000, -1000,
	-1000, -1000, 1343, -1000, -1000, -1000, -1000, 47162, 46774, 2110,
	46386, 30150, 29752, 45998, 50260, 50260, 1851, 45610, -1000, -1000,
	45222, -1000, -1000, 2290, 2055, 2027, 36332, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 44840, 44452, 44064, 43676,
	43288, 29354, 28956, 622, -1000, -1000, -1000, -1000, 25426, 617,
	-1000, -1000, -1000, -1000, -1000, 37, -1000, 36, 35, -1000,
	34, 33, 32, 31, 30, 27, 24, 19, -1000, 18,
	15, -1000, 3, 1, -1000, 0, -1, 3158, 1185, 1488,
	42900, 1121, 50260, -1000, 1604, 10, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 26220, 50260, -1000, -1000, 20677, 101, -1000,
	616, -1000, 2036, -1000, 20677, 101, -1000, 1602, 214, 1546,
	-1000, -1000, -1000, 1422, 1125, -1000, -1000, 50260, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2630, 1507, 615, 42512, -1000,
	1697, -1000, 788, 14371, -1000, 803, -1000, 14371, 266, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1677, 1259, 2590, 28558, 1535, 2414, 2278,
	2629, 1799, 2257, 2253, 2240, 2185, 2145, 2628, 1257, 2627,
	1151, 2626, 2135, 2134, 2604, 1512, 35944, 2625, 2624, 2133,
	2035, -1000, -1000, -1000, -1000, 1107, -1000, -1000, -1000, -1000,
	-1000, -1000, 39422, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1194, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1767, 2434, 2434, 2434, 2450,
	400, 396, -1000, 122, -1000, 1712, -1000, 1444, -1000, -1000,
	-1000, 60102, -1000, -1000, 20677, 20677, 20677, 20677, 20677, 1486,
	-1000, -1000, -1000, 655, -1000, 613, 535, -1000, -1000, -1000,
	-1000, -1000, 608, 2607, -1000, 815, -1000, -1000, -1000, -1000,
	2552, -1000, 11890, -1000, -1000, -1000, 388, 20677, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 258, 760, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	527, 1368, 526, 526, 526, -1000, -1000, 830, -1000, -1000,
	757, -1000, 755, -1000, -1000, -1000, 2105, 604, 602, -1000,
	601, 599, 598, -1000, -1000, -1000, 589, 585, 580, 579,
	576, 571, 570, 569, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 830, 830, -1000, 565, 561, 560, 550, 549,
	548, 545, 544, 543, 1596, -1000, -1000, 1596, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 995, 52170, -1000, -1000, -1000,
	-8, 50260, -1000, 410, -8, -1000, -1000, 539, -1000, 14782,
	14782, 14782, -1000, -1000, 1599, 20677, -1000, 1755, -1000, 4192,
	-231, 739, 25038, -1000, 23098, 739, 666, 28160, -1000, 2026,
	-1000, -1000, 537, 249, -1000, -1000, -1000, -1000, -1000, -1000,
	1626, 2269, 1018, -1000, 1316, 2265, -1000, 1658, 2255, 1299,
	-1000, -1000, 808, 2241, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1448, -1000, -1000, 1582, 2236, -147,
	2139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1617, -1000, 30944,
	33634, -9, -1000, -1000, -23, -1000, 9849, 60102, -1000, -1000,
	-1000, 60102, 712, -1000, -1000, 2235, -1000, 60102, 708, -1000,
	-1000, 2233, -1000, 2020, 50260, 10245, 50260, 50260, -1000, 536,
	1696, 1598, -1000, -1000, 42124, 1658, 1695, -1000, -1000, 802,
	1694, -1000, -1000, 1692, -1000, 410, -1000, -1000, 790, -1000,
	2623, 41742, 1840, 802, 1688, -1000, -1000, -1000, 39422, -1000,
	50260, -1000, 50260, -1000, 1167, -1000, 52552, 158, 2232, -1000,
	-1000, 158, 2230, -1000, 158, 2220, -1000, 157, 2212, -1000,
	-1000, 1518, 2211, -1000, -30, 2209, -1000, -1000, -30, 2201,
	-1000, -1000, 20677, -38, -1000, -1000, -1000, 801, 31712, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 41354, 30944, 33252, 50260,
	35556, 30944, 758, 605, 60102, -1000, 2517, 60553, 30944, 60102,
	-1000, 33252, 50260, 2086, -1000, 40966, 40578, 2400, 787, -1000,
	-1000, 50260, -1000, 20677, -1000, 2516, 1686, -20, -1000, -1000,
	-1000, -1000, -1000, 1727, 1764, 945, 1358, -1000, 14371, 14371,
	2337, -1000, 248, 10245, -1000, -1000, 1069, 1758, -1000, -1000,
	-1000, -1000, 30944, 30944, -1000, 40190, -1000, -1000, -1000, 1471,
	50260, -1000, -1000, 2082, -1000, 32870, 50260, -1000, 50260, -1000,
	50260, -1000, 50260, -1000, 50260, -1000, -1000, -1000, -1000, -1000,
	2234, 1301, 1294, -1000, 50260, -1000, 50260, -1000, -1000, -1000,
	1726, -1000, -1000, -1000, -1000, 50260, -1000, -1000, -1000, -1000,
	-1000, -1000, 1235, -1000, 1068, -1000, -1000, 159, -1000, -1000,
	1767, -1000, 1581, 1814, 18991, 1812, 20677, 122, -1000, -1000,
	122, 122, 13124, -1000, -1000, -1000, 50260, -1000, 60553, 60553,
	10245, 1024, 20677, 20677, 20677, 20677, 20677, 20677, 20677, 20677,
	20677, 20677, 20677, 20677, 20677, 20677, 20677, 20677, 20677, 20677,
	20677, 20677, 20677, 20677, 20677, 20677, 20677, 20677, 20677, 20677,
	20677, 20677, 20677, 20677, 20677, 20677, 20677, 1765, 20677, 990,
	20677, 20677, 20677, 20677, 1748, -1000, -1000, 1433, 456, 1529,
	-1000, 2561, 2561, 2561, 60358, 60358, 523, 655, -1000, 20677,
	-1000, 101, 20677, 10643, -1000, 2598, 1152, -1000, -1000, 396,
	53706, 1672, -1000, 394, 11068, -1000, -1000, -1000, 11890, 535,
	18566, 827, 60102, 9453, 2088, 1955, -1000, 2597, -1000, -1000,
	2552, -1000, -1000, -1000, -1000, 1022, 1016, 1013, 1012, 532,
	697, 695, 681, 676, 669, 20677, 20677, 20677, 20677, 20677,
	20677, 20677, 20677, -1000, -1000, 18155, 17730, 17305, 16880, 16455,
	21910, 16030, 20677, 12301, -1000, -20, -1000, 52170, -1000, 50260,
	-8, 2512, 20677, 123, -1000, 58749, -1000, 123, 123, 531,
	-40, 60102, 1784, 1779, 24262, 1829, 1531, 1531, 1531, -1000,
	530, 644, 739, 7058, 38654, 1536, 739, 739, 215, 278,
	393, 22710, 1755, 38654, -1000, -1000, 50260, 529, 10643, 10245,
	-16, 1333, -1000, 34398, 2388, 2384, 2348, 1129, -1000, 1095,
	2441, 39422, 2474, 678, 2397, 2018, -1000, -1000, 989, 39422,
	1658, -1000, 60553, -1000, 1986, 2440, 1117, 1090, 1117, 1117,
	1094, -1000, 39422, 981, 1387, 30944, 2389, 980, -17, 2471,
	505, 2387, 2016, 972, -1000, -1000, 50260, 10245, 2367, 1067,
	714, -9, 33634, 50260, 245, -1000, 20677, 101, 20677, 101,
	1082, -41, 244, 1772, 1770, 215, -1000, 34016, 2508, 2200,
	50260, 1769, -14, 50260, -1000, -1000, 1658, 2199, -1000, 1382,
	-1000, 2194, 2191, 2506, 433, 2622, -1000, 1595, 1685, -1000,
	-1000, -1000, 51788, 1056, 2187, 813, 656, 2500, 656, 27384,
	-1000, 50260, -1000, 50260, -1000, -1000, 50260, -1000, 50260, -1000,
	50260, -1000, 50260, 50260, -1000, 50260, 30944, 30944, 30944, -43,
	4747, 31712, -70, 758, 971, -46, -1000, 392, -1000, 39808,
	50260, 852, 34016, 5671, -73, -1000, 1046, -1000, -1000, -1000,
	-1000, 259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 830, 528, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 527, 1368,
	526, 526, 526, -1000, -1000, -1000, 757, -1000, 755, -1000,
	-1000, -1000, 830, 830, -1000, -1000, -185, 2008, -23, 35556,
	714, -1000, 714, -1000, 2078, -1000, 2401, 730, -75, 895,
	-20, -1000, 1596, -1000, 1164, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2606, -1000,
	2580, -1000, -1000, 2593, -10, -1000, -10, -1000, 10245, -1000,
	50260, 2062, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	50260, -1000, 50260, -1000, -1000, -1000, -1000, -1000, -1000, 1177,
	-1000, 2059, -1000, 2057, -1000, 242, -1000, -1000, -1000, 50260,
	50260, 50260, -1000, 39422, -1000, -1000, -1000, -1000, 60102, -1000,
	466, -1000, -1000, 60102, 1246, 1800, -1000, 1800, -11, -1000,
	58493, 1751, 50260, -1000, -1000, -1000, -1000, -1000, -1000, 786,
	1045, 1045, 984, 984, 984, 984, 2540, 234, 974, 3682,
	5483, 5483, 5483, 5483, 5483, 5483, 5483, 5483, 303, 525,
	525, 303, 303, 303, 303, 303, 525, 525, 525, 5483,
	5483, 5483, 60358, 6565, 4781, 20677, 20677, 967, 1381, 456,
	4054, 20677, 5226, 5226, 5226, 5226, -1000, 1483, -1000, -1000,
	-1000, -1000, 2001, 524, 21910, 21910, -1000, -1000, -1000, -1000,
	11479, 20677, -1000, -1000, -1000, -1000, 15605, -1000, 57804, -238,
	389, -106, 12, -1000, 20677, 20677, 20677, 386, -1000, 384,
	-1000, 965, -1000, 963, 960, 958, -1000, 515, 241, 20677,
	50260, -1000, 55158, 643, -76, -1000, 1106, -1000, 20677, 232,
	-1000, 1524, 513, 512, 383, -81, 784, 777, 774, 773,
	20677, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 60026, 54867, 54795, 54504, 6401, 54432, 54141, -83, 381,
	-1000, 1996, -106, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	379, -1000, -84, -1000, -86, -1000, 378, -1000, 59770, -106,
	377, 4243, -1000, 21910, 21910, 21910, -1000, 376, -1000, 58233,
	-1000, 59510, 15194, 15194, 15194, 365, 59438, 20677, -106, -1000,
	-1000, 511, -91, 813, 14782, 23486, 10245, -1000, 813, 813,
	20677, -1000, 20677, 24262, 24262, 1883, 1775, 24262, -1000, -1000,
	-1000, -1000, 38654, 540, 739, 38654, -1000, 2552, 1790, -1000,
	-1000, -1000, 50260, 410, -1000, 38654, 38654, 10245, 739, -1000,
	364, 26608, 12, 231, 1275, 50260, 50260, 50260, -1000, -1000,
	1683, 51406, 1678, 60553, 50260, -1000, -1000, 510, 507, 1747,
	1745, 50260, 50260, 51024, 50642, 50260, 1421, 20677, 1555, 1446,
	101, -1000, 101, 772, 504, 50260, 1293, -1000, -1000, -1000,
	-1000, -1000, 50260, -1000, -1000, 2592, -1000, 1117, -1000, -1000,
	-1000, 1117, 1658, 1284, 50260, 30944, 807, 762, 50260, 1432,
	101, -1000, 101, 761, 501, 10245, 1427, -1000, 754, 50260,
	1891, -1000, 1614, -1000, -1000, 9057, 60102, -1000, 60102, -1000,
	-1000, -1000, 10245, 1819, 1819, 363, -13, -1000, -1000, -1000,
	-1000, -1000, -1000, 1831, 50260, 612, 50260, 101, 50260, 121,
	758, 30944, 50260, -14, 50260, 30944, 30944, 30944, 101, 2621,
	497, 2618, -1000, 50260, 2183, 1588, 1673, 2239, 679, 50260,
	1541, 20677, 1336, -1000, 26996, 837, 50260, 1273, 104, -1000,
	-1000, -1000, 17, 50260, -1000, -1000, 158, 158, 158, -1000,
	157, 1518, -1000, -30, -30, -1000, -1000, -1000, 4747, 1988,
	50260, 2531, 758, -15, 495, -1000, 734, 733, 25824, 30944,
	-92, -1000, 868, 950, 946, -1000, 60553, -1000, 654, 858,
	-1000, 2589, 494, 2552, -1000, 758, 50260, 69, -1000, 805,
	1578, -1000, 14371, 14371, -1000, 1596, -1000, -1000, 1186, -1000,
	1349, -1000, -1000, -1000, -1000, 14371, -1000, -1000, 1065, -23,
	-23, -1000, 1134, 1128, 50260, -1000, -1000, -1000, -1000, 1246,
	-1000, 20677, -1000, -1000, -1000, 13124, -1000, -1000, -1000, 50260,
	-230, 20677, 20677, 3661, 3355, 20677, 21910, 21910, -1000, 20677,
	874, -1000, -1000, -1000, -1000, -1000, 1983, 493, 20677, 60553,
	6304, 5777, -1000, 358, 54069, 303, -1000, 20677, -1000, 347,
	13960, -1000, 59005, -35, -35, -1000, 2605, 1709, 1540, 1340,
	1192, 2573, 8661, -106, -94, -1000, -1000, 653, 2149, -1000,
	20677, 59081, 8265, -1000, 27772, 814, 1541, -1000, -1000, 2552,
	-1000, -1000, -1000, -1000, 57732, 60553, 60553, 20677, 20677, -1000,
	20677, 20677, 20677, -1000, -1000, 20677, -1000, -1000, -1000, -1000,
	1974, 20677, -1000, 60553, 60553, 21910, 21910, 21910, 21910, 21910,
	21910, 21910, 21910, 21910, 21910, 21910, 21910, 21910, 21910, 21910,
	21910, 21910, 21910, 21910, 1762, 21910, 2556, 2556, 2556, -1000,
	2051, 1974, 20677, 20677, 60553, 335, 333, 331, -1000, 20677,
	-106, 5671, -1000, 1936, -1000, -93, -1000, 1755, -1000, -1000,
	1936, 1936, -97, 60102, -1000, 1883, -1000, 490, 20677, 24262,
	-1000, 642, -1000, -99, -1000, 38654, -1000, 637, -235, -1000,
	723, -1000, 410, -1000, -1000, -1000, 230, 38654, -1000, -100,
	-1000, 2482, 330, 10245, -1000, -1000, 957, 955, -1000, 2175,
	-1000, 1670, -1000, 845, -1000, 1203, 20677, 24650, 489, 488,
	1346, -1000, 2174, 1518, 2159, 1518, -1000, -1000, 793, -1000,
	60102, 483, 481, -1000, -16, 1308, -1000, -1000, 20677, 20677,
	-1000, 951, -1000, -1000, -1000, 1658, 924, -1000, -1000, 1378,
	20677, -1000, -1000, -1000, -1000, 20677, 20677, -1000, -17, 923,
	20677, 2138, 758, 1972, 1071, -1000, -1000, -1000, -1000, -1000,
	-1000, 1817, 34016, 50260, 479, 50260, 478, -1000, -1000, 477,
	50260, -1000, -1000, -1000, 1658, -1000, 802, -1000, -1000, -1000,
	2617, -1000, 851, 10245, 50260, 2157, 1735, 679, 31330, -1000,
	802, 1814, -1000, 60102, -1000, 1273, 12712, 2361, -105, -1000,
	219, -1000, -1000, -1000, 813, 27384, 24262, 20677, 2615, -107,
	-1000, -1000, -1000, -1000, -1000, -1000, 101, -23, 1545, -1000,
	39040, 39040, 30944, 30944, 30944, 758, 50260, 50260, -1000, 2555,
	-1000, 629, 328, 2552, 325, -1000, -23, 50260, -1000, 1538,
	10245, 50260, 50260, 10245, 50260, -1000, -1000, -20, -1000, -1000,
	-1000, -1000, 50260, -1000, -1000, -1000, 1552, 57375, -1000, 2353,
	10245, 2472, 5226, 20677, 20677, 563, 5509, 380, 5226, 20677,
	20677, 60553, 361, -108, 20677, 20677, -1000, 20677, 627, 60102,
	2602, 20677, 324, 321, 320, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 317, -1000, -1000, -1000, -1000, -1000, 60102,
	20677, 216, -1000, -1000, -1000, 53316, -1000, 20677, 316, 315,
	-1000, 314, 310, 53778, 6090, 57303, 56946, 56874, 60102, 2051,
	60102, -1000, -1000, 920, 920, 1072, 1072, 1072, 1072, 2556,
	1005, 1104, 752, 425, 425, 425, 457, 443, 443, 425,
	425, 425, 1964, 1774, 473, 6250, -1000, -1000, 60102, 60102,
	306, -1000, -1000, -1000, -106, 301, 1921, 2437, -1000, 24262,
	1921, 1921, -1000, -1000, 50260, 60102, -1000, -231, -1000, 2552,
	-1000, -1000, 1790, -1000, 7468, -1000, 10245, -1000, -1000, 26608,
	-1000, 472, -1000, 102, 50260, 50260, 50260, 2152, -1000, 3763,
	-1000, 56517, -115, -1000, 2416, 2416, 20677, 215, 24650, 50260,
	-1000, 1447, 1806, 889, 50260, -1000, 50260, -1000, -1000, 50260,
	50260, 50260, 50260, 50260, 60102, -116, 50260, 50260, 30944, 60102,
	60102, -121, 10245, 60102, 2366, -1000, 30944, 1006, 1432, 1880,
	-1000, 471, 24650, 470, 50260, 34016, 2481, -1000, -1000, -1000,
	-1000, 468, 2066, 1587, 464, 10245, 1737, 679, 31330, -1000,
	1056, 1273, -1000, -1000, -21, -1000, 485, 101, 50260, 2612,
	1541, -1000, -22, 60102, -1000, 693, -1000, -1000, -1000, -122,
	-1000, -1000, 300, -1000, 2321, 2319, 626, -1000, -1000, 299,
	-1000, -23, 1571, -1000, -1000, 1452, 1601, -1000, -1000, -1000,
	-1000, -1000, 2353, 5226, 5226, 20677, 20677, 20677, 5226, 361,
	-124, -1000, 5226, 5226, -106, -1000, -1000, 59005, -1000, -1000,
	-1000, -1000, 60102, 7869, 1472, -1000, 56445, -1000, -1000, -1000,
	-1000, 20677, 20677, -1000, -1000, -1000, -1000, -1000, 21910, 1963,
	460, 60553, -1000, -1000, 811, 20677, 20677, 1755, 811, 811,
	-129, 739, -1000, -1000, -1000, 2552, 102, -1000, 2611, 10245,
	-1000, -1000, -1000, 50260, -1000, 50260, -1000, 10245, 50260, 1934,
	1656, -1000, -1000, 1742, 459, 21910, 50260, 707, -1000, 1356,
	24650, 2353, 10245, 2353, 56088, -130, -135, 1646, -1000, -1000,
	1639, 20677, -1000, 60553, 1518, 1518, -140, -141, -1000, 916,
	913, 910, -1000, -1000, -1000, 905, -1000, 748, -30, 20677,
	-1000, -1000, 1384, 24650, -143, 24650, -148, 285, 101, 24650,
	-1000, -1000, 50260, 24650, 1580, -1000, 679, 31330, -1000, 2239,
	-1000, 2267, 50260, 2346, -1000, -1000, -1000, 1814, 456, -1000,
	758, 455, 454, -1000, -1000, -39, -1000, 711, 704, -1000,
	-1000, -1000, 10245, 1062, -1000, 5226, 5226, 5226, -1000, 283,
	-1000, -1000, 1541, 2432, -1000, 56016, 55659, 5330, 21910, 60553,
	-149, -1000, 50260, 60102, -106, -1000, -1000, -1000, 38654, 624,
	-1000, -1000, 2070, -1000, -1000, -1000, 50260, 1650, -1000, -1000,
	20677, 6250, 440, 20677, -1000, 1817, 432, -1000, -1000, -1000,
	-1000, -1000, -1000, 2416, -1000, 1326, -1000, -1000, 60102, 2399,
	-1000, -1000, 431, 430, 50260, 50260, 429, 426, 20677, 60102,
	50260, -150, 1356, -151, -1000, 1817, -1000, -157, 851, -159,
	50260, 31330, -1000, 1735, 1027, -166, 50260, 1273, -1000, -1000,
	30944, 30944, 1571, -1000, 50260, -1000, 50260, -1000, 50260, -1000,
	1520, 20677, -1000, -1000, 5330, -167, -1000, -59, -1000, 2478,
	-1000, -1000, -1000, -1000, 2148, 55587, 1699, 50260, 55230, 1432,
	50260, 2353, 50260, 848, 10245, 1452, 1452, -1000, -1000, 20677,
	20677, 60102, 423, -1000, 1817, 1356, 1432, 1356, 422, -1000,
	412, -1000, 1737, 1120, -1000, 813, -1000, -1000, -169, -172,
	-1000, -174, -177, -1000, 282, 21499, 21499, 21499, -106, -1000,
	50260, 411, 2127, -1000, 1554, 1394, 235, 877, -1000, -180,
	-1000, 410, -1000, 20677, -1000, -186, -1000, 836, -187, -1000,
	835, -188, -189, 50260, 1432, 1817, -1000, 1817, 24650, 24650,
	-1000, 27384, -1000, 758, 758, -1000, -1000, -1000, -1000, -1000,
	22306, 1551, 1254, 58161, -1000, -1000, -1000, -1000, 50260, -1000,
	1579, 1560, 1161, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1699, 60102, -1000, 1452, 1876, -1000, 1452, 1957, -1000, -1000,
	-194, -1000, 1432, 1432, -197, -199, -195, -1000, -1000, 2524,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2298, -1000, 878,
	1426, 1426, 1554, -1000, 408, -1000, 407, 1517, -1000, -1000,
	1356, -1000, -1000, 21088, -1000, 2537, -1000, -1000, 1786, -1000,
	-1000, 20677, 20677, -1000, -1000, -1000, 1817, -1000, -1000, -1000,
	-1000, -202, -204, 1432, 1432, 899, -1000, -1000, 403, 20677,
	-205, 1432, -1000,
}
var sqlPgo = [...]int{

	0, 3110, 3105, 2042, 3103, 2417, 3101, 3099, 3098, 3096,
	3093, 2415, 3092, 3091, 3090, 3089, 3088, 3078, 3077, 3076,
	3075, 3071, 3064, 3062, 3061, 3060, 3059, 3058, 3054, 3050,
	3044, 3040, 3039, 3036, 2409, 3035, 2407, 3034, 3031, 3022,
	3020, 3018, 3016, 3014, 3013, 19, 3009, 3008, 3006, 3005,
	3004, 2405, 2998, 2996, 2403, 2995, 2994, 2388, 2993, 2992,
	2377, 2989, 2369, 2988, 2987, 2366, 2984, 2979, 2359, 2978,
	2344, 2976, 2972, 2339, 2966, 98, 113, 2965, 2323, 2964,
	2961, 2320, 2318, 2313, 2959, 2305, 2955, 2954, 2271, 2269,
	2951, 3353, 2945, 2937, 2935, 2933, 2249, 2196, 2932, 2930,
	2928, 176, 2927, 2182, 2925, 2919, 2917, 2915, 2913, 2912,
	2909, 2908, 2904, 2902, 2900, 2897, 2896, 2894, 2892, 2883,
	2881, 2879, 2878, 2876, 2875, 2871, 2869, 2868, 186, 115,
	2867, 2866, 2155, 2133, 2865, 2864, 72, 75, 20, 62,
	151, 187, 4031, 174, 2863, 2861, 2858, 2855, 2854, 28,
	124, 119, 116, 117, 97, 2851, 2850, 51, 50, 23,
	22, 79, 2849, 2848, 2845, 1693, 86, 2844, 2843, 177,
	154, 2840, 434, 2837, 25, 81, 101, 83, 57, 47,
	2835, 96, 17, 2833, 123, 65, 2832, 55, 33, 24,
	4034, 93, 191, 56, 99, 153, 149, 152, 150, 121,
	87, 2831, 178, 59, 143, 2829, 2828, 2825, 49, 142,
	1, 6, 128, 8, 2824, 13, 2823, 9, 2821, 2817,
	2813, 2811, 16, 114, 35, 42, 2810, 32, 80, 138,
	2809, 171, 2808, 74, 2807, 181, 144, 137, 2, 169,
	2806, 2802, 2798, 2793, 2792, 78, 15, 77, 2790, 2789,
	91, 163, 2787, 71, 118, 82, 103, 185, 156, 92,
	160, 158, 2785, 2779, 2769, 120, 2767, 136, 104, 2764,
	2763, 27, 39, 159, 45, 2762, 2761, 108, 2757, 146,
	2749, 2746, 2741, 184, 111, 130, 10, 73, 88, 7,
	157, 105, 58, 52, 2738, 2594, 1302, 1281, 2737, 102,
	61, 43, 68, 107, 165, 30, 2736, 2735, 2910, 2733,
	2732, 2730, 2728, 126, 2723, 2721, 2719, 89, 31, 34,
	2718, 106, 48, 135, 182, 54, 145, 161, 179, 129,
	2717, 132, 95, 2713, 141, 175, 173, 2708, 1145, 2704,
	131, 2702, 2700, 2696, 2695, 359, 2689, 2688, 2686, 611,
	2683, 100, 2682, 134, 127, 133, 94, 112, 166, 162,
	227, 2681, 140, 26, 2679, 147, 36, 0, 3508, 3442,
	2678, 148, 90, 2677, 2676, 2675, 2674, 29, 11, 5,
	4, 14, 12, 427, 370, 2673, 2672, 139, 85, 109,
	2671, 188, 155, 2670, 2669, 2668, 40, 2664, 21, 2663,
	18, 2662, 2660, 37, 3, 2659, 2658, 164, 2656, 2649,
	2647, 2646, 2477, 2644, 180, 2643, 2641, 122, 2640, 2639,
	2638, 2637, 2284, 2634, 2633, 44, 38, 125,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 9, 9, 9, 33, 33, 11, 11,
	10, 10, 10, 12, 7, 7, 7, 7, 7, 7,
	7, 7, 14, 14, 24, 24, 15, 26, 414, 414,
	18, 28, 19, 29, 13, 22, 20, 20, 30, 17,
	17, 25, 25, 151, 151, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 413, 413, 153, 153, 152, 148,
	148, 416, 416, 154, 154, 154, 156, 156, 34, 34,
	89, 89, 89, 139, 82, 82, 82, 82, 82, 82,
	82, 77, 77, 365, 365, 366, 366, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 129, 129, 49, 49, 49, 49,
	49, 49, 49, 49, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 60,
	60, 50, 409, 409, 236, 236, 333, 333, 62, 62,
	63, 63, 63, 63, 63, 63, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 237, 237, 73, 73, 73, 73, 73,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 76, 76, 76, 76,
	76, 76, 76, 76, 335, 335, 74, 74, 306, 306,
	78, 78, 266, 266, 79, 79, 79, 79, 79, 80,
	80, 80, 80, 90, 90, 90, 90, 412, 412, 229,
	229, 169, 169, 169, 169, 85, 85, 85, 85, 86,
	86, 86, 87, 87, 134, 134, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 40, 40, 40, 41,
	41, 42, 42, 43, 43, 44, 44, 45, 45, 45,
	45, 45, 97, 97, 97, 99, 96, 96, 96, 98,
	98, 98, 98, 100, 100, 101, 101, 101, 101, 101,
	101, 102, 102, 359, 359, 244, 244, 357, 357, 358,
	358, 206, 206, 206, 206, 206, 207, 207, 207, 364,
	364, 364, 364, 364, 364, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 119, 119, 119, 128, 128, 128, 128, 128,
	128, 128, 121, 121, 121, 112, 112, 104, 104, 104,
	104, 108, 108, 108, 108, 108, 105, 105, 109, 109,
	111, 111, 113, 113, 113, 113, 113, 113, 106, 106,
	106, 106, 115, 115, 115, 115, 114, 114, 124, 124,
	124, 124, 124, 124, 320, 320, 120, 120, 120, 120,
	123, 123, 123, 123, 118, 118, 118, 122, 122, 125,
	125, 125, 125, 107, 107, 107, 419, 419, 419, 126,
	126, 117, 117, 127, 127, 127, 127, 127, 127, 127,
	116, 116, 116, 415, 415, 110, 410, 410, 407, 407,
	407, 407, 407, 407, 407, 408, 408, 411, 411, 83,
	83, 83, 55, 55, 56, 56, 208, 208, 209, 209,
	288, 288, 288, 288, 210, 210, 155, 155, 155, 213,
	214, 214, 211, 211, 212, 212, 212, 216, 216, 215,
	218, 218, 217, 287, 375, 375, 376, 376, 376, 376,
	376, 376, 376, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 373, 373, 373, 374, 371, 371, 372,
	372, 372, 372, 420, 420, 286, 286, 222, 222, 378,
	378, 378, 378, 379, 379, 379, 379, 379, 382, 381,
	380, 380, 380, 380, 380, 316, 316, 316, 59, 59,
	59, 255, 255, 254, 254, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 131,
	131, 57, 57, 57, 161, 161, 54, 54, 54, 58,
	58, 61, 61, 61, 61, 61, 61, 53, 53, 53,
	53, 53, 271, 271, 271, 270, 270, 227, 227, 322,
	322, 322, 173, 173, 174, 174, 149, 149, 149, 21,
	23, 23, 16, 16, 16, 16, 16, 16, 31, 31,
	32, 32, 27, 27, 417, 417, 418, 418, 84, 84,
	88, 88, 88, 94, 94, 130, 130, 130, 130, 130,
	130, 130, 35, 35, 35, 35, 47, 47, 47, 47,
	92, 423, 423, 423, 93, 93, 422, 422, 168, 168,
	168, 168, 170, 170, 283, 283, 284, 284, 424, 424,
	285, 285, 285, 163, 162, 164, 164, 52, 52, 52,
	157, 157, 158, 158, 159, 159, 160, 160, 425, 425,
	81, 81, 81, 133, 133, 202, 202, 279, 279, 279,
	223, 223, 179, 179, 282, 282, 280, 280, 280, 253,
	253, 253, 132, 132, 232, 232, 246, 246, 247, 247,
	330, 330, 248, 91, 91, 142, 142, 140, 140, 140,
	140, 140, 140, 141, 141, 141, 143, 143, 143, 143,
	143, 143, 143, 146, 146, 146, 146, 147, 147, 147,
	145, 145, 389, 389, 389, 391, 391, 392, 388, 388,
	390, 390, 421, 421, 257, 257, 257, 220, 221, 219,
	219, 426, 426, 225, 225, 224, 226, 226, 321, 321,
	321, 251, 251, 251, 251, 274, 274, 272, 272, 273,
	273, 275, 275, 276, 276, 276, 277, 277, 278, 278,
	250, 250, 302, 302, 144, 144, 144, 231, 231, 231,
	233, 233, 293, 293, 293, 294, 294, 292, 292, 292,
	292, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	324, 324, 234, 234, 325, 281, 281, 405, 405, 405,
	406, 406, 319, 319, 326, 326, 326, 326, 326, 326,
	317, 317, 318, 318, 331, 332, 332, 260, 260, 260,
	260, 258, 258, 259, 259, 327, 327, 327, 327, 252,
	252, 328, 328, 328, 289, 289, 336, 336, 336, 336,
	351, 230, 230, 230, 346, 346, 337, 337, 337, 337,
	337, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 340, 340, 340, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 350, 350, 350, 350, 350, 341,
	341, 347, 348, 342, 343, 349, 349, 349, 349, 353,
	353, 344, 344, 344, 344, 344, 344, 344, 344, 344,
	345, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 268, 268, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 297, 297, 297, 297, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	383, 383, 383, 383, 383, 383, 383, 383, 386, 386,
	387, 387, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 393, 393, 394, 394, 396, 396, 397, 397, 398,
	399, 399, 399, 400, 401, 401, 395, 395, 402, 402,
	402, 402, 403, 403, 404, 404, 404, 404, 404, 308,
	308, 309, 309, 315, 315, 315, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 171, 171, 171, 171, 171, 242, 242, 240,
	240, 240, 243, 243, 241, 241, 239, 239, 238, 238,
	305, 305, 303, 303, 307, 307, 261, 261, 352, 352,
	352, 352, 352, 352, 352, 262, 262, 262, 269, 263,
	263, 264, 264, 264, 264, 264, 299, 300, 265, 265,
	265, 301, 301, 310, 314, 314, 313, 312, 312, 311,
	311, 290, 290, 291, 291, 249, 249, 427, 427, 245,
	245, 329, 329, 329, 329, 204, 204, 235, 235, 203,
	203, 197, 197, 198, 198, 198, 198, 228, 228, 354,
	354, 354, 355, 356, 304, 189, 188, 176, 177, 187,
	186, 185, 175, 178, 182, 183, 184, 180, 181, 193,
	192, 191, 190, 334, 199, 199, 200, 200, 200, 201,
	201, 201, 201, 172, 172, 194, 194, 195, 196, 196,
	165, 165, 165, 166, 166, 167, 167, 363, 363, 361,
	361, 361, 362, 362, 362, 362, 360, 360, 360, 360,
	360, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 6, 1, 1,
	5, 5, 6, 6, 7, 7, 7, 10, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 1, 1, 1, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 3, 1, 1, 2, 1, 2, 7,
	3, 6, 1, 2, 1, 3, 2, 0, 8, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 6, 3,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 3, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	4, 7, 2, 6, 4, 7, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 2, 4, 3, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 3, 1, 1, 3, 5,
	4, 6, 4, 3, 0, 1, 3, 2, 4, 2,
	4, 1, 6, 6, 3, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 3, 1, 3, 2, 1, 3,
	1, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 5, 7, 3, 3, 3, 3, 4, 4,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 5, 4,
	6, 4, 6, 4, 1, 0, 2, 3, 3, 3,
	6, 4, 2, 3, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 3, 4, 3, 1, 1, 1, 2,
	3, 2, 3, 7, 7, 8, 10, 7, 4, 5,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	3, 2, 8, 11, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 2,
	1, 0, 1, 0, 9, 9, 3, 1, 3, 7,
	1, 3, 11, 3, 2, 0, 3, 1, 2, 2,
	3, 2, 6, 2, 1, 1, 2, 4, 2, 5,
	5, 5, 2, 8, 9, 6, 5, 3, 1, 4,
	7, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 7,
	3, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 1, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 6,
	3, 6, 7, 6, 5, 3, 4, 13, 16, 10,
	13, 4, 2, 2, 0, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 3, 4, 1, 5, 3, 4, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 2, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 1, 1, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 1, 2, 2, 2,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 1,
	2, 3, 2, 3, 2, 3, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 1, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 3,
	1, 1, 1, 1, 5, 3, 1, 1, 3, 1,
	2, 2, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 425, -4, -34, -36, -48, -46,
	-49, -79, -62, -63, -64, -78, -73, -77, -80, -81,
	-82, -83, -74, -89, -88, -90, -94, -40, -91, -84,
	-85, -95, -103, -130, -131, -132, -133, -5, -11, 25,
	36, -37, -38, -39, 51, 78, 66, -57, -54, -51,
	-60, 80, 100, -390, 104, -65, -68, -70, 109, 117,
	122, 123, 147, 157, 259, 266, 288, 290, 292, 301,
	-42, -41, 118, -140, -142, 286, -86, -87, -96, -97,
	-98, -99, -134, 319, -104, -105, -106, -107, -108, -109,
	-110, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, 322, -35,
	-47, -93, -92, 366, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -389,
	-66, -67, -69, -71, -72, -143, -141, 422, 287, 376,
	37, 331, 67, 112, 296, 20, -14, -18, -19, -15,
	-17, -20, -16, -24, -28, -29, -26, -25, -27, -30,
	-31, -32, -33, -21, -22, -13, 393, 401, -146, -144,
	-145, -147, 308, 384, 344, 426, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 2, 344, 387,
	309, 377, 93, 170, 271, 257, -407, 2, 4, -369,
	-367, -198, -197, 344, 93, 30, 38, 39, 41, 44,
	56, 57, 58, 61, 97, 98, 116, 124, 125, 136,
	149, 151, 160, 161, 162, 177, 183, 185, 165, 206,
	235, 236, 249, 253, 263, 265, 274, 298, 325, 340,
	355, 356, 357, 363, 364, 384, 385, 389, 396, 20,
	21, 22, 23, 25, 35, 36, 37, 40, 42, 43,
	46, 47, 48, 49, 50, 51, 52, 55, 60, 65,
	66, 67, 68, 69, 74, 71, 72, 73, 76, 78,
	79, 82, 83, 91, 92, 94, 95, 96, 100, 102,
	104, 107, 108, 109, 111, 113, 114, 117, 118, 121,
	119, 350, 352, 120, 122, 123, 133, 134, 135, 137,
	138, 140, 142, 146, 148, 152, 154, 155, 156, 157,
	158, 159, 171, 166, 172, 176, 179, 178, 180, 181,
	182, 173, 187, 190, 191, 192, 194, 195, 198, 199,
	200, 203, 202, 205, 208, 209, 212, 213, 216, 218,
	221, 222, 225, 223, 224, 227, 228, 230, 229, 237,
	238, 240, 241, 244, 245, 248, 251, 254, 255, 256,
	257, 258, 259, 260, 262, 264, 266, 268, 269, 270,
	271, 272, 273, 275, 276, 278, 279, 280, 281, 282,
	286, 284, 285, 287, 288, 289, 290, 292, 294, 295,
	296, 297, 299, 320, 321, 333, 301, 302, 303, 304,
	305, 306, 307, 311, 315, 312, 313, 314, 309, 310,
	316, 317, 319, 322, 324, 326, 327, 330, 331, 332,
	334, 337, 338, 339, 335, 336, 329, 342, 343, 345,
	346, 347, 348, 349, 351, 353, 358, 361, 362, 366,
	367, 369, 370, 373, 374, 375, 380, 376, 378, 381,
	382, 383, 388, 387, 394, 395, 397, 398, 399, -196,
	-165, 415, -195, 425, 425, 425, 2, 191, 192, 270,
	269, 316, 317, -190, -194, -195, -196, -165, 4, -367,
	-369, 93, 242, 425, 425, 425, 2, 344, 332, 55,
	309, 377, 294, 387, 367, 107, -270, 93, 372, -165,
	266, 24, 2, 102, 176, 375, 374, 24, 262, 310,
	346, 348, 2, 425, 425, 2, 387, 309, 344, 170,
	93, 377, 294, -184, 2, -165, -76, 2, 422, 27,
	-75, -5, -51, -60, -65, -78, -73, -11, -34, -36,
	-57, -54, -62, -68, -70, -82, -81, -83, -85, -89,
	-88, -91, -96, -97, -103, -132, -133, 80, 25, 109,
	319, 118, 186, 2, -412, -229, 2, 24, -169, -165,
	80, 147, 308, -139, 344, 2, -165, 191, 192, 2,
	-184, 2, -407, 2, 191, 192, 2, -412, -229, 23,
	2, -165, 2, 305, 322, -170, 2, 301, -165, 425,
	425, 425, 425, 425, 425, 213, 60, 298, 316, -101,
	362, -100, 355, 303, -102, -359, 2, 225, -165, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 2, -128, 316, 332, 155, 36, 60, 24, 65,
	94, 148, 170, 171, 199, 75, 76, 269, 213, 192,
	-320, 317, 345, 304, 342, 362, 80, 378, 295, -415,
	119, 4, 93, 225, 318, 355, 69, 349, 350, 425,
	425, 425, -421, 2, 344, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, -141, -143, -142, 425,
	425, 425, 425, 425, -224, -225, 371, 184, 115, 247,
	-140, -142, 2, -389, -128, 316, 2, 60, 24, -357,
	2, -295, 242, -297, 413, 414, 408, 231, 400, -308,
	99, 220, 219, -298, -310, 116, 298, -243, 7, 8,
	5, 6, -172, -338, -304, -345, 365, 126, 234, -201,
	428, 9, 422, -386, -142, -309, 31, 53, -361, -200,
	-339, -348, -343, -344, -346, 42, 49, 48, 353, 224,
	311, 312, 326, 313, 314, 40, 380, 166, 240, 241,
	178, 4, 185, -199, -165, -383, -384, -367, -368, 177,
	179, 180, 181, 182, 183, 325, 39, 274, 137, 138,
	136, 108, 98, 97, 236, 44, 43, 41, -349, 95,
	355, 356, 357, 358, 194, 195, 63, 85, 86, 84,
	89, 88, 90, 87, 318, 377, 54, 30, 160, 161,
	165, 235, 162, 61, -385, 336, 81, 127, 145, 175,
	163, 188, 189, 193, 207, 210, 226, 233, 250, 252,
	293, 323, 57, 56, 385, 124, 125, 149, 206, 253,
	263, 340, 363, 364, -422, 2, 362, 362, 2, -422,
	2, -422, 2, -168, 2, 362, 359, -423, 362, 396,
	-391, 275, -392, -184, -391, 425, 425, 427, 425, -219,
	-220, -221, 2, 24, 105, 422, 2, -323, 2, 420,
	-327, -142, 201, -326, 422, -324, -190, 243, -387, 299,
	-383, -384, -172, -165, -200, 4, 220, 219, -3, 2,
	-327, 160, -190, 2, -327, 160, 2, -191, 160, -327,
	-194, 2, -365, 160, -363, 9, -362, 5, 4, -367,
	-369, -368, 63, 2, -175, -165, 2, -203, 160, -190,
	-187, -360, 4, -367, -369, -368, -370, 24, 26, 27,
	28, 29, 31, 32, 33, 34, 45, 53, 54, 59,
	62, 64, 75, 80, 84, 85, 87, 86, 88, 89,
	90, 99, 101, 103, 105, 106, 110, 112, 115, 126,
	128, 141, 143, 144, 147, 150, 153, 164, 170, 174,
	184, 186, 201, 204, 211, 214, 215, 231, 232, 234,
	239, 242, 243, 246, 247, 261, 267, 277, 291, 308,
	318, 328, 341, 344, 354, 359, 360, 365, 371, 372,
	377, 379, 386, 390, 391, 392, 393, -188, -360, 359,
	427, -235, -197, -198, -228, -165, 424, -295, 2, -91,
	2, -295, 160, 2, -91, 160, 2, -295, 160, 2,
	-91, 160, 2, -222, 422, 424, 344, 64, 2, -190,
	160, -180, 2, -165, 141, -191, 160, 2, -194, -365,
	160, 2, -365, 160, 2, -193, 2, -190, -192, -194,
	-192, 170, 187, -175, 160, 2, -165, 24, 144, 2,
	186, 2, 186, 2, -328, 2, -327, -237, 160, 2,
	-190, -237, 160, 2, -237, 160, 2, -204, 160, 2,
	-203, -175, 160, 2, -366, 160, 2, -365, -366, 160,
	2, -266, 422, -335, 2, -334, -362, 384, 422, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 316, -139, 242, 359,
	427, 422, -365, -190, -295, -91, -306, 422, 144, -295,
	-91, 242, 144, 244, 2, 93, 344, 399, 24, -165,
	2, 320, 2, 422, -101, 58, 362, -284, 2, -285,
	-162, -163, -164, 190, 268, 273, 399, -357, 359, 405,
	144, -357, -244, 424, -128, 2, 141, 379, 2, 7,
	2, -365, 272, 133, 2, 320, 2, 269, 317, 60,
	144, 2, 2, -410, 2, 242, 144, 2, 144, 2,
	144, 2, 144, 2, 144, 2, 2, 269, 317, 2,
	361, 200, 120, 2, 144, 2, 144, 2, 5, 2,
	190, 268, 333, 2, -190, -419, 2, 344, 387, 309,
	2, 2, 144, 2, 144, 399, 2, -252, -327, -224,
	-225, -251, -272, -273, 211, 128, 239, -257, 24, 105,
	-257, -257, 47, 423, 423, -128, 320, 2, 10, 11,
	62, 35, 413, 414, 415, 416, 139, 417, 418, 411,
	412, 410, 403, 404, 407, 196, 197, 77, 406, 405,
	70, 217, 300, 129, 130, 131, 132, 283, 167, 168,
	169, 13, 14, 15, 28, 246, 210, 400, 163, 323,
	408, 16, 17, 18, 188, 189, 233, 38, 164, -171,
	-205, -295, -295, -295, -295, -295, 252, -249, -290, 420,
	-142, 422, 422, 422, 5, 422, 5, -356, 7, -142,
	-295, -308, 423, -241, 422, -142, -308, -303, 422, 298,
	420, -311, -295, 424, -393, 394, -341, 422, 265, -340,
	422, -340, -340, -353, 388, 395, 401, 395, 401, 141,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, 422, 422, -353, -353, 422, 422, 422, 422, 422,
	422, 422, 422, 422, -283, -284, -283, 359, -170, 427,
	-391, -222, 422, -245, -329, -295, 415, -245, -245, 242,
	-238, -295, 81, -260, 193, 226, 145, 207, 293, 175,
	-356, -76, -292, 428, -319, 401, -142, -324, -165, -142,
	-326, 422, -323, -319, 415, -190, 422, 144, 422, 424,
	-151, 284, -150, 22, 25, 109, 382, 121, -212, 172,
	257, 116, 329, -414, 118, 302, 351, 352, 284, 116,
	-254, -256, 32, 91, 228, 254, 50, 158, 219, 220,
	331, 389, 116, 284, 393, 116, 118, 284, -153, 329,
	-414, 118, 302, 284, -152, -212, 116, 428, 118, 237,
	-365, -235, 427, 427, -360, 415, 116, 116, 116, 116,
	144, -228, -360, -190, -199, -165, -200, 422, -222, 231,
	242, -409, -236, 344, -190, -255, -254, 231, -161, -388,
	393, 231, 231, -222, 32, 422, 2, -177, 160, 2,
	-166, -165, 170, -388, 231, -328, -202, -190, -202, 319,
	-184, 32, -154, 427, 52, 289, 116, -154, 116, -154,
	116, -154, 427, 116, -154, 116, 427, 116, 116, -238,
	423, 427, -335, -365, -407, -228, -169, -365, -138, 393,
	144, 80, 422, 32, -305, -336, -337, -350, -338, -347,
	-342, -345, 279, 280, 278, 282, 281, 42, 49, 48,
	353, 224, 311, 312, 326, 313, 314, 40, 380, 166,
	240, 241, 178, 4, 41, -349, 185, 177, 179, 180,
	181, 182, 183, 325, 39, 274, 137, 138, 136, 108,
	98, 97, 236, 44, 43, 95, 355, 356, 357, 358,
	194, 195, 57, 56, 385, 336, -366, -407, -228, 141,
	-175, 2, -190, 2, 71, 72, 399, -359, -238, 32,
	-284, 2, -424, 427, 209, -207, 216, 230, 154, 243,
	397, -364, 5, 4, -304, -316, 99, 213, -345, 8,
	414, -354, 7, 413, -358, -357, -358, 83, 424, -360,
	344, 194, -365, -365, -359, 24, 321, 2, -190, -411,
	141, -408, 294, -407, -190, -190, -190, -190, -190, 141,
	2, 361, 2, 361, 2, -165, -165, 209, -190, 344,
	170, 344, -154, 427, -251, -273, -272, -275, -295, 24,
	-278, 135, 227, -295, -297, -141, -141, -141, -226, -321,
	-295, 267, 170, -359, -351, -336, -336, -189, -360, 355,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, -295, 210, 163, 323, 38, 164,
	-295, 359, -295, -295, -295, -295, 223, 231, 234, 365,
	126, 373, 105, 237, -427, 341, 34, -301, -142, -242,
	422, -315, 29, 328, 24, -308, 422, -290, -295, -291,
	-239, -238, -238, 423, 386, 24, 105, 415, 2, 7,
	-267, 398, 222, 96, 156, 221, -268, 307, 423, 427,
	32, 423, -295, -239, -307, -303, -314, -313, 390, -360,
	415, -394, 134, 150, 7, -356, 355, 355, 355, 355,
	422, 423, 2, 423, 2, 423, 2, 423, 2, 423,
	2, -295, -295, -295, -295, -295, -295, -295, -238, -261,
	2, -352, -238, 4, 398, 222, 96, 156, 221, 307,
	-261, 2, -238, 2, -238, 2, -262, 2, -295, -238,
	-263, -296, -297, 413, 414, 408, -308, -264, 2, -295,
	-239, -295, 45, 204, 360, -265, -295, 144, -238, -170,
	-392, 32, -238, -231, 427, 144, 32, 4, -231, -231,
	422, 423, 427, 193, 193, -323, -260, 193, -258, 250,
	-258, -258, -405, 422, 421, -319, -176, 420, 429, -360,
	-318, -317, 32, -184, 248, -319, -319, 424, 423, -318,
	-190, 422, -238, -360, 427, 359, -417, 75, 64, -287,
	160, 64, -371, -178, 75, -372, -165, 59, 372, 267,
	143, -417, 75, -417, 75, 75, 319, 332, 47, -327,
	35, -91, 205, 73, 144, 359, -327, -256, -336, 91,
	219, 220, 47, -355, -354, 414, -355, 47, -355, -355,
	-355, 393, -191, -327, 359, 258, -365, 73, 359, 427,
	35, -91, 205, 73, 144, 359, -203, -176, 73, 344,
	-332, -331, 402, -197, -165, 424, -295, -91, -295, -91,
	334, 423, 424, 188, 188, -208, -209, -165, -288, -287,
	-373, -374, -371, 187, 170, 372, 127, 32, 116, -228,
	-333, 186, 427, -236, 116, 258, 116, 116, 32, 422,
	113, 271, 2, 242, 231, -177, 160, -157, 347, 116,
	-289, 391, -279, -91, 422, 99, 32, -279, -246, -247,
	-330, -248, -178, 422, -184, -190, -237, -237, -237, -203,
	-204, -175, -365, -366, -366, 423, -76, -334, 423, -138,
	359, 393, 423, -137, 245, -136, -165, 5, -139, 379,
	-209, -75, 25, 80, 109, 423, 427, -230, 31, 420,
	-267, 422, -353, 422, -138, -331, 144, -229, -332, -332,
	141, 72, 405, 359, 423, 362, -285, -206, 273, 327,
	285, 315, 8, 7, 7, 427, -360, -190, 141, -228,
	-228, 316, 141, 141, 424, -190, -203, -190, -327, -276,
	-354, 422, -277, 298, 299, 427, -149, 33, 103, 198,
	-190, 399, 114, -295, -295, 359, -427, 341, -301, 114,
	-295, 223, 234, 365, 126, 373, 105, 237, 144, 422,
	-296, -296, 423, -240, -295, -295, 421, 431, 423, -426,
	427, -224, -295, -238, -238, 423, 423, 359, 359, 359,
	359, 422, 424, -238, -228, 421, 421, 427, -312, -313,
	110, -295, 424, -399, 251, 422, 422, 423, 423, 427,
	399, 399, 399, 399, -295, 32, 427, 427, 427, 423,
	427, 427, 427, 423, 423, 144, 423, 423, 423, 423,
	-269, 261, 423, 10, 11, 413, 414, 415, 416, 139,
	417, 418, 411, 412, 410, 403, 404, 405, 70, 217,
	300, 13, 14, 15, 188, 164, -296, -296, -296, 423,
	-299, -300, 144, 141, 32, -265, -265, -265, 423, 144,
	-238, 422, 423, -289, -329, -233, 2, -323, -186, -360,
	-289, -289, -238, -295, -323, -323, -259, 379, 242, 193,
	-323, -317, 423, -406, -356, -319, -318, -356, -294, -293,
	142, 229, -184, -222, -318, -318, -360, -319, 423, -234,
	-325, -387, -426, 424, -150, -190, -178, -185, -165, 231,
	-287, 160, -156, 231, -336, -185, 422, 422, 198, 198,
	-178, -185, 160, -178, 160, -185, -185, -413, 273, 238,
	-295, 212, 271, 232, -151, 284, -91, -91, 399, 422,
	-193, 284, -199, -355, -355, -254, 284, -191, -365, 393,
	399, -175, -152, -91, -91, 399, 422, -176, -153, 284,
	399, -190, -135, 159, 237, 415, -360, -129, 5, 234,
	-129, 423, 427, 170, -177, 170, -183, -166, -91, -190,
	144, -138, -365, -190, -191, -365, -365, -365, -91, 2,
	422, 2, -190, 116, 242, 231, -158, 111, -425, 405,
	-175, -225, -224, -295, -253, -282, 291, 242, -223, -179,
	-178, 384, -184, -253, -232, 427, 144, 405, 424, -223,
	-154, -154, -154, -154, -154, -76, 144, -228, 23, -138,
	427, 422, 405, 405, 422, -365, -365, 423, -336, 420,
	421, 7, 7, 422, -356, -138, -228, 144, -43, 393,
	271, 93, 344, 257, 170, -357, -357, -284, 370, 68,
	273, -357, 344, 316, 316, -165, -277, -295, -321, -190,
	428, -295, -295, 114, 114, -295, -296, -296, -295, 114,
	144, 422, -295, -305, 28, 28, 423, 427, -291, -295,
	423, 386, -426, -426, -426, 5, 222, 156, 221, -268,
	221, -268, -268, 7, 415, -360, 423, -303, 112, -295,
	354, -360, 415, -400, -181, 422, -165, 391, -224, -356,
	423, -351, -336, -295, -295, -295, -295, -295, -295, -299,
	-295, -351, -336, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, -296, -296, -296, -296, -296, -296, -296, -296,
	-296, -296, 105, 231, 237, -296, -300, -299, -295, -295,
	-336, 423, 423, 423, -238, -75, -250, 150, -332, 427,
	-250, -250, 423, -259, 422, -295, -323, 421, 423, 427,
	-318, 421, 427, 430, 405, -222, 424, -317, 423, 427,
	-281, 32, 423, -360, 359, 359, 116, 231, 381, -375,
	-372, -295, -227, -322, -178, -387, 422, -165, 422, 422,
	-148, 109, 319, -418, 116, -154, 116, -154, 397, 422,
	422, 359, -417, 75, -295, -238, 359, 359, 258, -295,
	-295, -238, 359, -295, 118, -138, 144, 343, -210, 173,
	-288, -166, 422, -177, 422, 422, -222, -190, -255, -161,
	2, -271, 379, -176, -190, 116, -159, 203, -425, -363,
	-388, -274, -272, -253, -245, 232, 74, 423, 427, 424,
	-289, -247, -233, -295, 2, 423, -91, 244, -136, -137,
	-365, -365, -365, -138, -139, -139, 7, 421, 423, -356,
	423, -228, 245, -187, -175, -190, -188, -203, -190, 243,
	423, -149, -176, -295, -295, 114, 28, 28, -295, -295,
	-305, 423, -295, -295, -238, 421, 5, -295, 423, 423,
	423, 423, -295, 424, -401, -165, -295, 423, 423, 423,
	423, 427, 427, 423, 423, 423, 423, -300, 144, 105,
	237, 422, 423, 423, -302, 153, 47, -323, -302, -302,
	-228, -292, -356, -293, -176, 420, -360, -325, 422, 424,
	-178, -185, -287, 116, -376, 75, -377, 62, 127, 80,
	231, 234, 372, 267, 59, 99, 277, 32, 423, 423,
	427, -174, 62, -174, -295, -227, -228, 231, 338, 99,
	231, 99, 92, 367, -178, -185, -228, -228, -190, -178,
	-185, 423, -193, -191, -365, 423, -176, 73, -366, 355,
	-211, -212, 164, 422, -227, 422, -228, -208, 32, 422,
	146, 46, 242, 422, -176, -160, 202, -425, -363, -157,
	-253, -280, 422, 242, -91, -179, 2, -225, 405, 423,
	423, 92, 92, 421, 423, -44, -45, 170, 75, 260,
	-214, -213, 257, 237, -149, -295, -295, -295, 423, -426,
	-360, 415, -395, 257, 423, -295, -295, -296, 144, 422,
	-305, -396, 392, -295, -238, -396, -396, 423, -319, -356,
	2, -287, -185, -189, -182, -165, 127, 160, 234, 198,
	422, -296, -190, 422, 2, -286, -420, 79, 339, -322,
	-149, -189, -149, 423, 423, 423, 234, 234, -295, -336,
	-154, -154, 423, 423, 359, 359, 359, 359, 399, -295,
	255, -227, 423, -227, 423, 423, -91, -227, -190, -227,
	242, -425, -363, -158, 106, -228, 75, -274, -301, -138,
	422, 422, 427, 24, 422, 24, 422, -188, 344, 423,
	-225, 47, 423, 423, -296, -305, 423, -397, -398, -181,
	-318, 421, -377, -182, 231, -295, -167, 422, -295, -210,
	422, -174, 277, -173, 62, 422, 422, -178, -185, 422,
	422, -295, -190, 423, -286, 423, -210, 423, -271, 423,
	-190, -363, -159, 374, 232, 423, -185, -253, -366, -366,
	-45, -228, -228, -190, -402, 271, 299, 152, -238, 423,
	427, 32, 116, 423, -378, 218, -165, 423, -211, -228,
	-149, -190, -416, 379, -189, -216, -215, -213, -218, -217,
	-213, -238, -238, 422, -210, -286, -211, -286, 422, 422,
	-160, 319, -289, 423, 423, 423, 423, 423, -403, -404,
	38, 369, 83, -295, -403, -403, -398, -400, 127, -379,
	-382, -381, 242, 145, 256, 324, 423, 338, 389, 423,
	-222, -295, 423, 427, 384, 423, 427, 384, 423, 423,
	-228, -211, -210, -210, -227, -227, -246, -138, -138, -404,
	264, 140, 298, 264, 140, -182, -381, 242, -382, 242,
	374, 102, -378, -215, 164, -217, 144, 423, -211, -211,
	423, 423, -289, 28, -380, 228, 289, 52, 319, -380,
	-379, 422, 422, -155, 52, 289, -286, -404, 21, 234,
	99, -238, -238, -210, 423, 423, -211, -211, 359, 422,
	-238, 423, -211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 189, 191, 193, 0, 0, 0, 216, 218, 220,
	221, -2, 0, 0, 0, 256, 257, 259, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	396, 397, 0, 873, -2, 0, 375, 377, 386, 388,
	390, 392, 393, 0, 455, 457, 459, 461, 463, 465,
	467, 468, 470, 472, 474, 476, 478, 480, 482, 484,
	486, 488, 490, 492, 494, 496, 498, 500, -2, 785,
	787, 789, 791, -2, 62, 64, 66, 68, 70, 72,
	88, 224, 225, 227, 229, 231, 234, 235, 237, 910,
	262, 264, 266, 268, 270, -2, 924, 0, 0, 0,
	-2, 0, -2, -2, -2, 803, 73, 74, 75, 76,
	77, 78, 79, 94, 95, 96, 97, 98, 99, 100,
	81, 83, 84, 90, 91, 93, 0, 0, 886, 888,
	890, 892, -2, 0, 0, -2, 7, 13, 15, 17,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38,
	40, 42, 46, 52, 54, 56, 60, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 159, -2, -2,
	-2, -2, 0, 0, 1567, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
	1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
	1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
	1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
	1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
	1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
	1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
	1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702,
	1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712,
	1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
	1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732,
	1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742,
	1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1463,
	1507, 1466, 1461, 190, 192, 194, 195, 0, 0, 0,
	0, 0, 0, 678, 1492, 1505, 1506, 1507, 1510, 1511,
	1512, 1567, 0, 217, 219, 222, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 354,
	1659, 356, 358, 0, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 258, 260, 261, 0, 0, 0, 0,
	0, 0, 0, 353, 351, 1486, 295, 296, 0, 0,
	336, 337, 338, 339, 340, 341, 343, 300, 302, 304,
	305, 307, 309, 311, 313, 315, 317, 319, 321, 322,
	324, 326, 327, 329, 331, 332, 334, 746, 0, 0,
	0, 0, 0, 172, 0, 368, 362, 367, 369, 371,
	372, 373, 374, 0, 0, 170, 163, 0, 0, 611,
	349, 347, 0, 162, 0, 0, 782, 0, 368, 1534,
	366, 783, 784, 0, 0, 778, 779, 1689, 813, 376,
	378, 387, 389, 391, 394, -2, -2, 1784, -2, 417,
	-2, 425, 1787, 1691, 428, 0, 430, -2, 433, 456,
	458, 460, 462, 464, 466, 469, 471, 473, 475, 477,
	479, 481, 483, 485, 487, 489, 491, 493, 495, 497,
	499, 501, 502, 0, 0, 0, 0, 0, 506, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 505, 507, 508, 509, 0, 554, 593, 594, 786,
	788, 790, 0, 720, 912, 63, 65, 67, 69, 71,
	226, 228, 230, 232, 236, 238, -2, 884, 885, 263,
	265, 267, 269, 271, -2, 0, 916, 916, 916, 0,
	0, 885, 883, 0, 379, 0, 381, 0, 506, 384,
	385, 437, 438, 1127, 0, 0, 0, 0, 0, 1361,
	1211, -2, -2, 1243, 1245, 1763, 1784, 1360, 1247, 1248,
	1249, 1250, 0, 0, 1253, 0, 1255, 1256, 1257, 1258,
	0, 1260, 0, 1264, 1265, 1266, 0, 1440, 1503, -2,
	1041, 1042, 1043, 1044, 1045, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1499, 1494, 1332, 1279, -2, 1521, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1575, -2, -2, -2, -2, -2, -2, 1094, -2,
	-2, -2, -2, -2, -2, -2, 1796, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 0, 1752, 1769, 1770,
	1775, 1777, 1771, 1760, 1302, -2, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1809, 1810, 1811, 1812,
	1813, 1814, -2, -2, -2, 1764, 1765, 1767, 1776, 1780,
	1781, 1786, 1790, 1791, 815, 793, 806, 815, 795, 796,
	797, 798, 799, 804, 805, 808, 0, 800, 801, 802,
	902, 1666, 905, 678, 903, 887, 889, 0, 891, 0,
	0, 0, 896, 919, 917, 0, 955, 900, 901, 911,
	970, 993, 0, 975, 0, 993, 1015, 0, 980, 1685,
	1280, 1281, 0, 1507, 1504, -2, 1807, 1808, 2, 80,
	0, 1769, 1015, 82, 0, 1769, 85, 0, 1769, 0,
	-2, 89, 0, 1769, 173, 174, 1517, 1518, 1522, 1523,
	1524, 1525, 1796, 92, 0, 1482, 101, 0, 1769, 1460,
	0, 1479, 1526, 1527, 1528, 1529, 1530, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 0, 1476, 0,
	0, 603, 1457, 1462, 604, 1467, 0, 196, 197, 198,
	199, 200, 1769, 202, 203, 0, 205, 206, 1769, 208,
	209, 0, 211, 0, 0, 0, 0, 0, 233, 678,
	1769, 0, 240, 1487, 0, 702, 1769, 700, 1491, -2,
	1769, 723, 726, 1769, 728, 678, 730, 1489, 735, 1490,
	0, -2, 0, 909, 1769, 829, 355, 357, 0, 249,
	0, 842, 0, 844, 0, 863, 1021, 155, 1769, 274,
	293, 155, 1769, 277, 155, 1769, 280, 155, 1769, 283,
	1455, 155, 1769, 286, 287, 1769, 289, 175, 290, 1769,
	292, 350, 0, 0, -2, 344, 1493, -2, 0, 342,
	301, 303, 306, 308, 310, 312, 314, 316, 318, 320,
	323, 325, 328, 330, 333, 335, -2, 0, 0, 0,
	0, 0, 187, 0, 609, 610, 0, 0, 0, 780,
	781, 0, 0, 0, 398, 0, 0, 0, 0, 812,
	395, 0, 414, 0, 416, 1759, -2, -2, 420, 816,
	820, 821, 822, 0, 0, 0, 0, 427, 0, 0,
	0, 431, 434, 0, 503, 504, 0, 0, 514, 515,
	516, 517, 1664, 1589, 520, 0, 523, 544, 558, 0,
	0, 527, 529, 608, 531, 0, 0, 533, 0, 535,
	0, 537, 0, 539, 0, 541, 543, 545, 559, 547,
	0, 0, 0, 557, 0, 563, 0, 566, 567, 568,
	0, 570, 571, 572, 573, 0, 575, 576, -2, -2,
	580, 582, 0, 592, 0, 510, 511, 155, 1019, -2,
	0, 879, 933, 934, 0, 0, 0, 0, 914, 915,
	0, 0, 0, 875, 876, 380, 0, 383, 0, 0,
	0, 0, 1366, 1367, 1368, 1369, 1370, 1371, 1374, 1375,
	1372, 1373, 1376, 1377, 0, 0, 0, 0, 0, 1378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1379, 1380, 1381, 0, 0, 1383, 0, 1385, 0,
	0, 0, 0, 0, 0, 1190, 1192, 1448, 0, 0,
	1382, 1132, 1133, 1134, 1169, 1170, 0, 1244, 1445, 1444,
	1246, 0, 1397, 0, 1252, 0, 1124, 1259, 1473, -2,
	0, 1361, 1392, 0, 0, 1267, 1268, 1269, 0, 0,
	1397, 0, 1439, 0, 1334, 0, 1077, 0, 1078, 1079,
	0, 1080, 1081, 1092, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 1096, 0, 0, 0, 0, 0,
	1420, -2, 0, 0, 792, -2, 794, 0, 810, 0,
	904, 0, 0, 959, 1449, 1453, 1454, 959, 959, 0,
	0, 1398, 0, 0, 0, 0, 1012, 1012, 1012, 1010,
	987, 0, 993, 0, 1003, 0, 993, 993, 0, -2,
	975, 0, 0, 1003, 1016, 1017, 0, 0, 0, 0,
	102, 775, 123, 0, 775, 775, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 119, 108, 109, 0, 0,
	86, 703, 0, 706, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 121, 0, 146, 148, 0, 0, 0, 0,
	1006, 602, 0, 0, 1508, 1465, 0, 0, 0, 0,
	0, 0, 1508, 0, 0, 1494, 1495, 617, 0, 0,
	0, 247, 242, 0, 244, 698, 701, 0, 721, 0,
	908, 0, 0, 0, 0, 0, 736, 0, 1769, 741,
	1478, 1513, 1514, 831, 0, 1025, 0, 845, 0, 0,
	1022, 0, 272, 0, 153, 154, 0, 275, 0, 278,
	0, 281, 0, 0, 284, 0, 0, 0, 0, 0,
	911, 0, 0, 187, 0, 360, 370, 0, 165, 0,
	0, 0, 0, 911, 0, 1400, 1033, 1029, 1036, 1037,
	1038, 1124, 1084, 1085, 1086, 1087, 1088, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1100, 1094, 1110, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1090, 0,
	1065, 1065, 1065, 1082, 1083, 1101, 1102, 1104, 1106, 1108,
	1034, 1035, 1100, 1100, 1097, 1098, 187, 0, 364, 0,
	1006, 400, 1006, 402, 0, 588, 0, 0, 0, 0,
	-2, 422, 0, 818, 0, 823, 446, 447, 448, 825,
	826, 426, 449, 450, 451, 452, 453, 454, 0, 695,
	0, 697, 1469, 0, 423, 439, 424, 429, 0, 435,
	0, 0, 518, 519, 521, 522, 524, 525, 526, 530,
	0, 596, 1681, 606, 532, 534, 536, 538, 540, 0,
	549, 0, 551, 0, 553, 561, 564, 569, 574, 0,
	0, 0, 719, 0, 882, 931, 932, 937, 941, 942,
	945, 948, 949, 939, 1127, 897, 898, 899, 925, 926,
	758, 0, 0, 382, 1128, 1030, 1129, 1130, 1475, 0,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	-2, -2, -2, -2, -2, -2, -2, -2, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, -2,
	-2, -2, 1167, 1168, -2, 1384, 1386, 0, 1448, 0,
	-2, 0, -2, -2, -2, -2, 1187, 0, 1189, 1194,
	1196, 1198, 0, 0, 0, 0, 1447, 1208, 1431, 1432,
	0, 0, 1363, 1364, 1365, 1193, 0, 1446, 1443, 0,
	0, 1396, 922, 1270, 0, 0, 0, 0, 1277, 0,
	1474, 1111, 1112, 1113, 1114, 1115, 1116, 1125, 1263, 1394,
	0, 1393, 0, 0, 0, 1404, 1438, 1434, 0, 1496,
	1502, 1342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
	1312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1314, 0, 1407, -2, -2, -2, -2, -2, -2, -2,
	0, 1316, 0, 1328, 0, 1330, 0, 1318, 1398, 1417,
	0, 0, 1214, 0, 0, 0, 1361, 0, 1321, 1398,
	1425, 0, 0, 0, 0, 0, 1398, 0, 1430, 809,
	906, 0, 0, 1025, 0, 0, 0, 1452, 1025, 1025,
	0, 954, 0, 0, 0, 0, 0, 0, 1007, 1011,
	1008, 1009, 0, 0, 993, 1003, 967, 0, 0, 1477,
	973, 1002, 0, 678, 992, 1003, 1003, 0, -2, 977,
	0, 0, 922, -2, 0, 0, 0, 0, 774, 125,
	1769, 0, 157, 0, 0, 668, 1483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 110, 0, 0, 0, 0, 0, 704, 705, 707,
	713, 715, 0, 709, 1472, 0, 710, 0, 712, 714,
	716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 1459, 0, 0,
	178, 1005, 0, 1458, 1468, 0, 201, 204, 207, 210,
	188, 677, 0, 0, 0, 0, 616, -2, 618, 620,
	621, 622, 623, 1615, 1514, 0, 1514, 0, 0, 0,
	187, 0, 0, 243, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 1769, 833, 839, 0,
	924, 0, 861, 847, 0, 0, 0, 861, 865, 866,
	868, 869, 0, 0, 1023, 294, 155, 155, 155, 1456,
	155, 155, 176, 288, 291, 352, 297, 345, 911, 0,
	0, 0, 187, 185, 1647, 183, 180, 182, 0, 0,
	0, 346, 0, 0, 0, 348, 0, 1026, 1028, 0,
	1039, 0, 1092, 0, 160, 187, 0, 0, 399, 404,
	0, 589, 0, 0, 415, 0, 817, 824, 0, 443,
	0, 445, 696, 1471, 1470, 0, 436, 512, 0, 607,
	605, 548, 0, 0, 0, 590, 591, 595, 1020, 0,
	943, 0, 940, 946, 947, 0, 928, 756, 757, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1209, 0,
	-2, 1188, 1191, 1195, 1197, 1199, 0, 0, 0, 0,
	0, 0, 1387, 0, 1389, 1210, 1441, 1444, 1359, 0,
	0, 921, 922, 922, 922, 1276, 0, 0, 0, 0,
	0, 0, 0, 1395, 0, 1402, 1403, 0, 0, 1435,
	0, 0, 0, 1278, 0, 0, 0, 1089, 1063, 0,
	1103, 1105, 1107, 1109, 0, 0, 0, 0, 0, 1297,
	0, 0, 0, 1301, 1313, 0, 1315, 1327, 1329, 1317,
	0, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1217, 1218, 1219, 1320,
	1423, 1424, 0, 0, 0, 0, 0, 0, 1326, 0,
	1429, 911, 956, 951, 1450, 1006, 958, 960, 1451, 1480,
	951, 951, 0, 1399, 995, 0, 997, 0, 0, 0,
	999, 0, 988, 0, 990, 1003, 972, 0, 0, 965,
	0, 964, 678, 1001, 974, 978, 1496, 0, 1018, 0,
	982, 985, 0, 0, 124, 762, 0, 0, 1481, 0,
	127, 1769, 136, 0, 645, 0, 0, 0, 0, 0,
	777, 137, 1769, 155, 1769, 155, 138, 141, 0, 145,
	143, 0, 0, 636, 103, 775, 106, 112, 0, 0,
	768, 0, 708, 711, 717, 87, 0, 770, 760, 0,
	0, 759, 147, 107, 113, 0, 0, 772, 105, 0,
	0, 0, 187, 0, 0, 1464, 1509, 212, 214, 215,
	213, 625, 0, 1514, 0, 1514, 0, 1485, 614, 678,
	0, 241, 246, 245, 702, 724, -2, 727, 729, 731,
	0, 733, 744, 0, 0, 0, 835, 839, 0, 838,
	909, 936, 923, 1024, 840, 861, 0, 0, 0, 850,
	852, 849, 846, 843, 1025, 0, 0, 0, 0, 0,
	273, 276, 279, 282, 285, 298, 0, 359, 0, 164,
	0, 0, 0, 0, 0, 187, 0, 0, 1401, 0,
	1031, 0, 0, 0, 0, 161, 363, 0, 401, 0,
	0, 0, 0, 0, 0, 412, 413, -2, 441, 442,
	444, 440, 0, 550, 552, 560, 0, 0, 927, 758,
	0, 1131, 1172, 0, 0, -2, 0, 0, 1176, 0,
	0, 0, -2, 0, 0, 0, 1388, 1390, 0, 1443,
	1271, 0, 0, 0, 0, 1254, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 0, 1261, 1262, 1362, 1405, 1433, 1437,
	0, 1497, 1501, 1340, 1341, 1345, 1488, 0, 0, 0,
	1282, 0, 0, 0, 0, 0, 0, 0, 1406, 1416,
	1418, 1215, 1216, 1220, 1221, 1222, 1223, 1224, 1225, 1226,
	1227, 1228, 1229, -2, -2, -2, 1233, 1234, 1235, -2,
	-2, -2, 0, 0, 0, 1419, 1421, 1422, 1426, 1427,
	0, 1323, 1324, 1325, 1428, 0, 953, 0, 957, 0,
	953, 953, 918, 996, 0, 1014, 998, 970, 989, 0,
	979, 968, 0, 969, 0, 1000, 0, 976, 981, 0,
	984, 0, 1271, -2, 0, 0, 0, 0, 156, 643,
	667, 0, 0, 747, 755, 755, 0, 1483, 0, 0,
	129, 0, 0, 0, 0, 134, 0, 140, 144, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 115,
	118, 0, 0, 114, 0, 158, 0, 0, 633, 0,
	619, 0, 0, 0, 0, 617, 0, 239, 699, 722,
	732, 0, 0, 0, 0, 0, 837, 839, 0, 830,
	831, 861, 935, 841, 859, 860, 858, 0, 0, 0,
	924, 867, 864, 870, 871, 0, 171, 361, 184, 0,
	179, 181, 0, 167, 0, 0, 0, 1032, 1040, 0,
	1093, 365, 0, 583, 584, 631, 0, 587, 513, 938,
	944, 929, 758, 1174, 1178, 0, 0, 0, 1180, -2,
	0, 1202, -2, -2, 1391, 1442, 1251, 922, 1272, 1274,
	1275, 1126, 1436, 0, 1347, 1344, 0, 1331, 1064, 1292,
	1293, 0, 0, 1296, 1298, 1299, 1300, 1415, 0, 0,
	0, 0, 1322, 907, 1336, 0, 0, 961, 1336, 1336,
	0, 993, 991, 966, 962, 0, 1497, 983, 0, 0,
	764, 766, 126, 0, 644, 0, 647, 0, 0, 0,
	0, 654, 655, 0, 0, 0, 0, 0, 669, 676,
	0, 758, 0, 758, 0, 0, 0, 0, 131, 150,
	0, 0, 776, 0, 155, 155, 0, 0, 763, 0,
	0, 0, 769, 771, 761, 0, 773, 0, 177, 0,
	612, 632, 0, 0, 0, 0, 0, 0, 0, 0,
	742, 743, 0, 0, 0, 827, 839, 0, 832, 833,
	248, 0, 0, 0, 848, 851, 853, 936, 0, 186,
	187, 0, 0, 1027, 1091, 403, 405, 0, 0, 411,
	585, 630, 0, 0, 930, 1182, -2, -2, 1203, 0,
	1498, 1500, 924, 0, 1333, 0, 0, -2, 0, 0,
	0, 893, 0, 952, 950, 894, 895, 1013, 1003, 0,
	986, 128, 0, 648, 649, 1484, 651, 0, 653, 656,
	0, 658, 1516, 0, 662, 625, 0, 673, 674, 748,
	749, 754, 750, 755, 671, 0, 130, 132, 149, 753,
	133, 139, 0, 0, 0, 0, 0, 0, 0, 1004,
	0, 0, 676, 0, 666, 625, 615, 0, 744, 0,
	0, 0, 834, 835, 0, 0, 0, 861, 872, 166,
	0, 0, 0, 407, 0, 409, 0, 629, 0, 1273,
	1351, 0, 1294, 1295, -2, 0, 1241, 1335, 1337, 0,
	971, 963, 646, 650, 0, 0, 682, 0, 0, 633,
	0, 758, 0, 152, 0, 0, 0, 765, 767, 0,
	0, 117, 0, 665, 625, 676, 633, 676, 0, 739,
	0, 836, 837, 0, 855, 1025, 857, 862, 0, 0,
	406, 0, 0, 586, 0, 0, 0, 0, 1346, 1242,
	0, 0, 0, 657, 687, 0, 0, 0, 670, 0,
	751, 678, 135, 0, 752, 0, 637, 0, 0, 640,
	0, 0, 0, 0, 633, 625, 613, 625, 0, 0,
	828, 0, 856, 187, 187, 408, 410, 1343, 1348, 1352,
	-2, 1734, 1564, 0, 1349, 1350, 1338, 1339, 0, 659,
	683, 684, 0, 679, 680, 681, 1515, 660, 661, 675,
	682, 151, 634, 0, 0, 635, 0, 0, 120, 122,
	0, 663, 633, 633, 0, 0, 1025, 168, 169, 0,
	1354, 1355, 1356, 1357, 1358, 652, 685, 0, 686, 0,
	0, 0, 687, 638, 0, 641, 0, 628, 664, 737,
	676, 740, 854, 0, 688, 0, 691, 692, 0, 689,
	672, 0, 0, 624, 626, 627, 625, 1353, 690, 693,
	694, 0, 0, 633, 633, 0, 738, 639, 0, 0,
	0, 633, 642,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 411, 3, 417, 412, 3,
	422, 423, 415, 413, 427, 414, 424, 416, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 431, 426,
	403, 405, 404, 407, 428, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 420, 3, 421, 418, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 429, 410, 430, 408,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 406, 57746, 409, 57747, 419, 57748, 425, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1025
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1031
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1040
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1074
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1077
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1086
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1169
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1173
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1226
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1230
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1234
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1240
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1250
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1256
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1266
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1273
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1280
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1287
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1294
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1304
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1314
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1324
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1337
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1349
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1359
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1369
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1380
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1410
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1414
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1417
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1438
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1455
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1458
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1474
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1503
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1507
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1525
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1529
		{
			sqlVAL.union.val = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1539
		{
			sqlVAL.union.val = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1546
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1550
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1554
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1564
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1593
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1623
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1627
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1662
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1670
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1674
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1678
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1682
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1685
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1705
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1709
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1719
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1729
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1733
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1739
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1743
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1747
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1751
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1757
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1761
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1767
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1771
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1774
		{
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1778
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1790
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1791
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1792
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1793
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1803
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1811
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1813
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1816
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1826
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1835
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1843
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1845
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1849
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1852
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1862
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1871
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1879
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1881
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1885
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1888
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1892
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1897
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1903
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1904
		{
			sqlVAL.str = ""
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1914
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1916
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CREATE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1921
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1922
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1923
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1924
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1926
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1927
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1928
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1929
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1946
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1950
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1960
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1964
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1970
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1974
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1981
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1985
		{

			sqlVAL.union.val = nil
		}
	case 248:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1999
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2009
		{
			return helpWith(sqllex, "DELETE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2019
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2020
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2021
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2022
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2023
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2032
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2033
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2034
		{
			return helpWith(sqllex, "DROP")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2037
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2038
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2039
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2040
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2041
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2049
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2053
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2056
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2064
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2068
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2071
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2079
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2083
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2086
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2094
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2102
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2109
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2125
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2132
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2140
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2144
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2147
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2155
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2159
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2162
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2166
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2191
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2194
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2196
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2200
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2207
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2210
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2211
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2213
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2214
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2215
		{
			return helpWith(sqllex, "DELETE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2216
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2217
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2218
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2219
		{
			return helpWith(sqllex, "INSERT")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2220
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2222
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2223
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2225
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2228
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2229
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2231
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2232
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2240
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2241
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2245
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2259
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2266
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2270
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2274
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2284
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2290
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2296
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2300
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2314
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2318
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2322
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2325
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2345
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2349
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2353
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2356
		{
			return helpWith(sqllex, "GRANT")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2376
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2380
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2387
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2392
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2396
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2407
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2425
		{
			return helpWith(sqllex, "RESET")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2426
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2434
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2438
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2441
		{
			return helpWith(sqllex, "RESET")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2452
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2463
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2466
		{
			return helpWith(sqllex, "USE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2470
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2471
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2472
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2473
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2474
		{
			return helpWith(sqllex, "USE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2475
		{
			return unimplemented(sqllex, "set local")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2491
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2509
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2527
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2535
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2539
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2543
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2549
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2559
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2567
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2571
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2575
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2586
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2590
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2593
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2599
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2615
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2619
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2624
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2641
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2644
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2646
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2649
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2653
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2664
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2681
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2688
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2694
		{
			return unimplemented(sqllex, "set from current")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2695
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2703
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2708
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2715
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2719
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2725
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2736
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2742
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2752
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2760
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2774
		{
			sqlVAL.union.val = tree.Low
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2778
		{
			sqlVAL.union.val = tree.Normal
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2782
		{
			sqlVAL.union.val = tree.High
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2793
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2797
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2801
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2806
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2810
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2822
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2823
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2824
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2825
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2826
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2827
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2829
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2830
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2831
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2832
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2833
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2834
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2835
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2836
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2837
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2838
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2839
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2840
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2841
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2842
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2843
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2844
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2846
		{
			return helpWith(sqllex, "SHOW")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2853
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2855
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2866
		{
			sqlVAL.str = "client_encoding"
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2869
		{
			sqlVAL.str = "timezone"
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2870
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2884
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2888
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2891
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2902
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2910
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2918
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2925
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2933
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2940
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2950
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2954
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2957
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2959
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2962
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2970
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2973
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2981
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2984
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2997
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3005
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3013
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3016
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3018
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3021
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3023
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3034
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3039
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3050
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3053
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3055
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3059
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3069
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3072
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3084
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3086
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3089
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3091
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3095
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3098
		{
			sqlVAL.union.val = true
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3099
		{
			sqlVAL.union.val = false
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3107
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3110
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3112
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3116
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3126
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3135
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3144
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3147
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3154
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3158
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3168
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3172
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3180
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3185
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3190
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3194
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3202
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3206
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3223
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3234
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3237
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3241
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3246
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3251
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3258
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3266
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3273
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3278
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3290
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3294
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3297
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3305
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3312
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3317
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3437
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3441
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3445
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3484
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3488
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3493
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3497
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3506
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3513
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3517
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3538
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3541
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3589
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3603
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3614
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3628
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3634
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3638
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3644
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3650
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3656
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3664
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3671
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3676
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3681
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3687
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3694
		{
			sqlVAL.str = ""
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3701
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3707
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3714
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3721
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3727
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3731
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3737
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3747
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 642:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3757
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3768
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3779
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3783
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3789
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3793
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3797
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3801
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3805
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3809
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3813
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3831
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3835
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3839
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3843
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3847
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3851
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3855
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3863
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3867
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3871
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 663:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3878
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3900
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3910
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3922
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3927
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3933
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3939
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3950
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3960
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3984
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3988
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3994
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3998
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4003
		{
			return unimplemented(sqllex, "match full")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4004
		{
			return unimplemented(sqllex, "match partial")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4005
		{
			return unimplemented(sqllex, "match simple")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4006
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4013
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4017
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4021
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4025
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4029
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4041
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4049
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4053
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4061
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4065
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4071
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4075
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4081
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4100
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 699:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4108
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4116
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4120
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4123
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4124
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4127
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4128
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4130
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4131
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4132
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4135
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4137
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4139
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4141
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4142
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4144
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4145
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4147
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4149
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4157
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4160
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4168
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4172
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4175
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4179
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4183
		{
			sqlVAL.union.val = nil
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4193
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4197
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4200
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4208
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4215
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4223
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4225
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4227
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4229
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4231
		{
			return unimplementedWithIssue(sqllex, 27793)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4233
		{
			return unimplementedWithIssue(sqllex, 27796)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4249
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4262
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4276
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[5].str),
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				Unique:   sqlDollar[2].union.bool(),
				Inverted: true,
				Columns:  sqlDollar[9].union.idxElems(),
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4286
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       sqlDollar[10].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4296
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4301
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4305
		{
			sqlVAL.union.val = false
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4309
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4315
		{
			sqlVAL.union.val = true
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4319
		{
			sqlVAL.union.val = false
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4325
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4341
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4342
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4345
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4346
		{
			sqlVAL.str = ""
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4349
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4350
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4354
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4358
		{
			sqlVAL.union.val = tree.Descending
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4362
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4368
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4375
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4379
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4385
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4389
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4393
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4397
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4401
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4403
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4407
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4411
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4417
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4421
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4427
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4431
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4436
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4437
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4440
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4441
		{
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4449
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4452
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4462
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4471
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4474
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4482
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4485
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4489
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4490
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4491
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4507
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4510
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4512
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4515
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4525
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4528
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4530
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4533
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4537
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4542
		{
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4543
		{
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4544
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4552
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4559
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4562
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4563
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4567
		{
			sqlVAL.str = ""
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4571
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4575
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4579
		{
			sqlVAL.str = ""
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4585
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4589
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4595
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4599
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4605
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4609
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4622
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4624
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4628
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4632
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4636
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4642
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4648
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4654
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4658
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 827:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4668
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4678
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4688
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4692
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4696
		{
			sqlVAL.str = ""
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4702
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4706
		{
			sqlVAL.str = ""
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4712
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4716
		{
			sqlVAL.str = ""
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4722
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4726
		{
			sqlVAL.str = ""
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4731
		{
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4732
		{
		}
	case 840:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4744
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4751
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4758
		{
			return helpWith(sqllex, "INSERT")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4769
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4776
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4780
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4788
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4794
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4798
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4802
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4808
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4832
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 854:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4836
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4840
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4846
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4850
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4852
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4858
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4863
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4867
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 862:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4895
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4899
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4900
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4904
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4921
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4924
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4928
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4971
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4977
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4981
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4996
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5000
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5004
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5008
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5012
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5016
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5023
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5058
		{
			return helpWith(sqllex, "SELECT")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5059
		{
			return helpWith(sqllex, "VALUES")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5060
		{
			return helpWith(sqllex, "TABLE")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5082
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5095
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5109
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5121
		{
			return helpWith(sqllex, "SELECT")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5125
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5134
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5143
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5158
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5165
		{
			return helpWith(sqllex, "TABLE")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5177
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5180
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5181
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5185
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5195
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5203
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5204
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5208
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5211
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5214
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5215
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = true
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5223
		{
			sqlVAL.union.val = false
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5227
		{
			sqlVAL.union.val = false
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5233
		{
			sqlVAL.union.val = true
		}
	case 918:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5239
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5244
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5245
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5248
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5249
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5253
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5257
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5263
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5269
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5273
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5279
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5283
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5287
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5296
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5305
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5316
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5320
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5329
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5335
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5342
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5349
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5358
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5362
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5366
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5372
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5373
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5376
		{
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5377
		{
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5394
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5398
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5404
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5408
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5427
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5430
		{
			return helpWith(sqllex, "VALUES")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5432
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5444
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5447
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 959:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5449
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5455
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5459
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5465
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5469
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5475
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5481
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5486
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5498
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5502
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5506
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5510
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5537
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5551
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5560
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5567
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5569
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5573
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5577
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5582
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5604
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5608
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5614
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5616
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5620
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5626
		{
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5628
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5631
		{
			sqlVAL.union.val = nil
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5633
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5637
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 992:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5647
		{
			sqlVAL.union.val = true
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5651
		{
			sqlVAL.union.val = false
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5671
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5675
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5679
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5683
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5687
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5691
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5697
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5701
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5708
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5714
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5721
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5731
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5735
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5739
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5745
		{
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5746
		{
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5757
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5761
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5766
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5767
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5768
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5769
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5773
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5777
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5790
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5794
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5798
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5804
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5808
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5820
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5834
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5843
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5852
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5858
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5865
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5867
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5876
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5880
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5884
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5893
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5911
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5915
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5919
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5923
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5927
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5931
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5935
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5939
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5943
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5947
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5951
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5955
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5959
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5963
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5967
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5971
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5975
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5995
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5999
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6003
		{
			sqlVAL.union.val = nil
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6010
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6014
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6018
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6022
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6026
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6030
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6034
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6038
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6042
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6046
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6050
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6054
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6058
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6062
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6069
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6076
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6083
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6087
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6094
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6098
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6102
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6106
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6116
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6137
		{
			return unimplementedWithIssue(sqllex, 20991)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6143
		{
			return unimplementedWithIssue(sqllex, 20991)
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6149
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6161
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6167
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6171
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6175
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6179
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6184
		{
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6185
		{
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6190
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6194
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6198
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6202
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6206
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6210
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6214
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6218
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6222
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6227
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6233
		{
			sqlVAL.union.val = tree.Year
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6237
		{
			sqlVAL.union.val = tree.Month
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6241
		{
			sqlVAL.union.val = tree.Day
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6245
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6249
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6253
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6259
		{
			sqlVAL.union.val = tree.Month
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6263
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6267
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6271
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6275
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6279
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6283
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6287
		{
			sqlVAL.union.val = nil
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6293
		{
			sqlVAL.union.val = tree.Second
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6296
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6320
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6324
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6328
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6331
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6340
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6345
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6349
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6353
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6357
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6361
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6365
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6369
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6373
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6377
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6381
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6389
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6393
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6397
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6405
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6409
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6429
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6437
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6441
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6445
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6449
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6453
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6457
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6461
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6465
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6469
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6473
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6477
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6481
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6485
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6489
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6493
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6497
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6501
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6505
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6509
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6513
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6517
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6521
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6525
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6529
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6533
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6537
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6541
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6545
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6549
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6584
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6586
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6590
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6594
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6598
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6602
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6606
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6618
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6622
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6626
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6634
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6642
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6650
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6667
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6671
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6675
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6690
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6694
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6698
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6702
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6706
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6710
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6714
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6718
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6722
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6726
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6730
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6734
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6738
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6742
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6746
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6750
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6754
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6758
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6762
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6766
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6770
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6774
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6778
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6782
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6786
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6790
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6794
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6798
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6812
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6820
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6856
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6860
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6864
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6868
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6871
		{
			return unimplemented(sqllex, "func const")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6873
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6877
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6880
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6882
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6886
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6890
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6894
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6898
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6907
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6912
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6916
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6920
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6929
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6933
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6950
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6954
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6957
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6958
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6960
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6964
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6968
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6971
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6982
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6989
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6998
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6999
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7003
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7015
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7019
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7023
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7027
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7088
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7091
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7096
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7101
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7103
		{
			return unimplementedWithIssue(sqllex, 26097)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7106
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7108
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7111
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7116
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7118
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7121
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7126
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7128
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7132
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7135
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7136
		{
			return unimplemented(sqllex, "treat")
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7138
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7146
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7150
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7154
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7157
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7162
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7167
		{
			return unimplemented(sqllex, "within group")
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7168
		{
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7172
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7176
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7183
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7187
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7193
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7197
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7203
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7211
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7215
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7219
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7226
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7246
		{
			sqlVAL.str = ""
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7252
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7256
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7267
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7274
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7281
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7288
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7294
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7307
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7354
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7370
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7374
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7381
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7393
		{
			sqlVAL.union.val = tree.Any
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7397
		{
			sqlVAL.union.val = tree.Some
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7401
		{
			sqlVAL.union.val = tree.All
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7406
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7407
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7408
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7409
		{
			sqlVAL.union.val = tree.Div
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7411
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7412
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7413
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7414
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7415
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7416
		{
			sqlVAL.union.val = tree.LT
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7417
		{
			sqlVAL.union.val = tree.GT
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7418
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7419
		{
			sqlVAL.union.val = tree.LE
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7420
		{
			sqlVAL.union.val = tree.GE
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7421
		{
			sqlVAL.union.val = tree.NE
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7425
		{
			sqlVAL.union.val = tree.Like
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7426
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7427
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7428
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7451
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7455
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7461
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7465
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7469
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7480
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7484
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7490
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7494
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7501
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7507
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7517
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7521
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7527
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7531
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7537
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7541
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7547
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7551
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7573
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7577
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7581
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7587
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7594
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7598
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7615
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7619
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7623
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7627
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7631
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7637
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7643
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7649
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7653
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7657
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7663
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7675
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7682
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7698
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7702
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7709
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7726
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7732
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7741
		{
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7742
		{
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7746
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7756
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7765
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7769
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7773
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7781
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7791
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7801
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7808
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7850
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7862
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7866
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7877
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7888
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7898
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7996
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8003
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8007
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8011
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8046
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8064
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8074
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8078
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8092
		{
			sqlVAL.str = ""
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8098
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8102
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
