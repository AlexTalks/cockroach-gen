// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:566
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8448

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	426, 57,
	-2, 901,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	168, 736,
	-2, 0,
	-1, 60,
	102, 901,
	174, 901,
	374, 901,
	375, 901,
	-2, 0,
	-1, 74,
	114, 875,
	127, 875,
	182, 875,
	209, 875,
	238, 875,
	246, 875,
	371, 875,
	-2, 864,
	-1, 110,
	119, 552,
	198, 552,
	361, 552,
	-2, 0,
	-1, 115,
	4, 903,
	20, 903,
	21, 903,
	22, 903,
	23, 903,
	25, 903,
	30, 903,
	35, 903,
	36, 903,
	37, 903,
	38, 903,
	39, 903,
	40, 903,
	41, 903,
	42, 903,
	43, 903,
	44, 903,
	46, 903,
	47, 903,
	48, 903,
	49, 903,
	50, 903,
	51, 903,
	52, 903,
	55, 903,
	56, 903,
	57, 903,
	58, 903,
	60, 903,
	61, 903,
	65, 903,
	66, 903,
	67, 903,
	68, 903,
	69, 903,
	71, 903,
	72, 903,
	73, 903,
	74, 903,
	76, 903,
	78, 903,
	79, 903,
	82, 903,
	83, 903,
	91, 903,
	92, 903,
	93, 903,
	94, 903,
	95, 903,
	96, 903,
	97, 903,
	98, 903,
	100, 903,
	102, 903,
	104, 903,
	107, 903,
	108, 903,
	110, 903,
	111, 903,
	113, 903,
	115, 903,
	116, 903,
	117, 903,
	118, 903,
	119, 903,
	120, 903,
	121, 903,
	122, 903,
	123, 903,
	124, 903,
	132, 903,
	133, 903,
	134, 903,
	135, 903,
	136, 903,
	137, 903,
	139, 903,
	141, 903,
	145, 903,
	147, 903,
	148, 903,
	150, 903,
	152, 903,
	153, 903,
	154, 903,
	155, 903,
	156, 903,
	157, 903,
	158, 903,
	159, 903,
	160, 903,
	163, 903,
	164, 903,
	169, 903,
	170, 903,
	171, 903,
	174, 903,
	175, 903,
	176, 903,
	177, 903,
	178, 903,
	179, 903,
	180, 903,
	181, 903,
	183, 903,
	185, 903,
	188, 903,
	189, 903,
	190, 903,
	192, 903,
	193, 903,
	196, 903,
	197, 903,
	198, 903,
	200, 903,
	201, 903,
	203, 903,
	204, 903,
	206, 903,
	207, 903,
	210, 903,
	211, 903,
	214, 903,
	216, 903,
	219, 903,
	220, 903,
	221, 903,
	222, 903,
	223, 903,
	225, 903,
	226, 903,
	227, 903,
	228, 903,
	233, 903,
	234, 903,
	235, 903,
	236, 903,
	237, 903,
	239, 903,
	240, 903,
	242, 903,
	243, 903,
	244, 903,
	247, 903,
	248, 903,
	250, 903,
	252, 903,
	253, 903,
	254, 903,
	255, 903,
	256, 903,
	257, 903,
	258, 903,
	259, 903,
	261, 903,
	262, 903,
	263, 903,
	264, 903,
	265, 903,
	267, 903,
	268, 903,
	269, 903,
	270, 903,
	271, 903,
	272, 903,
	273, 903,
	274, 903,
	275, 903,
	277, 903,
	278, 903,
	279, 903,
	280, 903,
	281, 903,
	283, 903,
	284, 903,
	285, 903,
	286, 903,
	287, 903,
	288, 903,
	289, 903,
	291, 903,
	293, 903,
	294, 903,
	295, 903,
	296, 903,
	297, 903,
	298, 903,
	300, 903,
	301, 903,
	302, 903,
	303, 903,
	304, 903,
	305, 903,
	306, 903,
	308, 903,
	309, 903,
	310, 903,
	311, 903,
	312, 903,
	313, 903,
	314, 903,
	315, 903,
	316, 903,
	318, 903,
	319, 903,
	320, 903,
	321, 903,
	323, 903,
	324, 903,
	325, 903,
	326, 903,
	328, 903,
	329, 903,
	330, 903,
	331, 903,
	332, 903,
	333, 903,
	334, 903,
	335, 903,
	336, 903,
	337, 903,
	338, 903,
	339, 903,
	341, 903,
	342, 903,
	344, 903,
	345, 903,
	346, 903,
	347, 903,
	348, 903,
	349, 903,
	350, 903,
	351, 903,
	352, 903,
	353, 903,
	355, 903,
	356, 903,
	357, 903,
	358, 903,
	361, 903,
	362, 903,
	363, 903,
	364, 903,
	366, 903,
	367, 903,
	369, 903,
	370, 903,
	373, 903,
	374, 903,
	375, 903,
	376, 903,
	378, 903,
	380, 903,
	381, 903,
	382, 903,
	383, 903,
	384, 903,
	385, 903,
	387, 903,
	388, 903,
	389, 903,
	394, 903,
	395, 903,
	396, 903,
	397, 903,
	398, 903,
	399, 903,
	-2, 0,
	-1, 136,
	114, 874,
	127, 874,
	182, 874,
	209, 874,
	238, 874,
	246, 874,
	371, 874,
	-2, 867,
	-1, 141,
	1, 797,
	188, 797,
	267, 797,
	272, 797,
	425, 797,
	426, 797,
	-2, 0,
	-1, 143,
	1, 797,
	425, 797,
	426, 797,
	-2, 0,
	-1, 144,
	1, 797,
	425, 797,
	426, 797,
	-2, 0,
	-1, 145,
	1, 801,
	425, 801,
	426, 801,
	-2, 0,
	-1, 173,
	4, 910,
	5, 910,
	6, 910,
	7, 910,
	8, 910,
	9, 910,
	20, 910,
	21, 910,
	22, 910,
	23, 910,
	25, 910,
	30, 910,
	31, 910,
	35, 910,
	36, 910,
	37, 910,
	38, 910,
	39, 910,
	40, 910,
	41, 910,
	42, 910,
	43, 910,
	44, 910,
	46, 910,
	47, 910,
	48, 910,
	49, 910,
	50, 910,
	51, 910,
	52, 910,
	53, 910,
	54, 910,
	55, 910,
	56, 910,
	57, 910,
	58, 910,
	60, 910,
	61, 910,
	63, 910,
	65, 910,
	66, 910,
	67, 910,
	68, 910,
	69, 910,
	71, 910,
	72, 910,
	73, 910,
	74, 910,
	76, 910,
	78, 910,
	79, 910,
	81, 910,
	82, 910,
	83, 910,
	84, 910,
	85, 910,
	86, 910,
	87, 910,
	88, 910,
	89, 910,
	90, 910,
	91, 910,
	92, 910,
	93, 910,
	94, 910,
	95, 910,
	96, 910,
	97, 910,
	98, 910,
	99, 910,
	100, 910,
	102, 910,
	104, 910,
	107, 910,
	108, 910,
	110, 910,
	111, 910,
	113, 910,
	115, 910,
	116, 910,
	117, 910,
	118, 910,
	119, 910,
	120, 910,
	121, 910,
	122, 910,
	123, 910,
	124, 910,
	125, 910,
	126, 910,
	132, 910,
	133, 910,
	134, 910,
	135, 910,
	136, 910,
	137, 910,
	139, 910,
	141, 910,
	144, 910,
	145, 910,
	147, 910,
	148, 910,
	150, 910,
	152, 910,
	153, 910,
	154, 910,
	155, 910,
	156, 910,
	157, 910,
	158, 910,
	159, 910,
	160, 910,
	161, 910,
	163, 910,
	164, 910,
	169, 910,
	170, 910,
	171, 910,
	173, 910,
	174, 910,
	175, 910,
	176, 910,
	177, 910,
	178, 910,
	179, 910,
	180, 910,
	181, 910,
	183, 910,
	185, 910,
	186, 910,
	187, 910,
	188, 910,
	189, 910,
	190, 910,
	191, 910,
	192, 910,
	193, 910,
	196, 910,
	197, 910,
	198, 910,
	200, 910,
	201, 910,
	203, 910,
	204, 910,
	205, 910,
	206, 910,
	207, 910,
	208, 910,
	210, 910,
	211, 910,
	214, 910,
	216, 910,
	217, 910,
	218, 910,
	219, 910,
	220, 910,
	221, 910,
	222, 910,
	223, 910,
	224, 910,
	225, 910,
	226, 910,
	227, 910,
	228, 910,
	229, 910,
	231, 910,
	232, 910,
	233, 910,
	234, 910,
	235, 910,
	236, 910,
	237, 910,
	239, 910,
	240, 910,
	243, 910,
	244, 910,
	247, 910,
	248, 910,
	249, 910,
	250, 910,
	251, 910,
	252, 910,
	253, 910,
	254, 910,
	255, 910,
	256, 910,
	257, 910,
	258, 910,
	259, 910,
	261, 910,
	262, 910,
	263, 910,
	264, 910,
	265, 910,
	267, 910,
	268, 910,
	269, 910,
	270, 910,
	271, 910,
	272, 910,
	273, 910,
	274, 910,
	275, 910,
	277, 910,
	278, 910,
	279, 910,
	280, 910,
	281, 910,
	283, 910,
	284, 910,
	285, 910,
	286, 910,
	287, 910,
	288, 910,
	289, 910,
	291, 910,
	292, 910,
	293, 910,
	294, 910,
	295, 910,
	296, 910,
	297, 910,
	298, 910,
	300, 910,
	301, 910,
	302, 910,
	303, 910,
	304, 910,
	305, 910,
	306, 910,
	308, 910,
	309, 910,
	310, 910,
	311, 910,
	312, 910,
	313, 910,
	314, 910,
	315, 910,
	316, 910,
	317, 910,
	318, 910,
	319, 910,
	320, 910,
	321, 910,
	322, 910,
	323, 910,
	324, 910,
	325, 910,
	326, 910,
	328, 910,
	329, 910,
	330, 910,
	331, 910,
	332, 910,
	333, 910,
	334, 910,
	335, 910,
	336, 910,
	337, 910,
	338, 910,
	339, 910,
	341, 910,
	342, 910,
	344, 910,
	345, 910,
	346, 910,
	347, 910,
	348, 910,
	349, 910,
	350, 910,
	351, 910,
	352, 910,
	353, 910,
	355, 910,
	356, 910,
	357, 910,
	358, 910,
	361, 910,
	362, 910,
	363, 910,
	364, 910,
	365, 910,
	366, 910,
	367, 910,
	369, 910,
	370, 910,
	373, 910,
	374, 910,
	375, 910,
	376, 910,
	377, 910,
	378, 910,
	380, 910,
	381, 910,
	382, 910,
	383, 910,
	384, 910,
	385, 910,
	387, 910,
	388, 910,
	389, 910,
	394, 910,
	395, 910,
	396, 910,
	397, 910,
	398, 910,
	399, 910,
	400, 910,
	408, 910,
	413, 910,
	414, 910,
	415, 910,
	422, 910,
	428, 910,
	-2, 0,
	-1, 176,
	1, 57,
	426, 57,
	-2, 901,
	-1, 209,
	424, 1488,
	427, 1488,
	-2, 595,
	-1, 210,
	424, 1490,
	427, 1490,
	-2, 596,
	-1, 211,
	424, 1489,
	427, 1489,
	-2, 597,
	-1, 212,
	427, 1430,
	-2, 598,
	-1, 625,
	143, 1606,
	359, 1606,
	405, 1606,
	424, 1606,
	-2, 0,
	-1, 626,
	143, 1528,
	359, 1528,
	405, 1528,
	424, 1528,
	-2, 0,
	-1, 628,
	143, 1680,
	359, 1680,
	405, 1680,
	424, 1680,
	-2, 0,
	-1, 630,
	143, 1709,
	359, 1709,
	405, 1709,
	424, 1709,
	-2, 0,
	-1, 637,
	143, 1611,
	359, 1611,
	405, 1611,
	424, 1611,
	-2, 425,
	-1, 672,
	1, 525,
	421, 525,
	423, 525,
	425, 525,
	426, 525,
	-2, 0,
	-1, 673,
	1, 594,
	140, 594,
	421, 594,
	423, 594,
	425, 594,
	426, 594,
	-2, 0,
	-1, 679,
	1, 539,
	421, 539,
	423, 539,
	425, 539,
	426, 539,
	-2, 0,
	-1, 681,
	1, 543,
	421, 543,
	423, 543,
	425, 543,
	426, 543,
	-2, 0,
	-1, 683,
	1, 553,
	421, 553,
	423, 553,
	425, 553,
	426, 553,
	-2, 0,
	-1, 684,
	1, 559,
	421, 559,
	423, 559,
	425, 559,
	426, 559,
	-2, 0,
	-1, 685,
	1, 562,
	421, 562,
	423, 562,
	425, 562,
	426, 562,
	-2, 0,
	-1, 689,
	1, 576,
	421, 576,
	423, 576,
	425, 576,
	426, 576,
	-2, 0,
	-1, 690,
	1, 578,
	421, 578,
	423, 578,
	425, 578,
	426, 578,
	-2, 0,
	-1, 718,
	127, 914,
	209, 914,
	238, 914,
	-2, 870,
	-1, 726,
	127, 913,
	209, 913,
	238, 913,
	-2, 868,
	-1, 753,
	422, 1785,
	-2, 1202,
	-1, 754,
	422, 1786,
	-2, 1203,
	-1, 783,
	422, 1482,
	-2, 1473,
	-1, 784,
	5, 1052,
	422, 1497,
	-2, 1488,
	-1, 785,
	422, 1498,
	-2, 1489,
	-1, 792,
	5, 1036,
	-2, 1518,
	-1, 793,
	5, 1037,
	-2, 1523,
	-1, 794,
	5, 1038,
	-2, 1522,
	-1, 795,
	5, 1039,
	-2, 1705,
	-1, 796,
	5, 1040,
	-2, 1613,
	-1, 797,
	5, 1041,
	-2, 1673,
	-1, 798,
	5, 1042,
	-2, 1675,
	-1, 799,
	5, 1043,
	-2, 1676,
	-1, 800,
	5, 1044,
	-2, 1677,
	-1, 801,
	5, 1045,
	-2, 1685,
	-1, 802,
	5, 1046,
	-2, 1717,
	-1, 803,
	5, 1047,
	-2, 1582,
	-1, 804,
	5, 1048,
	-2, 1517,
	-1, 805,
	5, 1049,
	-2, 1621,
	-1, 806,
	5, 1050,
	-2, 1622,
	-1, 807,
	5, 1051,
	-2, 1586,
	-1, 808,
	5, 1100,
	422, 1100,
	-2, 1752,
	-1, 828,
	5, 1073,
	-2, 1519,
	-1, 829,
	5, 1091,
	-2, 1547,
	-1, 831,
	5, 1065,
	-2, 1569,
	-1, 832,
	5, 1066,
	-2, 1570,
	-1, 833,
	5, 1057,
	-2, 1585,
	-1, 834,
	5, 1058,
	-2, 1587,
	-1, 835,
	5, 1059,
	-2, 1588,
	-1, 836,
	5, 1060,
	-2, 1589,
	-1, 837,
	5, 1024,
	-2, 1595,
	-1, 838,
	5, 1025,
	-2, 1596,
	-1, 839,
	5, 1088,
	-2, 1695,
	-1, 840,
	5, 1098,
	-2, 1707,
	-1, 841,
	5, 1063,
	-2, 1732,
	-1, 842,
	5, 1090,
	-2, 1733,
	-1, 843,
	5, 1072,
	-2, 1734,
	-1, 844,
	5, 1090,
	-2, 1735,
	-1, 845,
	5, 1090,
	-2, 1736,
	-1, 846,
	5, 1055,
	-2, 1739,
	-1, 847,
	5, 1055,
	-2, 1740,
	-1, 850,
	5, 1080,
	-2, 1744,
	-1, 852,
	5, 1056,
	-2, 1750,
	-1, 853,
	5, 1061,
	-2, 1751,
	-1, 855,
	5, 1055,
	-2, 1756,
	-1, 858,
	5, 1064,
	-2, 1761,
	-1, 859,
	5, 1062,
	-2, 1763,
	-1, 861,
	5, 1092,
	-2, 1765,
	-1, 862,
	5, 1094,
	-2, 1766,
	-1, 863,
	5, 1096,
	-2, 1767,
	-1, 866,
	5, 1087,
	-2, 1771,
	-1, 936,
	422, 1497,
	-2, 1488,
	-1, 951,
	283, 1470,
	415, 1470,
	-2, 1469,
	-1, 1100,
	257, 899,
	-2, 721,
	-1, 1109,
	241, 1492,
	-2, 0,
	-1, 1152,
	1, 292,
	421, 292,
	425, 292,
	426, 292,
	-2, 873,
	-1, 1155,
	4, 1770,
	10, 1770,
	11, 1770,
	13, 1770,
	14, 1770,
	15, 1770,
	16, 1770,
	17, 1770,
	18, 1770,
	20, 1770,
	21, 1770,
	22, 1770,
	23, 1770,
	25, 1770,
	28, 1770,
	30, 1770,
	32, 1770,
	35, 1770,
	36, 1770,
	37, 1770,
	38, 1770,
	39, 1770,
	40, 1770,
	41, 1770,
	42, 1770,
	43, 1770,
	44, 1770,
	46, 1770,
	47, 1770,
	48, 1770,
	49, 1770,
	50, 1770,
	51, 1770,
	52, 1770,
	55, 1770,
	56, 1770,
	57, 1770,
	58, 1770,
	60, 1770,
	61, 1770,
	62, 1770,
	65, 1770,
	66, 1770,
	67, 1770,
	68, 1770,
	69, 1770,
	70, 1770,
	71, 1770,
	72, 1770,
	73, 1770,
	74, 1770,
	76, 1770,
	77, 1770,
	78, 1770,
	79, 1770,
	81, 1770,
	82, 1770,
	83, 1770,
	91, 1770,
	92, 1770,
	93, 1770,
	94, 1770,
	95, 1770,
	96, 1770,
	97, 1770,
	98, 1770,
	100, 1770,
	102, 1770,
	104, 1770,
	107, 1770,
	108, 1770,
	110, 1770,
	111, 1770,
	113, 1770,
	115, 1770,
	116, 1770,
	117, 1770,
	118, 1770,
	119, 1770,
	120, 1770,
	121, 1770,
	122, 1770,
	123, 1770,
	124, 1770,
	128, 1770,
	129, 1770,
	130, 1770,
	131, 1770,
	132, 1770,
	133, 1770,
	134, 1770,
	135, 1770,
	136, 1770,
	137, 1770,
	138, 1770,
	139, 1770,
	141, 1770,
	144, 1770,
	145, 1770,
	147, 1770,
	148, 1770,
	150, 1770,
	152, 1770,
	153, 1770,
	154, 1770,
	155, 1770,
	156, 1770,
	157, 1770,
	158, 1770,
	159, 1770,
	160, 1770,
	161, 1770,
	162, 1770,
	163, 1770,
	164, 1770,
	165, 1770,
	166, 1770,
	167, 1770,
	169, 1770,
	170, 1770,
	171, 1770,
	173, 1770,
	174, 1770,
	175, 1770,
	176, 1770,
	177, 1770,
	178, 1770,
	179, 1770,
	180, 1770,
	181, 1770,
	183, 1770,
	185, 1770,
	186, 1770,
	187, 1770,
	188, 1770,
	189, 1770,
	190, 1770,
	191, 1770,
	192, 1770,
	193, 1770,
	194, 1770,
	195, 1770,
	196, 1770,
	197, 1770,
	198, 1770,
	200, 1770,
	201, 1770,
	203, 1770,
	204, 1770,
	205, 1770,
	206, 1770,
	207, 1770,
	208, 1770,
	210, 1770,
	211, 1770,
	214, 1770,
	215, 1770,
	216, 1770,
	219, 1770,
	220, 1770,
	221, 1770,
	222, 1770,
	223, 1770,
	224, 1770,
	225, 1770,
	226, 1770,
	227, 1770,
	228, 1770,
	231, 1770,
	233, 1770,
	234, 1770,
	235, 1770,
	236, 1770,
	237, 1770,
	239, 1770,
	240, 1770,
	243, 1770,
	244, 1770,
	245, 1770,
	247, 1770,
	248, 1770,
	250, 1770,
	252, 1770,
	253, 1770,
	254, 1770,
	255, 1770,
	256, 1770,
	257, 1770,
	258, 1770,
	259, 1770,
	261, 1770,
	262, 1770,
	263, 1770,
	264, 1770,
	265, 1770,
	267, 1770,
	268, 1770,
	269, 1770,
	270, 1770,
	271, 1770,
	272, 1770,
	273, 1770,
	274, 1770,
	275, 1770,
	277, 1770,
	278, 1770,
	279, 1770,
	280, 1770,
	281, 1770,
	282, 1770,
	283, 1770,
	284, 1770,
	285, 1770,
	286, 1770,
	287, 1770,
	288, 1770,
	289, 1770,
	291, 1770,
	292, 1770,
	293, 1770,
	294, 1770,
	295, 1770,
	296, 1770,
	297, 1770,
	298, 1770,
	299, 1770,
	300, 1770,
	301, 1770,
	302, 1770,
	303, 1770,
	304, 1770,
	305, 1770,
	306, 1770,
	308, 1770,
	309, 1770,
	310, 1770,
	311, 1770,
	312, 1770,
	313, 1770,
	314, 1770,
	315, 1770,
	316, 1770,
	318, 1770,
	319, 1770,
	320, 1770,
	321, 1770,
	322, 1770,
	323, 1770,
	324, 1770,
	325, 1770,
	326, 1770,
	328, 1770,
	329, 1770,
	330, 1770,
	331, 1770,
	332, 1770,
	333, 1770,
	334, 1770,
	335, 1770,
	336, 1770,
	337, 1770,
	338, 1770,
	339, 1770,
	341, 1770,
	342, 1770,
	344, 1770,
	345, 1770,
	346, 1770,
	347, 1770,
	348, 1770,
	349, 1770,
	350, 1770,
	351, 1770,
	352, 1770,
	353, 1770,
	355, 1770,
	356, 1770,
	357, 1770,
	358, 1770,
	361, 1770,
	362, 1770,
	363, 1770,
	364, 1770,
	366, 1770,
	367, 1770,
	369, 1770,
	370, 1770,
	373, 1770,
	374, 1770,
	375, 1770,
	376, 1770,
	378, 1770,
	380, 1770,
	381, 1770,
	382, 1770,
	383, 1770,
	384, 1770,
	385, 1770,
	387, 1770,
	388, 1770,
	389, 1770,
	394, 1770,
	395, 1770,
	396, 1770,
	397, 1770,
	398, 1770,
	399, 1770,
	400, 1770,
	401, 1770,
	403, 1770,
	404, 1770,
	405, 1770,
	406, 1770,
	407, 1770,
	408, 1770,
	410, 1770,
	411, 1770,
	412, 1770,
	413, 1770,
	414, 1770,
	415, 1770,
	416, 1770,
	417, 1770,
	418, 1770,
	420, 1770,
	423, 1770,
	424, 1770,
	427, 1770,
	428, 1770,
	-2, 0,
	-1, 1174,
	143, 1680,
	359, 1680,
	405, 1680,
	424, 1680,
	-2, 0,
	-1, 1203,
	143, 1709,
	359, 1709,
	405, 1709,
	424, 1709,
	-2, 0,
	-1, 1204,
	188, 809,
	267, 809,
	272, 809,
	-2, 412,
	-1, 1283,
	127, 913,
	209, 913,
	238, 913,
	-2, 871,
	-1, 1367,
	114, 875,
	127, 875,
	182, 875,
	209, 875,
	238, 875,
	246, 875,
	371, 875,
	-2, 1245,
	-1, 1417,
	423, 1365,
	-2, 0,
	-1, 1425,
	188, 809,
	267, 809,
	272, 809,
	-2, 804,
	-1, 1459,
	114, 875,
	127, 875,
	182, 875,
	209, 875,
	238, 875,
	246, 875,
	371, 875,
	-2, 983,
	-1, 1666,
	188, 809,
	267, 809,
	272, 809,
	-2, 414,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1135,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1136,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1137,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1138,
	-1, 1781,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1139,
	-1, 1782,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1140,
	-1, 1783,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1141,
	-1, 1784,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1142,
	-1, 1796,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1154,
	-1, 1797,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1155,
	-1, 1798,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1156,
	-1, 1801,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1161,
	-1, 1807,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1165,
	-1, 1809,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1173,
	-1, 1810,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1174,
	-1, 1811,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1175,
	-1, 1812,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1176,
	-1, 1893,
	5, 1052,
	143, 1376,
	422, 1497,
	-2, 1488,
	-1, 1894,
	143, 1377,
	-2, 1728,
	-1, 1895,
	143, 1378,
	-2, 1610,
	-1, 1896,
	143, 1379,
	-2, 1548,
	-1, 1897,
	143, 1380,
	-2, 1577,
	-1, 1898,
	143, 1381,
	-2, 1609,
	-1, 1899,
	143, 1382,
	-2, 1672,
	-1, 1973,
	1, 984,
	81, 984,
	114, 984,
	127, 984,
	144, 984,
	149, 984,
	151, 984,
	173, 984,
	182, 984,
	191, 984,
	205, 984,
	209, 984,
	224, 984,
	238, 984,
	241, 984,
	246, 984,
	290, 984,
	292, 984,
	371, 984,
	379, 984,
	391, 984,
	392, 984,
	402, 984,
	421, 984,
	423, 984,
	425, 984,
	426, 984,
	427, 984,
	-2, 983,
	-1, 1978,
	422, 1474,
	-2, 1486,
	-1, 2062,
	423, 1435,
	427, 1435,
	-2, 1462,
	-1, 2188,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1163,
	-1, 2189,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1167,
	-1, 2195,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1169,
	-1, 2428,
	257, 899,
	-2, 721,
	-1, 2496,
	188, 809,
	267, 809,
	272, 809,
	-2, 411,
	-1, 2514,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1171,
	-1, 2521,
	186, 0,
	187, 0,
	231, 0,
	-2, 1190,
	-1, 2582,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1220,
	-1, 2583,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1221,
	-1, 2584,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1222,
	-1, 2588,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1226,
	-1, 2589,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1227,
	-1, 2590,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1228,
	-1, 2632,
	422, 1475,
	-2, 1487,
	-1, 2746,
	186, 0,
	187, 0,
	231, 0,
	-2, 1191,
	-1, 2749,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1194,
	-1, 2750,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1196,
	-1, 2895,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1195,
	-1, 2896,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1197,
	-1, 2906,
	186, 0,
	-2, 1229,
	-1, 2994,
	186, 0,
	-2, 1230,
	-1, 3088,
	38, 0,
	161, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1731,
}

const sqlPrivate = 57344

const sqlLast = 58865

var sqlAct = [...]int{

	785, 2677, 3087, 3096, 3067, 3150, 2089, 2934, 3065, 3064,
	3098, 1933, 2846, 3052, 3097, 2923, 929, 2097, 3086, 2552,
	2694, 2998, 1084, 2118, 2861, 1764, 2689, 955, 1142, 2885,
	2181, 1965, 2817, 1058, 2802, 1824, 2225, 777, 2641, 1596,
	1286, 211, 727, 2443, 2468, 2699, 500, 2086, 2437, 2435,
	1372, 2448, 2466, 500, 2642, 2064, 495, 2060, 2223, 2332,
	500, 1454, 1452, 500, 500, 2343, 500, 211, 868, 500,
	500, 2910, 948, 971, 2290, 1138, 500, 2098, 2308, 783,
	1545, 1433, 1106, 1544, 500, 593, 1541, 1550, 1553, 2780,
	1961, 2063, 1990, 1491, 1981, 1966, 2319, 2289, 2605, 2045,
	2999, 1375, 1755, 965, 550, 1836, 1691, 1750, 546, 735,
	130, 1425, 2447, 2643, 2177, 1864, 1968, 2410, 2350, 1513,
	2018, 1507, 1434, 1542, 1472, 1470, 73, 1821, 1846, 1206,
	768, 1930, 921, 1597, 2019, 2046, 1403, 1858, 957, 585,
	1153, 1405, 2061, 1135, 1125, 1889, 1443, 2091, 212, 213,
	2067, 924, 1953, 1362, 1837, 903, 1285, 136, 497, 1938,
	635, 2847, 615, 1287, 137, 1690, 588, 776, 500, 500,
	130, 1560, 207, 1122, 726, 629, 543, 1151, 1530, 1483,
	1062, 926, 600, 664, 1424, 1291, 1462, 901, 547, 2621,
	2210, 1568, 2622, 3177, 1568, 2090, 1453, 1947, 731, 480,
	500, 500, 500, 960, 500, 500, 974, 974, 608, 2119,
	3171, 578, 2509, 549, 1947, 500, 500, 1568, 2047, 3170,
	496, 1516, 40, 1947, 3147, 480, 3144, 2486, 2816, 3122,
	1522, 2454, 3116, 2816, 782, 2455, 1947, 44, 2127, 602,
	3115, 1947, 2423, 1580, 1947, 571, 28, 741, 3112, 40,
	3109, 2047, 3113, 3106, 3110, 935, 3084, 1522, 951, 1083,
	1522, 483, 731, 3083, 44, 732, 577, 1522, 1940, 3082,
	3081, 3047, 1566, 1580, 1580, 2131, 2608, 3034, 1189, 3027,
	968, 1522, 1145, 2816, 904, 904, 130, 483, 719, 907,
	3048, 908, 3025, 2128, 579, 718, 2816, 3023, 1077, 2982,
	2996, 2816, 59, 581, 2131, 2978, 2968, 60, 2963, 2715,
	2816, 2961, 1522, 2952, 2951, 2816, 2944, 1522, 1522, 1580,
	1522, 2129, 2943, 736, 2916, 2897, 2816, 2841, 1522, 2131,
	581, 1947, 941, 945, 950, 2837, 2815, 1522, 2748, 1947,
	2816, 63, 2131, 2713, 146, 1177, 2705, 2706, 2627, 39,
	2706, 2617, 2628, 2611, 2530, 2618, 905, 1947, 1522, 2121,
	40, 141, 918, 1064, 1063, 2525, 2476, 2305, 63, 1947,
	2415, 1947, 2257, 480, 2256, 44, 1947, 2250, 1947, 1947,
	2249, 2251, 2216, 2149, 1947, 2130, 2608, 1947, 2217, 2131,
	46, 143, 2117, 1522, 1065, 2114, 1585, 2056, 1939, 1947,
	1669, 1522, 45, 2715, 51, 1946, 2034, 2262, 2263, 1947,
	932, 1979, 1584, 1178, 2415, 1082, 1585, 1302, 1303, 2180,
	2160, 1521, 28, 1429, 52, 1841, 1061, 1569, 54, 176,
	1569, 2456, 58, 1688, 1173, 483, 144, 1172, 1171, 1170,
	59, 72, 1305, 2224, 64, 60, 61, 1169, 1168, 1167,
	2457, 3103, 1166, 1569, 1076, 1165, 1164, 1163, 1162, 1161,
	1160, 1159, 1158, 1157, 909, 2262, 2263, 906, 725, 1304,
	62, 64, 139, 66, 724, 67, 723, 722, 721, 63,
	717, 173, 716, 715, 714, 953, 713, 712, 711, 710,
	709, 708, 707, 173, 703, 702, 701, 662, 661, 139,
	66, 660, 67, 659, 580, 2262, 2263, 110, 173, 500,
	500, 1178, 500, 960, 960, 500, 658, 175, 500, 2454,
	173, 500, 657, 656, 2795, 2277, 1522, 500, 655, 175,
	654, 580, 653, 652, 110, 2268, 651, 500, 500, 500,
	500, 500, 960, 960, 175, 1310, 650, 1373, 649, 960,
	3085, 648, 1939, 1302, 1303, 647, 175, 646, 174, 645,
	2989, 644, 1178, 643, 173, 578, 1576, 167, 1099, 1567,
	174, 1146, 1332, 1333, 1334, 168, 40, 642, 1305, 167,
	641, 500, 64, 500, 1096, 174, 640, 168, 639, 65,
	1972, 44, 1734, 2268, 624, 500, 138, 174, 623, 2753,
	175, 781, 622, 173, 621, 1304, 167, 620, 548, 75,
	139, 66, 2278, 67, 168, 68, 619, 534, 500, 145,
	577, 1111, 1325, 138, 69, 533, 1373, 506, 1861, 500,
	505, 173, 504, 2268, 486, 138, 775, 485, 2707, 175,
	484, 174, 83, 197, 1139, 110, 196, 195, 579, 194,
	167, 1302, 1303, 193, 142, 192, 59, 581, 168, 1124,
	191, 60, 190, 189, 188, 187, 186, 175, 1175, 960,
	2278, 185, 184, 578, 183, 732, 1305, 182, 181, 138,
	174, 1310, 1129, 1132, 40, 180, 1862, 1154, 179, 167,
	115, 178, 177, 2625, 2346, 63, 2279, 168, 2222, 44,
	140, 2037, 2212, 1304, 2169, 500, 1326, 2057, 174, 2050,
	2278, 1455, 1694, 1469, 1379, 1220, 1086, 167, 138, 1879,
	1877, 1875, 1873, 1593, 1871, 168, 1067, 2964, 577, 2985,
	2983, 2262, 2263, 1298, 2883, 1070, 2933, 1075, 2879, 1081,
	1214, 2869, 1204, 2779, 1218, 2778, 138, 1302, 1303, 4,
	2772, 1863, 1860, 2765, 2279, 1283, 579, 2764, 2763, 2759,
	2758, 1284, 2757, 2756, 59, 581, 2262, 2263, 2727, 60,
	2725, 1370, 1305, 2631, 2602, 2601, 2600, 931, 2538, 1310,
	2418, 2414, 2341, 2007, 2301, 2288, 1592, 774, 2261, 2258,
	2255, 2254, 2252, 2230, 2279, 1100, 1103, 2229, 64, 1304,
	2211, 2122, 1973, 63, 1201, 173, 1332, 1333, 1334, 2272,
	2264, 2265, 2266, 2267, 2269, 2270, 1298, 1315, 1313, 1314,
	1306, 1307, 1308, 1309, 1311, 1312, 139, 66, 1832, 67,
	1383, 1376, 1297, 1365, 3175, 3158, 3157, 1282, 1865, 1689,
	2020, 175, 1527, 917, 1182, 1085, 1071, 173, 2176, 1221,
	2554, 1187, 2262, 2263, 1525, 3076, 1325, 3071, 580, 2268,
	3029, 110, 3020, 3019, 3016, 2273, 2271, 2272, 2264, 2265,
	2266, 2267, 2269, 2270, 3015, 1310, 3010, 2438, 3007, 2981,
	1302, 1303, 174, 175, 2980, 1826, 732, 173, 2929, 2908,
	2855, 167, 2851, 719, 2268, 2849, 2794, 2777, 500, 168,
	718, 2716, 2692, 500, 2684, 1305, 64, 2683, 2264, 2265,
	2266, 2267, 2269, 2270, 2681, 1294, 1295, 2262, 2263, 2659,
	138, 1299, 2868, 175, 174, 2658, 2648, 1431, 1440, 500,
	1859, 2647, 1304, 167, 139, 66, 2278, 67, 2094, 2613,
	1326, 168, 2520, 2482, 2474, 2399, 2480, 2382, 2360, 2359,
	2304, 1228, 2239, 1833, 2136, 173, 1306, 1307, 1308, 1309,
	1311, 1312, 138, 933, 174, 3001, 580, 2238, 2235, 110,
	1366, 1450, 2204, 167, 1406, 1411, 734, 2138, 1976, 1401,
	2268, 168, 1404, 1958, 1945, 1869, 1302, 1303, 1463, 1407,
	1536, 175, 1468, 1437, 1438, 1432, 1423, 1414, 1422, 1417,
	1416, 1964, 138, 935, 1415, 935, 1413, 1412, 1310, 1679,
	1678, 1305, 1688, 1685, 1409, 1408, 1399, 1398, 1397, 904,
	2279, 1396, 1395, 1394, 1393, 1392, 1391, 1390, 1389, 1451,
	130, 1388, 174, 1387, 2360, 1332, 1333, 1334, 1304, 1380,
	1365, 167, 2325, 1200, 1184, 2268, 1179, 1156, 1150, 168,
	2882, 2751, 732, 1314, 1306, 1307, 1308, 1309, 1311, 1312,
	1428, 960, 500, 2724, 1376, 1594, 2620, 2616, 974, 2478,
	138, 2215, 1490, 1426, 1959, 1363, 2133, 1460, 2262, 2263,
	1464, 2874, 1688, 2718, 2717, 1325, 500, 974, 500, 500,
	1430, 1217, 2623, 1688, 2047, 1455, 211, 1280, 1195, 2957,
	2403, 2148, 1420, 1478, 1682, 1457, 1418, 2398, 1421, 2393,
	500, 500, 1419, 1537, 2381, 2296, 1675, 500, 1484, 500,
	2657, 500, 2278, 2295, 2294, 500, 1385, 2986, 2984, 1549,
	1514, 2273, 2271, 2272, 2264, 2265, 2266, 2267, 2269, 2270,
	1878, 1876, 1874, 1872, 1688, 1870, 173, 2147, 1509, 1394,
	2293, 173, 1308, 1309, 1311, 1312, 2932, 960, 932, 2186,
	932, 1394, 1583, 1662, 1213, 2119, 899, 1546, 1535, 1326,
	2488, 2266, 2267, 2269, 2270, 500, 960, 211, 500, 500,
	960, 2392, 175, 1503, 2022, 2911, 960, 175, 1622, 211,
	500, 2090, 1557, 500, 500, 3114, 2556, 1847, 1555, 500,
	900, 1273, 2220, 1402, 3111, 2450, 2279, 972, 1059, 2637,
	1064, 1063, 1664, 3104, 1652, 3061, 1683, 2690, 3033, 1533,
	480, 974, 1602, 174, 2124, 1225, 542, 513, 174, 202,
	960, 960, 167, 500, 3138, 3137, 1271, 167, 500, 2829,
	168, 1564, 1520, 211, 500, 168, 500, 1382, 500, 1124,
	500, 1684, 500, 1621, 480, 2264, 2265, 2266, 2267, 2269,
	2270, 2093, 500, 916, 500, 3105, 138, 2150, 1540, 893,
	895, 1676, 500, 500, 500, 3174, 2956, 2498, 1259, 891,
	1272, 173, 483, 1306, 1307, 1308, 1309, 1311, 1312, 1720,
	1559, 889, 1562, 886, 2955, 1154, 1656, 2954, 1718, 2953,
	2671, 500, 1485, 2666, 1992, 974, 2665, 1215, 730, 2634,
	541, 512, 2633, 2234, 2233, 1666, 483, 175, 2271, 2272,
	2264, 2265, 2266, 2267, 2269, 2270, 2232, 2231, 1737, 1482,
	1099, 523, 2190, 2087, 1586, 480, 2120, 2040, 2033, 2029,
	1602, 1602, 2010, 1519, 1808, 1590, 1728, 480, 1687, 1588,
	1201, 1486, 1487, 1216, 1427, 1726, 1589, 1258, 174, 1663,
	2479, 1653, 3032, 1223, 2845, 1060, 1983, 167, 1654, 1925,
	1924, 1621, 1621, 1923, 1983, 168, 729, 2662, 1838, 1922,
	974, 1680, 1692, 1370, 1766, 1982, 198, 1995, 1838, 2988,
	2501, 2044, 1851, 1700, 1312, 1088, 138, 483, 1732, 1696,
	2676, 480, 1571, 524, 2055, 1573, 613, 2936, 1575, 483,
	705, 1887, 1578, 2002, 1731, 1709, 1464, 1823, 1689, 1686,
	1892, 1892, 614, 614, 1903, 1905, 3079, 1910, 500, 1838,
	500, 2650, 1703, 2153, 2001, 1563, 1756, 1763, 1823, 1861,
	731, 1735, 1191, 745, 1937, 2155, 693, 1301, 1233, 719,
	1736, 2503, 719, 719, 974, 500, 1746, 1888, 1587, 1747,
	1748, 1754, 1591, 483, 500, 2134, 740, 500, 2026, 2502,
	974, 2166, 1199, 1194, 500, 2156, 535, 203, 1844, 532,
	1977, 1270, 500, 1847, 1865, 507, 2270, 2154, 1689, 2020,
	500, 2445, 732, 3129, 1279, 1974, 1912, 1862, 732, 1689,
	2020, 527, 500, 2178, 2179, 960, 3137, 1302, 1303, 1254,
	2389, 1994, 1698, 1699, 1960, 1834, 500, 974, 1970, 1971,
	1257, 3044, 500, 500, 935, 931, 2384, 931, 2825, 1984,
	1602, 1842, 1305, 1192, 540, 694, 1510, 500, 510, 1473,
	500, 935, 1474, 1830, 1502, 3160, 904, 2446, 1828, 3045,
	1689, 2020, 204, 203, 1733, 1900, 510, 1255, 951, 1304,
	2548, 1621, 1863, 1860, 500, 728, 500, 540, 500, 1996,
	1998, 500, 1921, 500, 2027, 500, 517, 500, 500, 2497,
	500, 960, 960, 960, 2012, 1935, 960, 1988, 732, 1730,
	1934, 2041, 1951, 500, 517, 500, 2445, 1943, 1944, 1568,
	1955, 1956, 1224, 526, 525, 1473, 1480, 2042, 1474, 539,
	2112, 2113, 1819, 1460, 2004, 1488, 3153, 1993, 2021, 2023,
	2024, 2025, 2011, 2545, 1987, 1475, 2013, 897, 204, 887,
	896, 1950, 1817, 2402, 2028, 1310, 2012, 1477, 1505, 887,
	206, 2651, 539, 3012, 2499, 751, 2372, 1865, 1719, 1865,
	1988, 888, 2108, 887, 205, 3128, 500, 1717, 2823, 1400,
	2667, 2660, 1332, 1333, 1334, 695, 2937, 1267, 516, 1980,
	1064, 2048, 2078, 2030, 1087, 1480, 2139, 2101, 2123, 932,
	480, 2371, 2103, 2110, 2887, 2490, 516, 1479, 2546, 1480,
	3100, 1475, 201, 2115, 130, 974, 932, 500, 2959, 2891,
	2126, 1840, 1512, 1477, 2902, 130, 1360, 500, 1988, 500,
	2096, 933, 1325, 933, 1234, 2105, 206, 2106, 2074, 2107,
	1511, 2109, 2237, 2192, 1154, 2813, 2116, 199, 1813, 2006,
	205, 500, 500, 500, 542, 500, 1814, 2125, 528, 1815,
	2135, 1859, 483, 1820, 1822, 1473, 1268, 1508, 1474, 537,
	1702, 706, 2810, 1479, 500, 2036, 2143, 2137, 2144, 696,
	2493, 202, 1235, 1954, 1300, 1232, 2824, 542, 201, 1486,
	1487, 200, 2052, 1480, 2054, 1865, 513, 2886, 1407, 3127,
	1414, 3161, 537, 1193, 538, 1404, 529, 2031, 2140, 1198,
	3151, 511, 2811, 2729, 513, 2142, 1326, 697, 2151, 1969,
	2378, 3101, 1210, 199, 1506, 731, 2092, 2171, 2092, 511,
	2719, 1269, 1190, 2736, 509, 1241, 3099, 538, 541, 3136,
	3134, 1599, 530, 2860, 531, 1805, 508, 2858, 536, 2374,
	1446, 1475, 509, 2775, 2084, 1569, 2082, 202, 2207, 1480,
	1539, 500, 2193, 1477, 508, 1370, 1829, 200, 2492, 2376,
	2946, 541, 3152, 1439, 1188, 518, 1176, 503, 1667, 1449,
	512, 536, 2489, 2111, 1289, 2227, 2228, 2173, 2888, 3102,
	514, 1290, 1816, 518, 2892, 2407, 2175, 1952, 512, 1518,
	1818, 1211, 3154, 2591, 2411, 2164, 1212, 2165, 514, 2375,
	3166, 1447, 2945, 1479, 1222, 2927, 693, 3004, 2333, 1476,
	1674, 2636, 2356, 2352, 2085, 2083, 1558, 1548, 1313, 1314,
	1306, 1307, 1308, 1309, 1311, 1312, 740, 1547, 1543, 1538,
	1360, 2544, 2806, 2014, 3053, 2807, 1289, 2828, 1205, 1723,
	2695, 1742, 1670, 2191, 2827, 2491, 2862, 2928, 2362, 1599,
	1599, 2361, 974, 2184, 2303, 2306, 1288, 1697, 1803, 1806,
	2313, 2314, 2322, 732, 1949, 1948, 2059, 2315, 500, 2809,
	2058, 500, 1672, 2076, 2776, 1476, 729, 1121, 500, 2812,
	2416, 500, 500, 974, 2219, 1290, 1673, 2678, 1448, 1480,
	1110, 500, 500, 500, 2334, 694, 1109, 500, 576, 36,
	500, 2336, 2329, 2344, 2406, 1802, 1119, 500, 500, 500,
	500, 500, 2337, 2338, 575, 35, 1471, 2592, 1288, 2327,
	3141, 500, 583, 2330, 2593, 738, 2848, 693, 500, 2213,
	935, 2328, 1743, 3165, 574, 32, 1602, 3, 935, 935,
	500, 960, 935, 2781, 500, 2340, 2345, 740, 2606, 2925,
	1868, 974, 2353, 606, 1210, 500, 931, 599, 3143, 2015,
	2016, 974, 2907, 2324, 1242, 2201, 935, 1621, 974, 2298,
	2299, 2300, 2307, 931, 2826, 2808, 573, 79, 2857, 1523,
	500, 2926, 500, 739, 500, 2199, 1277, 960, 500, 960,
	960, 960, 2774, 500, 2335, 500, 1099, 487, 1531, 500,
	2675, 2291, 769, 2383, 500, 2349, 500, 1535, 1264, 2424,
	1988, 2519, 2390, 500, 2347, 1476, 694, 2465, 2358, 1804,
	2363, 2412, 2366, 2253, 1210, 695, 2364, 2203, 2368, 2369,
	500, 500, 2357, 1211, 2141, 960, 2441, 2310, 1212, 1599,
	2377, 2400, 2440, 481, 1099, 2317, 2318, 2394, 498, 2323,
	2452, 1478, 500, 2386, 2039, 519, 2473, 2387, 2385, 1120,
	2426, 2388, 545, 1867, 2395, 589, 596, 2417, 545, 481,
	2420, 589, 611, 2401, 2484, 36, 1478, 2856, 618, 1602,
	500, 2196, 2009, 1529, 1442, 932, 638, 2413, 1118, 572,
	78, 35, 2197, 932, 932, 500, 2202, 932, 1716, 2483,
	569, 23, 2439, 1211, 582, 1262, 1514, 1467, 1212, 1278,
	1621, 32, 1185, 1514, 939, 2292, 2168, 2449, 2167, 696,
	2163, 932, 2451, 974, 1252, 2458, 2449, 1276, 570, 24,
	732, 2145, 1695, 974, 1706, 3095, 2464, 130, 1250, 1655,
	604, 605, 933, 1248, 597, 598, 695, 1446, 500, 1263,
	1386, 1095, 1602, 79, 2522, 568, 30, 697, 885, 933,
	2673, 2379, 1517, 2380, 2494, 2495, 3050, 567, 21, 2799,
	545, 545, 2496, 2655, 2653, 2477, 1449, 2500, 934, 565,
	20, 566, 19, 1621, 488, 489, 2557, 555, 15, 1602,
	1602, 2396, 1246, 2397, 1444, 2540, 2541, 2542, 2507, 2505,
	556, 16, 498, 498, 498, 2635, 966, 498, 1447, 2471,
	1602, 1602, 2566, 564, 57, 2434, 1765, 481, 1066, 2432,
	1621, 1621, 1244, 2391, 2603, 2198, 2526, 1445, 2421, 2532,
	2485, 563, 56, 2200, 554, 55, 1715, 2430, 737, 500,
	696, 1621, 1621, 1238, 2321, 1602, 1261, 1117, 2553, 562,
	12, 500, 2088, 2813, 2559, 553, 50, 974, 2547, 2549,
	2550, 560, 47, 491, 490, 1251, 78, 2568, 2624, 2425,
	2619, 2427, 2428, 2429, 2595, 2570, 1621, 23, 697, 1249,
	2810, 561, 48, 2803, 1247, 1756, 2560, 2644, 2459, 2460,
	2461, 1848, 2462, 2463, 2080, 1448, 2801, 1442, 2596, 552,
	49, 2805, 890, 892, 2664, 24, 1756, 2571, 559, 7,
	492, 493, 935, 558, 6, 1369, 2079, 2475, 2607, 2604,
	2811, 2670, 2609, 2610, 130, 2612, 500, 500, 2077, 500,
	557, 38, 30, 1245, 500, 2436, 551, 37, 2073, 2674,
	1582, 2599, 1581, 974, 21, 974, 2626, 2804, 960, 1579,
	935, 1577, 1574, 1572, 1570, 2685, 20, 1528, 19, 1526,
	1446, 2639, 1515, 1243, 15, 500, 1504, 1501, 1489, 1481,
	2708, 2533, 913, 2973, 1292, 2697, 2182, 16, 3138, 2881,
	2880, 1978, 2320, 2661, 1237, 960, 500, 500, 1116, 1449,
	57, 2700, 2012, 1693, 914, 2696, 2975, 500, 2701, 1983,
	974, 500, 500, 974, 500, 2000, 2704, 1444, 56, 2843,
	1999, 55, 500, 1983, 2043, 2680, 2682, 2679, 2038, 2615,
	974, 1447, 2688, 2687, 1997, 2032, 12, 2008, 1660, 1661,
	2698, 2146, 50, 2691, 584, 2693, 2733, 2702, 47, 1988,
	1445, 3014, 2709, 2726, 2710, 935, 2183, 2818, 1236, 2738,
	2806, 2991, 931, 2807, 2782, 1293, 2017, 2003, 48, 1296,
	931, 931, 2035, 2005, 931, 500, 3049, 932, 1602, 2854,
	2747, 2721, 2722, 2730, 2630, 915, 49, 2095, 2101, 2734,
	2081, 1302, 1303, 2072, 1936, 7, 1665, 2809, 931, 1595,
	6, 3149, 2754, 2472, 3164, 1302, 1303, 2812, 1373, 1621,
	2723, 1492, 2551, 607, 2731, 932, 1305, 38, 1448, 2481,
	2739, 498, 1094, 37, 498, 2262, 2263, 498, 2543, 1496,
	966, 1302, 1303, 1114, 500, 2158, 2157, 1227, 2158, 498,
	2159, 1902, 1226, 1304, 974, 1599, 974, 1857, 1383, 498,
	498, 498, 498, 966, 500, 500, 500, 1304, 1381, 2654,
	2919, 2656, 2310, 2773, 1266, 2344, 2872, 1265, 2712, 500,
	1493, 1275, 1274, 1260, 500, 1256, 500, 1253, 1239, 500,
	500, 500, 500, 500, 2644, 2728, 500, 500, 960, 2788,
	1197, 1668, 974, 638, 898, 596, 960, 2819, 704, 2787,
	2935, 2789, 2652, 2808, 500, 500, 2821, 498, 935, 3060,
	932, 2798, 691, 2370, 2793, 1705, 2161, 960, 2644, 2784,
	2785, 1240, 1707, 2326, 2844, 1957, 3043, 500, 935, 2644,
	1196, 2714, 2760, 2236, 2790, 1497, 500, 500, 960, 960,
	2850, 638, 2997, 1099, 2864, 2901, 1866, 935, 933, 1384,
	53, 2859, 764, 827, 1745, 2800, 933, 933, 2638, 2839,
	933, 2890, 2853, 2866, 2863, 2441, 2865, 2796, 2838, 1988,
	2066, 2873, 2065, 2797, 974, 977, 1677, 2720, 2871, 786,
	2875, 935, 2842, 1891, 933, 1757, 788, 2830, 1599, 2876,
	2893, 1600, 935, 791, 2831, 2835, 1498, 1499, 790, 789,
	1601, 2836, 1410, 787, 1598, 1494, 2075, 2099, 682, 1681,
	1827, 1845, 2786, 2218, 2913, 2783, 974, 498, 1988, 1377,
	500, 756, 500, 1843, 974, 500, 1183, 755, 761, 2331,
	2444, 2629, 1495, 500, 2900, 1602, 2867, 2909, 1741, 974,
	2449, 2174, 1738, 515, 2259, 1149, 1918, 2822, 1911, 2922,
	1907, 1281, 1361, 2644, 2100, 1219, 2342, 2832, 2833, 2453,
	2132, 1599, 2918, 932, 2940, 1749, 1621, 912, 2939, 2917,
	2941, 911, 910, 3066, 3063, 2920, 2914, 2915, 2889, 500,
	1913, 500, 2852, 932, 960, 1671, 2644, 1602, 2644, 500,
	2152, 2938, 2644, 1354, 760, 2311, 2419, 1092, 1599, 1599,
	3013, 1353, 932, 894, 3006, 1209, 1208, 1207, 2960, 1500,
	2962, 2971, 974, 2355, 2966, 3159, 935, 2649, 1621, 1599,
	1599, 172, 169, 2979, 171, 170, 2405, 82, 34, 33,
	2977, 2970, 500, 1988, 2700, 2972, 932, 109, 500, 2976,
	2921, 108, 107, 106, 931, 2987, 500, 932, 105, 935,
	104, 935, 103, 102, 1599, 935, 3009, 101, 2441, 100,
	99, 3003, 98, 2312, 2990, 97, 1602, 96, 2995, 3000,
	2840, 2870, 95, 94, 500, 500, 3002, 93, 92, 91,
	500, 90, 931, 2948, 89, 88, 3026, 87, 86, 3024,
	85, 960, 84, 634, 2339, 3011, 500, 1621, 631, 81,
	80, 960, 960, 31, 26, 500, 113, 500, 114, 500,
	618, 25, 77, 3031, 3028, 545, 76, 29, 3030, 18,
	2877, 2878, 11, 3046, 17, 22, 1831, 135, 500, 3037,
	3038, 500, 3039, 500, 134, 974, 1458, 1369, 934, 133,
	3036, 498, 3056, 132, 131, 3068, 3072, 14, 13, 128,
	129, 3069, 3070, 3073, 127, 3075, 126, 125, 124, 3074,
	3062, 3080, 3058, 123, 10, 8, 2644, 2974, 112, 500,
	9, 932, 2409, 2884, 2487, 70, 3078, 931, 71, 2409,
	27, 43, 1917, 42, 3092, 41, 111, 3017, 3077, 3094,
	3093, 163, 500, 3018, 162, 3119, 161, 3120, 160, 156,
	500, 155, 3107, 159, 932, 3118, 932, 157, 158, 154,
	932, 3126, 122, 2644, 3035, 165, 500, 3123, 164, 152,
	2965, 1302, 1303, 2949, 2950, 3124, 3125, 149, 3133, 935,
	933, 3132, 148, 3135, 151, 3121, 153, 150, 3142, 147,
	3140, 3139, 3068, 166, 121, 120, 1305, 119, 118, 117,
	3148, 116, 3145, 3146, 5, 2, 1, 0, 0, 0,
	0, 0, 0, 3156, 3155, 0, 0, 0, 933, 0,
	0, 0, 3163, 1304, 481, 3162, 935, 1599, 0, 0,
	0, 1324, 0, 3040, 3169, 3041, 0, 0, 0, 3167,
	3168, 0, 0, 0, 0, 0, 0, 0, 1066, 0,
	498, 1534, 3172, 3173, 0, 0, 0, 3176, 481, 3057,
	3178, 0, 0, 2101, 0, 0, 0, 0, 0, 0,
	0, 0, 1554, 1554, 2742, 0, 0, 0, 0, 498,
	931, 498, 0, 498, 2529, 0, 0, 545, 0, 1327,
	1328, 1329, 1330, 0, 2536, 0, 0, 0, 0, 1310,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 931,
	3117, 0, 0, 0, 0, 0, 1332, 1333, 1334, 0,
	0, 0, 0, 0, 932, 1913, 1913, 638, 0, 481,
	1066, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 481, 1066, 931, 0, 966, 498, 0, 0, 0,
	0, 638, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 2205, 2206,
	0, 0, 0, 0, 0, 638, 0, 0, 0, 0,
	498, 0, 0, 0, 0, 481, 498, 0, 498, 0,
	498, 0, 498, 927, 498, 0, 0, 0, 2632, 0,
	0, 0, 0, 0, 1721, 0, 1722, 0, 1913, 1913,
	1913, 0, 0, 0, 498, 498, 498, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 494,
	1326, 0, 0, 638, 0, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2285, 2286, 2287, 1599, 0, 933, 0, 931, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 931, 0, 0, 0, 931, 0, 0,
	0, 0, 0, 0, 0, 0, 1599, 1917, 1917, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	933, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 0, 1059, 2262, 2263, 0, 2280, 2281,
	2282, 1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312,
	0, 0, 0, 2744, 0, 0, 0, 0, 0, 0,
	618, 0, 545, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	0, 0, 0, 943, 0, 1599, 0, 545, 970, 0,
	0, 0, 0, 0, 934, 2277, 545, 0, 0, 498,
	1917, 1917, 1917, 0, 0, 0, 1991, 0, 0, 0,
	0, 0, 0, 0, 498, 0, 0, 0, 1302, 1303,
	0, 0, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 1305, 933, 0, 0, 0, 498, 0,
	0, 0, 0, 0, 481, 2049, 0, 0, 0, 0,
	0, 0, 0, 2268, 0, 0, 0, 2792, 0, 2062,
	1304, 931, 1066, 0, 0, 1913, 1913, 933, 1324, 933,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1991, 0, 545, 0,
	498, 0, 0, 498, 0, 498, 0, 498, 0, 498,
	498, 2283, 966, 0, 0, 0, 0, 0, 931, 0,
	0, 2518, 0, 0, 0, 596, 0, 1991, 2515, 2516,
	0, 0, 0, 0, 0, 0, 1327, 1328, 1329, 1330,
	2278, 0, 0, 0, 0, 0, 1310, 0, 1913, 1913,
	1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913,
	1913, 1913, 1913, 1913, 1913, 1913, 1913, 0, 1913, 0,
	0, 0, 0, 1332, 1333, 1334, 0, 0, 2262, 2263,
	0, 2280, 2281, 2282, 0, 0, 0, 0, 589, 0,
	0, 0, 0, 0, 0, 2898, 0, 0, 0, 0,
	0, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580,
	2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590,
	0, 2594, 0, 1325, 2279, 0, 0, 0, 0, 498,
	501, 0, 0, 0, 0, 0, 0, 2898, 2277, 1066,
	0, 1066, 0, 0, 0, 1765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 933, 0, 0,
	1765, 0, 0, 498, 498, 498, 0, 498, 0, 0,
	0, 210, 0, 0, 0, 0, 0, 1917, 1917, 0,
	0, 0, 0, 0, 0, 0, 498, 0, 0, 0,
	1331, 0, 1090, 0, 0, 0, 0, 210, 1108, 0,
	0, 0, 0, 0, 933, 0, 2268, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1128, 1128, 1128, 970, 0, 1441, 0, 0, 2274, 2275,
	2276, 0, 0, 1059, 0, 2273, 2271, 2272, 2264, 2265,
	2266, 2267, 2269, 2270, 0, 0, 0, 0, 0, 0,
	1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
	1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917, 0,
	1917, 0, 0, 1066, 0, 0, 0, 0, 1180, 0,
	0, 0, 0, 2278, 0, 0, 0, 0, 0, 0,
	0, 0, 2262, 2263, 0, 2280, 2281, 2282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2743, 0, 0, 0, 0, 0, 0, 0, 1315, 1313,
	1314, 1306, 1307, 1308, 1309, 1311, 1312, 2262, 2263, 0,
	2280, 2281, 2282, 961, 0, 0, 975, 975, 0, 0,
	0, 0, 0, 0, 0, 2524, 0, 0, 0, 0,
	0, 0, 2277, 0, 0, 0, 1765, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 2279, 0, 0,
	0, 0, 0, 934, 0, 0, 0, 0, 0, 0,
	0, 934, 934, 0, 0, 934, 0, 2277, 0, 0,
	545, 0, 0, 545, 0, 0, 0, 0, 0, 0,
	545, 0, 0, 545, 545, 0, 0, 0, 0, 1458,
	0, 0, 0, 498, 1991, 2351, 0, 0, 0, 1991,
	2268, 0, 2351, 0, 0, 0, 0, 0, 0, 1991,
	2351, 1991, 2351, 2351, 0, 0, 1302, 1303, 0, 0,
	0, 0, 0, 498, 0, 0, 765, 74, 0, 0,
	1534, 0, 0, 0, 0, 2268, 0, 0, 0, 0,
	0, 1305, 498, 0, 0, 0, 966, 0, 2283, 0,
	0, 2274, 2275, 2276, 0, 0, 0, 498, 2273, 2271,
	2272, 2264, 2265, 2266, 2267, 2269, 2270, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 1324, 2278, 0, 0,
	0, 0, 1554, 2283, 1554, 0, 498, 74, 0, 0,
	498, 0, 0, 0, 0, 498, 0, 498, 0, 0,
	0, 966, 0, 0, 0, 0, 1991, 0, 545, 0,
	0, 0, 2278, 0, 0, 1991, 0, 0, 0, 2513,
	0, 0, 0, 0, 0, 0, 1302, 1303, 0, 0,
	0, 0, 2469, 1066, 1327, 1328, 1329, 1330, 1913, 0,
	0, 0, 0, 0, 1310, 0, 0, 0, 0, 0,
	0, 1305, 0, 0, 1066, 0, 0, 720, 0, 0,
	0, 2279, 0, 0, 0, 733, 0, 0, 0, 0,
	0, 1332, 1333, 1334, 0, 1913, 2262, 2263, 1304, 2280,
	2281, 2282, 2504, 0, 0, 0, 1324, 0, 0, 0,
	867, 2906, 1465, 0, 2523, 0, 2279, 498, 0, 0,
	0, 0, 922, 74, 0, 0, 0, 0, 0, 1302,
	1303, 0, 0, 0, 0, 1345, 1346, 1347, 0, 0,
	0, 1325, 0, 961, 961, 0, 0, 0, 2930, 2512,
	0, 0, 0, 0, 1305, 0, 2277, 1351, 0, 0,
	0, 0, 0, 0, 1327, 1328, 1329, 1330, 0, 0,
	2555, 0, 961, 961, 1310, 0, 0, 0, 0, 961,
	0, 1304, 0, 0, 0, 2274, 2275, 2276, 0, 1324,
	0, 1913, 2273, 2271, 2272, 2264, 2265, 2266, 2267, 2269,
	2270, 1332, 1333, 1334, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 1068, 0, 1072, 0, 1078, 0,
	2274, 2275, 2276, 0, 2268, 1326, 0, 2273, 2271, 2272,
	2264, 2265, 2266, 2267, 2269, 2270, 0, 0, 0, 0,
	0, 0, 0, 0, 2994, 0, 0, 1327, 1328, 1329,
	1330, 1325, 0, 0, 0, 934, 0, 1310, 0, 0,
	1917, 545, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1532, 2283, 545, 0, 0, 0, 0, 0, 0,
	1342, 1352, 0, 0, 1332, 1333, 1334, 0, 0, 0,
	0, 0, 0, 2646, 0, 0, 0, 1917, 0, 961,
	0, 2278, 1561, 0, 1561, 0, 0, 0, 0, 0,
	0, 0, 0, 962, 0, 0, 976, 976, 1331, 0,
	0, 0, 0, 1181, 0, 0, 0, 1340, 0, 0,
	1186, 0, 0, 0, 1325, 1326, 1315, 1313, 1314, 1306,
	1307, 1308, 1309, 1311, 1312, 0, 0, 0, 1991, 1554,
	0, 1554, 0, 0, 0, 0, 498, 0, 0, 743,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1658, 0, 0,
	0, 0, 0, 0, 0, 2279, 0, 1991, 934, 0,
	0, 0, 0, 1917, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 596, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 1066,
	0, 1704, 0, 966, 498, 0, 498, 1710, 0, 1711,
	0, 1712, 0, 1713, 498, 1714, 74, 0, 74, 0,
	74, 1343, 0, 0, 0, 0, 1315, 1313, 1314, 1306,
	1307, 1308, 1309, 1311, 1312, 1724, 1108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1355, 1356, 1357, 1358, 1359, 0, 0, 0,
	0, 0, 0, 0, 0, 1368, 0, 2761, 0, 2274,
	2275, 2276, 0, 1378, 0, 733, 2273, 2271, 2272, 2264,
	2265, 2266, 2267, 2269, 2270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 1302, 1303, 0, 0, 1344, 0, 1315,
	1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 0, 0,
	0, 934, 0, 0, 0, 74, 1066, 0, 1305, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 1991, 2351, 1991, 0,
	0, 0, 0, 0, 0, 1304, 0, 0, 0, 0,
	2646, 1066, 0, 1324, 0, 0, 1991, 0, 2351, 0,
	0, 1066, 1066, 498, 1991, 2351, 0, 0, 498, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2646, 0, 1066, 2062, 0, 0,
	0, 0, 0, 962, 962, 2646, 2194, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 1435, 1435, 1991,
	0, 1327, 1328, 1329, 1330, 0, 0, 0, 2469, 2469,
	1975, 1310, 962, 962, 0, 0, 0, 0, 0, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1332, 1333,
	1334, 0, 720, 0, 0, 0, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 975, 970,
	0, 0, 0, 0, 1364, 0, 1367, 0, 0, 0,
	0, 0, 0, 1374, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 1325, 0,
	0, 0, 1991, 0, 2351, 0, 0, 2924, 0, 0,
	0, 0, 0, 0, 0, 498, 0, 0, 0, 2646,
	0, 2104, 0, 0, 1128, 0, 1128, 0, 1128, 0,
	970, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 2646, 0, 2646, 0, 0, 961, 2646, 0,
	0, 498, 0, 498, 0, 1331, 0, 0, 0, 0,
	0, 1066, 0, 0, 0, 0, 961, 210, 0, 0,
	961, 0, 1326, 0, 0, 0, 961, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2555, 0, 0, 0, 0, 0,
	545, 975, 0, 0, 0, 0, 0, 0, 2924, 0,
	961, 961, 0, 0, 0, 0, 0, 74, 0, 0,
	1456, 0, 1459, 210, 0, 0, 0, 0, 0, 0,
	2162, 0, 0, 0, 0, 0, 1991, 2351, 0, 0,
	0, 0, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2351, 0,
	0, 0, 0, 0, 2170, 970, 2172, 1066, 0, 1066,
	0, 498, 0, 1315, 1313, 1314, 1306, 1307, 1308, 1309,
	1311, 1312, 0, 0, 0, 975, 0, 2185, 0, 0,
	3054, 743, 743, 1066, 0, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2646, 0, 0, 0, 0, 0, 0, 0,
	2262, 2263, 0, 2280, 2281, 2282, 0, 0, 0, 0,
	0, 2555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1066, 0, 0, 0, 0, 2646,
	975, 0, 1991, 0, 1739, 0, 1744, 0, 0, 0,
	0, 0, 1751, 0, 0, 0, 0, 0, 2924, 0,
	2277, 0, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 0, 1807, 0,
	1809, 1810, 1811, 1812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 1835,
	0, 0, 0, 0, 0, 0, 0, 1368, 2268, 0,
	975, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 1909, 0, 1920, 0, 0, 2283, 975, 1926, 1931,
	0, 0, 0, 0, 1302, 1303, 0, 1335, 1336, 1337,
	1345, 1346, 1347, 0, 2348, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 2278, 0, 0, 976, 1305,
	0, 0, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1108, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	0, 961, 961, 961, 1324, 0, 961, 0, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 2404, 1302,
	1303, 0, 0, 0, 0, 0, 0, 0, 720, 0,
	0, 720, 720, 0, 0, 0, 0, 0, 0, 0,
	0, 2051, 0, 2053, 1305, 0, 0, 2422, 0, 2279,
	0, 0, 0, 0, 0, 0, 2431, 962, 2433, 0,
	0, 0, 1327, 1328, 1329, 1330, 0, 0, 0, 0,
	0, 1304, 1310, 0, 0, 0, 962, 0, 0, 1324,
	962, 0, 0, 0, 0, 0, 962, 0, 0, 1825,
	0, 0, 0, 0, 0, 1342, 1352, 0, 0, 1332,
	1333, 1334, 733, 0, 0, 0, 0, 0, 1367, 2262,
	2263, 0, 2280, 2281, 2282, 975, 0, 0, 0, 0,
	0, 976, 2187, 0, 0, 0, 0, 0, 1319, 1320,
	962, 962, 0, 0, 0, 0, 0, 1327, 1328, 1329,
	1330, 0, 1340, 0, 0, 0, 0, 1310, 0, 1325,
	0, 0, 0, 2274, 2275, 2276, 0, 0, 2508, 0,
	2273, 2271, 2272, 2264, 2265, 2266, 2267, 2269, 2270, 2277,
	0, 0, 0, 0, 1332, 1333, 1334, 0, 0, 0,
	0, 922, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 0, 0,
	74, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 2268, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 1302, 1303, 0, 1343, 0, 0, 0,
	0, 2284, 0, 74, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1305, 0,
	976, 0, 0, 0, 0, 2283, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 74, 0, 74,
	0, 0, 0, 0, 0, 1304, 0, 0, 1326, 0,
	0, 0, 0, 1324, 2278, 0, 0, 0, 2188, 2189,
	0, 74, 0, 0, 2195, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 1341, 0, 0, 1316, 1317, 1323,
	1322, 1318, 1344, 2208, 1315, 1313, 1314, 1306, 1307, 1308,
	1309, 1311, 1312, 0, 976, 0, 0, 2214, 0, 0,
	0, 0, 975, 2221, 0, 0, 0, 0, 2226, 0,
	976, 1327, 1328, 1329, 1330, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 2240, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 0, 0, 2686, 2279, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 1332, 1333,
	1334, 0, 0, 0, 0, 0, 0, 976, 0, 1315,
	1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1931, 1931, 1931, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 1435, 0, 0, 1325, 0,
	0, 975, 0, 2316, 0, 2732, 0, 970, 0, 0,
	0, 975, 0, 0, 0, 2735, 0, 0, 975, 0,
	0, 962, 962, 962, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 961, 0, 961,
	961, 961, 2274, 2275, 2276, 0, 0, 0, 0, 2273,
	2271, 2272, 2264, 2265, 2266, 2267, 2269, 2270, 2373, 0,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 1825, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 2834, 0, 0, 0, 0, 1108,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1315, 1313, 1314, 1306, 1307, 1308, 1309,
	1311, 1312, 0, 743, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 922, 0, 0,
	0, 0, 0, 0, 0, 922, 922, 0, 0, 922,
	0, 0, 2506, 0, 0, 0, 1751, 0, 0, 0,
	0, 0, 2510, 2511, 0, 0, 2514, 0, 0, 0,
	2517, 0, 0, 0, 0, 0, 0, 0, 0, 2521,
	0, 0, 0, 0, 0, 0, 2527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2534, 0, 0, 0,
	2316, 0, 74, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2561,
	2562, 0, 2563, 2564, 2565, 0, 0, 975, 0, 2567,
	0, 0, 74, 0, 74, 0, 2569, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2931, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2597, 2598, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 0, 2967, 0, 2969, 0, 0, 2614, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 74, 975, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 2640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 961, 0, 2663, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2668,
	975, 0, 0, 975, 2669, 0, 0, 0, 0, 2672,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 962, 0, 3022, 0, 0, 0, 0, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 1435, 3042, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2711, 0, 0, 0, 0, 962, 0, 962,
	962, 962, 0, 0, 0, 0, 3059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 663, 0, 693, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 962, 0, 0, 2740, 2741,
	0, 0, 0, 0, 2745, 2746, 668, 0, 0, 2749,
	2750, 74, 0, 0, 975, 0, 975, 0, 0, 0,
	0, 2752, 0, 0, 0, 2755, 0, 0, 0, 922,
	669, 0, 0, 0, 0, 671, 0, 0, 0, 698,
	0, 0, 2762, 0, 0, 677, 678, 0, 0, 0,
	688, 0, 0, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 975, 694, 672, 0, 961, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 0, 961, 692, 0,
	0, 0, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 961, 961,
	0, 0, 0, 0, 0, 0, 0, 673, 0, 0,
	0, 0, 0, 667, 0, 0, 0, 0, 0, 0,
	0, 2820, 0, 0, 0, 0, 0, 0, 674, 675,
	0, 0, 0, 0, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	681, 0, 922, 0, 0, 0, 0, 676, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 680, 0, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 695, 975, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2894, 2895,
	2896, 0, 0, 0, 0, 0, 0, 0, 679, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2904, 2905, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 690, 0, 0, 2912, 0, 0,
	0, 0, 0, 685, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 0, 0, 665, 683, 696, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 666, 0, 976, 0, 976, 0, 0, 962, 0,
	0, 686, 0, 2947, 684, 922, 0, 0, 699, 700,
	0, 0, 0, 0, 0, 697, 0, 0, 0, 0,
	0, 2958, 687, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 689, 0,
	1302, 1303, 0, 1335, 1336, 1337, 1345, 1346, 1347, 0,
	976, 961, 0, 976, 0, 0, 0, 0, 1338, 0,
	0, 961, 961, 0, 0, 1305, 0, 0, 1351, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1304, 0, 0, 975, 0, 0, 0, 0,
	1324, 0, 74, 0, 0, 3005, 0, 1321, 3008, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3021, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 1328,
	1329, 1330, 0, 0, 0, 0, 0, 0, 1310, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 976, 0, 0, 0,
	0, 1342, 1352, 0, 0, 1332, 1333, 1334, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 1349, 0, 0,
	3091, 3091, 0, 0, 1319, 1320, 0, 0, 962, 0,
	0, 0, 976, 0, 0, 0, 962, 3108, 1340, 0,
	0, 0, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 962, 0, 0,
	0, 1350, 0, 0, 3091, 0, 0, 0, 0, 0,
	0, 1825, 0, 0, 0, 1339, 0, 0, 962, 962,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1331, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3091, 0, 0, 0, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	1341, 0, 0, 1316, 1317, 1323, 1322, 1318, 1344, 0,
	1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 0,
	0, 0, 976, 2768, 0, 0, 0, 2767, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 962, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 976, 260, 261, 262, 263,
	978, 264, 979, 980, 981, 982, 216, 983, 984, 985,
	986, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 987, 271, 272, 273, 274, 275, 276, 277, 988,
	989, 278, 221, 222, 223, 990, 279, 224, 991, 963,
	992, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 993, 289, 0, 290, 291, 994, 869, 292, 293,
	995, 996, 998, 997, 999, 1000, 1001, 294, 295, 502,
	296, 297, 298, 225, 226, 1002, 299, 1003, 300, 1004,
	301, 1005, 1006, 302, 303, 1007, 304, 305, 1008, 306,
	1009, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 1010, 870, 1011, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 1012, 322, 1013, 1014,
	871, 323, 1015, 324, 231, 1016, 232, 1017, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 873, 1018, 239,
	332, 0, 0, 0, 1019, 331, 333, 340, 1020, 872,
	334, 236, 336, 335, 337, 338, 339, 237, 1021, 238,
	1022, 341, 874, 875, 342, 343, 344, 876, 345, 346,
	0, 0, 347, 348, 349, 1023, 351, 350, 1024, 352,
	240, 877, 353, 354, 878, 1025, 355, 356, 1026, 1027,
	357, 0, 358, 938, 937, 359, 360, 362, 363, 361,
	879, 364, 365, 367, 366, 1028, 1029, 880, 1030, 241,
	368, 242, 369, 370, 1031, 371, 372, 1032, 1033, 373,
	374, 1034, 1035, 375, 243, 881, 376, 882, 244, 377,
	378, 379, 380, 381, 382, 383, 1036, 384, 245, 385,
	246, 386, 1037, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 1038, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 1039, 407, 883, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 1040, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 1041, 432, 413, 414, 433, 884, 434,
	249, 435, 436, 1042, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 1043, 447, 448, 1044,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	1045, 251, 252, 253, 457, 1046, 1047, 458, 459, 254,
	255, 1048, 460, 461, 0, 462, 463, 1049, 1050, 464,
	465, 466, 468, 1051, 469, 1052, 467, 470, 471, 472,
	256, 257, 1053, 474, 473, 258, 1054, 1055, 1056, 1057,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	973, 0, 0, 0, 0, 0, 1962, 0, 0, 0,
	0, 0, 0, 0, 0, 1963, 260, 261, 262, 263,
	978, 264, 979, 980, 981, 982, 216, 983, 984, 985,
	986, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 987, 271, 272, 273, 274, 275, 276, 277, 988,
	989, 278, 221, 222, 223, 990, 279, 224, 991, 963,
	992, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 993, 289, 0, 290, 291, 994, 869, 292, 293,
	995, 996, 998, 997, 999, 1000, 1001, 294, 295, 502,
	296, 297, 298, 225, 226, 1002, 299, 1003, 300, 1004,
	301, 1005, 1006, 302, 303, 1007, 304, 305, 1008, 306,
	1009, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 1010, 870, 1011, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 1012, 322, 1013, 1014,
	871, 323, 1015, 324, 231, 1016, 232, 1017, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 873, 1018, 239,
	332, 0, 0, 0, 1019, 331, 333, 340, 1020, 872,
	334, 236, 336, 335, 337, 338, 339, 237, 1021, 238,
	1022, 341, 874, 875, 342, 343, 344, 876, 345, 346,
	0, 0, 347, 348, 349, 1023, 351, 350, 1024, 352,
	240, 877, 353, 354, 878, 1025, 355, 356, 1026, 1027,
	357, 0, 358, 938, 937, 359, 360, 362, 363, 361,
	879, 364, 365, 367, 366, 1028, 1029, 880, 1030, 241,
	368, 242, 369, 370, 1031, 371, 372, 1032, 1033, 373,
	374, 1034, 1035, 375, 243, 881, 376, 882, 244, 377,
	378, 379, 380, 381, 382, 383, 1036, 384, 245, 385,
	246, 386, 1037, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 1038, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 1039, 407, 883, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 1040, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 1041, 432, 413, 414, 433, 884, 434,
	249, 435, 436, 1042, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 1043, 447, 448, 1044,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	1045, 251, 252, 253, 457, 1046, 1047, 458, 459, 254,
	255, 1048, 460, 461, 0, 462, 463, 1049, 1050, 464,
	465, 466, 468, 1051, 469, 1052, 467, 470, 471, 472,
	256, 257, 1053, 474, 473, 258, 1054, 1055, 1056, 1057,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2791, 260, 261, 262,
	263, 978, 264, 979, 980, 981, 982, 216, 983, 984,
	985, 986, 265, 266, 267, 217, 218, 268, 219, 269,
	270, 220, 987, 271, 272, 273, 274, 275, 276, 277,
	988, 989, 278, 221, 222, 223, 990, 279, 224, 991,
	963, 992, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 993, 289, 0, 290, 291, 994, 869, 292,
	293, 995, 996, 998, 997, 999, 1000, 1001, 294, 295,
	502, 296, 297, 298, 225, 226, 1002, 299, 1003, 300,
	1004, 301, 1005, 1006, 302, 303, 1007, 304, 305, 1008,
	306, 1009, 227, 307, 308, 310, 313, 309, 314, 315,
	228, 229, 1010, 870, 1011, 0, 0, 0, 0, 316,
	317, 318, 230, 319, 320, 0, 321, 1012, 322, 1013,
	1014, 871, 323, 1015, 324, 231, 1016, 232, 1017, 325,
	326, 327, 328, 329, 330, 233, 234, 235, 873, 1018,
	239, 332, 0, 0, 0, 1019, 331, 333, 340, 1020,
	872, 334, 236, 336, 335, 337, 338, 339, 237, 1021,
	238, 1022, 341, 874, 875, 342, 343, 344, 876, 345,
	346, 0, 0, 347, 348, 349, 1023, 351, 350, 1024,
	352, 240, 877, 353, 354, 878, 1025, 355, 356, 1026,
	1027, 357, 0, 358, 938, 937, 359, 360, 362, 363,
	361, 879, 364, 365, 367, 366, 1028, 1029, 880, 1030,
	241, 368, 242, 369, 370, 1031, 371, 372, 1032, 1033,
	373, 374, 1034, 1035, 375, 243, 881, 376, 882, 244,
	377, 378, 379, 380, 381, 382, 383, 1036, 384, 245,
	385, 246, 386, 1037, 387, 388, 389, 390, 391, 392,
	247, 393, 394, 1038, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 1039, 407, 883,
	408, 409, 410, 411, 248, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 1040, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 1041, 432, 413, 414, 433, 884,
	434, 249, 435, 436, 1042, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 250, 1043, 447, 448,
	1044, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	456, 1045, 251, 252, 253, 457, 1046, 1047, 458, 459,
	254, 255, 1048, 460, 461, 0, 462, 463, 1049, 1050,
	464, 465, 466, 468, 1051, 469, 1052, 467, 470, 471,
	472, 256, 257, 1053, 474, 473, 258, 1054, 1055, 1056,
	1057, 475, 476, 259, 477, 478, 479, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2899, 260, 261, 262, 263, 978, 264, 979,
	980, 981, 982, 216, 983, 984, 985, 986, 265, 266,
	267, 217, 218, 268, 219, 269, 270, 220, 987, 271,
	272, 273, 274, 275, 276, 277, 988, 989, 278, 221,
	222, 223, 990, 279, 224, 991, 963, 992, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 993, 289,
	0, 290, 291, 994, 869, 292, 293, 995, 996, 998,
	997, 999, 1000, 1001, 294, 295, 502, 296, 297, 298,
	225, 226, 1002, 299, 1003, 300, 1004, 301, 1005, 1006,
	302, 303, 1007, 304, 305, 1008, 306, 1009, 227, 307,
	308, 310, 313, 309, 314, 315, 228, 229, 1010, 870,
	1011, 0, 0, 0, 0, 316, 317, 318, 230, 319,
	320, 0, 321, 1012, 322, 1013, 1014, 871, 323, 1015,
	324, 231, 1016, 232, 1017, 325, 326, 327, 328, 329,
	330, 233, 234, 235, 873, 1018, 239, 332, 0, 0,
	0, 1019, 331, 333, 340, 1020, 872, 334, 236, 336,
	335, 337, 338, 339, 237, 1021, 238, 1022, 341, 874,
	875, 342, 343, 344, 876, 345, 346, 0, 0, 347,
	348, 349, 1023, 351, 350, 1024, 352, 240, 877, 353,
	354, 878, 1025, 355, 356, 1026, 1027, 357, 0, 358,
	938, 937, 359, 360, 362, 363, 361, 879, 364, 365,
	367, 366, 1028, 1029, 880, 1030, 241, 368, 242, 369,
	370, 1031, 371, 372, 1032, 1033, 373, 374, 1034, 1035,
	375, 243, 881, 376, 882, 244, 377, 378, 379, 380,
	381, 382, 383, 1036, 384, 245, 385, 246, 386, 1037,
	387, 388, 389, 390, 391, 392, 247, 393, 394, 1038,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 1039, 407, 883, 408, 409, 410, 411,
	248, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	1040, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	1041, 432, 413, 414, 433, 884, 434, 249, 435, 436,
	1042, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 250, 1043, 447, 448, 1044, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 456, 1045, 251, 252,
	253, 457, 1046, 1047, 458, 459, 254, 255, 1048, 460,
	461, 0, 462, 463, 1049, 1050, 464, 465, 466, 468,
	1051, 469, 1052, 467, 470, 471, 472, 256, 257, 1053,
	474, 473, 258, 1054, 1055, 1056, 1057, 475, 476, 259,
	477, 478, 479, 973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2537, 260,
	261, 262, 263, 978, 264, 979, 980, 981, 982, 216,
	983, 984, 985, 986, 265, 266, 267, 217, 218, 268,
	219, 269, 270, 220, 987, 271, 272, 273, 274, 275,
	276, 277, 988, 989, 278, 221, 222, 223, 990, 279,
	224, 991, 963, 992, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 993, 289, 0, 290, 291, 994,
	869, 292, 293, 995, 996, 998, 997, 999, 1000, 1001,
	294, 295, 502, 296, 297, 298, 225, 226, 1002, 299,
	1003, 300, 1004, 301, 1005, 1006, 302, 303, 1007, 304,
	305, 1008, 306, 1009, 227, 307, 308, 310, 313, 309,
	314, 315, 228, 229, 1010, 870, 1011, 0, 0, 0,
	0, 316, 317, 318, 230, 319, 320, 0, 321, 1012,
	322, 1013, 1014, 871, 323, 1015, 324, 231, 1016, 232,
	1017, 325, 326, 327, 328, 329, 330, 233, 234, 235,
	873, 1018, 239, 332, 0, 0, 0, 1019, 331, 333,
	340, 1020, 872, 334, 236, 336, 335, 337, 338, 339,
	237, 1021, 238, 1022, 341, 874, 875, 342, 343, 344,
	876, 345, 346, 0, 0, 347, 348, 349, 1023, 351,
	350, 1024, 352, 240, 877, 353, 354, 878, 1025, 355,
	356, 1026, 1027, 357, 0, 358, 938, 937, 359, 360,
	362, 363, 361, 879, 364, 365, 367, 366, 1028, 1029,
	880, 1030, 241, 368, 242, 369, 370, 1031, 371, 372,
	1032, 1033, 373, 374, 1034, 1035, 375, 243, 881, 376,
	882, 244, 377, 378, 379, 380, 381, 382, 383, 1036,
	384, 245, 385, 246, 386, 1037, 387, 388, 389, 390,
	391, 392, 247, 393, 394, 1038, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 1039,
	407, 883, 408, 409, 410, 411, 248, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 1040, 428, 429, 423,
	425, 426, 427, 424, 430, 431, 1041, 432, 413, 414,
	433, 884, 434, 249, 435, 436, 1042, 446, 437, 438,
	439, 415, 440, 444, 445, 441, 442, 443, 250, 1043,
	447, 448, 1044, 449, 450, 451, 452, 453, 311, 454,
	312, 455, 456, 1045, 251, 252, 253, 457, 1046, 1047,
	458, 459, 254, 255, 1048, 460, 461, 0, 462, 463,
	1049, 1050, 464, 465, 466, 468, 1051, 469, 1052, 467,
	470, 471, 472, 256, 257, 1053, 474, 473, 258, 1054,
	1055, 1056, 1057, 475, 476, 259, 477, 478, 479, 973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2528, 260, 261, 262, 263, 978,
	264, 979, 980, 981, 982, 216, 983, 984, 985, 986,
	265, 266, 267, 217, 218, 268, 219, 269, 270, 220,
	987, 271, 272, 273, 274, 275, 276, 277, 988, 989,
	278, 221, 222, 223, 990, 279, 224, 991, 963, 992,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	993, 289, 0, 290, 291, 994, 869, 292, 293, 995,
	996, 998, 997, 999, 1000, 1001, 294, 295, 502, 296,
	297, 298, 225, 226, 1002, 299, 1003, 300, 1004, 301,
	1005, 1006, 302, 303, 1007, 304, 305, 1008, 306, 1009,
	227, 307, 308, 310, 313, 309, 314, 315, 228, 229,
	1010, 870, 1011, 0, 0, 0, 0, 316, 317, 318,
	230, 319, 320, 0, 321, 1012, 322, 1013, 1014, 871,
	323, 1015, 324, 231, 1016, 232, 1017, 325, 326, 327,
	328, 329, 330, 233, 234, 235, 873, 1018, 239, 332,
	0, 0, 0, 1019, 331, 333, 340, 1020, 872, 334,
	236, 336, 335, 337, 338, 339, 237, 1021, 238, 1022,
	341, 874, 875, 342, 343, 344, 876, 345, 346, 0,
	0, 347, 348, 349, 1023, 351, 350, 1024, 352, 240,
	877, 353, 354, 878, 1025, 355, 356, 1026, 1027, 357,
	0, 358, 938, 937, 359, 360, 362, 363, 361, 879,
	364, 365, 367, 366, 1028, 1029, 880, 1030, 241, 368,
	242, 369, 370, 1031, 371, 372, 1032, 1033, 373, 374,
	1034, 1035, 375, 243, 881, 376, 882, 244, 377, 378,
	379, 380, 381, 382, 383, 1036, 384, 245, 385, 246,
	386, 1037, 387, 388, 389, 390, 391, 392, 247, 393,
	394, 1038, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 1039, 407, 883, 408, 409,
	410, 411, 248, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 1040, 428, 429, 423, 425, 426, 427, 424,
	430, 431, 1041, 432, 413, 414, 433, 884, 434, 249,
	435, 436, 1042, 446, 437, 438, 439, 415, 440, 444,
	445, 441, 442, 443, 250, 1043, 447, 448, 1044, 449,
	450, 451, 452, 453, 311, 454, 312, 455, 456, 1045,
	251, 252, 253, 457, 1046, 1047, 458, 459, 254, 255,
	1048, 460, 461, 0, 462, 463, 1049, 1050, 464, 465,
	466, 468, 1051, 469, 1052, 467, 470, 471, 472, 256,
	257, 1053, 474, 473, 258, 1054, 1055, 1056, 1057, 475,
	476, 259, 477, 478, 479, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2408, 260, 261, 262, 263, 978, 264, 979, 980, 981,
	982, 216, 983, 984, 985, 986, 265, 266, 267, 217,
	218, 268, 219, 269, 270, 220, 987, 271, 272, 273,
	274, 275, 276, 277, 988, 989, 278, 221, 222, 223,
	990, 279, 224, 991, 963, 992, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 993, 289, 0, 290,
	291, 994, 869, 292, 293, 995, 996, 998, 997, 999,
	1000, 1001, 294, 295, 502, 296, 297, 298, 225, 226,
	1002, 299, 1003, 300, 1004, 301, 1005, 1006, 302, 303,
	1007, 304, 305, 1008, 306, 1009, 227, 307, 308, 310,
	313, 309, 314, 315, 228, 229, 1010, 870, 1011, 0,
	0, 0, 0, 316, 317, 318, 230, 319, 320, 0,
	321, 1012, 322, 1013, 1014, 871, 323, 1015, 324, 231,
	1016, 232, 1017, 325, 326, 327, 328, 329, 330, 233,
	234, 235, 873, 1018, 239, 332, 0, 0, 0, 1019,
	331, 333, 340, 1020, 872, 334, 236, 336, 335, 337,
	338, 339, 237, 1021, 238, 1022, 341, 874, 875, 342,
	343, 344, 876, 345, 346, 0, 0, 347, 348, 349,
	1023, 351, 350, 1024, 352, 240, 877, 353, 354, 878,
	1025, 355, 356, 1026, 1027, 357, 0, 358, 938, 937,
	359, 360, 362, 363, 361, 879, 364, 365, 367, 366,
	1028, 1029, 880, 1030, 241, 368, 242, 369, 370, 1031,
	371, 372, 1032, 1033, 373, 374, 1034, 1035, 375, 243,
	881, 376, 882, 244, 377, 378, 379, 380, 381, 382,
	383, 1036, 384, 245, 385, 246, 386, 1037, 387, 388,
	389, 390, 391, 392, 247, 393, 394, 1038, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 1039, 407, 883, 408, 409, 410, 411, 248, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 1040, 428,
	429, 423, 425, 426, 427, 424, 430, 431, 1041, 432,
	413, 414, 433, 884, 434, 249, 435, 436, 1042, 446,
	437, 438, 439, 415, 440, 444, 445, 441, 442, 443,
	250, 1043, 447, 448, 1044, 449, 450, 451, 452, 453,
	311, 454, 312, 455, 456, 1045, 251, 252, 253, 457,
	1046, 1047, 458, 459, 254, 255, 1048, 460, 461, 0,
	462, 463, 1049, 1050, 464, 465, 466, 468, 1051, 469,
	1052, 467, 470, 471, 472, 256, 257, 1053, 474, 473,
	258, 1054, 1055, 1056, 1057, 475, 476, 259, 477, 478,
	479, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1849, 260, 261, 262,
	263, 978, 264, 979, 980, 981, 982, 216, 983, 984,
	985, 986, 265, 266, 267, 217, 218, 268, 219, 269,
	270, 220, 987, 271, 272, 273, 274, 275, 276, 277,
	988, 989, 278, 221, 222, 223, 990, 279, 224, 991,
	963, 992, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 993, 289, 0, 290, 291, 994, 869, 292,
	293, 995, 996, 998, 997, 999, 1000, 1001, 294, 295,
	502, 296, 297, 298, 225, 226, 1002, 299, 1003, 300,
	1004, 301, 1005, 1006, 302, 303, 1007, 304, 305, 1008,
	306, 1009, 227, 307, 308, 310, 313, 309, 314, 315,
	228, 229, 1010, 870, 1011, 0, 0, 0, 0, 316,
	317, 318, 230, 319, 320, 0, 321, 1012, 322, 1013,
	1014, 871, 323, 1015, 324, 231, 1016, 232, 1017, 325,
	326, 327, 328, 329, 330, 233, 234, 235, 873, 1018,
	239, 332, 0, 0, 0, 1019, 331, 333, 340, 1020,
	872, 334, 236, 336, 335, 337, 338, 339, 237, 1021,
	238, 1022, 341, 874, 875, 342, 343, 344, 876, 345,
	346, 0, 0, 347, 348, 349, 1023, 351, 350, 1024,
	352, 240, 877, 353, 354, 878, 1025, 355, 356, 1026,
	1027, 357, 0, 358, 938, 937, 359, 360, 362, 363,
	361, 879, 364, 365, 367, 366, 1028, 1029, 880, 1030,
	241, 368, 242, 369, 370, 1031, 371, 372, 1032, 1033,
	373, 374, 1034, 1035, 375, 243, 881, 376, 882, 244,
	377, 378, 379, 380, 381, 382, 383, 1036, 384, 245,
	385, 246, 386, 1037, 387, 388, 389, 390, 391, 392,
	247, 393, 394, 1038, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 1039, 407, 883,
	408, 409, 410, 411, 248, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 1040, 428, 429, 423, 425, 426,
	427, 424, 430, 431, 1041, 432, 413, 414, 433, 884,
	434, 249, 435, 436, 1042, 446, 437, 438, 439, 415,
	440, 444, 445, 441, 442, 443, 250, 1043, 447, 448,
	1044, 449, 450, 451, 452, 453, 311, 454, 312, 455,
	456, 1045, 251, 252, 253, 457, 1046, 1047, 458, 459,
	254, 255, 1048, 460, 461, 0, 462, 463, 1049, 1050,
	464, 465, 466, 468, 1051, 469, 1052, 467, 470, 471,
	472, 256, 257, 1053, 474, 473, 258, 1054, 1055, 1056,
	1057, 475, 476, 259, 477, 478, 479, 973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1524, 260, 261, 262, 263, 978, 264, 979,
	980, 981, 982, 216, 983, 984, 985, 986, 265, 266,
	267, 217, 218, 268, 219, 269, 270, 220, 987, 271,
	272, 273, 274, 275, 276, 277, 988, 989, 278, 221,
	222, 223, 990, 279, 224, 991, 963, 992, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 993, 289,
	0, 290, 291, 994, 869, 292, 293, 995, 996, 998,
	997, 999, 1000, 1001, 294, 295, 502, 296, 297, 298,
	225, 226, 1002, 299, 1003, 300, 1004, 301, 1005, 1006,
	302, 303, 1007, 304, 305, 1008, 306, 1009, 227, 307,
	308, 310, 313, 309, 314, 315, 228, 229, 1010, 870,
	1011, 0, 0, 0, 0, 316, 317, 318, 230, 319,
	320, 0, 321, 1012, 322, 1013, 1014, 871, 323, 1015,
	324, 231, 1016, 232, 1017, 325, 326, 327, 328, 329,
	330, 233, 234, 235, 873, 1018, 239, 332, 0, 0,
	0, 1019, 331, 333, 340, 1020, 872, 334, 236, 336,
	335, 337, 338, 339, 237, 1021, 238, 1022, 341, 874,
	875, 342, 343, 344, 876, 345, 346, 0, 0, 347,
	348, 349, 1023, 351, 350, 1024, 352, 240, 877, 353,
	354, 878, 1025, 355, 356, 1026, 1027, 357, 0, 358,
	938, 937, 359, 360, 362, 363, 361, 879, 364, 365,
	367, 366, 1028, 1029, 880, 1030, 241, 368, 242, 369,
	370, 1031, 371, 372, 1032, 1033, 373, 374, 1034, 1035,
	375, 243, 881, 376, 882, 244, 377, 378, 379, 380,
	381, 382, 383, 1036, 384, 245, 385, 246, 386, 1037,
	387, 388, 389, 390, 391, 392, 247, 393, 394, 1038,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 1039, 407, 883, 408, 409, 410, 411,
	248, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	1040, 428, 429, 423, 425, 426, 427, 424, 430, 431,
	1041, 432, 413, 414, 433, 884, 434, 249, 435, 436,
	1042, 446, 437, 438, 439, 415, 440, 444, 445, 441,
	442, 443, 250, 1043, 447, 448, 1044, 449, 450, 451,
	452, 453, 311, 454, 312, 455, 456, 1045, 251, 252,
	253, 457, 1046, 1047, 458, 459, 254, 255, 1048, 460,
	461, 0, 462, 463, 1049, 1050, 464, 465, 466, 468,
	1051, 469, 1052, 467, 470, 471, 472, 256, 257, 1053,
	474, 473, 258, 1054, 1055, 1056, 1057, 475, 476, 259,
	477, 478, 479, 1856, 0, 784, 772, 773, 770, 771,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 1853, 264, 0, 0, 0,
	0, 820, 766, 0, 0, 0, 265, 266, 267, 217,
	841, 804, 842, 792, 828, 843, 0, 271, 272, 794,
	793, 275, 276, 277, 767, 819, 278, 844, 845, 223,
	0, 279, 826, 0, 809, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 869, 292, 293, 812, 810, 811, 816, 814,
	813, 815, 294, 295, 502, 296, 829, 298, 846, 847,
	752, 299, 0, 300, 0, 301, 1854, 0, 830, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 848, 849, 779, 870, 0, 0,
	0, 0, 0, 316, 317, 318, 850, 831, 832, 0,
	321, 0, 322, 0, 0, 871, 323, 0, 324, 851,
	0, 232, 0, 325, 326, 327, 328, 329, 330, 821,
	822, 825, 873, 0, 823, 803, 0, 0, 0, 0,
	331, 333, 340, 0, 872, 334, 852, 807, 833, 834,
	835, 836, 853, 0, 808, 0, 341, 874, 875, 342,
	343, 344, 876, 837, 838, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 854, 877, 353, 354, 878,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	359, 360, 362, 796, 361, 879, 364, 365, 367, 366,
	749, 0, 880, 780, 824, 368, 855, 369, 370, 0,
	805, 806, 0, 0, 373, 374, 0, 0, 375, 243,
	881, 376, 882, 856, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 857, 385, 246, 386, 0, 387, 388,
	389, 390, 391, 392, 858, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 883, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 797, 798, 799, 800, 424, 430, 431, 817, 432,
	413, 414, 433, 884, 434, 859, 801, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 839, 441, 442, 443,
	860, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 795, 456, 0, 861, 862, 863, 840,
	0, 0, 458, 459, 864, 865, 778, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 818, 469,
	0, 802, 470, 471, 472, 256, 866, 1852, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 1855, 0, 0, 0,
	0, 0, 0, 759, 1850, 0, 0, 0, 734, 762,
	784, 772, 773, 770, 771, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 820, 766, 0, 0,
	0, 265, 266, 267, 217, 841, 804, 842, 792, 828,
	843, 0, 271, 272, 794, 793, 275, 276, 277, 767,
	819, 278, 844, 845, 223, 0, 279, 826, 0, 809,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 869, 292, 293,
	812, 810, 811, 816, 814, 813, 815, 294, 295, 502,
	296, 829, 298, 846, 847, 752, 299, 0, 300, 0,
	301, 0, 0, 830, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 848,
	849, 779, 870, 0, 0, 0, 0, 0, 316, 317,
	318, 850, 831, 832, 0, 321, 0, 322, 0, 0,
	871, 323, 0, 324, 851, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 821, 822, 825, 873, 0, 823,
	803, 0, 0, 0, 0, 331, 333, 340, 0, 872,
	334, 852, 807, 833, 834, 835, 836, 853, 0, 808,
	0, 341, 874, 875, 342, 343, 344, 876, 837, 838,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	854, 877, 353, 354, 878, 0, 355, 356, 0, 0,
	357, 0, 358, 754, 753, 359, 360, 362, 796, 361,
	879, 364, 365, 367, 366, 749, 0, 880, 780, 824,
	368, 855, 369, 370, 0, 805, 806, 0, 0, 373,
	374, 0, 0, 375, 243, 881, 376, 882, 856, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 857, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 858,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 883, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 173, 428, 429, 797, 798, 799, 800,
	424, 430, 431, 817, 432, 413, 414, 433, 884, 434,
	859, 801, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 839, 441, 442, 443, 860, 0, 447, 448, 175,
	449, 450, 451, 452, 453, 311, 454, 312, 795, 456,
	0, 861, 862, 863, 840, 0, 0, 458, 459, 864,
	865, 778, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 818, 469, 0, 802, 470, 471, 472,
	1155, 866, 0, 474, 473, 258, 0, 0, 0, 167,
	475, 476, 259, 477, 478, 479, 750, 168, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 746,
	747, 784, 772, 773, 770, 771, 763, 0, 1371, 0,
	0, 0, 0, 0, 762, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 820, 766, 0,
	0, 0, 265, 266, 267, 217, 841, 804, 842, 792,
	828, 843, 0, 271, 272, 794, 793, 275, 276, 277,
	767, 819, 278, 844, 845, 223, 0, 279, 826, 0,
	809, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 869, 292,
	293, 812, 810, 811, 816, 814, 813, 815, 294, 295,
	502, 296, 829, 298, 846, 847, 752, 299, 0, 300,
	0, 301, 0, 0, 830, 303, 0, 304, 305, 0,
	306, 0, 757, 307, 308, 310, 313, 309, 314, 315,
	848, 849, 779, 870, 0, 0, 0, 0, 0, 316,
	317, 318, 850, 831, 832, 0, 321, 0, 322, 0,
	0, 871, 323, 0, 324, 851, 0, 232, 0, 325,
	326, 327, 328, 329, 330, 821, 822, 825, 873, 0,
	823, 803, 0, 0, 0, 0, 331, 333, 340, 0,
	872, 334, 852, 807, 833, 834, 835, 836, 853, 0,
	808, 0, 341, 874, 875, 342, 343, 344, 876, 837,
	838, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 854, 877, 353, 354, 878, 0, 355, 356, 0,
	0, 357, 0, 358, 754, 753, 359, 360, 362, 796,
	361, 879, 364, 365, 367, 366, 749, 0, 880, 780,
	824, 368, 855, 369, 370, 0, 805, 806, 0, 0,
	373, 374, 0, 0, 375, 243, 881, 376, 882, 856,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 857,
	385, 246, 386, 0, 387, 388, 389, 390, 391, 392,
	858, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 883,
	408, 409, 410, 411, 758, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 173, 428, 429, 797, 798, 799,
	800, 424, 430, 431, 817, 432, 413, 414, 433, 884,
	434, 859, 801, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 839, 441, 442, 443, 860, 0, 447, 448,
	175, 449, 450, 451, 452, 453, 311, 454, 312, 795,
	456, 0, 861, 862, 863, 840, 0, 0, 458, 459,
	864, 865, 778, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 818, 469, 0, 802, 470, 471,
	472, 1155, 866, 0, 474, 473, 258, 0, 0, 0,
	167, 475, 476, 259, 477, 478, 479, 750, 168, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	746, 747, 784, 772, 773, 770, 771, 763, 0, 1371,
	0, 0, 0, 0, 0, 762, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 820, 766,
	0, 0, 0, 265, 266, 267, 217, 841, 804, 842,
	792, 828, 843, 1927, 271, 272, 794, 793, 275, 276,
	277, 767, 819, 278, 844, 845, 223, 0, 279, 826,
	0, 809, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 869,
	292, 293, 812, 810, 811, 816, 814, 813, 815, 294,
	295, 502, 296, 829, 298, 846, 847, 752, 299, 0,
	300, 0, 301, 0, 0, 830, 303, 0, 304, 305,
	0, 306, 0, 757, 307, 308, 310, 313, 309, 314,
	315, 848, 849, 779, 870, 0, 0, 0, 0, 0,
	316, 317, 318, 850, 831, 832, 0, 321, 0, 322,
	0, 1932, 871, 323, 0, 324, 851, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 821, 822, 825, 873,
	0, 823, 803, 0, 0, 0, 0, 331, 333, 340,
	0, 872, 334, 852, 807, 833, 834, 835, 836, 853,
	0, 808, 0, 341, 874, 875, 342, 343, 344, 876,
	837, 838, 0, 0, 347, 348, 349, 0, 351, 350,
	1928, 352, 854, 877, 353, 354, 878, 0, 355, 356,
	0, 0, 357, 0, 358, 754, 753, 359, 360, 362,
	796, 361, 879, 364, 365, 367, 366, 749, 0, 880,
	780, 824, 368, 855, 369, 370, 0, 805, 806, 0,
	0, 373, 374, 0, 0, 375, 243, 881, 376, 882,
	856, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	857, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 858, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	883, 408, 409, 410, 411, 758, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 797, 798,
	799, 800, 424, 430, 431, 817, 432, 413, 414, 433,
	884, 434, 859, 801, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 839, 441, 442, 443, 860, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	795, 456, 0, 861, 862, 863, 840, 0, 1929, 458,
	459, 864, 865, 778, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 818, 469, 0, 802, 470,
	471, 472, 256, 866, 0, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 750, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 746, 747, 784, 772, 773, 770, 771, 763, 0,
	759, 0, 0, 0, 0, 0, 762, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 820,
	766, 0, 0, 0, 265, 266, 267, 217, 841, 804,
	842, 792, 828, 843, 0, 271, 272, 794, 793, 275,
	276, 277, 767, 819, 278, 844, 845, 223, 0, 279,
	826, 0, 809, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	869, 292, 293, 812, 810, 811, 816, 814, 813, 815,
	294, 295, 502, 296, 829, 298, 846, 847, 752, 299,
	0, 300, 0, 301, 0, 0, 830, 303, 0, 304,
	305, 0, 306, 0, 757, 307, 308, 310, 313, 309,
	314, 315, 848, 849, 779, 870, 0, 0, 0, 0,
	0, 316, 317, 318, 850, 831, 832, 0, 321, 0,
	322, 0, 0, 871, 323, 0, 324, 851, 0, 232,
	0, 325, 326, 327, 328, 329, 330, 821, 822, 825,
	873, 0, 823, 803, 0, 0, 0, 0, 331, 333,
	340, 0, 872, 334, 852, 807, 833, 834, 835, 836,
	853, 0, 808, 0, 341, 874, 875, 342, 343, 344,
	876, 837, 838, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 854, 877, 353, 354, 878, 0, 355,
	356, 0, 0, 357, 0, 358, 754, 753, 359, 360,
	362, 796, 361, 879, 364, 365, 367, 366, 749, 2703,
	880, 780, 824, 368, 855, 369, 370, 0, 805, 806,
	0, 0, 373, 374, 0, 0, 375, 243, 881, 376,
	882, 856, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 857, 385, 246, 386, 0, 387, 388, 389, 390,
	391, 392, 858, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 883, 408, 409, 410, 411, 758, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 797,
	798, 799, 800, 424, 430, 431, 817, 432, 413, 414,
	433, 884, 434, 859, 801, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 839, 441, 442, 443, 860, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 795, 456, 0, 861, 862, 863, 840, 0, 0,
	458, 459, 864, 865, 778, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 818, 469, 0, 802,
	470, 471, 472, 256, 866, 0, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 750,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 0,
	0, 0, 746, 747, 1436, 784, 772, 773, 770, 771,
	763, 759, 0, 0, 0, 0, 0, 762, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 820, 766, 0, 0, 0, 265, 266, 267, 217,
	841, 804, 842, 792, 828, 843, 0, 271, 272, 794,
	793, 275, 276, 277, 767, 819, 278, 844, 845, 223,
	0, 279, 826, 0, 809, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 869, 292, 293, 812, 810, 811, 816, 814,
	813, 815, 294, 295, 502, 296, 829, 298, 846, 847,
	752, 299, 0, 300, 0, 301, 0, 0, 830, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 848, 849, 779, 870, 0, 0,
	0, 0, 0, 316, 317, 318, 850, 831, 832, 0,
	321, 0, 322, 0, 0, 871, 323, 0, 324, 851,
	0, 232, 0, 325, 326, 327, 328, 329, 330, 821,
	822, 825, 873, 0, 823, 803, 0, 0, 0, 1753,
	331, 333, 340, 0, 872, 334, 852, 807, 833, 834,
	835, 836, 853, 0, 808, 0, 341, 874, 875, 342,
	343, 344, 876, 837, 838, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 854, 877, 353, 354, 878,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	359, 360, 362, 796, 361, 879, 364, 365, 367, 366,
	749, 0, 880, 780, 824, 368, 855, 369, 370, 0,
	805, 806, 0, 0, 373, 374, 0, 0, 375, 243,
	881, 376, 882, 856, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 857, 385, 246, 386, 1752, 387, 388,
	389, 390, 391, 392, 858, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 883, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 797, 798, 799, 800, 424, 430, 431, 817, 432,
	413, 414, 433, 884, 434, 859, 801, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 839, 441, 442, 443,
	860, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 795, 456, 0, 861, 862, 863, 840,
	0, 0, 458, 459, 864, 865, 778, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 818, 469,
	0, 802, 470, 471, 472, 256, 866, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 742, 762,
	784, 772, 773, 770, 771, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 820, 766, 0, 0,
	0, 265, 266, 267, 217, 841, 804, 842, 792, 828,
	843, 0, 271, 272, 794, 793, 275, 276, 277, 767,
	819, 278, 844, 845, 223, 0, 279, 826, 0, 809,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 869, 292, 293,
	812, 810, 811, 816, 814, 813, 815, 294, 295, 502,
	296, 829, 298, 846, 847, 752, 299, 0, 300, 0,
	301, 0, 0, 830, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 848,
	849, 779, 870, 0, 0, 0, 0, 0, 316, 317,
	318, 850, 831, 832, 0, 321, 0, 322, 0, 0,
	871, 323, 0, 324, 851, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 821, 822, 825, 873, 0, 823,
	803, 0, 0, 0, 0, 331, 333, 340, 0, 872,
	334, 852, 807, 833, 834, 835, 836, 853, 0, 808,
	0, 341, 874, 875, 342, 343, 344, 876, 837, 838,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	854, 877, 353, 354, 878, 0, 355, 356, 0, 0,
	357, 0, 358, 754, 753, 359, 360, 362, 796, 361,
	879, 364, 365, 367, 366, 749, 0, 880, 780, 824,
	368, 855, 369, 370, 0, 805, 806, 744, 0, 373,
	374, 0, 0, 375, 243, 881, 376, 882, 856, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 857, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 858,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 883, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 797, 798, 799, 800,
	424, 430, 431, 817, 432, 413, 414, 433, 884, 434,
	859, 801, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 839, 441, 442, 443, 860, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 795, 456,
	0, 861, 862, 863, 840, 0, 0, 458, 459, 864,
	865, 778, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 818, 469, 0, 802, 470, 471, 472,
	256, 866, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 750, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 746,
	747, 784, 772, 773, 770, 771, 763, 0, 759, 0,
	0, 0, 0, 0, 762, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 820, 766, 0,
	0, 0, 265, 266, 267, 217, 841, 804, 842, 792,
	828, 843, 0, 271, 272, 794, 793, 275, 276, 277,
	767, 819, 278, 844, 845, 223, 0, 279, 826, 0,
	809, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 869, 292,
	293, 812, 810, 811, 816, 814, 813, 815, 294, 295,
	502, 296, 829, 298, 846, 847, 752, 299, 0, 300,
	0, 301, 0, 0, 830, 303, 0, 304, 305, 0,
	306, 0, 757, 307, 308, 310, 313, 309, 314, 315,
	848, 849, 779, 870, 0, 0, 0, 0, 0, 316,
	317, 318, 850, 831, 832, 0, 321, 0, 322, 0,
	0, 871, 323, 0, 324, 851, 0, 232, 0, 325,
	326, 327, 328, 329, 330, 821, 822, 825, 873, 0,
	823, 803, 0, 0, 0, 0, 331, 333, 340, 0,
	872, 334, 852, 807, 833, 834, 835, 836, 853, 0,
	808, 0, 341, 874, 875, 342, 343, 344, 876, 837,
	838, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 854, 877, 353, 354, 878, 0, 355, 356, 0,
	0, 357, 0, 358, 754, 753, 359, 360, 362, 796,
	361, 879, 364, 365, 367, 366, 749, 0, 880, 780,
	824, 368, 855, 369, 370, 0, 805, 806, 0, 0,
	373, 374, 0, 0, 375, 243, 881, 376, 882, 856,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 857,
	385, 246, 386, 0, 387, 388, 389, 390, 391, 392,
	858, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 883,
	408, 409, 410, 411, 758, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 797, 798, 799,
	800, 424, 430, 431, 817, 432, 413, 414, 433, 884,
	434, 859, 801, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 839, 441, 442, 443, 860, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 795,
	456, 0, 861, 862, 863, 840, 0, 0, 458, 459,
	864, 865, 778, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 818, 469, 0, 802, 470, 471,
	472, 256, 866, 2539, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 750, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	746, 747, 784, 772, 773, 770, 771, 763, 0, 759,
	0, 0, 0, 0, 0, 762, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 820, 766,
	0, 0, 0, 265, 266, 267, 217, 841, 804, 842,
	792, 828, 843, 0, 271, 272, 794, 793, 275, 276,
	277, 767, 819, 278, 844, 845, 223, 0, 279, 826,
	0, 809, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 869,
	292, 293, 812, 810, 811, 816, 814, 813, 815, 294,
	295, 502, 296, 829, 298, 846, 847, 752, 299, 0,
	300, 0, 301, 0, 0, 830, 303, 0, 304, 305,
	0, 306, 0, 757, 307, 308, 310, 313, 309, 314,
	315, 848, 849, 779, 870, 0, 0, 0, 0, 0,
	316, 317, 318, 850, 831, 832, 0, 321, 0, 322,
	0, 0, 871, 323, 0, 324, 851, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 821, 822, 825, 873,
	0, 823, 803, 0, 0, 0, 0, 331, 333, 340,
	0, 872, 334, 852, 807, 833, 834, 835, 836, 853,
	0, 808, 0, 341, 874, 875, 342, 343, 344, 876,
	837, 838, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 854, 877, 353, 354, 878, 0, 355, 356,
	0, 0, 357, 0, 358, 754, 753, 359, 360, 362,
	796, 361, 879, 364, 365, 367, 366, 749, 0, 880,
	780, 824, 368, 855, 369, 370, 0, 805, 806, 744,
	0, 373, 374, 0, 0, 375, 243, 881, 376, 882,
	856, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	857, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 858, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	883, 408, 409, 410, 411, 758, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 797, 798,
	799, 800, 424, 430, 431, 817, 432, 413, 414, 433,
	884, 434, 859, 801, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 839, 441, 442, 443, 860, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	795, 456, 0, 861, 862, 863, 840, 0, 0, 458,
	459, 864, 865, 778, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 818, 469, 0, 802, 470,
	471, 472, 256, 866, 0, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 750, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 746, 747, 784, 772, 773, 770, 771, 763, 0,
	759, 0, 0, 0, 0, 0, 762, 0, 0, 260,
	261, 262, 263, 0, 264, 0, 0, 0, 0, 820,
	766, 0, 0, 0, 265, 266, 267, 217, 841, 804,
	842, 792, 828, 843, 0, 271, 272, 794, 793, 275,
	276, 277, 767, 819, 278, 844, 845, 223, 0, 279,
	826, 0, 809, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 288, 285, 0, 289, 0, 290, 291, 0,
	869, 292, 293, 812, 810, 811, 816, 814, 813, 815,
	294, 295, 502, 296, 829, 298, 846, 847, 752, 299,
	0, 300, 0, 301, 0, 0, 830, 303, 0, 304,
	305, 0, 306, 0, 757, 307, 308, 310, 313, 309,
	314, 315, 848, 849, 779, 870, 0, 0, 0, 0,
	0, 316, 317, 318, 850, 831, 832, 0, 321, 0,
	322, 0, 0, 871, 323, 0, 324, 851, 0, 232,
	0, 325, 326, 327, 328, 329, 330, 821, 822, 825,
	873, 0, 823, 803, 0, 0, 0, 0, 331, 333,
	340, 0, 872, 334, 852, 807, 833, 834, 835, 836,
	853, 0, 808, 0, 341, 874, 875, 342, 343, 344,
	876, 837, 838, 0, 0, 347, 348, 349, 0, 351,
	350, 0, 352, 854, 877, 353, 354, 878, 0, 355,
	356, 0, 0, 357, 0, 358, 754, 753, 359, 360,
	362, 796, 361, 879, 364, 365, 367, 366, 749, 0,
	880, 780, 824, 368, 855, 369, 370, 0, 805, 806,
	0, 0, 373, 374, 0, 0, 375, 243, 881, 376,
	882, 856, 377, 378, 379, 380, 381, 382, 383, 0,
	384, 857, 385, 246, 386, 0, 387, 388, 389, 390,
	391, 392, 858, 393, 394, 0, 395, 396, 397, 398,
	399, 0, 401, 402, 400, 403, 404, 405, 406, 0,
	407, 883, 408, 409, 410, 411, 758, 412, 0, 416,
	417, 418, 419, 420, 421, 422, 0, 428, 429, 797,
	798, 799, 800, 424, 430, 431, 817, 432, 413, 414,
	433, 884, 434, 859, 801, 436, 0, 446, 437, 438,
	439, 415, 440, 444, 839, 441, 442, 443, 860, 0,
	447, 448, 0, 449, 450, 451, 452, 453, 311, 454,
	312, 795, 456, 0, 861, 862, 863, 840, 0, 0,
	458, 459, 864, 865, 778, 460, 461, 0, 462, 463,
	0, 0, 464, 465, 466, 468, 818, 469, 0, 802,
	470, 471, 472, 256, 866, 0, 474, 473, 258, 0,
	0, 0, 0, 475, 476, 259, 477, 478, 479, 750,
	0, 0, 0, 0, 0, 0, 0, 748, 0, 0,
	0, 0, 746, 747, 1436, 784, 772, 773, 770, 771,
	763, 759, 0, 0, 0, 0, 0, 762, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 820, 766, 0, 0, 0, 265, 266, 267, 217,
	841, 804, 842, 792, 828, 843, 0, 271, 272, 794,
	793, 275, 276, 277, 767, 819, 278, 844, 845, 223,
	0, 279, 826, 0, 809, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 869, 292, 293, 812, 810, 811, 816, 814,
	813, 815, 294, 295, 502, 296, 829, 298, 846, 847,
	752, 299, 0, 300, 0, 301, 0, 0, 830, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 848, 849, 779, 870, 0, 0,
	0, 0, 0, 316, 317, 318, 850, 831, 832, 0,
	321, 0, 322, 0, 1932, 871, 323, 0, 324, 851,
	0, 232, 0, 325, 326, 327, 328, 329, 330, 821,
	822, 825, 873, 0, 823, 803, 0, 0, 0, 0,
	331, 333, 340, 0, 872, 334, 852, 807, 833, 834,
	835, 836, 853, 0, 808, 0, 341, 874, 875, 342,
	343, 344, 876, 837, 838, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 854, 877, 353, 354, 878,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	359, 360, 362, 796, 361, 879, 364, 365, 367, 366,
	749, 0, 880, 780, 824, 368, 855, 369, 370, 0,
	805, 806, 0, 0, 373, 374, 0, 0, 375, 243,
	881, 376, 882, 856, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 857, 385, 246, 386, 0, 387, 388,
	389, 390, 391, 392, 858, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 883, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 797, 798, 799, 800, 424, 430, 431, 817, 432,
	413, 414, 433, 884, 434, 859, 801, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 839, 441, 442, 443,
	860, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 795, 456, 0, 861, 862, 863, 840,
	0, 0, 458, 459, 864, 865, 778, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 818, 469,
	0, 802, 470, 471, 472, 256, 866, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 1919, 762,
	784, 772, 773, 770, 771, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 820, 766, 0, 0,
	0, 265, 266, 267, 217, 841, 804, 842, 792, 828,
	843, 0, 271, 272, 794, 793, 275, 276, 277, 767,
	819, 278, 844, 845, 223, 0, 279, 826, 0, 809,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 869, 292, 293,
	812, 810, 811, 816, 814, 813, 815, 294, 295, 502,
	296, 829, 298, 846, 847, 752, 299, 0, 300, 0,
	301, 0, 0, 830, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 848,
	849, 779, 870, 0, 0, 0, 0, 0, 316, 317,
	318, 850, 831, 832, 0, 321, 0, 322, 0, 0,
	871, 323, 0, 324, 851, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 821, 822, 825, 873, 0, 823,
	803, 0, 0, 0, 0, 331, 333, 340, 0, 872,
	334, 852, 807, 833, 834, 835, 836, 853, 0, 808,
	0, 341, 874, 875, 342, 343, 344, 876, 837, 838,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	854, 877, 353, 354, 878, 0, 355, 356, 0, 0,
	357, 0, 358, 754, 753, 359, 360, 362, 796, 361,
	879, 364, 365, 367, 366, 749, 0, 880, 780, 824,
	368, 855, 369, 370, 0, 805, 806, 0, 0, 373,
	374, 0, 0, 375, 243, 881, 376, 882, 856, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 857, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 858,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 883, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 797, 798, 799, 800,
	424, 430, 431, 817, 432, 413, 414, 433, 884, 434,
	859, 801, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 839, 441, 442, 443, 860, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 795, 456,
	0, 861, 862, 863, 840, 0, 0, 458, 459, 864,
	865, 778, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 818, 469, 0, 802, 470, 471, 472,
	256, 866, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 750, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 746,
	747, 0, 0, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 0, 1908, 762, 784, 772, 773, 770, 771,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 820, 766, 0, 0, 0, 265, 266, 267, 217,
	841, 804, 842, 792, 828, 843, 0, 271, 272, 794,
	793, 275, 276, 277, 767, 819, 278, 844, 845, 223,
	0, 279, 826, 0, 809, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 869, 292, 293, 812, 810, 811, 816, 814,
	813, 815, 294, 295, 502, 296, 829, 298, 846, 847,
	752, 299, 0, 300, 0, 301, 0, 0, 830, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 848, 849, 779, 870, 0, 0,
	0, 0, 0, 316, 317, 318, 850, 831, 832, 0,
	321, 0, 322, 0, 0, 871, 323, 0, 324, 851,
	0, 232, 0, 325, 326, 327, 328, 329, 330, 821,
	822, 825, 873, 0, 823, 803, 0, 0, 0, 0,
	331, 333, 340, 0, 872, 334, 852, 807, 833, 834,
	835, 836, 853, 0, 808, 0, 341, 874, 875, 342,
	343, 344, 876, 837, 838, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 854, 877, 353, 354, 878,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	359, 360, 362, 796, 361, 879, 364, 365, 367, 366,
	749, 0, 880, 780, 824, 368, 855, 369, 370, 0,
	805, 806, 0, 0, 373, 374, 0, 0, 375, 243,
	881, 376, 882, 856, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 857, 385, 246, 386, 0, 387, 388,
	389, 390, 391, 392, 858, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 883, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 797, 798, 799, 800, 424, 430, 431, 817, 432,
	413, 414, 433, 884, 434, 859, 801, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 839, 441, 442, 443,
	860, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 795, 456, 0, 861, 862, 863, 840,
	0, 0, 458, 459, 864, 865, 778, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 818, 469,
	0, 802, 470, 471, 472, 256, 866, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 1906, 762,
	784, 772, 773, 770, 771, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 820, 766, 0, 0,
	0, 265, 266, 267, 217, 841, 804, 842, 792, 828,
	843, 0, 271, 272, 794, 793, 275, 276, 277, 767,
	819, 278, 844, 845, 223, 0, 279, 826, 0, 809,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 869, 292, 293,
	812, 810, 811, 816, 814, 813, 815, 294, 295, 502,
	296, 829, 298, 846, 847, 752, 299, 0, 300, 0,
	301, 0, 0, 830, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 848,
	849, 779, 870, 0, 0, 0, 0, 0, 316, 317,
	318, 850, 831, 832, 0, 321, 0, 322, 0, 0,
	871, 323, 0, 324, 851, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 821, 822, 825, 873, 0, 823,
	803, 0, 0, 0, 0, 331, 333, 340, 0, 872,
	334, 852, 807, 833, 834, 835, 836, 853, 0, 808,
	0, 341, 874, 875, 342, 343, 344, 876, 837, 838,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	854, 877, 353, 354, 878, 0, 355, 356, 0, 0,
	357, 0, 358, 754, 753, 359, 360, 362, 796, 361,
	879, 364, 365, 367, 366, 749, 0, 880, 780, 824,
	368, 855, 369, 370, 0, 805, 806, 0, 0, 373,
	374, 0, 0, 375, 243, 881, 376, 882, 856, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 857, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 858,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 883, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 797, 798, 799, 800,
	424, 430, 431, 817, 432, 413, 414, 433, 884, 434,
	859, 801, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 839, 441, 442, 443, 860, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 795, 456,
	0, 861, 862, 863, 840, 0, 0, 458, 459, 864,
	865, 778, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 818, 469, 0, 802, 470, 471, 472,
	256, 866, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 750, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 746,
	747, 0, 0, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 0, 1904, 762, 784, 772, 773, 770, 771,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 820, 766, 0, 0, 0, 265, 266, 267, 217,
	841, 804, 842, 792, 828, 843, 0, 271, 272, 794,
	793, 275, 276, 277, 767, 819, 278, 844, 845, 223,
	0, 279, 826, 0, 809, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 869, 292, 293, 812, 810, 811, 816, 814,
	813, 815, 294, 295, 502, 296, 829, 298, 846, 847,
	752, 299, 0, 300, 0, 301, 0, 0, 830, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 848, 849, 779, 870, 0, 0,
	0, 0, 0, 316, 317, 318, 850, 831, 832, 0,
	321, 0, 322, 0, 0, 871, 323, 0, 324, 851,
	0, 232, 0, 325, 326, 327, 328, 329, 330, 821,
	822, 825, 873, 0, 823, 803, 0, 0, 0, 0,
	331, 333, 340, 0, 872, 334, 852, 807, 833, 834,
	835, 836, 853, 0, 808, 0, 341, 874, 875, 342,
	343, 344, 876, 837, 838, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 854, 877, 353, 354, 878,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	359, 360, 362, 796, 361, 879, 364, 365, 367, 366,
	749, 0, 880, 780, 824, 368, 855, 369, 370, 0,
	805, 806, 0, 0, 373, 374, 0, 0, 375, 243,
	881, 376, 882, 856, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 857, 385, 246, 386, 0, 387, 388,
	389, 390, 391, 392, 858, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 883, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 422, 0, 428,
	429, 797, 798, 799, 800, 424, 430, 431, 817, 432,
	413, 414, 433, 884, 434, 859, 801, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 839, 441, 442, 443,
	860, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 795, 456, 0, 861, 862, 863, 840,
	0, 0, 458, 459, 864, 865, 778, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 818, 469,
	0, 802, 470, 471, 472, 256, 866, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 478,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 1901, 762,
	1893, 772, 773, 770, 771, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 820, 766, 0, 0,
	0, 265, 266, 267, 217, 841, 804, 842, 792, 828,
	843, 0, 271, 272, 794, 793, 275, 276, 277, 767,
	819, 278, 844, 845, 223, 0, 279, 826, 0, 809,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 869, 292, 293,
	812, 810, 811, 816, 814, 813, 815, 294, 295, 502,
	296, 829, 1896, 846, 847, 752, 299, 0, 300, 0,
	301, 0, 0, 830, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 848,
	849, 779, 870, 0, 0, 0, 0, 0, 316, 317,
	318, 850, 831, 832, 0, 321, 0, 322, 0, 0,
	871, 323, 0, 324, 851, 0, 232, 0, 325, 326,
	1897, 328, 329, 330, 821, 822, 825, 873, 0, 823,
	803, 0, 0, 0, 0, 331, 333, 340, 0, 872,
	334, 852, 807, 833, 834, 835, 836, 853, 0, 808,
	0, 341, 874, 875, 342, 343, 344, 876, 837, 838,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	854, 877, 353, 354, 878, 0, 355, 356, 0, 0,
	357, 0, 358, 754, 753, 1898, 1895, 362, 796, 361,
	879, 364, 365, 367, 366, 749, 0, 880, 780, 824,
	368, 855, 369, 370, 0, 805, 806, 0, 0, 373,
	374, 0, 0, 375, 243, 881, 376, 882, 856, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 857, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 858,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 883, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 1899, 0, 428, 429, 797, 798, 799, 800,
	424, 430, 431, 817, 432, 413, 414, 433, 884, 434,
	859, 801, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 839, 441, 442, 443, 860, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 795, 456,
	0, 861, 862, 863, 840, 0, 0, 458, 459, 864,
	865, 778, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 818, 469, 0, 802, 470, 471, 472,
	256, 866, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 1894, 479, 750, 0, 0, 0,
	0, 0, 0, 0, 748, 0, 0, 0, 0, 746,
	747, 0, 0, 0, 0, 0, 0, 0, 759, 0,
	0, 0, 0, 1890, 762, 1893, 772, 773, 770, 771,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 261, 262, 263, 0, 264, 0, 0, 0,
	0, 820, 766, 0, 0, 0, 265, 266, 267, 217,
	841, 804, 842, 792, 828, 843, 0, 271, 272, 794,
	793, 275, 276, 277, 767, 819, 278, 844, 845, 223,
	0, 279, 826, 0, 809, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 288, 285, 0, 289, 0, 290,
	291, 0, 869, 292, 293, 812, 810, 811, 816, 814,
	813, 815, 294, 295, 502, 296, 829, 1896, 846, 847,
	752, 299, 0, 300, 0, 301, 0, 0, 830, 303,
	0, 304, 305, 0, 306, 0, 757, 307, 308, 310,
	313, 309, 314, 315, 848, 849, 779, 870, 0, 0,
	0, 0, 0, 316, 317, 318, 850, 831, 832, 0,
	321, 0, 322, 0, 0, 871, 323, 0, 324, 851,
	0, 232, 0, 325, 326, 1897, 328, 329, 330, 821,
	822, 825, 873, 0, 823, 803, 0, 0, 0, 0,
	331, 333, 340, 0, 872, 334, 852, 807, 833, 834,
	835, 836, 853, 0, 808, 0, 341, 874, 875, 342,
	343, 344, 876, 837, 838, 0, 0, 347, 348, 349,
	0, 351, 350, 0, 352, 854, 877, 353, 354, 878,
	0, 355, 356, 0, 0, 357, 0, 358, 754, 753,
	1898, 1895, 362, 796, 361, 879, 364, 365, 367, 366,
	749, 0, 880, 780, 824, 368, 855, 369, 370, 0,
	805, 806, 0, 0, 373, 374, 0, 0, 375, 243,
	881, 376, 882, 856, 377, 378, 379, 380, 381, 382,
	383, 0, 384, 857, 385, 246, 386, 0, 387, 388,
	389, 390, 391, 392, 858, 393, 394, 0, 395, 396,
	397, 398, 399, 0, 401, 402, 400, 403, 404, 405,
	406, 0, 407, 883, 408, 409, 410, 411, 758, 412,
	0, 416, 417, 418, 419, 420, 421, 1899, 0, 428,
	429, 797, 798, 799, 800, 424, 430, 431, 817, 432,
	413, 414, 433, 884, 434, 859, 801, 436, 0, 446,
	437, 438, 439, 415, 440, 444, 839, 441, 442, 443,
	860, 0, 447, 448, 0, 449, 450, 451, 452, 453,
	311, 454, 312, 795, 456, 0, 861, 862, 863, 840,
	0, 0, 458, 459, 864, 865, 778, 460, 461, 0,
	462, 463, 0, 0, 464, 465, 466, 468, 818, 469,
	0, 802, 470, 471, 472, 256, 866, 0, 474, 473,
	258, 0, 0, 0, 0, 475, 476, 259, 477, 1894,
	479, 750, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 746, 747, 784, 772, 773, 770,
	771, 763, 0, 759, 0, 0, 0, 0, 0, 762,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 820, 766, 0, 0, 0, 265, 266, 267,
	217, 841, 804, 842, 792, 828, 843, 0, 271, 272,
	794, 793, 275, 276, 277, 767, 819, 278, 844, 845,
	223, 0, 279, 826, 0, 809, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 869, 292, 293, 812, 810, 811, 816,
	814, 813, 815, 294, 295, 502, 296, 829, 298, 846,
	847, 752, 299, 0, 300, 0, 301, 0, 0, 830,
	303, 0, 304, 305, 0, 306, 0, 757, 307, 308,
	310, 313, 309, 314, 315, 848, 849, 779, 870, 0,
	0, 0, 0, 0, 316, 317, 318, 850, 831, 832,
	0, 321, 0, 322, 0, 0, 871, 323, 0, 324,
	851, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	821, 822, 825, 873, 0, 823, 803, 0, 0, 0,
	0, 331, 333, 340, 0, 872, 334, 852, 807, 833,
	834, 835, 836, 853, 0, 808, 0, 341, 874, 875,
	342, 343, 344, 876, 837, 838, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 854, 877, 353, 354,
	878, 0, 355, 356, 0, 0, 357, 0, 358, 754,
	753, 359, 360, 362, 796, 361, 879, 364, 365, 367,
	366, 749, 0, 880, 780, 824, 368, 855, 369, 370,
	0, 805, 806, 0, 0, 373, 374, 0, 0, 375,
	243, 881, 376, 882, 856, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 857, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 858, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 883, 408, 409, 410, 411, 758,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 797, 798, 799, 800, 424, 430, 431, 817,
	432, 413, 414, 433, 884, 434, 859, 801, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 839, 441, 442,
	443, 860, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 795, 456, 0, 861, 862, 863,
	840, 0, 0, 458, 459, 864, 865, 778, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 818,
	469, 0, 802, 470, 471, 472, 256, 866, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 750, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 746, 747, 0, 0, 0,
	0, 0, 1376, 0, 759, 0, 0, 0, 0, 0,
	762, 784, 772, 773, 770, 771, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 1740, 264, 0, 0, 0, 0, 820, 766, 0,
	0, 0, 265, 266, 267, 217, 841, 804, 842, 792,
	828, 843, 0, 271, 272, 794, 793, 275, 276, 277,
	767, 819, 278, 844, 845, 223, 0, 279, 826, 0,
	809, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 869, 292,
	293, 812, 810, 811, 816, 814, 813, 815, 294, 295,
	502, 296, 829, 298, 846, 847, 752, 299, 0, 300,
	0, 301, 0, 0, 830, 303, 0, 304, 305, 0,
	306, 0, 757, 307, 308, 310, 313, 309, 314, 315,
	848, 849, 779, 870, 0, 0, 0, 0, 0, 316,
	317, 318, 850, 831, 832, 0, 321, 0, 322, 0,
	0, 871, 323, 0, 324, 851, 0, 232, 0, 325,
	326, 327, 328, 329, 330, 821, 822, 825, 873, 0,
	823, 803, 0, 0, 0, 0, 331, 333, 340, 0,
	872, 334, 852, 807, 833, 834, 835, 836, 853, 0,
	808, 0, 341, 874, 875, 342, 343, 344, 876, 837,
	838, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 854, 877, 353, 354, 878, 0, 355, 356, 0,
	0, 357, 0, 358, 754, 753, 359, 360, 362, 796,
	361, 879, 364, 365, 367, 366, 749, 0, 880, 780,
	824, 368, 855, 369, 370, 0, 805, 806, 0, 0,
	373, 374, 0, 0, 375, 243, 881, 376, 882, 856,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 857,
	385, 246, 386, 0, 387, 388, 389, 390, 391, 392,
	858, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 883,
	408, 409, 410, 411, 758, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 797, 798, 799,
	800, 424, 430, 431, 817, 432, 413, 414, 433, 884,
	434, 859, 801, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 839, 441, 442, 443, 860, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 795,
	456, 0, 861, 862, 863, 840, 0, 0, 458, 459,
	864, 865, 778, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 818, 469, 0, 802, 470, 471,
	472, 256, 866, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 750, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	746, 747, 0, 0, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 0, 1080, 762, 784, 772, 773, 770,
	771, 763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 820, 766, 0, 0, 0, 265, 266, 267,
	217, 841, 804, 842, 792, 828, 843, 0, 271, 272,
	794, 793, 275, 276, 277, 767, 819, 278, 844, 845,
	223, 0, 279, 826, 0, 809, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 869, 292, 293, 812, 810, 811, 816,
	814, 813, 815, 294, 295, 502, 296, 829, 298, 846,
	847, 752, 299, 0, 300, 0, 301, 0, 0, 830,
	303, 0, 304, 305, 0, 306, 0, 757, 307, 308,
	310, 313, 309, 314, 315, 848, 849, 779, 870, 0,
	0, 0, 0, 0, 316, 317, 318, 850, 831, 832,
	0, 321, 0, 322, 0, 0, 871, 323, 0, 324,
	851, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	1079, 822, 825, 873, 0, 823, 803, 0, 0, 0,
	0, 331, 333, 340, 0, 872, 334, 852, 807, 833,
	834, 835, 836, 853, 0, 808, 0, 341, 874, 875,
	342, 343, 344, 876, 837, 838, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 854, 877, 353, 354,
	878, 0, 355, 356, 0, 0, 357, 0, 358, 754,
	753, 359, 360, 362, 796, 361, 879, 364, 365, 367,
	366, 749, 0, 880, 780, 824, 368, 855, 369, 370,
	0, 805, 806, 0, 0, 373, 374, 0, 0, 375,
	243, 881, 376, 882, 856, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 857, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 858, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 883, 408, 409, 410, 411, 758,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 797, 798, 799, 800, 424, 430, 431, 817,
	432, 413, 414, 433, 884, 434, 859, 801, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 839, 441, 442,
	443, 860, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 795, 456, 0, 861, 862, 863,
	840, 0, 0, 458, 459, 864, 865, 778, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 818,
	469, 0, 802, 470, 471, 472, 256, 866, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 750, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 746, 747, 0, 0, 0,
	0, 0, 0, 0, 759, 0, 0, 0, 0, 1074,
	762, 784, 772, 773, 770, 771, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 260, 261, 262,
	263, 0, 264, 0, 0, 0, 0, 820, 766, 0,
	0, 0, 265, 266, 267, 217, 841, 804, 842, 792,
	828, 843, 0, 271, 272, 794, 793, 275, 276, 277,
	767, 819, 278, 844, 845, 223, 0, 279, 826, 0,
	809, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	288, 285, 0, 289, 0, 290, 291, 0, 869, 292,
	293, 812, 810, 811, 816, 814, 813, 815, 294, 295,
	502, 296, 829, 298, 846, 847, 752, 299, 0, 300,
	0, 301, 0, 0, 830, 303, 0, 304, 305, 0,
	306, 0, 757, 307, 308, 310, 313, 309, 314, 315,
	848, 849, 779, 870, 0, 0, 0, 0, 0, 316,
	317, 318, 850, 831, 832, 0, 321, 0, 322, 0,
	0, 871, 323, 0, 324, 851, 0, 232, 0, 325,
	326, 327, 328, 329, 330, 1073, 822, 825, 873, 0,
	823, 803, 0, 0, 0, 0, 331, 333, 340, 0,
	872, 334, 852, 807, 833, 834, 835, 836, 853, 0,
	808, 0, 341, 874, 875, 342, 343, 344, 876, 837,
	838, 0, 0, 347, 348, 349, 0, 351, 350, 0,
	352, 854, 877, 353, 354, 878, 0, 355, 356, 0,
	0, 357, 0, 358, 754, 753, 359, 360, 362, 796,
	361, 879, 364, 365, 367, 366, 749, 0, 880, 780,
	824, 368, 855, 369, 370, 0, 805, 806, 0, 0,
	373, 374, 0, 0, 375, 243, 881, 376, 882, 856,
	377, 378, 379, 380, 381, 382, 383, 0, 384, 857,
	385, 246, 386, 0, 387, 388, 389, 390, 391, 392,
	858, 393, 394, 0, 395, 396, 397, 398, 399, 0,
	401, 402, 400, 403, 404, 405, 406, 0, 407, 883,
	408, 409, 410, 411, 758, 412, 0, 416, 417, 418,
	419, 420, 421, 422, 0, 428, 429, 797, 798, 799,
	800, 424, 430, 431, 817, 432, 413, 414, 433, 884,
	434, 859, 801, 436, 0, 446, 437, 438, 439, 415,
	440, 444, 839, 441, 442, 443, 860, 0, 447, 448,
	0, 449, 450, 451, 452, 453, 311, 454, 312, 795,
	456, 0, 861, 862, 863, 840, 0, 0, 458, 459,
	864, 865, 778, 460, 461, 0, 462, 463, 0, 0,
	464, 465, 466, 468, 818, 469, 0, 802, 470, 471,
	472, 256, 866, 0, 474, 473, 258, 0, 0, 0,
	0, 475, 476, 259, 477, 478, 479, 750, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 0, 0, 0,
	746, 747, 0, 0, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 0, 1069, 762, 784, 772, 773, 770,
	771, 763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 820, 766, 0, 0, 0, 265, 266, 267,
	217, 841, 804, 842, 792, 828, 843, 0, 271, 272,
	794, 793, 275, 276, 277, 767, 819, 278, 844, 845,
	223, 0, 279, 826, 0, 809, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 869, 292, 293, 812, 810, 811, 816,
	814, 813, 815, 294, 295, 502, 296, 829, 298, 846,
	847, 752, 299, 0, 300, 0, 301, 0, 0, 830,
	303, 0, 304, 305, 0, 306, 0, 757, 307, 308,
	310, 313, 309, 314, 315, 848, 849, 779, 870, 0,
	0, 0, 0, 0, 316, 317, 318, 850, 831, 832,
	0, 321, 0, 322, 0, 0, 871, 323, 0, 324,
	851, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	821, 822, 825, 873, 0, 823, 803, 0, 0, 0,
	0, 331, 333, 340, 0, 872, 334, 852, 807, 833,
	834, 835, 836, 853, 0, 808, 0, 341, 874, 875,
	342, 343, 344, 876, 837, 838, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 854, 877, 353, 354,
	878, 0, 355, 356, 0, 0, 357, 0, 358, 754,
	753, 359, 360, 362, 796, 361, 879, 364, 365, 367,
	366, 749, 0, 880, 780, 824, 368, 855, 369, 370,
	0, 805, 806, 0, 0, 373, 374, 0, 0, 375,
	243, 881, 376, 882, 856, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 857, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 858, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 883, 408, 409, 410, 411, 758,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 797, 798, 799, 800, 424, 430, 431, 817,
	432, 413, 414, 433, 884, 434, 859, 801, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 839, 441, 442,
	443, 860, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 795, 456, 0, 861, 862, 863,
	840, 0, 0, 458, 459, 864, 865, 778, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 818,
	469, 0, 802, 470, 471, 472, 256, 866, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 750, 0, 0, 0, 0, 0, 0, 0,
	748, 0, 0, 0, 0, 746, 747, 784, 772, 773,
	770, 771, 763, 0, 759, 0, 0, 0, 0, 0,
	762, 0, 0, 260, 261, 262, 263, 0, 264, 0,
	0, 0, 0, 820, 766, 0, 0, 0, 265, 266,
	267, 217, 841, 804, 842, 792, 828, 843, 0, 271,
	272, 794, 793, 275, 276, 277, 767, 819, 278, 844,
	845, 223, 0, 279, 826, 0, 809, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 288, 285, 0, 289,
	0, 290, 291, 0, 869, 292, 293, 812, 810, 811,
	816, 814, 813, 815, 294, 295, 502, 296, 829, 298,
	846, 847, 752, 299, 0, 300, 0, 301, 0, 0,
	830, 303, 0, 304, 305, 0, 306, 0, 757, 307,
	308, 310, 313, 309, 314, 315, 848, 849, 779, 870,
	0, 0, 0, 0, 0, 316, 317, 318, 850, 831,
	832, 0, 321, 0, 322, 0, 0, 871, 323, 0,
	324, 851, 0, 232, 0, 325, 326, 327, 328, 329,
	330, 821, 822, 825, 873, 0, 823, 803, 0, 0,
	0, 0, 331, 333, 340, 0, 872, 334, 852, 807,
	833, 834, 835, 836, 853, 0, 808, 0, 341, 874,
	875, 342, 343, 344, 876, 837, 838, 0, 0, 347,
	348, 349, 0, 351, 350, 0, 352, 854, 877, 353,
	354, 878, 0, 355, 356, 0, 0, 357, 0, 358,
	754, 753, 359, 360, 362, 796, 361, 879, 364, 365,
	367, 366, 749, 0, 880, 780, 824, 368, 855, 369,
	370, 0, 805, 806, 0, 0, 373, 374, 0, 0,
	375, 243, 881, 376, 882, 856, 377, 378, 379, 380,
	381, 382, 383, 0, 384, 857, 385, 246, 386, 0,
	387, 388, 389, 390, 391, 392, 858, 393, 394, 0,
	395, 396, 397, 398, 399, 0, 401, 402, 400, 403,
	404, 405, 406, 0, 407, 883, 408, 409, 410, 411,
	758, 412, 0, 416, 417, 418, 419, 420, 421, 422,
	0, 428, 429, 797, 798, 799, 800, 424, 430, 431,
	817, 432, 413, 414, 433, 884, 434, 859, 801, 436,
	0, 446, 437, 438, 439, 415, 440, 444, 839, 441,
	442, 443, 860, 0, 447, 448, 0, 449, 450, 451,
	452, 453, 311, 454, 312, 795, 456, 0, 861, 862,
	863, 840, 0, 0, 458, 459, 864, 865, 778, 460,
	461, 0, 462, 463, 0, 0, 464, 465, 466, 468,
	818, 469, 0, 802, 470, 471, 472, 256, 866, 0,
	474, 473, 258, 0, 0, 0, 0, 475, 476, 259,
	477, 478, 479, 750, 0, 0, 0, 0, 0, 0,
	0, 748, 0, 0, 0, 0, 746, 747, 784, 772,
	773, 770, 771, 763, 0, 759, 0, 0, 0, 0,
	0, 762, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 820, 766, 0, 0, 0, 265,
	266, 267, 217, 841, 804, 842, 792, 828, 843, 0,
	271, 272, 794, 793, 275, 276, 277, 767, 819, 278,
	844, 845, 223, 0, 279, 826, 0, 809, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 869, 292, 3090, 812, 810,
	811, 816, 814, 813, 815, 294, 295, 502, 296, 829,
	298, 846, 847, 752, 299, 0, 300, 0, 301, 0,
	0, 830, 303, 0, 304, 305, 0, 306, 0, 757,
	307, 308, 310, 313, 309, 314, 315, 848, 849, 779,
	870, 0, 0, 0, 0, 0, 316, 317, 318, 850,
	831, 832, 0, 321, 0, 322, 0, 0, 871, 323,
	0, 324, 851, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 821, 822, 825, 873, 0, 823, 803, 0,
	0, 0, 0, 331, 333, 340, 0, 872, 334, 852,
	807, 833, 834, 835, 836, 853, 0, 808, 0, 341,
	874, 875, 342, 343, 344, 876, 837, 838, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 854, 877,
	353, 354, 878, 0, 355, 356, 0, 0, 357, 0,
	358, 754, 753, 359, 360, 362, 796, 361, 879, 364,
	365, 367, 366, 749, 0, 880, 780, 824, 368, 855,
	369, 370, 0, 805, 806, 0, 0, 373, 374, 0,
	0, 375, 243, 881, 376, 882, 856, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 857, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 858, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 883, 408, 409, 410,
	411, 758, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 797, 798, 799, 800, 424, 430,
	431, 817, 432, 413, 414, 433, 884, 434, 859, 801,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 839,
	441, 442, 443, 860, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 795, 456, 0, 861,
	862, 863, 840, 0, 0, 458, 459, 864, 865, 778,
	460, 461, 0, 3089, 463, 0, 0, 464, 465, 466,
	468, 818, 469, 0, 802, 470, 471, 472, 256, 866,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 750, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 746, 747, 784,
	772, 773, 770, 771, 763, 0, 759, 0, 0, 0,
	0, 0, 762, 0, 0, 260, 261, 262, 263, 0,
	264, 0, 0, 0, 0, 820, 766, 0, 0, 0,
	265, 266, 267, 3088, 841, 804, 842, 792, 828, 843,
	0, 271, 272, 794, 793, 275, 276, 277, 767, 819,
	278, 844, 845, 223, 0, 279, 826, 0, 809, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 288, 285,
	0, 289, 0, 290, 291, 0, 869, 292, 3090, 812,
	810, 811, 816, 814, 813, 815, 294, 295, 502, 296,
	829, 298, 846, 847, 752, 299, 0, 300, 0, 301,
	0, 0, 830, 303, 0, 304, 305, 0, 306, 0,
	757, 307, 308, 310, 313, 309, 314, 315, 848, 849,
	779, 870, 0, 0, 0, 0, 0, 316, 317, 318,
	850, 831, 832, 0, 321, 0, 322, 0, 0, 871,
	323, 0, 324, 851, 0, 232, 0, 325, 326, 327,
	328, 329, 330, 821, 822, 825, 873, 0, 823, 803,
	0, 0, 0, 0, 331, 333, 340, 0, 872, 334,
	852, 807, 833, 834, 835, 836, 853, 0, 808, 0,
	341, 874, 875, 342, 343, 344, 876, 837, 838, 0,
	0, 347, 348, 349, 0, 351, 350, 0, 352, 854,
	877, 353, 354, 878, 0, 355, 356, 0, 0, 357,
	0, 358, 754, 753, 359, 360, 362, 796, 361, 879,
	364, 365, 367, 366, 749, 0, 880, 780, 824, 368,
	855, 369, 370, 0, 805, 806, 0, 0, 373, 374,
	0, 0, 375, 243, 881, 376, 882, 856, 377, 378,
	379, 380, 381, 382, 383, 0, 384, 857, 385, 246,
	386, 0, 387, 388, 389, 390, 391, 392, 858, 393,
	394, 0, 395, 396, 397, 398, 399, 0, 401, 402,
	400, 403, 404, 405, 406, 0, 407, 883, 408, 409,
	410, 411, 758, 412, 0, 416, 417, 418, 419, 420,
	421, 422, 0, 428, 429, 797, 798, 799, 800, 424,
	430, 431, 817, 432, 413, 414, 433, 884, 434, 859,
	801, 436, 0, 446, 437, 438, 439, 415, 440, 444,
	839, 441, 442, 443, 860, 0, 447, 448, 0, 449,
	450, 451, 452, 453, 311, 454, 312, 795, 456, 0,
	861, 862, 863, 840, 0, 0, 458, 459, 864, 865,
	778, 460, 461, 0, 3089, 463, 0, 0, 464, 465,
	466, 468, 818, 469, 0, 802, 470, 471, 472, 256,
	866, 0, 474, 473, 258, 0, 0, 0, 0, 475,
	476, 259, 477, 478, 479, 750, 0, 0, 0, 0,
	0, 0, 0, 748, 0, 0, 0, 0, 746, 747,
	784, 772, 773, 770, 771, 763, 0, 759, 0, 0,
	0, 0, 0, 762, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 820, 766, 0, 0,
	0, 265, 266, 267, 217, 841, 804, 842, 792, 828,
	843, 0, 271, 272, 794, 793, 275, 276, 277, 767,
	819, 278, 844, 845, 223, 0, 279, 826, 0, 809,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 869, 292, 293,
	812, 810, 811, 816, 814, 813, 815, 294, 295, 502,
	296, 829, 298, 846, 847, 0, 299, 0, 300, 0,
	301, 0, 0, 830, 303, 0, 304, 305, 0, 306,
	0, 757, 307, 308, 310, 313, 309, 314, 315, 848,
	849, 779, 870, 0, 0, 0, 0, 0, 316, 317,
	318, 850, 831, 832, 0, 321, 0, 322, 0, 0,
	871, 323, 0, 324, 851, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 821, 822, 825, 873, 0, 823,
	803, 0, 0, 0, 0, 331, 333, 340, 0, 872,
	334, 852, 807, 833, 834, 835, 836, 853, 0, 808,
	0, 341, 874, 875, 342, 343, 344, 876, 837, 838,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	854, 877, 353, 354, 878, 0, 355, 356, 0, 0,
	357, 0, 358, 938, 937, 359, 360, 362, 796, 361,
	879, 364, 365, 367, 366, 0, 0, 880, 780, 824,
	368, 855, 369, 370, 0, 805, 806, 0, 0, 373,
	374, 0, 0, 375, 243, 881, 376, 882, 856, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 857, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 858,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 883, 408,
	409, 410, 411, 758, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 797, 798, 799, 800,
	424, 430, 431, 817, 432, 413, 414, 433, 884, 434,
	859, 801, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 839, 441, 442, 443, 860, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 795, 456,
	0, 861, 862, 863, 840, 0, 0, 458, 459, 864,
	865, 778, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 818, 469, 0, 802, 470, 471, 472,
	256, 866, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 784, 772, 773, 770,
	771, 763, 0, 0, 1916, 0, 0, 0, 0, 1914,
	1915, 0, 260, 261, 262, 263, 0, 264, 759, 0,
	0, 0, 820, 766, 762, 0, 0, 265, 266, 267,
	0, 841, 804, 842, 792, 828, 843, 0, 271, 272,
	794, 793, 275, 276, 277, 767, 819, 278, 844, 845,
	223, 0, 279, 826, 0, 809, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 869, 292, 3090, 812, 810, 811, 816,
	814, 813, 815, 294, 295, 502, 296, 829, 298, 846,
	847, 752, 299, 0, 300, 0, 301, 0, 0, 830,
	303, 0, 304, 305, 0, 306, 0, 757, 307, 308,
	310, 313, 309, 314, 315, 848, 849, 779, 870, 0,
	0, 0, 0, 0, 316, 317, 318, 850, 831, 832,
	0, 321, 0, 322, 0, 0, 871, 323, 0, 324,
	851, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	821, 822, 825, 0, 0, 823, 803, 0, 0, 0,
	0, 331, 333, 340, 0, 872, 334, 852, 807, 833,
	834, 835, 836, 853, 0, 808, 0, 341, 0, 0,
	342, 343, 344, 876, 837, 838, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 854, 877, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 754,
	753, 359, 360, 362, 796, 361, 879, 364, 365, 367,
	366, 749, 0, 0, 780, 824, 368, 855, 369, 370,
	0, 805, 806, 0, 0, 373, 374, 0, 0, 375,
	243, 881, 376, 882, 856, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 857, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 858, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 883, 408, 409, 410, 411, 758,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 797, 798, 799, 800, 424, 430, 431, 817,
	432, 413, 414, 433, 0, 434, 859, 801, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 839, 441, 442,
	443, 860, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 795, 456, 0, 861, 862, 863,
	840, 0, 0, 458, 459, 864, 865, 778, 460, 461,
	0, 3089, 463, 0, 0, 464, 465, 466, 468, 818,
	469, 0, 802, 470, 471, 472, 256, 866, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 734, 0,
	936, 0, 0, 0, 0, 746, 747, 0, 0, 0,
	0, 0, 0, 0, 759, 0, 260, 261, 262, 263,
	762, 264, 0, 0, 0, 0, 820, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	819, 278, 221, 222, 223, 0, 279, 826, 0, 809,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 869, 292, 293,
	812, 810, 811, 816, 814, 813, 815, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 848,
	849, 0, 870, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	871, 323, 0, 324, 851, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 821, 822, 825, 873, 0, 823,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 872,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 874, 875, 342, 343, 344, 876, 345, 346,
	0, 0, 347, 348, 349, 923, 351, 350, 0, 352,
	854, 877, 353, 354, 878, 0, 355, 356, 0, 0,
	357, 0, 358, 938, 937, 359, 360, 362, 363, 361,
	879, 364, 365, 367, 366, 0, 0, 880, 0, 824,
	368, 242, 369, 370, 0, 371, 372, 0, 928, 373,
	374, 0, 0, 375, 243, 881, 376, 882, 856, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 857, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 883, 408,
	409, 410, 411, 248, 930, 0, 416, 417, 418, 419,
	420, 421, 422, 173, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 817, 432, 413, 414, 433, 884, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 860, 0, 447, 448, 175,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 864,
	865, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 818, 469, 0, 467, 470, 471, 472,
	1155, 257, 0, 474, 473, 258, 0, 0, 936, 167,
	475, 476, 259, 477, 478, 479, 0, 168, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 820, 0, 920, 0, 1461, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 819, 278,
	221, 222, 223, 0, 279, 826, 0, 809, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 869, 292, 293, 812, 810,
	811, 816, 814, 813, 815, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 848, 849, 0,
	870, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 871, 323,
	0, 324, 851, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 821, 822, 825, 873, 0, 823, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 872, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	874, 875, 342, 343, 344, 876, 345, 346, 0, 0,
	347, 348, 349, 923, 351, 350, 0, 352, 854, 877,
	353, 354, 878, 0, 355, 356, 0, 0, 357, 0,
	358, 938, 937, 359, 360, 362, 363, 361, 879, 364,
	365, 367, 366, 0, 0, 880, 0, 824, 368, 242,
	369, 370, 0, 371, 372, 0, 928, 373, 374, 0,
	0, 375, 243, 881, 376, 882, 856, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 857, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 883, 408, 409, 410,
	411, 248, 930, 0, 416, 417, 418, 419, 420, 421,
	422, 173, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 817, 432, 413, 414, 433, 884, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 860, 0, 447, 448, 175, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 864, 865, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 818, 469, 0, 467, 470, 471, 472, 1155, 257,
	0, 474, 473, 258, 2309, 0, 936, 167, 475, 476,
	259, 477, 478, 479, 0, 168, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 820, 0, 920, 0, 1461, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 819, 278, 221, 222,
	223, 0, 279, 826, 0, 809, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 869, 292, 293, 812, 810, 811, 816,
	814, 813, 815, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 848, 849, 0, 870, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 871, 323, 0, 324,
	851, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	821, 822, 825, 873, 0, 823, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 872, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 874, 875,
	342, 343, 344, 876, 345, 346, 0, 0, 347, 348,
	349, 923, 351, 350, 0, 352, 854, 877, 353, 354,
	878, 0, 355, 356, 0, 0, 357, 0, 358, 938,
	937, 359, 360, 362, 363, 361, 879, 364, 365, 367,
	366, 0, 0, 880, 0, 824, 368, 242, 369, 370,
	0, 371, 372, 0, 928, 373, 374, 0, 0, 375,
	243, 881, 376, 882, 856, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 857, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 883, 408, 409, 410, 411, 248,
	930, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 817,
	432, 413, 414, 433, 884, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 860, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 864, 865, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 818,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 919, 0, 936, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	820, 0, 920, 0, 925, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 819, 278, 221, 222, 223, 0,
	279, 826, 0, 809, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 869, 292, 293, 812, 810, 811, 816, 814, 813,
	815, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 848, 849, 0, 870, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 871, 323, 0, 324, 851, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 821, 822,
	825, 873, 0, 823, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 872, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 874, 875, 342, 343,
	344, 876, 345, 346, 0, 0, 347, 348, 349, 923,
	351, 350, 0, 352, 854, 877, 353, 354, 878, 0,
	355, 356, 0, 0, 357, 0, 358, 938, 937, 359,
	360, 362, 363, 361, 879, 364, 365, 367, 366, 0,
	0, 880, 0, 824, 368, 242, 369, 370, 0, 371,
	372, 0, 928, 373, 374, 0, 0, 375, 243, 881,
	376, 882, 856, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 857, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 883, 408, 409, 410, 411, 248, 930, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 817, 432, 413,
	414, 433, 884, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 860,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 864, 865, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 818, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	0, 0, 936, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 820, 0,
	920, 0, 925, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 819, 278, 221, 222, 223, 0, 279, 826,
	0, 809, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 869,
	292, 293, 812, 810, 811, 816, 814, 813, 815, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 848, 849, 0, 870, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 871, 323, 0, 324, 851, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 821, 822, 825, 873,
	0, 823, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 872, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 874, 875, 342, 343, 344, 876,
	345, 346, 0, 0, 347, 348, 349, 923, 351, 350,
	0, 352, 854, 877, 353, 354, 878, 0, 355, 356,
	0, 0, 357, 0, 358, 938, 937, 359, 360, 362,
	363, 361, 879, 364, 365, 367, 366, 0, 0, 880,
	0, 824, 368, 242, 369, 370, 0, 371, 372, 0,
	928, 373, 374, 0, 0, 375, 243, 881, 376, 882,
	856, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	857, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	883, 408, 409, 410, 411, 248, 930, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 817, 432, 413, 414, 433,
	884, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 860, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 864, 865, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 818, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 0, 0,
	936, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 820, 0, 920, 0,
	925, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	819, 278, 221, 222, 223, 0, 279, 826, 0, 809,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 869, 292, 293,
	812, 810, 811, 816, 814, 813, 815, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 848,
	849, 0, 870, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	871, 323, 0, 324, 851, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 821, 822, 825, 873, 0, 823,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 872,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 874, 875, 342, 343, 344, 876, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	854, 877, 353, 354, 878, 0, 355, 356, 0, 0,
	357, 0, 358, 938, 937, 359, 360, 362, 363, 361,
	879, 364, 365, 367, 366, 0, 0, 880, 0, 824,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 881, 376, 882, 856, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 857, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 883, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 817, 432, 413, 414, 433, 884, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 860, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 864,
	865, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 818, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 0, 0, 936, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 820, 0, 0, 0, 2645, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 819, 278,
	221, 222, 223, 0, 279, 826, 0, 809, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 869, 292, 293, 812, 810,
	811, 816, 814, 813, 815, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 848, 849, 0,
	870, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 871, 323,
	0, 324, 851, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 821, 822, 825, 873, 0, 823, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 872, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	874, 875, 342, 343, 344, 876, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 854, 877,
	353, 354, 878, 0, 355, 356, 0, 0, 357, 0,
	358, 938, 937, 359, 360, 362, 363, 361, 879, 364,
	365, 367, 366, 0, 0, 880, 0, 824, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 881, 376, 882, 856, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 857, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 883, 408, 409, 410,
	411, 248, 930, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 817, 432, 413, 414, 433, 884, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 860, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 864, 865, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 818, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 1152, 0, 959, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 1365, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 963, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 869, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 870, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 871, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 873, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 872, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 874, 875,
	342, 343, 344, 876, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 877, 353, 354,
	878, 0, 355, 356, 0, 0, 357, 0, 358, 938,
	937, 359, 360, 362, 363, 361, 879, 364, 365, 367,
	366, 0, 0, 880, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 881, 376, 882, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 883, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 173,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 884, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 175, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 1155, 257, 0, 474,
	473, 258, 0, 0, 936, 167, 475, 476, 259, 477,
	478, 479, 0, 168, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	820, 0, 0, 0, 138, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 819, 278, 221, 222, 223, 0,
	279, 826, 0, 809, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 869, 292, 293, 812, 810, 811, 816, 814, 813,
	815, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 848, 849, 0, 870, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 871, 323, 0, 324, 851, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 821, 822,
	825, 873, 0, 823, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 872, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 874, 875, 342, 343,
	344, 876, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 854, 877, 353, 354, 878, 0,
	355, 356, 0, 0, 357, 0, 358, 938, 937, 359,
	360, 362, 363, 361, 879, 364, 365, 367, 366, 0,
	0, 880, 0, 824, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 881,
	376, 882, 856, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 857, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 883, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 817, 432, 413,
	414, 433, 884, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 860,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 864, 865, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 818, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	734, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 173, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 175, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 1155, 257, 0, 474, 473, 258, 0, 0,
	499, 167, 475, 476, 259, 477, 478, 479, 0, 168,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	138, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 0, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 2102, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 0, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 2554, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 1231, 0, 959, 958, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 1466, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 963, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 869, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 870, 0, 0, 0,
	0, 0, 1230, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 871, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 873, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 872, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 874, 875, 342, 343,
	344, 876, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 877, 353, 354, 878, 0,
	355, 356, 0, 0, 357, 0, 358, 938, 937, 359,
	360, 362, 363, 361, 879, 364, 365, 367, 366, 0,
	0, 880, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 881,
	376, 882, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 1229, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 883, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 884, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	1148, 0, 959, 958, 0, 0, 0, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 963, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 869,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 870, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 871, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 1147, 234, 235, 873,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 872, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 874, 875, 342, 343, 344, 876,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 877, 353, 354, 878, 0, 355, 356,
	0, 0, 357, 0, 358, 938, 937, 359, 360, 362,
	363, 361, 879, 364, 365, 367, 366, 0, 0, 880,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 881, 376, 882,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	883, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	884, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 1144, 0,
	959, 958, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 963,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 869, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 870, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	871, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 1143, 234, 235, 873, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 872,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 874, 875, 342, 343, 344, 876, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 877, 353, 354, 878, 0, 355, 356, 0, 0,
	357, 0, 358, 938, 937, 359, 360, 362, 363, 361,
	879, 364, 365, 367, 366, 0, 0, 880, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 881, 376, 882, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 883, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 884, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 1105, 0, 959, 958,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 963, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 869, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	870, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 871, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 1104, 234, 235, 873, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 872, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	874, 875, 342, 343, 344, 876, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 877,
	353, 354, 878, 0, 355, 356, 0, 0, 357, 0,
	358, 938, 937, 359, 360, 362, 363, 361, 879, 364,
	365, 367, 366, 0, 0, 880, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 881, 376, 882, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 883, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 884, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 1102, 0, 959, 958, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 963, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 869, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 870, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 871, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	1101, 234, 235, 873, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 872, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 874, 875,
	342, 343, 344, 876, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 877, 353, 354,
	878, 0, 355, 356, 0, 0, 357, 0, 358, 938,
	937, 359, 360, 362, 363, 361, 879, 364, 365, 367,
	366, 0, 0, 880, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 881, 376, 882, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 883, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 884, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 952, 0, 959, 958, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 963, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 869, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 870, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 871, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 954, 234,
	235, 873, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 872, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 874, 875, 342, 343,
	344, 876, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 877, 353, 354, 878, 0,
	355, 356, 0, 0, 357, 0, 358, 938, 937, 359,
	360, 362, 363, 361, 879, 364, 365, 367, 366, 0,
	0, 880, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 881,
	376, 882, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 883, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 884, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	959, 958, 0, 0, 0, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 963,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 869, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 870, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	871, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 873, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 872,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 874, 875, 342, 343, 344, 876, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 877, 353, 354, 878, 0, 355, 356, 0, 0,
	357, 0, 358, 938, 937, 359, 360, 362, 363, 361,
	879, 364, 365, 367, 366, 0, 0, 880, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 881, 376, 882, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 883, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 884, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 959, 958, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 963, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 869, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 870, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 871, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 873, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 872, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 874, 875,
	342, 343, 344, 876, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 877, 353, 354,
	878, 0, 355, 356, 0, 0, 357, 0, 358, 938,
	937, 359, 360, 362, 363, 361, 879, 364, 365, 367,
	366, 0, 0, 880, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 881, 376, 882, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 883, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 884, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 959, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 963, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 869, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	870, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 871, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 873, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 872, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	874, 875, 342, 343, 344, 876, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 877,
	353, 354, 878, 0, 355, 356, 0, 0, 357, 0,
	358, 938, 937, 359, 360, 362, 363, 361, 879, 364,
	365, 367, 366, 0, 0, 880, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 881, 376, 882, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 883, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 884, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 603, 0, 209, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 215, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 214, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 208, 0, 209, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 482, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 215, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 214, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 209, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 482, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 215, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 1708, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 214, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 209, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 482, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 215, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 214, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	499, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 482,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 482, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 1992, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 1989, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 2071, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	1995, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 2069, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 2068, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 1994, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	2070, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 499, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 1992,
	279, 224, 0, 0, 1986, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 1989, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 1995, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 1985, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 1994, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 1993, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	610, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 609, 587, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 590, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 591, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 592, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 586, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	587, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 590, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 591, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 592, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 590, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 591, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 592, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 1123, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 928, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 947, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 949, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 928, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 944, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	946, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 928, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 940, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 942, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 928, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	595, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 594, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 522, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	521, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 520, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	1967, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 499, 2470,
	0, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 499, 2470, 0, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 2467, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 499, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 928, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 1729, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	1727, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 1725, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 1701, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 1659, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 1657, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 636, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	1202, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 637, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 633, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 632, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 1552, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 1551, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	636, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 1202, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 637, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	633, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 632, 252, 253, 457, 0, 0, 458,
	1203, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 636, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 626, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 637,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 633, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 1174, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 632, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 1141, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 1140, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 1137, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	1136, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 1134, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 1133, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	1131, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 1130, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 1127, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 1126, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 1115, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 1113, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 1112, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 1107, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 1098, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	1097, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 1093, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	1089, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 1091, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 967, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 969, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 964, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	0, 474, 473, 258, 636, 0, 499, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 626, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 625, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 637, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 627,
	412, 0, 416, 417, 633, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 628, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 632, 252, 253,
	457, 0, 0, 458, 630, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 616, 0, 499, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	617, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 0, 474, 473, 258,
	612, 0, 499, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 233, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 0, 474, 473, 258, 601, 0,
	499, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 0, 474, 473, 258, 544, 0, 499, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 416, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	499, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 432, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 2367, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 499, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 2365, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 393, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 499, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	2354, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 380, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 390, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	412, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 499, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 0, 0, 260, 261, 262, 263, 0, 264,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 265,
	266, 267, 217, 218, 268, 219, 269, 270, 220, 0,
	271, 272, 273, 274, 275, 276, 277, 0, 0, 278,
	221, 222, 223, 0, 279, 224, 0, 0, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 288, 285, 0,
	289, 0, 290, 291, 0, 0, 292, 293, 0, 0,
	0, 0, 0, 0, 0, 294, 295, 502, 296, 297,
	298, 225, 226, 0, 299, 0, 300, 0, 301, 0,
	0, 302, 303, 0, 304, 305, 0, 306, 0, 227,
	307, 308, 310, 313, 309, 314, 315, 228, 229, 0,
	0, 0, 0, 0, 0, 0, 316, 317, 318, 230,
	319, 320, 0, 321, 0, 322, 0, 0, 0, 323,
	0, 324, 231, 0, 232, 0, 325, 326, 327, 328,
	329, 330, 233, 234, 235, 0, 0, 239, 332, 0,
	0, 0, 0, 331, 333, 340, 0, 0, 334, 236,
	336, 335, 337, 338, 339, 237, 0, 238, 0, 341,
	0, 0, 342, 343, 344, 0, 345, 346, 0, 0,
	347, 348, 349, 0, 351, 350, 0, 352, 240, 0,
	353, 354, 0, 0, 355, 356, 0, 0, 357, 0,
	358, 0, 0, 359, 360, 362, 363, 361, 0, 364,
	365, 367, 366, 0, 0, 0, 0, 241, 368, 242,
	369, 370, 0, 371, 372, 0, 0, 373, 374, 0,
	0, 375, 243, 0, 376, 0, 244, 377, 378, 379,
	380, 381, 382, 383, 0, 384, 245, 385, 246, 386,
	0, 387, 388, 389, 390, 391, 392, 247, 393, 394,
	0, 395, 396, 397, 398, 399, 0, 401, 402, 400,
	403, 404, 405, 406, 0, 407, 0, 408, 409, 410,
	411, 248, 412, 0, 617, 417, 418, 419, 420, 421,
	422, 0, 428, 429, 423, 425, 426, 427, 424, 430,
	431, 0, 432, 413, 414, 433, 0, 434, 249, 435,
	436, 0, 446, 437, 438, 439, 415, 440, 444, 445,
	441, 442, 443, 250, 0, 447, 448, 0, 449, 450,
	451, 452, 453, 311, 454, 312, 455, 456, 0, 251,
	252, 253, 457, 0, 0, 458, 459, 254, 255, 0,
	460, 461, 0, 462, 463, 0, 0, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 256, 257,
	499, 474, 473, 258, 0, 0, 0, 0, 475, 476,
	259, 477, 478, 479, 0, 0, 260, 261, 262, 263,
	0, 264, 0, 0, 0, 0, 216, 0, 1565, 0,
	0, 265, 266, 267, 217, 218, 268, 219, 269, 270,
	220, 0, 271, 272, 273, 274, 275, 276, 277, 0,
	0, 278, 221, 222, 223, 0, 279, 224, 0, 0,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 288,
	285, 0, 289, 0, 290, 291, 0, 0, 292, 293,
	0, 0, 0, 0, 0, 0, 0, 294, 295, 502,
	296, 297, 298, 225, 226, 0, 299, 0, 300, 0,
	301, 0, 0, 302, 303, 0, 304, 305, 0, 306,
	0, 227, 307, 308, 310, 313, 309, 314, 315, 228,
	229, 0, 0, 0, 0, 0, 0, 0, 316, 317,
	318, 230, 319, 320, 0, 321, 0, 322, 0, 0,
	0, 323, 0, 324, 231, 0, 232, 0, 325, 326,
	327, 328, 329, 330, 233, 234, 235, 0, 0, 239,
	332, 0, 0, 0, 0, 331, 333, 340, 0, 0,
	334, 236, 336, 335, 337, 338, 339, 237, 0, 238,
	0, 341, 0, 0, 342, 343, 344, 0, 345, 346,
	0, 0, 347, 348, 349, 0, 351, 350, 0, 352,
	240, 0, 353, 354, 0, 0, 355, 356, 0, 0,
	357, 0, 358, 0, 0, 359, 360, 362, 363, 361,
	0, 364, 365, 367, 366, 0, 0, 0, 0, 241,
	368, 242, 369, 370, 0, 371, 372, 0, 0, 373,
	374, 0, 0, 375, 243, 0, 376, 0, 244, 377,
	378, 379, 380, 381, 382, 383, 0, 384, 245, 385,
	246, 386, 0, 387, 388, 389, 390, 391, 392, 247,
	393, 394, 0, 395, 396, 397, 398, 399, 0, 401,
	402, 400, 403, 404, 405, 406, 0, 407, 0, 408,
	409, 410, 411, 248, 412, 0, 416, 417, 418, 419,
	420, 421, 422, 0, 428, 429, 423, 425, 426, 427,
	424, 430, 431, 0, 0, 413, 414, 433, 0, 434,
	249, 435, 436, 0, 446, 437, 438, 439, 415, 440,
	444, 445, 441, 442, 443, 250, 0, 447, 448, 0,
	449, 450, 451, 452, 453, 311, 454, 312, 455, 456,
	0, 251, 252, 253, 457, 0, 0, 458, 459, 254,
	255, 0, 460, 461, 0, 462, 463, 0, 0, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	256, 257, 499, 474, 473, 258, 0, 0, 0, 0,
	475, 476, 259, 477, 478, 479, 0, 0, 260, 261,
	262, 263, 0, 264, 0, 0, 0, 0, 216, 0,
	0, 0, 0, 265, 266, 267, 217, 218, 268, 219,
	269, 270, 220, 0, 271, 272, 273, 274, 275, 276,
	277, 0, 0, 278, 221, 222, 223, 0, 279, 224,
	0, 0, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 288, 285, 0, 289, 0, 290, 291, 0, 0,
	292, 293, 0, 0, 0, 0, 0, 0, 0, 294,
	295, 502, 296, 297, 298, 225, 226, 0, 299, 0,
	300, 0, 301, 0, 0, 302, 303, 0, 304, 305,
	0, 306, 0, 227, 307, 308, 310, 313, 309, 314,
	315, 228, 229, 0, 0, 0, 0, 0, 0, 0,
	316, 317, 318, 230, 319, 320, 0, 321, 0, 322,
	0, 0, 0, 323, 0, 324, 231, 0, 232, 0,
	325, 326, 327, 328, 329, 330, 1556, 234, 235, 0,
	0, 239, 332, 0, 0, 0, 0, 331, 333, 340,
	0, 0, 334, 236, 336, 335, 337, 338, 339, 237,
	0, 238, 0, 341, 0, 0, 342, 343, 344, 0,
	345, 346, 0, 0, 347, 348, 349, 0, 351, 350,
	0, 352, 240, 0, 353, 354, 0, 0, 355, 356,
	0, 0, 357, 0, 358, 0, 0, 359, 360, 362,
	363, 361, 0, 364, 365, 367, 366, 0, 0, 0,
	0, 241, 368, 242, 369, 370, 0, 371, 372, 0,
	0, 373, 374, 0, 0, 375, 243, 0, 376, 0,
	244, 377, 378, 379, 380, 381, 382, 383, 0, 384,
	245, 385, 246, 386, 0, 387, 388, 389, 390, 391,
	392, 247, 393, 394, 0, 395, 396, 397, 398, 399,
	0, 401, 402, 400, 403, 404, 405, 406, 0, 407,
	0, 408, 409, 410, 411, 248, 412, 0, 416, 417,
	418, 419, 420, 421, 422, 0, 428, 429, 423, 425,
	426, 427, 424, 430, 431, 0, 432, 413, 414, 433,
	0, 434, 249, 435, 436, 0, 446, 437, 438, 439,
	415, 440, 444, 445, 441, 442, 443, 250, 0, 447,
	448, 0, 449, 450, 451, 452, 453, 311, 454, 312,
	455, 456, 0, 251, 252, 253, 457, 0, 0, 458,
	459, 254, 255, 0, 460, 461, 0, 462, 463, 0,
	0, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 256, 257, 499, 474, 473, 258, 0, 0,
	0, 0, 475, 476, 259, 477, 478, 479, 0, 0,
	260, 261, 262, 263, 0, 264, 0, 0, 0, 0,
	216, 0, 0, 0, 0, 265, 266, 267, 217, 218,
	268, 219, 269, 270, 220, 0, 271, 272, 273, 274,
	275, 276, 277, 0, 0, 278, 221, 222, 223, 0,
	279, 224, 0, 0, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 288, 285, 0, 289, 0, 290, 291,
	0, 0, 292, 293, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 502, 296, 297, 298, 225, 226, 0,
	299, 0, 300, 0, 301, 0, 0, 302, 303, 0,
	304, 305, 0, 306, 0, 227, 307, 308, 310, 313,
	309, 314, 315, 228, 229, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 318, 230, 319, 320, 0, 321,
	0, 322, 0, 0, 0, 323, 0, 324, 231, 0,
	232, 0, 325, 326, 327, 328, 329, 330, 233, 234,
	235, 0, 0, 239, 332, 0, 0, 0, 0, 331,
	333, 340, 0, 0, 334, 236, 336, 335, 337, 338,
	339, 237, 0, 238, 0, 341, 0, 0, 342, 343,
	344, 0, 345, 346, 0, 0, 347, 348, 349, 0,
	351, 350, 0, 352, 240, 0, 353, 354, 0, 0,
	355, 356, 0, 0, 357, 0, 358, 0, 0, 359,
	360, 362, 363, 361, 0, 364, 365, 367, 366, 0,
	0, 0, 0, 241, 368, 242, 369, 370, 0, 371,
	372, 0, 0, 373, 374, 0, 0, 375, 243, 0,
	376, 0, 244, 377, 378, 379, 380, 381, 382, 383,
	0, 384, 245, 385, 246, 386, 0, 387, 388, 389,
	390, 391, 392, 247, 902, 394, 0, 395, 396, 397,
	398, 399, 0, 401, 402, 400, 403, 404, 405, 406,
	0, 407, 0, 408, 409, 410, 411, 248, 412, 0,
	416, 417, 418, 419, 420, 421, 422, 0, 428, 429,
	423, 425, 426, 427, 424, 430, 431, 0, 432, 413,
	414, 433, 0, 434, 249, 435, 436, 0, 446, 437,
	438, 439, 415, 440, 444, 445, 441, 442, 443, 250,
	0, 447, 448, 0, 449, 450, 451, 452, 453, 311,
	454, 312, 455, 456, 0, 251, 252, 253, 457, 0,
	0, 458, 459, 254, 255, 0, 460, 461, 0, 462,
	463, 0, 0, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 256, 257, 499, 474, 473, 258,
	0, 0, 0, 0, 475, 476, 259, 477, 478, 479,
	0, 0, 260, 261, 262, 263, 0, 264, 0, 0,
	0, 0, 216, 0, 0, 0, 0, 265, 266, 267,
	217, 218, 268, 219, 269, 270, 220, 0, 271, 272,
	273, 274, 275, 276, 277, 0, 0, 278, 221, 222,
	223, 0, 279, 224, 0, 0, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 288, 285, 0, 289, 0,
	290, 291, 0, 0, 292, 293, 0, 0, 0, 0,
	0, 0, 0, 294, 295, 502, 296, 297, 298, 225,
	226, 0, 299, 0, 300, 0, 301, 0, 0, 302,
	303, 0, 304, 305, 0, 306, 0, 227, 307, 308,
	310, 313, 309, 314, 315, 228, 229, 0, 0, 0,
	0, 0, 0, 0, 316, 317, 318, 230, 319, 320,
	0, 321, 0, 322, 0, 0, 0, 323, 0, 324,
	231, 0, 232, 0, 325, 326, 327, 328, 329, 330,
	233, 234, 235, 0, 0, 239, 332, 0, 0, 0,
	0, 331, 333, 340, 0, 0, 334, 236, 336, 335,
	337, 338, 339, 237, 0, 238, 0, 341, 0, 0,
	342, 343, 344, 0, 345, 346, 0, 0, 347, 348,
	349, 0, 351, 350, 0, 352, 240, 0, 353, 354,
	0, 0, 355, 356, 0, 0, 357, 0, 358, 0,
	0, 359, 360, 362, 363, 361, 0, 364, 365, 367,
	366, 0, 0, 0, 0, 241, 368, 242, 369, 370,
	0, 371, 372, 0, 0, 373, 374, 0, 0, 375,
	243, 0, 376, 0, 244, 377, 378, 379, 0, 381,
	382, 383, 0, 384, 245, 385, 246, 386, 0, 387,
	388, 389, 0, 391, 392, 247, 393, 394, 0, 395,
	396, 397, 398, 399, 0, 401, 402, 400, 403, 404,
	405, 406, 0, 407, 0, 408, 409, 410, 411, 248,
	0, 0, 416, 417, 418, 419, 420, 421, 422, 0,
	428, 429, 423, 425, 426, 427, 424, 430, 431, 0,
	432, 413, 414, 433, 0, 434, 249, 435, 436, 0,
	446, 437, 438, 439, 415, 440, 444, 445, 441, 442,
	443, 250, 0, 447, 448, 0, 449, 450, 451, 452,
	453, 311, 454, 312, 455, 456, 0, 251, 252, 253,
	457, 0, 0, 458, 459, 254, 255, 0, 460, 461,
	0, 462, 463, 0, 0, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 256, 257, 0, 474,
	473, 258, 0, 0, 0, 0, 475, 476, 259, 477,
	478, 479, 1302, 1303, 0, 1335, 1336, 1337, 1345, 1346,
	1347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 0, 0, 1305, 0, 0,
	1351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 0, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 1321,
	0, 0, 0, 1302, 1303, 0, 1335, 1336, 1337, 1345,
	1346, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 1351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1327, 1328, 1329, 1330, 0, 1304, 0, 0, 0, 0,
	1310, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	1321, 0, 0, 0, 1302, 1303, 0, 1335, 1336, 1337,
	1345, 1346, 1347, 1342, 1352, 0, 0, 1332, 1333, 1334,
	0, 0, 1338, 0, 0, 0, 0, 0, 0, 1305,
	0, 0, 1351, 0, 0, 0, 0, 0, 1348, 1349,
	0, 0, 0, 0, 0, 0, 1319, 1320, 0, 0,
	0, 1327, 1328, 1329, 1330, 0, 1304, 0, 0, 0,
	1340, 1310, 0, 0, 1324, 0, 0, 1325, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1350, 1342, 1352, 0, 0, 1332, 1333,
	1334, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1349, 0, 0, 0, 0, 0, 0, 1319, 1320, 0,
	0, 0, 1327, 1328, 1329, 1330, 0, 0, 0, 0,
	0, 1340, 1310, 0, 1331, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 1350, 1342, 1352, 0, 0, 1332,
	1333, 1334, 0, 0, 0, 0, 0, 0, 1339, 0,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	1348, 1349, 0, 0, 0, 0, 0, 0, 1319, 1320,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 1331, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 1350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 1343, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 1316, 1317, 1323, 1322, 1318,
	1344, 0, 1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311,
	1312, 0, 0, 0, 0, 2245, 1331, 0, 0, 2246,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 1302, 1303, 0, 1335,
	1336, 1337, 1345, 1346, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 1343, 0, 0, 0,
	0, 1305, 0, 1341, 1351, 0, 1316, 1317, 1323, 1322,
	1318, 1344, 0, 1315, 1313, 1314, 1306, 1307, 1308, 1309,
	1311, 1312, 0, 0, 0, 0, 0, 0, 1304, 0,
	2766, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 1321, 0, 0, 0, 1302, 1303, 0,
	1335, 1336, 1337, 1345, 1346, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1305, 0, 1341, 1351, 0, 1316, 1317, 1323,
	1322, 1318, 1344, 0, 1315, 1313, 1314, 1306, 1307, 1308,
	1309, 1311, 1312, 0, 1327, 1328, 1329, 1330, 0, 1304,
	0, 2248, 0, 0, 1310, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 1321, 0, 0, 0, 1302, 1303,
	0, 1335, 1336, 1337, 1345, 1346, 1347, 1342, 1352, 0,
	0, 1332, 1333, 1334, 0, 0, 1338, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 1351, 0, 0, 0,
	0, 0, 1348, 1349, 0, 0, 0, 0, 0, 0,
	1319, 1320, 0, 0, 0, 1327, 1328, 1329, 1330, 0,
	1304, 0, 0, 0, 1340, 1310, 0, 0, 1324, 0,
	0, 1325, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1350, 1342, 1352,
	0, 0, 1332, 1333, 1334, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1349, 0, 0, 0, 0, 0,
	0, 1319, 1320, 0, 0, 0, 1327, 1328, 1329, 1330,
	0, 0, 0, 0, 0, 1340, 1310, 0, 1331, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 1350, 1342,
	1352, 0, 0, 1332, 1333, 1334, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 1348, 1349, 0, 0, 0, 0,
	0, 0, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 1331,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 1350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 1343,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 1316,
	1317, 1323, 1322, 1318, 1344, 0, 1315, 1313, 1314, 1306,
	1307, 1308, 1309, 1311, 1312, 0, 0, 0, 0, 0,
	1331, 0, 0, 2247, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	1302, 1303, 0, 1335, 1336, 1337, 1345, 1346, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	1343, 0, 0, 0, 0, 1305, 0, 1341, 1351, 0,
	1316, 1317, 1323, 1322, 1318, 1344, 0, 1315, 1313, 1314,
	1306, 1307, 1308, 1309, 1311, 1312, 0, 0, 0, 0,
	0, 0, 1304, 0, 2244, 0, 0, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 1302, 1303, 0, 1335, 1336, 1337, 1345, 1346, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 0, 0, 1305, 0, 1341, 1351,
	0, 1316, 1317, 1323, 1322, 1318, 1344, 0, 1315, 1313,
	1314, 1306, 1307, 1308, 1309, 1311, 1312, 0, 1327, 1328,
	1329, 1330, 0, 1304, 0, 2243, 0, 0, 1310, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 1321, 0,
	0, 0, 1302, 1303, 0, 1335, 1336, 1337, 1345, 1346,
	1347, 1342, 1352, 0, 0, 1332, 1333, 1334, 0, 0,
	1338, 0, 0, 0, 0, 0, 0, 1305, 0, 0,
	1351, 0, 0, 0, 0, 0, 1348, 1349, 0, 0,
	0, 0, 0, 0, 1319, 1320, 0, 0, 0, 1327,
	1328, 1329, 1330, 0, 1304, 0, 0, 0, 1340, 1310,
	0, 0, 1324, 0, 0, 1325, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1350, 1342, 1352, 0, 0, 1332, 1333, 1334, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 1349, 0,
	0, 0, 0, 0, 0, 1319, 1320, 0, 0, 0,
	1327, 1328, 1329, 1330, 0, 0, 0, 0, 0, 1340,
	1310, 0, 1331, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 1350, 1342, 1352, 0, 0, 1332, 1333, 1334,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 1348, 1349,
	0, 0, 0, 0, 0, 0, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 1331, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 1350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 1316, 1317, 1323, 1322, 1318, 1344, 0,
	1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 0,
	0, 0, 0, 0, 1331, 0, 0, 2242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 1316, 1317, 1323, 1322, 1318, 1344,
	0, 1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312,
	0, 0, 0, 0, 3055, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1302,
	1303, 0, 1335, 1336, 1337, 1345, 1346, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1305, 0, 0, 1351, 0, 0,
	0, 0, 1341, 0, 0, 1316, 1317, 1323, 1322, 1318,
	1344, 0, 1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311,
	1312, 1304, 0, 0, 0, 3051, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	1302, 1303, 0, 1335, 1336, 1337, 1345, 1346, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 0, 0, 0, 0, 1305, 0, 0, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 1328, 1329,
	1330, 0, 1304, 0, 0, 0, 0, 1310, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 1302, 1303, 0, 1335, 1336, 1337, 1345, 1346, 1347,
	1342, 1352, 0, 0, 1332, 1333, 1334, 0, 0, 1338,
	0, 0, 0, 0, 0, 0, 1305, 0, 0, 1351,
	0, 0, 0, 0, 0, 1348, 1349, 0, 0, 0,
	0, 0, 0, 1319, 1320, 0, 0, 0, 1327, 1328,
	1329, 1330, 0, 1304, 0, 0, 0, 1340, 1310, 0,
	0, 1324, 0, 0, 1325, 0, 0, 0, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1350, 1342, 1352, 0, 0, 1332, 1333, 1334, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 1349, 0, 0,
	0, 0, 0, 0, 1319, 1320, 0, 0, 0, 1327,
	1328, 1329, 1330, 0, 0, 0, 0, 0, 1340, 1310,
	0, 1331, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 1350, 1342, 1352, 0, 0, 1332, 1333, 1334, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 1348, 1349, 0,
	0, 0, 0, 0, 0, 1319, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	0, 0, 1331, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 1350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 1316, 1317, 1323, 1322, 1318, 1344, 0, 1315,
	1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 0, 0,
	0, 0, 2993, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 1316, 1317, 1323, 1322, 1318, 1344, 0,
	1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 0,
	0, 0, 0, 2992, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1302, 1303,
	0, 1335, 1336, 1337, 1345, 1346, 1347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 1351, 0, 0, 0,
	0, 1341, 0, 0, 1316, 1317, 1323, 1322, 1318, 1344,
	0, 1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312,
	1304, 0, 0, 0, 2942, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 1302,
	1303, 0, 1335, 1336, 1337, 1345, 1346, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1305, 0, 0, 1351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1327, 1328, 1329, 1330,
	0, 1304, 0, 0, 0, 0, 1310, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	1302, 1303, 0, 1335, 1336, 1337, 1345, 1346, 1347, 1342,
	1352, 0, 0, 1332, 1333, 1334, 0, 0, 1338, 0,
	0, 0, 0, 0, 0, 1305, 0, 0, 1351, 0,
	0, 0, 0, 0, 1348, 1349, 0, 0, 0, 0,
	0, 0, 1319, 1320, 0, 0, 0, 1327, 1328, 1329,
	1330, 0, 1304, 0, 0, 0, 1340, 1310, 0, 0,
	1324, 0, 0, 1325, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1350,
	1342, 1352, 0, 0, 1332, 1333, 1334, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1349, 0, 0, 0,
	0, 0, 0, 1319, 1320, 0, 0, 0, 1327, 1328,
	1329, 1330, 0, 0, 0, 0, 0, 1340, 1310, 0,
	1331, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	1350, 1342, 1352, 0, 0, 1332, 1333, 1334, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 1348, 1349, 0, 0,
	0, 0, 0, 0, 1319, 1320, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 1331, 0, 0, 0, 1325, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 1350, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 1316, 1317, 1323, 1322, 1318, 1344, 0, 1315, 1313,
	1314, 1306, 1307, 1308, 1309, 1311, 1312, 0, 0, 0,
	0, 2903, 1331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 0, 1341,
	0, 0, 1316, 1317, 1323, 1322, 1318, 1344, 0, 1315,
	1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 0, 0,
	0, 0, 2814, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1302, 1303, 0,
	1335, 1336, 1337, 1345, 1346, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1305, 0, 0, 1351, 0, 0, 0, 0,
	1341, 0, 0, 1316, 1317, 1323, 1322, 1318, 1344, 0,
	1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 1304,
	0, 0, 0, 2771, 0, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 1321, 0, 0, 0, 1302, 1303,
	0, 1335, 1336, 1337, 1345, 1346, 1347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 1351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 1328, 1329, 1330, 0,
	1304, 0, 0, 0, 0, 1310, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 1302,
	1303, 0, 1335, 1336, 1337, 1345, 1346, 1347, 1342, 1352,
	0, 0, 1332, 1333, 1334, 0, 0, 1338, 0, 0,
	0, 0, 0, 0, 1305, 0, 0, 1351, 0, 0,
	0, 0, 0, 1348, 1349, 0, 0, 0, 0, 0,
	0, 1319, 1320, 0, 0, 0, 1327, 1328, 1329, 1330,
	0, 1304, 0, 0, 0, 1340, 1310, 0, 0, 1324,
	0, 0, 1325, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1350, 1342,
	1352, 0, 0, 1332, 1333, 1334, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 1349, 0, 0, 0, 0,
	0, 0, 1319, 1320, 0, 0, 0, 1327, 1328, 1329,
	1330, 0, 0, 0, 0, 0, 1340, 1310, 0, 1331,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 1350,
	1342, 1352, 0, 0, 1332, 1333, 1334, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 1343,
	0, 0, 0, 0, 0, 1348, 1349, 0, 0, 0,
	0, 0, 0, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	1331, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	1350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	1316, 1317, 1323, 1322, 1318, 1344, 0, 1315, 1313, 1314,
	1306, 1307, 1308, 1309, 1311, 1312, 0, 0, 0, 0,
	2770, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1343, 0, 0, 0, 0, 0, 0, 1341, 0,
	0, 1316, 1317, 1323, 1322, 1318, 1344, 0, 1315, 1313,
	1314, 1306, 1307, 1308, 1309, 1311, 1312, 0, 0, 0,
	0, 2769, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1302, 1303, 0, 1335,
	1336, 1337, 1345, 1346, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 0, 0, 0,
	0, 1305, 0, 0, 1351, 0, 0, 0, 0, 1341,
	0, 0, 1316, 1317, 1323, 1322, 1318, 1344, 0, 1315,
	1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 1304, 0,
	0, 0, 2737, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 1321, 0, 0, 0, 1302, 1303, 0,
	1335, 1336, 1337, 1345, 1346, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 1305, 0, 0, 1351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 1328, 1329, 1330, 0, 1304,
	0, 0, 0, 0, 1310, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 1321, 0, 0, 0, 1302, 1303,
	0, 1335, 1336, 1337, 1345, 1346, 1347, 1342, 1352, 0,
	0, 1332, 1333, 1334, 0, 0, 1338, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 1351, 0, 0, 0,
	0, 0, 1348, 1349, 0, 0, 0, 0, 0, 0,
	1319, 1320, 0, 0, 0, 1327, 1328, 1329, 1330, 0,
	1304, 0, 0, 0, 1340, 1310, 0, 0, 1324, 0,
	0, 1325, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1350, 1342, 1352,
	0, 0, 1332, 1333, 1334, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1349, 0, 0, 0, 0, 0,
	0, 1319, 1320, 0, 0, 0, 1327, 1328, 1329, 1330,
	0, 0, 0, 0, 0, 1340, 1310, 0, 1331, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 1350, 1342,
	1352, 0, 0, 1332, 1333, 1334, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 1348, 1349, 0, 0, 0, 0,
	0, 0, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 1331,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 1350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 1343,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 1316,
	1317, 1323, 1322, 1318, 1344, 0, 1315, 1313, 1314, 1306,
	1307, 1308, 1309, 1311, 1312, 0, 0, 0, 0, 2558,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	1316, 1317, 1323, 1322, 1318, 1344, 0, 1315, 1313, 1314,
	1306, 1307, 1308, 1309, 1311, 1312, 0, 0, 0, 0,
	2531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1302, 1303, 0, 1335, 1336,
	1337, 1345, 1346, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 0, 0, 0, 0,
	1305, 0, 0, 1351, 0, 0, 0, 0, 1341, 0,
	0, 1316, 1317, 1323, 1322, 1318, 1344, 0, 1315, 1313,
	1314, 1306, 1307, 1308, 1309, 1311, 1312, 1304, 0, 0,
	0, 1839, 0, 0, 0, 1324, 0, 0, 0, 0,
	0, 0, 1321, 0, 0, 0, 1302, 1303, 0, 1335,
	1336, 1337, 1345, 1346, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 0, 0, 0,
	0, 1305, 0, 0, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1327, 1328, 1329, 1330, 0, 1304, 0,
	0, 0, 0, 1310, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1342, 1352, 0, 0,
	1332, 1333, 1334, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 1349, 0, 0, 0, 0, 0, 0, 1319,
	1320, 0, 0, 0, 1327, 1328, 1329, 1330, 0, 0,
	0, 0, 0, 1340, 1310, 3131, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1350, 1342, 1352, 0,
	0, 1332, 1333, 1334, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 1349, 0, 0, 0, 0, 0, 0,
	1319, 1320, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 1331, 0, 0,
	0, 1325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1326, 0, 0, 1350, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 0, 0, 0, 1343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 1302, 1303,
	0, 1335, 1336, 1337, 1345, 1346, 1347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 1343, 0,
	0, 0, 0, 1305, 0, 1341, 1351, 0, 1316, 1317,
	1323, 1322, 1318, 1344, 0, 1315, 1313, 1314, 1306, 1307,
	1308, 1309, 1311, 1312, 0, 0, 2209, 0, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 1302,
	1303, 0, 1335, 1336, 1337, 1345, 1346, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	0, 0, 2182, 0, 1305, 0, 1341, 1351, 0, 1316,
	1317, 1323, 1322, 1318, 1344, 0, 1315, 1313, 1314, 1306,
	1307, 1308, 1309, 1311, 1312, 0, 1327, 1328, 1329, 1330,
	0, 1304, 0, 0, 0, 0, 1310, 0, 2292, 1324,
	0, 2291, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1342,
	1352, 0, 0, 1332, 1333, 1334, 0, 0, 0, 0,
	0, 0, 2183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 1349, 0, 0, 0, 0,
	0, 0, 1319, 1320, 0, 0, 0, 1327, 1328, 1329,
	1330, 0, 0, 0, 0, 0, 1340, 1310, 0, 0,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1350,
	1342, 1352, 0, 0, 1332, 1333, 1334, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1348, 1349, 0, 0, 0,
	0, 0, 0, 1319, 1320, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	1331, 0, 0, 0, 1325, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	1350, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 0, 0, 0,
	1343, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1942, 0, 0, 1326, 0,
	0, 1302, 1303, 0, 1335, 1336, 1337, 1345, 1346, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 1343, 0, 1941, 0, 0, 1305, 0, 1341, 1351,
	0, 1316, 1317, 1323, 1322, 1318, 1344, 0, 1315, 1313,
	1314, 1306, 1307, 1308, 1309, 1311, 1312, 0, 0, 0,
	0, 0, 0, 1304, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 1321, 0,
	0, 0, 1302, 1303, 0, 1335, 1336, 1337, 1345, 1346,
	1347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 0, 0, 0, 0, 1305, 0, 1341,
	1351, 0, 1316, 1317, 1323, 1322, 1318, 1344, 0, 1315,
	1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 0, 1327,
	1328, 1329, 1330, 0, 1304, 0, 0, 0, 0, 1310,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 1321,
	0, 0, 0, 1302, 1303, 0, 1335, 1336, 1337, 1345,
	1346, 1347, 1342, 1352, 0, 0, 1332, 1333, 1334, 0,
	0, 1338, 0, 0, 0, 0, 0, 0, 1305, 0,
	0, 1351, 0, 0, 0, 0, 0, 1348, 1349, 0,
	0, 0, 0, 0, 0, 1319, 1320, 0, 0, 0,
	1327, 1328, 1329, 1330, 0, 1304, 0, 0, 0, 1340,
	1310, 0, 0, 1324, 0, 0, 1325, 0, 0, 0,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1350, 1342, 1352, 0, 0, 1332, 1333, 1334,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1349,
	0, 0, 0, 0, 0, 0, 1319, 1320, 0, 0,
	0, 1327, 1328, 1329, 1330, 0, 0, 0, 0, 0,
	1340, 1310, 0, 1331, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 1350, 1342, 1352, 0, 0, 1332, 1333,
	1334, 0, 0, 0, 0, 0, 0, 1339, 731, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 1348,
	1349, 0, 0, 0, 0, 0, 0, 1319, 1320, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 0, 0, 1331, 0, 0, 0, 1325, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 1350, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1339, 0,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 1316, 1317, 1323, 1322, 1318, 1344,
	0, 1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312,
	0, 0, 0, 0, 0, 1331, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 0, 1302, 1303, 0, 1335,
	1336, 1337, 1345, 1346, 1347, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 1343, 0, 0, 0, 0,
	0, 1305, 1341, 0, 1351, 1316, 1317, 1323, 1322, 1318,
	1344, 0, 1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311,
	1312, 0, 0, 0, 0, 0, 0, 2535, 1304, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 1321, 0, 0, 0, 1302, 1303, 0,
	1335, 1336, 1337, 1345, 1346, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 0, 0, 0, 2297,
	0, 0, 1305, 1341, 0, 1351, 1316, 1317, 1323, 1322,
	1318, 1344, 0, 1315, 1313, 1314, 1306, 1307, 1308, 1309,
	1311, 1312, 0, 0, 1327, 1328, 1329, 1330, 0, 1304,
	0, 0, 0, 0, 1310, 0, 0, 1324, 0, 2302,
	0, 0, 0, 0, 1321, 0, 0, 0, 1302, 1303,
	0, 1335, 1336, 1337, 1345, 1346, 1347, 1342, 1352, 0,
	0, 1332, 1333, 1334, 0, 0, 1338, 0, 0, 0,
	0, 0, 0, 1305, 0, 0, 1351, 0, 0, 0,
	0, 0, 1348, 1349, 0, 0, 0, 0, 0, 0,
	1319, 1320, 0, 0, 0, 1327, 1328, 1329, 1330, 0,
	1304, 0, 0, 0, 1340, 1310, 0, 0, 1324, 0,
	0, 1325, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1350, 1342, 1352,
	0, 0, 1332, 1333, 1334, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1349, 0, 0, 0, 0, 0,
	0, 1319, 1320, 0, 0, 0, 1327, 1328, 1329, 1330,
	0, 0, 0, 0, 0, 1340, 1310, 0, 1331, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 1350, 1342,
	1352, 0, 0, 1332, 1333, 1334, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 1348, 1349, 0, 0, 0, 0,
	0, 0, 1319, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 1331,
	0, 0, 0, 1325, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1326, 0, 0, 1350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 0, 0, 0, 1343,
	0, 0, 0, 0, 0, 0, 1341, 0, 2260, 1316,
	1317, 1323, 1322, 1318, 1344, 0, 1315, 1313, 1314, 1306,
	1307, 1308, 1309, 1311, 1312, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 0, 0,
	1302, 1303, 0, 1335, 1336, 1337, 1345, 1346, 1347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	1343, 0, 2241, 0, 0, 1305, 0, 1341, 1351, 0,
	1316, 1317, 1323, 1322, 1318, 1344, 0, 1315, 1313, 1314,
	1306, 1307, 1308, 1309, 1311, 1312, 0, 0, 0, 0,
	0, 0, 1304, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 1302, 1303, 0, 1335, 1336, 1337, 1345, 1346, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 0, 0, 0, 0, 1305, 0, 1341, 1351,
	0, 1316, 1317, 1323, 1322, 1318, 1344, 0, 1315, 1313,
	1314, 1306, 1307, 1308, 1309, 1311, 1312, 0, 1327, 1328,
	1329, 1330, 0, 1304, 0, 0, 0, 0, 1310, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 1321, 0,
	0, 0, 1302, 1303, 0, 1335, 1336, 1337, 1345, 1346,
	1347, 1342, 1352, 0, 0, 1332, 1333, 1334, 0, 0,
	1338, 0, 0, 0, 0, 0, 0, 1305, 0, 0,
	1351, 0, 0, 0, 0, 0, 1348, 1349, 0, 0,
	0, 0, 0, 0, 1319, 1320, 0, 0, 0, 1327,
	1328, 1329, 1330, 0, 1304, 0, 0, 0, 1340, 1310,
	0, 0, 1324, 0, 0, 1325, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1350, 1342, 1352, 0, 0, 1332, 1333, 1334, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 1349, 0,
	0, 0, 0, 0, 0, 1319, 1320, 0, 0, 0,
	1327, 1328, 1329, 1330, 0, 0, 0, 0, 0, 1340,
	1310, 0, 1331, 0, 0, 0, 1325, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 1350, 1342, 1352, 0, 0, 1332, 1333, 1334,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 1348, 1349,
	0, 0, 0, 0, 0, 0, 1319, 1320, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 1331, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 1350, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 1316, 1317, 1323, 1322, 1318, 1344, 0,
	1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312, 0,
	0, 0, 0, 0, 1331, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 1302, 1303, 0, 1335, 1336, 1337,
	1345, 1346, 1347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1343, 0, 0, 0, 0, 1305,
	0, 1341, 1351, 0, 1316, 1317, 1323, 1322, 1318, 1344,
	0, 1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311, 1312,
	0, 0, 0, 0, 0, 0, 1304, 0, 0, 0,
	0, 0, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 1316, 1317, 1323, 1322, 1318,
	1344, 0, 1315, 1313, 1314, 1306, 1307, 1308, 1309, 1311,
	1312, 0, 1327, 1328, 1329, 1330, 0, 0, 0, 0,
	0, 0, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1619, 0, 0,
	0, 0, 0, 0, 0, 1342, 1352, 0, 0, 1332,
	1333, 1334, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1349, 1630, 1615, 1620, 1603, 1640, 1639, 1319, 1320,
	0, 1605, 1604, 0, 0, 0, 0, 0, 0, 1649,
	1648, 0, 1340, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1350, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1641, 0,
	1637, 1636, 0, 0, 0, 0, 0, 0, 0, 0,
	1635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1331, 0, 1634, 1632,
	1633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1614, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 1623, 1618,
	1624, 1625, 1626, 1627, 1628, 0, 1622, 0, 0, 0,
	0, 0, 0, 0, 0, 1646, 1647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1607, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1638, 0,
	0, 0, 1616, 1617, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1619, 1341, 0, 0, 1316, 1317, 1323,
	1322, 1318, 1344, 0, 1315, 1313, 1314, 1306, 1307, 1308,
	1309, 1311, 1312, 0, 0, 0, 1631, 0, 0, 0,
	1760, 1758, 1759, 1762, 1761, 0, 0, 0, 1630, 1615,
	1620, 1603, 1640, 1639, 0, 0, 0, 1605, 1604, 0,
	0, 0, 0, 0, 0, 1649, 1648, 0, 0, 0,
	0, 0, 0, 1608, 1609, 1610, 1611, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1629, 1612, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1651, 0,
	0, 0, 0, 0, 1641, 0, 1637, 1636, 0, 0,
	0, 0, 0, 0, 0, 1606, 1635, 0, 1642, 1643,
	1644, 1645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1613, 1634, 1632, 1633, 0, 1650, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1614, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1623, 1618, 1624, 1625, 1626, 1627,
	1628, 0, 1622, 0, 0, 0, 0, 0, 0, 0,
	0, 1646, 1647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1607, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1638, 0, 0, 0, 1616, 1617,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1631, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1608,
	1609, 1610, 1611, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1629, 1612, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1651, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1606, 0, 0, 1642, 1643, 1644, 1645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1613,
	0, 0, 0, 0, 1650,
}
var sqlPact = [...]int{

	324, -1000, 3, -1000, -1000, -1000, 267, -1000, -1000, -1000,
	-1000, 266, 263, 260, -1000, 253, 252, 249, 247, 246,
	241, 240, 239, 238, 237, 235, 230, -1000, -1000, 228,
	-1000, -1000, -1000, -1000, 224, 222, 221, -1000, 218, 1384,
	31080, 215, 212, 209, 2085, 49246, 1616, 207, 205, -1000,
	202, 1483, 36476, 1229, 1477, -1000, 200, 192, 1474, 48864,
	186, 2010, 33766, 36088, 2045, 48476, 30692, 2041, 33378, 48088,
	-1000, -1000, 1102, -1000, -1000, 47700, 191, 182, 179, 177,
	173, -1000, 169, 47312, 163, 161, 155, 152, 138, 136,
	134, 132, -1000, 130, 126, 123, 121, 111, 108, 107,
	105, 103, 98, 97, 91, 78, 76, 73, 72, -1000,
	6370, 71, 70, 69, -1000, 1408, 67, 66, 65, 64,
	63, -1000, -1000, 62, 61, 59, 58, 57, 55, -1000,
	201, 53, 52, 51, 49, 43, -1000, 1194, 974, 2013,
	13346, 1291, 1289, 1277, 1267, 1268, 804, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 51920, 49246, 42,
	-136, 39, -1000, 2460, 841, 23260, 324, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35700,
	35312, 34924, 29140, 46924, 46536, 10453, 10453, 1006, -1000, -1000,
	-1000, -1000, -1000, -1, 32226, 49246, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 302, -1000, -1000, -1000, -1000, -1000, -1000, 19652, 844,
	19227, 296, 18802, 257, 423, -1000, -1000, -1000, 292, -1000,
	-1000, -1000, -1000, 1331, -1000, -1000, -1000, -1000, 46148, 45760,
	2101, 45372, 28742, 28344, 44984, 1818, 1812, 44596, -1000, -1000,
	44208, -1000, -1000, 2335, 1994, 1965, 34536, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 43826, 43438, 43050, 42662,
	42274, 27946, 27548, 626, -1000, -1000, -1000, -1000, 24812, 625,
	-1000, -1000, -1000, -1000, -1000, 38, -1000, 37, 36, -1000,
	35, 34, 33, 32, 31, 30, 27, 24, -1000, 23,
	22, -1000, 14, 13, -1000, 12, 9, 1501, 1460, 1441,
	41886, 1101, 49246, -1000, 1615, -14, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 624, 49246, -1000, -1000, 20063, 174, -1000,
	622, -1000, 2059, -1000, 20063, 174, -1000, 1613, 135, 1569,
	-1000, -1000, -1000, 1440, 1074, -1000, -1000, 49246, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2668, 1470, 621, 41498, -1000,
	1926, -1000, 765, 14168, -1000, 948, -1000, 14168, 291, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1892, 1223, 2615, 27150, 1446,
	2478, 2331, 2656, 1813, 2310, 2280, 2231, 2226, 2212, 2655,
	1241, 2653, 1159, 2651, 2193, 2096, 2642, 1479, 893, 2650,
	2649, 2074, 2056, -1000, -1000, -1000, -1000, 1095, -1000, -1000,
	-1000, -1000, -1000, -1000, 38012, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1194, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1737, 2440, 2440,
	2440, 2502, 409, 393, -1000, 201, -1000, 1442, -1000, 1445,
	-1000, -1000, -1000, 57721, -1000, -1000, 20063, 20063, 20063, 20063,
	20063, 1455, -1000, -1000, -1000, 655, -1000, 618, 548, 11687,
	-1000, -1000, 2581, -1000, -1000, -1000, 411, 20063, -1000, 290,
	-1000, -1000, -1000, -1000, 617, 2633, -1000, 825, -1000, -1000,
	-1000, 732, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2100,
	611, 609, -1000, 606, 605, 604, -1000, -1000, -1000, 603,
	602, 601, 600, 599, 596, 595, 594, -1000, -1000, -1000,
	1395, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 815, -1000, 815, 815, 552, 552, 593, 592,
	553, 585, -1000, -1000, 584, 552, 582, 578, -1000, -1000,
	577, 711, -1000, 707, 576, 574, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1614, -1000, -1000, 1614, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 995, 50774, -1000, -1000,
	-1000, -4, 49246, -1000, 423, -4, -1000, -1000, 573, -1000,
	14579, 14579, 14579, -1000, -1000, 1612, 20063, -1000, 2306, -1000,
	540, -232, 694, 24424, -1000, 22484, 694, 665, 26752, -1000,
	2054, -1000, -1000, 570, 289, -1000, -1000, -1000, -1000, -1000,
	-1000, 1723, 2344, 1001, -1000, 1332, 2343, -1000, 2559, 2342,
	1261, -1000, -1000, 790, 2341, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1521, -1000, -1000, 1419, 2337,
	-207, 2135, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1643, -1000,
	29536, 32226, -6, -1000, -1000, -90, -1000, 10057, 57721, -1000,
	-1000, -1000, 57721, 739, -1000, -1000, 2334, -1000, 57721, 727,
	-1000, -1000, 2332, -1000, 2030, 49246, 10453, 49246, 49246, -1000,
	568, 1690, 1599, -1000, -1000, 31844, 2559, 1689, -1000, -1000,
	774, 1688, -1000, -1000, 1678, -1000, 423, -1000, -1000, 41110,
	51538, 774, 1677, -1000, -1000, -1000, 38012, -1000, 49246, -1000,
	49246, -1000, 1117, -1000, 51156, 142, 2329, -1000, -1000, 142,
	2328, -1000, 142, 2327, -1000, 139, 2326, -1000, -1000, 1547,
	2324, -1000, -108, 2317, -1000, -1000, -108, 2315, -1000, -1000,
	20063, -11, -1000, -1000, -1000, 841, 30304, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 40722, 29536, 31844, 49246, 34148, 29536,
	643, 57721, -1000, 2547, 58479, 29536, 57721, -1000, 31844, 49246,
	2089, -1000, 40334, 39946, 2447, 764, -1000, -1000, 49246, -1000,
	20063, -1000, 2544, 1856, -27, -1000, -1000, -1000, -1000, -1000,
	1725, 1748, 874, 1005, -1000, 14168, 14168, 2400, -1000, 288,
	10453, -1000, -1000, 1056, 1755, -1000, -1000, -1000, -1000, 29536,
	29536, -1000, 39558, -1000, -1000, -1000, 1430, 49246, -1000, -1000,
	2084, -1000, 31462, 49246, -1000, 49246, -1000, 49246, -1000, 49246,
	-1000, 49246, -1000, -1000, -1000, -1000, -1000, 2186, 1296, 1287,
	-1000, 49246, -1000, 49246, -1000, -1000, -1000, 1722, -1000, -1000,
	-1000, 39176, 38788, 38400, -1000, -1000, 1246, -1000, 1055, -1000,
	-1000, 165, -1000, -1000, 1737, -1000, 1633, 1799, 18377, 1797,
	20063, 201, -1000, -1000, 201, 201, 12921, -1000, -1000, -1000,
	49246, -1000, 58233, 58479, 10453, 1029, 20063, 20063, 20063, 20063,
	20063, 20063, 20063, 20063, 20063, 20063, 20063, 20063, 20063, 20063,
	20063, 20063, 20063, 20063, 20063, 20063, 20063, 20063, 20063, 20063,
	20063, 20063, 20063, 20063, 20063, 20063, 20063, 20063, 20063, 20063,
	20063, 1787, 20063, 985, 20063, 20063, 20063, 20063, 1507, -1000,
	-1000, 1404, 463, 1519, -1000, 2601, 2601, 2601, 58084, 58084,
	531, 655, -1000, 20063, -1000, 174, 20063, 393, 55698, 1669,
	-2, 11276, -1000, -1000, -1000, -1000, 17952, 807, 57721, 9661,
	10851, -1000, 2620, 1343, 2020, 1891, 563, 722, 720, 719,
	718, 717, 20063, 20063, 20063, 20063, 20063, 20063, 20063, 20063,
	-1000, -1000, -1000, -1000, -1000, -1000, 2581, -1000, 17541, 17116,
	-1000, 2614, 16691, 16266, -1000, 15841, 21296, 15416, 1024, 1018,
	1015, 1014, 20063, 12098, -1000, -27, -1000, 50774, -1000, 49246,
	-4, 2542, 20063, 125, -1000, 56781, -1000, 125, 125, 562,
	-18, 57721, 1764, 1763, 23648, 1686, 1514, 1514, 1514, -1000,
	561, 653, 694, 7266, 36858, 1552, 694, 694, 166, 310,
	379, 22096, 2306, 36858, -1000, -1000, 49246, 556, 10851, 10453,
	-16, 1310, -1000, 32990, 2439, 2425, 2420, 1116, -1000, 1082,
	2500, 38012, 2518, 580, 2444, 2029, -1000, -1000, 983, 38012,
	2559, -1000, 58479, -1000, 1832, 2499, 1086, 1137, 1086, 1086,
	1075, 38012, 980, 1416, 29536, 2442, 979, -21, 2517, 498,
	2435, 2001, 978, -1000, -1000, 49246, 10453, 2431, 1048, 692,
	-6, 32226, 49246, 285, -1000, 20063, 174, 20063, 174, 1071,
	-26, 283, 1774, 1770, 166, -1000, 32608, 2541, 2313, 49246,
	1779, -1000, 2559, 2303, -1000, 1415, -1000, 2291, 2269, 2538,
	1595, 1676, -1000, -1000, -1000, 1593, 1675, 987, 2227, 800,
	839, 2535, 839, 25976, -1000, 49246, -1000, 49246, -1000, -1000,
	49246, -1000, 49246, -1000, 49246, -1000, 49246, 49246, -1000, 49246,
	29536, 29536, 29536, -28, 648, 30304, -31, 772, 977, -34,
	-1000, 378, 49246, 845, 32608, 213, -38, -1000, 1045, -1000,
	-1000, -1000, 532, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	815, 555, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 553, 1395, 552, 552, 552, -1000,
	-1000, -1000, 711, -1000, 707, -1000, -1000, -1000, 815, 815,
	-1000, -1000, -184, 1981, -90, 34148, 692, -1000, 692, -1000,
	2081, -1000, 2449, 742, -40, 905, -27, -1000, 1614, -1000,
	1161, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2623, -1000, 2608, -1000, -1000, 2613,
	-7, -1000, -7, -1000, 10453, -1000, 49246, 2070, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49246, -1000, 49246, -1000,
	-1000, -1000, -1000, -1000, -1000, 1156, -1000, 2068, -1000, 2066,
	-1000, 280, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	49246, 49246, 49246, -1000, 38012, -1000, -1000, -1000, -1000, 57721,
	-1000, 426, -1000, -1000, 57721, 1206, 1784, -1000, 1784, -8,
	-1000, 56489, 1747, 49246, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 760, 737, 737, 976,
	976, 976, 976, 2561, 641, 870, 1497, 4279, 4279, 4279,
	4279, 4279, 4279, 4279, 4279, 407, 543, 543, 407, 407,
	407, 407, 407, 543, 543, 543, 4279, 4279, 4279, 58084,
	57792, 5379, 20063, 20063, 973, 1383, 463, 4673, 20063, 5613,
	5613, 5613, 5613, -1000, 1950, -1000, -1000, -1000, -1000, 1974,
	550, 21296, 21296, -1000, -1000, -1000, 11687, 20063, -1000, -1000,
	-1000, -1000, 548, 20063, -1000, 56055, -241, 377, -186, 278,
	49246, 20063, 650, -39, -1000, 1093, -1000, 20063, 274, -1000,
	-1000, 16, 20063, 20063, 20063, 374, -1000, 370, -1000, 968,
	-1000, 967, 955, 954, -1000, 546, 1472, 545, 530, 20063,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	57650, 53560, 53268, 53197, 52692, 53126, 52834, -43, -46, 369,
	-1000, 1970, -186, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	368, -1000, 367, -49, -1000, -51, -1000, 366, -1000, 57358,
	-186, 365, 5469, -1000, 21296, 21296, 21296, -1000, 362, -1000,
	56418, -1000, 751, 725, 724, 716, 57287, 14991, 14991, 14991,
	361, 57216, 20063, -186, -1000, -1000, 528, -56, 800, 14579,
	22872, 10453, -1000, 800, 800, 20063, -1000, 20063, 23648, 23648,
	2093, 1761, 23648, -1000, -1000, -1000, -1000, 36858, 619, 694,
	36858, -1000, 2581, 1757, -1000, -1000, -1000, 49246, 423, -1000,
	36858, 36858, 10453, 694, -1000, 359, 25200, 16, 270, 1583,
	49246, 49246, 49246, -1000, -1000, 1674, 50392, 1673, 58479, 49246,
	-1000, -1000, 527, 526, 1745, 1742, 49246, 49246, 50010, 49628,
	49246, 1409, 20063, 1619, 1517, 174, -1000, 174, 715, 525,
	49246, 1243, -1000, -1000, -1000, -1000, -1000, 49246, -1000, -1000,
	2611, -1000, 1086, -1000, -1000, -1000, 1086, 2559, 1227, 49246,
	29536, 788, 710, 49246, 1433, 174, -1000, 174, 708, 523,
	10453, 1350, -1000, 701, 49246, 1837, -1000, 1639, -1000, -1000,
	9265, 57721, -1000, 57721, -1000, -1000, -1000, 10453, 1879, 1879,
	358, -13, -1000, -1000, -1000, -1000, -1000, -1000, 1802, 49246,
	612, 49246, 174, 49246, 99, 772, 29536, 49246, 29536, 29536,
	29536, 174, 49246, 2194, 49246, 2190, 2314, 472, 49246, 1559,
	20063, 1306, -1000, 25588, 821, 49246, 1201, 92, -1000, -1000,
	-1000, 26, 49246, -1000, -1000, 142, 142, 142, -1000, 139,
	1547, -1000, -108, -108, -1000, -1000, -1000, 648, 1964, 37630,
	49246, 2560, 772, 522, 29536, -57, -1000, 852, 934, 933,
	-1000, 58479, -1000, 649, 939, -1000, 2592, 521, 2581, -1000,
	772, 49246, 84, -1000, 777, 1592, -1000, 14168, 14168, -1000,
	1614, -1000, -1000, 1209, -1000, 1372, -1000, -1000, -1000, -1000,
	14168, -1000, -1000, 1047, -90, -90, -1000, 1154, 1136, 49246,
	-1000, -1000, -1000, -1000, 1206, -1000, 20063, -1000, -1000, -1000,
	12921, -1000, -1000, -1000, 49246, -216, 20063, 20063, 4196, 4086,
	20063, 21296, 21296, -1000, 20063, 3568, -1000, -1000, -1000, -1000,
	-1000, 1958, 520, 20063, 58479, 4246, 3977, -58, 407, -1000,
	20063, -1000, 8869, -69, 55627, -1000, -1000, 644, 2349, -1000,
	20063, 56923, 8473, 355, 13757, -1000, 56852, -48, -48, -1000,
	2603, 1701, 1469, 1341, 1178, 2585, -1000, 26364, 805, 1559,
	55556, 58233, 58479, 20063, 20063, -1000, 20063, 20063, 20063, -1000,
	-1000, 2581, -1000, 20063, -1000, -1000, -1000, -1000, -1000, 1948,
	20063, -1000, 58233, 58479, 21296, 21296, 21296, 21296, 21296, 21296,
	21296, 21296, 21296, 21296, 21296, 21296, 21296, 21296, 21296, 21296,
	21296, 21296, 21296, 1778, 21296, 2595, 2595, 2595, -1000, 2065,
	1948, 20063, 20063, -1000, -1000, -1000, -1000, 58479, 353, 352,
	351, -1000, 20063, -186, 213, -1000, 1889, -1000, -151, -1000,
	2306, -1000, -1000, 1889, 1889, -70, 57721, -1000, 2093, -1000,
	517, 20063, 23648, -1000, 646, -1000, -72, -1000, 36858, -1000,
	645, -238, -1000, 687, -1000, 423, -1000, -1000, -1000, 269,
	36858, -1000, -75, -1000, 2532, 350, 10453, -1000, -1000, 953,
	950, -1000, 2180, -1000, 1672, -1000, 828, -1000, 1245, 20063,
	24036, 509, 504, 1323, -1000, 2149, 1547, 2148, 1547, -1000,
	-1000, 723, -1000, 57721, 503, 497, -1000, -16, 1302, -1000,
	-1000, 20063, 20063, -1000, 947, -1000, -1000, -1000, 2559, 944,
	-1000, -1000, 1403, 20063, -1000, -1000, -1000, -1000, 20063, 20063,
	-1000, -21, 941, 20063, 2133, 772, 1947, 1058, -1000, -1000,
	-1000, -1000, -1000, -1000, 1806, 32608, 49246, 492, 49246, 485,
	-1000, -1000, 482, 49246, -1000, -1000, 2559, -1000, 774, -1000,
	-1000, 838, 10453, 480, 10453, 1729, 472, 29922, -1000, 774,
	1799, -1000, 57721, -1000, 1201, 12509, 2422, -77, -1000, 214,
	-1000, -1000, -1000, 800, 25976, 23648, 20063, 2646, -80, -1000,
	-1000, -1000, -1000, -1000, -1000, 174, -24, 479, -1000, 679,
	678, -90, 1567, -1000, 29536, 49246, 49246, -1000, 2583, -1000,
	642, 347, 2581, 345, -1000, -90, 49246, -1000, 1549, 10453,
	49246, 49246, 10453, 49246, -1000, -1000, -27, -1000, -1000, -1000,
	-1000, 49246, -1000, -1000, -1000, 1571, 55199, -1000, 2433, 10453,
	2575, 5613, 20063, 20063, 3091, 3942, 3485, 5613, 20063, 20063,
	58479, 5304, -85, 20063, 20063, -1000, 630, 57721, -1000, -1000,
	-1000, -1000, -1000, -1000, 57721, 20063, 175, -1000, 2577, 20063,
	340, 339, 337, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 336, -1000, -1000, 52302, -1000, 20063, 335, -1000, 334,
	330, 52763, 6740, 55128, 55057, 54700, 327, 57721, 2065, 57721,
	-1000, -1000, 756, 756, 1068, 1068, 1068, 1068, 2595, 397,
	495, 907, 455, 455, 455, 721, 842, 842, 455, 455,
	455, 1939, 1728, 475, 5120, -1000, -1000, 57721, 57721, 322,
	-1000, -1000, -1000, -186, 320, 1882, 2497, -1000, 23648, 1882,
	1882, -1000, -1000, 49246, 57721, -1000, -232, -1000, 2581, -1000,
	-1000, 1757, -1000, 7676, -1000, 10453, -1000, -1000, 25200, -1000,
	474, -1000, 100, 49246, 49246, 49246, 2144, -1000, 2311, -1000,
	54629, -87, -1000, 2475, 2475, 20063, 166, 24036, 49246, -1000,
	1429, 1835, 872, 49246, -1000, 49246, -1000, -1000, 49246, 49246,
	49246, 49246, 49246, 57721, -88, 49246, 49246, 29536, 57721, 57721,
	-96, 10453, 57721, 2426, -1000, 29536, 1009, 1433, 1854, -1000,
	473, 24036, 470, 49246, 32608, 2527, -1000, -1000, -1000, 468,
	2022, 1586, 24036, 1582, 1736, 472, 29922, -1000, 987, 1201,
	-1000, -1000, -29, -1000, 500, 174, 49246, 2644, 1559, -1000,
	-41, 57721, -1000, 676, -1000, 37244, 37244, 29536, 29536, -1000,
	315, 2378, 2377, 629, -1000, -1000, 311, -1000, -90, 1609,
	-1000, -1000, 1443, 1638, -1000, -1000, -1000, -1000, -1000, 2433,
	5613, 5613, 20063, 20063, 20063, 5613, 5304, -98, -1000, 5613,
	5613, -1000, 57721, 8077, -1000, 56852, -1000, -1000, -1000, -1000,
	1448, -1000, 54558, -1000, -1000, -1000, 20063, 20063, -1000, -1000,
	-1000, -1000, -1000, -1000, 21296, 1909, 467, 58479, -1000, -1000,
	793, 20063, 20063, 2306, 793, 793, -99, 694, -1000, -1000,
	-1000, 2581, 100, -1000, 2638, 10453, -1000, -1000, -1000, 49246,
	-1000, 49246, -1000, 10453, 49246, 1913, 1663, -1000, -1000, 1741,
	466, 21296, 49246, 734, -1000, 1328, 24036, 2433, 10453, 2433,
	54201, -101, -107, 1660, -1000, -1000, 1618, 20063, -1000, 58479,
	1547, 1547, -109, -110, -1000, 940, 938, 935, -1000, -1000,
	-1000, 917, -1000, 700, -108, 20063, -1000, -1000, 1444, 24036,
	-112, 24036, -115, 304, 174, 24036, -1000, -1000, 49246, -117,
	49246, -1000, 472, 29922, -1000, 2314, -1000, 2357, 49246, 2411,
	-1000, -1000, -1000, 1799, 463, -1000, -118, -1000, -1000, 772,
	462, 457, -1000, -1000, -128, -1000, 706, 705, -1000, -1000,
	-1000, 10453, 1046, -1000, 5613, 5613, 5613, -1000, -1000, -1000,
	137, 1559, 2494, -1000, 54130, 54059, 3728, 21296, 58479, -123,
	-1000, 49246, 57721, -186, -1000, -1000, -1000, 36858, 544, -1000,
	-1000, 1693, -1000, -1000, -1000, 49246, 1668, -1000, -1000, 20063,
	5120, 456, 20063, -1000, 1806, 454, -1000, -1000, -1000, -1000,
	-1000, -1000, 2475, -1000, 1367, -1000, -1000, 57721, 2469, -1000,
	-1000, 452, 442, 49246, 49246, 441, 440, 20063, 57721, 49246,
	-126, 1328, -131, -1000, 1806, -1000, -144, 838, -1000, 438,
	29922, -1000, 1729, 988, -146, 49246, 1201, -1000, -1000, -1000,
	29536, 29536, 1609, -1000, 49246, -1000, 49246, -1000, 49246, -1000,
	1251, 20063, -1000, -1000, 3728, -152, -1000, -137, -1000, 2524,
	-1000, -1000, -1000, -1000, 2141, 53702, 1708, 49246, 53631, 1433,
	49246, 2433, 49246, 836, 10453, 1443, 1443, -1000, -1000, 20063,
	20063, 57721, 435, -1000, 1806, 1328, 1433, 1328, 433, 24036,
	-1000, 1736, 1108, -1000, 800, -1000, -1000, -153, -154, -1000,
	-160, -167, -1000, 127, 20885, 20885, -186, -1000, 49246, 428,
	2099, -1000, 1575, 1546, 28, 876, -1000, -170, -1000, 423,
	-1000, 20063, -1000, -173, -1000, 820, -175, -1000, 811, -183,
	-191, 49246, 1433, 1806, -1000, 1806, 24036, -194, -1000, 25976,
	-1000, 772, 772, -1000, -1000, -1000, -1000, -1000, 21692, 1516,
	1196, 56126, -1000, -1000, -1000, 49246, -1000, 1579, 1578, 1132,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1708, 57721, -1000,
	1443, 1848, -1000, 1443, 1905, -1000, -1000, -197, -1000, 1433,
	1433, -199, -1000, -196, -1000, -1000, 2553, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2366, -1000, 861, 1564, 1564, 1575,
	-1000, 414, -1000, 413, 1493, -1000, -1000, 1328, -1000, 20474,
	-1000, 2563, -1000, -1000, 1791, -1000, -1000, 20063, 20063, -1000,
	-1000, -1000, 1806, -1000, -1000, -1000, -1000, -204, -213, 1433,
	1433, 916, -1000, -1000, 412, 20063, -230, 1433, -1000,
}
var sqlPgo = [...]int{

	0, 3136, 3135, 2027, 3134, 2426, 3131, 3129, 3128, 3127,
	3125, 2420, 3124, 3123, 3119, 3117, 3116, 3114, 3112, 3107,
	3099, 3098, 3095, 3092, 3089, 3088, 3087, 3083, 3081, 3079,
	3078, 3076, 3074, 3071, 2403, 3066, 2398, 3065, 3063, 3061,
	3060, 3058, 3055, 3054, 3053, 29, 3050, 3048, 3045, 3044,
	2389, 3043, 3038, 2371, 3037, 3036, 2351, 3034, 3030, 3029,
	2345, 2339, 3028, 3027, 2324, 3024, 3023, 2321, 3019, 2303,
	3014, 3007, 2290, 3005, 104, 108, 3004, 2277, 3002, 2999,
	2271, 2269, 2257, 2997, 2245, 2996, 2992, 2218, 2190, 2991,
	245, 2988, 2986, 2984, 2983, 2179, 2066, 2980, 2979, 2978,
	175, 2973, 2024, 2972, 2970, 2968, 2967, 2965, 2964, 2961,
	2959, 2958, 2957, 2953, 2952, 2947, 2945, 2942, 2940, 2939,
	2937, 2933, 2932, 2930, 2928, 2923, 2922, 2921, 2917, 183,
	117, 2909, 2908, 2004, 1988, 2907, 2906, 44, 52, 23,
	85, 126, 164, 4106, 157, 2905, 2904, 2902, 2901, 2897,
	30, 124, 125, 119, 121, 272, 2895, 2893, 47, 49,
	20, 24, 83, 2887, 2886, 2885, 2092, 88, 2884, 2883,
	166, 162, 2881, 787, 2880, 32, 103, 90, 87, 113,
	51, 2877, 100, 15, 2876, 116, 118, 2875, 73, 33,
	25, 3343, 72, 82, 56, 220, 158, 149, 148, 130,
	79, 2874, 171, 75, 143, 2873, 2870, 2865, 57, 142,
	1, 12, 161, 8, 2858, 9, 2854, 4, 2853, 2852,
	2851, 2847, 22, 112, 36, 42, 2845, 38, 178, 139,
	2840, 159, 2839, 78, 2836, 180, 144, 11, 154, 2835,
	81, 17, 77, 2834, 2832, 98, 156, 2831, 43, 123,
	86, 93, 185, 152, 96, 146, 145, 2830, 2828, 2826,
	131, 2825, 137, 115, 2824, 2823, 26, 40, 163, 45,
	2822, 2821, 114, 2818, 147, 2816, 2811, 2810, 184, 111,
	129, 7, 55, 91, 6, 153, 105, 62, 59, 2809,
	3885, 1496, 1443, 2808, 2807, 97, 74, 35, 89, 101,
	167, 39, 2806, 2803, 1645, 2801, 2799, 2793, 128, 2791,
	2790, 2789, 95, 31, 61, 2788, 107, 54, 186, 181,
	65, 151, 132, 173, 122, 2787, 135, 99, 2786, 140,
	177, 133, 2784, 636, 2783, 141, 2782, 2780, 2779, 2778,
	37, 2773, 2771, 2766, 68, 2765, 102, 2763, 136, 134,
	120, 50, 106, 165, 160, 1001, 2759, 138, 27, 2756,
	282, 28, 0, 4270, 3790, 2755, 150, 92, 2752, 2750,
	2738, 2735, 34, 13, 3, 5, 10, 14, 601, 234,
	2733, 2732, 16, 80, 109, 2730, 187, 155, 2729, 2726,
	2725, 71, 2722, 21, 2713, 19, 2712, 2706, 18, 2,
	2705, 2703, 172, 2702, 2701, 2695, 2524, 2693, 179, 2692,
	2689, 94, 2682, 2680, 2678, 2248, 2674, 2671, 48, 58,
	127,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 9, 9, 9, 33, 33, 11, 11,
	10, 10, 10, 12, 7, 7, 7, 7, 7, 7,
	7, 7, 14, 14, 24, 24, 15, 26, 408, 408,
	18, 28, 19, 29, 13, 22, 20, 20, 30, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 407, 407, 154, 154, 153, 149,
	149, 410, 410, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 76,
	76, 360, 360, 361, 361, 136, 136, 137, 137, 137,
	137, 138, 138, 139, 139, 139, 48, 36, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 39, 39, 39, 39, 39, 39,
	46, 46, 130, 130, 49, 49, 49, 49, 49, 49,
	49, 49, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 60, 60, 58, 328,
	328, 61, 61, 62, 62, 62, 62, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 70, 70, 70, 71, 71,
	71, 68, 68, 68, 66, 66, 66, 65, 65, 65,
	69, 69, 69, 67, 67, 67, 236, 236, 72, 72,
	72, 72, 72, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 75,
	75, 75, 75, 75, 75, 75, 75, 330, 330, 73,
	73, 302, 302, 77, 77, 261, 261, 78, 78, 78,
	78, 78, 79, 79, 79, 79, 89, 89, 89, 89,
	406, 406, 229, 229, 170, 170, 170, 170, 84, 84,
	84, 84, 85, 85, 85, 86, 86, 135, 135, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 40,
	40, 40, 41, 41, 42, 42, 43, 43, 44, 44,
	45, 45, 45, 45, 45, 96, 96, 96, 98, 95,
	95, 95, 97, 97, 97, 97, 99, 99, 100, 100,
	100, 100, 100, 100, 101, 101, 354, 354, 239, 239,
	352, 352, 353, 353, 206, 206, 206, 206, 206, 207,
	207, 207, 359, 359, 359, 359, 359, 359, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 120,
	120, 120, 129, 129, 129, 129, 129, 129, 129, 122,
	122, 122, 113, 113, 103, 103, 103, 103, 109, 109,
	109, 109, 109, 104, 104, 110, 110, 112, 112, 114,
	114, 114, 114, 114, 114, 105, 105, 105, 105, 116,
	116, 116, 116, 115, 115, 125, 125, 125, 125, 125,
	125, 315, 315, 121, 121, 121, 121, 124, 124, 124,
	124, 119, 119, 119, 123, 123, 126, 126, 126, 126,
	106, 106, 107, 107, 108, 108, 127, 127, 118, 118,
	128, 128, 128, 128, 128, 128, 128, 117, 117, 117,
	409, 409, 111, 404, 404, 402, 402, 402, 402, 402,
	402, 402, 403, 403, 405, 405, 82, 82, 82, 54,
	54, 55, 55, 208, 208, 209, 209, 283, 283, 283,
	283, 210, 210, 156, 156, 156, 213, 214, 214, 211,
	211, 212, 212, 212, 216, 216, 215, 218, 218, 217,
	282, 370, 370, 371, 371, 371, 371, 371, 371, 371,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	368, 368, 368, 369, 366, 366, 367, 367, 367, 367,
	413, 413, 281, 281, 222, 222, 373, 373, 373, 373,
	374, 374, 374, 374, 374, 377, 376, 375, 375, 375,
	375, 375, 311, 311, 311, 59, 59, 59, 250, 250,
	249, 249, 251, 251, 251, 251, 251, 251, 251, 251,
	251, 251, 251, 251, 251, 132, 132, 56, 56, 56,
	162, 162, 53, 53, 53, 57, 57, 52, 52, 52,
	52, 52, 266, 266, 266, 265, 265, 227, 227, 317,
	317, 317, 174, 174, 175, 175, 150, 150, 150, 21,
	23, 23, 16, 16, 16, 16, 16, 16, 31, 31,
	32, 32, 27, 27, 411, 411, 412, 412, 83, 83,
	87, 87, 87, 93, 93, 131, 131, 131, 131, 131,
	131, 131, 35, 35, 35, 35, 47, 47, 47, 47,
	91, 416, 416, 416, 92, 92, 415, 415, 169, 169,
	169, 169, 171, 171, 278, 278, 279, 279, 417, 417,
	280, 280, 280, 164, 163, 165, 165, 51, 51, 51,
	158, 158, 159, 159, 160, 160, 161, 161, 418, 418,
	80, 80, 80, 134, 134, 202, 202, 274, 274, 274,
	223, 223, 180, 180, 277, 277, 275, 275, 275, 248,
	248, 248, 133, 133, 232, 232, 241, 241, 242, 242,
	325, 325, 243, 90, 90, 143, 143, 141, 141, 141,
	141, 141, 141, 142, 142, 142, 144, 144, 144, 144,
	144, 144, 144, 147, 147, 147, 147, 148, 148, 148,
	146, 146, 384, 384, 384, 386, 386, 387, 383, 383,
	385, 385, 414, 414, 252, 252, 252, 220, 221, 219,
	219, 419, 419, 225, 225, 224, 226, 226, 316, 316,
	316, 246, 246, 246, 246, 269, 269, 267, 267, 268,
	268, 270, 270, 271, 271, 271, 272, 272, 273, 273,
	245, 245, 298, 298, 145, 145, 145, 231, 231, 231,
	233, 233, 288, 288, 288, 289, 289, 287, 287, 287,
	287, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	319, 319, 234, 234, 320, 276, 276, 400, 400, 400,
	401, 401, 314, 314, 321, 321, 321, 321, 321, 321,
	312, 312, 313, 313, 326, 327, 327, 255, 255, 255,
	255, 253, 253, 254, 254, 322, 322, 322, 322, 247,
	247, 323, 323, 323, 284, 284, 331, 331, 331, 346,
	346, 230, 230, 230, 341, 341, 332, 332, 332, 332,
	332, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 335, 335, 335, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 345, 345, 345, 345, 345, 336,
	336, 342, 343, 337, 338, 344, 344, 344, 344, 348,
	348, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	340, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 263, 263, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 292, 292, 292, 292, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	378, 378, 378, 378, 378, 378, 378, 378, 381, 381,
	382, 382, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 388, 388, 389, 389, 391, 391, 392, 392, 393,
	394, 394, 394, 395, 396, 396, 390, 390, 397, 397,
	397, 398, 398, 399, 399, 399, 399, 399, 304, 304,
	310, 310, 310, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 172,
	172, 172, 172, 172, 238, 238, 237, 237, 301, 301,
	299, 299, 303, 303, 256, 256, 347, 347, 347, 347,
	347, 347, 347, 257, 257, 257, 264, 258, 258, 259,
	259, 259, 259, 259, 295, 296, 260, 260, 260, 297,
	297, 305, 309, 309, 308, 307, 307, 306, 306, 285,
	285, 286, 286, 244, 244, 420, 420, 240, 240, 324,
	324, 324, 324, 204, 204, 235, 235, 203, 203, 197,
	197, 198, 198, 198, 198, 228, 228, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 349, 349,
	349, 350, 351, 300, 190, 189, 177, 178, 188, 187,
	186, 176, 179, 183, 184, 185, 181, 182, 193, 192,
	191, 329, 199, 199, 200, 200, 200, 201, 201, 201,
	201, 173, 173, 194, 194, 195, 196, 196, 166, 166,
	166, 167, 167, 168, 168, 358, 358, 356, 356, 356,
	357, 357, 357, 357, 355, 355, 355, 355, 355, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 6, 1, 1,
	5, 5, 6, 6, 7, 7, 7, 10, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 9, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 1, 7, 3, 6, 2,
	0, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 6, 3, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 3, 5,
	2, 3, 0, 3, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 3, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	7, 3, 3, 3, 3, 4, 4, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 5, 4, 6, 4, 6,
	4, 1, 0, 2, 3, 3, 3, 6, 4, 2,
	3, 4, 2, 3, 3, 3, 4, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 2, 3, 2, 3,
	7, 7, 8, 10, 7, 4, 5, 5, 5, 3,
	1, 1, 5, 2, 0, 1, 1, 1, 1, 3,
	2, 2, 2, 1, 2, 0, 3, 3, 2, 8,
	11, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 4, 7, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 7, 3, 1, 0,
	1, 2, 2, 1, 2, 3, 2, 2, 3, 2,
	2, 2, 2, 2, 3, 4, 2, 4, 7, 3,
	3, 0, 3, 6, 3, 6, 3, 13, 16, 9,
	12, 4, 2, 2, 0, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	1, 3, 1, 3, 8, 5, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 3, 4, 1, 5, 3, 4, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 2, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 1, 1, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 2, 2, 1, 5,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 425, -4, -34, -36, -48, -46,
	-49, -78, -61, -62, -63, -77, -72, -76, -79, -80,
	-81, -82, -73, -88, -87, -89, -93, -40, -90, -83,
	-84, -94, -102, -131, -132, -133, -134, -5, -11, 25,
	36, -37, -38, -39, 51, 78, 66, -56, -53, -50,
	-60, 80, 100, -385, 104, -64, -67, -69, 108, 116,
	121, 122, 146, 155, 258, 265, 287, 289, 291, 300,
	-42, -41, 117, -141, -143, 285, -85, -86, -95, -96,
	-97, -98, -135, 318, -103, -104, -105, -106, -107, -108,
	-109, -110, -111, -112, -113, -114, -115, -116, -117, -118,
	-119, -120, -121, -122, -123, -124, -125, -126, -127, -128,
	321, -35, -47, -92, -91, 366, -6, -7, -8, -9,
	-10, -12, -23, -51, -52, -54, -55, -57, -59, -58,
	-384, -65, -66, -68, -70, -71, -144, -142, 422, 286,
	376, 37, 330, 67, 112, 295, 20, -14, -18, -19,
	-15, -17, -20, -16, -24, -28, -29, -26, -25, -27,
	-30, -31, -32, -33, -21, -22, -13, 393, 401, -147,
	-145, -146, -148, 307, 384, 343, 426, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 2, 343,
	387, 308, 377, 93, 168, 270, 256, -402, 2, 4,
	-364, -362, -198, -197, 343, 93, 30, 38, 39, 41,
	44, 56, 57, 58, 61, 97, 98, 115, 123, 124,
	135, 148, 150, 158, 159, 160, 175, 181, 183, 163,
	204, 233, 235, 248, 252, 262, 264, 273, 297, 324,
	339, 355, 356, 357, 363, 364, 384, 385, 389, 396,
	20, 21, 22, 23, 25, 35, 36, 37, 40, 42,
	43, 46, 47, 48, 49, 50, 51, 52, 55, 60,
	65, 66, 67, 68, 69, 74, 71, 72, 73, 76,
	78, 79, 82, 83, 91, 92, 94, 95, 96, 100,
	102, 104, 107, 108, 110, 111, 113, 116, 117, 120,
	118, 349, 351, 119, 121, 122, 132, 133, 134, 136,
	137, 139, 141, 145, 147, 152, 153, 154, 155, 156,
	157, 169, 164, 170, 174, 177, 176, 178, 179, 180,
	171, 185, 188, 189, 190, 192, 193, 196, 197, 198,
	201, 200, 203, 206, 207, 210, 211, 214, 216, 219,
	220, 223, 221, 222, 225, 226, 228, 227, 234, 236,
	237, 239, 240, 243, 244, 247, 250, 253, 254, 255,
	256, 257, 258, 259, 261, 263, 265, 267, 268, 269,
	270, 271, 272, 274, 275, 277, 278, 279, 280, 281,
	285, 283, 284, 286, 287, 288, 289, 291, 293, 294,
	295, 296, 298, 319, 320, 332, 300, 301, 302, 303,
	304, 305, 306, 310, 314, 311, 312, 313, 308, 309,
	315, 316, 318, 321, 323, 325, 326, 329, 330, 331,
	333, 336, 337, 338, 334, 335, 328, 341, 342, 344,
	345, 346, 347, 348, 350, 352, 353, 358, 361, 362,
	366, 367, 369, 370, 373, 374, 375, 380, 376, 378,
	381, 382, 383, 388, 387, 394, 395, 397, 398, 399,
	-196, -166, 415, -195, 425, 425, 425, 2, 189, 190,
	269, 268, 315, 316, -191, -194, -195, -196, -166, 4,
	-362, -364, 93, 241, 425, 425, 425, 2, 343, 331,
	55, 308, 377, 293, 387, -265, 185, 93, 372, -166,
	265, 24, 2, 102, 174, 375, 374, 24, 261, 309,
	345, 347, 2, 425, 425, 2, 387, 308, 343, 168,
	93, 377, 293, -185, 2, -166, -75, 2, 422, 27,
	-74, -5, -50, -60, -64, -77, -72, -11, -34, -36,
	-56, -53, -61, -67, -69, -81, -80, -82, -84, -88,
	-87, -90, -95, -96, -102, -133, -134, 80, 25, 108,
	318, 117, 184, 2, -406, -229, 2, 24, -170, -166,
	80, 146, 307, -140, 343, 2, -166, 189, 190, 2,
	-185, 2, -402, 2, 189, 190, 2, -406, -229, 23,
	2, -166, 2, 304, 321, -171, 2, 300, -166, 425,
	425, 425, 425, 425, 425, 211, 60, 297, 315, -100,
	362, -99, 355, 302, -101, -354, 2, 223, -166, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 2, -129, 315, 331, 153, 36, 60,
	24, 65, 94, 147, 168, 169, 197, 75, 76, 268,
	211, 190, -315, 316, 344, 303, 341, 362, 80, 378,
	294, -409, 118, 4, 93, 223, 317, 355, 69, 348,
	349, 425, 425, 425, -414, 2, 343, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, -142, -144,
	-143, 425, 425, 425, 425, 425, -224, -225, 371, 182,
	114, 246, -141, -143, 2, -384, -129, 315, 2, 60,
	24, -352, 2, -290, 241, -292, 413, 414, 408, 229,
	400, -304, 99, 218, 217, -294, -305, 115, 297, 422,
	-201, -293, 428, 9, -381, -143, 31, 53, -199, -166,
	7, 8, 5, 6, -173, -333, -300, -340, 365, 125,
	232, -378, -379, -200, 4, -362, -356, -334, -343, -338,
	-339, -341, 42, 49, 48, 352, 222, 310, 311, 312,
	313, 325, 380, 164, 40, 239, 240, 176, 183, 63,
	85, 86, 84, 89, 88, 90, 87, 317, 377, 54,
	30, 158, 159, 163, 233, 160, 61, -380, 43, 95,
	107, 136, 137, 177, 178, 179, 180, 192, 193, 335,
	358, 39, 41, 44, 56, 57, 97, 98, 123, 124,
	135, 148, 175, 181, 204, 235, 252, 262, 273, 324,
	339, 355, 356, 357, 363, 364, 385, -363, -344, 81,
	126, 144, 173, 161, 186, 187, 191, 205, 208, 224,
	231, 249, 251, 292, 322, -415, 2, 362, 362, 2,
	-415, 2, -415, 2, -169, 2, 362, 359, -416, 362,
	396, -386, 274, -387, -185, -386, 425, 425, 427, 425,
	-219, -220, -221, 2, 24, 105, 422, 2, -318, 2,
	420, -322, -143, 199, -321, 422, -319, -191, 242, -382,
	298, -378, -379, -173, -166, -200, 4, 218, 217, -3,
	2, -322, 158, -191, 2, -322, 158, 2, -192, 158,
	-322, -194, 2, -360, 158, -358, 9, -357, 5, 4,
	-362, -364, -363, 63, 2, -176, -166, 2, -203, 158,
	-191, -188, -355, 4, -362, -364, -363, -365, 24, 26,
	27, 28, 29, 31, 32, 33, 34, 45, 53, 54,
	59, 62, 64, 75, 80, 84, 85, 87, 86, 88,
	89, 90, 99, 101, 103, 105, 106, 109, 112, 114,
	125, 127, 140, 142, 143, 146, 149, 151, 162, 168,
	172, 182, 184, 199, 202, 209, 212, 213, 229, 230,
	232, 238, 241, 242, 245, 246, 260, 266, 276, 290,
	307, 317, 327, 340, 343, 354, 359, 360, 365, 371,
	372, 377, 379, 386, 390, 391, 392, 393, -189, -355,
	359, 427, -235, -197, -198, -228, -166, 424, -290, 2,
	-90, 2, -290, 158, 2, -90, 158, 2, -290, 158,
	2, -90, 158, 2, -222, 422, 424, 343, 64, 2,
	-191, 158, -181, 2, -166, 140, -192, 158, 2, -194,
	-360, 158, 2, -360, 158, 2, -193, 2, -191, 168,
	168, -176, 158, 2, -166, 24, 143, 2, 184, 2,
	184, 2, -323, 2, -322, -236, 158, 2, -191, -236,
	158, 2, -236, 158, 2, -204, 158, 2, -203, -176,
	158, 2, -361, 158, 2, -360, -361, 158, 2, -261,
	422, -330, 2, -329, -357, 384, 422, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 315, -140, 241, 359, 427, 422,
	-191, -290, -90, -302, 422, 143, -290, -90, 241, 143,
	243, 2, 93, 343, 399, 24, -166, 2, 319, 2,
	422, -100, 58, 362, -279, 2, -280, -163, -164, -165,
	188, 267, 272, 399, -352, 359, 405, 143, -352, -239,
	424, -129, 2, 140, 379, 2, 7, 2, -360, 271,
	132, 2, 319, 2, 268, 316, 60, 143, 2, 2,
	-404, 2, 241, 143, 2, 143, 2, 143, 2, 143,
	2, 143, 2, 2, 268, 316, 2, 361, 198, 119,
	2, 143, 2, 143, 2, 5, 2, 188, 267, 332,
	2, 343, 387, 308, 2, 2, 143, 2, 143, 399,
	2, -247, -322, -224, -225, -246, -267, -268, 209, 127,
	238, -252, 24, 105, -252, -252, 47, 423, 423, -129,
	319, 2, 10, 11, 62, 35, 413, 414, 415, 416,
	138, 417, 418, 411, 412, 410, 403, 404, 407, 194,
	195, 77, 406, 405, 70, 215, 299, 128, 129, 130,
	131, 282, 165, 166, 167, 13, 14, 15, 28, 245,
	208, 400, 161, 322, 408, 16, 17, 18, 186, 187,
	231, 38, 162, -172, -205, -290, -290, -290, -290, -290,
	251, -244, -285, 420, -143, 422, 422, -143, -290, -304,
	-237, 422, -351, 7, -143, -299, 420, -306, -290, 424,
	422, 5, 422, 5, -388, 394, 140, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	264, -348, 388, -348, -348, -335, 422, -335, 422, 422,
	-336, 422, 422, 422, -335, 422, 422, 422, 395, 401,
	395, 401, 422, 422, -278, -279, -278, 359, -171, 427,
	-386, -222, 422, -240, -324, -290, 415, -240, -240, 241,
	-237, -290, 81, -255, 191, 224, 144, 205, 292, 173,
	-351, -75, -287, 428, -314, 401, -143, -319, -166, -143,
	-321, 422, -318, -314, 415, -191, 422, 143, 422, 424,
	-152, 283, -151, 22, 25, 108, 382, 120, -212, 170,
	256, 115, 328, -408, 117, 301, 350, 351, 283, 115,
	-249, -251, 32, 91, 226, 253, 50, 156, 217, 218,
	330, 115, 283, 393, 115, 117, 283, -154, 328, -408,
	117, 301, 283, -153, -212, 115, 428, 117, 236, -360,
	-235, 427, 427, -355, 415, 115, 115, 115, 115, 143,
	-228, -355, -191, -199, -166, -200, 422, -222, 229, 241,
	-402, -250, -249, 229, -162, -383, 393, 229, 229, -222,
	-178, 158, 2, -167, -166, -178, 158, -383, 229, -323,
	-202, -191, -202, 318, -185, 32, -155, 427, 52, 288,
	115, -155, 115, -155, 115, -155, 427, 115, -155, 115,
	427, 115, 115, -237, 423, 427, -330, -360, -402, -228,
	-170, -360, 143, 80, 422, 32, -301, -331, -332, -333,
	-342, -337, -340, 42, 49, 48, 352, 222, 310, 311,
	312, 313, 325, 380, 164, 40, 239, 240, 176, 4,
	41, -344, 183, 175, 177, 178, 179, 180, 181, 324,
	39, 273, 136, 137, 135, 107, 98, 97, 235, 44,
	43, 95, 355, 356, 357, 358, 192, 193, 57, 56,
	385, 335, -361, -402, -228, 140, -176, 2, -191, 2,
	71, 72, 399, -354, -237, 32, -279, 2, -417, 427,
	207, -207, 214, 228, 152, 242, 397, -359, 5, 4,
	-300, -311, 99, 211, -340, 8, 414, -349, 7, 413,
	-353, -352, -353, 83, 424, -355, 343, 192, -360, -360,
	-354, 24, 320, 2, -191, -405, 140, -403, 293, -402,
	-191, -191, -191, -191, -191, 140, 2, 361, 2, 361,
	2, -166, -166, 207, -191, 2, -193, 2, -192, 2,
	343, 168, 343, -155, 427, -246, -268, -267, -270, -290,
	24, -273, 134, 225, -290, -292, -142, -142, -142, -226,
	-316, -290, 266, 168, -354, -346, -331, -345, 278, 279,
	277, 281, 280, -331, -190, -355, 355, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, 208, 161, 322, 38, 162, -290, 359, -290,
	-290, -290, -290, 221, 229, 232, 365, 125, 373, 105,
	236, -420, 340, 34, -297, -143, 422, -310, 29, 327,
	24, -304, 297, 422, -285, -290, -286, -238, -237, 423,
	32, 427, -238, -303, -299, -309, -308, 390, -355, 415,
	423, -237, 386, 24, 105, 415, 2, 7, -262, 398,
	220, 96, 154, 219, -263, 306, -389, 133, 149, 422,
	423, 2, 423, 2, 423, 2, 423, 2, 423, 2,
	-290, -290, -290, -290, -290, -290, -290, -237, -351, -256,
	2, -347, -237, 4, 398, 220, 96, 154, 219, 306,
	-256, 2, 7, -237, 2, -237, 2, -257, 2, -290,
	-237, -258, -291, -292, 413, 414, 408, -304, -259, 2,
	-290, -238, 355, 355, 355, 355, -290, 45, 202, 360,
	-260, -290, 143, -237, -171, -387, 32, -237, -231, 427,
	143, 32, 4, -231, -231, 422, 423, 427, 191, 191,
	-318, -255, 191, -253, 249, -253, -253, -400, 422, 421,
	-314, -177, 420, 429, -355, -313, -312, 32, -185, 247,
	-314, -314, 424, 423, -313, -191, 422, -237, -355, 427,
	359, -411, 75, 64, -282, 158, 64, -366, -179, 75,
	-367, -166, 59, 372, 266, 142, -411, 75, -411, 75,
	75, 318, 331, 47, -322, 35, -90, 203, 73, 143,
	359, -322, -251, -331, 91, 217, 218, 47, -350, -349,
	414, -350, 47, -350, -350, -350, 393, -192, -322, 359,
	257, -360, 73, 359, 427, 35, -90, 203, 73, 143,
	359, -203, -177, 73, 343, -327, -326, 402, -197, -166,
	424, -290, -90, -290, -90, 333, 423, 424, 186, 186,
	-208, -209, -166, -283, -282, -368, -369, -366, 185, 168,
	372, 126, 32, 115, -228, -328, 184, 115, 257, 115,
	115, 32, 241, 229, 241, 229, -158, 346, 115, -284,
	391, -274, -90, 422, 99, 32, -274, -241, -242, -325,
	-243, -179, 422, -185, -191, -236, -236, -236, -203, -204,
	-176, -360, -361, -361, 423, -75, -329, 423, -139, 393,
	359, 393, 423, -140, 379, -209, -74, 25, 80, 108,
	423, 427, -230, 31, 420, -262, 422, -348, 422, -139,
	-326, 143, -229, -327, -327, 140, 72, 405, 359, 423,
	362, -280, -206, 272, 326, 284, 314, 8, 7, 7,
	427, -355, -191, 140, -228, -228, 315, 140, 140, 424,
	-191, -203, -191, -322, -271, -349, 422, -272, 297, 298,
	427, -150, 33, 103, 196, -191, 399, 113, -290, -290,
	359, -420, 340, -297, 113, -290, 221, 232, 365, 125,
	373, 105, 236, 143, 422, -291, -291, -237, -290, 421,
	431, 423, 424, -228, -290, 421, 421, 427, -307, -308,
	109, -290, 424, -419, 427, -224, -290, -237, -237, 423,
	423, 359, 359, 359, 359, 422, -394, 250, 422, 422,
	-290, 32, 427, 427, 427, 423, 427, 427, 427, 423,
	423, 427, 423, 143, 423, 423, 423, 423, 423, -264,
	260, 423, 10, 11, 413, 414, 415, 416, 138, 417,
	418, 411, 412, 410, 403, 404, 405, 70, 215, 299,
	13, 14, 15, 186, 162, -291, -291, -291, 423, -295,
	-296, 143, 140, 399, 399, 399, 399, 32, -260, -260,
	-260, 423, 143, -237, 422, 423, -284, -324, -233, 2,
	-318, -187, -355, -284, -284, -237, -290, -318, -318, -254,
	379, 241, 191, -318, -312, 423, -401, -351, -314, -313,
	-351, -289, -288, 141, 227, -185, -222, -313, -313, -355,
	-314, 423, -234, -320, -382, -419, 424, -151, -191, -179,
	-186, -166, 229, -282, 158, -157, 229, -331, -186, 422,
	422, 196, 196, -179, -186, 158, -179, 158, -186, -186,
	-407, 272, 237, -290, 210, 270, 230, -152, 283, -90,
	-90, 399, 422, -193, 283, -199, -350, -350, -249, 283,
	-192, -360, 393, 399, -176, -153, -90, -90, 399, 422,
	-177, -154, 283, 399, -191, -136, 157, 236, 415, -355,
	-130, 5, 232, -130, 423, 427, 168, -178, 168, -184,
	-167, -90, -191, 143, -139, -360, -192, -360, -360, -360,
	-90, -191, 115, -191, 115, -159, 111, -418, 405, -176,
	-225, -224, -290, -248, -277, 290, 241, -223, -180, -179,
	384, -185, -248, -232, 427, 143, 405, 424, -223, -155,
	-155, -155, -155, -155, -75, 143, -138, 244, -137, -166,
	5, -228, 23, -139, 422, -360, 423, -331, 420, 421,
	7, 7, 422, -351, -139, -228, 143, -43, 393, 270,
	93, 343, 256, 168, -352, -352, -279, 370, 68, 272,
	-352, 343, 315, 315, -166, -272, -290, -316, -191, 428,
	-290, -290, 113, 113, -290, -291, -291, -290, 113, 143,
	422, -290, -301, 28, 28, 423, -286, -290, 415, -355,
	423, 423, -299, 112, -290, 354, -355, 415, 423, 386,
	-419, -419, -419, 5, 220, 154, 219, -263, 219, -263,
	-263, 7, -395, -182, 422, -166, 391, -224, 423, -346,
	-331, -290, -290, -290, -290, -290, -351, -290, -295, -290,
	-346, -331, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, 105, 229, 236, -291, -296, -295, -290, -290, -331,
	423, 423, 423, -237, -74, -245, 149, -327, 427, -245,
	-245, 423, -254, 422, -290, -318, 421, 423, 427, -313,
	421, 427, 430, 405, -222, 424, -312, 423, 427, -276,
	32, 423, -355, 359, 359, 115, 229, 381, -370, -367,
	-290, -227, -317, -179, -382, 422, -166, 422, 422, -149,
	108, 318, -412, 115, -155, 115, -155, 397, 422, 422,
	359, -411, 75, -290, -237, 359, 359, 257, -290, -290,
	-237, 359, -290, 117, -139, 143, 342, -210, 171, -283,
	-167, 422, -178, 422, 422, -222, -191, -250, -162, -266,
	379, -177, 422, -177, -160, 201, -418, -358, -383, -269,
	-267, -248, -240, 230, 74, 423, 427, 424, -284, -242,
	-233, -290, 2, 423, -90, 427, 422, 405, 405, 243,
	-360, -140, -140, 7, 421, 423, -351, 423, -228, 244,
	-188, -176, -191, -189, -203, -191, 242, 423, -150, -177,
	-290, -290, 113, 28, 28, -290, -290, -301, 423, -290,
	-290, 421, -290, 424, 5, -290, 423, 423, 423, 423,
	-396, -166, -290, 423, 423, 423, 427, 427, 423, 423,
	423, 423, 423, -296, 143, 105, 236, 422, 423, 423,
	-298, 151, 47, -318, -298, -298, -228, -287, -351, -288,
	-177, 420, -355, -320, 422, 424, -179, -186, -282, 115,
	-371, 75, -372, 62, 126, 80, 229, 232, 372, 266,
	59, 99, 276, 32, 423, 423, 427, -175, 62, -175,
	-290, -227, -228, 229, 337, 99, 229, 99, 92, 367,
	-179, -186, -228, -228, -191, -179, -186, 423, -193, -192,
	-360, 423, -177, 73, -361, 355, -211, -212, 162, 422,
	-227, 422, -228, -208, 32, 422, 145, 46, 241, -227,
	241, -161, 200, -418, -358, -158, -248, -275, 422, 241,
	-90, -180, 2, -225, 405, -137, -138, -360, -360, 423,
	92, 92, 421, 423, -44, -45, 168, 75, 259, -214,
	-213, 256, 236, -150, -290, -290, -290, 423, -355, 415,
	-419, -390, 256, 423, -290, -290, -291, 143, 422, -301,
	-391, 392, -290, -237, -391, -391, 423, -314, -351, 2,
	-282, -186, -190, -183, -166, 126, 158, 232, 196, 422,
	-291, -191, 422, 2, -281, -413, 79, 338, -317, -150,
	-190, -150, 423, 423, 423, 232, 232, -290, -331, -155,
	-155, 423, 423, 359, 359, 359, 359, 399, -290, 254,
	-227, 423, -227, 423, 423, -90, -227, -191, 423, -191,
	-418, -358, -159, 106, -228, 75, -269, -297, 423, -139,
	422, 422, 427, 24, 422, 24, 422, -189, 343, 423,
	-225, 47, 423, 423, -291, -301, 423, -392, -393, -182,
	-313, 421, -372, -183, 229, -290, -168, 422, -290, -210,
	422, -175, 276, -174, 62, 422, 422, -179, -186, 422,
	422, -290, -191, 423, -281, 423, -210, 423, -266, 422,
	-358, -160, 374, 230, 423, -186, -248, -361, -361, -45,
	-228, -228, -191, -397, 270, 298, -237, 423, 427, 32,
	115, 423, -373, 216, -166, 423, -211, -228, -150, -191,
	-410, 379, -190, -216, -215, -213, -218, -217, -213, -237,
	-237, 422, -210, -281, -211, -281, 422, -227, -161, 318,
	-284, 423, 423, 423, 423, 423, -398, -399, 38, 369,
	83, -290, -398, -393, -395, 126, -374, -377, -376, 241,
	144, 255, 323, 423, 337, 389, 423, -222, -290, 423,
	427, 384, 423, 427, 384, 423, 423, -228, -211, -210,
	-210, -227, 423, -241, -139, -139, -399, 263, 139, 297,
	263, 139, -183, -376, 241, -377, 241, 374, 102, -373,
	-215, 162, -217, 143, 423, -211, -211, 423, -284, 28,
	-375, 226, 288, 52, 318, -375, -374, 422, 422, -156,
	52, 288, -281, -399, 21, 232, 99, -237, -237, -210,
	423, 423, -211, -211, 359, 422, -237, 423, -211,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 249, 250, 252, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	389, 390, 0, 863, -2, 0, 368, 370, 379, 381,
	383, 385, 386, 0, 448, 450, 452, 454, 456, 458,
	460, 462, 464, 465, 467, 469, 471, 473, 475, 477,
	479, 481, 483, 485, 487, 489, 491, 493, 495, 497,
	-2, 775, 777, 779, 781, -2, 62, 64, 66, 68,
	70, 72, 88, 222, 224, 226, 228, 231, 233, 235,
	900, 255, 257, 259, 261, 263, -2, 914, 0, 0,
	0, -2, 0, -2, -2, -2, 793, 73, 74, 75,
	76, 77, 78, 79, 94, 95, 96, 97, 98, 99,
	100, 81, 83, 84, 90, 91, 93, 0, 0, 876,
	878, 880, 882, -2, 0, 0, -2, 7, 13, 15,
	17, 20, 22, 24, 26, 28, 30, 32, 34, 36,
	38, 40, 42, 46, 52, 54, 56, 60, 61, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 159, -2,
	-2, -2, -2, 0, 0, 1545, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1546, 1547, 1548, 1549,
	1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
	1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569,
	1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
	1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
	1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,
	1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
	1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
	1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
	1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
	1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1431, 1485, 1434, 1429, 188, 190, 192, 193, 0, 0,
	0, 0, 0, 0, 675, 1470, 1483, 1484, 1485, 1488,
	1489, 1490, 1545, 0, 215, 217, 220, 221, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 735, 347,
	1636, 349, 351, 0, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 251, 253, 254, 0, 0, 0, 0,
	0, 0, 0, 346, 344, 1465, 288, 289, 0, 0,
	329, 330, 331, 332, 333, 334, 336, 293, 295, 297,
	298, 300, 302, 304, 306, 308, 310, 312, 314, 315,
	317, 319, 320, 322, 324, 325, 327, 736, 0, 0,
	0, 0, 0, 170, 0, 361, 355, 360, 362, 364,
	365, 366, 367, 0, 0, 168, 163, 0, 0, 608,
	342, 340, 0, 162, 0, 0, 772, 0, 361, 1512,
	359, 773, 774, 0, 0, 768, 769, 1666, 803, 369,
	371, 380, 382, 384, 387, -2, -2, 1762, -2, 410,
	-2, 418, 1765, 1668, 421, 0, 423, -2, 426, 449,
	451, 453, 455, 457, 459, 461, 463, 466, 468, 470,
	472, 474, 476, 478, 480, 482, 484, 486, 488, 490,
	492, 494, 496, 498, 499, 0, 0, 0, 0, 0,
	503, 0, -2, -2, 0, 0, 0, 0, 0, -2,
	0, -2, 0, -2, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 502, 504, 505, 506, 0, 551, 590,
	591, 776, 778, 780, 0, 716, 902, 63, 65, 67,
	69, 71, 223, 225, 227, 229, 232, 234, -2, 874,
	875, 256, 258, 260, 262, 264, -2, 0, 906, 906,
	906, 0, 0, 875, 873, 0, 372, 0, 374, 0,
	503, 377, 378, 430, 431, 1117, 0, 0, 0, 0,
	0, 1248, 1201, -2, -2, 1233, 1235, 1741, 1762, 0,
	1237, 1238, 0, 1240, 1244, 1245, 0, 1408, 1477, 1472,
	1437, 1438, 1439, 1440, 0, 0, 1443, 0, 1445, 1446,
	1447, 1312, 1259, -2, -2, -2, 1481, 1031, 1032, 1033,
	1034, 1035, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1774,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 0,
	1730, 1747, 1748, 1753, 1755, 1749, 1738, 1282, -2, -2,
	1552, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1742, 1743,
	-2, 1745, -2, -2, 1754, -2, 1758, 1759, -2, -2,
	1764, -2, -2, -2, 1768, 1769, -2, 1499, 1084, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1787,
	1788, 1789, 1790, 1791, 1792, 805, 783, 796, 805, 785,
	786, 787, 788, 789, 794, 795, 798, 0, 790, 791,
	792, 892, 1643, 895, 675, 893, 877, 879, 0, 881,
	0, 0, 0, 886, 909, 907, 0, 945, 890, 891,
	901, 960, 983, 0, 965, 0, 983, 1005, 0, 970,
	1662, 1260, 1261, 0, 1485, 1482, -2, 1785, 1786, 2,
	80, 0, 1747, 1005, 82, 0, 1747, 85, 0, 1747,
	0, -2, 89, 0, 1747, 171, 172, 1495, 1496, 1500,
	1501, 1502, 1503, 1774, 92, 0, 1461, 101, 0, 1747,
	1428, 0, 1458, 1504, 1505, 1506, 1507, 1508, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 0, 1455,
	0, 0, 600, 1425, 1430, 601, 1435, 0, 194, 195,
	196, 197, 198, 1747, 200, 201, 0, 203, 204, 1747,
	206, 207, 0, 209, 0, 0, 0, 0, 0, 230,
	675, 1747, 0, 237, 1466, 0, 699, 1747, 697, 1469,
	-2, 1747, 719, 722, 1747, 724, 675, 726, 1468, -2,
	1492, 899, 1747, 819, 348, 350, 0, 242, 0, 832,
	0, 834, 0, 853, 1011, 155, 1747, 267, 286, 155,
	1747, 270, 155, 1747, 273, 155, 1747, 276, 1423, 155,
	1747, 279, 280, 1747, 282, 173, 283, 1747, 285, 343,
	0, 0, -2, 337, 1471, -2, 0, 335, 294, 296,
	299, 301, 303, 305, 307, 309, 311, 313, 316, 318,
	321, 323, 326, 328, -2, 0, 0, 0, 0, 0,
	0, 606, 607, 0, 0, 0, 770, 771, 0, 0,
	0, 391, 0, 0, 0, 0, 802, 388, 0, 407,
	0, 409, 1737, -2, -2, 413, 806, 810, 811, 812,
	0, 0, 0, 0, 420, 0, 0, 0, 424, 427,
	0, 500, 501, 0, 0, 511, 512, 513, 514, 1641,
	1566, 517, 0, 520, 541, 555, 0, 0, 524, 526,
	605, 528, 0, 0, 530, 0, 532, 0, 534, 0,
	536, 0, 538, 540, 542, 556, 544, 0, 0, 0,
	554, 0, 560, 0, 563, 564, 565, 0, 567, 568,
	569, 0, 0, 0, 577, 579, 0, 589, 0, 507,
	508, 155, 1009, -2, 0, 869, 923, 924, 0, 0,
	0, 0, 904, 905, 0, 0, 0, 865, 866, 373,
	0, 376, 0, 0, 0, 0, 1343, 1344, 1345, 1346,
	1347, 1348, 1351, 1352, 1349, 1350, 1353, 1354, 0, 0,
	0, 0, 0, 1355, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1356, 1357, 1358, 0, 0,
	1360, 0, 1362, 0, 0, 0, 0, 0, 0, 1180,
	1182, 1416, 0, 0, 1359, 1122, 1123, 1124, 1159, 1160,
	0, 1234, 1413, 1412, 1236, 0, 1365, -2, 1366, 1248,
	0, 0, 1239, 1452, 1246, 1247, 1365, 0, 1407, 0,
	0, 1442, 0, 1114, 1314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 1082, 1089, 1086, 1085, 1070, 0, 1069, 0, 0,
	1067, 0, 0, 0, 1071, 0, 1388, -2, 0, 0,
	0, 0, 0, 0, 782, -2, 784, 0, 800, 0,
	894, 0, 0, 949, 1417, 1421, 1422, 949, 949, 0,
	0, 1366, 0, 0, 0, 0, 1002, 1002, 1002, 1000,
	977, 0, 983, 0, 993, 0, 983, 983, 0, -2,
	965, 0, 0, 993, 1006, 1007, 0, 0, 0, 0,
	102, 765, 123, 0, 765, 765, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 119, 108, 109, 0, 0,
	86, 700, 0, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 121, 0, 146, 148, 0, 0, 0, 0, 996,
	599, 0, 0, 1486, 1433, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 1472, 1473, 614, 0, 0, 0,
	240, 695, 698, 0, 717, 0, 898, 0, 0, 0,
	0, 1747, 731, 1457, 1491, 0, 1747, 821, 0, 1015,
	0, 835, 0, 0, 1012, 0, 265, 0, 153, 154,
	0, 268, 0, 271, 0, 274, 0, 0, 277, 0,
	0, 0, 0, 0, 901, 0, 0, 185, 0, 353,
	363, 0, 0, 0, 0, 901, 0, 1368, 1023, 1026,
	1027, 1028, 1114, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1090, 1084, 1100, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1080, 0, 1055, 1055, 1055, 1072,
	1073, 1091, 1092, 1094, 1096, 1098, 1024, 1025, 1090, 1090,
	1087, 1088, 185, 0, 357, 0, 996, 393, 996, 395,
	0, 585, 0, 0, 0, 0, -2, 415, 0, 808,
	0, 813, 439, 440, 441, 815, 816, 419, 442, 443,
	444, 445, 446, 447, 0, 692, 0, 694, 1448, 0,
	416, 432, 417, 422, 0, 428, 0, 0, 515, 516,
	518, 519, 521, 522, 523, 527, 0, 593, 1658, 603,
	529, 531, 533, 535, 537, 0, 546, 0, 548, 0,
	550, 558, 561, 566, 570, 571, 572, 573, 574, 575,
	0, 0, 0, 715, 0, 872, 921, 922, 927, 931,
	932, 935, 938, 939, 929, 1117, 887, 888, 889, 915,
	916, 748, 0, 0, 375, 1118, 1019, 1020, 1074, 1075,
	1076, 1077, 1078, 1119, 1120, 1454, 0, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, -2, -2, -2,
	-2, -2, -2, -2, -2, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, -2, -2, -2, 1157,
	1158, -2, 1361, 1363, 0, 1416, 0, -2, 0, -2,
	-2, -2, -2, 1177, 0, 1179, 1184, 1186, 1188, 0,
	0, 0, 0, 1415, 1198, 1399, 0, 0, 1340, 1341,
	1342, 1183, 0, 0, 1414, 1411, 0, 0, 1364, 1243,
	0, 0, 0, 0, 1372, 1406, 1402, 0, 1474, 1480,
	1250, 912, 0, 0, 0, 0, 1257, 0, 1453, 1101,
	1102, 1103, 1104, 1105, 1106, 1115, 1322, 0, 0, 0,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1294, 0, 1375, -2, -2, -2, -2, -2, -2, -2,
	0, 1296, 0, 0, 1308, 0, 1310, 0, 1298, 1366,
	1385, 0, 0, 1204, 0, 0, 0, 1248, 0, 1301,
	1366, 1393, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1366, 0, 1398, 799, 896, 0, 0, 1015, 0,
	0, 0, 1420, 1015, 1015, 0, 944, 0, 0, 0,
	0, 0, 0, 997, 1001, 998, 999, 0, 0, 983,
	993, 957, 0, 0, 1456, 963, 992, 0, 675, 982,
	993, 993, 0, -2, 967, 0, 0, 912, -2, 0,
	0, 0, 0, 764, 125, 1747, 0, 157, 0, 0,
	665, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 0, 0,
	0, 0, 701, 702, 704, 710, 712, 0, 706, 1451,
	0, 707, 0, 709, 711, 713, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 1427, 0, 0, 176, 995, 0, 1426, 1436,
	0, 199, 202, 205, 208, 186, 674, 0, 0, 0,
	0, 613, -2, 615, 617, 618, 619, 620, 1591, 1492,
	0, 1492, 0, 0, 0, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 823, 829, 0, 914,
	0, 851, 837, 0, 0, 0, 851, 855, 856, 858,
	859, 0, 0, 1013, 287, 155, 155, 155, 1424, 155,
	155, 174, 281, 284, 345, 290, 338, 901, 0, 0,
	0, 0, 185, 0, 0, 0, 339, 0, 0, 0,
	341, 0, 1016, 1018, 0, 1029, 0, 1082, 0, 160,
	185, 0, 0, 392, 397, 0, 586, 0, 0, 408,
	0, 807, 814, 0, 436, 0, 438, 693, 1450, 1449,
	0, 429, 509, 0, 604, 602, 545, 0, 0, 0,
	587, 588, 592, 1010, 0, 933, 0, 930, 936, 937,
	0, 918, 746, 747, 0, 0, 0, 0, -2, -2,
	0, 0, 0, 1199, 0, -2, 1178, 1181, 1185, 1187,
	1189, 0, 0, 0, 0, 0, 0, 0, 1200, 1409,
	1412, 1338, 0, 0, 1367, 1370, 1371, 0, 0, 1403,
	0, 0, 0, 0, 0, 911, 912, 912, 912, 1256,
	0, 0, 0, 0, 0, 0, 1258, 0, 0, 0,
	0, 0, 0, 0, 0, 1277, 0, 0, 0, 1281,
	1053, 0, 1293, 0, 1295, 1079, 1307, 1309, 1297, 0,
	0, 1299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1207, 1208, 1209, 1300, 1391,
	1392, 0, 0, 1093, 1095, 1097, 1099, 0, 0, 0,
	0, 1306, 0, 1397, 901, 946, 941, 1418, 996, 948,
	950, 1419, 1459, 941, 941, 0, 1367, 985, 0, 987,
	0, 0, 0, 989, 0, 978, 0, 980, 993, 962,
	0, 0, 955, 0, 954, 675, 991, 964, 968, 1474,
	0, 1008, 0, 972, 975, 0, 0, 124, 752, 0,
	0, 1460, 0, 127, 1747, 136, 0, 642, 0, 0,
	0, 0, 0, 767, 137, 1747, 155, 1747, 155, 138,
	141, 0, 145, 143, 0, 0, 633, 103, 765, 106,
	112, 0, 0, 758, 0, 705, 708, 714, 87, 0,
	760, 750, 0, 0, 749, 147, 107, 113, 0, 0,
	762, 105, 0, 0, 0, 185, 0, 0, 1432, 1487,
	210, 212, 213, 211, 622, 0, 1492, 0, 1492, 0,
	1464, 611, 675, 0, 238, 239, 699, 720, -2, 723,
	725, 734, 0, 0, 0, 825, 829, 0, 828, 899,
	926, 913, 1014, 830, 851, 0, 0, 0, 840, 842,
	839, 836, 833, 1015, 0, 0, 0, 0, 0, 266,
	269, 272, 275, 278, 291, 0, 183, 1624, 181, 178,
	180, 352, 0, 164, 0, 0, 0, 1369, 0, 1021,
	0, 0, 0, 0, 161, 356, 0, 394, 0, 0,
	0, 0, 0, 0, 405, 406, -2, 434, 435, 437,
	433, 0, 547, 549, 557, 0, 0, 917, 748, 0,
	1121, 1162, 0, 0, -2, 0, 0, 1166, 0, 0,
	0, -2, 0, 0, 0, 1400, 0, 1411, 1241, 1242,
	1249, 1339, 1373, 1401, 1405, 0, 1475, 1479, 1251, 0,
	0, 0, 0, 1444, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 0, 1320, 1321, 1325, 1467, 0, 0, 1262, 0,
	0, 0, 0, 0, 0, 0, 0, 1374, 1384, 1386,
	1205, 1206, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, -2, -2, -2, 1223, 1224, 1225, -2, -2,
	-2, 0, 0, 0, 1387, 1389, 1390, 1394, 1395, 0,
	1303, 1304, 1305, 1396, 0, 943, 0, 947, 0, 943,
	943, 908, 986, 0, 1004, 988, 960, 979, 0, 969,
	958, 0, 959, 0, 990, 0, 966, 971, 0, 974,
	0, 1251, -2, 0, 0, 0, 0, 156, 640, 664,
	0, 0, 737, 745, 745, 0, 1462, 0, 0, 129,
	0, 0, 0, 0, 134, 0, 140, 144, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 115, 118,
	0, 0, 114, 0, 158, 0, 0, 630, 0, 616,
	0, 0, 0, 0, 614, 0, 236, 696, 718, 0,
	0, 0, 0, 0, 827, 829, 0, 820, 821, 851,
	925, 831, 849, 850, 848, 0, 0, 0, 914, 857,
	854, 860, 861, 0, 169, 0, 0, 0, 0, 354,
	0, 0, 0, 0, 1022, 1030, 0, 1083, 358, 0,
	580, 581, 628, 0, 584, 510, 928, 934, 919, 748,
	1164, 1168, 0, 0, 0, 1170, -2, 0, 1192, -2,
	-2, 1410, 1404, 0, 1441, 912, 1252, 1254, 1255, 1116,
	1327, 1324, 0, 1311, 1272, 1273, 0, 0, 1276, 1278,
	1279, 1280, 1054, 1383, 0, 0, 0, 0, 1302, 897,
	1316, 0, 0, 951, 1316, 1316, 0, 983, 981, 956,
	952, 0, 1475, 973, 0, 0, 754, 756, 126, 0,
	641, 0, 644, 0, 0, 0, 0, 651, 652, 0,
	0, 0, 0, 0, 666, 673, 0, 748, 0, 748,
	0, 0, 0, 0, 131, 150, 0, 0, 766, 0,
	155, 155, 0, 0, 753, 0, 0, 0, 759, 761,
	751, 0, 763, 0, 175, 0, 609, 629, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 817, 829, 0, 822, 823, 241, 0, 0, 0,
	838, 841, 843, 926, 0, 182, 0, 177, 179, 185,
	0, 0, 1017, 1081, 396, 398, 0, 0, 404, 582,
	627, 0, 0, 920, 1172, -2, -2, 1193, 1476, 1478,
	0, 914, 0, 1313, 0, 0, -2, 0, 0, 0,
	883, 0, 942, 940, 884, 885, 1003, 993, 0, 976,
	128, 0, 645, 646, 1463, 648, 0, 650, 653, 0,
	655, 1494, 0, 659, 622, 0, 670, 671, 738, 739,
	744, 740, 745, 668, 0, 130, 132, 149, 743, 133,
	139, 0, 0, 0, 0, 0, 0, 0, 994, 0,
	0, 673, 0, 663, 622, 612, 0, 734, 729, 0,
	0, 824, 825, 0, 0, 0, 851, 862, 184, 165,
	0, 0, 0, 400, 0, 402, 0, 626, 0, 1253,
	1330, 0, 1274, 1275, -2, 0, 1231, 1315, 1317, 0,
	961, 953, 643, 647, 0, 0, 679, 0, 0, 630,
	0, 748, 0, 152, 0, 0, 0, 755, 757, 0,
	0, 117, 0, 662, 622, 673, 630, 673, 0, 0,
	826, 827, 0, 845, 1015, 847, 852, 0, 0, 399,
	0, 0, 583, 0, 0, 0, 1326, 1232, 0, 0,
	0, 654, 684, 0, 0, 0, 667, 0, 741, 675,
	135, 0, 742, 0, 634, 0, 0, 637, 0, 0,
	0, 0, 630, 622, 610, 622, 0, 0, 818, 0,
	846, 185, 185, 401, 403, 1323, 1328, 1331, -2, 1712,
	1542, 0, 1329, 1318, 1319, 0, 656, 680, 681, 0,
	676, 677, 678, 1493, 657, 658, 672, 679, 151, 631,
	0, 0, 632, 0, 0, 120, 122, 0, 660, 630,
	630, 0, 730, 1015, 166, 167, 0, 1333, 1334, 1335,
	1336, 1337, 649, 682, 0, 683, 0, 0, 0, 684,
	635, 0, 638, 0, 625, 661, 727, 673, 844, 0,
	685, 0, 688, 689, 0, 686, 669, 0, 0, 621,
	623, 624, 622, 1332, 687, 690, 691, 0, 0, 630,
	630, 0, 728, 636, 0, 0, 0, 630, 639,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 411, 3, 417, 412, 3,
	422, 423, 415, 413, 427, 414, 424, 416, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 431, 426,
	403, 405, 404, 407, 428, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 420, 3, 421, 418, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 429, 410, 430, 408,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 406, 57746, 409, 57747, 419, 57748, 425, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1027
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1033
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1042
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1073
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1076
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1088
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1098
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1105
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1145
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1156
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1171
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1175
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1179
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1190
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1202
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1228
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1232
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1236
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1242
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1246
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1252
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1258
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1268
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1275
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1282
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1289
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1296
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1306
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1316
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1326
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1339
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1351
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1355
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1361
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1365
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1371
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1382
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1387
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1392
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1397
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1402
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1407
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1412
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1416
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1419
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1428
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1450
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1457
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1467
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1476
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1485
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1490
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1504
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1505
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1509
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1519
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1527
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1531
		{
			sqlVAL.union.val = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1537
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1541
		{
			sqlVAL.union.val = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1548
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1552
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1556
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1562
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1566
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1592
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1595
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1622
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1625
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1629
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1660
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1664
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1668
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1672
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1675
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1692
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1695
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1699
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1703
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1709
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1719
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1723
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1729
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1733
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1737
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1741
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1747
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1757
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1761
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1764
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1768
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1780
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1781
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1782
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1783
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1793
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1801
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1803
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1806
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1816
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1825
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1833
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1835
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1839
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1842
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1852
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1861
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1869
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1871
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1875
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1878
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1882
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1887
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1893
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1894
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1903
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1904
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1906
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1907
		{
			return helpWith(sqllex, "CREATE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1912
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1915
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1916
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1935
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1949
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1953
		{
			sqlVAL.union.val = nil
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return helpWith(sqllex, "DELETE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1983
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1986
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1987
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1988
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1989
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1990
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1999
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2000
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2001
		{
			return helpWith(sqllex, "DROP")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2007
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2008
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2020
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2023
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2031
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2035
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2038
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2046
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2050
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2053
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2061
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2069
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2084
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2092
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2099
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2107
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2111
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2114
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2122
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2133
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2137
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2158
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2161
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2163
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2174
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2177
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2178
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2180
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2181
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "DELETE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2183
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2184
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2186
		{
			return helpWith(sqllex, "INSERT")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2187
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2189
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2190
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2192
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2195
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2196
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2198
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2199
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2207
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2208
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2212
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2216
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2226
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2233
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2237
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2241
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2251
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2257
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2263
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2277
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2281
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2292
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2312
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2316
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2320
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2323
		{
			return helpWith(sqllex, "GRANT")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2343
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2347
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2351
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2354
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2359
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2363
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2374
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2392
		{
			return helpWith(sqllex, "RESET")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2393
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2401
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2405
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2408
		{
			return helpWith(sqllex, "RESET")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2416
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2419
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2430
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2433
		{
			return helpWith(sqllex, "USE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2437
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2438
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2439
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2440
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2441
		{
			return helpWith(sqllex, "USE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2442
		{
			return unimplemented(sqllex, "set local")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2458
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2473
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2476
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2502
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2510
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2516
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2526
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2530
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2534
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2553
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2557
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2560
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2566
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2582
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2586
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2591
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2608
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2611
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2613
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2616
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2620
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2631
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2648
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2655
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2661
		{
			return unimplemented(sqllex, "set from current")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2662
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2670
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2675
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2682
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2686
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2692
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2703
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2709
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2719
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2723
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2727
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2731
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2735
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2741
		{
			sqlVAL.union.val = tree.Low
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2745
		{
			sqlVAL.union.val = tree.Normal
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2749
		{
			sqlVAL.union.val = tree.High
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2760
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2764
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2773
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2777
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2793
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2794
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2795
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2796
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2799
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2800
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2801
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2802
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2803
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2804
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2806
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2807
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2808
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2809
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2810
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2811
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2812
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2813
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2815
		{
			return helpWith(sqllex, "SHOW")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2822
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2823
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2824
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2835
		{
			sqlVAL.str = "client_encoding"
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2838
		{
			sqlVAL.str = "timezone"
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2839
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2853
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2857
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2860
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2871
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2879
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2887
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2894
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2901
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2907
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2917
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2921
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2924
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2926
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2929
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2937
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2940
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2948
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2951
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2964
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2972
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2980
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2983
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2985
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2988
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2990
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2993
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3001
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3004
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3006
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3009
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3017
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3020
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3022
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3026
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3036
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3048
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3051
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3053
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3056
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3058
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3062
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3065
		{
			sqlVAL.union.val = true
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3066
		{
			sqlVAL.union.val = false
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3074
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3077
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3079
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3083
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3093
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3102
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3111
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3114
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3121
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3125
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3128
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3135
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3147
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3152
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3157
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3169
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3172
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3180
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3183
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3190
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3193
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3201
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3204
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3212
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3215
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3219
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3224
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3229
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3236
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3244
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3251
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3256
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3268
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3272
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3275
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3283
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3290
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3295
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3415
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3419
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3423
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3462
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3466
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3471
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3475
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3484
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3491
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3495
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3507
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3516
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3519
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3555
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3567
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3581
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3592
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3606
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3612
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3616
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3622
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3628
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3634
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3642
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3649
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3654
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3659
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3665
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3672
		{
			sqlVAL.str = ""
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3679
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3685
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3692
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3699
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3705
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3715
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3725
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3735
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3746
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3761
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3767
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3771
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3775
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3779
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3783
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3787
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3791
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3809
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3813
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3817
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3821
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3825
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3829
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3833
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3841
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3845
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3849
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3856
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3866
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3878
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3900
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3905
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3911
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3917
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3928
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3938
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3962
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3966
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3972
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3976
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3981
		{
			return unimplemented(sqllex, "match full")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3982
		{
			return unimplemented(sqllex, "match partial")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3983
		{
			return unimplemented(sqllex, "match simple")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3984
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3991
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3995
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3999
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4003
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4007
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4013
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4019
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4027
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4031
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4035
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4039
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4043
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4049
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4053
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4075
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4083
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4091
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4095
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4098
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4102
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4103
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4105
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4106
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4107
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4110
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4112
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4114
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4116
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4117
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4119
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4120
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4122
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4131
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4134
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4142
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4146
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4149
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4153
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4157
		{
			sqlVAL.union.val = nil
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4167
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4171
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4174
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4182
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4189
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4207
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4220
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4234
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4243
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4252
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4257
		{
			sqlVAL.union.val = true
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4261
		{
			sqlVAL.union.val = false
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4265
		{
			sqlVAL.union.val = false
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4271
		{
			sqlVAL.union.val = true
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4275
		{
			sqlVAL.union.val = false
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4281
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4285
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4297
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4298
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4301
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4302
		{
			sqlVAL.str = ""
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4305
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4306
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4310
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4314
		{
			sqlVAL.union.val = tree.Descending
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4318
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4324
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4331
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4335
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4341
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4345
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4349
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4353
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4357
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4359
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4363
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4367
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4373
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4377
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4383
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4387
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4392
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4393
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4396
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4397
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4408
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4418
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4427
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4430
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4438
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4441
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4445
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4446
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4447
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4463
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4466
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4468
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4471
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4481
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4484
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4486
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4489
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4493
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4498
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4499
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4500
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4508
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4515
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4518
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4519
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4523
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4527
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4531
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4535
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4541
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4545
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4551
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4555
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4561
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4565
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4578
		{
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4580
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4584
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4588
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4592
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4598
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4604
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4610
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4614
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4624
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4634
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4644
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4648
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4652
		{
			sqlVAL.str = ""
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4658
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4662
		{
			sqlVAL.str = ""
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4668
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4672
		{
			sqlVAL.str = ""
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4678
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4682
		{
			sqlVAL.str = ""
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4687
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4688
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4700
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4707
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4714
		{
			return helpWith(sqllex, "INSERT")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4725
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4732
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4736
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4744
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4750
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4754
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4758
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4764
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4768
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4788
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4792
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4796
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4802
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4806
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4808
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4814
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4819
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4823
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 852:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4840
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4851
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4855
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4856
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4860
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4877
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4880
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4927
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4933
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4937
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4952
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4956
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4960
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4964
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4968
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4972
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4979
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5014
		{
			return helpWith(sqllex, "SELECT")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5015
		{
			return helpWith(sqllex, "VALUES")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5016
		{
			return helpWith(sqllex, "TABLE")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5038
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5051
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5065
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5077
		{
			return helpWith(sqllex, "SELECT")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5081
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5090
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5099
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5114
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5121
		{
			return helpWith(sqllex, "TABLE")
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5133
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5136
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5137
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5141
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5151
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5159
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5160
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5167
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5170
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5171
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5175
		{
			sqlVAL.union.val = true
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5179
		{
			sqlVAL.union.val = false
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5183
		{
			sqlVAL.union.val = false
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5189
		{
			sqlVAL.union.val = true
		}
	case 908:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5195
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5200
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5201
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5204
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5205
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5209
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5213
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5225
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5235
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5239
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5243
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5252
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5261
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5272
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5276
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5285
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5291
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5298
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5314
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5318
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5322
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5328
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5329
		{
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5332
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5333
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5350
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 941:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5354
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5360
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5364
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5383
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5386
		{
			return helpWith(sqllex, "VALUES")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5388
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5400
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5403
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5405
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5411
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5421
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5425
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5431
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5437
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5442
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5465
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5469
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5473
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5477
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5504
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5518
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5525
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5527
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5531
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5535
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5540
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5556
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5562
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5566
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5572
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5574
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5578
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5584
		{
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5586
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5589
		{
			sqlVAL.union.val = nil
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5591
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5595
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5605
		{
			sqlVAL.union.val = true
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5609
		{
			sqlVAL.union.val = false
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5629
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5633
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5637
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5641
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5645
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5649
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5655
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5659
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5666
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5672
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5679
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5685
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5689
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5693
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5697
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5703
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5704
		{
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5715
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5719
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5724
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5725
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5726
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5727
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5731
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5735
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5748
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5752
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5756
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5762
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5766
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5778
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5792
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5801
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5812
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5816
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5823
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5825
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5834
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5838
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5842
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5851
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5869
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5873
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5877
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5881
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5885
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5889
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5893
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5897
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5901
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5905
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5909
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5913
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5917
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5921
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5925
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5929
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5933
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5953
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5961
		{
			sqlVAL.union.val = nil
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5968
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5972
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5976
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5980
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5984
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5988
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5992
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5996
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6000
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6004
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6008
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6012
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6022
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6026
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6035
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6044
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6053
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6057
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6064
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6068
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6072
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6076
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6080
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6086
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6090
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6096
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6107
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6113
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6125
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6139
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6143
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6148
		{
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6149
		{
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6154
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6158
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6170
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6174
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6178
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6191
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6197
		{
			sqlVAL.union.val = tree.Year
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6201
		{
			sqlVAL.union.val = tree.Month
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6205
		{
			sqlVAL.union.val = tree.Day
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6209
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6213
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6217
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6223
		{
			sqlVAL.union.val = tree.Month
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6227
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6231
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6235
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6239
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6243
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6247
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6251
		{
			sqlVAL.union.val = nil
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6257
		{
			sqlVAL.union.val = tree.Second
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6260
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6284
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6288
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6292
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6295
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6304
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6308
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6312
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6320
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6324
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6328
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6332
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6336
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6340
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6344
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6348
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6352
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6368
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6376
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6380
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6384
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6404
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6412
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6416
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6420
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6428
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6480
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6484
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6488
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6492
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6496
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6504
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6508
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6516
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6520
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6524
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6528
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6532
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6536
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6540
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6544
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6547
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6549
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6565
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6581
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6585
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6589
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6593
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6597
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6601
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6609
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6613
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6630
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6634
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6653
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6657
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6661
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6665
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6669
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6677
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6681
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6685
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6689
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6693
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6697
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6701
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6705
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6709
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6713
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6717
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6721
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6725
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6729
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6733
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6737
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6741
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6745
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6749
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6753
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6757
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6761
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6775
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6783
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6819
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6824
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6833
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6838
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6842
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6846
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6851
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6855
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6859
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6863
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6868
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6883
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6887
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6890
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6891
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6893
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6897
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6901
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6904
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6915
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6922
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6931
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6932
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6936
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6938
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6942
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6948
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6952
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6956
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6960
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6974
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6986
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6990
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6994
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7002
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7006
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7024
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7026
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7029
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7031
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7034
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7039
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7044
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7046
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7049
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7051
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7054
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7056
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7059
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7068
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7069
		{
			return unimplemented(sqllex, "treat")
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7071
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7075
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7083
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7087
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7090
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7092
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7095
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7100
		{
			return unimplemented(sqllex, "within group")
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7101
		{
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7105
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7109
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7116
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7120
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7126
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7136
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7144
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7148
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7179
		{
			sqlVAL.str = ""
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7185
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7189
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7200
		{
			bounds := sqlDollar[2].union.windowFrameBounds()
			startBound := bounds.StartBound
			endBound := bounds.EndBound
			switch {
			case startBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			}
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: bounds,
			}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7224
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7231
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7237
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7250
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7278
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7282
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7286
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7290
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValuePreceding,
			}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7297
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValueFollowing,
			}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7313
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7317
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7323
		{
			sqlVAL.union.val = tree.Any
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7327
		{
			sqlVAL.union.val = tree.Some
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7331
		{
			sqlVAL.union.val = tree.All
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7336
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7337
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7338
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7339
		{
			sqlVAL.union.val = tree.Div
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7341
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7342
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7343
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7344
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7345
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7346
		{
			sqlVAL.union.val = tree.LT
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7347
		{
			sqlVAL.union.val = tree.GT
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7348
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7349
		{
			sqlVAL.union.val = tree.LE
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7350
		{
			sqlVAL.union.val = tree.GE
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7351
		{
			sqlVAL.union.val = tree.NE
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7355
		{
			sqlVAL.union.val = tree.Like
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7356
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7357
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7358
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7370
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7376
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7386
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7396
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7400
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7406
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7416
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7420
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7442
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7446
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7450
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7456
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7463
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7467
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7484
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7488
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7492
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7496
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7500
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7506
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7512
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7518
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7522
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7526
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7532
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7536
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7547
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7554
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7558
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7570
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7574
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7581
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7587
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7591
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7598
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7604
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7608
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7613
		{
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7614
		{
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7618
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7622
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7628
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7637
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7641
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7645
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7653
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7657
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7663
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7667
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7673
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7680
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7708
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7722
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7733
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7737
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7741
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7745
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7748
		{
			return unimplemented(sqllex, "func const")
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7754
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7757
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7759
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7763
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7767
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7774
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7778
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7787
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7798
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7808
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7904
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7911
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7919
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7933
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7937
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7941
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7954
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7972
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7982
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7986
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8000
		{
			sqlVAL.str = ""
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8006
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8010
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
