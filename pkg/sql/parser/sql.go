// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/geo/geopb"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}
func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:72

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) shardedIndexDef() *tree.ShardedIndexDef {
	return u.val.(*tree.ShardedIndexDef)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) unresolvedObjectNames() []*tree.UnresolvedObjectName {
	return u.val.([]*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) likeTableOption() tree.LikeTableOption {
	return u.val.(tree.LikeTableOption)
}
func (u *sqlSymUnion) likeTableOptionList() []tree.LikeTableOption {
	return u.val.([]tree.LikeTableOption)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) storageParam() tree.StorageParam {
	return u.val.(tree.StorageParam)
}
func (u *sqlSymUnion) storageParams() []tree.StorageParam {
	if params, ok := u.val.([]tree.StorageParam); ok {
		return params
	}
	return nil
}
func (u *sqlSymUnion) persistenceType() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) lockingClause() tree.LockingClause {
	return u.val.(tree.LockingClause)
}
func (u *sqlSymUnion) lockingItem() *tree.LockingItem {
	return u.val.(*tree.LockingItem)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) lockingWaitPolicy() tree.LockingWaitPolicy {
	return u.val.(tree.LockingWaitPolicy)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) nullsOrder() tree.NullsOrder {
	return u.val.(tree.NullsOrder)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) createTableOnCommitSetting() tree.CreateTableOnCommitSetting {
	return u.val.(tree.CreateTableOnCommitSetting)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) intervalTypeMetadata() types.IntervalTypeMetadata {
	return u.val.(types.IntervalTypeMetadata)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func (u *sqlSymUnion) geoFigure() geopb.Shape {
	return u.val.(geopb.Shape)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}
func (u *sqlSymUnion) typeReference() tree.ResolvableTypeReference {
	return u.val.(tree.ResolvableTypeReference)
}
func (u *sqlSymUnion) typeReferences() []tree.ResolvableTypeReference {
	return u.val.([]tree.ResolvableTypeReference)
}
func (u *sqlSymUnion) alterTypeAddValuePlacement() *tree.AlterTypeAddValuePlacement {
	return u.val.(*tree.AlterTypeAddValuePlacement)
}

//line sql-gen.y:653
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AFTER = lex.AFTER
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ALWAYS = lex.ALWAYS
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const ATTRIBUTE = lex.ATTRIBUTE
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEFORE = lex.BEFORE
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BUCKET_COUNT = lex.BUCKET_COUNT
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BUNDLE = lex.BUNDLE
const BY = lex.BY
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CBRT = lex.CBRT
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLOSE = lex.CLOSE
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMENTS = lex.COMMENTS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CREATEROLE = lex.CREATEROLE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEFAULTS = lex.DEFAULTS
const DEALLOCATE = lex.DEALLOCATE
const DECLARE = lex.DECLARE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXCLUDING = lex.EXCLUDING
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GENERATED = lex.GENERATED
const GEOGRAPHY = lex.GEOGRAPHY
const GEOMETRY = lex.GEOMETRY
const GEOMETRYCOLLECTION = lex.GEOMETRYCOLLECTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IDENTITY = lex.IDENTITY
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCLUDING = lex.INCLUDING
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LAST = lex.LAST
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LINESTRING = lex.LINESTRING
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOGIN = lex.LOGIN
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const MULTILINESTRING = lex.MULTILINESTRING
const MULTIPOINT = lex.MULTIPOINT
const MULTIPOLYGON = lex.MULTIPOLYGON
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NOCREATEROLE = lex.NOCREATEROLE
const NOLOGIN = lex.NOLOGIN
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NONE = lex.NONE
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OWNER = lex.OWNER
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POINT = lex.POINT
const POLYGON = lex.POLYGON
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRESERVE = lex.PRESERVE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLIC = lex.PUBLIC
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORAGE = lex.STORAGE
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SQRT = lex.SQRT
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const UNTIL = lex.UNTIL
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEFORE",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BUCKET_COUNT",
	"BOOLEAN",
	"BOTH",
	"BUNDLE",
	"BY",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CBRT",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CREATEROLE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFAULTS",
	"DEALLOCATE",
	"DECLARE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GENERATED",
	"GEOGRAPHY",
	"GEOMETRY",
	"GEOMETRYCOLLECTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IDENTITY",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCLUDING",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LAST",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LINESTRING",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOGIN",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"MULTILINESTRING",
	"MULTIPOINT",
	"MULTIPOLYGON",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOCREATEROLE",
	"NOLOGIN",
	"NO_INDEX_JOIN",
	"NONE",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OWNER",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POINT",
	"POLYGON",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRESERVE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLIC",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORAGE",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SQRT",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"UNTIL",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:10660

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	-2, 1167,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	199, 991,
	211, 991,
	226, 274,
	320, 274,
	329, 788,
	357, 274,
	366, 788,
	403, 788,
	427, 274,
	452, 788,
	-2, 0,
	-1, 78,
	226, 278,
	-2, 0,
	-1, 79,
	118, 1167,
	205, 1167,
	437, 1167,
	438, 1167,
	-2, 0,
	-1, 91,
	131, 1138,
	148, 1138,
	161, 1138,
	208, 1138,
	238, 1138,
	280, 1138,
	290, 1138,
	432, 1138,
	-2, 1109,
	-1, 123,
	138, 697,
	225, 697,
	323, 677,
	371, 677,
	420, 697,
	-2, 0,
	-1, 124,
	4, 1169,
	21, 1169,
	22, 1169,
	23, 1169,
	24, 1169,
	25, 1169,
	26, 1169,
	28, 1169,
	29, 1169,
	35, 1169,
	40, 1169,
	41, 1169,
	42, 1169,
	43, 1169,
	44, 1169,
	45, 1169,
	46, 1169,
	47, 1169,
	48, 1169,
	50, 1169,
	51, 1169,
	52, 1169,
	54, 1169,
	55, 1169,
	56, 1169,
	57, 1169,
	58, 1169,
	62, 1169,
	63, 1169,
	64, 1169,
	65, 1169,
	67, 1169,
	68, 1169,
	69, 1169,
	73, 1169,
	74, 1169,
	75, 1169,
	76, 1169,
	77, 1169,
	78, 1169,
	79, 1169,
	82, 1169,
	83, 1169,
	84, 1169,
	85, 1169,
	87, 1169,
	89, 1169,
	90, 1169,
	91, 1169,
	93, 1169,
	95, 1169,
	96, 1169,
	104, 1169,
	105, 1169,
	106, 1169,
	107, 1169,
	109, 1169,
	110, 1169,
	111, 1169,
	113, 1169,
	114, 1169,
	115, 1169,
	117, 1169,
	118, 1169,
	120, 1169,
	123, 1169,
	124, 1169,
	125, 1169,
	127, 1169,
	129, 1169,
	130, 1169,
	132, 1169,
	133, 1169,
	134, 1169,
	135, 1169,
	136, 1169,
	137, 1169,
	138, 1169,
	139, 1169,
	140, 1169,
	141, 1169,
	142, 1169,
	143, 1169,
	144, 1169,
	145, 1169,
	147, 1169,
	153, 1169,
	154, 1169,
	155, 1169,
	156, 1169,
	160, 1169,
	162, 1169,
	166, 1169,
	167, 1169,
	168, 1169,
	169, 1169,
	170, 1169,
	171, 1169,
	173, 1169,
	174, 1169,
	176, 1169,
	177, 1169,
	179, 1169,
	180, 1169,
	181, 1169,
	182, 1169,
	183, 1169,
	184, 1169,
	185, 1169,
	186, 1169,
	187, 1169,
	189, 1169,
	190, 1169,
	192, 1169,
	193, 1169,
	194, 1169,
	195, 1169,
	199, 1169,
	200, 1169,
	201, 1169,
	202, 1169,
	205, 1169,
	206, 1169,
	207, 1169,
	209, 1169,
	211, 1169,
	213, 1169,
	215, 1169,
	216, 1169,
	217, 1169,
	219, 1169,
	223, 1169,
	224, 1169,
	225, 1169,
	226, 1169,
	227, 1169,
	229, 1169,
	230, 1169,
	232, 1169,
	233, 1169,
	235, 1169,
	236, 1169,
	239, 1169,
	240, 1169,
	241, 1169,
	244, 1169,
	245, 1169,
	246, 1169,
	247, 1169,
	249, 1169,
	250, 1169,
	251, 1169,
	252, 1169,
	253, 1169,
	254, 1169,
	255, 1169,
	256, 1169,
	257, 1169,
	258, 1169,
	259, 1169,
	261, 1169,
	263, 1169,
	264, 1169,
	265, 1169,
	266, 1169,
	267, 1169,
	269, 1169,
	271, 1169,
	273, 1169,
	275, 1169,
	276, 1169,
	277, 1169,
	278, 1169,
	279, 1169,
	282, 1169,
	285, 1169,
	286, 1169,
	287, 1169,
	288, 1169,
	291, 1169,
	292, 1169,
	293, 1169,
	295, 1169,
	297, 1169,
	298, 1169,
	299, 1169,
	300, 1169,
	301, 1169,
	302, 1169,
	303, 1169,
	304, 1169,
	305, 1169,
	306, 1169,
	307, 1169,
	309, 1169,
	310, 1169,
	311, 1169,
	312, 1169,
	313, 1169,
	314, 1169,
	315, 1169,
	316, 1169,
	317, 1169,
	319, 1169,
	321, 1169,
	322, 1169,
	323, 1169,
	324, 1169,
	325, 1169,
	326, 1169,
	327, 1169,
	328, 1169,
	329, 1169,
	330, 1169,
	337, 1169,
	339, 1169,
	340, 1169,
	341, 1169,
	342, 1169,
	343, 1169,
	344, 1169,
	345, 1169,
	346, 1169,
	348, 1169,
	350, 1169,
	351, 1169,
	352, 1169,
	353, 1169,
	354, 1169,
	355, 1169,
	357, 1169,
	358, 1169,
	359, 1169,
	360, 1169,
	361, 1169,
	362, 1169,
	363, 1169,
	364, 1169,
	366, 1169,
	367, 1169,
	368, 1169,
	369, 1169,
	370, 1169,
	371, 1169,
	373, 1169,
	374, 1169,
	375, 1169,
	376, 1169,
	377, 1169,
	379, 1169,
	380, 1169,
	381, 1169,
	383, 1169,
	385, 1169,
	386, 1169,
	387, 1169,
	388, 1169,
	389, 1169,
	390, 1169,
	391, 1169,
	392, 1169,
	393, 1169,
	394, 1169,
	395, 1169,
	396, 1169,
	397, 1169,
	399, 1169,
	400, 1169,
	402, 1169,
	404, 1169,
	405, 1169,
	406, 1169,
	407, 1169,
	408, 1169,
	409, 1169,
	410, 1169,
	412, 1169,
	413, 1169,
	414, 1169,
	415, 1169,
	416, 1169,
	418, 1169,
	420, 1169,
	421, 1169,
	422, 1169,
	423, 1169,
	424, 1169,
	426, 1169,
	427, 1169,
	428, 1169,
	430, 1169,
	431, 1169,
	434, 1169,
	435, 1169,
	436, 1169,
	437, 1169,
	438, 1169,
	439, 1169,
	440, 1169,
	442, 1169,
	445, 1169,
	446, 1169,
	447, 1169,
	448, 1169,
	449, 1169,
	450, 1169,
	452, 1169,
	453, 1169,
	454, 1169,
	459, 1169,
	460, 1169,
	461, 1169,
	462, 1169,
	463, 1169,
	464, 1169,
	-2, 0,
	-1, 125,
	1, 1043,
	215, 1043,
	319, 1043,
	327, 1043,
	467, 1043,
	490, 1043,
	-2, 0,
	-1, 127,
	1, 1043,
	490, 1043,
	-2, 0,
	-1, 128,
	1, 1043,
	490, 1043,
	-2, 0,
	-1, 129,
	1, 1043,
	417, 1043,
	490, 1043,
	-2, 0,
	-1, 156,
	131, 1137,
	148, 1137,
	161, 1137,
	208, 1137,
	238, 1137,
	280, 1137,
	290, 1137,
	432, 1137,
	-2, 1112,
	-1, 189,
	4, 1176,
	5, 1176,
	6, 1176,
	7, 1176,
	8, 1176,
	9, 1176,
	10, 1176,
	21, 1176,
	22, 1176,
	23, 1176,
	24, 1176,
	25, 1176,
	26, 1176,
	28, 1176,
	29, 1176,
	35, 1176,
	36, 1176,
	40, 1176,
	41, 1176,
	42, 1176,
	43, 1176,
	44, 1176,
	45, 1176,
	46, 1176,
	47, 1176,
	48, 1176,
	50, 1176,
	51, 1176,
	52, 1176,
	54, 1176,
	55, 1176,
	56, 1176,
	57, 1176,
	58, 1176,
	59, 1176,
	60, 1176,
	61, 1176,
	62, 1176,
	63, 1176,
	64, 1176,
	65, 1176,
	67, 1176,
	68, 1176,
	69, 1176,
	71, 1176,
	73, 1176,
	74, 1176,
	75, 1176,
	76, 1176,
	77, 1176,
	78, 1176,
	79, 1176,
	82, 1176,
	83, 1176,
	84, 1176,
	85, 1176,
	87, 1176,
	89, 1176,
	90, 1176,
	91, 1176,
	93, 1176,
	94, 1176,
	95, 1176,
	96, 1176,
	97, 1176,
	98, 1176,
	99, 1176,
	100, 1176,
	101, 1176,
	102, 1176,
	103, 1176,
	104, 1176,
	105, 1176,
	106, 1176,
	107, 1176,
	108, 1176,
	109, 1176,
	110, 1176,
	111, 1176,
	112, 1176,
	113, 1176,
	114, 1176,
	115, 1176,
	117, 1176,
	118, 1176,
	120, 1176,
	123, 1176,
	124, 1176,
	125, 1176,
	127, 1176,
	129, 1176,
	130, 1176,
	132, 1176,
	133, 1176,
	134, 1176,
	135, 1176,
	136, 1176,
	137, 1176,
	138, 1176,
	139, 1176,
	140, 1176,
	141, 1176,
	142, 1176,
	143, 1176,
	144, 1176,
	145, 1176,
	146, 1176,
	147, 1176,
	153, 1176,
	154, 1176,
	155, 1176,
	156, 1176,
	160, 1176,
	162, 1176,
	165, 1176,
	166, 1176,
	167, 1176,
	168, 1176,
	169, 1176,
	170, 1176,
	171, 1176,
	173, 1176,
	174, 1176,
	176, 1176,
	177, 1176,
	179, 1176,
	180, 1176,
	181, 1176,
	182, 1176,
	183, 1176,
	184, 1176,
	185, 1176,
	186, 1176,
	187, 1176,
	188, 1176,
	189, 1176,
	190, 1176,
	192, 1176,
	193, 1176,
	194, 1176,
	195, 1176,
	199, 1176,
	200, 1176,
	201, 1176,
	202, 1176,
	204, 1176,
	205, 1176,
	206, 1176,
	207, 1176,
	209, 1176,
	211, 1176,
	212, 1176,
	213, 1176,
	214, 1176,
	215, 1176,
	216, 1176,
	217, 1176,
	218, 1176,
	219, 1176,
	223, 1176,
	224, 1176,
	225, 1176,
	226, 1176,
	227, 1176,
	229, 1176,
	230, 1176,
	232, 1176,
	233, 1176,
	234, 1176,
	235, 1176,
	236, 1176,
	237, 1176,
	239, 1176,
	240, 1176,
	241, 1176,
	242, 1176,
	243, 1176,
	244, 1176,
	245, 1176,
	246, 1176,
	247, 1176,
	249, 1176,
	250, 1176,
	251, 1176,
	252, 1176,
	253, 1176,
	254, 1176,
	255, 1176,
	256, 1176,
	257, 1176,
	258, 1176,
	259, 1176,
	261, 1176,
	262, 1176,
	263, 1176,
	264, 1176,
	265, 1176,
	266, 1176,
	267, 1176,
	268, 1176,
	269, 1176,
	270, 1176,
	271, 1176,
	272, 1176,
	273, 1176,
	274, 1176,
	275, 1176,
	276, 1176,
	277, 1176,
	278, 1176,
	279, 1176,
	282, 1176,
	286, 1176,
	287, 1176,
	288, 1176,
	291, 1176,
	292, 1176,
	293, 1176,
	294, 1176,
	295, 1176,
	296, 1176,
	297, 1176,
	298, 1176,
	299, 1176,
	300, 1176,
	301, 1176,
	302, 1176,
	303, 1176,
	304, 1176,
	305, 1176,
	306, 1176,
	307, 1176,
	309, 1176,
	310, 1176,
	311, 1176,
	312, 1176,
	313, 1176,
	314, 1176,
	315, 1176,
	316, 1176,
	317, 1176,
	319, 1176,
	321, 1176,
	322, 1176,
	323, 1176,
	324, 1176,
	325, 1176,
	326, 1176,
	327, 1176,
	328, 1176,
	329, 1176,
	330, 1176,
	337, 1176,
	339, 1176,
	340, 1176,
	341, 1176,
	342, 1176,
	343, 1176,
	344, 1176,
	345, 1176,
	346, 1176,
	348, 1176,
	349, 1176,
	350, 1176,
	351, 1176,
	352, 1176,
	353, 1176,
	354, 1176,
	355, 1176,
	357, 1176,
	358, 1176,
	359, 1176,
	360, 1176,
	361, 1176,
	362, 1176,
	363, 1176,
	364, 1176,
	366, 1176,
	367, 1176,
	368, 1176,
	369, 1176,
	370, 1176,
	371, 1176,
	372, 1176,
	373, 1176,
	374, 1176,
	375, 1176,
	376, 1176,
	377, 1176,
	378, 1176,
	379, 1176,
	380, 1176,
	381, 1176,
	383, 1176,
	385, 1176,
	386, 1176,
	387, 1176,
	388, 1176,
	389, 1176,
	390, 1176,
	391, 1176,
	392, 1176,
	393, 1176,
	394, 1176,
	395, 1176,
	396, 1176,
	397, 1176,
	399, 1176,
	400, 1176,
	401, 1176,
	402, 1176,
	404, 1176,
	405, 1176,
	406, 1176,
	407, 1176,
	408, 1176,
	409, 1176,
	410, 1176,
	412, 1176,
	413, 1176,
	414, 1176,
	415, 1176,
	416, 1176,
	418, 1176,
	420, 1176,
	421, 1176,
	422, 1176,
	423, 1176,
	424, 1176,
	425, 1176,
	426, 1176,
	427, 1176,
	428, 1176,
	430, 1176,
	431, 1176,
	433, 1176,
	434, 1176,
	435, 1176,
	436, 1176,
	437, 1176,
	438, 1176,
	439, 1176,
	440, 1176,
	441, 1176,
	442, 1176,
	445, 1176,
	446, 1176,
	447, 1176,
	448, 1176,
	449, 1176,
	450, 1176,
	452, 1176,
	453, 1176,
	454, 1176,
	459, 1176,
	460, 1176,
	461, 1176,
	462, 1176,
	463, 1176,
	464, 1176,
	465, 1176,
	471, 1176,
	478, 1176,
	479, 1176,
	480, 1176,
	487, 1176,
	491, 1176,
	-2, 0,
	-1, 572,
	164, 1881,
	417, 1881,
	470, 1881,
	489, 1881,
	-2, 0,
	-1, 573,
	164, 1960,
	417, 1960,
	470, 1960,
	489, 1960,
	-2, 0,
	-1, 574,
	164, 1869,
	417, 1869,
	470, 1869,
	489, 1869,
	-2, 0,
	-1, 576,
	164, 2050,
	417, 2050,
	470, 2050,
	489, 2050,
	-2, 0,
	-1, 578,
	164, 2079,
	417, 2079,
	470, 2079,
	489, 2079,
	-2, 0,
	-1, 585,
	164, 1975,
	417, 1975,
	470, 1975,
	489, 1975,
	-2, 535,
	-1, 614,
	489, 1822,
	492, 1822,
	-2, 750,
	-1, 615,
	489, 1824,
	492, 1824,
	-2, 751,
	-1, 616,
	489, 1823,
	492, 1823,
	-2, 752,
	-1, 617,
	492, 1757,
	-2, 753,
	-1, 659,
	452, 966,
	-2, 789,
	-1, 697,
	4, 989,
	21, 989,
	22, 989,
	23, 989,
	24, 989,
	25, 989,
	26, 989,
	28, 989,
	29, 989,
	35, 989,
	40, 989,
	41, 989,
	42, 989,
	43, 989,
	44, 989,
	45, 989,
	46, 989,
	47, 989,
	48, 989,
	50, 989,
	51, 989,
	52, 989,
	54, 989,
	55, 989,
	56, 989,
	57, 989,
	58, 989,
	62, 989,
	63, 989,
	64, 989,
	65, 989,
	67, 989,
	68, 989,
	69, 989,
	73, 989,
	74, 989,
	75, 989,
	76, 989,
	77, 989,
	78, 989,
	79, 989,
	82, 989,
	83, 989,
	84, 989,
	85, 989,
	87, 989,
	89, 989,
	90, 989,
	91, 989,
	93, 989,
	95, 989,
	96, 989,
	104, 989,
	105, 989,
	106, 989,
	107, 989,
	109, 989,
	110, 989,
	111, 989,
	113, 989,
	114, 989,
	115, 989,
	117, 989,
	118, 989,
	120, 989,
	123, 989,
	124, 989,
	125, 989,
	127, 989,
	129, 989,
	130, 989,
	132, 989,
	133, 989,
	134, 989,
	135, 989,
	136, 989,
	137, 989,
	138, 989,
	139, 989,
	140, 989,
	141, 989,
	142, 989,
	143, 989,
	144, 989,
	145, 989,
	147, 989,
	153, 989,
	154, 989,
	155, 989,
	156, 989,
	160, 989,
	162, 989,
	166, 989,
	167, 989,
	168, 989,
	169, 989,
	170, 989,
	171, 989,
	173, 989,
	174, 989,
	176, 989,
	177, 989,
	179, 989,
	180, 989,
	181, 989,
	182, 989,
	183, 989,
	184, 989,
	185, 989,
	186, 989,
	187, 989,
	189, 989,
	190, 989,
	192, 989,
	193, 989,
	194, 989,
	195, 989,
	199, 989,
	200, 989,
	201, 989,
	202, 989,
	205, 989,
	206, 989,
	207, 989,
	209, 989,
	211, 989,
	213, 989,
	215, 989,
	216, 989,
	217, 989,
	219, 989,
	223, 989,
	224, 989,
	225, 989,
	226, 989,
	227, 989,
	229, 989,
	230, 989,
	232, 989,
	233, 989,
	235, 989,
	236, 989,
	239, 989,
	240, 989,
	241, 989,
	244, 989,
	245, 989,
	246, 989,
	247, 989,
	249, 989,
	250, 989,
	251, 989,
	252, 989,
	253, 989,
	254, 989,
	255, 989,
	256, 989,
	257, 989,
	258, 989,
	259, 989,
	261, 989,
	263, 989,
	264, 989,
	265, 989,
	266, 989,
	267, 989,
	269, 989,
	271, 989,
	273, 989,
	275, 989,
	276, 989,
	277, 989,
	278, 989,
	279, 989,
	282, 989,
	286, 989,
	287, 989,
	288, 989,
	291, 989,
	292, 989,
	293, 989,
	295, 989,
	297, 989,
	298, 989,
	299, 989,
	300, 989,
	301, 989,
	302, 989,
	303, 989,
	304, 989,
	305, 989,
	306, 989,
	307, 989,
	309, 989,
	310, 989,
	311, 989,
	312, 989,
	313, 989,
	314, 989,
	315, 989,
	316, 989,
	317, 989,
	319, 989,
	321, 989,
	322, 989,
	323, 989,
	324, 989,
	325, 989,
	326, 989,
	327, 989,
	328, 989,
	329, 989,
	330, 989,
	337, 989,
	339, 989,
	340, 989,
	341, 989,
	342, 989,
	343, 989,
	344, 989,
	345, 989,
	346, 989,
	348, 989,
	350, 989,
	351, 989,
	352, 989,
	353, 989,
	354, 989,
	355, 989,
	357, 989,
	358, 989,
	359, 989,
	360, 989,
	361, 989,
	362, 989,
	363, 989,
	364, 989,
	366, 989,
	367, 989,
	368, 989,
	369, 989,
	370, 989,
	371, 989,
	373, 989,
	374, 989,
	375, 989,
	376, 989,
	377, 989,
	379, 989,
	380, 989,
	381, 989,
	383, 989,
	385, 989,
	386, 989,
	387, 989,
	388, 989,
	389, 989,
	390, 989,
	391, 989,
	392, 989,
	393, 989,
	394, 989,
	395, 989,
	396, 989,
	397, 989,
	399, 989,
	400, 989,
	402, 989,
	404, 989,
	405, 989,
	406, 989,
	407, 989,
	408, 989,
	409, 989,
	410, 989,
	412, 989,
	413, 989,
	414, 989,
	415, 989,
	416, 989,
	418, 989,
	420, 989,
	421, 989,
	422, 989,
	423, 989,
	424, 989,
	426, 989,
	427, 989,
	428, 989,
	430, 989,
	431, 989,
	434, 989,
	435, 989,
	436, 989,
	437, 989,
	438, 989,
	439, 989,
	440, 989,
	442, 989,
	445, 989,
	446, 989,
	447, 989,
	448, 989,
	449, 989,
	450, 989,
	452, 989,
	453, 989,
	454, 989,
	459, 989,
	460, 989,
	461, 989,
	462, 989,
	463, 989,
	464, 989,
	-2, 0,
	-1, 762,
	323, 678,
	371, 678,
	-2, 0,
	-1, 763,
	323, 677,
	371, 677,
	-2, 625,
	-1, 767,
	1, 707,
	486, 707,
	488, 707,
	490, 707,
	-2, 0,
	-1, 768,
	1, 749,
	161, 749,
	486, 749,
	488, 749,
	490, 749,
	-2, 0,
	-1, 776,
	1, 681,
	486, 681,
	488, 681,
	490, 681,
	-2, 0,
	-1, 779,
	1, 707,
	486, 707,
	488, 707,
	490, 707,
	-2, 0,
	-1, 780,
	1, 709,
	486, 709,
	488, 709,
	490, 709,
	-2, 0,
	-1, 781,
	1, 712,
	486, 712,
	488, 712,
	490, 712,
	-2, 0,
	-1, 786,
	1, 728,
	486, 728,
	488, 728,
	490, 728,
	-2, 0,
	-1, 787,
	1, 730,
	486, 730,
	488, 730,
	490, 730,
	-2, 0,
	-1, 832,
	148, 1178,
	161, 1178,
	238, 1178,
	280, 1178,
	-2, 1116,
	-1, 846,
	148, 1177,
	161, 1177,
	238, 1177,
	280, 1177,
	-2, 1113,
	-1, 872,
	489, 1821,
	-2, 543,
	-1, 900,
	5, 1813,
	487, 1811,
	-2, 1802,
	-1, 908,
	5, 1834,
	487, 1831,
	-2, 1822,
	-1, 909,
	5, 1835,
	487, 1832,
	-2, 1823,
	-1, 917,
	489, 1819,
	-2, 1801,
	-1, 918,
	487, 2157,
	-2, 1820,
	-1, 941,
	487, 2156,
	-2, 1836,
	-1, 942,
	5, 1341,
	-2, 2127,
	-1, 943,
	5, 1342,
	-2, 2128,
	-1, 944,
	5, 1343,
	-2, 2142,
	-1, 945,
	5, 1344,
	-2, 2107,
	-1, 946,
	5, 1345,
	-2, 2140,
	-1, 947,
	5, 1353,
	-2, 2119,
	-1, 948,
	5, 1340,
	-2, 2115,
	-1, 949,
	5, 1340,
	-2, 2114,
	-1, 950,
	5, 1340,
	-2, 2133,
	-1, 951,
	5, 1351,
	-2, 2109,
	-1, 952,
	5, 1356,
	-2, 2108,
	-1, 953,
	5, 1358,
	-2, 2152,
	-1, 956,
	5, 1380,
	-2, 2145,
	-1, 957,
	5, 1372,
	-2, 2146,
	-1, 958,
	5, 1380,
	-2, 2147,
	-1, 959,
	5, 1376,
	-2, 2148,
	-1, 960,
	5, 1327,
	-2, 2120,
	-1, 961,
	5, 1328,
	-2, 2121,
	-1, 988,
	5, 1363,
	-2, 2153,
	-1, 989,
	5, 1364,
	-2, 2143,
	-1, 990,
	5, 1365,
	453, 1365,
	-2, 2110,
	-1, 991,
	5, 1366,
	453, 1366,
	-2, 2111,
	-1, 1028,
	487, 1831,
	-2, 1822,
	-1, 1029,
	487, 1832,
	-2, 1823,
	-1, 1058,
	164, 2079,
	417, 2079,
	470, 2079,
	489, 2079,
	-2, 0,
	-1, 1061,
	1, 521,
	490, 521,
	-2, 1051,
	-1, 1186,
	339, 1797,
	480, 1797,
	-2, 1795,
	-1, 1198,
	491, 1797,
	-2, 1798,
	-1, 1202,
	1, 963,
	486, 963,
	488, 963,
	490, 963,
	-2, 1165,
	-1, 1250,
	329, 788,
	452, 788,
	-2, 273,
	-1, 1273,
	1, 963,
	486, 963,
	488, 963,
	490, 963,
	-2, 1165,
	-1, 1279,
	4, 989,
	21, 989,
	22, 989,
	23, 989,
	24, 989,
	25, 989,
	26, 989,
	28, 989,
	29, 989,
	35, 989,
	40, 989,
	41, 989,
	42, 989,
	43, 989,
	44, 989,
	45, 989,
	46, 989,
	47, 989,
	48, 989,
	50, 989,
	51, 989,
	52, 989,
	54, 989,
	55, 989,
	56, 989,
	57, 989,
	58, 989,
	62, 989,
	63, 989,
	64, 989,
	65, 989,
	67, 989,
	68, 989,
	69, 989,
	73, 989,
	74, 989,
	75, 989,
	76, 989,
	77, 989,
	78, 989,
	79, 989,
	82, 989,
	83, 989,
	84, 989,
	85, 989,
	87, 989,
	89, 989,
	90, 989,
	91, 989,
	93, 989,
	95, 989,
	96, 989,
	104, 989,
	105, 989,
	106, 989,
	107, 989,
	109, 989,
	110, 989,
	111, 989,
	113, 989,
	114, 989,
	115, 989,
	117, 989,
	118, 989,
	120, 989,
	123, 989,
	124, 989,
	125, 989,
	127, 989,
	129, 989,
	130, 989,
	132, 989,
	133, 989,
	134, 989,
	135, 989,
	136, 989,
	137, 989,
	138, 989,
	139, 989,
	140, 989,
	141, 989,
	142, 989,
	143, 989,
	144, 989,
	145, 989,
	153, 989,
	154, 989,
	155, 989,
	156, 989,
	160, 989,
	162, 989,
	166, 989,
	167, 989,
	168, 989,
	169, 989,
	170, 989,
	171, 989,
	173, 989,
	174, 989,
	176, 989,
	177, 989,
	179, 989,
	180, 989,
	181, 989,
	182, 989,
	183, 989,
	184, 989,
	185, 989,
	186, 989,
	187, 989,
	189, 989,
	190, 989,
	192, 989,
	193, 989,
	194, 989,
	195, 989,
	200, 989,
	201, 989,
	202, 989,
	205, 989,
	206, 989,
	207, 989,
	209, 989,
	211, 989,
	213, 989,
	215, 989,
	216, 989,
	217, 989,
	219, 989,
	223, 989,
	224, 989,
	225, 989,
	226, 989,
	227, 989,
	229, 989,
	230, 989,
	232, 989,
	233, 989,
	235, 989,
	236, 989,
	239, 989,
	240, 989,
	241, 989,
	244, 989,
	245, 989,
	246, 989,
	247, 989,
	249, 989,
	250, 989,
	251, 989,
	252, 989,
	253, 989,
	254, 989,
	255, 989,
	256, 989,
	257, 989,
	258, 989,
	259, 989,
	261, 989,
	263, 989,
	264, 989,
	265, 989,
	266, 989,
	267, 989,
	269, 989,
	273, 989,
	275, 989,
	276, 989,
	277, 989,
	278, 989,
	279, 989,
	282, 989,
	284, 989,
	286, 989,
	287, 989,
	288, 989,
	291, 989,
	292, 989,
	293, 989,
	295, 989,
	297, 989,
	298, 989,
	299, 989,
	300, 989,
	301, 989,
	302, 989,
	303, 989,
	304, 989,
	305, 989,
	306, 989,
	307, 989,
	309, 989,
	310, 989,
	311, 989,
	312, 989,
	313, 989,
	314, 989,
	315, 989,
	316, 989,
	317, 989,
	319, 989,
	321, 989,
	322, 989,
	323, 989,
	324, 989,
	325, 989,
	326, 989,
	327, 989,
	328, 989,
	329, 989,
	330, 989,
	337, 989,
	339, 989,
	340, 989,
	341, 989,
	342, 989,
	343, 989,
	344, 989,
	345, 989,
	346, 989,
	348, 989,
	350, 989,
	351, 989,
	352, 989,
	353, 989,
	354, 989,
	355, 989,
	357, 989,
	358, 989,
	359, 989,
	360, 989,
	361, 989,
	362, 989,
	363, 989,
	364, 989,
	366, 989,
	367, 989,
	368, 989,
	369, 989,
	370, 989,
	371, 989,
	373, 989,
	374, 989,
	375, 989,
	376, 989,
	377, 989,
	379, 989,
	380, 989,
	381, 989,
	383, 989,
	385, 989,
	386, 989,
	387, 989,
	388, 989,
	389, 989,
	390, 989,
	391, 989,
	392, 989,
	393, 989,
	394, 989,
	395, 989,
	396, 989,
	397, 989,
	399, 989,
	400, 989,
	402, 989,
	404, 989,
	405, 989,
	406, 989,
	407, 989,
	408, 989,
	409, 989,
	410, 989,
	412, 989,
	413, 989,
	414, 989,
	415, 989,
	416, 989,
	418, 989,
	420, 989,
	421, 989,
	422, 989,
	423, 989,
	424, 989,
	426, 989,
	427, 989,
	428, 989,
	430, 989,
	431, 989,
	434, 989,
	435, 989,
	436, 989,
	437, 989,
	438, 989,
	439, 989,
	440, 989,
	442, 989,
	445, 989,
	446, 989,
	447, 989,
	448, 989,
	449, 989,
	450, 989,
	452, 989,
	453, 989,
	454, 989,
	459, 989,
	460, 989,
	461, 989,
	462, 989,
	463, 989,
	464, 989,
	-2, 0,
	-1, 1344,
	1, 396,
	486, 396,
	488, 396,
	490, 396,
	-2, 1136,
	-1, 1347,
	4, 2151,
	11, 2151,
	12, 2151,
	14, 2151,
	15, 2151,
	16, 2151,
	17, 2151,
	18, 2151,
	19, 2151,
	21, 2151,
	22, 2151,
	23, 2151,
	24, 2151,
	25, 2151,
	26, 2151,
	28, 2151,
	29, 2151,
	32, 2151,
	33, 2151,
	35, 2151,
	37, 2151,
	40, 2151,
	41, 2151,
	42, 2151,
	43, 2151,
	44, 2151,
	45, 2151,
	46, 2151,
	47, 2151,
	48, 2151,
	50, 2151,
	51, 2151,
	52, 2151,
	54, 2151,
	55, 2151,
	56, 2151,
	57, 2151,
	58, 2151,
	62, 2151,
	63, 2151,
	64, 2151,
	65, 2151,
	67, 2151,
	68, 2151,
	69, 2151,
	70, 2151,
	73, 2151,
	74, 2151,
	75, 2151,
	76, 2151,
	77, 2151,
	78, 2151,
	79, 2151,
	80, 2151,
	82, 2151,
	83, 2151,
	84, 2151,
	85, 2151,
	87, 2151,
	88, 2151,
	89, 2151,
	90, 2151,
	91, 2151,
	93, 2151,
	94, 2151,
	95, 2151,
	96, 2151,
	104, 2151,
	105, 2151,
	106, 2151,
	107, 2151,
	109, 2151,
	110, 2151,
	111, 2151,
	113, 2151,
	114, 2151,
	115, 2151,
	117, 2151,
	118, 2151,
	120, 2151,
	123, 2151,
	124, 2151,
	125, 2151,
	127, 2151,
	129, 2151,
	130, 2151,
	132, 2151,
	133, 2151,
	134, 2151,
	135, 2151,
	136, 2151,
	137, 2151,
	138, 2151,
	139, 2151,
	140, 2151,
	141, 2151,
	142, 2151,
	143, 2151,
	144, 2151,
	145, 2151,
	149, 2151,
	150, 2151,
	151, 2151,
	152, 2151,
	153, 2151,
	154, 2151,
	155, 2151,
	156, 2151,
	159, 2151,
	160, 2151,
	162, 2151,
	165, 2151,
	166, 2151,
	167, 2151,
	168, 2151,
	169, 2151,
	170, 2151,
	171, 2151,
	173, 2151,
	174, 2151,
	176, 2151,
	177, 2151,
	179, 2151,
	180, 2151,
	181, 2151,
	182, 2151,
	183, 2151,
	184, 2151,
	185, 2151,
	186, 2151,
	187, 2151,
	188, 2151,
	189, 2151,
	190, 2151,
	191, 2151,
	192, 2151,
	193, 2151,
	194, 2151,
	195, 2151,
	197, 2151,
	198, 2151,
	200, 2151,
	201, 2151,
	202, 2151,
	204, 2151,
	205, 2151,
	206, 2151,
	207, 2151,
	209, 2151,
	211, 2151,
	212, 2151,
	213, 2151,
	214, 2151,
	215, 2151,
	216, 2151,
	217, 2151,
	218, 2151,
	219, 2151,
	221, 2151,
	222, 2151,
	223, 2151,
	224, 2151,
	225, 2151,
	226, 2151,
	227, 2151,
	229, 2151,
	230, 2151,
	232, 2151,
	233, 2151,
	234, 2151,
	235, 2151,
	236, 2151,
	237, 2151,
	239, 2151,
	240, 2151,
	241, 2151,
	244, 2151,
	245, 2151,
	246, 2151,
	247, 2151,
	248, 2151,
	249, 2151,
	250, 2151,
	251, 2151,
	252, 2151,
	253, 2151,
	254, 2151,
	255, 2151,
	256, 2151,
	257, 2151,
	258, 2151,
	259, 2151,
	261, 2151,
	262, 2151,
	263, 2151,
	264, 2151,
	265, 2151,
	266, 2151,
	267, 2151,
	269, 2151,
	272, 2151,
	273, 2151,
	275, 2151,
	276, 2151,
	277, 2151,
	278, 2151,
	279, 2151,
	282, 2151,
	286, 2151,
	287, 2151,
	288, 2151,
	289, 2151,
	291, 2151,
	292, 2151,
	293, 2151,
	295, 2151,
	297, 2151,
	298, 2151,
	299, 2151,
	300, 2151,
	301, 2151,
	302, 2151,
	303, 2151,
	304, 2151,
	305, 2151,
	306, 2151,
	307, 2151,
	309, 2151,
	310, 2151,
	311, 2151,
	312, 2151,
	313, 2151,
	314, 2151,
	315, 2151,
	316, 2151,
	317, 2151,
	319, 2151,
	321, 2151,
	322, 2151,
	323, 2151,
	324, 2151,
	325, 2151,
	326, 2151,
	327, 2151,
	328, 2151,
	329, 2151,
	330, 2151,
	337, 2151,
	338, 2151,
	339, 2151,
	340, 2151,
	341, 2151,
	342, 2151,
	343, 2151,
	344, 2151,
	345, 2151,
	346, 2151,
	348, 2151,
	349, 2151,
	350, 2151,
	351, 2151,
	352, 2151,
	353, 2151,
	354, 2151,
	355, 2151,
	356, 2151,
	357, 2151,
	358, 2151,
	359, 2151,
	360, 2151,
	361, 2151,
	362, 2151,
	363, 2151,
	364, 2151,
	366, 2151,
	367, 2151,
	368, 2151,
	369, 2151,
	370, 2151,
	371, 2151,
	373, 2151,
	374, 2151,
	375, 2151,
	376, 2151,
	377, 2151,
	378, 2151,
	379, 2151,
	380, 2151,
	381, 2151,
	383, 2151,
	385, 2151,
	386, 2151,
	387, 2151,
	388, 2151,
	389, 2151,
	390, 2151,
	391, 2151,
	392, 2151,
	393, 2151,
	394, 2151,
	395, 2151,
	396, 2151,
	397, 2151,
	399, 2151,
	400, 2151,
	402, 2151,
	404, 2151,
	405, 2151,
	406, 2151,
	407, 2151,
	408, 2151,
	409, 2151,
	410, 2151,
	412, 2151,
	413, 2151,
	414, 2151,
	415, 2151,
	416, 2151,
	418, 2151,
	420, 2151,
	421, 2151,
	422, 2151,
	423, 2151,
	424, 2151,
	426, 2151,
	427, 2151,
	428, 2151,
	430, 2151,
	431, 2151,
	434, 2151,
	435, 2151,
	436, 2151,
	437, 2151,
	438, 2151,
	439, 2151,
	440, 2151,
	442, 2151,
	445, 2151,
	446, 2151,
	447, 2151,
	448, 2151,
	449, 2151,
	450, 2151,
	452, 2151,
	453, 2151,
	454, 2151,
	459, 2151,
	460, 2151,
	461, 2151,
	462, 2151,
	463, 2151,
	464, 2151,
	465, 2151,
	466, 2151,
	468, 2151,
	469, 2151,
	470, 2151,
	471, 2151,
	472, 2151,
	473, 2151,
	475, 2151,
	476, 2151,
	477, 2151,
	478, 2151,
	479, 2151,
	480, 2151,
	481, 2151,
	482, 2151,
	483, 2151,
	485, 2151,
	488, 2151,
	489, 2151,
	491, 2151,
	492, 2151,
	-2, 0,
	-1, 1352,
	164, 2050,
	417, 2050,
	470, 2050,
	489, 2050,
	-2, 0,
	-1, 1384,
	323, 678,
	371, 678,
	-2, 0,
	-1, 1408,
	1, 673,
	486, 673,
	488, 673,
	490, 673,
	-2, 0,
	-1, 1409,
	1, 698,
	486, 698,
	488, 698,
	490, 698,
	-2, 0,
	-1, 1410,
	1, 680,
	486, 680,
	488, 680,
	490, 680,
	-2, 0,
	-1, 1412,
	1, 684,
	486, 684,
	488, 684,
	490, 684,
	-2, 0,
	-1, 1439,
	1, 2099,
	486, 2099,
	488, 2099,
	489, 2099,
	490, 2099,
	-2, 726,
	-1, 1440,
	1, 2047,
	486, 2047,
	488, 2047,
	489, 2047,
	490, 2047,
	-2, 727,
	-1, 1455,
	1, 1046,
	490, 1046,
	-2, 1051,
	-1, 1458,
	148, 1177,
	161, 1177,
	238, 1177,
	280, 1177,
	-2, 1117,
	-1, 1553,
	131, 1138,
	148, 1138,
	161, 1138,
	208, 1138,
	238, 1138,
	280, 1138,
	290, 1138,
	432, 1138,
	-2, 1541,
	-1, 1613,
	488, 1691,
	-2, 0,
	-1, 1648,
	131, 1138,
	148, 1138,
	161, 1138,
	208, 1138,
	238, 1138,
	280, 1138,
	290, 1138,
	432, 1138,
	-2, 1258,
	-1, 1694,
	487, 1368,
	-2, 1356,
	-1, 1727,
	1, 523,
	490, 523,
	-2, 1051,
	-1, 1940,
	1, 675,
	486, 675,
	488, 675,
	490, 675,
	-2, 0,
	-1, 1941,
	1, 700,
	486, 700,
	488, 700,
	490, 700,
	-2, 0,
	-1, 2013,
	354, 1204,
	355, 1204,
	-2, 1401,
	-1, 2044,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1421,
	-1, 2045,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1422,
	-1, 2046,
	88, 0,
	221, 0,
	222, 0,
	472, 0,
	473, 0,
	-2, 1423,
	-1, 2047,
	88, 0,
	221, 0,
	222, 0,
	472, 0,
	473, 0,
	-2, 1424,
	-1, 2048,
	88, 0,
	221, 0,
	222, 0,
	472, 0,
	473, 0,
	-2, 1425,
	-1, 2049,
	88, 0,
	221, 0,
	222, 0,
	472, 0,
	473, 0,
	-2, 1426,
	-1, 2050,
	88, 0,
	221, 0,
	222, 0,
	472, 0,
	473, 0,
	-2, 1427,
	-1, 2051,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1428,
	-1, 2063,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1440,
	-1, 2064,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1441,
	-1, 2065,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1442,
	-1, 2068,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1447,
	-1, 2074,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1451,
	-1, 2076,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1459,
	-1, 2077,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1460,
	-1, 2078,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1461,
	-1, 2079,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1462,
	-1, 2191,
	5, 1834,
	164, 1702,
	487, 1831,
	-2, 1822,
	-1, 2192,
	164, 1703,
	-2, 2103,
	-1, 2193,
	164, 1704,
	-2, 1974,
	-1, 2194,
	164, 1705,
	-2, 1892,
	-1, 2195,
	164, 1706,
	-2, 1931,
	-1, 2196,
	164, 1707,
	-2, 1969,
	-1, 2197,
	164, 1708,
	-2, 2045,
	-1, 2198,
	164, 1709,
	-2, 1524,
	-1, 2267,
	1, 1259,
	2, 1259,
	94, 1259,
	131, 1259,
	148, 1259,
	161, 1259,
	165, 1259,
	175, 1259,
	178, 1259,
	204, 1259,
	208, 1259,
	218, 1259,
	234, 1259,
	238, 1259,
	262, 1259,
	280, 1259,
	284, 1259,
	290, 1259,
	347, 1259,
	349, 1259,
	432, 1259,
	443, 1259,
	456, 1259,
	457, 1259,
	458, 1259,
	467, 1259,
	486, 1259,
	488, 1259,
	490, 1259,
	492, 1259,
	-2, 1258,
	-1, 2280,
	487, 1803,
	-2, 1817,
	-1, 2303,
	487, 1367,
	-2, 1357,
	-1, 2415,
	1, 963,
	486, 963,
	488, 963,
	490, 963,
	-2, 1165,
	-1, 2571,
	285, 1207,
	-2, 2141,
	-1, 2572,
	285, 1208,
	-2, 2034,
	-1, 2576,
	354, 1768,
	355, 1768,
	-2, 1522,
	-1, 2577,
	354, 1772,
	355, 1772,
	-2, 1523,
	-1, 2578,
	354, 1769,
	355, 1769,
	-2, 1522,
	-1, 2579,
	354, 1773,
	355, 1773,
	-2, 1523,
	-1, 2592,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1449,
	-1, 2593,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1453,
	-1, 2599,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1455,
	-1, 2796,
	215, 1051,
	319, 1051,
	327, 1051,
	467, 1051,
	-2, 520,
	-1, 2911,
	1, 963,
	486, 963,
	488, 963,
	490, 963,
	-2, 1165,
	-1, 3002,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1457,
	-1, 3009,
	212, 0,
	214, 0,
	272, 0,
	-2, 1476,
	-1, 3076,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1505,
	-1, 3077,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1506,
	-1, 3078,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1507,
	-1, 3082,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1511,
	-1, 3083,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1512,
	-1, 3084,
	14, 0,
	15, 0,
	16, 0,
	468, 0,
	469, 0,
	470, 0,
	-2, 1513,
	-1, 3130,
	487, 1804,
	-2, 1818,
	-1, 3237,
	489, 2257,
	-2, 1095,
	-1, 3288,
	212, 0,
	214, 0,
	272, 0,
	-2, 1477,
	-1, 3291,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1480,
	-1, 3292,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1482,
	-1, 3478,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1481,
	-1, 3479,
	17, 0,
	18, 0,
	19, 0,
	47, 0,
	188, 0,
	191, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 1483,
	-1, 3490,
	212, 0,
	-2, 1514,
	-1, 3628,
	212, 0,
	-2, 1515,
	-1, 3766,
	47, 0,
	188, 0,
	237, 0,
	378, 0,
	465, 0,
	471, 0,
	-2, 2106,
}

const sqlPrivate = 57344

const sqlLast = 90708

var sqlAct = [...]int{

	221, 3776, 3765, 3558, 3520, 3866, 3900, 2726, 3523, 2897,
	3667, 3742, 3649, 3271, 3731, 3728, 3713, 3777, 3820, 3152,
	3778, 2335, 1914, 3410, 3565, 3041, 3509, 1031, 3632, 3764,
	2469, 2727, 3441, 3436, 3467, 856, 2023, 3402, 2813, 1205,
	2926, 1827, 2223, 3229, 3574, 3423, 873, 3187, 847, 1338,
	3355, 3596, 1682, 2091, 2919, 1467, 3446, 1901, 2893, 3208,
	1778, 2921, 2994, 1654, 3153, 616, 3495, 2585, 1090, 2441,
	2031, 1221, 911, 35, 2394, 2504, 2458, 2024, 2741, 2444,
	2432, 2769, 1183, 583, 1021, 616, 2709, 2506, 2732, 3327,
	2749, 3270, 2514, 2453, 2455, 708, 1890, 1392, 2495, 2503,
	4, 2470, 2730, 2497, 2337, 1787, 2028, 2260, 1822, 3101,
	900, 2259, 1823, 2708, 1599, 1339, 3633, 1561, 2133, 1623,
	2104, 1826, 1191, 2416, 2406, 855, 148, 1899, 1266, 1819,
	2262, 1803, 1810, 2371, 2569, 2513, 904, 907, 1074, 1763,
	2442, 1765, 2241, 2088, 1683, 2124, 1624, 1995, 1753, 1455,
	3559, 2012, 1319, 1993, 1643, 2220, 1360, 1345, 2895, 1335,
	909, 1329, 1856, 1012, 2775, 617, 2463, 1271, 2327, 618,
	215, 1063, 214, 2507, 537, 551, 2127, 1633, 559, 1594,
	702, 90, 1015, 994, 2105, 2249, 1207, 2177, 2187, 2231,
	1545, 1469, 1029, 1468, 1855, 156, 612, 157, 1994, 1359,
	577, 684, 1343, 659, 567, 148, 1996, 1218, 1777, 2017,
	2372, 885, 554, 40, 39, 2135, 37, 28, 992, 26,
	1474, 24, 757, 1454, 562, 2620, 1017, 774, 3115, 1876,
	3116, 2728, 2616, 851, 1892, 621, 1892, 624, 3918, 2936,
	1294, 2794, 2240, 1640, 3904, 1892, 1892, 3903, 2240, 3882,
	3880, 2240, 1071, 3370, 3370, 621, 906, 624, 3876, 3803,
	3800, 3798, 1832, 3804, 2240, 2240, 3795, 2935, 213, 3792,
	3796, 3787, 3762, 3793, 851, 1832, 1832, 3105, 1011, 2629,
	1009, 719, 2584, 1482, 1483, 2630, 1515, 1516, 1517, 1525,
	1526, 1527, 3761, 3760, 3757, 3756, 1832, 1907, 1907, 1907,
	1071, 2240, 1027, 3751, 1518, 1513, 998, 3370, 999, 3749,
	954, 2390, 1485, 3370, 995, 995, 3726, 3707, 3700, 1531,
	3370, 2295, 2240, 3699, 3694, 1922, 3693, 2240, 3370, 1024,
	3370, 3687, 3630, 2681, 2682, 1832, 2295, 3610, 2233, 3607,
	852, 1832, 1484, 3370, 833, 3567, 832, 3540, 3708, 3568,
	3539, 1832, 1504, 3531, 1832, 1482, 1483, 1832, 3530, 3501,
	1501, 3480, 3370, 1832, 3465, 2295, 3454, 3397, 1907, 3388,
	2951, 2240, 3369, 2240, 1048, 3290, 3370, 1513, 841, 2295,
	3625, 3245, 3239, 846, 1485, 2967, 2967, 1482, 1483, 3206,
	3125, 3123, 3108, 3207, 3126, 3124, 2240, 3025, 3613, 1043,
	3021, 1832, 2696, 996, 2240, 3105, 2966, 2958, 2725, 1513,
	2967, 2959, 2240, 2720, 1484, 2719, 1485, 2240, 2232, 2240,
	3435, 1507, 1508, 1509, 1510, 2672, 2670, 2291, 2662, 2673,
	2671, 1490, 2663, 2660, 2631, 2240, 2493, 2240, 2240, 2492,
	1910, 2418, 1907, 1910, 189, 1907, 1484, 2311, 1023, 1482,
	1483, 2240, 1515, 1516, 1517, 1525, 1526, 1527, 2294, 3389,
	1522, 1832, 2295, 1532, 2289, 1832, 1482, 1483, 2240, 1512,
	1514, 1513, 2959, 2282, 1044, 2239, 2619, 1832, 1485, 2240,
	2385, 2687, 191, 1909, 1528, 1531, 1529, 1910, 1513, 1782,
	1482, 1483, 2326, 1499, 1500, 1485, 1733, 1188, 1891, 2951,
	2438, 189, 1831, 1490, 2402, 2324, 1619, 1217, 1484, 1520,
	3181, 2997, 1513, 2975, 1641, 1813, 1394, 2937, 1504, 1485,
	1505, 1893, 2276, 1893, 2275, 1484, 1501, 190, 2274, 2273,
	2272, 1000, 1893, 1893, 997, 1490, 2938, 183, 840, 191,
	839, 1512, 1514, 838, 1530, 184, 837, 2549, 3343, 1484,
	836, 835, 831, 830, 829, 828, 827, 826, 825, 824,
	823, 1519, 822, 821, 1239, 189, 158, 2935, 820, 1044,
	2697, 819, 818, 1512, 1514, 817, 816, 755, 754, 753,
	752, 751, 909, 750, 190, 749, 909, 1507, 1508, 1509,
	1510, 748, 1505, 747, 183, 746, 745, 1490, 744, 743,
	742, 1093, 184, 191, 741, 1093, 740, 739, 1210, 738,
	1511, 737, 1210, 736, 1490, 735, 734, 1073, 733, 732,
	1067, 1078, 731, 158, 1505, 730, 1522, 729, 1506, 1532,
	909, 728, 909, 717, 909, 1512, 1514, 716, 1490, 675,
	636, 635, 627, 626, 625, 902, 597, 589, 190, 588,
	1523, 587, 1512, 1514, 571, 211, 1199, 210, 209, 1499,
	1500, 1210, 208, 1194, 2160, 207, 2232, 206, 2483, 205,
	1905, 204, 203, 202, 201, 1520, 1512, 1514, 2698, 1891,
	1988, 200, 1411, 199, 198, 197, 1505, 158, 2681, 2682,
	1552, 196, 195, 194, 193, 192, 3302, 3136, 3119, 2449,
	1506, 1210, 1044, 1505, 1226, 1210, 1231, 2968, 1237, 1210,
	2772, 1276, 1278, 2723, 909, 2642, 2625, 2422, 2299, 1210,
	2283, 860, 909, 2266, 2146, 1761, 1667, 1505, 1061, 1572,
	1223, 1080, 1506, 2724, 2681, 2682, 1644, 1521, 1917, 1563,
	1496, 1497, 1503, 1524, 1502, 1498, 1238, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 2681, 2682, 1481, 2144,
	3312, 3783, 1210, 1086, 3311, 1180, 1185, 1033, 1213, 3763,
	3674, 3622, 3494, 3519, 3616, 3455, 1511, 1056, 909, 3450,
	3434, 1602, 3348, 3614, 3325, 1220, 3324, 1601, 1358, 1219,
	621, 3318, 624, 3317, 1506, 3316, 1363, 2692, 2690, 2691,
	2683, 2684, 2685, 2686, 2688, 2689, 1348, 1350, 1605, 3212,
	1916, 1506, 1602, 3309, 3308, 2466, 1523, 3306, 1601, 3301,
	1364, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 3298, 2681,
	2682, 148, 148, 3297, 3205, 1506, 2687, 3140, 3139, 1600,
	1570, 3138, 3129, 3096, 1067, 3095, 3094, 1067, 1323, 1326,
	1412, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	883, 3017, 909, 909, 909, 909, 909, 909, 909, 3013,
	1564, 1186, 1562, 1563, 1198, 1201, 2767, 1421, 2962, 2716,
	2707, 1459, 2687, 2680, 2677, 1552, 852, 2676, 2674, 2669,
	2668, 1346, 2667, 909, 2664, 2451, 3179, 2661, 2641, 909,
	2624, 2617, 2494, 1521, 2687, 2267, 1496, 1497, 1503, 1524,
	1502, 1498, 1233, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 2117, 1481, 1867, 2697, 1008, 189, 1837, 1227,
	1201, 1201, 1480, 1486, 1487, 1488, 1489, 1491, 1492, 3913,
	3875, 3874, 1752, 3813, 3811, 3802, 703, 1032, 3043, 1835,
	2721, 3666, 3659, 1297, 1551, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 1453, 3656, 191, 2787, 3655, 1201, 3654,
	854, 2697, 63, 3648, 706, 705, 3642, 2687, 3611, 3595,
	3594, 1369, 3449, 2094, 3582, 3579, 3536, 3515, 64, 3492,
	3475, 1385, 2681, 2682, 3474, 2699, 2700, 2701, 3462, 3461,
	3427, 68, 909, 909, 909, 3342, 2100, 3323, 909, 3260,
	190, 3257, 3170, 3286, 3211, 1029, 3169, 1029, 79, 3156,
	183, 3155, 3111, 1621, 3099, 3008, 1549, 2969, 184, 1456,
	2952, 2912, 2861, 2698, 1093, 2840, 73, 2816, 2815, 2789,
	909, 2646, 2645, 616, 2640, 189, 1464, 1699, 616, 158,
	1630, 833, 1025, 832, 1463, 2608, 909, 2450, 1458, 2431,
	1210, 2696, 1482, 1483, 1608, 1460, 2697, 1607, 189, 78,
	1477, 1478, 1606, 1604, 852, 909, 1603, 1595, 1593, 2698,
	89, 1093, 1677, 191, 2305, 79, 86, 2304, 2278, 2271,
	2238, 1485, 1658, 2142, 1232, 1675, 1666, 1622, 1725, 1730,
	1067, 1617, 1616, 1615, 1669, 1651, 191, 1614, 1613, 1612,
	1759, 1611, 1610, 1609, 1590, 1679, 1589, 1588, 1587, 1693,
	1722, 1484, 1627, 1628, 995, 1027, 1586, 1027, 190, 1596,
	1597, 1585, 1584, 1918, 80, 1413, 1583, 1724, 183, 1582,
	2687, 1581, 1580, 1579, 148, 1578, 184, 1674, 1577, 3634,
	2159, 190, 1024, 1576, 1024, 2683, 2684, 2685, 2686, 2688,
	2689, 183, 1281, 1565, 1075, 1550, 2816, 158, 1548, 184,
	2764, 1543, 1652, 1673, 2698, 2358, 1055, 1046, 2681, 2682,
	1039, 3430, 3344, 3294, 3135, 3122, 3114, 2628, 2297, 3504,
	2465, 2269, 3346, 2702, 3134, 1564, 1332, 2785, 852, 1649,
	2691, 2683, 2684, 2685, 2686, 2688, 2689, 1662, 1727, 1546,
	2145, 3872, 1620, 621, 1752, 624, 1210, 1210, 621, 1752,
	624, 2681, 2682, 1077, 1093, 2685, 2686, 2688, 2689, 2697,
	3865, 3657, 1661, 1660, 3617, 1659, 1657, 1771, 1656, 1678,
	1655, 1646, 189, 3615, 1721, 2143, 3391, 2922, 868, 1800,
	81, 2843, 1802, 3570, 123, 1807, 1642, 1680, 3518, 3569,
	3453, 2376, 3390, 3117, 1602, 2954, 2953, 3575, 3215, 1071,
	1601, 1023, 1451, 1023, 1644, 189, 1076, 1071, 2666, 3168,
	191, 1585, 1755, 1750, 1745, 1482, 1483, 155, 84, 2665,
	85, 2590, 189, 2692, 2690, 2691, 2683, 2684, 2685, 2686,
	2688, 2689, 1585, 1384, 2360, 1072, 1198, 1574, 189, 189,
	2899, 814, 2898, 191, 1485, 1915, 1071, 707, 3566, 1393,
	3788, 123, 1571, 2130, 1786, 190, 2687, 3775, 1394, 1824,
	191, 1828, 3184, 189, 3172, 183, 2973, 2698, 3496, 3901,
	2728, 3045, 2634, 184, 1484, 1811, 191, 191, 3784, 2125,
	1210, 815, 1210, 1860, 1210, 2303, 1618, 1696, 190, 1598,
	1739, 2891, 1210, 1782, 158, 1210, 2206, 1864, 183, 1254,
	124, 191, 2399, 1829, 1868, 190, 184, 3797, 1210, 1210,
	1210, 1422, 1865, 1220, 159, 183, 3794, 1219, 621, 1728,
	624, 190, 190, 184, 1873, 2931, 2131, 158, 616, 1932,
	2396, 183, 183, 1806, 3147, 1373, 3650, 3785, 3437, 184,
	184, 1007, 2373, 2374, 158, 3725, 190, 1077, 3639, 2819,
	1895, 3163, 2501, 1897, 3836, 1830, 183, 1881, 2462, 1902,
	158, 704, 1904, 1490, 184, 2884, 2989, 3686, 3556, 3380,
	1242, 1870, 2312, 812, 2786, 810, 3910, 3549, 3837, 2693,
	2694, 2695, 1920, 1847, 1846, 158, 2692, 2690, 2691, 2683,
	2684, 2685, 2686, 2688, 2689, 1936, 808, 3542, 2132, 2129,
	1076, 909, 3193, 909, 806, 2798, 797, 3192, 803, 3186,
	909, 1921, 3183, 1699, 1699, 1093, 3182, 909, 909, 909,
	909, 909, 909, 909, 909, 909, 909, 909, 909, 909,
	909, 909, 909, 909, 909, 909, 909, 909, 909, 909,
	909, 909, 909, 909, 909, 909, 909, 909, 909, 909,
	909, 909, 1879, 909, 2005, 909, 909, 909, 909, 1875,
	1062, 852, 1671, 852, 1492, 1252, 1346, 1740, 1346, 1863,
	3144, 1883, 1884, 1420, 3197, 1992, 2407, 909, 1077, 1987,
	909, 909, 1911, 1056, 1912, 1693, 1693, 1974, 1972, 909,
	1925, 1923, 3143, 909, 1371, 909, 909, 1297, 621, 1878,
	624, 1878, 2639, 1093, 2842, 2638, 671, 2637, 2134, 909,
	909, 909, 909, 2800, 909, 909, 909, 909, 909, 909,
	909, 909, 2106, 2107, 1954, 2173, 2636, 2594, 1198, 3196,
	1068, 1076, 1068, 3685, 1419, 1253, 2401, 2106, 2122, 2392,
	909, 909, 909, 909, 909, 909, 909, 909, 909, 2384,
	2339, 2016, 2330, 909, 2130, 2383, 2363, 2029, 2030, 2290,
	2086, 2172, 2075, 2168, 1457, 1029, 2328, 2298, 1779, 1744,
	1743, 1216, 1093, 1752, 1754, 2683, 2684, 2685, 2686, 2688,
	2689, 1029, 2190, 2190, 2204, 2084, 2106, 1997, 1991, 2224,
	2226, 2004, 1989, 672, 1775, 2230, 1990, 909, 1093, 2380,
	833, 2125, 2020, 833, 833, 2021, 2022, 2128, 2033, 1482,
	1483, 1287, 2121, 1286, 2373, 2374, 3150, 1780, 1781, 2373,
	2374, 1418, 1687, 2689, 1285, 1308, 1284, 2131, 2409, 1386,
	2003, 2307, 2459, 800, 1069, 2003, 1069, 2974, 1485, 2279,
	1632, 3473, 1070, 2330, 1070, 1776, 2254, 2342, 2408, 2410,
	2319, 2362, 1986, 2246, 3392, 850, 1930, 2328, 1982, 1248,
	852, 1261, 1210, 2090, 1450, 2102, 1366, 3367, 1484, 1651,
	852, 2001, 1985, 1068, 852, 1027, 2001, 1747, 2398, 2119,
	995, 1845, 1486, 1487, 1488, 1489, 1491, 1492, 2413, 1662,
	2090, 1027, 1093, 2281, 2268, 2605, 3363, 3836, 2080, 2132,
	2129, 1730, 1024, 2567, 1067, 1394, 2245, 2351, 2397, 2081,
	1430, 1636, 2292, 2082, 3754, 3159, 2350, 2087, 1024, 1699,
	2603, 2681, 2682, 1696, 1696, 2253, 2186, 2258, 2215, 2199,
	2264, 2265, 849, 2228, 1999, 3376, 2395, 148, 1947, 2582,
	1880, 2170, 3364, 2247, 1093, 3860, 2171, 2236, 2237, 2174,
	1639, 2175, 2176, 2251, 2252, 1462, 1210, 1490, 1604, 2797,
	3525, 1944, 852, 1649, 1634, 1984, 909, 1394, 909, 2980,
	1367, 1939, 2331, 1766, 1749, 2979, 1372, 1069, 1767, 2098,
	1637, 2357, 1071, 2002, 1071, 1070, 2096, 1382, 2002, 1434,
	1054, 1693, 804, 2310, 804, 1926, 1766, 2552, 628, 1940,
	2393, 1767, 2341, 2546, 2306, 1025, 1748, 1025, 1635, 2134,
	2389, 2381, 1766, 2134, 851, 804, 1417, 1767, 1596, 1597,
	598, 1023, 2365, 805, 3861, 674, 673, 804, 2414, 2309,
	2743, 1948, 2473, 2600, 2313, 1788, 595, 1023, 1210, 1210,
	2424, 1210, 2426, 2400, 2000, 3472, 2581, 1941, 2601, 2000,
	3034, 3849, 2606, 1210, 1792, 2361, 2435, 2375, 2377, 2378,
	2379, 3527, 1981, 2366, 2083, 3031, 2344, 2347, 2353, 2687,
	2334, 2515, 1272, 2085, 2517, 1768, 1782, 2520, 2521, 2364,
	2464, 2419, 726, 2464, 3848, 2486, 2526, 2527, 2528, 1770,
	2555, 2288, 2382, 3374, 3884, 1638, 1036, 3171, 1768, 909,
	3359, 3781, 1789, 3825, 3360, 1973, 1971, 3869, 2128, 1270,
	549, 1408, 1770, 3863, 1768, 2574, 2575, 2340, 3276, 2929,
	669, 3275, 668, 1307, 603, 1071, 2482, 1220, 1770, 594,
	1034, 2420, 621, 2928, 624, 544, 2534, 3032, 1250, 909,
	2490, 2854, 2500, 2475, 2429, 909, 909, 2848, 3362, 3896,
	2439, 1772, 1892, 2536, 2489, 2537, 848, 1247, 2697, 1409,
	2134, 3365, 1814, 3160, 2457, 148, 843, 1821, 792, 1983,
	2557, 2544, 2559, 2531, 1772, 2519, 2468, 2479, 2522, 2480,
	2523, 2481, 2928, 2538, 1799, 2540, 1784, 2542, 2329, 2742,
	1772, 845, 1793, 609, 2554, 1782, 2487, 1186, 2491, 2602,
	909, 909, 1431, 2550, 3651, 1272, 909, 2502, 2604, 2518,
	701, 1198, 629, 630, 2072, 2799, 2551, 605, 3375, 909,
	909, 1591, 2596, 1037, 1773, 909, 909, 1346, 2783, 1696,
	3704, 909, 844, 3845, 801, 1946, 3419, 2830, 3782, 3469,
	909, 909, 909, 1756, 1757, 3806, 909, 2134, 1773, 2089,
	1794, 1795, 3807, 1773, 3272, 3736, 909, 2597, 1687, 1687,
	2864, 3862, 1790, 3361, 1820, 3526, 2698, 1368, 792, 2564,
	793, 1555, 3665, 909, 2563, 1560, 1773, 2573, 1488, 1489,
	1491, 1492, 2562, 2622, 2623, 2829, 2618, 2016, 2626, 2836,
	2568, 845, 1773, 3824, 2553, 1773, 1791, 1429, 1370, 1542,
	792, 2315, 2583, 2330, 1201, 1201, 1432, 3485, 2116, 2644,
	2250, 3885, 2803, 3867, 2317, 3780, 2263, 2345, 2627, 632,
	631, 600, 851, 845, 2013, 2832, 3047, 1461, 1764, 3429,
	596, 1809, 3266, 593, 1943, 3131, 2097, 1049, 3668, 909,
	909, 909, 2318, 604, 1938, 3277, 2595, 1198, 909, 909,
	909, 1808, 3468, 909, 2991, 2070, 2834, 2316, 2073, 1381,
	1383, 2565, 1053, 909, 1029, 1093, 633, 634, 608, 909,
	793, 909, 3779, 1472, 2735, 2736, 1433, 1804, 3702, 1029,
	3835, 1198, 727, 1198, 602, 1796, 2690, 2691, 2683, 2684,
	2685, 2686, 2688, 2689, 3868, 2718, 1769, 1093, 1396, 2633,
	1780, 1781, 793, 1636, 2069, 3833, 852, 3420, 3703, 1029,
	2833, 2737, 3682, 3581, 1093, 3227, 2915, 3210, 545, 1769,
	2757, 599, 3870, 3890, 1854, 794, 1699, 1035, 1805, 1629,
	1093, 1047, 1042, 536, 2773, 1769, 3897, 3273, 1817, 1893,
	1471, 909, 1639, 2019, 3805, 2995, 606, 3823, 3321, 2747,
	1801, 3085, 1797, 1466, 1783, 909, 2248, 1741, 2771, 610,
	3470, 3533, 3532, 2776, 2207, 2766, 1699, 2745, 3513, 3638,
	601, 1471, 1637, 3228, 1027, 546, 2795, 3190, 1815, 2804,
	2805, 3379, 909, 3146, 1067, 2916, 2910, 2811, 3378, 1027,
	2801, 2807, 2781, 2770, 2443, 2746, 2820, 2433, 1693, 2824,
	2755, 1024, 1874, 2713, 2714, 2715, 2758, 2759, 2763, 2729,
	2793, 1866, 1816, 547, 2821, 548, 1024, 2826, 2827, 1027,
	2744, 1859, 2756, 1093, 1841, 794, 3100, 3669, 3030, 3714,
	1470, 2485, 1210, 2992, 842, 2009, 795, 1471, 1693, 2808,
	2367, 1978, 1734, 2751, 1210, 2071, 1024, 2242, 2867, 2346,
	2845, 2870, 2761, 1093, 2762, 2878, 2880, 794, 2837, 2838,
	3442, 1470, 2839, 3230, 1687, 2430, 3278, 1542, 1210, 2886,
	2784, 2873, 1472, 2847, 1310, 2533, 3564, 796, 2869, 1210,
	2778, 2779, 2780, 2896, 2539, 3889, 2541, 1638, 2543, 2904,
	2858, 2859, 2796, 1029, 2860, 3562, 2855, 2862, 2802, 2924,
	3086, 3605, 2909, 1472, 3514, 3322, 2822, 1771, 3087, 1738,
	2812, 1674, 3113, 2560, 2244, 2818, 2817, 2515, 2588, 2243,
	1023, 2566, 1931, 2835, 2752, 1025, 2515, 1470, 2257, 2841,
	723, 1210, 1210, 2740, 1771, 1023, 795, 2850, 3279, 2933,
	2851, 1025, 2739, 2010, 2852, 1410, 3377, 2950, 2857, 3597,
	2790, 2791, 2853, 2792, 2885, 2863, 2287, 2286, 715, 2871,
	2881, 3598, 2876, 2285, 2284, 1023, 1811, 2750, 795, 2437,
	849, 2944, 2970, 2888, 1811, 3521, 1736, 796, 2365, 1279,
	1397, 2917, 1093, 3411, 1293, 1093, 3670, 3599, 2368, 2369,
	1291, 1280, 2754, 725, 3644, 2925, 2963, 1872, 1737, 2907,
	3459, 2417, 3842, 1027, 3560, 3722, 2941, 2942, 2943, 796,
	3711, 3328, 2946, 3102, 2947, 909, 2141, 3511, 2865, 1448,
	3844, 909, 909, 2948, 2949, 909, 909, 909, 2932, 909,
	1024, 2930, 2777, 2961, 1970, 3799, 1696, 2965, 909, 1699,
	2939, 3601, 2945, 2986, 1446, 1426, 1424, 909, 148, 148,
	909, 3658, 3491, 2985, 3512, 1407, 1093, 3600, 1405, 3320,
	3458, 1198, 3522, 3717, 3645, 909, 2710, 2976, 1403, 2977,
	1401, 2978, 2753, 1093, 3602, 3007, 1696, 852, 2971, 2887,
	1399, 1391, 1863, 1699, 1699, 909, 909, 2675, 909, 909,
	909, 3010, 2993, 1389, 2607, 1632, 2434, 1201, 1289, 2391,
	3019, 3020, 2140, 2359, 2982, 2308, 909, 2185, 2181, 1668,
	909, 1693, 1699, 1699, 909, 909, 909, 909, 909, 909,
	909, 909, 909, 909, 909, 909, 909, 909, 909, 909,
	909, 909, 909, 2990, 909, 3718, 3646, 1665, 1449, 1361,
	2711, 909, 909, 1699, 721, 722, 2988, 2987, 909, 1023,
	1466, 2548, 3774, 2547, 2525, 1693, 1693, 1998, 1980, 909,
	2570, 1951, 3396, 1723, 1575, 1365, 1636, 3015, 1265, 3387,
	1029, 1029, 713, 714, 909, 3710, 3027, 2179, 3026, 3440,
	3401, 1447, 1198, 1198, 1693, 1693, 3033, 3035, 3036, 3049,
	3097, 3042, 1292, 1969, 2183, 2184, 2182, 2866, 1290, 3352,
	802, 724, 2920, 1093, 3226, 1639, 1445, 1425, 1423, 3057,
	3220, 3195, 3821, 3058, 3118, 1693, 3166, 1406, 3064, 1634,
	1404, 2099, 3062, 3164, 3145, 3089, 2908, 2029, 3050, 2900,
	1402, 909, 1400, 2484, 2460, 1637, 2448, 1555, 2440, 2427,
	2207, 2207, 1398, 1390, 1908, 1906, 909, 909, 1903, 2178,
	2180, 1898, 3098, 3090, 1198, 1388, 2029, 3065, 3109, 3110,
	1288, 1896, 3603, 1635, 1894, 1885, 1838, 3604, 1836, 1825,
	1812, 909, 909, 1798, 1785, 3106, 3107, 148, 1774, 2877,
	1027, 1027, 3104, 3588, 1821, 1004, 3037, 3093, 1475, 2586,
	1676, 2211, 909, 3837, 3745, 3464, 3141, 3457, 3456, 3120,
	3408, 2516, 1760, 1244, 3121, 3590, 2330, 1024, 1024, 3056,
	1005, 2330, 2856, 3173, 2349, 1210, 3238, 3059, 1210, 3060,
	2328, 1782, 1443, 1444, 1942, 2348, 1331, 1699, 807, 809,
	811, 1871, 1968, 1967, 3185, 3178, 3180, 1330, 3744, 607,
	1949, 3201, 3381, 1482, 1483, 3403, 1387, 3191, 3149, 1696,
	1638, 3165, 1210, 3167, 3624, 3329, 3177, 3307, 2370, 909,
	2207, 2207, 2207, 2352, 1479, 3838, 3831, 1029, 909, 1731,
	2587, 1687, 3240, 3216, 2396, 2404, 550, 2403, 2386, 2388,
	2354, 1820, 1476, 3709, 1210, 1210, 1210, 2473, 2923, 2365,
	3678, 3232, 2387, 1696, 1696, 1482, 1483, 3217, 3235, 1693,
	1210, 3203, 1484, 3234, 1006, 3194, 1093, 3675, 3557, 3252,
	1331, 1687, 3231, 660, 917, 3219, 1331, 2356, 700, 2515,
	3189, 3218, 1696, 1696, 1485, 561, 1023, 1023, 1093, 3209,
	2355, 909, 909, 3200, 3128, 3137, 2467, 909, 909, 1699,
	3188, 2229, 909, 909, 1726, 909, 1681, 3864, 2782, 909,
	3221, 3888, 3677, 1696, 1484, 1552, 217, 3299, 539, 540,
	909, 555, 539, 555, 565, 570, 3233, 3241, 586, 3242,
	2136, 2812, 3246, 592, 3133, 3265, 909, 1027, 3236, 217,
	2983, 3248, 2322, 3253, 3254, 3247, 3258, 3293, 3259, 3255,
	3262, 3289, 3261, 3578, 3280, 712, 2681, 2682, 2320, 217,
	1482, 1483, 3281, 2169, 1024, 2322, 2323, 3550, 3274, 3269,
	1375, 1693, 2320, 2321, 1428, 3264, 1374, 1427, 3404, 3400,
	3399, 3295, 3224, 3132, 1025, 3038, 2868, 1569, 1568, 1091,
	3907, 3877, 3850, 1192, 3635, 3546, 1029, 3505, 3503, 1025,
	3426, 3345, 3263, 3244, 1029, 3204, 3202, 3162, 1093, 3157,
	1093, 2940, 2914, 2913, 2530, 2529, 2477, 1029, 2452, 2428,
	2301, 2300, 2101, 1966, 1965, 1964, 1201, 1093, 1963, 1025,
	1888, 1887, 1886, 1869, 1849, 1848, 1844, 1843, 1842, 3319,
	1840, 1839, 1442, 1441, 1318, 1317, 909, 1316, 1315, 1314,
	1313, 1312, 1311, 1309, 1304, 3349, 3350, 1303, 539, 539,
	1302, 1301, 1300, 1260, 1259, 3372, 217, 1863, 1258, 1257,
	1256, 1255, 1093, 3334, 1249, 1243, 3382, 1093, 3340, 3333,
	1241, 1240, 3337, 1023, 3330, 1084, 3331, 3332, 1083, 1082,
	3326, 1081, 3335, 1052, 1051, 3383, 3336, 1696, 3341, 987,
	1732, 2770, 813, 799, 3524, 3405, 1027, 3406, 3366, 1436,
	77, 3351, 3371, 1251, 1027, 148, 647, 1093, 3373, 3412,
	72, 3409, 1210, 1818, 2872, 3161, 655, 1027, 3724, 2828,
	2405, 3384, 3385, 1024, 1950, 1395, 3407, 1952, 2765, 2270,
	3701, 1024, 3303, 2643, 1687, 3631, 3484, 2211, 909, 2139,
	1573, 3398, 3394, 2722, 1024, 74, 3395, 893, 939, 3418,
	3417, 3444, 3353, 1093, 3148, 2505, 3415, 3460, 3414, 1685,
	1686, 859, 1096, 3421, 1742, 909, 909, 909, 3431, 3452,
	3447, 899, 3443, 3432, 3428, 3413, 1758, 1751, 1687, 1687,
	3433, 3438, 2302, 1093, 2189, 916, 913, 1688, 909, 1690,
	3445, 909, 909, 3451, 915, 914, 1689, 2207, 2207, 1696,
	1592, 909, 912, 1025, 1699, 1684, 3223, 1687, 1687, 909,
	909, 3222, 3463, 2436, 2471, 1296, 778, 2211, 2211, 1746,
	2095, 3471, 2123, 2632, 1093, 3481, 1566, 874, 895, 3476,
	2120, 1045, 884, 2748, 2927, 3127, 3448, 1093, 1687, 2008,
	663, 2678, 1023, 2126, 1038, 909, 2212, 2205, 2201, 2461,
	1023, 909, 3498, 1452, 1544, 2472, 3493, 1079, 877, 909,
	2093, 1699, 1557, 1023, 2612, 3487, 2018, 2934, 909, 2768,
	2296, 909, 3741, 3507, 3046, 1853, 1693, 909, 3499, 3500,
	1003, 1002, 3502, 1001, 1093, 2207, 2207, 2207, 2207, 2207,
	2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207, 2207,
	2207, 2207, 2207, 2207, 3730, 2207, 3545, 3508, 3506, 3727,
	3256, 2894, 1735, 2314, 3529, 3528, 1534, 2901, 3572, 889,
	1197, 1093, 2733, 2964, 1210, 3555, 3563, 1262, 591, 2896,
	901, 1533, 1863, 1693, 3547, 2609, 2610, 2211, 2211, 2211,
	2412, 3577, 909, 909, 2411, 1201, 3641, 1066, 1065, 1064,
	2810, 3576, 3561, 3543, 3552, 909, 909, 3895, 3593, 3537,
	3538, 3608, 3609, 3585, 3158, 188, 3571, 3587, 3612, 2580,
	1473, 1465, 909, 1699, 185, 187, 186, 3422, 3175, 3551,
	3586, 19, 3553, 3554, 3584, 18, 17, 3592, 3447, 3591,
	94, 3606, 38, 16, 122, 3583, 909, 3620, 3621, 909,
	121, 3589, 120, 119, 118, 3535, 1040, 117, 116, 111,
	115, 3619, 1670, 3623, 114, 113, 112, 909, 3637, 110,
	109, 108, 1687, 107, 106, 3629, 105, 3647, 104, 103,
	102, 101, 100, 99, 1050, 98, 3653, 97, 3636, 96,
	95, 586, 582, 579, 52, 1693, 51, 93, 3664, 92,
	909, 909, 15, 3652, 36, 2704, 2705, 2706, 13, 1762,
	909, 56, 57, 909, 217, 1210, 217, 217, 1189, 12,
	217, 217, 31, 32, 83, 1210, 1210, 82, 3660, 3679,
	1025, 1025, 3681, 30, 217, 1222, 3662, 14, 29, 27,
	10, 8, 1210, 7, 3671, 3576, 3672, 3673, 3676, 33,
	3692, 1653, 11, 153, 3683, 909, 909, 152, 1246, 3688,
	3684, 3663, 3689, 154, 1696, 151, 76, 150, 149, 75,
	25, 1264, 9, 1269, 145, 3573, 217, 217, 3696, 1189,
	3214, 3719, 3661, 71, 1687, 147, 146, 909, 909, 217,
	909, 144, 3706, 143, 142, 69, 1306, 3705, 3729, 3732,
	141, 140, 1631, 3721, 70, 3739, 139, 23, 5, 217,
	217, 217, 55, 1189, 217, 6, 3466, 3697, 3743, 3698,
	2972, 1696, 586, 3734, 217, 217, 87, 88, 3746, 3733,
	3738, 3758, 3737, 909, 909, 909, 3759, 34, 67, 712,
	3690, 3691, 66, 65, 3750, 22, 54, 3753, 21, 3755,
	3720, 178, 1833, 177, 3786, 176, 909, 3695, 175, 170,
	169, 174, 172, 3770, 3771, 3773, 171, 3772, 173, 3791,
	168, 180, 1198, 179, 182, 166, 162, 161, 165, 3747,
	3808, 3789, 3748, 167, 164, 163, 160, 1342, 181, 138,
	3812, 62, 3810, 137, 136, 135, 134, 909, 3818, 3822,
	217, 133, 3809, 132, 131, 61, 2473, 20, 2, 3815,
	3816, 1, 3817, 3819, 217, 3814, 0, 0, 0, 3828,
	3829, 0, 0, 0, 0, 0, 3834, 1025, 3832, 0,
	0, 3830, 0, 1696, 0, 0, 3839, 3729, 0, 3841,
	3732, 3843, 909, 0, 909, 3840, 3847, 0, 3851, 3853,
	3852, 3858, 3857, 0, 0, 1201, 3743, 0, 0, 0,
	0, 3854, 858, 3856, 0, 3801, 3855, 0, 0, 0,
	0, 3873, 3859, 3871, 2211, 2211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3881,
	0, 0, 3878, 3883, 0, 909, 909, 3886, 0, 0,
	0, 0, 0, 909, 3846, 909, 909, 3879, 3892, 0,
	0, 0, 0, 3898, 0, 0, 0, 0, 0, 0,
	0, 3902, 0, 3899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3905, 0, 3909, 3906, 0,
	0, 0, 3912, 0, 909, 3914, 0, 3893, 3894, 3915,
	0, 3917, 3919, 0, 0, 0, 3908, 0, 0, 0,
	3911, 0, 2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211,
	2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211, 2211,
	2211, 0, 2211, 0, 0, 0, 3916, 0, 0, 0,
	0, 0, 3003, 3004, 0, 0, 1025, 2681, 2682, 1687,
	2699, 2700, 2701, 0, 1025, 0, 0, 0, 539, 0,
	0, 63, 0, 2032, 0, 0, 0, 1025, 3285, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 217,
	0, 217, 0, 0, 0, 217, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 1222, 0, 1189,
	217, 0, 217, 0, 0, 0, 1687, 217, 1222, 555,
	0, 0, 217, 1222, 0, 0, 2696, 0, 586, 0,
	0, 0, 2207, 0, 0, 73, 0, 0, 0, 0,
	3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075,
	3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 0,
	3088, 2137, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 2207, 3367, 0, 89,
	0, 0, 0, 0, 79, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2687, 3363, 0, 0, 0,
	3356, 0, 0, 0, 1482, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3354, 0, 1687, 0,
	0, 0, 3358, 80, 0, 0, 1513, 0, 0, 0,
	0, 0, 0, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 3364, 0, 0, 0, 2280, 0, 2702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 3357, 0, 0,
	0, 1501, 217, 0, 2697, 0, 0, 0, 0, 0,
	0, 0, 0, 2207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2293,
	0, 0, 0, 3284, 0, 0, 217, 0, 0, 0,
	217, 0, 0, 0, 858, 217, 0, 0, 858, 81,
	2325, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 0, 1490, 217, 0, 217, 0, 217, 0, 0,
	0, 539, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1889, 155, 84, 0, 85,
	0, 0, 1224, 0, 1228, 0, 1234, 0, 0, 0,
	1512, 1514, 2698, 0, 217, 0, 0, 0, 189, 0,
	3359, 0, 0, 0, 3360, 0, 707, 0, 0, 0,
	123, 0, 0, 0, 1499, 1500, 0, 586, 0, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 63, 0,
	217, 0, 1189, 217, 0, 0, 191, 0, 0, 0,
	0, 1505, 0, 0, 64, 1202, 586, 0, 3362, 1214,
	0, 0, 0, 217, 0, 0, 0, 68, 0, 124,
	0, 3365, 217, 217, 0, 217, 1357, 217, 0, 217,
	0, 217, 0, 159, 1362, 0, 0, 219, 0, 0,
	0, 190, 0, 0, 0, 1975, 0, 0, 1976, 0,
	1977, 183, 73, 0, 0, 0, 0, 0, 1273, 184,
	0, 217, 0, 0, 2693, 2694, 2695, 0, 0, 0,
	0, 2692, 2690, 2691, 2683, 2684, 2685, 2686, 2688, 2689,
	158, 0, 570, 0, 0, 78, 586, 0, 0, 0,
	1414, 1511, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 79, 86, 0, 0, 0, 1354, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 1214, 0, 0, 0,
	0, 0, 0, 3361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 1518, 1513, 0, 0, 0, 1376,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 1531,
	0, 0, 0, 0, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 872, 0, 0,
	0, 0, 1504, 0, 0, 1554, 0, 0, 0, 2211,
	1501, 1567, 0, 0, 2681, 2682, 0, 2699, 2700, 2701,
	0, 0, 0, 0, 0, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0,
	0, 0, 0, 0, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 2211, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 81, 0, 539, 0,
	0, 1507, 1508, 1509, 1510, 217, 0, 539, 0, 0,
	0, 1490, 3827, 2696, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 84, 0, 85, 0, 0, 0,
	1522, 0, 0, 1532, 1625, 1625, 1625, 0, 0, 1512,
	1514, 0, 0, 0, 0, 189, 0, 3490, 0, 0,
	0, 0, 0, 707, 1528, 0, 1529, 123, 0, 0,
	0, 0, 0, 1499, 1500, 0, 0, 0, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1520,
	0, 0, 2687, 191, 0, 0, 0, 0, 0, 0,
	1505, 3516, 0, 2734, 0, 0, 0, 0, 0, 0,
	2211, 0, 0, 0, 0, 0, 124, 858, 0, 0,
	0, 2338, 0, 0, 1530, 0, 0, 0, 0, 217,
	159, 0, 0, 0, 0, 2760, 0, 0, 190, 0,
	217, 1519, 0, 0, 0, 2702, 0, 0, 183, 0,
	0, 0, 2774, 217, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3826, 217, 2788, 0,
	0, 0, 0, 0, 0, 0, 0, 158, 0, 0,
	0, 2697, 0, 0, 0, 0, 217, 2421, 2211, 2211,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 1222,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 2456, 0, 0, 3628, 0,
	1523, 0, 0, 0, 0, 2338, 0, 539, 0, 0,
	2476, 0, 0, 0, 0, 0, 217, 0, 0, 217,
	0, 217, 0, 217, 0, 0, 0, 0, 1189, 0,
	217, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	2498, 712, 0, 2338, 2338, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 2698,
	0, 2774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 1189, 217, 0, 0, 1222, 0, 1222, 0,
	0, 1189, 0, 1189, 0, 1189, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 217, 217, 217, 217,
	1189, 217, 0, 217, 1214, 0, 0, 0, 0, 872,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1177, 0,
	0, 0, 1177, 0, 217, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2693, 2694, 2695, 0, 0, 0, 0, 2692, 2690,
	2691, 2683, 2684, 2685, 2686, 2688, 2689, 0, 0, 0,
	1192, 0, 0, 1091, 0, 0, 0, 0, 2681, 2682,
	0, 2699, 2700, 2701, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1913, 0, 0, 0, 0, 0, 0, 0, 1214,
	0, 0, 1924, 0, 3023, 0, 0, 2696, 0, 0,
	0, 0, 0, 0, 0, 1933, 1934, 1935, 0, 0,
	0, 3039, 0, 2007, 0, 2011, 0, 0, 0, 0,
	0, 0, 2025, 0, 0, 0, 0, 0, 0, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
	2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 0, 2074, 0, 2076, 2077, 2078,
	2079, 0, 0, 0, 0, 0, 2687, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 2103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1554, 0, 217, 0, 2118, 0, 0, 539, 0,
	0, 0, 0, 539, 0, 0, 539, 0, 0, 539,
	539, 2148, 2151, 2154, 2157, 539, 2161, 2162, 2163, 2164,
	2165, 2166, 2167, 217, 0, 0, 0, 0, 0, 0,
	0, 3130, 0, 0, 0, 1222, 0, 0, 63, 0,
	0, 0, 0, 0, 2203, 0, 2214, 2216, 2221, 0,
	0, 0, 0, 1222, 64, 2697, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 0, 0,
	0, 0, 2338, 2338, 217, 0, 0, 0, 2338, 0,
	0, 2814, 0, 0, 0, 0, 0, 0, 0, 2338,
	2814, 0, 2338, 2814, 2814, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 0, 0, 217, 217, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 1189,
	0, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 2338, 0, 217, 2338, 1269, 89, 0, 2338, 2338,
	0, 79, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2698, 0, 0, 0, 0, 0, 0,
	0, 0, 2890, 0, 0, 2892, 2338, 0, 0, 217,
	0, 0, 0, 217, 0, 1269, 0, 0, 0, 0,
	0, 1177, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 0, 2456, 0, 0, 1189, 0, 217, 0, 0,
	2338, 0, 539, 0, 0, 0, 0, 0, 0, 2338,
	0, 0, 1482, 1483, 0, 0, 0, 0, 217, 217,
	0, 0, 872, 0, 0, 0, 0, 0, 1177, 0,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 1485, 0, 217, 2456, 0, 0, 2456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2423, 0,
	2425, 0, 0, 918, 0, 2693, 2694, 2695, 0, 0,
	0, 1484, 2692, 2690, 2691, 2683, 2684, 2685, 2686, 2688,
	2689, 1504, 0, 0, 2981, 0, 0, 1189, 217, 1501,
	217, 0, 0, 2681, 2682, 0, 2699, 2700, 2701, 0,
	0, 0, 0, 0, 0, 218, 81, 0, 0, 0,
	0, 0, 0, 0, 3012, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 218, 0,
	0, 3006, 0, 2415, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 84, 0, 85, 0, 218, 0,
	1507, 1508, 1509, 1510, 0, 0, 0, 0, 0, 0,
	1490, 0, 2696, 0, 0, 189, 0, 0, 3339, 0,
	0, 1177, 0, 707, 0, 0, 0, 123, 0, 3044,
	0, 0, 0, 0, 0, 3347, 0, 1482, 1483, 0,
	0, 2545, 0, 0, 0, 0, 0, 0, 1512, 1514,
	0, 0, 0, 191, 0, 0, 0, 0, 0, 1513,
	0, 0, 0, 0, 0, 2488, 1485, 0, 0, 0,
	0, 0, 1499, 1500, 0, 0, 124, 0, 0, 0,
	1214, 0, 0, 0, 0, 0, 0, 1535, 1536, 0,
	159, 2687, 0, 0, 0, 0, 1484, 0, 190, 1505,
	0, 0, 0, 0, 0, 0, 1504, 0, 183, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 217, 217, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1351, 0, 0,
	0, 0, 2592, 2593, 2702, 0, 539, 539, 2599, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2613, 2614, 0,
	0, 1091, 0, 2118, 0, 1507, 1508, 1509, 1510, 1222,
	2697, 0, 2621, 0, 0, 1490, 0, 0, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 2635, 0,
	0, 3482, 0, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 2647, 0, 0, 0, 0,
	0, 0, 0, 1512, 1514, 0, 0, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 2032, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 217, 0, 0, 0,
	0, 0, 1177, 0, 0, 217, 0, 0, 2698, 0,
	2221, 2221, 2221, 217, 0, 0, 0, 0, 0, 0,
	217, 0, 2032, 0, 0, 1625, 0, 0, 0, 0,
	0, 0, 0, 2738, 0, 0, 0, 0, 0, 0,
	2338, 217, 0, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 0, 2498, 2498, 0, 0,
	0, 0, 712, 712, 2338, 0, 0, 2456, 2456, 0,
	0, 712, 2338, 0, 0, 0, 0, 0, 0, 217,
	0, 63, 0, 0, 1511, 0, 0, 0, 0, 0,
	1177, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 1506, 858, 2681, 2682, 0, 2699, 2700, 2701,
	68, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	2693, 2694, 2695, 0, 0, 3011, 0, 2692, 2690, 2691,
	2683, 2684, 2685, 2686, 2688, 2689, 0, 0, 0, 0,
	0, 0, 0, 0, 2831, 73, 0, 0, 3304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2696, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 1177, 0, 0, 0, 89,
	0, 0, 0, 0, 79, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 1222, 0, 217, 0,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	0, 217, 0, 218, 1097, 218, 218, 0, 1097, 218,
	218, 1097, 0, 80, 0, 1097, 0, 0, 2338, 2338,
	2338, 0, 2687, 218, 0, 0, 0, 0, 0, 0,
	0, 1222, 0, 0, 0, 0, 0, 0, 0, 2338,
	0, 2814, 0, 0, 1222, 1222, 217, 0, 0, 1177,
	0, 0, 0, 0, 0, 0, 0, 217, 217, 0,
	0, 2882, 0, 0, 1097, 218, 218, 0, 2338, 0,
	2338, 217, 0, 0, 0, 2702, 0, 0, 218, 0,
	0, 0, 2338, 0, 0, 2905, 3424, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 2911, 0, 218, 218,
	218, 1177, 217, 218, 1097, 0, 0, 0, 1097, 0,
	0, 2697, 1097, 218, 218, 0, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 0, 1222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2025, 2956, 2957,
	0, 0, 0, 2998, 2999, 0, 0, 3002, 0, 0,
	0, 3005, 0, 0, 0, 1097, 155, 84, 0, 85,
	3009, 0, 0, 0, 0, 0, 0, 0, 0, 3016,
	0, 0, 2738, 0, 0, 0, 0, 0, 189, 218,
	0, 0, 0, 0, 0, 0, 707, 3028, 0, 0,
	123, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3051, 3052, 2698,
	3053, 3054, 3055, 0, 0, 0, 191, 2338, 0, 2814,
	0, 0, 3510, 0, 0, 0, 0, 0, 3061, 0,
	217, 0, 3063, 0, 0, 0, 0, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 159, 586, 0, 0, 0, 0, 0,
	0, 190, 0, 3091, 3092, 0, 0, 0, 0, 0,
	0, 183, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 3103, 0, 0, 3510, 0, 0, 0, 0, 0,
	0, 0, 2338, 0, 0, 0, 3112, 0, 0, 0,
	1349, 0, 3580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1222, 0, 0, 0, 0, 0,
	0, 2693, 2694, 2695, 0, 0, 0, 0, 2692, 2690,
	2691, 2683, 2684, 2685, 2686, 2688, 2689, 217, 217, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3142, 0, 0, 0, 0, 0, 0,
	0, 3044, 0, 0, 0, 0, 0, 0, 3151, 3154,
	0, 0, 0, 0, 0, 0, 3510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 1097, 0, 218,
	218, 218, 0, 3424, 0, 0, 218, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 1097, 0, 2814, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	1222, 1625, 1222, 0, 0, 0, 0, 0, 2681, 2682,
	3243, 2699, 2700, 2701, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3715, 0, 0,
	0, 0, 1177, 1222, 0, 0, 217, 0, 0, 0,
	0, 0, 3198, 0, 0, 0, 0, 0, 0, 0,
	217, 2338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1177, 0, 0, 217, 0, 0,
	0, 0, 0, 3282, 3283, 0, 0, 2696, 0, 3287,
	3288, 1177, 0, 0, 3291, 3292, 0, 0, 0, 0,
	0, 3296, 0, 3044, 0, 0, 0, 1177, 0, 0,
	0, 0, 3300, 0, 0, 0, 0, 0, 872, 0,
	0, 3249, 3250, 3251, 0, 0, 0, 0, 3305, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 1097,
	1097, 218, 0, 0, 0, 0, 0, 1097, 0, 2338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2687, 0, 0, 3510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 218,
	0, 0, 0, 905, 218, 0, 0, 1222, 2703, 2338,
	1177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 1483, 218, 0, 218, 0, 218, 0, 0, 2702,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1177, 0, 1513, 0, 0, 216, 0, 0, 3154, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 2697, 0, 0, 622, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 1097, 0, 1097, 0, 1097, 622, 1504,
	0, 0, 0, 0, 0, 1097, 0, 1501, 1097, 218,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 1097, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 218, 0, 218, 0, 218, 0, 218, 3001,
	218, 0, 0, 0, 0, 1019, 0, 0, 0, 0,
	3154, 0, 0, 0, 0, 0, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 0, 0, 1490, 1177,
	218, 0, 1177, 2698, 0, 0, 0, 3477, 3478, 3479,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 1026, 0, 0, 0, 0,
	2025, 0, 0, 3488, 3489, 0, 1512, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 3497, 0, 0, 0, 0, 0, 0, 0, 0,
	1499, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	1177, 0, 0, 3154, 0, 0, 0, 0, 0, 0,
	0, 3534, 0, 0, 0, 0, 0, 0, 0, 0,
	3541, 0, 0, 858, 0, 2693, 2694, 2695, 0, 3548,
	0, 0, 2692, 2690, 2691, 2683, 2684, 2685, 2686, 2688,
	2689, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1511, 0, 0,
	0, 0, 0, 0, 3154, 3154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1177, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 3640, 0,
	0, 3643, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 3154, 0, 0, 3154, 0, 0, 0, 0,
	0, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2025, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 1097, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 1177, 0, 3769, 3769, 3769, 218, 0,
	0, 0, 0, 216, 0, 216, 216, 0, 0, 216,
	216, 0, 0, 0, 0, 1177, 0, 0, 3790, 0,
	0, 0, 0, 622, 0, 218, 0, 0, 218, 0,
	218, 0, 218, 0, 0, 0, 0, 0, 0, 218,
	218, 1097, 1097, 0, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 1097, 0, 0, 3769,
	0, 0, 0, 0, 218, 216, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 0,
	218, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 216,
	216, 0, 0, 216, 3154, 0, 3154, 0, 0, 0,
	0, 0, 0, 216, 216, 218, 218, 218, 218, 0,
	218, 0, 218, 0, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 1177, 0, 1177, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 1196, 0, 218, 1177, 0, 0, 3769, 3887, 0,
	0, 218, 0, 0, 0, 3891, 0, 1013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 130, 0, 0, 0, 0, 0, 1177,
	63, 0, 0, 216, 1177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 0, 125, 0,
	1298, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 58,
	1322, 1322, 1322, 0, 1177, 0, 42, 0, 127, 0,
	0, 0, 0, 0, 0, 1355, 1356, 0, 0, 0,
	0, 0, 41, 0, 73, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 1483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 59, 0, 0,
	1177, 0, 45, 0, 0, 0, 1513, 78, 0, 0,
	128, 0, 0, 1485, 0, 0, 0, 43, 89, 0,
	0, 0, 0, 79, 86, 0, 0, 0, 0, 0,
	1177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 46, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1177, 80, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 1177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3000, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 1097, 1647, 0,
	1026, 1177, 1490, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 216,
	1647, 216, 0, 0, 0, 0, 622, 0, 0, 0,
	0, 622, 0, 0, 0, 0, 0, 0, 1177, 0,
	1512, 1514, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 0, 1499, 1500, 0, 0, 47, 0,
	0, 0, 0, 0, 0, 218, 218, 218, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 60,
	0, 1505, 0, 0, 50, 155, 84, 218, 85, 0,
	48, 0, 0, 0, 129, 0, 1097, 0, 0, 0,
	49, 0, 218, 0, 0, 1097, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 1097, 0, 123,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 1663, 0, 218, 0,
	0, 1097, 218, 0, 0, 191, 0, 0, 0, 0,
	0, 1672, 1097, 1196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	0, 1511, 0, 0, 0, 0, 91, 0, 91, 0,
	91, 0, 159, 0, 0, 0, 0, 218, 218, 1506,
	190, 622, 0, 0, 0, 0, 0, 0, 0, 0,
	183, 0, 0, 0, 1097, 1097, 0, 0, 184, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 158,
	0, 0, 3, 0, 0, 216, 0, 0, 0, 216,
	0, 0, 0, 0, 216, 872, 0, 0, 0, 0,
	853, 91, 91, 0, 0, 1097, 0, 218, 1097, 218,
	91, 0, 216, 0, 216, 0, 216, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 1482, 1483, 0, 0,
	0, 0, 0, 216, 0, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 1513, 0,
	0, 0, 91, 0, 0, 1485, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 216, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 216, 0, 0, 1504, 0, 0, 0, 0,
	0, 622, 216, 1501, 216, 0, 216, 1851, 216, 0,
	216, 1858, 0, 0, 0, 0, 0, 0, 0, 1482,
	1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0,
	0, 834, 0, 0, 1298, 0, 1877, 0, 1877, 0,
	216, 1513, 0, 0, 0, 2598, 0, 0, 1485, 0,
	0, 1547, 0, 0, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 1553, 0,
	0, 0, 1559, 0, 1490, 1196, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 1858, 1512, 1514, 1928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1945, 0, 1499, 1500, 0, 0,
	0, 0, 0, 0, 1955, 0, 1957, 0, 1959, 0,
	1961, 0, 1962, 0, 0, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 1505, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 0,
	0, 0, 1979, 0, 0, 0, 0, 0, 0, 0,
	1645, 0, 1648, 0, 91, 0, 1522, 0, 0, 1532,
	0, 218, 0, 0, 0, 1512, 1514, 0, 693, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	1528, 1097, 1529, 0, 0, 218, 0, 0, 0, 1499,
	1500, 0, 676, 222, 218, 0, 0, 0, 1026, 0,
	0, 0, 218, 0, 0, 1520, 0, 0, 0, 218,
	0, 0, 0, 1511, 1026, 1097, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 677, 0, 216, 0,
	0, 1506, 0, 0, 0, 0, 0, 678, 0, 0,
	1530, 0, 0, 0, 0, 0, 0, 1097, 1097, 1097,
	0, 0, 0, 0, 0, 679, 0, 0, 615, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 218, 1097,
	0, 0, 698, 0, 0, 0, 0, 0, 615, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 680,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 1030, 0, 0, 682,
	0, 0, 683, 0, 0, 0, 0, 0, 216, 0,
	0, 609, 0, 0, 0, 0, 1523, 1502, 1498, 216,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0,
	0, 0, 216, 0, 0, 697, 0, 0, 0, 0,
	2277, 0, 0, 0, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 216, 0,
	1097, 0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 0, 0, 0, 216, 0, 0, 216, 0,
	216, 0, 216, 0, 0, 218, 685, 0, 0, 216,
	216, 0, 0, 0, 0, 1097, 218, 218, 0, 0,
	1097, 0, 0, 0, 0, 853, 701, 853, 686, 0,
	218, 0, 0, 0, 216, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 0, 216, 0, 218, 0, 608, 0, 1196, 0,
	1097, 218, 0, 687, 0, 1097, 688, 0, 0, 0,
	0, 0, 695, 0, 0, 689, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 216, 216, 216, 0,
	216, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1858, 0, 0, 1097, 0, 690, 696,
	2447, 0, 0, 0, 0, 0, 691, 0, 0, 0,
	0, 0, 0, 216, 0, 0, 0, 0, 0, 692,
	0, 216, 0, 0, 699, 0, 1097, 2478, 0, 0,
	1322, 0, 1322, 0, 1322, 0, 0, 610, 0, 0,
	834, 0, 0, 834, 834, 0, 0, 0, 694, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2524, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 2532, 0, 2535, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 0, 0, 2092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 2556, 1196, 2558,
	1196, 0, 2561, 0, 1553, 0, 0, 1097, 1553, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 2589, 1097, 1030, 0, 1097, 0, 1030,
	0, 0, 1030, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 218, 0, 0,
	1013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1648, 0, 0, 0,
	0, 0, 0, 0, 1094, 1030, 0, 1026, 1094, 0,
	0, 1211, 0, 0, 0, 1211, 0, 0, 0, 0,
	0, 0, 1026, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1030, 0, 0, 0, 1030,
	0, 0, 1647, 1030, 0, 0, 0, 0, 0, 0,
	218, 1482, 1483, 1030, 1211, 0, 0, 1525, 1526, 1527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 218, 0, 0, 1097, 0,
	1485, 0, 0, 0, 0, 0, 0, 1531, 1097, 1097,
	0, 0, 0, 216, 1211, 0, 1030, 0, 1211, 0,
	0, 0, 1211, 0, 0, 1097, 0, 0, 0, 0,
	1484, 0, 1211, 91, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 216, 216, 216, 1501, 0,
	0, 0, 0, 0, 1647, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 218, 0, 216, 0, 0,
	0, 0, 0, 0, 0, 1211, 0, 0, 0, 218,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 91, 0, 218, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 0, 0, 0, 0, 0, 216, 1490,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1026, 0, 1522, 0,
	0, 1532, 0, 0, 0, 2806, 0, 1512, 1514, 0,
	0, 0, 0, 0, 0, 91, 0, 216, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 1500, 0, 0, 0, 0, 2844, 2846, 2447,
	0, 0, 216, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 0, 216,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2902, 0, 0, 0, 2906, 0, 0, 0, 0, 1030,
	0, 1030, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1511, 0,
	0, 1700, 0, 0, 0, 0, 0, 0, 0, 1196,
	1196, 1482, 1483, 0, 1030, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2092,
	0, 0, 0, 1513, 2960, 1030, 0, 0, 1523, 0,
	1485, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	1553, 0, 0, 0, 0, 0, 615, 0, 0, 0,
	0, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 1211, 0, 0, 0, 0, 0, 2984,
	1504, 1196, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 910, 2996, 0, 0, 0, 0, 0,
	0, 0, 0, 1026, 1026, 1521, 0, 0, 0, 0,
	2591, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 0, 0, 637, 1507,
	1508, 1509, 1510, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 1030, 638, 0, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1013,
	0, 0, 0, 0, 0, 0, 0, 1512, 1514, 0,
	0, 0, 0, 0, 1013, 0, 639, 0, 657, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 1500, 0, 0, 0, 0, 0, 0, 1211,
	1211, 0, 640, 0, 0, 641, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 216, 664, 0, 0, 0, 0, 0, 642, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 662,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 0, 0, 0, 0, 643,
	0, 0, 216, 0, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 1030, 0, 1030, 0, 1030, 644,
	91, 91, 645, 0, 91, 0, 1030, 666, 0, 1030,
	1026, 609, 0, 0, 0, 0, 1482, 1483, 0, 0,
	0, 0, 1030, 1030, 1030, 0, 0, 0, 1511, 0,
	0, 0, 91, 91, 0, 0, 91, 0, 1513, 0,
	0, 0, 0, 0, 0, 1485, 1506, 0, 216, 0,
	0, 0, 0, 1211, 0, 1211, 0, 1211, 0, 0,
	0, 0, 0, 0, 0, 1211, 0, 0, 1211, 0,
	0, 0, 0, 0, 0, 1484, 0, 665, 0, 0,
	0, 1211, 1211, 1211, 0, 1504, 648, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 615, 0, 0, 0, 0, 0, 2447, 1013, 0,
	0, 853, 0, 0, 0, 0, 3213, 0, 0, 0,
	0, 0, 0, 0, 0, 646, 0, 1700, 1700, 1030,
	0, 3225, 0, 0, 0, 0, 649, 0, 91, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 650, 0,
	0, 0, 1502, 1498, 1490, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 0, 0, 0, 1026,
	0, 0, 0, 0, 0, 0, 608, 1026, 1094, 0,
	3267, 0, 0, 0, 0, 0, 658, 0, 0, 0,
	1647, 0, 1512, 1514, 0, 651, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1030, 0, 0,
	0, 0, 0, 0, 656, 0, 1499, 1500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 0,
	0, 669, 0, 668, 0, 216, 653, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 216, 216, 0, 654,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 670,
	216, 667, 0, 0, 0, 0, 1094, 610, 0, 1030,
	0, 0, 0, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 0, 0, 216, 1030, 0, 0, 0, 0,
	0, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 1482, 1483, 0, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1513, 0, 0, 0, 0,
	0, 0, 1485, 1511, 0, 1094, 0, 0, 0, 1531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 91, 0, 0,
	0, 1094, 1484, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 1504, 0, 0, 1013, 1013, 3386, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 2447, 0,
	0, 0, 0, 0, 1095, 0, 1030, 0, 1095, 0,
	0, 1212, 0, 0, 0, 1212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1700, 0, 1211, 2447, 0, 0, 216,
	0, 0, 0, 3439, 0, 0, 0, 0, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 1030, 0,
	0, 1490, 0, 0, 1212, 1094, 0, 0, 0, 0,
	1030, 0, 0, 0, 0, 0, 0, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0,
	1522, 0, 0, 1532, 0, 0, 0, 0, 0, 1512,
	1514, 0, 0, 0, 1212, 0, 0, 0, 1212, 0,
	0, 0, 1212, 0, 1528, 0, 1529, 1094, 0, 0,
	0, 0, 1212, 1499, 1500, 0, 0, 0, 0, 1211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 216, 216, 0, 0,
	1505, 0, 1030, 1030, 0, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1212, 0, 1030, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 3517, 1013, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1211, 1211, 0, 1211, 0, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 1211, 0, 0, 756,
	216, 792, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 763, 216, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	775, 761, 0, 0, 0, 0, 0, 0, 0, 0,
	1523, 0, 0, 0, 0, 0, 0, 0, 3618, 1196,
	0, 0, 0, 0, 0, 762, 0, 0, 0, 0,
	765, 0, 0, 0, 0, 798, 0, 0, 0, 0,
	0, 0, 0, 772, 773, 0, 0, 0, 0, 785,
	0, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	0, 0, 0, 793, 767, 0, 0, 0, 0, 216,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 1013, 0, 0, 0, 0, 216, 0, 0, 1013,
	0, 0, 0, 0, 791, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0,
	2656, 0, 0, 0, 2657, 0, 0, 3680, 0, 0,
	768, 0, 0, 0, 0, 0, 0, 0, 760, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 769, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 777, 776, 0, 0, 0, 0, 0,
	0, 771, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 1212, 0, 91, 0, 3723, 797, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 1030,
	0, 3740, 0, 0, 1095, 91, 0, 0, 794, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 3752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1030, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1030, 0, 0, 0, 0, 1030, 0,
	0, 766, 0, 0, 0, 0, 0, 0, 1094, 0,
	1700, 0, 0, 0, 1030, 0, 0, 0, 764, 0,
	0, 0, 789, 790, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 787, 0,
	1700, 0, 0, 0, 0, 783, 0, 1094, 780, 0,
	0, 0, 0, 0, 781, 0, 0, 758, 0, 795,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 759, 0, 0, 0, 1212,
	1212, 0, 0, 0, 0, 0, 782, 1095, 0, 0,
	0, 779, 0, 0, 0, 0, 0, 1030, 0, 0,
	796, 0, 0, 0, 0, 0, 1030, 0, 784, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 1030, 0, 786,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 0, 0, 0, 0, 0, 0, 0,
	0, 788, 0, 1030, 0, 0, 1094, 0, 0, 2092,
	0, 0, 0, 0, 0, 1211, 0, 1030, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1211, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1211, 0, 0, 0, 1030, 1030, 0, 0, 0,
	0, 0, 1211, 1212, 0, 1212, 0, 1212, 0, 0,
	0, 0, 0, 0, 0, 1212, 0, 0, 1212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1212, 1212, 1212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1030, 0, 0, 1030,
	0, 0, 0, 91, 1211, 1211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1513, 0, 0, 0, 0,
	0, 0, 1485, 1700, 0, 1094, 0, 0, 1094, 1531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 1030, 1095, 0,
	0, 0, 1504, 0, 0, 0, 0, 1700, 1700, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 91, 0, 1700, 1700, 0, 1094,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1700, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 1030, 1030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 1532, 0, 0, 0, 0, 0, 1512,
	1514, 0, 0, 0, 0, 0, 0, 1030, 0, 0,
	0, 0, 0, 0, 1528, 0, 1529, 0, 0, 0,
	0, 0, 0, 1499, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1030,
	0, 0, 1030, 0, 0, 1212, 0, 0, 0, 0,
	0, 1700, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1095, 1030, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1030, 0, 0, 0, 0, 0, 0, 1211, 0,
	1523, 1211, 0, 0, 0, 0, 0, 0, 1030, 1030,
	1030, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1030, 0, 0, 1095, 0, 0,
	1030, 0, 0, 0, 0, 1211, 0, 0, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1030, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1700, 0, 0, 0, 1211, 1211, 1211,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1211, 0, 0, 0, 1521, 0, 1094,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0,
	2114, 1094, 0, 0, 2115, 0, 0, 0, 0, 0,
	0, 1212, 1212, 0, 1212, 0, 0, 1482, 1483, 0,
	1515, 1516, 1517, 1525, 1526, 1527, 1212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 1513,
	0, 0, 0, 0, 0, 0, 1485, 0, 0, 0,
	1030, 0, 0, 1531, 0, 0, 0, 0, 1030, 0,
	0, 0, 1030, 0, 1030, 0, 0, 0, 0, 0,
	0, 1030, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 1030, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 1094, 0, 0, 1030, 0, 0, 0,
	0, 1030, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 1030, 0, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 0, 0, 0, 1094, 0, 0, 0, 0,
	1094, 0, 0, 0, 1522, 0, 0, 1532, 0, 0,
	0, 0, 0, 1512, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1030, 1528, 0,
	1529, 0, 0, 0, 0, 0, 0, 1499, 1500, 0,
	1094, 0, 0, 0, 0, 1211, 0, 0, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 1030, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1700, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 1530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1030, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 1030, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1700, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 0, 1511, 0, 0, 1094, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 1506, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1523, 1030, 0, 1095, 1030, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1700, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 1211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	0, 0, 0, 0, 0, 0, 1095, 0, 3310, 0,
	0, 0, 0, 0, 0, 1212, 1482, 1483, 0, 1515,
	1516, 1517, 1525, 1526, 1527, 0, 0, 1212, 0, 0,
	0, 0, 0, 0, 0, 0, 1095, 1518, 1513, 1030,
	0, 0, 0, 0, 0, 1485, 0, 0, 0, 1030,
	1030, 1212, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1212, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 1211, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1211, 1211,
	0, 0, 0, 0, 1212, 1212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	0, 0, 0, 0, 1490, 1095, 0, 0, 1095, 1482,
	1483, 0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1518, 1513, 0, 1522, 0, 0, 1532, 0, 1485, 0,
	0, 0, 1512, 1514, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1528, 0, 1529,
	0, 0, 0, 0, 0, 0, 1499, 1500, 1484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 1095,
	0, 0, 1520, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1511, 0, 0, 1522, 0, 0, 1532,
	0, 0, 0, 0, 0, 1512, 1514, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	1528, 0, 1529, 0, 0, 0, 0, 0, 0, 1499,
	1500, 0, 0, 1523, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0,
	0, 0, 0, 0, 0, 0, 1511, 3014, 1212, 0,
	0, 1212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 1483, 0, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 1212, 1523, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 0,
	0, 0, 0, 0, 1485, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 0, 1212, 1212, 1212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1212, 1484, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	2659, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 1482, 1483, 1490, 1515, 1516, 1517, 1525, 1526, 1527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1518, 1513, 0, 0, 0, 0, 0, 0,
	1485, 0, 1522, 0, 0, 1532, 0, 1531, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	1484, 1095, 0, 1095, 0, 1499, 1500, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	1095, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	1095, 0, 0, 1519, 0, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 1212, 0, 0, 1522, 0,
	0, 1532, 1511, 0, 0, 0, 0, 1512, 1514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 1528, 0, 1529, 0, 0, 0, 0, 0,
	0, 1499, 1500, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 1523, 0, 0, 0, 0, 1520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1511, 0,
	0, 0, 0, 0, 0, 0, 2658, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1523, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 0, 1212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 2655, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 1212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1212, 1212,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 1098,
	232, 233, 1099, 1100, 1101, 1212, 1102, 485, 1103, 1104,
	1105, 1106, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 1107, 242, 243, 244, 245,
	246, 1108, 1109, 0, 247, 490, 491, 492, 1110, 248,
	249, 493, 1111, 1178, 1112, 250, 251, 252, 253, 254,
	255, 256, 0, 1113, 258, 259, 260, 257, 1114, 261,
	0, 262, 263, 264, 1115, 265, 971, 266, 267, 1116,
	1117, 1119, 1118, 1120, 1121, 1122, 268, 269, 270, 271,
	0, 272, 494, 495, 1123, 276, 273, 274, 1124, 277,
	275, 1125, 278, 1126, 1127, 279, 280, 281, 1128, 282,
	1129, 283, 284, 1130, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 1131, 223,
	1132, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 1133, 301, 1134, 1135, 972, 302, 303,
	500, 501, 304, 305, 1136, 306, 502, 1137, 503, 307,
	1138, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	974, 313, 314, 1139, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 1140, 973, 321, 507, 508,
	1141, 509, 1142, 323, 975, 510, 976, 324, 325, 326,
	977, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	1143, 334, 333, 1144, 335, 511, 978, 336, 337, 979,
	1145, 338, 339, 340, 1146, 1147, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 980, 357, 358, 361, 362, 360,
	981, 359, 1148, 225, 982, 363, 1149, 512, 364, 513,
	366, 367, 1150, 0, 368, 0, 1151, 1152, 370, 371,
	372, 1153, 1154, 373, 374, 514, 983, 375, 984, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	1155, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	1156, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 1157, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 1158,
	409, 985, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 1159, 427, 428,
	426, 429, 430, 431, 1160, 432, 416, 417, 433, 434,
	986, 435, 436, 522, 0, 437, 1161, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	1162, 449, 450, 0, 448, 1163, 451, 452, 453, 454,
	455, 291, 456, 1164, 457, 525, 526, 527, 528, 1165,
	464, 1166, 458, 459, 529, 460, 530, 1167, 461, 462,
	463, 0, 465, 466, 1168, 1169, 467, 468, 469, 471,
	472, 470, 473, 1170, 474, 1171, 0, 475, 476, 477,
	531, 532, 533, 1172, 479, 478, 534, 1173, 1174, 1175,
	1176, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 0, 0, 2255, 0, 0,
	0, 0, 0, 0, 0, 2256, 226, 227, 228, 229,
	230, 231, 1098, 232, 233, 1099, 1100, 1101, 0, 1102,
	485, 1103, 1104, 1105, 1106, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 1107, 242,
	243, 244, 245, 246, 1108, 1109, 0, 247, 490, 491,
	492, 1110, 248, 249, 493, 1111, 1178, 1112, 250, 251,
	252, 253, 254, 255, 256, 0, 1113, 258, 259, 260,
	257, 1114, 261, 0, 262, 263, 264, 1115, 265, 971,
	266, 267, 1116, 1117, 1119, 1118, 1120, 1121, 1122, 268,
	269, 270, 271, 0, 272, 494, 495, 1123, 276, 273,
	274, 1124, 277, 275, 1125, 278, 1126, 1127, 279, 280,
	281, 1128, 282, 1129, 283, 284, 1130, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 1131, 223, 1132, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 1133, 301, 1134, 1135,
	972, 302, 303, 500, 501, 304, 305, 1136, 306, 502,
	1137, 503, 307, 1138, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 974, 313, 314, 1139, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 1140, 973,
	321, 507, 508, 1141, 509, 1142, 323, 975, 510, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 1143, 334, 333, 1144, 335, 511, 978,
	336, 337, 979, 1145, 338, 339, 340, 1146, 1147, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 1148, 225, 982, 363, 1149,
	512, 364, 513, 366, 367, 1150, 0, 368, 0, 1151,
	1152, 370, 371, 372, 1153, 1154, 373, 374, 514, 983,
	375, 984, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 1155, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 1156, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 1157, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 1158, 409, 985, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	1159, 427, 428, 426, 429, 430, 431, 1160, 432, 416,
	417, 433, 434, 986, 435, 436, 522, 0, 437, 1161,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 1162, 449, 450, 0, 448, 1163, 451,
	452, 453, 454, 455, 291, 456, 1164, 457, 525, 526,
	527, 528, 1165, 464, 1166, 458, 459, 529, 460, 530,
	1167, 461, 462, 463, 0, 465, 466, 1168, 1169, 467,
	468, 469, 471, 472, 470, 473, 1170, 474, 1171, 0,
	475, 476, 477, 531, 532, 533, 1172, 479, 478, 534,
	1173, 1174, 1175, 1176, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 3022, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3024, 226, 227, 228,
	229, 230, 231, 1098, 232, 233, 1099, 1100, 1101, 0,
	1102, 485, 1103, 1104, 1105, 1106, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 1107,
	242, 243, 244, 245, 246, 1108, 1109, 0, 247, 490,
	491, 492, 1110, 248, 249, 493, 1111, 1178, 1112, 250,
	251, 252, 253, 254, 255, 256, 0, 1113, 258, 259,
	260, 257, 1114, 261, 0, 262, 263, 264, 1115, 265,
	971, 266, 267, 1116, 1117, 1119, 1118, 1120, 1121, 1122,
	268, 269, 270, 271, 0, 272, 494, 495, 1123, 276,
	273, 274, 1124, 277, 275, 1125, 278, 1126, 1127, 279,
	280, 281, 1128, 282, 1129, 283, 284, 1130, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 1131, 223, 1132, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 1133, 301, 1134,
	1135, 972, 302, 303, 500, 501, 304, 305, 1136, 306,
	502, 1137, 503, 307, 1138, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 974, 313, 314, 1139, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 1140,
	973, 321, 507, 508, 1141, 509, 1142, 323, 975, 510,
	976, 324, 325, 326, 977, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 1143, 334, 333, 1144, 335, 511,
	978, 336, 337, 979, 1145, 338, 339, 340, 1146, 1147,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 980, 357,
	358, 361, 362, 360, 981, 359, 1148, 225, 982, 363,
	1149, 512, 364, 513, 366, 367, 1150, 0, 368, 0,
	1151, 1152, 370, 371, 372, 1153, 1154, 373, 374, 514,
	983, 375, 984, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 1155, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 1156, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 1157, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 1158, 409, 985, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 1159, 427, 428, 426, 429, 430, 431, 1160, 432,
	416, 417, 433, 434, 986, 435, 436, 522, 0, 437,
	1161, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 1162, 449, 450, 0, 448, 1163,
	451, 452, 453, 454, 455, 291, 456, 1164, 457, 525,
	526, 527, 528, 1165, 464, 1166, 458, 459, 529, 460,
	530, 1167, 461, 462, 463, 0, 465, 466, 1168, 1169,
	467, 468, 469, 471, 472, 470, 473, 1170, 474, 1171,
	0, 475, 476, 477, 531, 532, 533, 1172, 479, 478,
	534, 1173, 1174, 1175, 1176, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 1092, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3338, 226, 227, 228, 229, 230, 231, 1098, 232,
	233, 1099, 1100, 1101, 0, 1102, 485, 1103, 1104, 1105,
	1106, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 1107, 242, 243, 244, 245, 246,
	1108, 1109, 0, 247, 490, 491, 492, 1110, 248, 249,
	493, 1111, 1178, 1112, 250, 251, 252, 253, 254, 255,
	256, 0, 1113, 258, 259, 260, 257, 1114, 261, 0,
	262, 263, 264, 1115, 265, 971, 266, 267, 1116, 1117,
	1119, 1118, 1120, 1121, 1122, 268, 269, 270, 271, 0,
	272, 494, 495, 1123, 276, 273, 274, 1124, 277, 275,
	1125, 278, 1126, 1127, 279, 280, 281, 1128, 282, 1129,
	283, 284, 1130, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 1131, 223, 1132,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 1133, 301, 1134, 1135, 972, 302, 303, 500,
	501, 304, 305, 1136, 306, 502, 1137, 503, 307, 1138,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 974,
	313, 314, 1139, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 1140, 973, 321, 507, 508, 1141,
	509, 1142, 323, 975, 510, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 1143,
	334, 333, 1144, 335, 511, 978, 336, 337, 979, 1145,
	338, 339, 340, 1146, 1147, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 1148, 225, 982, 363, 1149, 512, 364, 513, 366,
	367, 1150, 0, 368, 0, 1151, 1152, 370, 371, 372,
	1153, 1154, 373, 374, 514, 983, 375, 984, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 1155,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 1156,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 1157, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 1158, 409,
	985, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 1159, 427, 428, 426,
	429, 430, 431, 1160, 432, 416, 417, 433, 434, 986,
	435, 436, 522, 0, 437, 1161, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 1162,
	449, 450, 0, 448, 1163, 451, 452, 453, 454, 455,
	291, 456, 1164, 457, 525, 526, 527, 528, 1165, 464,
	1166, 458, 459, 529, 460, 530, 1167, 461, 462, 463,
	0, 465, 466, 1168, 1169, 467, 468, 469, 471, 472,
	470, 473, 1170, 474, 1171, 0, 475, 476, 477, 531,
	532, 533, 1172, 479, 478, 534, 1173, 1174, 1175, 1176,
	480, 481, 535, 482, 483, 484, 1092, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3483, 0, 226, 227, 228, 229, 230, 231, 1098,
	232, 233, 1099, 1100, 1101, 0, 1102, 485, 1103, 1104,
	1105, 1106, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 1107, 242, 243, 244, 245,
	246, 1108, 1109, 0, 247, 490, 491, 492, 1110, 248,
	249, 493, 1111, 1178, 1112, 250, 251, 252, 253, 254,
	255, 256, 0, 1113, 258, 259, 260, 257, 1114, 261,
	0, 262, 263, 264, 1115, 265, 971, 266, 267, 1116,
	1117, 1119, 1118, 1120, 1121, 1122, 268, 269, 270, 271,
	0, 272, 494, 495, 1123, 276, 273, 274, 1124, 277,
	275, 1125, 278, 1126, 1127, 279, 280, 281, 1128, 282,
	1129, 283, 284, 1130, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 1131, 223,
	1132, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 1133, 301, 1134, 1135, 972, 302, 303,
	500, 501, 304, 305, 1136, 306, 502, 1137, 503, 307,
	1138, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	974, 313, 314, 1139, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 1140, 973, 321, 507, 508,
	1141, 509, 1142, 323, 975, 510, 976, 324, 325, 326,
	977, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	1143, 334, 333, 1144, 335, 511, 978, 336, 337, 979,
	1145, 338, 339, 340, 1146, 1147, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 980, 357, 358, 361, 362, 360,
	981, 359, 1148, 225, 982, 363, 1149, 512, 364, 513,
	366, 367, 1150, 0, 368, 0, 1151, 1152, 370, 371,
	372, 1153, 1154, 373, 374, 514, 983, 375, 984, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	1155, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	1156, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 1157, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 1158,
	409, 985, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 1159, 427, 428,
	426, 429, 430, 431, 1160, 432, 416, 417, 433, 434,
	986, 435, 436, 522, 0, 437, 1161, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	1162, 449, 450, 0, 448, 1163, 451, 452, 453, 454,
	455, 291, 456, 1164, 457, 525, 526, 527, 528, 1165,
	464, 1166, 458, 459, 529, 460, 530, 1167, 461, 462,
	463, 0, 465, 466, 1168, 1169, 467, 468, 469, 471,
	472, 470, 473, 1170, 474, 1171, 0, 475, 476, 477,
	531, 532, 533, 1172, 479, 478, 534, 1173, 1174, 1175,
	1176, 480, 481, 535, 482, 483, 484, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3393, 0, 226, 227, 228, 229, 230, 231,
	1098, 232, 233, 1099, 1100, 1101, 0, 1102, 485, 1103,
	1104, 1105, 1106, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 1107, 242, 243, 244,
	245, 246, 1108, 1109, 0, 247, 490, 491, 492, 1110,
	248, 249, 493, 1111, 1178, 1112, 250, 251, 252, 253,
	254, 255, 256, 0, 1113, 258, 259, 260, 257, 1114,
	261, 0, 262, 263, 264, 1115, 265, 971, 266, 267,
	1116, 1117, 1119, 1118, 1120, 1121, 1122, 268, 269, 270,
	271, 0, 272, 494, 495, 1123, 276, 273, 274, 1124,
	277, 275, 1125, 278, 1126, 1127, 279, 280, 281, 1128,
	282, 1129, 283, 284, 1130, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 1131,
	223, 1132, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 1133, 301, 1134, 1135, 972, 302,
	303, 500, 501, 304, 305, 1136, 306, 502, 1137, 503,
	307, 1138, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 974, 313, 314, 1139, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 1140, 973, 321, 507,
	508, 1141, 509, 1142, 323, 975, 510, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 1143, 334, 333, 1144, 335, 511, 978, 336, 337,
	979, 1145, 338, 339, 340, 1146, 1147, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 1148, 225, 982, 363, 1149, 512, 364,
	513, 366, 367, 1150, 0, 368, 0, 1151, 1152, 370,
	371, 372, 1153, 1154, 373, 374, 514, 983, 375, 984,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 1155, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 1156, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 1157, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	1158, 409, 985, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 1159, 427,
	428, 426, 429, 430, 431, 1160, 432, 416, 417, 433,
	434, 986, 435, 436, 522, 0, 437, 1161, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 1162, 449, 450, 0, 448, 1163, 451, 452, 453,
	454, 455, 291, 456, 1164, 457, 525, 526, 527, 528,
	1165, 464, 1166, 458, 459, 529, 460, 530, 1167, 461,
	462, 463, 0, 465, 466, 1168, 1169, 467, 468, 469,
	471, 472, 470, 473, 1170, 474, 1171, 0, 475, 476,
	477, 531, 532, 533, 1172, 479, 478, 534, 1173, 1174,
	1175, 1176, 480, 481, 535, 482, 483, 484, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3268, 0, 226, 227, 228, 229, 230,
	231, 1098, 232, 233, 1099, 1100, 1101, 0, 1102, 485,
	1103, 1104, 1105, 1106, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 1107, 242, 243,
	244, 245, 246, 1108, 1109, 0, 247, 490, 491, 492,
	1110, 248, 249, 493, 1111, 1178, 1112, 250, 251, 252,
	253, 254, 255, 256, 0, 1113, 258, 259, 260, 257,
	1114, 261, 0, 262, 263, 264, 1115, 265, 971, 266,
	267, 1116, 1117, 1119, 1118, 1120, 1121, 1122, 268, 269,
	270, 271, 0, 272, 494, 495, 1123, 276, 273, 274,
	1124, 277, 275, 1125, 278, 1126, 1127, 279, 280, 281,
	1128, 282, 1129, 283, 284, 1130, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	1131, 223, 1132, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 1133, 301, 1134, 1135, 972,
	302, 303, 500, 501, 304, 305, 1136, 306, 502, 1137,
	503, 307, 1138, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 974, 313, 314, 1139, 315, 316, 317, 318,
	0, 0, 0, 224, 319, 320, 322, 1140, 973, 321,
	507, 508, 1141, 509, 1142, 323, 975, 510, 976, 324,
	325, 326, 977, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 1143, 334, 333, 1144, 335, 511, 978, 336,
	337, 979, 1145, 338, 339, 340, 1146, 1147, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 980, 357, 358, 361,
	362, 360, 981, 359, 1148, 225, 982, 363, 1149, 512,
	364, 513, 366, 367, 1150, 0, 368, 0, 1151, 1152,
	370, 371, 372, 1153, 1154, 373, 374, 514, 983, 375,
	984, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 1155, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 1156, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 1157, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 1158, 409, 985, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 1159,
	427, 428, 426, 429, 430, 431, 1160, 432, 416, 417,
	433, 434, 986, 435, 436, 522, 0, 437, 1161, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 1162, 449, 450, 0, 448, 1163, 451, 452,
	453, 454, 455, 291, 456, 1164, 457, 525, 526, 527,
	528, 1165, 464, 1166, 458, 459, 529, 460, 530, 1167,
	461, 462, 463, 0, 465, 466, 1168, 1169, 467, 468,
	469, 471, 472, 470, 473, 1170, 474, 1171, 0, 475,
	476, 477, 531, 532, 533, 1172, 479, 478, 534, 1173,
	1174, 1175, 1176, 480, 481, 535, 482, 483, 484, 1092,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3040, 0, 226, 227, 228, 229,
	230, 231, 1098, 232, 233, 1099, 1100, 1101, 0, 1102,
	485, 1103, 1104, 1105, 1106, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 1107, 242,
	243, 244, 245, 246, 1108, 1109, 0, 247, 490, 491,
	492, 1110, 248, 249, 493, 1111, 1178, 1112, 250, 251,
	252, 253, 254, 255, 256, 0, 1113, 258, 259, 260,
	257, 1114, 261, 0, 262, 263, 264, 1115, 265, 971,
	266, 267, 1116, 1117, 1119, 1118, 1120, 1121, 1122, 268,
	269, 270, 271, 0, 272, 494, 495, 1123, 276, 273,
	274, 1124, 277, 275, 1125, 278, 1126, 1127, 279, 280,
	281, 1128, 282, 1129, 283, 284, 1130, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 1131, 223, 1132, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 1133, 301, 1134, 1135,
	972, 302, 303, 500, 501, 304, 305, 1136, 306, 502,
	1137, 503, 307, 1138, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 974, 313, 314, 1139, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 1140, 973,
	321, 507, 508, 1141, 509, 1142, 323, 975, 510, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 1143, 334, 333, 1144, 335, 511, 978,
	336, 337, 979, 1145, 338, 339, 340, 1146, 1147, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 1148, 225, 982, 363, 1149,
	512, 364, 513, 366, 367, 1150, 0, 368, 0, 1151,
	1152, 370, 371, 372, 1153, 1154, 373, 374, 514, 983,
	375, 984, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 1155, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 1156, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 1157, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 1158, 409, 985, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	1159, 427, 428, 426, 429, 430, 431, 1160, 432, 416,
	417, 433, 434, 986, 435, 436, 522, 0, 437, 1161,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 1162, 449, 450, 0, 448, 1163, 451,
	452, 453, 454, 455, 291, 456, 1164, 457, 525, 526,
	527, 528, 1165, 464, 1166, 458, 459, 529, 460, 530,
	1167, 461, 462, 463, 0, 465, 466, 1168, 1169, 467,
	468, 469, 471, 472, 470, 473, 1170, 474, 1171, 0,
	475, 476, 477, 531, 532, 533, 1172, 479, 478, 534,
	1173, 1174, 1175, 1176, 480, 481, 535, 482, 483, 484,
	1092, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2889, 0, 226, 227, 228,
	229, 230, 231, 1098, 232, 233, 1099, 1100, 1101, 0,
	1102, 485, 1103, 1104, 1105, 1106, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 1107,
	242, 243, 244, 245, 246, 1108, 1109, 0, 247, 490,
	491, 492, 1110, 248, 249, 493, 1111, 1178, 1112, 250,
	251, 252, 253, 254, 255, 256, 0, 1113, 258, 259,
	260, 257, 1114, 261, 0, 262, 263, 264, 1115, 265,
	971, 266, 267, 1116, 1117, 1119, 1118, 1120, 1121, 1122,
	268, 269, 270, 271, 0, 272, 494, 495, 1123, 276,
	273, 274, 1124, 277, 275, 1125, 278, 1126, 1127, 279,
	280, 281, 1128, 282, 1129, 283, 284, 1130, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 1131, 223, 1132, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 1133, 301, 1134,
	1135, 972, 302, 303, 500, 501, 304, 305, 1136, 306,
	502, 1137, 503, 307, 1138, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 974, 313, 314, 1139, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 1140,
	973, 321, 507, 508, 1141, 509, 1142, 323, 975, 510,
	976, 324, 325, 326, 977, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 1143, 334, 333, 1144, 335, 511,
	978, 336, 337, 979, 1145, 338, 339, 340, 1146, 1147,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 980, 357,
	358, 361, 362, 360, 981, 359, 1148, 225, 982, 363,
	1149, 512, 364, 513, 366, 367, 1150, 0, 368, 0,
	1151, 1152, 370, 371, 372, 1153, 1154, 373, 374, 514,
	983, 375, 984, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 1155, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 1156, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 1157, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 1158, 409, 985, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 1159, 427, 428, 426, 429, 430, 431, 1160, 432,
	416, 417, 433, 434, 986, 435, 436, 522, 0, 437,
	1161, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 1162, 449, 450, 0, 448, 1163,
	451, 452, 453, 454, 455, 291, 456, 1164, 457, 525,
	526, 527, 528, 1165, 464, 1166, 458, 459, 529, 460,
	530, 1167, 461, 462, 463, 0, 465, 466, 1168, 1169,
	467, 468, 469, 471, 472, 470, 473, 1170, 474, 1171,
	0, 475, 476, 477, 531, 532, 533, 1172, 479, 478,
	534, 1173, 1174, 1175, 1176, 480, 481, 535, 482, 483,
	484, 1092, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2138, 0, 226, 227,
	228, 229, 230, 231, 1098, 232, 233, 1099, 1100, 1101,
	0, 1102, 485, 1103, 1104, 1105, 1106, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	1107, 242, 243, 244, 245, 246, 1108, 1109, 0, 247,
	490, 491, 492, 1110, 248, 249, 493, 1111, 1178, 1112,
	250, 251, 252, 253, 254, 255, 256, 0, 1113, 258,
	259, 260, 257, 1114, 261, 0, 262, 263, 264, 1115,
	265, 971, 266, 267, 1116, 1117, 1119, 1118, 1120, 1121,
	1122, 268, 269, 270, 271, 0, 272, 494, 495, 1123,
	276, 273, 274, 1124, 277, 275, 1125, 278, 1126, 1127,
	279, 280, 281, 1128, 282, 1129, 283, 284, 1130, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 1131, 223, 1132, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 1133, 301,
	1134, 1135, 972, 302, 303, 500, 501, 304, 305, 1136,
	306, 502, 1137, 503, 307, 1138, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 974, 313, 314, 1139, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	1140, 973, 321, 507, 508, 1141, 509, 1142, 323, 975,
	510, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 1143, 334, 333, 1144, 335,
	511, 978, 336, 337, 979, 1145, 338, 339, 340, 1146,
	1147, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 1148, 225, 982,
	363, 1149, 512, 364, 513, 366, 367, 1150, 0, 368,
	0, 1151, 1152, 370, 371, 372, 1153, 1154, 373, 374,
	514, 983, 375, 984, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 1155, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 1156, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 1157, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 1158, 409, 985, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 1159, 427, 428, 426, 429, 430, 431, 1160,
	432, 416, 417, 433, 434, 986, 435, 436, 522, 0,
	437, 1161, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 1162, 449, 450, 0, 448,
	1163, 451, 452, 453, 454, 455, 291, 456, 1164, 457,
	525, 526, 527, 528, 1165, 464, 1166, 458, 459, 529,
	460, 530, 1167, 461, 462, 463, 0, 465, 466, 1168,
	1169, 467, 468, 469, 471, 472, 470, 473, 1170, 474,
	1171, 0, 475, 476, 477, 531, 532, 533, 1172, 479,
	478, 534, 1173, 1174, 1175, 1176, 480, 481, 535, 482,
	483, 484, 1190, 0, 1092, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1834, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 1098, 232, 233,
	1099, 1100, 1101, 0, 1102, 485, 1103, 1104, 1105, 1106,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 1107, 242, 243, 244, 245, 246, 1108,
	1109, 0, 247, 490, 491, 492, 1110, 248, 249, 493,
	1111, 1178, 1112, 250, 251, 252, 253, 254, 255, 256,
	0, 1113, 258, 259, 260, 257, 1114, 261, 0, 262,
	263, 264, 1115, 265, 971, 266, 267, 1116, 1117, 1119,
	1118, 1120, 1121, 1122, 268, 269, 270, 271, 0, 272,
	494, 495, 1123, 276, 273, 274, 1124, 277, 275, 1125,
	278, 1126, 1127, 279, 280, 281, 1128, 282, 1129, 283,
	284, 1130, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 1131, 223, 1132, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 1133, 301, 1134, 1135, 972, 302, 303, 500, 501,
	304, 305, 1136, 306, 502, 1137, 503, 307, 1138, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 974, 313,
	314, 1139, 315, 316, 317, 318, 0, 0, 0, 224,
	319, 320, 322, 1140, 973, 321, 507, 508, 1141, 509,
	1142, 323, 975, 510, 976, 324, 325, 326, 977, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 1143, 334,
	333, 1144, 335, 511, 978, 336, 337, 979, 1145, 338,
	339, 340, 1146, 1147, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 980, 357, 358, 361, 362, 360, 981, 359,
	1148, 225, 982, 363, 1149, 512, 364, 513, 366, 367,
	1150, 0, 368, 0, 1151, 1152, 370, 371, 372, 1153,
	1154, 373, 374, 514, 983, 375, 984, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 1155, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 1156, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 1157, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 1158, 409, 985,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 1159, 427, 428, 426, 429,
	430, 431, 1160, 432, 416, 417, 433, 434, 986, 435,
	436, 522, 0, 437, 1161, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 1162, 449,
	450, 0, 448, 1163, 451, 452, 453, 454, 455, 291,
	456, 1164, 457, 525, 526, 527, 528, 1165, 464, 1166,
	458, 459, 529, 460, 530, 1167, 461, 462, 463, 0,
	465, 466, 1168, 1169, 467, 468, 469, 471, 472, 470,
	473, 1170, 474, 1171, 0, 475, 476, 477, 531, 532,
	533, 1172, 479, 478, 534, 1173, 1174, 1175, 1176, 480,
	481, 535, 482, 483, 484, 1089, 0, 1092, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	1098, 232, 233, 1099, 1100, 1101, 0, 1102, 485, 1103,
	1104, 1105, 1106, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 1107, 242, 243, 244,
	245, 246, 1108, 1109, 0, 247, 490, 491, 492, 1110,
	248, 249, 493, 1111, 1178, 1112, 250, 251, 252, 253,
	254, 255, 256, 0, 1113, 258, 259, 260, 257, 1114,
	261, 0, 262, 263, 264, 1115, 265, 971, 266, 267,
	1116, 1117, 1119, 1118, 1120, 1121, 1122, 268, 269, 270,
	271, 0, 272, 494, 495, 1123, 276, 273, 274, 1124,
	277, 275, 1125, 278, 1126, 1127, 279, 280, 281, 1128,
	282, 1129, 283, 284, 1130, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 1131,
	223, 1132, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 1133, 301, 1134, 1135, 972, 302,
	303, 500, 501, 304, 305, 1136, 306, 502, 1137, 503,
	307, 1138, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 974, 313, 314, 1139, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 1140, 973, 321, 507,
	508, 1141, 509, 1142, 323, 975, 510, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 1143, 334, 333, 1144, 335, 511, 978, 336, 337,
	979, 1145, 338, 339, 340, 1146, 1147, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 1148, 225, 982, 363, 1149, 512, 364,
	513, 366, 367, 1150, 0, 368, 0, 1151, 1152, 370,
	371, 372, 1153, 1154, 373, 374, 514, 983, 375, 984,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 1155, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 1156, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 1157, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	1158, 409, 985, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 1159, 427,
	428, 426, 429, 430, 431, 1160, 432, 416, 417, 433,
	434, 986, 435, 436, 522, 0, 437, 1161, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 1162, 449, 450, 0, 448, 1163, 451, 452, 453,
	454, 455, 291, 456, 1164, 457, 525, 526, 527, 528,
	1165, 464, 1166, 458, 459, 529, 460, 530, 1167, 461,
	462, 463, 0, 465, 466, 1168, 1169, 467, 468, 469,
	471, 472, 470, 473, 1170, 474, 1171, 0, 475, 476,
	477, 531, 532, 533, 1172, 479, 478, 534, 1173, 1174,
	1175, 1176, 480, 481, 535, 482, 483, 484, 1092, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 1098, 232, 233, 1099, 1100, 1101, 0, 1102, 485,
	1103, 1104, 1105, 1106, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 1107, 242, 243,
	244, 245, 246, 1108, 1109, 0, 247, 490, 491, 492,
	1110, 248, 249, 493, 1111, 1178, 1112, 250, 251, 252,
	253, 254, 255, 256, 0, 1113, 258, 259, 260, 257,
	1114, 261, 0, 262, 263, 264, 1115, 265, 971, 266,
	267, 1116, 1117, 1119, 1118, 1120, 1121, 1122, 268, 269,
	270, 271, 0, 272, 494, 495, 1123, 276, 273, 274,
	1124, 277, 275, 1125, 278, 1126, 1127, 279, 280, 281,
	1128, 282, 1129, 283, 284, 1130, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	1131, 223, 1132, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 1133, 301, 1134, 1135, 972,
	302, 303, 500, 501, 304, 305, 1136, 306, 502, 1137,
	503, 307, 1138, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 974, 313, 314, 1139, 315, 316, 317, 318,
	0, 0, 0, 224, 319, 320, 322, 1140, 973, 321,
	507, 508, 1141, 509, 1142, 323, 975, 510, 976, 324,
	325, 326, 977, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 1143, 334, 333, 1144, 335, 511, 978, 336,
	337, 979, 1145, 338, 339, 340, 1146, 1147, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 980, 357, 358, 361,
	362, 360, 981, 359, 1148, 225, 982, 363, 1149, 512,
	364, 513, 366, 367, 1150, 0, 368, 0, 1151, 1152,
	370, 371, 372, 1153, 1154, 373, 374, 514, 983, 375,
	984, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 1155, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 1156, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 1157, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 1158, 409, 985, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 1159,
	427, 428, 426, 429, 430, 431, 1160, 432, 416, 417,
	433, 434, 986, 435, 436, 522, 0, 437, 1161, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 1162, 449, 450, 0, 448, 1163, 451, 452,
	453, 454, 455, 291, 456, 1164, 457, 525, 526, 527,
	528, 1165, 464, 1166, 458, 459, 529, 460, 530, 1167,
	461, 462, 463, 0, 465, 466, 1168, 1169, 467, 468,
	469, 471, 472, 470, 473, 1170, 474, 1171, 0, 475,
	476, 477, 531, 532, 533, 1172, 479, 478, 534, 1173,
	1174, 1175, 1176, 480, 481, 535, 482, 483, 484, 2113,
	0, 908, 880, 881, 882, 878, 879, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 2110, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 2111, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 2109, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 2112, 0, 0,
	0, 0, 0, 0, 892, 2108, 0, 854, 890, 908,
	880, 881, 882, 878, 879, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	189, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 191, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 1347, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 183, 480, 481, 535, 482, 483, 484,
	867, 184, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 908, 880, 881, 882, 878,
	879, 891, 1558, 1556, 0, 0, 890, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 189, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 191, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 1347,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 183,
	480, 481, 535, 482, 483, 484, 867, 184, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 908, 880, 881, 882, 878, 879, 891, 1558, 2611,
	0, 0, 890, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 189, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	191, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 1347, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 183, 480, 481, 535, 482,
	483, 484, 867, 184, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 908, 880, 881,
	882, 878, 879, 891, 1558, 1556, 0, 0, 890, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 2217, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 2222, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 2218, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 2219, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 0, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 2158, 890, 908, 880, 881, 882, 878,
	879, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 0, 0, 0, 0, 0, 0, 0, 892, 2156,
	0, 2155, 890, 908, 880, 881, 882, 878, 879, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 0,
	0, 0, 0, 0, 0, 0, 892, 2153, 0, 2152,
	890, 908, 880, 881, 882, 878, 879, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 0, 0, 0,
	0, 0, 0, 0, 892, 2150, 0, 2149, 890, 908,
	880, 881, 882, 878, 879, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 0, 0, 0, 0, 0,
	0, 0, 892, 2147, 0, 1416, 890, 908, 880, 881,
	882, 878, 879, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 1415, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 0, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 857, 890, 908, 880, 881, 882, 878,
	879, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 871, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 908, 880, 881, 882, 878, 879, 891, 892, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 3735, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 871, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 908, 880, 881,
	882, 878, 879, 891, 892, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 2027, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 2026, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 908, 880, 881, 882, 878, 879, 891,
	892, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 3544,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 871, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 908,
	880, 881, 882, 878, 879, 891, 892, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 3237, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 1626, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 890, 908, 880, 881,
	882, 878, 879, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 3018, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 908, 880, 881, 882, 878, 879, 891,
	892, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 871, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 908,
	880, 881, 882, 878, 879, 891, 892, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 1626, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 890, 908, 880, 881,
	882, 878, 879, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 2222, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 908, 880, 881, 882, 878, 879, 891,
	892, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 0,
	0, 0, 0, 0, 0, 0, 892, 1556, 0, 2227,
	890, 908, 880, 881, 882, 878, 879, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 2225, 890, 908,
	880, 881, 882, 878, 879, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 2213, 890, 908, 880, 881,
	882, 878, 879, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 0, 0, 0, 0, 0, 0, 0,
	892, 0, 0, 2202, 890, 908, 880, 881, 882, 878,
	879, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 0, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 2200, 890, 2191, 2198, 881, 882, 878, 879, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 2194, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 2195, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 2196, 2193, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 2197, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 2192, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 2188,
	890, 2191, 2198, 881, 882, 878, 879, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 2194, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 2195,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 2196, 2193, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 2197, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	2192, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 908, 880, 881,
	882, 878, 879, 891, 892, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 0, 0, 0, 0, 0, 1564, 0,
	892, 0, 0, 0, 890, 908, 880, 881, 882, 878,
	879, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 2006, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 0, 0, 0, 0, 0, 0, 0, 892, 0,
	0, 1236, 890, 908, 880, 881, 882, 878, 879, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 1235, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 0,
	0, 0, 0, 0, 0, 0, 892, 0, 0, 1230,
	890, 908, 880, 881, 882, 878, 879, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 1229, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 0, 0, 0,
	0, 0, 0, 0, 892, 0, 0, 1225, 890, 908,
	880, 881, 882, 878, 879, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 908, 880, 881, 882, 878,
	879, 891, 892, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 861,
	862, 908, 880, 881, 882, 878, 879, 891, 892, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 865, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 3768, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 869,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 866, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 864, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 3767, 466, 0,
	870, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 867, 0, 0, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 861, 862, 908, 880, 881,
	882, 878, 879, 891, 892, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	3766, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 865, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 3768,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 869, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 866, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 876, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 864, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 3767, 466, 0, 870, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 867, 0,
	0, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 861, 862, 908, 880, 881, 882, 2578, 2579, 891,
	892, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 982, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 465,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 867, 0, 0, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 861, 862, 908,
	880, 881, 882, 2576, 2577, 891, 892, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 898, 931, 865, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 869, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 875,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 866, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 864, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 870, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	867, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 861, 862, 908, 880, 881, 882, 878,
	879, 891, 892, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 932, 896, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 945,
	0, 952, 241, 951, 0, 242, 243, 244, 245, 246,
	898, 931, 865, 247, 990, 991, 492, 0, 248, 249,
	938, 0, 919, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 922, 920,
	921, 928, 924, 923, 927, 268, 269, 270, 271, 955,
	272, 949, 948, 869, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 940, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 875, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 962, 963, 887, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 947, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 960,
	961, 304, 305, 0, 306, 969, 0, 897, 307, 0,
	308, 309, 310, 311, 312, 933, 934, 937, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 973, 321, 942, 943, 0,
	903, 0, 323, 975, 935, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 970, 978, 336, 337, 979, 0,
	338, 339, 340, 926, 925, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 866, 225, 982, 363, 888, 936, 364, 950, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 964, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 965, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 946,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 876, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 929, 432, 416, 417, 433, 434, 986,
	435, 436, 944, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 989, 443, 444, 445, 446, 966, 0,
	449, 450, 864, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 956, 957, 958, 959, 0, 464,
	0, 458, 459, 967, 460, 968, 886, 461, 462, 463,
	0, 465, 466, 0, 870, 467, 468, 469, 471, 472,
	470, 473, 930, 474, 0, 0, 475, 476, 477, 531,
	953, 988, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 867, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 2014,
	2015, 908, 880, 881, 882, 878, 879, 891, 892, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 932, 896, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 945, 0, 952, 241, 951,
	0, 242, 243, 244, 245, 246, 898, 931, 0, 247,
	990, 991, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 955, 272, 949, 948, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 940, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 875, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 887, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 947, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 960, 961, 304, 305, 0,
	306, 969, 0, 897, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 942, 943, 0, 903, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 0, 225, 982,
	363, 888, 936, 364, 950, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 946, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 876, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 944, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 989,
	443, 444, 445, 446, 966, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	956, 957, 958, 959, 0, 464, 0, 458, 459, 967,
	460, 968, 886, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 953, 988, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 2210, 0,
	0, 0, 0, 0, 0, 2208, 2209, 908, 880, 881,
	882, 878, 879, 891, 892, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 932, 896,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 945, 0, 952, 241, 951, 0, 242, 243, 244,
	245, 246, 898, 931, 0, 247, 990, 991, 492, 0,
	248, 249, 938, 0, 919, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	922, 920, 921, 928, 924, 923, 927, 268, 269, 270,
	271, 955, 272, 949, 948, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 940, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 875, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 962, 963, 887,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 947,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 960, 961, 304, 305, 0, 306, 969, 0, 897,
	307, 0, 308, 309, 310, 311, 312, 933, 934, 937,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 973, 321, 942,
	943, 0, 903, 0, 323, 975, 935, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 970, 978, 336, 337,
	979, 0, 338, 339, 340, 926, 925, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 0, 225, 982, 363, 888, 936, 364,
	950, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	964, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 965, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 946, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 2571, 2572, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 929, 432, 416, 417, 433,
	434, 986, 435, 436, 944, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 989, 443, 444, 445, 446,
	966, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 956, 957, 958, 959,
	0, 464, 0, 458, 459, 967, 460, 968, 886, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 930, 474, 0, 0, 475, 476,
	477, 531, 953, 988, 0, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1756, 1757, 908, 880, 881, 882, 878, 879, 891,
	892, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 932, 896, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 0, 945, 0, 952,
	241, 951, 0, 242, 243, 244, 245, 246, 898, 931,
	865, 247, 990, 991, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 3768, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 955, 272, 949,
	948, 869, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 940, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 875, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 887, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 947, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 960, 961, 304,
	305, 0, 306, 969, 0, 897, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 942, 943, 0, 903, 0,
	323, 0, 935, 0, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 970, 978, 336, 337, 0, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 866,
	225, 0, 363, 888, 936, 364, 950, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 946, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 876, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 0, 435, 436,
	944, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 989, 443, 444, 445, 446, 966, 0, 449, 450,
	864, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 956, 957, 958, 959, 0, 464, 0, 458,
	459, 967, 460, 968, 886, 461, 462, 463, 0, 3767,
	466, 0, 870, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 531, 953, 988,
	0, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 862, 908,
	880, 881, 882, 878, 879, 891, 892, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 896, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 945, 0, 952, 241, 951, 0, 242,
	243, 244, 245, 246, 0, 931, 0, 247, 990, 991,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 955, 272, 949, 948, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 940,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 887, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 947, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 960, 961, 304, 305, 0, 306, 969,
	0, 897, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 942, 943, 0, 903, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 0, 225, 982, 363, 888,
	936, 364, 950, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 946, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 876,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 944, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 989, 443, 444,
	445, 446, 966, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 956, 957,
	958, 959, 0, 464, 0, 458, 459, 967, 460, 968,
	886, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 953, 988, 0, 479, 478, 534,
	854, 0, 1028, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 892, 932, 0, 0, 890, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 931, 0,
	247, 490, 491, 492, 0, 248, 249, 938, 0, 919,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 971, 266, 267, 922, 920, 921, 928, 924,
	923, 927, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 962, 963, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 972, 302, 303, 500, 501, 304, 305,
	0, 306, 969, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 933, 934, 937, 365, 974, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 0, 973, 321, 507, 508, 0, 509, 0, 323,
	975, 935, 976, 324, 325, 326, 977, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 1014, 334, 333, 0,
	335, 970, 978, 336, 337, 979, 0, 338, 339, 340,
	926, 925, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	980, 357, 358, 361, 362, 360, 981, 359, 0, 225,
	982, 363, 0, 936, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 1020, 370, 371, 372, 0, 0, 373,
	374, 514, 983, 375, 984, 964, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 965, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 985, 410, 411,
	412, 413, 521, 1022, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 189, 427, 428, 426, 429, 430, 431,
	929, 432, 416, 417, 433, 434, 986, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 966, 0, 449, 450, 0,
	448, 191, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	967, 460, 968, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 930,
	474, 0, 0, 475, 476, 477, 1347, 532, 533, 0,
	479, 478, 534, 1028, 0, 0, 183, 480, 481, 535,
	482, 483, 484, 0, 184, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 1018, 932, 1650, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 931,
	0, 247, 490, 491, 492, 0, 248, 249, 938, 0,
	919, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 922, 920, 921, 928,
	924, 923, 927, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 962, 963, 0, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 500, 501, 304,
	305, 0, 306, 969, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 933, 934, 937, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 973, 321, 507, 508, 0, 509, 0,
	323, 975, 935, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 1014, 334, 333,
	0, 335, 970, 978, 336, 337, 979, 0, 338, 339,
	340, 926, 925, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 0,
	225, 982, 363, 0, 936, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 1020, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 964, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 965, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 521, 1022, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 189, 427, 428, 426, 429, 430,
	431, 929, 432, 416, 417, 433, 434, 986, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 966, 0, 449, 450,
	0, 448, 191, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 967, 460, 968, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	930, 474, 0, 0, 475, 476, 477, 1347, 532, 533,
	0, 479, 478, 534, 2731, 0, 1028, 183, 480, 481,
	535, 482, 483, 484, 0, 184, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 1018, 0, 1650, 932, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 931, 0, 247, 490, 491, 492, 0, 248,
	249, 938, 0, 919, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 971, 266, 267, 922,
	920, 921, 928, 924, 923, 927, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 962, 963, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 972, 302, 303,
	500, 501, 304, 305, 0, 306, 969, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 933, 934, 937, 365,
	974, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 973, 321, 507, 508,
	0, 509, 0, 323, 975, 935, 976, 324, 325, 326,
	977, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	1014, 334, 333, 0, 335, 970, 978, 336, 337, 979,
	0, 338, 339, 340, 926, 925, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 980, 357, 358, 361, 362, 360,
	981, 359, 0, 225, 982, 363, 0, 936, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 1020, 370, 371,
	372, 0, 0, 373, 374, 514, 983, 375, 984, 964,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 965, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 985, 410, 411, 412, 413, 521, 1022, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 929, 432, 416, 417, 433, 434,
	986, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 966,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 967, 460, 968, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 930, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 479, 478, 534, 1010, 0, 1028,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 1018, 0, 1016,
	932, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 931, 0, 247, 490, 491,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 500, 501, 304, 305, 0, 306, 969,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 507, 508, 0, 509, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 1014, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 0, 225, 982, 363, 0,
	936, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	1020, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 521,
	1022, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 966, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 967, 460, 968,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	1028, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	1018, 932, 1016, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 931, 0, 247, 490,
	491, 492, 0, 248, 249, 938, 0, 919, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	971, 266, 267, 922, 920, 921, 928, 924, 923, 927,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	962, 963, 0, 223, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 972, 302, 303, 500, 501, 304, 305, 0, 306,
	969, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	933, 934, 937, 365, 974, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 0,
	973, 321, 507, 508, 0, 509, 0, 323, 975, 935,
	976, 324, 325, 326, 977, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 1014, 334, 333, 0, 335, 970,
	978, 336, 337, 979, 0, 338, 339, 340, 926, 925,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 980, 357,
	358, 361, 362, 360, 981, 359, 0, 225, 982, 363,
	0, 936, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 1020, 370, 371, 372, 0, 0, 373, 374, 514,
	983, 375, 984, 964, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 965,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 985, 410, 411, 412, 413,
	521, 1022, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 929, 432,
	416, 417, 433, 434, 986, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 966, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 967, 460,
	968, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 930, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 0, 479, 478,
	534, 1028, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 1018, 932, 1016, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 931, 0, 247,
	490, 491, 492, 0, 248, 249, 938, 0, 919, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 922, 920, 921, 928, 924, 923,
	927, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 962, 963, 0, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 500, 501, 304, 305, 0,
	306, 969, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 933, 934, 937, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 973, 321, 507, 508, 0, 509, 0, 323, 975,
	935, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	970, 978, 336, 337, 979, 0, 338, 339, 340, 926,
	925, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 0, 225, 982,
	363, 0, 936, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 964, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	965, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 521, 1022, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 929,
	432, 416, 417, 433, 434, 986, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 966, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 967,
	460, 968, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 930, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 854, 0, 1209, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 1548, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 1178, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 971, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 223, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 972, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 974, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 973, 321, 507, 508, 0, 509,
	0, 323, 975, 510, 976, 324, 325, 326, 977, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 978, 336, 337, 979, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 980, 357, 358, 361, 362, 360, 981, 359,
	0, 0, 982, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 983, 375, 984, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 985,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 189, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 986, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 191, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 1347, 532,
	533, 0, 479, 478, 534, 1344, 0, 1209, 183, 480,
	481, 535, 482, 483, 484, 0, 184, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 158, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 1178, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 973, 321, 507,
	508, 0, 509, 0, 323, 975, 510, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 978, 336, 337,
	979, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 0, 0, 982, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 189, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 986, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 191, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 1347, 532, 533, 0, 479, 478, 534, 0, 0,
	0, 183, 480, 481, 535, 482, 483, 484, 0, 184,
	0, 0, 0, 0, 1209, 1208, 0, 0, 0, 0,
	1206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	158, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 1178, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 971, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 223, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 972, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 974, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 973, 321, 507, 508, 0, 509,
	0, 323, 975, 510, 976, 324, 325, 326, 977, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 978, 336, 337, 979, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 980, 357, 358, 361, 362, 360, 981, 359,
	0, 0, 982, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 983, 375, 984, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 985,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 986, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 0, 479, 478, 534, 0, 0, 0, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 1209, 1208, 0, 0, 0, 0, 1206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2955, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 1178, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 973, 321, 507, 508, 0, 509, 0, 323, 975,
	510, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 978, 336, 337, 979, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 0, 0, 982,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 986, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 1209, 1208,
	0, 0, 0, 0, 1206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1215, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 1178, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 971, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 972,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 974, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 973, 321,
	507, 508, 0, 509, 0, 323, 975, 510, 976, 324,
	325, 326, 977, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 978, 336,
	337, 979, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 980, 357, 358, 361,
	362, 360, 981, 359, 0, 0, 982, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 983, 375,
	984, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 985, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 986, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 1028,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	932, 1353, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 931, 0, 247, 490, 491,
	492, 0, 248, 249, 938, 0, 919, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 971,
	266, 267, 922, 920, 921, 928, 924, 923, 927, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 962,
	963, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	972, 302, 303, 500, 501, 304, 305, 0, 306, 969,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 933,
	934, 937, 365, 974, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 973,
	321, 507, 508, 0, 509, 0, 323, 975, 935, 976,
	324, 325, 326, 977, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 970, 978,
	336, 337, 979, 0, 338, 339, 340, 926, 925, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 980, 357, 358,
	361, 362, 360, 981, 359, 0, 225, 982, 363, 0,
	936, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 983,
	375, 984, 964, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 965, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 985, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 929, 432, 416,
	417, 433, 434, 986, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 966, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 967, 460, 968,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 930, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	854, 0, 220, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 0,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 189, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 191, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 1347, 532, 533, 0,
	479, 478, 534, 220, 0, 0, 183, 480, 481, 535,
	482, 483, 484, 0, 184, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 158, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	225, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	0, 479, 478, 534, 1295, 0, 220, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 1664, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 225, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 220, 479, 478, 534, 0, 0, 0,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 1299, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	225, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	220, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 2903, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 223, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 225, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 220, 479, 478,
	534, 0, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 1299, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 0, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 220, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	2474, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 0, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 220,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 3043, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 0, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	720, 0, 614, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 1919, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 620, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 718, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 225,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 619, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 613, 0, 614, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 623, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 620, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 225, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 619, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 611, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 1209, 1208, 0, 0,
	0, 0, 1206, 0, 0, 0, 0, 0, 0, 0,
	0, 623, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 1178, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 971, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 972, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	974, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 0, 319, 320, 322, 0, 973, 321, 507, 508,
	0, 509, 0, 323, 975, 510, 976, 324, 325, 326,
	977, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 978, 336, 337, 979,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 980, 357, 358, 361, 362, 360,
	981, 359, 0, 0, 982, 363, 3199, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 983, 375, 984, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 985, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	986, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 479, 478, 534, 0, 0, 0,
	0, 480, 481, 535, 482, 483, 484, 1209, 1208, 0,
	0, 0, 0, 1206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 1178, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 971, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 972, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 974, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 973, 321, 507,
	508, 0, 509, 0, 323, 975, 510, 976, 324, 325,
	326, 977, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 978, 336, 337,
	979, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 980, 357, 358, 361, 362,
	360, 981, 359, 0, 0, 982, 363, 2883, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 983, 375, 984,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 985, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 986, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 1209, 1208,
	0, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 1178, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 971, 266,
	267, 0, 0, 0, 0, 0, 0, 2874, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 972,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 974, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 973, 321,
	507, 508, 0, 509, 0, 323, 975, 510, 976, 324,
	325, 326, 977, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 978, 336,
	337, 979, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 980, 357, 358, 361,
	362, 360, 981, 359, 0, 0, 982, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 983, 375,
	984, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 985, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 2875, 432, 416, 417,
	433, 434, 986, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 614, 479, 478, 534, 0,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 620, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 225, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 1953, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 619, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 614, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 623, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 620, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 225,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 619, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 0, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 1380, 0, 1209, 1208, 0, 0, 0,
	0, 1206, 0, 0, 0, 0, 0, 0, 623, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 1178, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 1379, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 973, 321, 507, 508, 0,
	509, 0, 323, 975, 510, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 978, 336, 337, 979, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 0, 0, 982, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 1378, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 1377, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 986,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 1341, 0, 1209, 1208,
	0, 0, 0, 0, 1206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 1178, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 971, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 972,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 1340, 505,
	506, 365, 974, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 973, 321,
	507, 508, 0, 509, 0, 323, 975, 510, 976, 324,
	325, 326, 977, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 978, 336,
	337, 979, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 980, 357, 358, 361,
	362, 360, 981, 359, 0, 0, 982, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 983, 375,
	984, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 985, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 986, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 0,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 1275,
	0, 1209, 1208, 0, 0, 0, 0, 1206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 1178, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 971, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 972, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 1274, 505, 506, 365, 974, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 973, 321, 507, 508, 0, 509, 0, 323, 975,
	510, 976, 324, 325, 326, 977, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 978, 336, 337, 979, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 980,
	357, 358, 361, 362, 360, 981, 359, 0, 0, 982,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 983, 375, 984, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 985, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 986, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 1204, 0, 1209, 1208, 0, 0, 0, 0,
	1206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 1178, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 971, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 223, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 972, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 1203, 505, 506, 365, 974, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 973, 321, 507, 508, 0, 509,
	0, 323, 975, 510, 976, 324, 325, 326, 977, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 978, 336, 337, 979, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 980, 357, 358, 361, 362, 360, 981, 359,
	0, 0, 982, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 983, 375, 984, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 985,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 986, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 0, 479, 478, 534, 0, 0, 0, 0, 480,
	481, 535, 482, 483, 484, 1209, 1208, 0, 0, 0,
	0, 1206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 1178, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 973, 321, 507, 508, 0,
	509, 0, 323, 975, 510, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 978, 336, 337, 979, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 0, 0, 982, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 986,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 220, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 225,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 0, 0, 1209, 1208, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 623, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 1178, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 971, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 1729, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 972, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 974,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 973, 321, 507, 508, 0,
	509, 0, 323, 975, 510, 976, 324, 325, 326, 977,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 978, 336, 337, 979, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 980, 357, 358, 361, 362, 360, 981,
	359, 0, 0, 982, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 983, 375, 984, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	985, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 986,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 1209, 1208, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 1178, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 971, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 972, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	974, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 0, 319, 320, 322, 0, 973, 321, 507, 508,
	0, 509, 0, 323, 975, 510, 976, 324, 325, 326,
	977, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 978, 336, 337, 979,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 980, 357, 358, 361, 362, 360,
	981, 359, 0, 0, 982, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 983, 375, 984, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 985, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	986, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 1209, 479, 478, 534, 0, 0, 0,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	1178, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 971, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 972, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 974, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 0, 319,
	320, 322, 0, 973, 321, 507, 508, 0, 509, 0,
	323, 975, 510, 976, 324, 325, 326, 977, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 978, 336, 337, 979, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 980, 357, 358, 361, 362, 360, 981, 359, 0,
	0, 982, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 983, 375, 984, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 985, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 986, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	220, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 2339, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 2336, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 2343, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 2512, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 2342,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 2509, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 2511, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 2508, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 0, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 2341, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 2510,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 220, 479, 478,
	534, 0, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 2339,
	248, 249, 493, 0, 0, 2333, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 2336,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 2343, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 2342, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 2332, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 0, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 2341, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 2340, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 1437, 0,
	220, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 223, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 225, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 1440, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 1438,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 0, 1439, 478,
	534, 1182, 0, 220, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 1184, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	225, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 1020, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	0, 479, 478, 534, 1179, 0, 220, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 1181, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 225, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 1020, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 479, 478, 534, 1085, 0, 220,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 1087,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 225, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	1020, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	564, 0, 220, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 563, 230, 231, 553, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	556, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	557, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 0,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 558, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 552, 0, 220, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 553, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 556, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 557, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 0, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 558, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 220, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 2849, 359, 0, 225,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 220,
	479, 478, 534, 0, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 225, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	1020, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	2446, 0, 220, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 2445, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 225,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 1929, 0, 220, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 225, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 220, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 223, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 224, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 225,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 1857, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 1862, 0, 220, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 223, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 1861, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	224, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 225, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 1850, 0, 220, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 223, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 1852, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 224, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 225, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 1337,
	0, 220, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 1336, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 225, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 1328, 0, 220, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 223, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 1327, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 224,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 225, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 0, 479, 478, 534, 1325, 0, 220, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 1324, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 225, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 1321, 0,
	220, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 223, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	1320, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 225, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 0, 479, 478,
	534, 1277, 0, 220, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 223, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 224, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	225, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	0, 479, 478, 534, 1200, 0, 220, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 225, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 479, 478, 534, 1193, 0, 220,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 223, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 1195,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 224, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 225, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 220, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 223,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 224, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 225, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 220, 479, 478, 534, 0, 0, 0,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 556, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 557, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 0, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	0, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 558, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	220, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 1960, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 223, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 224, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 225, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 220, 479, 478,
	534, 0, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 1958,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	223, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 224, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 225, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 220, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 1956, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 223, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 224,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 225, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 220, 479, 478, 534, 0, 0, 0, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 223, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 1900, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 224, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 225, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 711, 0, 220, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	710, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 0, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 709, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 220, 479, 478, 534, 0, 0, 0, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 2512, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 3416, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 543, 0, 220, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 542, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 0, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 541, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 0, 479, 478, 534, 220, 3425, 0, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 0, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 220, 2499, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 0,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 504, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 0, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 0, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 220, 479, 478, 534, 0, 0, 0,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 3176, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 504, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 0, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	0, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	220, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 2261, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 0, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 0, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 0, 479, 478,
	534, 220, 2499, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 2496, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 220, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 1937, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 0, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 1927,
	0, 220, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 584, 0, 220, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 1059, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 1057, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 585, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 0, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	581, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	1060, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 580, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 0, 479, 478, 534, 584, 0, 220, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 574, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 585, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 0, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 581, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 1352, 431, 0, 432, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 580, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 0, 479, 478, 534, 1334, 0,
	220, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	1333, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 0, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 0, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 419, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 0, 479, 478,
	534, 1283, 0, 220, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 1282, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 0, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	0, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	0, 479, 478, 534, 1268, 0, 220, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 0,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 1267, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 0, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 0, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 0, 479, 478, 534, 1263, 0, 220,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 0, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	1187, 0, 220, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 0,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 584, 0, 220, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 1059, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 1057, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 585, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 0, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 581, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 1060, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 580, 526, 527, 528, 0, 464,
	0, 458, 1058, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 220, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 1041, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 0,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 220,
	479, 478, 534, 0, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 590, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 504,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 0, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 0, 479, 478, 534,
	584, 0, 220, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 574, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 572, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 504, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 573,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 585,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 0,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 575, 414, 0, 415, 419, 420, 581, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 576, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 580, 526, 527, 528, 0, 464, 0, 458, 578,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 0,
	479, 478, 534, 568, 0, 220, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 0, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 569,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 0, 479, 478, 534, 566, 0, 220, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 0, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 0, 479, 478, 534, 560,
	0, 220, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 0, 479,
	478, 534, 538, 0, 220, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 504, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 0, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 220, 479, 478, 534, 0, 0, 0, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 504, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 220, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 2918, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 0, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 398, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 220, 479, 478, 534, 0,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 307, 0,
	308, 309, 310, 311, 312, 2879, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 0, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 380, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 395, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 414, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 220, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 486, 487, 0, 488, 241,
	489, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 490, 491, 492, 0, 248, 249, 493, 0, 0,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 0, 272, 494, 495,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 280, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 496, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 497, 498, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 499, 0, 0, 0, 300, 0,
	301, 0, 0, 0, 302, 303, 500, 501, 304, 305,
	0, 306, 502, 0, 503, 307, 0, 308, 309, 310,
	311, 312, 2825, 505, 506, 365, 0, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 0, 321, 507, 508, 0, 509, 0, 323,
	0, 510, 0, 324, 325, 326, 0, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 511, 0, 336, 337, 0, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	0, 357, 358, 361, 362, 360, 0, 359, 0, 0,
	0, 363, 0, 512, 364, 513, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 514, 0, 375, 0, 515, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 516,
	517, 518, 387, 519, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 520, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 0, 410, 411,
	412, 413, 521, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 0, 435, 436, 522,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	523, 443, 444, 445, 446, 524, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 525, 526, 527, 528, 0, 464, 0, 458, 459,
	529, 460, 530, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 531, 532, 533, 220,
	479, 478, 534, 0, 0, 0, 0, 480, 481, 535,
	482, 483, 484, 0, 0, 0, 226, 227, 228, 229,
	230, 231, 0, 232, 233, 0, 0, 0, 0, 0,
	485, 0, 0, 0, 0, 234, 235, 237, 236, 238,
	239, 240, 486, 487, 0, 488, 241, 489, 0, 242,
	243, 244, 245, 246, 0, 0, 0, 247, 490, 491,
	492, 0, 248, 249, 493, 0, 0, 0, 250, 251,
	252, 253, 254, 255, 256, 0, 0, 258, 259, 260,
	257, 0, 261, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 0, 0, 0, 0, 0, 0, 268,
	269, 270, 271, 0, 272, 494, 495, 0, 276, 273,
	274, 0, 277, 275, 0, 278, 0, 0, 279, 280,
	281, 0, 282, 0, 283, 284, 0, 285, 286, 496,
	287, 288, 290, 292, 289, 293, 294, 295, 296, 497,
	498, 0, 0, 0, 0, 0, 0, 0, 297, 298,
	299, 499, 0, 0, 0, 300, 0, 301, 0, 0,
	0, 302, 303, 500, 501, 304, 305, 0, 306, 502,
	0, 503, 307, 0, 308, 309, 310, 311, 312, 2823,
	505, 506, 365, 0, 313, 314, 0, 315, 316, 317,
	318, 0, 0, 0, 0, 319, 320, 322, 0, 0,
	321, 507, 508, 0, 509, 0, 323, 0, 510, 0,
	324, 325, 326, 0, 327, 0, 0, 0, 328, 329,
	330, 331, 332, 0, 334, 333, 0, 335, 511, 0,
	336, 337, 0, 0, 338, 339, 340, 0, 0, 341,
	342, 343, 344, 0, 345, 346, 348, 350, 347, 349,
	354, 351, 352, 353, 356, 0, 355, 0, 357, 358,
	361, 362, 360, 0, 359, 0, 0, 0, 363, 0,
	512, 364, 513, 366, 367, 0, 0, 368, 0, 0,
	0, 370, 371, 372, 0, 0, 373, 374, 514, 0,
	375, 0, 515, 376, 377, 369, 378, 379, 380, 381,
	382, 383, 384, 0, 385, 386, 516, 517, 518, 387,
	519, 388, 389, 0, 390, 0, 391, 392, 393, 394,
	395, 396, 397, 520, 398, 399, 0, 0, 0, 0,
	0, 0, 400, 0, 402, 403, 404, 401, 405, 406,
	407, 408, 0, 409, 0, 410, 411, 412, 413, 521,
	414, 0, 415, 419, 420, 421, 422, 423, 424, 425,
	0, 427, 428, 426, 429, 430, 431, 0, 432, 416,
	417, 433, 434, 0, 435, 436, 522, 0, 437, 0,
	438, 439, 440, 441, 418, 442, 447, 523, 443, 444,
	445, 446, 524, 0, 449, 450, 0, 448, 0, 451,
	452, 453, 454, 455, 291, 456, 0, 457, 525, 526,
	527, 528, 0, 464, 0, 458, 459, 529, 460, 530,
	0, 461, 462, 463, 0, 465, 466, 0, 0, 467,
	468, 469, 471, 472, 470, 473, 0, 474, 0, 0,
	475, 476, 477, 531, 532, 533, 220, 479, 478, 534,
	0, 0, 0, 0, 480, 481, 535, 482, 483, 484,
	0, 0, 0, 226, 227, 228, 229, 230, 231, 0,
	232, 233, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 0, 234, 235, 237, 236, 238, 239, 240, 486,
	487, 0, 488, 241, 489, 0, 242, 243, 244, 245,
	246, 0, 0, 0, 247, 490, 491, 492, 0, 248,
	249, 493, 0, 0, 0, 250, 251, 252, 253, 254,
	255, 256, 0, 0, 258, 259, 260, 257, 0, 261,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	0, 0, 0, 0, 0, 0, 268, 269, 270, 271,
	0, 272, 494, 495, 0, 276, 273, 274, 0, 277,
	275, 0, 278, 0, 0, 279, 280, 281, 0, 282,
	0, 283, 284, 0, 285, 286, 496, 287, 288, 290,
	292, 289, 293, 294, 295, 296, 497, 498, 0, 0,
	0, 0, 0, 0, 0, 297, 298, 299, 499, 0,
	0, 0, 300, 0, 301, 0, 0, 0, 302, 303,
	500, 501, 304, 305, 0, 306, 502, 0, 503, 307,
	0, 308, 309, 310, 311, 312, 2809, 505, 506, 365,
	0, 313, 314, 0, 315, 316, 317, 318, 0, 0,
	0, 0, 319, 320, 322, 0, 0, 321, 507, 508,
	0, 509, 0, 323, 0, 510, 0, 324, 325, 326,
	0, 327, 0, 0, 0, 328, 329, 330, 331, 332,
	0, 334, 333, 0, 335, 511, 0, 336, 337, 0,
	0, 338, 339, 340, 0, 0, 341, 342, 343, 344,
	0, 345, 346, 348, 350, 347, 349, 354, 351, 352,
	353, 356, 0, 355, 0, 357, 358, 361, 362, 360,
	0, 359, 0, 0, 0, 363, 0, 512, 364, 513,
	366, 367, 0, 0, 368, 0, 0, 0, 370, 371,
	372, 0, 0, 373, 374, 514, 0, 375, 0, 515,
	376, 377, 369, 378, 379, 380, 381, 382, 383, 384,
	0, 385, 386, 516, 517, 518, 387, 519, 388, 389,
	0, 390, 0, 391, 392, 393, 394, 395, 396, 397,
	520, 398, 399, 0, 0, 0, 0, 0, 0, 400,
	0, 402, 403, 404, 401, 405, 406, 407, 408, 0,
	409, 0, 410, 411, 412, 413, 521, 414, 0, 415,
	419, 420, 421, 422, 423, 424, 425, 0, 427, 428,
	426, 429, 430, 431, 0, 432, 416, 417, 433, 434,
	0, 435, 436, 522, 0, 437, 0, 438, 439, 440,
	441, 418, 442, 447, 523, 443, 444, 445, 446, 524,
	0, 449, 450, 0, 448, 0, 451, 452, 453, 454,
	455, 291, 456, 0, 457, 525, 526, 527, 528, 0,
	464, 0, 458, 459, 529, 460, 530, 0, 461, 462,
	463, 0, 465, 466, 0, 0, 467, 468, 469, 471,
	472, 470, 473, 0, 474, 0, 0, 475, 476, 477,
	531, 532, 533, 220, 479, 478, 534, 0, 0, 0,
	0, 480, 481, 535, 482, 483, 484, 0, 0, 0,
	226, 227, 228, 229, 230, 231, 0, 232, 233, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 234,
	235, 237, 236, 238, 239, 240, 486, 487, 0, 488,
	241, 489, 0, 242, 243, 244, 245, 246, 0, 0,
	0, 247, 490, 491, 492, 0, 248, 249, 493, 0,
	0, 0, 250, 251, 252, 253, 254, 255, 256, 0,
	0, 258, 259, 260, 257, 0, 261, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 0, 0, 0,
	0, 0, 0, 268, 269, 270, 271, 0, 272, 494,
	495, 0, 276, 273, 274, 0, 277, 275, 0, 278,
	0, 0, 279, 280, 281, 0, 282, 0, 283, 284,
	0, 285, 286, 496, 287, 288, 290, 292, 289, 293,
	294, 295, 296, 497, 498, 0, 0, 0, 0, 0,
	0, 0, 297, 298, 299, 499, 0, 0, 0, 300,
	0, 301, 0, 0, 0, 302, 303, 500, 501, 304,
	305, 0, 306, 502, 0, 503, 307, 0, 308, 309,
	310, 311, 312, 2454, 505, 506, 365, 0, 313, 314,
	0, 315, 316, 317, 318, 0, 0, 0, 0, 319,
	320, 322, 0, 0, 321, 507, 508, 0, 509, 0,
	323, 0, 510, 0, 324, 325, 326, 0, 327, 0,
	0, 0, 328, 329, 330, 331, 332, 0, 334, 333,
	0, 335, 511, 0, 336, 337, 0, 0, 338, 339,
	340, 0, 0, 341, 342, 343, 344, 0, 345, 346,
	348, 350, 347, 349, 354, 351, 352, 353, 356, 0,
	355, 0, 357, 358, 361, 362, 360, 0, 359, 0,
	0, 0, 363, 0, 512, 364, 513, 366, 367, 0,
	0, 368, 0, 0, 0, 370, 371, 372, 0, 0,
	373, 374, 514, 0, 375, 0, 515, 376, 377, 369,
	378, 379, 380, 381, 382, 383, 384, 0, 385, 386,
	516, 517, 518, 387, 519, 388, 389, 0, 390, 0,
	391, 392, 393, 394, 395, 396, 397, 520, 398, 399,
	0, 0, 0, 0, 0, 0, 400, 0, 402, 403,
	404, 401, 405, 406, 407, 408, 0, 409, 0, 410,
	411, 412, 413, 521, 414, 0, 415, 419, 420, 421,
	422, 423, 424, 425, 0, 427, 428, 426, 429, 430,
	431, 0, 432, 416, 417, 433, 434, 0, 435, 436,
	522, 0, 437, 0, 438, 439, 440, 441, 418, 442,
	447, 523, 443, 444, 445, 446, 524, 0, 449, 450,
	0, 448, 0, 451, 452, 453, 454, 455, 291, 456,
	0, 457, 525, 526, 527, 528, 0, 464, 0, 458,
	459, 529, 460, 530, 0, 461, 462, 463, 0, 465,
	466, 0, 0, 467, 468, 469, 471, 472, 470, 473,
	0, 474, 0, 0, 475, 476, 477, 531, 532, 533,
	220, 479, 478, 534, 0, 0, 0, 0, 480, 481,
	535, 482, 483, 484, 0, 0, 0, 226, 227, 228,
	229, 230, 231, 0, 232, 233, 0, 0, 0, 0,
	0, 485, 0, 0, 0, 0, 234, 235, 237, 236,
	238, 239, 240, 486, 487, 0, 488, 241, 489, 0,
	242, 243, 244, 245, 246, 0, 0, 0, 247, 490,
	491, 492, 0, 248, 249, 493, 0, 0, 0, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 258, 259,
	260, 257, 0, 261, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 0, 0, 0, 0, 0, 0,
	268, 269, 270, 271, 0, 272, 494, 495, 0, 276,
	273, 274, 0, 277, 275, 0, 278, 0, 0, 279,
	280, 281, 0, 282, 0, 283, 284, 0, 285, 286,
	496, 287, 288, 290, 292, 289, 293, 294, 295, 296,
	497, 498, 0, 0, 0, 0, 0, 0, 0, 297,
	298, 299, 499, 0, 0, 0, 300, 0, 301, 0,
	0, 0, 302, 303, 500, 501, 304, 305, 0, 306,
	502, 0, 503, 307, 0, 308, 309, 310, 311, 312,
	504, 505, 506, 365, 0, 313, 314, 0, 315, 316,
	317, 318, 0, 0, 0, 0, 319, 320, 322, 0,
	0, 321, 507, 508, 0, 509, 0, 323, 0, 510,
	0, 324, 325, 326, 0, 327, 0, 0, 0, 328,
	329, 330, 331, 332, 0, 334, 333, 0, 335, 511,
	0, 336, 337, 0, 0, 338, 339, 340, 0, 0,
	341, 342, 343, 344, 0, 345, 346, 348, 350, 347,
	349, 354, 351, 352, 353, 356, 0, 355, 0, 357,
	358, 361, 362, 360, 0, 359, 0, 0, 0, 363,
	0, 512, 364, 513, 366, 367, 0, 0, 368, 0,
	0, 0, 370, 371, 372, 0, 0, 373, 374, 514,
	0, 375, 0, 515, 376, 377, 369, 378, 379, 380,
	381, 382, 383, 384, 0, 385, 386, 516, 517, 518,
	387, 519, 388, 389, 0, 390, 0, 391, 392, 393,
	394, 395, 396, 397, 520, 398, 399, 0, 0, 0,
	0, 0, 0, 400, 0, 402, 403, 404, 401, 405,
	406, 407, 408, 0, 409, 0, 410, 411, 412, 413,
	521, 414, 0, 415, 569, 420, 421, 422, 423, 424,
	425, 0, 427, 428, 426, 429, 430, 431, 0, 432,
	416, 417, 433, 434, 0, 435, 436, 522, 0, 437,
	0, 438, 439, 440, 441, 418, 442, 447, 523, 443,
	444, 445, 446, 524, 0, 449, 450, 0, 448, 0,
	451, 452, 453, 454, 455, 291, 456, 0, 457, 525,
	526, 527, 528, 0, 464, 0, 458, 459, 529, 460,
	530, 0, 461, 462, 463, 0, 465, 466, 0, 0,
	467, 468, 469, 471, 472, 470, 473, 0, 474, 0,
	0, 475, 476, 477, 531, 532, 533, 220, 479, 478,
	534, 0, 0, 0, 0, 480, 481, 535, 482, 483,
	484, 0, 0, 0, 226, 227, 228, 229, 230, 231,
	0, 232, 233, 0, 0, 0, 0, 0, 485, 0,
	1882, 0, 0, 234, 235, 237, 236, 238, 239, 240,
	486, 487, 0, 488, 241, 489, 0, 242, 243, 244,
	245, 246, 0, 0, 0, 247, 490, 491, 492, 0,
	248, 249, 493, 0, 0, 0, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 258, 259, 260, 257, 0,
	261, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 0, 0, 0, 0, 0, 0, 268, 269, 270,
	271, 0, 272, 494, 495, 0, 276, 273, 274, 0,
	277, 275, 0, 278, 0, 0, 279, 280, 281, 0,
	282, 0, 283, 284, 0, 285, 286, 496, 287, 288,
	290, 292, 289, 293, 294, 295, 296, 497, 498, 0,
	0, 0, 0, 0, 0, 0, 297, 298, 299, 499,
	0, 0, 0, 300, 0, 301, 0, 0, 0, 302,
	303, 500, 501, 304, 305, 0, 306, 502, 0, 503,
	307, 0, 308, 309, 310, 311, 312, 504, 505, 506,
	365, 0, 313, 314, 0, 315, 316, 317, 318, 0,
	0, 0, 0, 319, 320, 322, 0, 0, 321, 507,
	508, 0, 509, 0, 323, 0, 510, 0, 324, 325,
	326, 0, 327, 0, 0, 0, 328, 329, 330, 331,
	332, 0, 334, 333, 0, 335, 511, 0, 336, 337,
	0, 0, 338, 339, 340, 0, 0, 341, 342, 343,
	344, 0, 345, 346, 348, 350, 347, 349, 354, 351,
	352, 353, 356, 0, 355, 0, 357, 358, 361, 362,
	360, 0, 359, 0, 0, 0, 363, 0, 512, 364,
	513, 366, 367, 0, 0, 368, 0, 0, 0, 370,
	371, 372, 0, 0, 373, 374, 514, 0, 375, 0,
	515, 376, 377, 369, 378, 379, 380, 381, 382, 383,
	384, 0, 385, 386, 516, 517, 518, 387, 519, 388,
	389, 0, 390, 0, 391, 392, 393, 394, 395, 396,
	397, 520, 398, 399, 0, 0, 0, 0, 0, 0,
	400, 0, 402, 403, 404, 401, 405, 406, 407, 408,
	0, 409, 0, 410, 411, 412, 413, 521, 414, 0,
	415, 419, 420, 421, 422, 423, 424, 425, 0, 427,
	428, 426, 429, 430, 431, 0, 0, 416, 417, 433,
	434, 0, 435, 436, 522, 0, 437, 0, 438, 439,
	440, 441, 418, 442, 447, 523, 443, 444, 445, 446,
	524, 0, 449, 450, 0, 448, 0, 451, 452, 453,
	454, 455, 291, 456, 0, 457, 525, 526, 527, 528,
	0, 464, 0, 458, 459, 529, 460, 530, 0, 461,
	462, 463, 0, 465, 466, 0, 0, 467, 468, 469,
	471, 472, 470, 473, 0, 474, 0, 0, 475, 476,
	477, 531, 532, 533, 220, 479, 478, 534, 0, 0,
	0, 0, 480, 481, 535, 482, 483, 484, 0, 0,
	0, 226, 227, 228, 229, 230, 231, 0, 232, 233,
	0, 0, 0, 0, 0, 485, 0, 0, 0, 0,
	234, 235, 237, 236, 238, 239, 240, 486, 487, 0,
	488, 241, 489, 0, 242, 243, 244, 245, 246, 0,
	0, 0, 247, 490, 491, 492, 0, 248, 249, 493,
	0, 0, 0, 250, 251, 252, 253, 254, 255, 256,
	0, 0, 258, 259, 260, 257, 0, 261, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 0, 0,
	0, 0, 0, 0, 268, 269, 270, 271, 0, 272,
	494, 495, 0, 276, 273, 274, 0, 277, 275, 0,
	278, 0, 0, 279, 280, 281, 0, 282, 0, 283,
	284, 0, 285, 286, 496, 287, 288, 290, 292, 289,
	293, 294, 295, 296, 497, 498, 0, 0, 0, 0,
	0, 0, 0, 297, 298, 299, 499, 0, 0, 0,
	300, 0, 301, 0, 0, 0, 302, 303, 500, 501,
	304, 305, 0, 306, 502, 0, 503, 307, 0, 308,
	309, 310, 311, 312, 1305, 505, 506, 365, 0, 313,
	314, 0, 315, 316, 317, 318, 0, 0, 0, 0,
	319, 320, 322, 0, 0, 321, 507, 508, 0, 509,
	0, 323, 0, 510, 0, 324, 325, 326, 0, 327,
	0, 0, 0, 328, 329, 330, 331, 332, 0, 334,
	333, 0, 335, 511, 0, 336, 337, 0, 0, 338,
	339, 340, 0, 0, 341, 342, 343, 344, 0, 345,
	346, 348, 350, 347, 349, 354, 351, 352, 353, 356,
	0, 355, 0, 357, 358, 361, 362, 360, 0, 359,
	0, 0, 0, 363, 0, 512, 364, 513, 366, 367,
	0, 0, 368, 0, 0, 0, 370, 371, 372, 0,
	0, 373, 374, 514, 0, 375, 0, 515, 376, 377,
	369, 378, 379, 380, 381, 382, 383, 384, 0, 385,
	386, 516, 517, 518, 387, 519, 388, 389, 0, 390,
	0, 391, 392, 393, 394, 395, 396, 397, 520, 398,
	399, 0, 0, 0, 0, 0, 0, 400, 0, 402,
	403, 404, 401, 405, 406, 407, 408, 0, 409, 0,
	410, 411, 412, 413, 521, 414, 0, 415, 419, 420,
	421, 422, 423, 424, 425, 0, 427, 428, 426, 429,
	430, 431, 0, 432, 416, 417, 433, 434, 0, 435,
	436, 522, 0, 437, 0, 438, 439, 440, 441, 418,
	442, 447, 523, 443, 444, 445, 446, 524, 0, 449,
	450, 0, 448, 0, 451, 452, 453, 454, 455, 291,
	456, 0, 457, 525, 526, 527, 528, 0, 464, 0,
	458, 459, 529, 460, 530, 0, 461, 462, 463, 0,
	465, 466, 0, 0, 467, 468, 469, 471, 472, 470,
	473, 0, 474, 0, 0, 475, 476, 477, 531, 532,
	533, 220, 479, 478, 534, 0, 0, 0, 0, 480,
	481, 535, 482, 483, 484, 0, 0, 0, 226, 227,
	228, 229, 230, 231, 0, 232, 233, 0, 0, 0,
	0, 0, 485, 0, 0, 0, 0, 234, 235, 237,
	236, 238, 239, 240, 486, 487, 0, 488, 241, 489,
	0, 242, 243, 244, 245, 246, 0, 0, 0, 247,
	490, 491, 492, 0, 248, 249, 493, 0, 0, 0,
	250, 251, 252, 253, 254, 255, 256, 0, 0, 258,
	259, 260, 257, 0, 261, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 268, 269, 270, 271, 0, 272, 494, 495, 0,
	276, 273, 274, 0, 277, 275, 0, 278, 0, 0,
	279, 280, 281, 0, 282, 0, 283, 284, 0, 285,
	286, 496, 287, 288, 290, 292, 289, 293, 294, 295,
	296, 497, 498, 0, 0, 0, 0, 0, 0, 0,
	297, 298, 299, 499, 0, 0, 0, 300, 0, 301,
	0, 0, 0, 302, 303, 500, 501, 304, 305, 0,
	306, 502, 0, 503, 307, 0, 308, 309, 310, 311,
	312, 1245, 505, 506, 365, 0, 313, 314, 0, 315,
	316, 317, 318, 0, 0, 0, 0, 319, 320, 322,
	0, 0, 321, 507, 508, 0, 509, 0, 323, 0,
	510, 0, 324, 325, 326, 0, 327, 0, 0, 0,
	328, 329, 330, 331, 332, 0, 334, 333, 0, 335,
	511, 0, 336, 337, 0, 0, 338, 339, 340, 0,
	0, 341, 342, 343, 344, 0, 345, 346, 348, 350,
	347, 349, 354, 351, 352, 353, 356, 0, 355, 0,
	357, 358, 361, 362, 360, 0, 359, 0, 0, 0,
	363, 0, 512, 364, 513, 366, 367, 0, 0, 368,
	0, 0, 0, 370, 371, 372, 0, 0, 373, 374,
	514, 0, 375, 0, 515, 376, 377, 369, 378, 379,
	380, 381, 382, 383, 384, 0, 385, 386, 516, 517,
	518, 387, 519, 388, 389, 0, 390, 0, 391, 392,
	393, 394, 395, 396, 397, 520, 398, 399, 0, 0,
	0, 0, 0, 0, 400, 0, 402, 403, 404, 401,
	405, 406, 407, 408, 0, 409, 0, 410, 411, 412,
	413, 521, 414, 0, 415, 419, 420, 421, 422, 423,
	424, 425, 0, 427, 428, 426, 429, 430, 431, 0,
	432, 416, 417, 433, 434, 0, 435, 436, 522, 0,
	437, 0, 438, 439, 440, 441, 418, 442, 447, 523,
	443, 444, 445, 446, 524, 0, 449, 450, 0, 448,
	0, 451, 452, 453, 454, 455, 291, 456, 0, 457,
	525, 526, 527, 528, 0, 464, 0, 458, 459, 529,
	460, 530, 0, 461, 462, 463, 0, 465, 466, 0,
	0, 467, 468, 469, 471, 472, 470, 473, 0, 474,
	0, 0, 475, 476, 477, 531, 532, 533, 220, 479,
	478, 534, 0, 0, 0, 0, 480, 481, 535, 482,
	483, 484, 0, 0, 0, 226, 227, 228, 229, 230,
	231, 0, 232, 233, 0, 0, 0, 0, 0, 485,
	0, 0, 0, 0, 234, 235, 237, 236, 238, 239,
	240, 486, 487, 0, 488, 241, 489, 0, 242, 243,
	244, 245, 246, 0, 0, 0, 247, 490, 491, 492,
	0, 248, 249, 493, 0, 0, 0, 250, 251, 252,
	253, 254, 255, 256, 0, 0, 258, 259, 260, 257,
	0, 261, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 0, 0, 0, 0, 0, 0, 268, 269,
	270, 271, 0, 272, 494, 495, 0, 276, 273, 274,
	0, 277, 275, 0, 278, 0, 0, 279, 280, 281,
	0, 282, 0, 283, 284, 0, 285, 286, 496, 287,
	288, 290, 292, 289, 293, 294, 295, 296, 497, 498,
	0, 0, 0, 0, 0, 0, 0, 297, 298, 299,
	499, 0, 0, 0, 300, 0, 301, 0, 0, 0,
	302, 303, 500, 501, 304, 305, 0, 306, 502, 0,
	503, 307, 0, 308, 309, 310, 311, 312, 504, 505,
	506, 365, 0, 313, 314, 0, 315, 316, 317, 318,
	0, 0, 0, 0, 319, 320, 322, 0, 0, 321,
	507, 508, 0, 509, 0, 323, 0, 510, 0, 324,
	325, 326, 0, 327, 0, 0, 0, 328, 329, 330,
	331, 332, 0, 334, 333, 0, 335, 511, 0, 336,
	337, 0, 0, 338, 339, 340, 0, 0, 341, 342,
	343, 344, 0, 345, 346, 348, 350, 347, 349, 354,
	351, 352, 353, 356, 0, 355, 0, 357, 358, 361,
	362, 360, 0, 359, 0, 0, 0, 363, 0, 512,
	364, 513, 366, 367, 0, 0, 368, 0, 0, 0,
	370, 371, 372, 0, 0, 373, 374, 514, 0, 375,
	0, 515, 376, 377, 369, 378, 379, 380, 381, 382,
	383, 384, 0, 385, 386, 516, 517, 518, 387, 519,
	388, 389, 0, 390, 0, 391, 392, 393, 394, 395,
	396, 397, 520, 993, 399, 0, 0, 0, 0, 0,
	0, 400, 0, 402, 403, 404, 401, 405, 406, 407,
	408, 0, 409, 0, 410, 411, 412, 413, 521, 414,
	0, 415, 419, 420, 421, 422, 423, 424, 425, 0,
	427, 428, 426, 429, 430, 431, 0, 432, 416, 417,
	433, 434, 0, 435, 436, 522, 0, 437, 0, 438,
	439, 440, 441, 418, 442, 447, 523, 443, 444, 445,
	446, 524, 0, 449, 450, 0, 448, 0, 451, 452,
	453, 454, 455, 291, 456, 0, 457, 525, 526, 527,
	528, 0, 464, 0, 458, 459, 529, 460, 530, 0,
	461, 462, 463, 0, 465, 466, 0, 0, 467, 468,
	469, 471, 472, 470, 473, 0, 474, 0, 0, 475,
	476, 477, 531, 532, 533, 220, 479, 478, 534, 0,
	0, 0, 0, 480, 481, 535, 482, 483, 484, 0,
	0, 0, 226, 227, 228, 229, 230, 231, 0, 232,
	233, 0, 0, 0, 0, 0, 485, 0, 0, 0,
	0, 234, 235, 237, 236, 238, 239, 240, 486, 487,
	0, 488, 241, 489, 0, 242, 243, 244, 245, 246,
	0, 0, 0, 247, 490, 491, 492, 0, 248, 249,
	493, 0, 0, 0, 250, 251, 252, 253, 254, 255,
	256, 0, 0, 258, 259, 260, 257, 0, 261, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 0,
	0, 0, 0, 0, 0, 268, 269, 270, 271, 0,
	272, 494, 495, 0, 276, 273, 274, 0, 277, 275,
	0, 278, 0, 0, 279, 280, 281, 0, 282, 0,
	283, 284, 0, 285, 286, 496, 287, 288, 290, 292,
	289, 293, 294, 295, 296, 497, 498, 0, 0, 0,
	0, 0, 0, 0, 297, 298, 299, 499, 0, 0,
	0, 300, 0, 301, 0, 0, 0, 302, 303, 500,
	501, 304, 305, 0, 306, 502, 0, 503, 0, 0,
	308, 309, 310, 311, 312, 504, 505, 506, 365, 0,
	313, 314, 0, 315, 316, 317, 318, 0, 0, 0,
	0, 319, 320, 322, 0, 0, 321, 507, 508, 0,
	509, 0, 323, 0, 510, 0, 324, 325, 326, 0,
	327, 0, 0, 0, 328, 329, 330, 331, 332, 0,
	334, 333, 0, 335, 511, 0, 336, 337, 0, 0,
	338, 339, 340, 0, 0, 341, 342, 343, 344, 0,
	345, 346, 348, 350, 347, 349, 354, 351, 352, 353,
	356, 0, 355, 0, 357, 358, 361, 362, 360, 0,
	359, 0, 0, 0, 363, 0, 512, 364, 513, 366,
	367, 0, 0, 368, 0, 0, 0, 370, 371, 372,
	0, 0, 373, 374, 514, 0, 375, 0, 515, 376,
	377, 369, 378, 379, 0, 381, 382, 383, 384, 0,
	385, 386, 516, 517, 518, 387, 519, 388, 389, 0,
	390, 0, 391, 392, 393, 394, 0, 396, 397, 520,
	398, 399, 0, 0, 0, 0, 0, 0, 400, 0,
	402, 403, 404, 401, 405, 406, 407, 408, 0, 409,
	0, 410, 411, 412, 413, 521, 0, 0, 415, 419,
	420, 421, 422, 423, 424, 425, 0, 427, 428, 426,
	429, 430, 431, 0, 432, 416, 417, 433, 434, 0,
	435, 436, 522, 0, 437, 0, 438, 439, 440, 441,
	418, 442, 447, 523, 443, 444, 445, 446, 524, 0,
	449, 450, 0, 448, 0, 451, 452, 453, 454, 455,
	291, 456, 0, 457, 525, 526, 527, 528, 0, 464,
	0, 458, 459, 529, 460, 530, 0, 461, 462, 463,
	0, 465, 466, 0, 0, 467, 468, 469, 471, 472,
	470, 473, 0, 474, 0, 0, 475, 476, 477, 531,
	532, 533, 1698, 479, 478, 534, 0, 0, 0, 0,
	480, 481, 535, 482, 483, 484, 0, 0, 0, 226,
	227, 228, 229, 230, 231, 0, 232, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 235,
	237, 236, 238, 239, 240, 0, 1704, 0, 1694, 241,
	1710, 0, 242, 243, 244, 245, 246, 0, 0, 0,
	247, 1719, 1720, 0, 0, 248, 249, 0, 0, 1178,
	0, 250, 251, 252, 253, 254, 255, 256, 0, 0,
	258, 259, 260, 257, 0, 261, 0, 262, 263, 264,
	0, 265, 971, 266, 267, 0, 0, 0, 0, 0,
	0, 0, 268, 269, 270, 271, 955, 272, 1708, 1707,
	0, 276, 273, 274, 0, 277, 275, 0, 278, 0,
	0, 279, 940, 281, 0, 282, 0, 283, 284, 0,
	285, 286, 0, 287, 288, 290, 292, 289, 293, 294,
	295, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 298, 299, 1706, 0, 0, 0, 300, 0,
	301, 0, 0, 972, 302, 303, 1715, 1716, 304, 305,
	0, 306, 0, 0, 0, 307, 0, 308, 309, 310,
	311, 312, 0, 0, 0, 365, 974, 313, 314, 0,
	315, 316, 317, 318, 0, 0, 0, 0, 319, 320,
	322, 0, 973, 321, 1701, 1702, 0, 1697, 0, 323,
	975, 0, 976, 324, 325, 326, 977, 327, 0, 0,
	0, 328, 329, 330, 331, 332, 0, 334, 333, 0,
	335, 0, 978, 336, 337, 979, 0, 338, 339, 340,
	0, 0, 341, 342, 343, 344, 0, 345, 346, 348,
	350, 347, 349, 354, 351, 352, 353, 356, 0, 355,
	980, 357, 358, 361, 362, 360, 981, 359, 0, 0,
	982, 363, 0, 0, 364, 1709, 366, 367, 0, 0,
	368, 0, 0, 0, 370, 371, 372, 0, 0, 373,
	374, 0, 983, 375, 984, 0, 376, 377, 369, 378,
	379, 380, 381, 382, 383, 384, 0, 385, 386, 1691,
	1692, 0, 387, 0, 388, 389, 0, 390, 0, 391,
	392, 393, 394, 395, 396, 397, 1705, 398, 399, 0,
	0, 0, 0, 0, 0, 400, 0, 402, 403, 404,
	401, 405, 406, 407, 408, 0, 409, 985, 410, 411,
	412, 413, 0, 414, 0, 415, 419, 420, 421, 422,
	423, 424, 425, 0, 427, 428, 426, 429, 430, 431,
	0, 432, 416, 417, 433, 434, 986, 435, 436, 1703,
	0, 437, 0, 438, 439, 440, 441, 418, 442, 447,
	1718, 443, 444, 445, 446, 0, 0, 449, 450, 0,
	448, 0, 451, 452, 453, 454, 455, 291, 456, 0,
	457, 1711, 1712, 1713, 1714, 0, 464, 0, 458, 459,
	0, 460, 0, 0, 461, 462, 463, 0, 465, 466,
	0, 0, 467, 468, 469, 471, 472, 470, 473, 0,
	474, 0, 0, 475, 476, 477, 0, 1695, 1717, 0,
	479, 478, 0, 0, 0, 0, 0, 480, 481, 0,
	482, 483, 484, 1482, 1483, 0, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1513, 0, 0, 0, 0,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 1531,
	0, 0, 0, 0, 0, 0, 1482, 1483, 0, 1515,
	1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0, 0,
	0, 0, 1484, 0, 0, 0, 0, 1518, 1513, 0,
	0, 0, 1504, 0, 0, 1485, 0, 0, 0, 0,
	1501, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1522, 0, 0, 1532, 1507, 1508, 1509, 1510, 0, 1512,
	1514, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1528, 0, 1529, 0, 0, 0,
	0, 0, 0, 1499, 1500, 0, 0, 0, 0, 0,
	0, 0, 0, 1522, 0, 0, 1532, 0, 0, 1520,
	0, 0, 1512, 1514, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 1528, 0, 1529,
	0, 0, 0, 0, 0, 0, 1499, 1500, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 0, 0, 0, 0, 0, 0, 0,
	1523, 0, 0, 1511, 1518, 1513, 0, 0, 0, 0,
	0, 0, 1485, 0, 0, 0, 0, 0, 0, 1531,
	0, 1506, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 2654, 0, 0, 0, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	1521, 1490, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 2653, 0, 0,
	1522, 0, 0, 1532, 0, 0, 0, 0, 0, 1512,
	1514, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1528, 0, 1529, 0, 0, 0,
	0, 0, 0, 1499, 1500, 1482, 1483, 0, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 0,
	1505, 0, 0, 0, 1485, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 1482, 1483, 1490, 1515, 1516, 1517, 1525, 1526, 1527,
	1523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1518, 1513, 0, 0, 0, 0, 0, 0,
	1485, 0, 1522, 0, 0, 1532, 0, 1531, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	1484, 0, 0, 0, 0, 1499, 1500, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 1501, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 1530, 0, 0, 0,
	0, 0, 0, 0, 2115, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 1507,
	1508, 1509, 1510, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 1482, 1483, 0, 1515, 1516, 1517,
	1525, 1526, 1527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 1513, 0, 1522, 0,
	0, 1532, 1511, 1485, 0, 0, 0, 1512, 1514, 0,
	1531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 1528, 0, 1529, 0, 0, 0, 0, 0,
	0, 1499, 1500, 1484, 0, 0, 0, 0, 0, 0,
	0, 0, 1523, 1504, 0, 0, 0, 1520, 0, 0,
	0, 1501, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1530, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1511, 0,
	0, 1522, 3716, 0, 1532, 0, 0, 0, 0, 0,
	1512, 1514, 0, 0, 0, 0, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 1529, 0, 0,
	0, 0, 0, 0, 1499, 1500, 1482, 1483, 1523, 1515,
	1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 1518, 1513, 0,
	0, 1505, 0, 0, 0, 1485, 0, 0, 0, 0,
	0, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1484, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1521, 0, 0, 1496, 1497,
	1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487,
	1488, 1489, 1491, 1492, 0, 0, 0, 0, 3712, 0,
	0, 1511, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	0, 0, 1482, 1483, 1490, 1515, 1516, 1517, 1525, 1526,
	1527, 1523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1518, 1513, 0, 0, 0, 0, 0,
	0, 1485, 0, 1522, 0, 0, 1532, 0, 1531, 0,
	0, 0, 1512, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1528, 0, 1529,
	0, 1484, 0, 0, 0, 0, 1499, 1500, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 0, 0, 1501,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 1530, 0, 0,
	0, 3627, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 0, 0, 0,
	1507, 1508, 1509, 1510, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 1482, 1483, 0, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 1522,
	0, 0, 1532, 1511, 1485, 0, 0, 0, 1512, 1514,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 1528, 0, 1529, 0, 0, 0, 0,
	0, 0, 1499, 1500, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 1523, 1504, 0, 0, 0, 1520, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1511,
	0, 0, 1522, 3626, 0, 1532, 0, 0, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	0, 0, 0, 0, 0, 1499, 1500, 1482, 1483, 1523,
	1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 1518, 1513,
	0, 0, 1505, 0, 0, 0, 1485, 0, 0, 0,
	0, 0, 0, 1531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1521, 0, 0, 1496,
	1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0, 3486,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 1482, 1483, 1490, 1515, 1516, 1517, 1525,
	1526, 1527, 1523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1513, 0, 0, 0, 0,
	0, 0, 1485, 0, 1522, 0, 0, 1532, 0, 1531,
	0, 0, 0, 1512, 1514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 0,
	1529, 0, 1484, 0, 0, 0, 0, 1499, 1500, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 0,
	1501, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1530, 0,
	0, 0, 3368, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 1482, 1483, 0, 1515,
	1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1518, 1513, 0,
	1522, 0, 0, 1532, 1511, 1485, 0, 0, 0, 1512,
	1514, 0, 1531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 1528, 0, 1529, 0, 0, 0,
	0, 0, 0, 1499, 1500, 1484, 0, 0, 0, 0,
	0, 0, 0, 0, 1523, 1504, 0, 0, 0, 1520,
	0, 0, 0, 1501, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	1511, 0, 0, 1522, 3315, 0, 1532, 0, 0, 0,
	0, 0, 1512, 1514, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 1528, 0, 1529,
	0, 0, 0, 0, 0, 0, 1499, 1500, 1482, 1483,
	1523, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 1518,
	1513, 0, 0, 1505, 0, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0, 0,
	3314, 0, 0, 1511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 1482, 1483, 1490, 1515, 1516, 1517,
	1525, 1526, 1527, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 1513, 0, 0, 0,
	0, 0, 0, 1485, 0, 1522, 0, 0, 1532, 0,
	1531, 0, 0, 0, 1512, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1528,
	0, 1529, 0, 1484, 0, 0, 0, 0, 1499, 1500,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1530,
	0, 0, 0, 3313, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 1482, 1483, 0,
	1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 1513,
	0, 1522, 0, 0, 1532, 1511, 1485, 0, 0, 0,
	1512, 1514, 0, 1531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 1528, 0, 1529, 0, 0,
	0, 0, 0, 0, 1499, 1500, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 1523, 1504, 0, 0, 0,
	1520, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502,
	1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491,
	1492, 1511, 0, 0, 1522, 3048, 0, 1532, 0, 0,
	0, 0, 0, 1512, 1514, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 0,
	1529, 0, 0, 0, 0, 0, 0, 1499, 1500, 1482,
	1483, 1523, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	1518, 1513, 0, 0, 1505, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0,
	0, 2651, 0, 0, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 0, 0, 1482, 1483, 1490, 1515, 1516,
	1517, 1525, 1526, 1527, 1523, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 0,
	0, 0, 0, 0, 1485, 0, 1522, 0, 0, 1532,
	0, 1531, 0, 0, 0, 1512, 1514, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1528, 0, 1529, 0, 1484, 0, 0, 0, 0, 1499,
	1500, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 1520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1505, 0, 0, 0,
	0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	1530, 0, 0, 0, 2650, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 1482, 1483,
	0, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	1513, 0, 1522, 0, 0, 1532, 1511, 1485, 0, 0,
	0, 1512, 1514, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 1528, 0, 1529, 0,
	0, 0, 0, 0, 0, 1499, 1500, 1484, 0, 0,
	0, 0, 0, 0, 0, 0, 1523, 1504, 0, 0,
	0, 1520, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 1511, 0, 0, 1522, 2649, 0, 1532, 0,
	0, 0, 0, 0, 1512, 1514, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 1528,
	0, 1529, 0, 0, 0, 0, 0, 0, 1499, 1500,
	1482, 1483, 1523, 1515, 1516, 1517, 1525, 1526, 1527, 0,
	0, 0, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 1518, 1513, 0, 0, 1505, 0, 2586, 0, 1485,
	0, 0, 0, 0, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 2587, 0,
	0, 0, 2648, 0, 0, 1511, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 0, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 1482, 1483, 1490, 1515,
	1516, 1517, 1525, 1526, 1527, 1523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1518, 1513, 0,
	0, 0, 0, 0, 0, 1485, 0, 1522, 0, 0,
	1532, 0, 1531, 0, 0, 0, 1512, 1514, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1528, 0, 1529, 0, 1484, 0, 0, 0, 0,
	1499, 1500, 0, 0, 0, 1504, 0, 0, 0, 0,
	0, 0, 0, 1501, 0, 0, 1520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502,
	1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491,
	1492, 1530, 0, 2615, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 1507, 1508, 1509, 1510, 0, 0,
	0, 0, 0, 0, 1490, 0, 2711, 0, 0, 2710,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1522, 0, 0, 1532, 1511, 0, 0,
	0, 0, 1512, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1506, 0, 1528, 0, 1529,
	0, 2235, 0, 0, 0, 0, 1499, 1500, 1482, 1483,
	0, 1515, 1516, 1517, 1525, 1526, 1527, 1523, 0, 0,
	0, 0, 1520, 0, 0, 0, 0, 0, 0, 1518,
	1513, 0, 0, 1505, 2234, 0, 0, 1485, 0, 0,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1530, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 0, 0,
	0, 0, 0, 0, 1519, 0, 0, 1504, 0, 0,
	0, 0, 0, 0, 0, 1501, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 1496, 1497, 1503,
	1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 1511, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1506, 0, 0, 0, 0, 1507, 1508, 1509, 1510,
	0, 0, 0, 0, 1482, 1483, 1490, 1515, 1516, 1517,
	1525, 1526, 1527, 1523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1518, 1513, 0, 0, 0,
	0, 0, 0, 1485, 0, 1522, 0, 0, 1532, 0,
	1531, 0, 0, 0, 1512, 1514, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1528,
	0, 1529, 0, 1484, 0, 0, 0, 0, 1499, 1500,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 0, 1520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0,
	1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492, 1530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1519, 0, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 1482, 1483, 0,
	1515, 1516, 1517, 1525, 1526, 1527, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1518, 1513,
	0, 1522, 0, 0, 1532, 1511, 1485, 0, 0, 0,
	1512, 1514, 0, 1531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 1528, 0, 1529, 0, 0,
	0, 0, 0, 0, 1499, 1500, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 1523, 1504, 0, 0, 0,
	1520, 0, 0, 0, 1501, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 1508, 1509, 1510, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502,
	1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491,
	1492, 1511, 0, 0, 1522, 0, 0, 1532, 0, 0,
	0, 0, 0, 1512, 1514, 0, 0, 0, 0, 1506,
	0, 0, 0, 0, 0, 0, 0, 0, 1528, 0,
	1529, 0, 0, 0, 0, 0, 0, 1499, 1500, 1482,
	1483, 1523, 1515, 1516, 1517, 1525, 1526, 1527, 0, 0,
	0, 0, 0, 1520, 0, 0, 0, 0, 0, 0,
	1518, 1513, 0, 0, 1505, 0, 0, 0, 1485, 0,
	0, 0, 0, 0, 0, 1531, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 0, 1519, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 0, 0, 0,
	0, 0, 0, 0, 1511, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 0, 0, 0, 1507, 1508, 1509,
	1510, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 2717, 0, 1523, 0, 0, 0, 0, 0,
	0, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525, 1526,
	1527, 0, 0, 0, 0, 0, 1522, 0, 0, 1532,
	0, 0, 0, 1518, 1513, 1512, 1514, 3029, 2712, 0,
	0, 1485, 0, 0, 0, 0, 0, 0, 1531, 0,
	1528, 0, 1529, 0, 0, 0, 0, 0, 0, 1499,
	1500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1484, 0, 0, 0, 1520, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 1505, 0, 0, 1501,
	0, 1521, 0, 0, 1496, 1497, 1503, 1524, 1502, 1498,
	0, 1495, 1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
	1530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 1508, 1509, 1510, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1522,
	0, 0, 1532, 0, 1506, 0, 0, 0, 1512, 1514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1528, 0, 1529, 1523, 0, 0, 0,
	0, 0, 1499, 1500, 1482, 1483, 0, 1515, 1516, 1517,
	1525, 1526, 1527, 0, 0, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 0, 1518, 1513, 0, 0, 1505,
	0, 0, 0, 1485, 0, 0, 0, 0, 0, 0,
	1531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1484, 0, 0, 0, 0, 0, 0,
	1519, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 1501, 0, 1521, 0, 0, 1496, 1497, 1503, 1524,
	1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488, 1489,
	1491, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1511,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1506, 0, 0,
	0, 0, 1507, 1508, 1509, 1510, 0, 0, 0, 0,
	1482, 1483, 1490, 1515, 1516, 1517, 1525, 1526, 1527, 1523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1518, 1513, 0, 0, 0, 2652, 0, 0, 1485,
	0, 1522, 0, 0, 1532, 0, 1531, 0, 0, 0,
	1512, 1514, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 1529, 0, 1484,
	0, 0, 0, 0, 1499, 1500, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 1501, 0, 0,
	1520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 1521, 0, 0, 1496,
	1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494, 1486,
	1487, 1488, 1489, 1491, 1492, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 1507, 1508,
	1509, 1510, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 2679, 0, 1482, 1483, 0, 1515, 1516, 1517, 1525,
	1526, 1527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 1513, 0, 1522, 0, 0,
	1532, 1511, 1485, 0, 0, 0, 1512, 1514, 0, 1531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 1528, 0, 1529, 0, 0, 0, 0, 0, 0,
	1499, 1500, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 1523, 1504, 0, 0, 0, 1520, 0, 0, 0,
	1501, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1530, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1507, 1508, 1509, 1510, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 0, 0, 1521, 0,
	0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493,
	1494, 1486, 1487, 1488, 1489, 1491, 1492, 1511, 0, 0,
	1522, 0, 0, 1532, 0, 0, 0, 0, 0, 1512,
	1514, 0, 0, 0, 0, 1506, 0, 0, 0, 0,
	0, 0, 0, 0, 1528, 0, 1529, 0, 0, 0,
	0, 0, 0, 1499, 1500, 1482, 1483, 1523, 1515, 1516,
	1517, 1525, 1526, 1527, 0, 0, 0, 0, 0, 1520,
	0, 0, 0, 0, 0, 0, 1518, 1513, 0, 0,
	1505, 0, 0, 0, 1485, 0, 0, 0, 0, 0,
	0, 1531, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 1519, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 0, 0, 1496, 1497, 1503,
	1524, 1502, 1498, 0, 1495, 1493, 1494, 1486, 1487, 1488,
	1489, 1491, 1492, 0, 0, 0, 0, 0, 0, 0,
	1511, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 1507, 1508, 1509, 1510, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	1523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1522, 0, 0, 1532, 0, 0, 0, 0,
	0, 1512, 1514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1528, 0, 1529, 0,
	0, 0, 0, 0, 0, 1499, 1500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1505, 0, 0, 0, 0, 1521, 0, 0,
	1496, 1497, 1503, 1524, 1502, 1498, 0, 1495, 1493, 1494,
	1486, 1487, 1488, 1489, 1491, 1492, 1530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1511, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1521,
	0, 0, 1496, 1497, 1503, 1524, 1502, 1498, 0, 1495,
	1493, 1494, 1486, 1487, 1488, 1489, 1491, 1492,
}
var sqlPact = [...]int{

	7552, -1000, -1000, -1000, -1000, -1000, -1000, 205, 204, 203,
	202, 201, 195, 194, 193, -1000, -1000, -1000, -1000, -1000,
	-1000, 191, -1000, -1000, 184, -1000, 183, 182, 181, 179,
	-1000, 177, 175, 172, -1000, -1000, -1000, -1000, 168, 167,
	165, 65122, 2019, 78640, 68710, 1978, 58351, 78187, 57898, 77734,
	77281, 164, -1000, 76828, 161, 159, 157, -1000, 76375, -1000,
	1800, -1000, 156, 1888, 48361, 154, 153, 152, 1866, 151,
	-1000, 150, -1000, 9546, 1458, -1000, 149, -1000, 8386, 944,
	67810, 2526, 147, 143, 47908, 2498, 2561, -1000, -1000, 1890,
	-1000, -1000, 141, 137, 135, 132, 129, 128, 126, 125,
	123, -1000, 121, 119, 117, 116, 114, 110, 109, -1000,
	108, 106, 105, 103, 101, 95, 93, 91, 90, 89,
	88, 87, -1000, 10337, 1701, 1476, 1472, 1464, 1443, 1441,
	890, 86, 85, 82, 81, 78, 73, 72, 70, -1000,
	69, 68, 67, 66, 65, 64, 63, 62, 200, 61,
	60, 56, 53, 50, 48, 2034, -1000, 1594, 968, 23961,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 84004, 79087, 44, -184, 41, -1000, 2853,
	924, 40195, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 460, -1000, -1000, -1000, 278, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1894, 693, -1000, -1000,
	-1000, 75928, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2018, -18, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 690,
	-1000, 2017, 210, 1920, -1000, -1000, -1000, -1000, -1000, 79087,
	-1000, -1000, 3202, 3201, 1858, 689, 75481, -1000, 1528, -1000,
	841, 26829, -1000, 1000, -1000, 26829, 242, -1000, -1000, -1000,
	-1000, -1000, -1000, 3199, 3197, 3196, 3193, -1000, -1000, 57445,
	18193, 56992, 56539, 75028, 17730, 64675, 64222, 52480, -1000, -1000,
	-1000, 42937, 1224, -1000, -1000, -1000, -1000, -1000, 15, 53388,
	79087, -1000, 241, -1000, -1000, -1000, -1000, -1000, -1000, 33625,
	927, 33137, 910, 32649, 562, -1000, -1000, -1000, 3189, 3188,
	1017, 3183, 2784, 83557, 1624, 3182, 1667, 1178, 917, 3179,
	3178, 3177, 3176, 3172, 3171, 1328, 74575, 2577, 74122, 1613,
	52017, 63769, 65122, 2350, 73669, 1289, 1276, -1000, -1000, -1000,
	-1000, 2666, 2558, 2552, 45212, -1000, 3170, 3169, 3168, 3165,
	3162, 83110, 1590, 3161, 2218, 3160, 3159, 3158, 3157, 3156,
	3155, 3153, 3152, -1000, 63316, 62863, 62410, 2905, 73216, 61957,
	51554, -1000, -1000, -1000, 42003, 5933, 5250, 72763, 43404, 65122,
	65122, -1000, -1000, 34101, 136, -1000, -1000, -1000, 42937, 2545,
	-1000, 34101, 136, -1000, 79087, -1000, 2574, 1734, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2166, 1403,
	3078, 51091, 1855, 1235, 2848, 2661, 2649, 1317, 2266, 2648,
	2638, 2636, 2626, 2623, 1658, 2298, 680, 23473, 1466, 1379,
	2614, 2613, 3082, 1778, 1857, 56086, 3151, 3150, 2810, 2612,
	2587, 2544, -1000, -1000, -1000, -1000, 1270, -1000, -1000, 59245,
	-1000, -1000, 1385, -1000, -1000, 1385, -1000, -1000, -1000, -1000,
	-1000, 1217, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1594, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2134, -1000, 1823, -1000, -1000, 2162, 2831, 2831,
	2831, 2879, 444, 435, -1000, 200, -1000, -1000, 90012, -1000,
	-1000, 34101, 34101, 34101, 34101, 34101, 34101, 34101, 1873, -1000,
	684, -1000, -1000, 724, -1000, 681, 539, -1000, -1000, -1000,
	-1000, -1000, -1000, 678, -1000, -1000, -1000, -1000, -1000, -1000,
	3017, -1000, 20557, -1000, -1000, -1000, 385, 676, 34101, -1000,
	-1000, 3093, 3092, 835, -1000, 240, 848, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2573,
	666, 661, -1000, 658, 656, 655, 654, 652, -1000, -1000,
	-1000, 649, 645, 644, 639, 631, 630, 629, 627, -1000,
	1776, -1000, -1000, -1000, -1000, -1000, -1000, 591, 590, 590,
	590, -1000, 906, -1000, -1000, -1000, 352, 589, 321, 585,
	580, 577, 626, 625, 624, 622, 621, 620, 616, 615,
	614, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 903, -1000, -1000,
	-1000, -1000, 14, 79087, -1000, 460, 14, -1000, -1000, 610,
	-1000, 27305, 27305, 27305, -1000, -1000, 2015, 34101, -1000, 2571,
	-1000, 23, 23, 808, 41097, -1000, 39289, 808, 877, 727,
	44759, -1000, 2543, -1000, -1000, 609, 237, -1000, -1000, -1000,
	-1000, 2515, 79087, 18654, 79087, 65122, 65122, 65122, 2740, 34101,
	-1000, -1000, 50628, 79087, 65569, 2979, 84898, 50628, 79087, 2572,
	-1000, -1000, -1000, 79087, -1000, 34101, -1000, 2977, 1387, 53841,
	2897, 4, -1000, -1000, -1000, -1000, -1000, -1000, 2176, 2299,
	1075, 2049, 1635, -1000, 26829, 2776, -1000, -1000, -1000, 236,
	18654, -1000, -1000, -1000, -1000, -1000, 1859, 2714, 1279, -1000,
	2046, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1717, 2710, -1000, 1868, 2709, 1715, -1000, -1000, 1981, -1000,
	-1000, 2807, -1000, -1000, 1862, 2706, 24, -1000, -1000, 2009,
	-1000, -1000, 871, 2705, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 802, -1000, 52941, 42937, 53388, 10, -1000,
	-1000, -27, -1000, 17267, 90012, -1000, -1000, -1000, 90012, 815,
	-1000, -1000, 2704, -1000, 90012, 794, -1000, -1000, 2702, -1000,
	-1000, -1000, 3149, -1000, 3148, 2124, 3146, 3145, 3144, -1000,
	1585, 1760, 3143, -1000, 3142, -1000, -1000, -1000, -1000, -1000,
	-1000, 61504, 2010, -1000, -1000, 60598, -1000, 2121, -1000, -1000,
	61051, 915, -1000, 871, 2111, -1000, 887, -1000, 3141, 2899,
	2368, 871, 2102, -1000, -1000, -1000, -1000, -1000, 46106, -1000,
	46106, -1000, 46106, -1000, 1437, -1000, 82663, 23, 23, 3017,
	-1000, -1000, -1000, -1000, -1000, 2701, 3140, 3139, 3138, -1000,
	79087, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 187,
	2700, -1000, -1000, 187, 2697, -1000, 187, 2687, -1000, 67357,
	-1000, -1000, 1964, 2684, -1000, 178, 2681, -1000, -1000, -50,
	2680, -1000, -1000, -5, -1000, -1000, -1000, 924, -1000, 41550,
	-1000, 41550, 72310, 52941, 857, 646, 47455, 90012, -1000, -167,
	-1000, 42937, 90012, -1000, 52941, 60598, -1000, 71857, 60151, -1000,
	-1000, 1323, 2273, -1000, -1000, -1000, 857, 52941, 52941, 52941,
	-1000, 71404, -1000, -1000, 1839, 1546, 2811, 1829, 65122, -1000,
	1702, -1000, -1000, -1000, 2836, 2570, -1000, 50181, 66910, -1000,
	66463, -1000, 66016, -1000, 65122, -1000, 65122, -1000, 3136, 3133,
	3132, -1000, 3131, 2824, 90012, 2823, -1000, 2602, 1556, 1555,
	79087, -1000, -1000, 79087, -1000, 79087, -1000, -1000, -1000, -1000,
	-1000, 2175, -1000, -1000, -1000, -1000, 65122, -1000, -1000, -1000,
	-1000, -1000, -1000, 2567, -1000, 1529, -1000, 1636, -1000, 1319,
	-1000, -1000, 188, -1000, -1000, 4, -1000, 82216, -1000, 2162,
	-1000, 79087, -1000, 2193, 2559, 2566, 1477, 1963, 2259, -1000,
	32161, 2250, 36481, 2035, 200, -1000, -1000, 200, 200, 24913,
	-1000, -1000, 84898, 84898, 18654, 1265, 34101, 34101, 34101, 34101,
	34101, 34101, 34101, 34101, 34101, 34101, 34101, 34101, 34101, 34101,
	34101, 34101, 34101, 34101, 34101, 34101, 34101, 34101, 34101, 34101,
	34101, 34101, 34101, 34101, 34101, 34101, 34101, 34101, 34101, 34101,
	34101, 2037, 34101, 1215, 34101, 34101, 34101, 34101, 1509, -1000,
	-1000, 1721, 496, 1822, -1000, 3059, 3059, 3059, 1274, 1274,
	8188, 8188, 519, 3130, 724, -1000, 34101, -1000, 136, 34101,
	19117, -1000, -1000, 435, 10922, 2141, -1000, 434, 19605, -1000,
	-1000, -1000, 20557, 539, 31673, 34101, 894, 90012, -1000, -1000,
	1515, 3032, 16806, 2518, 2411, 606, 757, 722, 22985, 22497,
	22009, 21521, 662, 34101, 34101, 34101, 34101, 34101, 34101, 34101,
	34101, -1000, -1000, 3065, -1000, 3032, -1000, -1000, -1000, -1000,
	3032, 1218, 1182, 3032, -1000, 3032, 3032, 2508, 2508, 31197,
	30709, 30221, 36957, 29733, 34101, 21033, 29245, 28757, -1000, 79087,
	14, 2974, 34101, 174, -1000, 88827, -1000, 174, 174, 603,
	-13, 90012, 2238, 2238, 40646, 2108, 1886, 1886, 1886, -1000,
	808, 13092, 808, 70506, 1895, 808, 808, 234, 270, 417,
	38838, 2571, 70506, 705, 602, 40, 39, 38, -1000, -1000,
	34, 32, -1000, -1000, 65122, 601, 19117, 18654, 1373, -15,
	231, 2322, 2321, 2315, -1000, 2314, 1606, -24, 1212, -31,
	-1000, 3953, -30, -1000, 1152, 229, -1000, -1000, -1000, -1000,
	-1000, 3129, 3128, -1000, 902, 600, 597, 1214, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 591, 590, 590, 590,
	-1000, 352, 589, 321, 585, 580, 577, -1000, -1000, -1000,
	-1000, 2511, -27, 65569, 806, -41, 1021, 4, -1000, -1000,
	-1000, 53841, 1385, -1000, 1844, -1000, -1000, -1000, -1000, -1000,
	-1000, 1320, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 835,
	-1000, -1000, -1000, -1000, -1000, -1000, 3074, 3067, 13, -1000,
	-1000, 18654, -1000, 0, 1641, -1000, 55633, 2101, 2809, 2798,
	1413, -1000, 1389, 2878, 59245, 2910, 2960, 943, -1000, 2509,
	-1000, -1000, 840, 1522, 1209, 59245, 1868, -1000, 84898, -1000,
	2306, 2873, 934, 1206, 934, 934, 1211, -1000, 59245, 1208,
	-1000, 1202, -1000, -12, 2908, 2922, 79, -1000, 2505, 1192,
	-1000, -1000, 65122, 18654, 1359, 1331, 1553, 1189, 12, -1000,
	2906, 2904, -1000, 1453, -1000, 52941, 2376, -1000, -47, 802,
	10, 53388, 79087, 228, -1000, 34101, 136, 34101, 136, -1000,
	-1000, 2675, -1000, -1000, -1000, 3127, 1746, 2209, -1000, -1000,
	-1000, 572, 2097, 2502, 79087, 2329, 8, 65122, -1000, 2674,
	1868, 2094, -1000, -1000, 59698, -1000, 2672, 570, 3126, -1000,
	81769, -1000, 2815, 1296, 2670, 985, 703, 2969, -1000, 703,
	46553, -1000, 79087, -1000, -1000, 79087, -1000, -1000, -1000, 3124,
	-1000, 65122, -1000, -1000, 65122, -1000, 65122, -1000, 65122, 176,
	2669, -1000, -1000, 79087, -1000, 65122, 65122, 52941, 52941, 4320,
	54739, -49, -52, 414, -1000, 70957, 79087, 979, 55186, 79087,
	2766, 857, 42937, -167, 857, 857, 802, -1000, 802, -1000,
	65122, 2563, -1000, 857, 857, 857, -1000, -1000, -1000, -1000,
	3123, 3122, -1000, -1000, -1000, 870, 65122, 79087, 65122, -1000,
	-1000, 79087, -1000, 79087, -1000, 870, 79087, 870, 79087, 870,
	79087, -1000, -1000, -1000, -1000, -1000, -1000, 136, 34101, 1503,
	-1000, 2562, -1000, 2560, -1000, 58, -1000, -1000, -1000, -1000,
	1761, 65122, 65122, 65122, 65122, 79087, 65122, -1000, 59245, -1000,
	2193, 2559, -1000, -1000, -1000, -1000, -1000, -1000, 1482, 1946,
	-1000, 2268, -1000, 1397, -1000, -1000, -1000, 90012, 37433, -1000,
	-1000, 90012, 1631, -1000, 36005, 35529, -1000, -1000, 1536, 65122,
	2332, -1000, 2332, -210, -1000, 88469, 2265, 65122, -1000, -1000,
	-1000, -1000, -1000, 827, 1668, 1668, 1051, 1051, 1051, 1051,
	2954, 344, 455, 479, 9060, 9060, 5626, 5626, 5626, 5626,
	5626, 9060, 376, 1274, 1274, 376, 376, 376, 376, 376,
	1274, 1274, 1274, 9060, 9060, 9060, 8188, 90224, 9400, 34101,
	34101, 1180, 1694, 496, 8095, 34101, 9715, 9715, 9715, 9715,
	-1000, 1644, -1000, -1000, -1000, -1000, 2500, 568, 36957, 36957,
	-1000, -1000, -1000, -1000, 20081, 34101, -1000, -1000, -1000, -1000,
	28269, -1000, -1000, 88257, -263, 413, -191, -16, -1000, 34101,
	34101, 34101, 412, -1000, 227, 34101, 79087, -1000, 85702, 701,
	-207, -1000, -54, 1216, -1000, 34101, -1000, -1000, 1179, -1000,
	1160, 1158, 1155, -1000, 557, 410, -1000, 226, -1000, 1884,
	555, 554, 34101, -1000, -1000, -1000, -1000, -1000, 88104, -1000,
	-1000, 87958, -1000, -1000, 87746, -1000, -1000, 87593, -1000, -1000,
	-1000, 89859, 85395, 85352, 12560, 10012, 12414, 12058, -55, 409,
	-60, 406, 825, 814, 404, 402, 401, -62, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -63, 400, -1000, 2493,
	-191, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 399,
	-1000, 396, -1000, 89713, -191, 395, 6597, -1000, 36957, 36957,
	36957, -1000, 392, -1000, 88615, -1000, 89501, 27793, 27793, 27793,
	391, 89338, 34101, -191, -73, -1000, -75, -1000, -1000, 463,
	-80, 884, 27305, 39742, 18654, -1000, 884, 884, 34101, -1000,
	34101, 2294, -1000, -1000, -1000, 2285, 1616, 2238, 40646, -1000,
	-1000, -1000, -1000, 70506, -1000, 3017, 2375, -1000, 70506, -1000,
	-1000, 79087, 460, -1000, 70506, 70506, 18654, 808, -1000, 808,
	70506, 682, -1000, -1000, -1000, -1000, -1000, 388, 43855, -16,
	221, 857, -1000, 18654, 2328, 2328, 2328, 2328, -1000, -1000,
	79087, 2994, -1000, 1789, -1000, 84898, -1000, 712, 958, 18654,
	-1000, -1000, 552, -1000, 3032, 3032, -1000, 3032, 79087, 77,
	26829, -1000, 1385, -1000, -1000, 1398, -1000, 1758, -1000, 1170,
	-1000, -1000, -1000, -1000, 26829, -1000, 1843, 79087, 79087, 65122,
	-1000, -1000, 2091, 81322, 2087, 84898, 79087, -1000, -1000, 551,
	550, 2263, 2262, 976, 79087, 79087, 2253, 80875, 80428, 79087,
	1828, 34101, 1955, 1820, 136, 136, -1000, -1000, 136, 548,
	1131, 65122, 65122, 65122, 1678, -1000, -1000, -1000, -1000, -1000,
	58798, -1000, -1000, 3060, 3044, -1000, 934, -1000, -1000, -1000,
	934, 1868, 1672, 65122, 79087, 1815, 136, 136, -1000, -1000,
	136, 545, 18654, 1791, -1000, 2583, 79087, 3091, 65122, 79087,
	79087, 49734, 2826, 79981, 79087, 1453, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 49283, 996, 871, 857, 2485, -1000, 2376,
	-1000, -1000, 16345, 90012, -1000, 90012, -1000, 79087, -1000, 909,
	79087, 55186, 852, 2665, 45659, -27, 857, 52941, 65122, 8,
	79087, -1000, 1868, 2662, 460, 2086, -1000, -1000, 52941, 544,
	3121, 3120, -1000, 2002, 2085, -1000, -1000, 79534, 2645, 777,
	79087, 884, 40646, 1705, -1000, 44308, 947, 79087, 1656, 75,
	-1000, -1000, -1000, 47, 79087, -1000, 3119, -1000, -1000, 187,
	187, 187, -1000, 65122, 65122, 1964, -1000, 178, -1000, -50,
	-1000, -1000, 4320, 4320, 857, 7, 543, -1000, 796, 795,
	42470, 52941, -81, -1000, -1000, -1000, -1000, -1000, 65122, 79087,
	679, 2367, 79087, -82, -1000, 218, 540, -1000, -1000, 857,
	2484, -1000, -1000, 878, -1000, 1304, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 22, -27, -27, -1000, 870,
	-1000, 870, -1000, 870, -1000, 90012, -1000, 1475, 1469, 79087,
	-1000, 18654, 79087, 65122, 18654, 65122, 2556, 2555, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 999, -1000, 1631, 1939,
	-1000, 539, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2159, -1000, 6, 24913, 2039, -1000, -1000, 65122, 20,
	34101, 34101, 7643, 6789, 34101, 36957, 36957, -1000, 34101, 5451,
	-1000, -1000, -1000, -1000, -1000, 2481, 538, 34101, 84898, 5973,
	5532, -1000, 381, 11905, 376, -1000, 34101, -1000, 373, 26353,
	-1000, 88973, -57, -88, -1000, 13565, -191, -91, -1000, -1000,
	710, -1000, 2618, -1000, 34101, 89126, 2143, 1753, 1666, 1519,
	3032, 3090, 15884, -1000, 47004, 885, 1906, 87447, -1000, -1000,
	-1000, -1000, 84898, 84898, 34101, 34101, -1000, 34101, 34101, 34101,
	-1000, -1000, -1000, 3032, 804, -1000, -1000, -1000, 804, -1000,
	-1000, 3032, -1000, 3032, -1000, 34101, -1000, -1000, 2472, 34101,
	-1000, 84898, 84898, 36957, 36957, 36957, 36957, 36957, 36957, 36957,
	36957, 36957, 36957, 36957, 36957, 36957, 36957, 36957, 36957, 36957,
	36957, 36957, 2200, 36957, 3055, 3055, 3055, -1000, 2549, 2472,
	34101, 34101, 84898, 358, 357, 355, -1000, 34101, -191, -1000,
	-1000, 4320, 537, -1000, 2146, -1000, 2408, -1000, 34101, -1000,
	-215, -1000, 2571, -1000, -1000, 2408, 2408, -96, 90012, 40646,
	40646, -1000, 535, 34101, 2264, -1000, -1000, 700, -264, -1000,
	793, -1000, -1000, -1000, -1000, -1000, 460, -1000, -1000, -1000,
	209, 70506, 70506, 699, -1000, -97, -1000, -1000, -98, -1000,
	2967, 354, 18654, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -27, 1918, 3088, -1000, 3036, 709, 698, 208, 3032,
	353, 350, 349, -27, 79087, -1000, 4, -1000, -1000, -1000,
	34101, -1000, -1000, 2804, 1145, 1123, -1000, 2660, -1000, 2083,
	-1000, 959, -1000, 1554, -1000, 34101, 34101, 534, 532, 3117,
	1660, 3115, 978, 2659, 1964, 2652, 1964, -1000, -1000, 817,
	-1000, 90012, 529, 525, -1000, 0, 1550, 876, -1000, -1000,
	34101, 34101, 70059, -1000, 405, 2807, 19, -1000, 1069, -1000,
	-1000, -1000, -1000, 1868, 1065, -1000, -1000, -1000, 874, -1000,
	-1000, 34101, -1000, -12, 1062, 2965, 2077, 65122, 1060, -1000,
	1055, -1000, -1000, -1000, -1000, -1000, -1000, 2903, 1964, 2647,
	1171, -1000, -1000, -1000, 48822, -1000, -1000, 52941, 857, -1000,
	3114, 65122, 3113, 346, -99, -20, 84898, 2962, 2005, 527,
	65122, 810, -1000, 3017, -1000, -1000, -1000, -1000, 65122, 2948,
	2646, 871, 3087, -1000, -1000, 65122, 2640, 2001, 2073, 2203,
	777, 54292, -1000, 871, 1902, -87, -1000, 1656, 25865, 2801,
	-106, -1000, -1000, -1000, 884, 46553, 40646, 34101, 3111, -107,
	-1000, -1000, -1000, -1000, -1000, 176, -1000, -1000, -1000, -1000,
	-1000, 69612, 69612, 52941, 52941, 52941, 857, 79087, 79087, 55186,
	-1000, 524, 79087, 79087, 522, -1000, 79087, 79087, 3110, 52941,
	-1000, 136, -1000, 1914, 65122, 15423, -1000, -1000, -1000, -1000,
	-1000, 870, -1000, -1000, 1821, 2029, 1821, 1637, 1634, -1000,
	1930, -1000, -1000, -1000, -1000, 2281, 2821, 18654, 2902, 9715,
	34101, 34101, 4113, 3956, 981, 9715, 34101, 34101, 84898, 438,
	-113, 34101, 34101, -1000, 34101, 697, 90012, 3086, 34101, 345,
	340, -1000, -1000, -1000, 3019, -1000, -1000, -1000, 90012, 34101,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 331, -1000, 207,
	-1000, -1000, -1000, 84451, -1000, 34101, 329, 2872, -1000, 326,
	325, 11416, 272, 87235, 87082, 86936, 307, -1000, -1000, 305,
	303, 90012, 2549, 90012, -1000, -1000, 745, 745, 1210, 1210,
	1210, 1210, 3055, 723, 677, 1780, 322, 322, 322, 818,
	1167, 1167, 322, 322, 322, 2465, 2197, 520, 4563, -1000,
	-1000, 90012, 90012, 298, -1000, -1000, -1000, -191, 296, 4320,
	-1000, 2403, 2870, 90012, -1000, 40646, 2403, 2403, -1000, -1000,
	1616, 79087, 90012, 40646, -1000, 2375, -1000, 14036, -1000, 18654,
	-1000, -1000, -1000, -1000, 3017, -1000, 43855, -1000, 518, -1000,
	59, -1000, -1000, 696, 3109, 707, 18654, 294, -1000, -1000,
	-1000, -27, 90012, 79087, 79087, 79087, 2635, -1000, 4050, -1000,
	976, 86724, -116, -1000, 88469, 34101, 79087, -1000, -1000, 1693,
	2246, 1011, -1000, 2839, 79087, -1000, 79087, -1000, -1000, 79087,
	79087, 65122, 2599, -119, 90012, -33, -1000, 792, -1000, 1244,
	-1000, 14962, 65122, 65122, 2592, -121, 18654, -1000, 3085, 3084,
	2616, 2845, 3083, 79087, -1000, 79087, 65122, 2765, -1000, -1000,
	-50, -1000, -1000, 460, -1000, 2351, -1000, 68257, 1959, 136,
	-1000, 69161, 3108, 513, -1000, 1911, -1000, 695, 1868, 136,
	65122, -1000, 292, -72, -1000, 965, 18654, 65122, 2615, 2201,
	777, 54292, -1000, 1296, 2259, -1000, -74, -1000, 495, 136,
	1902, -1000, -87, 90012, -1000, 790, -1000, -1000, -122, -1000,
	-1000, 287, -1000, 2763, 2762, -1000, 2437, 34101, 512, 511,
	79087, 2760, -1000, -1000, -124, -1000, 2023, -1000, -1000, -1000,
	-1000, -1000, 18654, 1512, -1000, 507, 503, -1000, -1000, -1000,
	-1000, 2821, 9715, 9715, 34101, 34101, 34101, 9715, 438, -127,
	-1000, 9715, 9715, -191, -1000, -1000, 88973, -1000, -1000, -1000,
	90012, -1000, 14501, 1874, -1000, 86571, -1000, 24913, -1000, -1000,
	34101, 34101, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	36957, 2458, 502, 84898, -1000, -1000, 284, 881, 34101, 34101,
	2571, 881, 881, -1000, -129, -1000, -1000, -1000, 3017, 59,
	-1000, -1000, 3106, 18654, 704, -1000, 3105, -1000, -1000, -1000,
	-1000, -1000, 79087, -1000, 79087, -1000, 18654, 79087, 2440, 2064,
	-1000, -1000, 2251, 500, 36957, 65122, 771, -1000, 2429, 1739,
	34101, 2039, -130, -135, 2058, -1000, -1000, 2057, 34101, -1000,
	84898, 499, 1964, 1964, -138, -141, -1000, 34101, 1050, 79087,
	25389, -1000, 3103, 2807, -1000, -1000, 34101, 1030, -1000, -1000,
	-1000, 3072, 1964, 18654, -1000, 1964, 1964, 2845, 1010, 2941,
	1815, 2383, -1000, -1000, -1000, -1000, 2242, -1000, -1000, 79087,
	2223, 860, -143, -1000, 789, 783, -1000, 55186, 852, 849,
	-1000, -1000, -1000, 460, -1000, 3058, 498, 79087, 1999, 497,
	18654, -1000, 777, 54292, -1000, 2645, 1656, -1000, 2731, 79087,
	2789, -1000, 2259, 496, -1000, 857, 493, 492, 2444, 2444,
	-149, 34101, 34101, -151, 491, 857, -94, -1000, 756, 747,
	-1000, -1000, 65122, 65122, 34101, 34101, -1000, 9715, 9715, 9715,
	-1000, 283, -1000, -1000, 1902, 2869, -1000, -112, 86425, 86213,
	5047, 36957, 84898, -156, -1000, -1000, 79087, 90012, -191, -1000,
	-1000, -1000, 663, -1000, 3102, -1000, -1000, 1700, -1000, -1000,
	-1000, 79087, 2069, -1000, 975, 34101, 4563, 489, 34101, -1000,
	-1000, 2361, 2517, 2351, 486, -1000, -1000, -1000, -1000, -1000,
	963, 1743, -1000, -1000, 90012, 2845, 34101, -1000, -1000, 482,
	480, 90012, 477, 761, 2457, -1000, -1000, -1000, 90012, 465,
	2965, -1000, -1000, -1000, -1000, 1964, 65122, 136, 852, -1000,
	1841, 1959, 464, -1000, -1000, 1924, 2292, -1000, 69161, 38385,
	38385, 282, 2940, 849, -1000, 3013, -1000, 2923, -1000, 34101,
	-1000, 65122, 34101, 1998, 54292, -1000, 2203, -1000, 1166, -157,
	79087, 1656, -1000, -1000, 52941, 52941, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 963, -162, -164,
	-1000, 52941, -1000, 2023, -1000, 79087, -1000, 79087, -1000, -1000,
	-165, -170, -1000, 1923, 34101, 24913, -1000, -1000, 5047, -171,
	-1000, -144, -1000, 2916, -1000, -1000, -1000, -1000, 2611, 2401,
	86060, 2150, 79087, 85914, 2516, -1000, -1000, 1815, 79087, 2351,
	2396, 65122, 972, -172, 1821, 1821, 34101, 24437, 1824, 34101,
	-1000, -1000, 2845, -1000, 1924, 65122, 79087, -1000, 2832, -1000,
	2759, -1000, -1000, -1000, 2351, 136, -1000, -1000, 136, -179,
	965, -185, 65122, -1000, 2201, 1411, -1000, 884, -1000, -1000,
	-193, -194, 1739, 963, -1000, -195, -1000, -196, -216, -1000,
	-1000, 281, 35053, 35053, 35053, -191, -210, -1000, 79087, 461,
	2575, 869, -1000, 1958, 1806, 273, 953, -1000, -1000, 2429,
	-217, -1000, 862, 460, -1000, 34101, 963, -219, -1000, 938,
	-222, -1000, 929, -227, -1000, 2441, -1000, -228, 1964, -1000,
	458, -229, -1000, -1000, 1997, -1000, 1815, 860, -1000, 963,
	457, 1739, 456, -1000, 46553, -1000, 857, 857, 2351, 1739,
	857, -1000, -1000, -1000, 2650, -1000, 37909, 2003, 1619, 4482,
	2650, 2650, -1000, -1000, 79087, 2885, -1000, 1991, 1966, 1330,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2884, 2150,
	90012, 2351, -1000, 1821, 2381, -1000, 1821, 2426, -1000, 1802,
	-1000, -1000, 79087, -1000, 79087, 1599, 1566, 3100, 852, 1924,
	1739, 34101, 2351, 34101, -225, -1000, -1000, 1815, 2351, -1000,
	-1000, 1719, 2985, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 760, -1000, 2745, -1000, 987, 1919, 1919, 741, 1958,
	-1000, -1000, 454, -1000, 453, -1000, -230, -1000, -1000, 3099,
	-1000, 1924, -1000, 2351, -238, 1815, -239, -1000, -1000, 1815,
	1610, -1000, -1000, 1889, 34577, 34101, -1000, 2999, -1000, -1000,
	2181, -1000, 34101, 2429, 34101, 34101, 1961, -1000, -1000, 1815,
	963, 883, 1739, -1000, -1000, -1000, -1000, 90012, -1000, -1000,
	-1000, 90012, -1000, -241, -244, -1000, -1000, -1000, 883, 1739,
	-1000, 3098, 2351, 1815, 1029, -1000, 2351, -1000, 1815, -1000,
	452, 1815, 883, 34101, 883, -1000, -250, -1000, 1815, -1000,
}
var sqlPgo = [...]int{

	0, 3781, 3778, 3777, 3775, 3774, 3773, 3771, 3766, 3765,
	3764, 3763, 3761, 3759, 3758, 3756, 3755, 3754, 3753, 3748,
	3747, 3746, 3745, 3744, 3743, 3741, 3740, 3738, 3736, 3732,
	3731, 3730, 3729, 3728, 3725, 3723, 3721, 3718, 3716, 3715,
	3713, 3712, 3708, 3707, 3697, 3696, 3690, 3686, 34, 3685,
	3682, 3678, 3677, 3676, 3674, 3671, 3670, 3665, 3664, 3663,
	3661, 3656, 3655, 3653, 3650, 3645, 44, 3644, 221, 3642,
	3640, 3639, 3638, 3637, 3636, 3635, 3633, 3627, 3623, 219,
	3622, 100, 3621, 3619, 3613, 3611, 3610, 217, 3609, 3608,
	3607, 3603, 3597, 3594, 3593, 3592, 156, 199, 3589, 73,
	3582, 3581, 3578, 3574, 3572, 3569, 3567, 3566, 3564, 3563,
	200, 3562, 216, 3560, 3559, 3557, 3555, 3553, 3552, 3551,
	3550, 3549, 3548, 3546, 3544, 3543, 3541, 3540, 3539, 3536,
	3535, 3534, 3530, 3529, 3528, 3527, 3524, 3523, 3522, 3520,
	3514, 222, 164, 3513, 3512, 214, 213, 3510, 3506, 3505,
	3501, 123, 103, 98, 22, 3498, 95, 45, 3497, 9,
	181, 197, 7355, 195, 3496, 3495, 3494, 206, 147, 3491,
	191, 3490, 3489, 3485, 3484, 67, 62, 141, 139, 132,
	131, 96, 3477, 3470, 76, 54, 43, 32, 3469, 3468,
	3467, 2984, 94, 3466, 212, 204, 124, 3464, 3460, 3451,
	860, 3450, 37, 3448, 497, 74, 93, 21, 92, 3447,
	116, 26, 3443, 130, 38, 3442, 122, 68, 70, 6783,
	6925, 3440, 82, 49, 79, 268, 172, 170, 159, 128,
	169, 165, 136, 110, 3439, 229, 3437, 57, 127, 3436,
	3433, 3432, 58, 158, 80, 3431, 3430, 51, 10, 23,
	3, 150, 13, 91, 15, 3429, 14, 3424, 3403, 3401,
	3400, 27, 135, 3395, 225, 3394, 48, 36, 19, 3392,
	71, 175, 3390, 189, 102, 3389, 3387, 207, 162, 152,
	3386, 42, 184, 3384, 3382, 3380, 3378, 3377, 119, 30,
	101, 3375, 3374, 109, 198, 153, 3373, 40, 3369, 140,
	69, 105, 220, 97, 185, 78, 177, 142, 188, 3368,
	3367, 3366, 155, 3364, 3363, 176, 118, 3361, 3360, 161,
	227, 33, 55, 193, 56, 151, 134, 3359, 166, 3356,
	3355, 3354, 223, 149, 171, 12, 8, 75, 99, 31,
	7, 190, 120, 243, 90, 3353, 3672, 1366, 721, 46,
	3352, 113, 86, 53, 89, 117, 211, 52, 3351, 3350,
	1248, 3348, 3347, 3346, 3343, 145, 3342, 3340, 3339, 107,
	111, 154, 3336, 77, 64, 11, 88, 278, 226, 81,
	182, 163, 240, 3335, 146, 3334, 41, 121, 3333, 157,
	202, 3331, 3326, 144, 3325, 106, 645, 47, 114, 3322,
	179, 3320, 3316, 3315, 3314, 3309, 3307, 3306, 310, 187,
	3305, 3304, 3302, 210, 148, 3297, 209, 215, 133, 63,
	35, 3296, 83, 2498, 3291, 72, 186, 39, 3284, 3757,
	115, 0, 9513, 8354, 5513, 8413, 3282, 4397, 3281, 3280,
	3279, 173, 104, 3278, 3276, 3275, 87, 3274, 59, 3272,
	3270, 50, 3269, 16, 1, 5, 20, 17, 256, 137,
	3268, 3267, 84, 112, 125, 3265, 218, 183, 3263, 3260,
	3259, 3256, 66, 3255, 28, 3253, 25, 3252, 3250, 29,
	2, 18, 3249, 3248, 196, 3247, 194, 3245, 3244, 2946,
	108, 3240, 3239, 208, 60, 3238, 203, 3236, 2909, 138,
	168, 3235, 3234, 3233, 129, 3230, 3226, 3223, 201, 3220,
	3219, 24, 3218, 4, 3214, 3213, 167, 6, 2770, 3212,
	3210, 61, 3209, 143,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 11, 11, 7,
	7, 8, 8, 8, 36, 36, 9, 9, 9, 10,
	10, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	15, 15, 26, 26, 16, 16, 28, 28, 17, 17,
	29, 29, 493, 493, 20, 31, 21, 32, 14, 494,
	494, 494, 494, 25, 22, 33, 23, 23, 23, 23,
	23, 155, 155, 155, 155, 19, 19, 27, 27, 178,
	178, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 492, 492, 180, 180, 179, 174, 174,
	495, 495, 181, 181, 181, 183, 183, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 397, 397, 397, 502,
	502, 502, 503, 503, 504, 504, 504, 504, 504, 37,
	37, 37, 95, 95, 95, 96, 96, 97, 97, 156,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 83,
	83, 429, 429, 430, 430, 151, 151, 152, 152, 152,
	152, 153, 153, 154, 154, 154, 51, 39, 39, 39,
	39, 39, 39, 39, 40, 40, 40, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 42, 42, 42,
	49, 49, 49, 49, 142, 142, 52, 52, 52, 52,
	52, 52, 52, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 506, 506, 507, 507, 508, 508, 509,
	509, 509, 509, 509, 509, 509, 509, 509, 509, 509,
	509, 509, 509, 509, 509, 509, 509, 509, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 63, 63, 263, 263,
	236, 236, 64, 64, 64, 65, 65, 66, 66, 53,
	53, 486, 486, 278, 278, 388, 388, 68, 68, 298,
	298, 69, 69, 69, 69, 69, 69, 70, 70, 70,
	70, 70, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 77, 77, 77, 78, 78, 78,
	75, 75, 75, 73, 73, 73, 72, 72, 72, 76,
	76, 76, 228, 228, 74, 74, 74, 279, 279, 79,
	79, 79, 79, 79, 79, 79, 79, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 390, 390, 80, 80, 80, 358, 358, 84,
	84, 84, 313, 313, 85, 85, 85, 85, 85, 86,
	86, 86, 86, 98, 98, 98, 98, 489, 489, 271,
	271, 194, 194, 194, 194, 91, 91, 91, 91, 92,
	92, 92, 93, 93, 147, 147, 104, 104, 104, 104,
	104, 103, 103, 103, 103, 103, 103, 43, 43, 43,
	44, 44, 45, 45, 46, 46, 47, 47, 48, 48,
	48, 48, 48, 106, 106, 499, 499, 108, 105, 105,
	105, 107, 107, 107, 107, 109, 110, 110, 110, 110,
	110, 110, 110, 110, 111, 111, 422, 422, 287, 287,
	420, 420, 438, 438, 421, 421, 240, 240, 240, 240,
	240, 241, 241, 241, 428, 428, 428, 428, 428, 428,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 148, 148, 149, 150, 150, 150,
	150, 131, 131, 131, 141, 141, 141, 141, 141, 141,
	141, 134, 134, 134, 121, 121, 113, 113, 113, 113,
	113, 117, 117, 117, 117, 117, 117, 117, 117, 114,
	114, 123, 123, 123, 123, 123, 118, 118, 120, 120,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 115,
	115, 115, 115, 125, 125, 125, 125, 320, 320, 320,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	137, 137, 137, 137, 137, 137, 372, 372, 132, 132,
	132, 132, 136, 136, 136, 136, 303, 303, 129, 129,
	129, 130, 130, 130, 135, 135, 133, 133, 138, 138,
	138, 138, 116, 116, 116, 510, 510, 510, 139, 139,
	128, 128, 140, 140, 140, 140, 140, 140, 140, 140,
	127, 127, 127, 126, 126, 126, 126, 119, 487, 487,
	484, 484, 484, 484, 484, 484, 484, 485, 485, 488,
	488, 89, 89, 89, 58, 58, 58, 59, 59, 159,
	159, 159, 159, 248, 248, 248, 248, 157, 157, 158,
	158, 60, 60, 511, 511, 511, 496, 496, 496, 497,
	497, 497, 497, 497, 497, 242, 242, 243, 243, 338,
	338, 338, 338, 338, 246, 246, 246, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 249, 249, 182, 182,
	182, 252, 253, 253, 250, 250, 251, 251, 251, 255,
	255, 254, 257, 257, 256, 337, 447, 447, 449, 449,
	449, 449, 449, 449, 449, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 512, 445, 445, 445,
	446, 441, 441, 442, 442, 442, 442, 442, 244, 244,
	245, 245, 245, 245, 443, 444, 269, 269, 375, 448,
	448, 450, 450, 452, 513, 513, 513, 513, 513, 513,
	514, 514, 514, 336, 336, 335, 335, 261, 261, 453,
	453, 453, 453, 454, 454, 454, 454, 454, 457, 456,
	455, 455, 455, 455, 455, 62, 62, 62, 300, 300,
	299, 299, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 144, 144, 197,
	197, 57, 57, 57, 12, 12, 12, 498, 498, 498,
	61, 61, 61, 61, 196, 196, 196, 196, 196, 196,
	491, 491, 490, 490, 198, 198, 516, 516, 67, 67,
	67, 67, 67, 67, 67, 391, 391, 392, 392, 56,
	56, 56, 56, 56, 517, 517, 321, 321, 319, 319,
	318, 318, 268, 268, 374, 202, 202, 175, 175, 175,
	24, 18, 18, 34, 34, 35, 35, 30, 30, 500,
	500, 501, 501, 90, 90, 94, 94, 94, 102, 102,
	143, 143, 143, 143, 143, 143, 143, 38, 38, 38,
	38, 50, 50, 50, 50, 100, 519, 519, 519, 101,
	101, 101, 518, 518, 195, 195, 332, 332, 333, 333,
	520, 520, 334, 334, 334, 334, 189, 188, 190, 190,
	55, 55, 55, 184, 184, 185, 185, 186, 186, 187,
	187, 521, 521, 87, 87, 87, 146, 146, 235, 235,
	235, 328, 328, 328, 262, 262, 208, 208, 331, 331,
	329, 329, 329, 329, 297, 297, 297, 145, 145, 276,
	276, 289, 289, 290, 290, 385, 385, 291, 99, 99,
	162, 162, 160, 160, 160, 160, 160, 160, 160, 160,
	167, 167, 168, 168, 169, 169, 170, 171, 171, 171,
	171, 280, 280, 172, 172, 172, 161, 161, 161, 163,
	163, 163, 163, 163, 163, 163, 166, 166, 166, 166,
	173, 173, 173, 165, 165, 464, 464, 464, 466, 466,
	468, 468, 467, 467, 463, 463, 465, 465, 515, 515,
	302, 302, 302, 259, 260, 258, 258, 266, 266, 264,
	265, 265, 267, 267, 373, 373, 373, 176, 176, 176,
	294, 294, 294, 294, 295, 295, 324, 324, 322, 322,
	322, 322, 323, 323, 325, 325, 325, 326, 326, 327,
	327, 293, 293, 354, 354, 164, 164, 164, 273, 273,
	273, 274, 274, 344, 344, 344, 344, 344, 344, 345,
	345, 343, 343, 343, 343, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 377, 378, 378, 275, 275, 379,
	330, 330, 482, 482, 482, 483, 483, 371, 371, 380,
	380, 380, 380, 380, 380, 369, 369, 370, 370, 386,
	387, 387, 306, 306, 306, 306, 304, 304, 307, 307,
	307, 307, 305, 305, 381, 381, 381, 381, 296, 296,
	382, 382, 382, 382, 383, 339, 340, 340, 393, 393,
	393, 393, 395, 272, 272, 272, 272, 272, 440, 439,
	439, 394, 394, 394, 394, 394, 394, 394, 394, 409,
	409, 409, 409, 409, 409, 409, 409, 410, 410, 410,
	410, 410, 410, 396, 396, 396, 396, 396, 400, 400,
	400, 399, 399, 399, 399, 399, 399, 399, 399, 399,
	399, 399, 401, 401, 406, 406, 407, 407, 407, 402,
	403, 408, 408, 408, 408, 522, 522, 412, 412, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 398, 398,
	398, 405, 405, 405, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 314, 314, 316,
	316, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 348, 348,
	348, 348, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 349, 349, 349,
	349, 349, 349, 349, 349, 349, 349, 458, 458, 458,
	458, 458, 458, 458, 458, 350, 350, 461, 461, 462,
	462, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	469, 469, 470, 470, 472, 472, 473, 473, 474, 475,
	475, 475, 476, 477, 477, 471, 471, 478, 478, 478,
	478, 479, 479, 480, 480, 480, 480, 480, 481, 481,
	481, 481, 481, 360, 360, 361, 361, 367, 367, 367,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 199, 199, 199, 199,
	199, 285, 285, 283, 283, 283, 286, 286, 284, 284,
	282, 282, 281, 281, 357, 357, 355, 355, 359, 359,
	308, 308, 411, 411, 411, 411, 411, 411, 411, 411,
	309, 309, 309, 317, 310, 310, 311, 311, 311, 311,
	311, 351, 352, 312, 312, 312, 353, 353, 362, 366,
	366, 365, 364, 364, 363, 363, 341, 341, 342, 342,
	292, 292, 523, 523, 288, 288, 384, 384, 384, 384,
	238, 238, 277, 277, 237, 237, 230, 230, 231, 231,
	231, 231, 270, 270, 368, 368, 413, 413, 414, 414,
	415, 415, 416, 416, 417, 418, 419, 356, 356, 218,
	217, 205, 206, 216, 215, 214, 204, 207, 211, 212,
	213, 209, 210, 224, 223, 222, 229, 220, 221, 389,
	203, 232, 232, 233, 233, 233, 234, 234, 234, 234,
	200, 200, 201, 201, 225, 225, 226, 227, 227, 219,
	219, 219, 191, 191, 191, 192, 192, 193, 193, 427,
	427, 424, 424, 424, 425, 425, 425, 426, 426, 426,
	426, 423, 423, 423, 423, 423, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 431, 431, 431, 431, 431,
	431, 431, 431, 431, 431, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 435, 435, 435, 435,
	435, 435, 435, 435, 435, 435, 432, 432, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 433, 434, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 436, 436, 436, 436,
	436, 436, 436, 436, 436, 436, 437, 437,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 1, 3, 4, 6, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 9, 6, 9, 6, 5,
	6, 5, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 4, 7, 7, 9, 8,
	9, 5, 3, 5, 7, 4, 12, 4, 12, 1,
	3, 5, 5, 2, 5, 3, 6, 4, 6, 5,
	6, 6, 4, 8, 3, 4, 10, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 10, 8,
	6, 6, 6, 9, 4, 3, 2, 2, 0, 1,
	1, 1, 1, 3, 6, 4, 6, 7, 9, 6,
	7, 2, 5, 6, 2, 1, 3, 1, 3, 1,
	6, 4, 9, 7, 12, 12, 12, 9, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 6, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 6, 6, 1, 1, 1, 2, 1, 1,
	2, 1, 2, 3, 3, 4, 3, 4, 7, 4,
	4, 4, 3, 5, 7, 4, 3, 3, 4, 3,
	3, 3, 3, 2, 0, 1, 0, 1, 0, 3,
	3, 3, 3, 3, 6, 4, 4, 4, 3, 5,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	1, 2, 1, 2, 1, 2, 7, 3, 2, 0,
	1, 3, 3, 1, 0, 1, 2, 2, 1, 6,
	5, 1, 2, 1, 3, 2, 0, 9, 3, 2,
	0, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 5, 7, 3, 4, 6, 3, 4,
	6, 3, 1, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 3, 3, 6, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 2,
	1, 2, 1, 3, 5, 7, 2, 3, 0, 3,
	5, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	4, 7, 2, 6, 4, 7, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	3, 2, 4, 3, 2, 2, 1, 2, 1, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 1, 3,
	5, 4, 6, 4, 3, 0, 1, 3, 2, 4,
	2, 4, 1, 6, 3, 1, 1, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 1, 3, 2, 3,
	3, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 2, 1, 3, 3, 3,
	3, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 4, 5, 5, 5,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 5,
	3, 5, 5, 5, 7, 3, 3, 3, 4, 3,
	5, 3, 6, 5, 6, 3, 5, 6, 3, 4,
	3, 4, 3, 3, 4, 4, 5, 0, 1, 1,
	3, 2, 4, 3, 3, 5, 4, 3, 5, 3,
	5, 4, 6, 4, 6, 4, 1, 0, 3, 4,
	4, 5, 7, 5, 3, 3, 2, 0, 4, 2,
	3, 4, 2, 3, 3, 3, 3, 3, 4, 3,
	3, 3, 3, 4, 3, 1, 1, 1, 2, 3,
	2, 3, 6, 6, 7, 9, 7, 9, 3, 4,
	10, 10, 3, 5, 5, 5, 3, 5, 2, 0,
	1, 1, 1, 1, 3, 2, 2, 2, 1, 2,
	0, 3, 3, 2, 3, 6, 3, 11, 14, 0,
	2, 4, 3, 0, 4, 5, 4, 3, 3, 1,
	3, 10, 13, 0, 2, 3, 1, 1, 0, 1,
	2, 2, 2, 2, 1, 1, 0, 1, 3, 1,
	1, 1, 1, 3, 3, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 3, 1,
	3, 7, 1, 3, 11, 3, 2, 0, 3, 1,
	2, 2, 3, 2, 6, 2, 1, 1, 2, 8,
	4, 2, 5, 5, 5, 2, 1, 9, 10, 6,
	5, 3, 1, 5, 8, 7, 11, 3, 3, 0,
	2, 4, 3, 3, 1, 5, 1, 3, 1, 2,
	0, 1, 2, 2, 0, 1, 3, 3, 2, 2,
	1, 1, 1, 4, 0, 6, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 5, 8, 4, 1, 0,
	1, 2, 2, 1, 2, 3, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 1, 4, 2, 2,
	2, 4, 7, 3, 4, 6, 3, 1, 1, 1,
	8, 10, 11, 5, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 3, 0, 1, 8, 3,
	6, 6, 5, 3, 4, 1, 0, 1, 3, 16,
	19, 15, 18, 4, 0, 2, 2, 0, 1, 0,
	1, 0, 1, 3, 3, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 0, 2,
	4, 2, 1, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	3, 4, 3, 0, 2, 2, 0, 10, 3, 2,
	0, 1, 3, 1, 1, 3, 3, 5, 1, 1,
	3, 3, 1, 2, 4, 4, 2, 3, 5, 5,
	1, 3, 1, 0, 1, 2, 3, 2, 4, 2,
	3, 0, 2, 0, 2, 1, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	1, 2, 6, 7, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 5, 1, 0, 1, 0, 3,
	3, 5, 1, 3, 3, 4, 5, 2, 2, 0,
	2, 2, 1, 1, 1, 0, 1, 0, 2, 2,
	5, 4, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 2, 0, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 1, 1, 1,
	3, 2, 4, 4, 0, 4, 4, 3, 4, 1,
	5, 3, 4, 5, 5, 1, 5, 1, 3, 2,
	0, 3, 0, 2, 3, 1, 3, 2, 0, 3,
	5, 6, 4, 6, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 1, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 2, 2, 1, 0, 2, 5,
	7, 2, 1, 2, 4, 3, 5, 0, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 6, 6, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 3, 0, 5, 4, 1, 2, 1, 4,
	1, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	2, 5, 1, 4, 2, 5, 1, 4, 3, 3,
	0, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 1, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 1, 1,
	1, 1, 1, 1, 2, 1, 5, 5, 6, 3,
	1, 1, 1, 2, 2, 2, 4, 3, 5, 6,
	8, 6, 5, 4, 3, 2, 2, 4, 1, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 8, 6, 4, 6,
	6, 6, 4, 1, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 3, 4, 3, 3, 4, 3,
	3, 3, 4, 3, 4, 3, 4, 3, 4, 4,
	3, 6, 5, 5, 5, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 3, 3, 3,
	0, 1, 4, 2, 2, 2, 2, 2, 3, 2,
	2, 3, 0, 4, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 1, 2, 3, 2, 3, 2, 3,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 1, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 3, 1, 1, 1, 1, 5,
	3, 1, 1, 3, 1, 1, 1, 1, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 7, 1, 7, 5, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 490, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -143, -148, -149, -150,
	-3, -37, -39, -52, -68, -70, -79, -88, -87, -89,
	-91, -95, -94, -83, -43, -99, -103, -112, -144, -145,
	-146, 90, 74, 135, 114, 120, 172, 316, 348, 358,
	342, -107, -108, 373, -38, -50, -101, -100, 67, 115,
	337, -4, -12, 28, 44, -40, -41, -42, 57, -57,
	-54, -63, -505, 92, -465, -71, -74, -509, 125, 141,
	190, 306, -92, -93, 344, 346, 142, -45, -44, 136,
	-160, -162, -105, -106, -147, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, -133, -129, -130, -131, -132, -134, -135, -136, -137,
	-138, -139, -140, 377, 426, 46, 387, 76, 128, 352,
	21, -5, -6, -7, -8, -9, -10, -11, -13, -53,
	-55, -56, -58, -59, -60, -67, -61, -62, -464, -72,
	-73, -75, -77, -78, -76, 343, -163, -161, 487, 440,
	-15, -20, -21, -16, -17, -19, -22, -18, -26, -31,
	-32, -28, -29, -27, -30, -33, -34, -35, -36, -24,
	-25, -14, -23, 458, 466, -166, -164, -165, -173, 365,
	448, 403, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, -220, -225, -226, -227, -219, -191, -434, -437,
	4, -431, -435, 147, 199, 271, 21, 22, 23, 24,
	25, 26, 28, 29, 40, 41, 43, 42, 44, 45,
	46, 51, 54, 55, 56, 57, 58, 62, 67, 68,
	73, 74, 75, 76, 77, 78, 79, 85, 82, 83,
	84, 87, 89, 90, 91, 93, 95, 96, 104, 105,
	106, 107, 109, 114, 115, 118, 113, 117, 120, 123,
	124, 125, 127, 129, 130, 132, 133, 135, 136, 139,
	137, 409, 138, 140, 141, 142, 143, 153, 154, 155,
	160, 162, 166, 167, 170, 171, 173, 177, 179, 180,
	181, 182, 183, 189, 190, 192, 193, 194, 195, 200,
	201, 205, 202, 211, 215, 216, 217, 219, 223, 224,
	225, 226, 227, 230, 229, 232, 235, 236, 239, 240,
	241, 244, 245, 246, 247, 249, 250, 253, 251, 254,
	252, 256, 257, 258, 255, 261, 259, 263, 264, 269,
	267, 265, 266, 273, 276, 187, 278, 279, 282, 300,
	286, 287, 288, 291, 292, 295, 298, 299, 301, 302,
	303, 304, 305, 306, 307, 309, 310, 314, 316, 317,
	319, 321, 322, 323, 324, 325, 326, 327, 329, 330,
	337, 342, 339, 340, 341, 343, 344, 345, 346, 348,
	350, 351, 352, 353, 355, 357, 374, 375, 389, 358,
	359, 360, 361, 362, 363, 364, 368, 366, 367, 369,
	370, 371, 373, 376, 377, 379, 380, 383, 385, 386,
	387, 388, 390, 393, 394, 395, 396, 391, 402, 399,
	400, 404, 405, 406, 407, 408, 410, 412, 420, 421,
	423, 426, 427, 428, 418, 430, 431, 434, 435, 436,
	439, 437, 438, 440, 442, 445, 446, 447, 453, 452,
	459, 460, 462, 463, 464, 35, 47, 48, 50, 52,
	63, 64, 65, 69, 110, 111, 134, 144, 145, 156,
	168, 169, 174, 176, 184, 185, 186, 206, 207, 209,
	213, 233, 275, 277, 293, 297, 311, 312, 313, 315,
	328, 354, 381, 392, 397, 413, 414, 415, 416, 422,
	424, 448, 449, 450, 454, 461, 284, -213, 2, -191,
	-191, 316, 27, 2, 27, 310, 367, 405, 407, 2,
	-489, -271, 2, 27, -194, -191, 92, 172, 365, -213,
	2, -489, -271, 24, 2, -191, 2, -195, 2, 358,
	-191, 490, 87, 241, 68, 354, 370, -110, 421, -109,
	413, 360, -111, -422, 2, 261, -191, 490, 490, 490,
	27, -203, -191, 403, 199, 106, 400, 490, 2, 403,
	303, 452, 366, 106, 325, 199, 428, -498, 350, 175,
	441, 417, -484, 2, 4, -435, -431, -231, -230, 403,
	106, -227, -219, 480, -226, 490, 490, 490, 2, 216,
	217, 324, 323, 370, 371, 490, 490, 2, 26, 60,
	86, 89, 112, 143, 163, 166, 289, -506, 250, 300,
	322, 369, 402, 410, 423, -497, 388, 62, 360, -496,
	-498, 428, 123, -318, 106, 241, 171, 435, 407, 405,
	433, 118, 205, 438, 437, 490, 26, 60, 71, 89,
	123, 143, 163, 166, -508, 300, 322, 357, 360, 369,
	402, 410, 423, 2, 452, 366, 403, 199, 106, 428,
	-498, 320, -81, 2, 487, 31, 30, 373, -156, 403,
	210, 2, -191, 216, 217, 2, 490, 490, 164, -484,
	2, 216, 217, 2, 210, 2, 62, 362, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 2, -141, 370, 388,
	181, 44, 68, 27, 321, 73, 304, 107, 173, 199,
	200, 224, 86, 87, -320, 43, 217, 216, -372, 404,
	361, 367, 399, 358, 421, 92, 442, 351, 464, 325,
	326, 137, 4, 106, 261, 372, 413, 241, 78, -515,
	2, 403, -518, 2, 421, 421, 2, -518, 2, -518,
	2, -518, 2, -519, 421, 461, 490, 490, 490, 490,
	490, 490, 490, 490, 490, 490, 490, 490, 490, 490,
	490, 490, -161, -163, -162, 490, 490, 490, 490, 490,
	490, -141, 370, 2, 68, 27, -264, -266, 432, 208,
	131, 290, -160, -162, 2, -464, -420, 2, -346, -438,
	-348, 478, 479, 471, 401, 61, 270, 465, -360, 112,
	433, 284, -437, -349, -362, 134, 354, -286, 8, 9,
	5, 6, 7, -200, -350, -356, 425, 146, 274, -234,
	491, 10, 487, -461, -162, -361, 36, 176, 59, -424,
	-233, -201, -396, 209, -232, -219, -458, -459, 4, -431,
	-432, -425, -399, -407, -403, -404, -410, -191, -434, 71,
	98, 99, 97, 102, 101, 243, 242, 103, 100, 372,
	441, 60, 35, 184, 185, 213, 275, 186, 69, -460,
	124, -433, 206, 207, 381, 48, 328, 156, 111, 110,
	277, 52, 50, 449, -408, 108, 413, 414, 415, 416,
	168, 169, 144, 145, 297, 313, 397, 422, 424, 174,
	233, 94, 165, 204, 188, 212, 214, 218, 234, 237,
	262, 268, 272, 294, 296, 349, 378, -522, 450, 392,
	63, 64, -466, 329, -467, -213, -466, 490, 490, 492,
	490, -258, -259, -260, 2, 27, 121, 487, 2, -376,
	2, -377, -381, -162, 228, -380, 487, -378, 485, -220,
	285, -462, 355, -458, -459, -200, -219, -233, 4, -431,
	-433, -261, 487, 489, 106, 403, 72, 199, -313, 487,
	-191, 27, 284, 417, 492, -358, 487, 284, 164, 287,
	-191, 2, 2, 374, 2, 487, -110, 65, 421, 42,
	370, -333, 2, -334, -188, -189, -190, -386, 215, 319,
	327, 467, 464, -420, -499, 164, 470, 417, -420, -287,
	489, 2, 2, 2, 2, 2, -381, 184, -220, 2,
	-217, -423, 4, -431, -435, -432, -436, -434, 27, 30,
	31, 32, 34, 36, 37, 38, 39, 53, 59, 60,
	66, 70, 72, 81, 86, 92, 97, 98, 100, 99,
	101, 102, 103, 112, 116, 119, 121, 122, 126, 128,
	131, 146, 148, 161, 163, 164, 172, 175, 178, 191,
	203, 208, 210, 228, 231, 238, 242, 243, 270, 274,
	280, 284, 285, 289, 290, 308, 318, 331, 347, 365,
	372, 384, 398, 403, 411, 417, 419, 425, 432, 433,
	441, 443, 451, 455, 456, 457, 458, -437, 71, 2,
	-381, 184, 2, -222, 184, -381, -225, 2, -204, -191,
	2, -216, -423, 2, -237, 184, -220, -221, -225, -223,
	2, -225, -429, 184, 2, -427, 10, -426, 5, 4,
	-431, -435, -432, -96, -429, 487, 417, 492, -277, -230,
	-231, -270, -191, 489, -346, 2, -99, 2, -346, 184,
	2, -99, 184, 2, -346, 184, 2, -99, 184, 2,
	2, 2, 423, 2, 89, 184, -191, 403, 105, 2,
	341, -507, 357, 427, 452, 2, 2, 2, 2, 2,
	2, 403, -209, 2, -191, 161, -229, 184, 2, -191,
	366, -516, 329, -429, 184, 2, -223, 2, -223, 199,
	211, -204, 184, 2, 407, 405, 407, 405, 164, 2,
	210, 2, 210, 2, -382, 2, -383, -377, -220, 485,
	2, 2, 2, 2, 2, 184, -191, 403, 105, 2,
	226, 2, 2, 2, 2, 2, 2, 2, 2, -279,
	184, 2, -220, -279, 184, 2, -279, 184, 2, -319,
	2, 81, -204, 184, 2, -228, 184, 2, -223, -430,
	184, 2, -429, -390, 2, -389, -426, 448, -81, 487,
	-81, 487, 370, 487, -429, -220, -220, -346, -99, -97,
	-96, 164, -346, -99, -156, 161, 2, 106, 403, -141,
	2, 161, 443, 2, 8, 2, -429, 361, 326, 153,
	2, 374, 2, 375, 68, -320, 464, 68, 164, 2,
	164, 2, -303, 2, 458, -487, 2, 284, 164, 2,
	164, 2, 164, 2, 164, 2, 164, 2, 323, 371,
	217, 2, -99, 455, -346, 455, 2, 420, 225, 138,
	164, -303, 2, 164, 2, 164, 2, 5, 2, 389,
	2, 215, 319, 389, 2, -220, -510, 2, 403, 452,
	366, 2, 2, 82, 83, 164, 2, 164, 2, 164,
	464, 2, -296, -381, -332, -333, -332, 417, -264, -266,
	-141, 374, 2, -167, -294, -169, 161, -322, -323, -170,
	238, 148, 280, -171, -302, 27, 121, -302, -302, 55,
	488, 488, 11, 12, 70, 40, 478, 479, 480, 481,
	159, 482, 483, 476, 477, 475, 468, 469, 473, 221,
	222, 88, 472, 470, 80, 248, 356, 149, 150, 151,
	152, 338, 197, 33, 198, 14, 15, 16, 32, 289,
	237, 465, 188, 378, 471, 17, 18, 19, 212, 214,
	272, 47, 191, -199, -239, -346, -346, -346, -346, -346,
	-346, -346, 296, 487, -292, -341, 485, -162, 487, 487,
	487, -419, 8, -162, -346, -360, 488, -284, 487, -162,
	-360, -355, 487, 354, 485, 487, -363, -346, 5, 5,
	5, 487, 489, -469, 459, 161, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
	487, 315, -401, 487, -400, 487, -400, -400, 453, -398,
	487, 466, 460, 487, -398, 487, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 453, 492,
	-466, -261, 487, -288, -384, -346, 480, -288, -288, 284,
	-281, -346, 94, -306, 218, 262, 165, 234, 349, 204,
	-343, 491, -343, -371, 466, -162, -378, -219, -162, -380,
	487, -376, -371, -82, -419, -68, -79, -87, -99, -112,
	-145, -146, 480, -220, 487, 164, 487, 489, 164, -270,
	-423, -204, -220, -232, -233, -237, 120, -281, -484, -270,
	-194, 37, -357, -393, -394, -440, -439, -396, -406, -402,
	-405, 311, 312, -425, 50, 449, -408, 209, 4, -431,
	-433, 206, 207, 381, 48, 328, 156, 111, 110, 277,
	52, 413, 414, 415, 416, 168, 169, 450, 392, 63,
	64, -484, -270, 161, -422, -281, 37, -333, 2, 112,
	-427, 42, -520, 492, 236, -241, 247, 269, 180, 285,
	462, 278, -428, 5, 4, -356, -368, 112, 241, 209,
	-413, -415, 8, -414, 9, -416, 478, 479, -421, -420,
	96, 489, -423, -178, 339, -177, 23, 28, 125, 446,
	139, -251, 201, 303, 134, 385, 436, -493, -494, 359,
	408, 409, 84, 278, 339, 134, -299, -301, 37, 104,
	264, 298, 56, 194, 252, 253, 387, 454, 134, 339,
	-494, 339, -494, -180, 385, 436, -493, -494, 359, 339,
	-179, -251, 134, 491, 23, 339, 373, 299, -503, -504,
	125, 28, -490, -463, 458, 134, -387, -386, -430, -96,
	-277, 492, 492, -423, 480, 134, 134, 134, 134, 2,
	2, 270, 2, 2, 2, 166, -496, -508, 2, 2,
	2, -220, 184, -263, 284, -486, -278, 403, -220, 270,
	-222, 184, 2, -225, 452, -490, 270, 37, 487, 2,
	-319, 2, 199, -463, 270, -382, -235, -220, -377, -235,
	373, -213, 37, -343, -343, 134, 2, 2, 2, -191,
	-181, 492, 58, 345, 134, -181, 134, -181, 134, -238,
	184, -237, -181, 134, -181, 492, 134, 492, 134, 488,
	492, -390, -390, -429, -154, 458, 164, 92, 487, 487,
	-156, -387, 492, -97, -429, -486, -204, 2, -220, 2,
	403, 219, -154, -429, -429, -429, -422, 27, 375, 2,
	323, 371, 83, 375, 2, -220, 403, 106, 199, 74,
	-488, 161, -485, 350, -484, -220, 106, -220, 106, -220,
	106, -220, -220, 2, 2, 2, 2, 79, 79, 161,
	2, 420, 2, 420, 2, -191, -191, -191, 236, -220,
	161, 403, 199, 403, 199, 106, 403, -181, 492, -195,
	-167, -294, -422, -295, -294, -168, -167, -170, 161, 327,
	437, 264, 376, 223, -323, -322, 27, -346, -327, 155,
	263, -346, -325, -348, 478, 479, -414, -416, -280, 278,
	-161, -161, -161, -267, -373, -346, 318, 199, -395, -393,
	-393, -218, -423, 413, -346, -346, -346, -346, -346, -346,
	-346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
	-346, -346, -346, -346, -346, -346, -346, -346, -346, -346,
	-346, -346, -346, -346, -346, -346, -346, -346, -346, 237,
	188, 378, 47, 191, -346, 417, -346, -346, -346, -346,
	259, 270, 274, 425, 146, 434, 121, 278, -523, 398,
	39, -353, -162, -285, 487, -367, 34, 384, 27, -360,
	487, 2, -341, -346, -342, -282, -281, -281, 488, 451,
	27, 121, 480, 2, 488, 492, 37, 488, -346, -282,
	-359, -355, -281, -366, -365, 455, -314, -315, 463, 255,
	109, 182, 254, -316, 364, -417, 8, -423, 480, -470,
	154, 175, 487, 488, 2, 488, 2, 488, -346, 2,
	488, -346, 2, 488, -346, 2, 488, -346, 2, 488,
	2, -346, -346, -346, -346, -346, -346, -346, -281, 8,
	-417, -417, 413, 413, -417, -417, -417, -409, 311, 239,
	312, 170, 258, 256, 257, 169, -409, -308, 2, -411,
	-281, 4, 463, 255, 109, 182, 254, 364, 5, -308,
	2, -309, 2, -346, -281, -310, -347, -348, 478, 479,
	471, -360, -311, 2, -346, -282, -346, 53, 231, 419,
	-312, -346, 164, -281, -281, 2, -281, 2, -467, 37,
	-281, -273, 492, 164, 37, 4, -273, -273, 487, 488,
	492, -307, 179, 251, 246, -307, -376, -306, 218, -304,
	294, -304, -304, -371, -205, 485, 493, -423, -371, -370,
	-369, 37, -213, 291, -371, -371, 489, 488, -370, 486,
	-482, 487, 490, 490, 490, 490, 490, -220, 487, -281,
	-423, 390, 488, 489, 212, 212, 212, 212, 355, 488,
	417, 458, -81, 286, 488, 492, -272, 36, 485, 489,
	2, 2, -412, 453, 487, 487, -315, 487, 164, -271,
	-499, 488, 421, -334, -240, 327, 383, 340, 368, 400,
	8, 9, 8, 9, 492, -423, 492, -500, 86, 417,
	72, -337, 184, 72, -441, -207, 86, -442, -191, 66,
	433, 318, 163, 132, -500, 86, 318, -500, 86, 86,
	373, 388, 55, -381, 40, 40, 27, -99, 232, 164,
	464, 403, 199, 417, -381, -301, -393, 104, 252, 253,
	55, -418, -413, 478, 479, -418, 55, -418, -418, -418,
	458, -222, -381, 417, 417, 492, 40, 40, 27, -99,
	232, 164, 417, -237, -205, 447, 41, 447, 417, 41,
	360, 417, 492, 41, 41, -491, -196, 93, 265, 245,
	266, -197, -198, 305, 445, -429, -151, 195, 488, -387,
	-230, -191, 489, -346, -99, -346, -99, 134, 2, -516,
	226, 487, -244, 270, 164, -270, -388, 210, 492, -278,
	134, -300, -299, 270, -224, 184, 2, -220, 134, 129,
	487, 325, 2, -206, 184, -192, -191, -319, -184, 406,
	134, -298, 443, -328, -99, 487, 112, 37, -328, -289,
	-290, -385, -291, -207, 487, -213, -191, 2, -220, -279,
	-279, -279, -181, 492, 134, -204, -223, -228, -429, -430,
	-81, -389, 488, 488, 488, -153, 288, -152, -191, 5,
	-156, 443, -243, -338, -337, -445, -446, -441, 237, 199,
	433, 211, 147, -262, -208, -207, 105, -154, -96, -387,
	-154, -154, -387, -387, -220, 161, -154, -154, -154, 2,
	2, -303, -220, -204, -237, -220, -270, -270, -303, -204,
	-303, -204, -303, -204, -99, -346, 370, 161, 161, 489,
	-303, 325, 106, 403, 303, 199, -220, -237, -220, -237,
	-204, -220, -381, -295, -168, 285, 223, 376, -325, -326,
	-348, 354, 355, -326, 354, 355, 8, 9, 8, 9,
	-172, 380, 273, -279, 492, -175, 38, 119, 223, -220,
	464, 130, -346, -346, 417, -523, 398, -353, 130, -346,
	259, 274, 425, 146, 434, 121, 278, 164, 487, -347,
	-347, 488, -283, -346, -346, 486, 495, 488, -266, 492,
	-264, -346, -281, -281, 488, 489, -281, -270, 486, 486,
	492, 488, -364, -365, 126, -346, 417, 417, 417, 417,
	487, 488, 489, -475, 295, 487, 487, -346, 488, 488,
	488, 488, 37, 492, 492, 492, 488, 492, 492, 492,
	488, 488, 488, 492, 488, 464, 464, 488, 488, 488,
	488, 492, 488, 492, 488, 164, 488, 488, -317, 308,
	488, 11, 12, 478, 479, 480, 481, 159, 482, 483,
	476, 477, 475, 468, 469, 470, 80, 248, 356, 14,
	15, 16, 212, 191, -347, -347, -347, 488, -351, -352,
	164, 161, 37, -312, -312, -312, 488, 164, -281, 488,
	488, 487, -468, 250, 270, 488, -340, -339, 456, -384,
	-274, 2, -376, -215, -423, -340, -340, -281, -346, 218,
	218, -305, 443, 284, -307, -376, -370, -419, -345, -344,
	162, 38, 119, 267, 187, -370, -213, -261, -370, -370,
	-423, -371, -371, -369, 488, -483, -419, 488, -275, -379,
	-462, -266, 489, -154, -423, -142, 5, 274, -142, -142,
	-142, -270, 24, 309, -393, 485, 486, 8, -423, 487,
	-417, -417, -417, -270, 164, -420, -333, 431, 77, 327,
	413, -420, -177, 339, -207, -207, -220, 270, -337, 184,
	-183, 270, -393, -214, -191, 487, 487, 223, 223, 443,
	-207, -214, 223, 184, -207, 184, -214, -214, -492, 327,
	279, -346, 240, 325, 271, -178, 339, -99, -99, -99,
	487, -499, 443, 120, -220, -237, -220, -224, 339, 268,
	-232, -418, -418, -299, 339, -222, -204, -179, -99, -99,
	-99, 487, -205, -180, 339, 5, 184, -207, 5, -223,
	-207, -229, -502, -427, 103, 372, -504, 23, -207, 184,
	-207, -196, -429, 274, 439, -490, -154, 164, -151, 480,
	-191, 452, -191, -242, -245, -243, -207, -159, 460, 458,
	134, -236, -220, 485, -154, -429, -220, -229, 134, -261,
	270, -429, 487, 2, 2, 284, 270, -206, 184, -185,
	127, -521, 470, -204, -340, -274, -297, -331, 347, 284,
	-262, 448, -213, -297, -276, 492, 164, 470, 489, -262,
	2, -181, -181, -181, -237, -238, -181, -181, -81, -81,
	-154, 492, 487, 470, 470, 487, -429, -429, 488, 492,
	-220, -206, 199, 199, -212, -192, 488, 492, 489, 487,
	-154, 164, -46, 458, 403, 491, -303, -303, -303, 370,
	370, -191, -216, -204, -220, -217, -237, 161, 161, 437,
	-326, 285, 244, -373, -176, 276, -220, 491, -346, -346,
	130, 130, -346, -347, -347, -346, 130, 164, 487, -346,
	-357, 32, 32, 488, 492, -342, -346, 488, 451, -266,
	-266, 488, 480, -423, 491, 488, -355, 128, -346, 411,
	255, 182, 254, -316, 254, -316, -316, -417, 5, -423,
	480, -476, -210, 487, -191, 456, -265, 290, 488, -395,
	-393, -346, -346, -346, -346, -346, -417, -398, -398, -417,
	-417, -346, -351, -346, -395, -393, -347, -347, -347, -347,
	-347, -347, -347, -347, -347, -347, -347, -347, -347, -347,
	-347, -347, -347, -347, -347, 121, 270, 278, -347, -352,
	-351, -346, -346, -393, 488, 488, 488, -281, -81, 487,
	250, -293, 175, -346, -387, 492, -293, -293, 488, -376,
	-376, 487, -346, 218, 486, 492, 494, 470, -261, 489,
	-369, -370, 486, 488, 492, 488, 492, -330, 37, 488,
	-423, 287, 5, 8, 485, 486, 489, -417, 488, 488,
	488, -270, -346, 417, 417, 134, 270, 445, -447, -442,
	132, -346, -268, -374, -346, 487, 487, 2, -174, 125,
	373, -501, 2, 443, 134, -181, 134, -181, 462, 487,
	487, 417, 458, -281, -346, -155, 112, -422, -494, 491,
	-494, 491, 417, 417, 458, -281, 417, -397, 45, 25,
	270, -223, 417, 417, -181, 134, 428, 373, -429, 274,
	-430, -154, 2, -224, 2, 488, 488, 492, -448, 37,
	282, 487, 282, -220, -64, 458, -386, -419, -222, 37,
	134, -490, -391, -392, 5, -220, 134, 284, 270, -186,
	230, -521, -427, -463, -266, -297, -288, 271, 85, 488,
	-340, -290, -274, -346, 2, 488, -181, -152, -153, -429,
	-429, -429, -154, -156, -156, -338, -246, 487, -206, -192,
	487, -156, -208, 2, -430, -99, 288, -220, 480, -303,
	-253, -252, 303, 278, -253, 354, 354, 285, 155, 227,
	-175, -205, -346, -346, 130, 32, 32, -346, -346, -357,
	488, -346, -346, -281, 486, 5, -346, 488, 488, 8,
	-346, 488, 489, -477, -191, -346, 488, 55, 488, 488,
	492, 492, 488, 488, 488, 488, 488, 488, 488, -352,
	164, 121, 278, 487, 488, 488, -81, -354, 178, 55,
	-376, -354, -354, -305, -270, -376, -344, -205, 485, -423,
	-419, -379, 487, 489, 486, 2, 485, -423, 488, -207,
	-207, -337, 134, -449, 86, -451, 70, 147, 92, 270,
	274, 433, 318, 66, 112, 331, -512, 37, 488, 488,
	492, -175, -268, -270, 270, 395, 112, 270, 112, 105,
	428, 73, -207, -214, -270, -270, -220, 140, 488, 492,
	470, 2, 480, 480, -224, -222, 140, 488, -205, 5,
	5, 134, -202, 70, 5, -207, -207, -223, 105, -261,
	-249, 202, -207, -446, -443, -444, 318, -450, -452, 147,
	318, -99, -158, -157, -191, 5, 2, 487, -244, 288,
	486, -300, -99, -224, 488, 492, -321, 443, -205, -220,
	134, -187, 229, -521, -427, -184, -324, -322, -329, 487,
	284, -99, -266, 470, 488, 488, 105, 105, 193, 133,
	-268, 487, 487, -270, 105, 488, -47, -48, 199, 86,
	307, -217, 403, 199, 487, 487, -175, -346, -346, -346,
	488, -266, -423, 480, -471, 303, 488, -373, -346, -346,
	-347, 164, 487, -357, 488, -472, 457, -346, -281, -472,
	-472, 488, -419, 2, 485, 2, -337, -214, -218, -211,
	-191, 147, 184, 274, 223, 487, -347, -220, 487, 2,
	-513, 116, 203, -336, -514, 91, 396, 192, -374, -176,
	488, 488, 274, 274, -346, -393, 487, -181, -181, 488,
	488, -346, 417, -422, 90, -420, 2, -494, -346, 417,
	5, -181, -218, -181, -181, -202, 428, 37, -250, -251,
	191, -448, 223, -211, 223, -511, 458, 488, 492, 470,
	470, -242, -159, -65, -66, 418, -386, -261, 5, 487,
	-191, 284, 487, -205, -521, -427, -185, -297, 122, -270,
	86, -324, -353, -154, 487, 487, -247, 75, 87, 113,
	183, 167, 200, 388, 393, 27, -247, 488, -268, -268,
	488, 487, -154, 492, 27, 487, 27, 487, -220, -237,
	-281, -281, 488, -266, 55, 492, 488, 488, -347, -357,
	488, -473, -474, -210, 486, 2, -451, -211, 270, 443,
	-346, -193, 487, -346, 203, 117, 189, -249, 487, -335,
	443, 331, -202, -268, 487, 487, 487, 470, 164, 487,
	-397, -181, -223, -99, -159, 301, 487, -248, 284, 105,
	264, -157, -349, -349, 488, 37, -66, 9, 37, -268,
	-220, -268, 284, -427, -186, 437, 271, 488, -214, -297,
	-430, -430, -335, 488, 488, -430, -48, -270, -270, 488,
	488, -478, 325, 355, 177, -281, -267, 488, 492, 37,
	134, 179, 488, -453, 249, -191, 488, 117, 189, -250,
	-270, -249, 179, -220, -495, 443, 488, -255, -254, -252,
	-257, -256, -252, -281, -420, 90, 301, -281, -202, -248,
	-220, -269, -375, -207, 76, 105, -249, -99, -99, 488,
	-321, 488, -220, -187, 373, -339, 488, 488, -336, -335,
	488, 488, 488, 488, -479, -480, 47, 430, 96, -346,
	-479, -479, -474, -476, 147, 458, -454, -457, -456, 284,
	379, 165, 302, 488, 395, 454, -513, 488, 458, -261,
	-346, -335, 488, 492, 448, 488, 492, 448, 488, 164,
	488, -181, 487, 488, 492, 317, 118, 125, -250, -511,
	-335, 487, -336, 487, -289, -154, -154, -249, -336, -154,
	-481, 132, -480, 314, 160, 354, 314, 160, -481, -481,
	-211, 51, -456, 284, -457, 284, 437, 118, 51, -453,
	-249, -254, 191, -256, 164, 301, -270, -375, 355, 355,
	2, -159, -248, -336, -268, -249, -268, -340, -250, -249,
	96, 175, 412, 264, 32, 470, -455, 264, 345, 58,
	373, -455, 470, -454, 487, 487, 488, 2, -248, -249,
	488, -250, 488, -250, 354, 292, -480, -346, 22, 274,
	112, -346, -513, -281, -281, -182, 58, 345, -250, -335,
	-517, 456, -336, 488, 488, -517, -336, 2, -249, -250,
	417, -249, -250, 487, -250, -517, -281, -517, 488, -250,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 25, 26,
	397, 398, 400, 401, 402, 404, 405, 407, 409, 411,
	413, 414, 416, 418, 420, 421, 422, 423, 424, 426,
	428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 486, 488, 0, 1020, 1022, 1024, 1026, 0, 616,
	0, 28, 29, 0, 0, 217, 219, 221, 0, 246,
	248, 249, 251, -2, 0, 347, 348, 350, -2, -2,
	0, 0, 475, 477, 0, 0, 0, 497, 498, 0,
	1108, -2, 491, 493, 495, 560, 562, 564, 566, 568,
	570, 572, 573, 575, 577, 579, 581, 583, 585, 587,
	588, 590, 592, 594, 596, 598, 600, 602, 604, 606,
	608, 610, 612, -2, -2, -2, 0, -2, -2, -2,
	1038, 32, 34, 36, 38, 40, 42, 44, 46, 298,
	299, 301, 303, 305, 307, 310, 312, 314, 1166, 352,
	354, 356, 358, 360, 362, 0, -2, 1178, 0, 0,
	48, 49, 50, 51, 52, 53, 54, 55, 71, 72,
	73, 74, 75, 76, 77, 78, 59, 61, 62, 66,
	67, 69, 57, 0, 0, 1139, 1141, 1143, 1145, -2,
	0, 0, 7, 9, 11, 13, 15, 17, 19, 21,
	399, 403, 406, 408, 410, 412, 415, 417, 419, 425,
	427, 429, 898, 1797, 1814, 1815, 1816, 1819, 1820, 1821,
	1822, 1823, 1824, 2175, 2256, 2257, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
	1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
	2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
	2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
	2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139,
	2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149,
	2150, 2151, 2152, 2153, 2154, 2155, 0, 453, 451, 1790,
	454, 2008, 456, 458, 341, 342, 343, 344, 345, 346,
	0, 468, 462, 467, 469, 471, 472, 473, 474, 448,
	446, 0, 468, 1849, 466, 1018, 1019, 1013, 1014, 2039,
	1045, 487, -2, -2, -2, 2141, -2, 519, -2, 526,
	2145, 2041, 531, 0, 533, -2, 536, 1021, 1023, 1025,
	614, 615, 1800, 0, 0, 0, 0, 30, 31, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 947, 948,
	949, 0, 0, 181, -2, -2, -2, -2, 0, 0,
	1890, 1758, 1816, 1761, 1756, 218, 220, 222, 223, 0,
	0, 0, 0, 0, 0, 247, 250, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 794, 786, 787,
	990, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 0, 0, 0, -2, 0, 0,
	0, 277, 389, 390, 0, 1167, 1167, 0, 0, 0,
	0, 198, 189, 0, 0, 763, 476, 478, 0, 0,
	184, 0, 0, 1017, 0, 200, 0, 0, 492, 494,
	496, 561, 563, 565, 567, 569, 571, 574, 576, 578,
	580, 582, 584, 586, 589, 591, 593, 595, 597, 599,
	601, 603, 605, 607, 609, 611, 613, 621, 0, 0,
	0, 0, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 0, 0, 0, 0, 0, -2, 0, 0, -2,
	-2, -2, 0, 0, 0, 0, -2, -2, 0, 0,
	0, 0, 624, 626, 627, 628, 0, 679, 696, 0,
	938, 1168, 1047, 1028, 1042, 1047, 1030, 1031, 1032, 1033,
	1034, 1039, 1041, 1035, 1036, 1037, 33, 35, 37, 39,
	41, 43, 45, 47, 300, 302, 304, 306, 308, 311,
	313, 315, -2, 1137, 1138, 353, 355, 357, 359, 361,
	363, 479, 0, 481, 0, 625, -2, 0, 1172, 1172,
	1172, 0, 0, 1138, 1136, 0, 484, 485, 540, 541,
	1401, 0, 0, 0, 0, 0, 0, 0, 1655, 1487,
	0, 542, -2, 1518, 1520, 2116, 2141, 1654, 1522, 1523,
	1524, 1525, 1526, 0, 1528, 1529, 1530, 1531, 1532, 1533,
	0, 1535, 0, 1540, 1541, 1542, 0, 2123, 1735, 1810,
	-2, 0, 0, 2129, 1806, 0, 1621, 1558, -2, -2,
	1833, 1812, 1333, 1334, 1335, 1336, 1337, -2, -2, 2158,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
	1572, 0, 2105, 2124, 2125, 2130, 2132, 2126, 2113, 1583,
	1900, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1360, 1369, -2, -2, -2, -2,
	-2, -2, 2117, 2118, 2135, 2138, 2144, 2149, 2150, 2122,
	2131, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167,
	2168, 2169, 2170, 2171, 2172, 2173, 2174, 1361, -2, -2,
	-2, -2, 1155, 2018, 1158, 898, 1156, 1140, 1142, 0,
	1144, 0, 0, 0, 1149, 1175, 1173, 0, 1216, 1153,
	1154, 1234, 1234, 1258, 0, 1239, 0, 1258, 1167, 1284,
	0, 1245, 2034, 1559, 1560, 0, 1816, 1811, -2, -2,
	2156, 0, 0, 0, 0, 0, 0, 0, 449, 0,
	455, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 489, 490, 0, 514, 0, 518, 2112, -2, 1857,
	2050, -2, 522, 1048, 1052, 1053, 1054, 1055, 0, 0,
	0, 0, 0, 528, 0, 0, 515, 516, 534, 537,
	0, 617, 618, 619, 620, 56, 0, 2124, 1284, 58,
	0, 1780, 1841, 1842, 1843, 1844, 1845, 2157, 2176, 2177,
	2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187,
	2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197,
	2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207,
	2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217,
	2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227,
	2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237,
	2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246, 2247,
	2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2158, 60,
	0, 2124, 63, 0, 2124, 0, -2, 68, 0, 1786,
	70, 0, 1783, 79, 0, 2124, 0, 1755, -2, 0,
	165, 1794, -2, 2124, 946, 201, 202, 1829, 1830, 1837,
	1838, 1839, 1840, 1271, 185, 0, 0, 0, 755, 1752,
	1757, 756, 1762, 0, 224, 225, 226, 227, 228, 2124,
	230, 231, 0, 233, 234, 2124, 236, 237, 0, 239,
	253, 254, 0, 256, 0, 2124, 0, 0, 0, 262,
	-2, 278, 0, 275, 0, 266, 267, 269, 270, 271,
	272, 0, 319, 317, 1791, 0, 764, 2124, 766, 1796,
	0, 0, 967, -2, 2124, 943, 973, 969, 0, -2,
	0, 1165, 2124, 1062, 790, 791, 792, 793, 0, 338,
	0, 1075, 0, 1077, 0, 1098, 1290, 1234, 1234, 0,
	279, 280, 281, 282, 283, 2124, 0, 0, 0, 288,
	0, 290, 291, 292, 293, 294, 295, 296, 297, 154,
	2124, 366, 387, 154, 2124, 369, 154, 2124, 372, 0,
	375, 988, 154, 2124, 378, 154, 2124, 381, 382, 384,
	2124, 386, 203, 0, -2, 442, 1799, -2, 392, 0,
	393, 0, -2, 0, 215, 0, 0, 761, 762, 1271,
	187, 0, 1015, 1016, 0, 0, 499, 0, 0, 622,
	623, 0, 0, 633, 634, 635, 215, 2042, 2016, 1917,
	640, 0, 643, 646, -2, 0, 0, 0, 0, 650,
	0, 655, 656, 657, 0, 760, 659, 0, 0, 661,
	0, 665, 0, 668, 0, 670, 0, 672, -2, -2,
	-2, 683, -2, 0, 687, 0, 689, 0, 0, 0,
	0, 704, 705, 0, 710, 0, 713, 714, 715, 716,
	717, 0, 719, 720, 721, 722, 0, 724, 725, -2,
	-2, 729, 731, 0, 738, 0, 742, 0, 746, 0,
	629, 630, 154, 1288, 1027, -2, 1029, 0, -2, 0,
	480, 0, 483, 1195, 1123, 1120, 0, 1192, 1193, 1124,
	0, 0, 0, 1131, 0, 1170, 1171, 0, 0, 0,
	1110, 1111, 0, 0, 0, 0, 1660, 1661, 1662, 1663,
	1664, 1665, 1668, 1669, 1666, 1667, 1670, 1671, 0, 0,
	0, 0, 0, 1672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1673, 1674, 1675, 0, 0,
	1677, 0, 1679, 0, 0, 0, 0, 0, 0, 1466,
	1468, 1743, 0, 0, 1676, 1406, 1407, 1408, 1409, 1410,
	1445, 1446, 0, 0, 1519, 1740, 1739, 1521, 0, 1691,
	0, 1534, 1776, -2, 0, 1655, 1686, 0, 0, 1543,
	1544, 1545, 0, 0, 1691, 0, 0, 1734, 1555, 1556,
	1398, 0, 0, 1623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 1346, 0, 1348, 0, 1349, 1350, 1357, 1370,
	0, 0, 0, 0, 1374, 0, 0, 0, 0, 0,
	0, 0, 1715, -2, 0, 0, 0, 0, 1362, 0,
	1157, 0, 0, 1220, 1744, 1748, 1749, 1220, 1220, 0,
	0, 1692, 1281, 1281, 0, 0, 1277, 1277, 1277, 1275,
	1258, 0, 1258, 1268, 0, 1258, 1258, 0, -2, 1239,
	0, 0, 1268, 0, 1252, 430, 432, 434, 436, 437,
	438, 440, 1285, 1286, 0, 0, 0, 0, 0, 0,
	1817, 0, 0, 0, 1802, 0, 0, 0, 0, 460,
	470, 1167, 0, 1694, 1307, 1311, 1312, 1313, 1314, 1315,
	1316, 0, 0, 1308, -2, 1358, 1360, 1381, 1834, 1835,
	1836, 1341, 1342, 1343, 1344, 1345, 1353, 1340, 1340, 1340,
	1351, 1380, 1372, 1380, 1376, 1327, 1328, 1363, 1364, 1365,
	1366, 0, 464, 0, 0, 0, 0, -2, 524, 529,
	530, 0, 0, 1050, 0, 1056, 551, 552, 553, 1058,
	1059, 0, 527, 554, 555, 556, 557, 558, 559, 0,
	1764, 1765, 1766, 1767, 1770, 1771, 0, 0, 525, 544,
	532, 0, 538, 80, 1010, 119, 0, 1010, 1010, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 104, 115,
	92, 93, 0, 0, 0, 0, 64, 920, 0, 923,
	0, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	103, 0, 98, 82, 0, 0, 0, 105, 117, 0,
	145, 147, 0, 0, 0, 0, 0, 0, 164, 172,
	0, 0, 944, 0, 1164, 0, 206, 1270, 0, 1271,
	754, 0, 0, 1817, 1760, 0, 0, 0, 0, 255,
	257, 0, 259, 260, 261, 0, 966, 0, 268, 265,
	309, 869, 2124, 0, 0, 336, 331, 0, 333, 0,
	919, 2124, 917, 1795, 0, 941, 0, 0, 0, 974,
	1826, 983, 989, 1064, 0, 340, 0, 1078, 1080, 0,
	0, 1291, 0, 1293, 1294, 0, 285, 286, 287, 0,
	364, 0, 152, 153, 0, 367, 0, 370, 0, 154,
	2124, 1750, 376, 0, 379, 0, 0, 0, 0, 1167,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 215, 0, 1271, 215, 215, 1271, 501, 1271, 503,
	0, 0, 636, 215, 215, 215, 641, 642, 644, 645,
	-2, -2, 739, 647, 648, 707, 0, 0, 0, 706,
	658, 0, 748, 2030, 758, 707, 1890, 707, 1890, 707,
	1890, 669, 671, 674, 699, 682, 686, 0, 0, 0,
	691, 0, 693, 0, 695, 707, 708, 711, 718, 723,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 1040,
	1195, 1123, 482, 1114, 1194, 1115, 1122, 1125, 0, 0,
	1127, 0, 1129, 0, 1190, 1191, 1198, 1199, 0, 1209,
	1210, 1202, 0, -2, 0, 0, 1205, 1206, 1133, 0,
	1150, 1151, 1152, 1179, 1182, 999, 0, 2256, 1402, 1302,
	1403, 1404, 1779, 0, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, -2, -2, -2, -2, -2, -2,
	-2, -2, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, -2, -2, -2, 1443, 1444, -2, 1678,
	1680, 0, 1743, 0, -2, 0, -2, -2, -2, -2,
	1463, 0, 1465, 1470, 1472, 1474, 0, 0, 0, 0,
	1742, 1484, 1726, 1727, 0, 0, 1657, 1658, 1659, 1469,
	0, 1488, 1741, 1738, 0, 0, 1690, 1178, 1547, 0,
	0, 0, 0, 1554, 1539, 1688, 0, 1687, 0, 0,
	0, 1698, 0, 1733, 1729, 0, 1777, 1397, 1384, 1385,
	1386, 1387, 1388, 1389, 1399, 0, 1774, 1803, 1809, 1631,
	0, 0, 0, 1584, 1585, 1586, 1587, 1588, 0, 1590,
	1591, 0, 1593, 1594, 0, 1596, 1597, 0, 1599, 1600,
	1601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 0, 0, 1603, 0,
	1701, -2, -2, -2, -2, -2, -2, -2, -2, 0,
	1605, 0, 1607, 1692, 1712, 0, 0, 1489, 0, 0,
	0, 1655, 0, 1610, 1692, 1720, 0, 0, 0, 0,
	0, 1692, 0, 1725, 0, 1617, 0, 1619, 1159, 0,
	0, 1297, 0, 0, 0, 1747, 1297, 1297, 0, 1215,
	0, 0, 1278, 1279, 1280, 0, 0, 1281, 0, 1272,
	1276, 1273, 1274, 1268, 1231, 0, 0, 1781, 1268, 1237,
	1267, 0, 898, 1257, 1268, 1268, 0, -2, 1241, 1258,
	0, 0, 431, 433, 435, 439, 441, 0, 0, 1178,
	-2, 215, 897, 0, 0, 0, 0, 0, 450, 452,
	0, 0, 444, 0, 447, 0, 1298, 1301, 0, 0,
	1317, 1318, 0, -2, 0, 0, 1382, 0, 0, 0,
	0, 517, 0, 1049, 1057, 0, 548, 0, 550, 0,
	1768, 1772, 1769, 1773, 0, 539, 0, 0, 0, 0,
	1009, 123, 2124, 0, 156, 0, 0, 862, 1787, 0,
	0, 0, 0, 1905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 94, 0, 0,
	0, 0, 0, 0, 0, 921, 922, 924, 931, 933,
	0, 927, 1775, 0, 0, 928, 0, 930, 932, 934,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 95,
	0, 0, 0, 0, 1754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 960, 954, 955, 956,
	957, 958, 959, 0, 0, -2, 215, 0, 186, 206,
	1753, 1763, 0, 229, 232, 235, 238, 0, 263, 0,
	0, 796, 769, 0, 0, 318, 215, 0, 0, 332,
	0, 915, 918, 0, 898, 2124, 953, 1793, 0, 0,
	0, 0, 972, 0, 2124, 1782, 1825, 1826, 1066, 1072,
	0, 1297, 0, 1096, 1081, 0, 0, 0, 1096, 1100,
	1101, 1103, 1104, 0, 0, 1292, 0, 289, 388, 154,
	154, 154, 373, 0, 0, 154, 383, 154, 204, 385,
	391, 443, 1167, 1167, 215, 213, 1992, 211, 208, 210,
	0, 0, 0, 797, 799, 800, 801, 802, 0, 1826,
	0, 1943, 1826, 0, 1084, 1086, 0, 182, 188, 215,
	0, 330, 500, 505, 631, 0, 637, 638, 639, 676,
	701, 649, 651, 652, 653, 0, 759, 757, 660, 707,
	663, 707, 666, 707, 685, 688, 690, 0, 0, 0,
	703, 0, 0, 0, 0, 0, 0, 0, 743, 744,
	745, 747, 1289, 1118, 1119, 1121, 0, 1130, 0, 0,
	1204, -2, -2, 1203, 1207, 1208, -2, -2, -2, -2,
	1126, 0, 1135, 1132, 0, 1189, 997, 998, 0, 0,
	0, 0, -2, -2, 0, 0, 0, 1485, 0, -2,
	1464, 1467, 1471, 1473, 1475, 0, 0, 0, 0, 0,
	0, 1681, 0, 1683, 1486, 1736, 1739, 1653, 0, 0,
	1177, 1178, 1178, 0, 1553, 0, 1689, 0, 1696, 1697,
	0, 1546, 0, 1730, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1557, 0, 0, 0, 0, 1589, 1592,
	1595, 1598, 0, 0, 0, 0, 1578, 0, 0, 0,
	1582, 1352, 1338, 0, 1380, 1378, 1379, 1373, 1380, 1377,
	1330, 0, 1329, 0, 1602, 0, 1604, 1606, 0, 0,
	1608, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 1493, 1494, 1609, 1718, 1719,
	0, 0, 0, 0, 0, 0, 1615, 0, 1724, 1616,
	1618, 1167, 0, 1160, 0, 1217, 1212, 1296, 0, 1745,
	1271, 1219, 1221, 1746, 1784, 1212, 1212, 0, 1693, 0,
	0, 1262, 0, 0, 0, 1264, 1235, 0, 0, 1229,
	0, 1225, 1226, 1227, 1228, 1236, 898, 1266, 1238, 1242,
	1803, 0, 1268, 0, 1253, 0, 1255, 1287, 0, 1247,
	1250, 0, 0, 216, 1818, 240, 244, 245, 241, 242,
	243, 459, 0, 0, 1695, 0, 1303, 0, 1309, 0,
	0, 0, 0, 463, 0, 513, -2, 546, 547, 549,
	0, 545, 120, 1010, 0, 0, 1001, 0, 125, 2124,
	134, 0, 837, 0, 1785, 0, 0, 0, 0, 0,
	1012, 0, 0, 2124, 154, 2124, 154, 137, 140, 0,
	144, 142, 0, 0, 828, 81, 1010, 84, 88, 96,
	0, 0, 0, 102, 0, 0, 0, 1003, 0, 925,
	926, 929, 935, 65, 0, 1005, 1000, 146, 86, 90,
	97, 0, 1007, 83, 0, 168, 0, 0, 0, 160,
	0, 161, 162, 169, 170, 171, 173, 0, 154, 2124,
	0, 961, 939, 940, 0, 945, 179, 0, 215, 1759,
	0, 0, 0, 0, 0, 795, 880, 0, 0, 0,
	0, 324, 320, 0, 329, 335, 334, 765, 0, 0,
	0, -2, 976, 970, 971, 0, 0, 0, 2124, 1068,
	1072, 0, 1071, 1165, 1178, 339, 1073, 1096, 0, 0,
	0, 1083, 1079, 1076, 1297, 0, 0, 0, 0, 0,
	284, 365, 368, 371, 1751, 154, 377, 380, 394, 395,
	190, 0, 0, 0, 0, 0, 215, 0, 0, 0,
	806, 0, 1826, 1826, 0, 1789, 0, 0, 0, 0,
	183, 0, 502, 0, 0, 0, 662, 664, 667, 692,
	694, 707, 732, 733, 823, 0, 823, 0, 0, 1128,
	0, 1201, 1134, 1183, 1184, 0, 999, 0, 1405, 1448,
	0, 0, -2, 0, 0, 1452, 0, 0, 0, -2,
	0, 0, 0, 1682, 1684, 0, 1738, 1548, 0, 0,
	0, 1552, 1536, 1537, 0, 1656, 1699, 1728, 1732, 0,
	1390, 1391, 1392, 1393, 1394, 1395, 1396, 0, 1778, 1804,
	1808, 1629, 1630, 1634, 1792, 0, 0, 0, 1561, 0,
	0, 0, 0, 0, 0, 0, 0, 1371, 1375, 0,
	0, 1700, 1711, 1713, 1490, 1491, 1495, 1496, 1497, 1498,
	1499, 1500, 1501, 1502, 1503, 1504, -2, -2, -2, 1508,
	1509, 1510, -2, -2, -2, 0, 0, 0, 1714, 1716,
	1717, 1721, 1722, 0, 1612, 1613, 1614, 1723, 0, 1167,
	1161, 1214, 0, 1295, 1218, 0, 1214, 1214, 1174, 1260,
	0, 0, 1283, 0, 1232, 0, 1233, 0, 1265, 0,
	1240, 1243, 1244, 1254, 0, 1246, 0, 1249, 0, 1548,
	-2, 461, 445, 0, 0, 1305, 0, 0, 1355, 1359,
	1383, 465, 1269, 0, 0, 0, 0, 155, 835, 861,
	0, 0, 0, 992, 999, 0, 0, 867, 127, 0,
	0, 0, 135, 0, 0, 132, 0, 139, 143, 0,
	0, 0, 0, 0, 99, 100, 101, 0, 106, 0,
	107, 0, 0, 0, 0, 0, 0, 157, 0, 0,
	0, 996, 0, 0, 175, 0, 0, 0, 964, 965,
	205, 180, 258, 898, 264, 817, 868, 0, 870, 0,
	770, 0, 0, 869, 316, 0, 323, 0, 919, 0,
	0, 942, 0, 975, 977, 987, 0, 0, 0, 1070,
	1072, 0, 1063, 1064, 1197, 1074, 1094, -2, 1093, 0,
	1178, 1102, 1099, 1105, 1106, 0, 374, 212, 0, 207,
	209, 0, 193, 0, 0, 798, 803, 0, 0, 0,
	0, 0, 1085, 1087, 0, 199, 0, 632, 654, 702,
	734, 822, 0, 0, 736, 0, 0, 1200, 1187, 1188,
	1185, 999, 1450, 1454, 0, 0, 0, 1456, -2, 0,
	1478, -2, -2, 1685, 1737, 1527, 1178, 1549, 1551, 1538,
	1731, 1400, 0, 1636, 1633, 0, 1620, 0, 1573, 1574,
	0, 0, 1577, 1579, 1580, 1581, 1339, 1332, 1331, 1710,
	0, 0, 0, 0, 1611, 1162, 0, 1625, 0, 0,
	1222, 1625, 1625, 1261, 0, 1263, 1230, 1223, 0, 1804,
	1256, 1248, 0, 0, 1299, 1304, 0, 1310, 1354, 121,
	122, 124, 0, 836, 0, 839, 0, 0, 0, 0,
	846, 847, 0, 0, 0, 0, 0, 856, 884, 894,
	0, 1189, 0, 0, 0, 129, 149, 0, 0, 1011,
	0, 0, 154, 154, 0, 0, 1002, 0, 0, 0,
	0, 109, 0, 0, 1004, 1006, 0, 0, 1008, 166,
	167, 0, 154, 0, 159, 154, 154, 996, 0, 0,
	825, 0, 880, 872, 873, 874, 0, 879, 881, 0,
	0, 783, 0, 779, 0, 0, 772, 796, 769, 0,
	321, 916, 950, 898, 968, 0, 0, 0, 0, 0,
	0, 1060, 1072, 0, 1065, 1066, 1096, 1196, 0, 0,
	0, 1082, 1197, 0, 214, 215, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 504, 506, 0, 0,
	512, 821, 0, 0, 0, 0, 1186, 1458, -2, -2,
	1479, 0, 1805, 1807, 1178, 0, 1622, 1180, 0, 0,
	-2, 0, 0, 0, 1163, 1146, 0, 1213, 1211, 1147,
	1148, 1282, 0, 1251, 0, 1306, 126, 0, 840, 841,
	1788, 843, 0, 845, 848, 0, 851, 1828, 0, 855,
	863, 885, 0, 817, 0, 890, 891, 892, 993, 994,
	896, 0, 128, 130, 148, 996, 0, 131, 138, 0,
	0, 85, 0, 0, 1883, 112, 110, 108, 87, 0,
	168, 174, 995, 163, 176, 154, 0, 0, 769, 824,
	0, 871, 0, 882, 883, 773, 0, 771, 0, 0,
	0, 0, 0, 322, 325, 0, 328, 0, 978, 0,
	986, 0, 0, 0, 0, 1067, 1068, 337, 0, 0,
	0, 1096, 1107, 192, 0, 0, 804, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 805, 896, 0, 0,
	860, 0, 197, 0, 508, 0, 510, 0, 735, 737,
	0, 0, 1550, 1640, 0, 0, 1575, 1576, -2, 0,
	1516, 1624, 1626, 0, 1224, 1300, 838, 842, 0, 0,
	0, 902, 0, 0, 0, 888, 889, 825, 0, 817,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	158, 177, 996, 951, 773, 0, 0, 781, 0, 784,
	0, 780, 777, 778, 817, 0, 326, 327, 0, 0,
	987, 0, 0, 1069, 1070, 0, 1089, 1090, 1092, 1097,
	0, 0, 894, 896, 859, 0, 507, 0, 0, 740,
	741, 0, 0, 0, 0, 1635, 1181, 1517, 0, 0,
	0, 0, 850, 907, 0, 0, 0, 886, 887, 884,
	0, 865, 0, 898, 133, 0, 896, 0, 829, 0,
	0, 832, 0, 0, 113, 1883, 111, 0, 154, 767,
	0, 0, 876, 878, 0, 785, 825, 783, 952, 896,
	0, 894, 0, 1061, 0, 1091, 215, 215, 817, 894,
	215, 509, 511, 1632, 1652, 1641, -2, 2085, 1887, 0,
	1652, 1652, 1627, 1628, 0, 0, 852, 903, 904, 0,
	899, 900, 901, 1827, 853, 854, 864, 893, 0, 902,
	150, 817, 826, 0, 0, 827, 0, 0, 116, 0,
	118, 178, 0, 875, 0, 0, 0, 0, 769, 773,
	894, 0, 817, 0, 1297, 194, 195, 825, 817, 196,
	1637, 0, 0, 1643, 1644, 1645, 1646, 1647, 1638, 1639,
	844, 0, 905, 0, 906, 0, 0, 0, 0, 907,
	136, 830, 0, 833, 0, 114, 0, 877, 774, 0,
	776, 773, 782, 817, 0, 825, 0, 1088, 857, 825,
	0, 1649, 1650, 0, 0, 0, 908, 0, 911, 912,
	0, 909, 0, 884, 0, 0, 820, 775, 768, 825,
	896, 984, 894, 858, 1648, 1651, 1642, 849, 910, 913,
	914, 895, 866, 0, 0, 816, 818, 819, 984, 894,
	981, 0, 817, 825, 0, 979, 817, 985, 825, 831,
	0, 825, 984, 0, 984, 982, 0, 980, 825, 834,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 476, 3, 482, 477, 3,
	487, 488, 480, 478, 492, 479, 489, 481, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 495, 3,
	468, 470, 469, 473, 491, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 485, 3, 486, 483, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 493, 475, 494, 471,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 444, 57787, 445, 57788, 446, 57789, 447,
	57790, 448, 57791, 449, 57792, 450, 57793, 451, 57794, 452,
	57795, 453, 57796, 454, 57797, 455, 57798, 456, 57799, 457,
	57800, 458, 57801, 459, 57802, 460, 57803, 461, 57804, 462,
	57805, 463, 57806, 464, 57807, 465, 57808, 466, 57809, 467,
	57810, 472, 57811, 474, 57812, 484, 57813, 490, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1164
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1169
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1173
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1174
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1175
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1176
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1177
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1178
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1179
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1180
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1187
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1196
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1197
		{
			return helpWith(sqllex, "ALTER")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1201
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1202
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1203
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1204
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1205
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1206
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1207
		{
			return helpWith(sqllex, "ALTER TYPE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1261
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1287
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1298
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1313
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1317
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1321
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1335
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1354
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1386
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1394
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1404
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1410
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1419
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1430
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1434
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1440
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1448
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1458
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1462
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1472
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1483
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1490
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1502
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1509
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1517
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1522
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1526
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1531
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1537
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1545
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1556
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1566
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1576
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 108:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1585
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 109:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1596
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 110:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1602
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1614
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1622
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1628
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1633
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1644
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1654
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1665
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1670
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1675
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1680
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1685
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1690
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1695
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1700
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1705
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1710
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1715
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1724
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1736
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.typeReference(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1753
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 136:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1757
		{
			sqlVAL.union.val = &tree.AlterTableAlterPrimaryKey{
				Columns:    sqlDollar[7].union.idxElems(),
				Sharded:    sqlDollar[9].union.shardedIndexDef(),
				Interleave: sqlDollar[10].union.interleave(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1765
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1781
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1790
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1795
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1802
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1810
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1811
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1815
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1825
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1833
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1837
		{
			sqlVAL.union.val = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1843
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1847
		{
			sqlVAL.union.val = nil
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1854
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1862
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1868
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1872
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 157:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1897
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeAddValue{
					NewVal:      sqlDollar[6].str,
					IfNotExists: false,
					Placement:   sqlDollar[7].union.alterTypeAddValuePlacement(),
				},
			}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:1908
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeAddValue{
					NewVal:      sqlDollar[9].str,
					IfNotExists: true,
					Placement:   sqlDollar[10].union.alterTypeAddValuePlacement(),
				},
			}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1919
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeRenameValue{
					OldVal: sqlDollar[6].str,
					NewVal: sqlDollar[8].str,
				},
			}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1929
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeRename{
					NewName: sqlDollar[6].union.unresolvedObjectName(),
				},
			}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = &tree.AlterType{
				Type: sqlDollar[3].union.unresolvedObjectName(),
				Cmd: &tree.AlterTypeSetSchema{
					Schema: sqlDollar[6].str,
				},
			}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1947
		{
			return unimplementedWithIssueDetail(sqllex, 48700, "ALTER TYPE OWNER TO")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1951
		{
			return unimplementedWithIssueDetail(sqllex, 48701, "ALTER TYPE ATTRIBUTE")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1955
		{
			return unimplementedWithIssueDetail(sqllex, 48701, "ALTER TYPE ATTRIBUTE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1958
		{
			return helpWith(sqllex, "ALTER TYPE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = &tree.AlterTypeAddValuePlacement{
				Before:      true,
				ExistingVal: sqlDollar[2].str,
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1969
		{
			sqlVAL.union.val = &tree.AlterTypeAddValuePlacement{
				Before:      false,
				ExistingVal: sqlDollar[2].str,
			}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1976
		{
			sqlVAL.union.val = (*tree.AlterTypeAddValuePlacement)(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2018
		{
			sqlVAL.union.val = &tree.Backup{DescriptorCoverage: tree.AllDescriptors, To: sqlDollar[3].union.partitionedBackup(), IncrementalFrom: sqlDollar[5].union.exprs(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2022
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2025
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2048
		{
			sqlVAL.union.val = &tree.Restore{DescriptorCoverage: tree.AllDescriptors, From: sqlDollar[3].union.partitionedBackups(), AsOf: sqlDollar[4].union.asOfClause(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2052
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2055
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2059
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2063
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2069
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2079
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2116
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2121
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2125
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2131
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2136
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2141
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:2146
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2151
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2155
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2171
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2174
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2178
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2182
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2190
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2200
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2204
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2210
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2214
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2222
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2228
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2242
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2246
		{
			sqlVAL.union.val = nil
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2252
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2266
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2267
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2268
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2279
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2292
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2311
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2319
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2321
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2325
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2328
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2347
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2355
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2357
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2361
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2364
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2368
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2372
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2376
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2389
		{
			sqlVAL.union.val = &tree.CommentOnIndex{Index: sqlDollar[4].union.tableIndexName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2395
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2400
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2412
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2414
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2415
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2416
		{
			return helpWith(sqllex, "CREATE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2419
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2420
		{
			return unimplemented(sqllex, "create cast")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2421
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2422
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2423
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2424
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2425
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2426
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2427
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2428
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2429
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2430
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2431
		{
			return unimplementedWithIssue(sqllex, 41649)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2432
		{
			return unimplemented(sqllex, "create operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2433
		{
			return unimplemented(sqllex, "create publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2434
		{
			return unimplemented(sqllex, "create rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2435
		{
			return unimplemented(sqllex, "create server")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2436
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2437
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2438
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2441
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2442
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2445
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2446
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2449
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2450
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2453
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2454
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2455
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2456
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2457
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2458
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2459
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2460
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2461
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2462
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2463
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2464
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2465
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2466
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2467
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2468
		{
			return unimplemented(sqllex, "drop server")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2469
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2470
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2471
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2481
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2482
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2483
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2484
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2502
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2506
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2510
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2516
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2520
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2529
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2548
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2552
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2563
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2575
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2583
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2591
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2601
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2605
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2611
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2615
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2622
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2626
		{

			sqlVAL.union.val = nil
		}
	case 337:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2640
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2650
		{
			return helpWith(sqllex, "DELETE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2654
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2662
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2665
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2666
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2667
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2668
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2669
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2678
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2679
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "DROP")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2683
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2684
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2685
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2686
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2696
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2711
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2715
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2718
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2726
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2730
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2733
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2741
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
				Concurrently: sqlDollar[3].union.bool(),
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2758
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2766
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2774
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2781
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2789
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[3].union.unresolvedObjectNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2797
		{
			sqlVAL.union.val = &tree.DropType{
				Names:        sqlDollar[5].union.unresolvedObjectNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2804
		{
			return helpWith(sqllex, "DROP TYPE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2809
		{
			sqlVAL.union.val = []*tree.UnresolvedObjectName{sqlDollar[1].union.unresolvedObjectName()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedObjectNames(), sqlDollar[3].union.unresolvedObjectName())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2824
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false, IsRole: sqlDollar[2].union.bool()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2828
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true, IsRole: sqlDollar[2].union.bool()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2831
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2835
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2840
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(nil, sqlDollar[2].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2870
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2872
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(sqlDollar[3].union.strs(), sqlDollar[5].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2880
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2888
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain([]string{"DISTSQL", "ANALYZE"}, sqlDollar[3].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2896
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2904
		{
			var err error
			sqlVAL.union.val, err = tree.MakeExplain(append(sqlDollar[4].union.strs(), "ANALYZE"), sqlDollar[6].union.stmt())
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2915
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2919
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2922
		{
			return helpWith(sqllex, "DELETE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2924
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2925
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2926
		{
			return helpWith(sqllex, "INSERT")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2927
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2929
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2930
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2931
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2934
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2939
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2940
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2941
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2946
		{
			return helpWith(sqllex, "DELETE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2947
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2948
		{
			return helpWith(sqllex, "INSERT")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2954
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2955
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2959
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2963
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2973
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.typeReferences(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2981
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.typeReferences(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2989
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = sqlDollar[2].union.typeReferences()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2997
		{
			sqlVAL.union.val = []tree.ResolvableTypeReference(nil)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3007
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3014
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3022
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3026
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3030
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3044
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3052
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3055
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3075
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3086
		{
			return helpWith(sqllex, "GRANT")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3110
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3114
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3117
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3122
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3126
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3136
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3140
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3154
		{
			return helpWith(sqllex, "RESET")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3155
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3163
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3170
		{
			return helpWith(sqllex, "RESET")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3178
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3181
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3192
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3195
		{
			return helpWith(sqllex, "USE")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3200
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3201
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3202
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3206
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3208
		{
			return helpWith(sqllex, "USE")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3224
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3239
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3268
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3272
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3276
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3282
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3292
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3296
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3300
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3304
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3308
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3319
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3322
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3348
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3352
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3357
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3379
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3386
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3405
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3412
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3417
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3422
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{
			return unimplemented(sqllex, "set from current")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3428
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3436
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3441
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3452
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3458
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3462
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3490
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3494
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3500
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3508
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3522
		{
			sqlVAL.union.val = tree.Low
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = tree.Normal
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3530
		{
			sqlVAL.union.val = tree.High
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3541
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3545
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3549
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3554
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3558
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3571
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3572
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3573
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3574
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3575
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3576
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3578
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3579
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3580
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3581
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3582
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3583
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3584
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3586
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3587
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3588
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3589
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3590
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3591
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3592
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3593
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3594
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3595
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3596
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3597
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3599
		{
			return helpWith(sqllex, "SHOW")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3604
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3605
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3608
		{
			return unimplementedWithIssue(sqllex, 41412)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3612
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3617
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3622
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3627
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3637
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3639
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3650
		{
			sqlVAL.str = "client_encoding"
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3653
		{
			sqlVAL.str = "timezone"
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3654
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3668
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3672
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3676
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3687
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3695
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3703
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
				Options: sqlDollar[4].union.kvOptions(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3711
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
				Options:              sqlDollar[5].union.kvOptions(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3720
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3729
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3737
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3751
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3754
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{All: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3759
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3761
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3765
		{
			sqlVAL.union.val = &tree.ShowClusterSettingList{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3768
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3776
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3779
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3791
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3795
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3799
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3802
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3810
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3813
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3826
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3834
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3842
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3845
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3847
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3851
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3855
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3858
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3860
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3864
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str), WithComment: sqlDollar[6].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3867
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3875
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3878
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3880
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3883
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3891
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3894
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3896
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3899
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3903
		{
			sqlVAL.union.val = true
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3905
		{
			sqlVAL.union.val = true
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3907
		{
			sqlVAL.union.val = false
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3917
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3921
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3924
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3925
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3927
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3931
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3934
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3936
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3944
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3952
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3961
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3964
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3966
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3969
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3971
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3975
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3978
		{
			sqlVAL.union.val = true
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3979
		{
			sqlVAL.union.val = false
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3987
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3990
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3992
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3995
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4003
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4013
		{
			sqlVAL.union.val = &tree.ShowTables{ObjectNamePrefix: tree.ObjectNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4023
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4026
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4029
		{
			sqlVAL.union.val = true
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4030
		{
			sqlVAL.union.val = false
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4037
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4041
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4044
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4051
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4055
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4058
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4065
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4069
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4076
		{
			sqlVAL.union.val = &tree.ShowSavepointStatus{}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4079
		{
			return helpWith(sqllex, "SHOW SAVEPOINT")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4087
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4092
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4097
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4101
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4109
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4113
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4117
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4130
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4133
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4141
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4144
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4148
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4152
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4156
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4164
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4179
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4186
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4190
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4201
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4215
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4224
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4229
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4233
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4236
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4240
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4247
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4252
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4372
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4376
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4380
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4419
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4423
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4428
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4432
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4448
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4452
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4473
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4476
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4484
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema: sqlDollar[3].str,
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4490
		{
			sqlVAL.union.val = &tree.CreateSchema{
				Schema:      sqlDollar[6].str,
				IfNotExists: true,
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4496
		{
			return helpWith(sqllex, "CREATE SCHEMA")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4535
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[10].union.storageParams(),
				OnCommit:      sqlDollar[11].union.createTableOnCommitSetting(),
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4550
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
				Temporary:     sqlDollar[2].union.persistenceType(),
				StorageParams: sqlDollar[13].union.storageParams(),
				OnCommit:      sqlDollar[14].union.createTableOnCommitSetting(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4567
		{
			sqlVAL.union.val = nil
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4571
		{

			sqlVAL.union.val = nil
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4577
		{

			sqlVAL.union.val = sqlDollar[3].union.storageParams()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4582
		{
			return unimplemented(sqllex, "create table with oids")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4588
		{
			sqlVAL.union.val = tree.CreateTableOnCommitUnset
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4592
		{

			sqlVAL.union.val = tree.CreateTableOnCommitPreserveRows
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4597
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "delete rows")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4602
		{

			return unimplementedWithIssueDetail(sqllex, 46556, "drop")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4613
		{
			sqlVAL.union.val = tree.StorageParam{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4619
		{
			sqlVAL.union.val = []tree.StorageParam{sqlDollar[1].union.storageParam()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = append(sqlDollar[1].union.storageParams(), sqlDollar[3].union.storageParam())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4629
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      sqlDollar[8].union.slct(),
				StorageParams: sqlDollar[6].union.storageParams(),
				OnCommit:      sqlDollar[10].union.createTableOnCommitSetting(),
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4642
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      sqlDollar[11].union.slct(),
				StorageParams: sqlDollar[9].union.storageParams(),
				OnCommit:      sqlDollar[13].union.createTableOnCommitSetting(),
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4656
		{
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4657
		{
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4658
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4676
		{
			sqlVAL.union.val = true
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4677
		{
			sqlVAL.union.val = true
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4678
		{
			sqlVAL.union.val = false
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4682
		{
			sqlVAL.union.val = true
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4683
		{
			sqlVAL.union.val = true
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4684
		{
			sqlVAL.union.val = true
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4685
		{
			sqlVAL.union.val = true
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4686
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4691
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4697
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4701
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4707
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4713
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4717
		{
			sqlVAL.union.val = &tree.LikeTableDef{
				Name:    sqlDollar[2].union.unresolvedObjectName().ToTableName(),
				Options: sqlDollar[3].union.likeTableOptionList(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), sqlDollar[3].union.likeTableOption())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4730
		{
			opt := sqlDollar[3].union.likeTableOption()
			opt.Excluded = true
			sqlVAL.union.val = append(sqlDollar[1].union.likeTableOptionList(), opt)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = []tree.LikeTableOption(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4741
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding comments")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4742
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptConstraints}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4743
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptDefaults}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4744
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding identity")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4745
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptGenerated}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4746
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptIndexes}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4747
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding statistics")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4748
		{
			return unimplementedWithIssueDetail(sqllex, 47071, "like table in/excluding storage")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4749
		{
			sqlVAL.union.val = tree.LikeTableOption{Opt: tree.LikeTableOptAll}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4754
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4770
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4775
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4780
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4786
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.str = ""
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4806
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4813
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4820
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 831:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4836
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4846
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 834:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4856
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4870
		{
			typ := sqlDollar[2].union.typeReference()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, tree.IsReferenceSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4885
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4891
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4895
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4899
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4903
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4907
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4911
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4915
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4933
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4937
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4941
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4945
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4949
		{
			sqlVAL.union.val = tree.ShardedPrimaryKeyConstraint{
				Sharded:      true,
				ShardBuckets: sqlDollar[8].union.expr(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4956
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4960
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4964
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4974
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4978
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4982
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4989
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4995
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Sharded:     sqlDollar[6].union.shardedIndexDef(),
				Storing:     sqlDollar[7].union.nameList(),
				Interleave:  sqlDollar[8].union.interleave(),
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5006
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Sharded:     sqlDollar[7].union.shardedIndexDef(),
					Storing:     sqlDollar[8].union.nameList(),
					Interleave:  sqlDollar[9].union.interleave(),
					PartitionBy: sqlDollar[10].union.partitionBy(),
				},
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5019
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5029
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5041
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5046
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5052
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5058
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5069
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:    sqlDollar[4].union.idxElems(),
					Sharded:    sqlDollar[6].union.shardedIndexDef(),
					Interleave: sqlDollar[7].union.interleave(),
				},
				PrimaryKey: true,
			}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5081
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5092
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5099
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 869:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5103
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5109
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5119
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5134
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5141
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5147
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5158
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5162
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5178
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5184
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5188
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5194
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5199
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5200
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5201
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5202
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5203
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5204
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5222
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5226
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 895:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5232
		{
			sqlVAL.union.val = &tree.ShardedIndexDef{
				ShardBuckets: sqlDollar[6].union.expr(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5238
		{
			sqlVAL.union.val = (*tree.ShardedIndexDef)(nil)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5244
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5248
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5268
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5272
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5276
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5280
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5289
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5293
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5297
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5301
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5311
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5317
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5325
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5329
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5333
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5337
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5341
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5360
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name:      name,
				Temporary: sqlDollar[2].union.persistenceType(),
				Options:   sqlDollar[5].union.seqOpts(),
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5369
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{
				Name: name, Options: sqlDollar[8].union.seqOpts(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5377
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5381
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5384
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5385
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5388
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.typeReference().SQLString())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5389
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5391
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5392
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: nil}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5393
		{
			varName, err := sqlDollar[3].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}
			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[3].union.unresolvedName())))
				return 1
			}
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptOwnedBy, ColumnItemVal: columnItem}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5403
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5406
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5408
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5410
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5412
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5413
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5415
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5416
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5418
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5428
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5431
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5435
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[2].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5439
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: tree.DNull}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5449
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5453
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true, KVOptions: sqlDollar[7].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5456
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5464
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[3].union.expr(), KVOptions: sqlDollar[4].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5468
		{
			sqlVAL.union.val = &tree.AlterRole{Name: sqlDollar[5].union.expr(), IfExists: true, KVOptions: sqlDollar[6].union.kvOptions(), IsRole: sqlDollar[2].union.bool()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5471
		{
			return helpWith(sqllex, "ALTER ROLE")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5477
		{
			sqlVAL.union.val = true
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5481
		{

			sqlVAL.union.val = true
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5486
		{
			sqlVAL.union.val = false
		}
	case 950:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5496
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: false,
				Replace:     false,
			}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5510
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[8].union.nameList(),
				AsSource:    sqlDollar[10].union.slct(),
				Temporary:   sqlDollar[4].union.persistenceType(),
				IfNotExists: false,
				Replace:     true,
			}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5522
		{
			name := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[9].union.nameList(),
				AsSource:    sqlDollar[11].union.slct(),
				Temporary:   sqlDollar[2].union.persistenceType(),
				IfNotExists: true,
				Replace:     false,
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5533
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5537
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5545
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5549
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: nil}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5557
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[2].union.kvOption())
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5567
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5571
		{
			sqlVAL.union.val = nil
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5577
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5581
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(fmt.Sprintf("%s_%s", sqlDollar[1].str, sqlDollar[2].str)), Value: tree.DNull}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5586
		{
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5587
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5597
		{
			sqlVAL.union.val = &tree.CreateType{
				TypeName:   sqlDollar[3].union.unresolvedObjectName(),
				Variety:    tree.Enum,
				EnumLabels: sqlDollar[7].union.strs(),
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5604
		{
			return helpWith(sqllex, "CREATE TYPE")
		}
	case 970:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5606
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5608
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5610
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5612
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5614
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5618
		{
			sqlVAL.union.val = sqlDollar[1].union.strs()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.union.val = []string(nil)
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 979:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
//line sql-gen.y:5650
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[5].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Columns:      sqlDollar[10].union.idxElems(),
				Sharded:      sqlDollar[12].union.shardedIndexDef(),
				Storing:      sqlDollar[13].union.nameList(),
				Interleave:   sqlDollar[14].union.interleave(),
				PartitionBy:  sqlDollar[15].union.partitionBy(),
				Inverted:     sqlDollar[8].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-19 : sqlpt+1]
//line sql-gen.y:5666
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[8].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Sharded:      sqlDollar[15].union.shardedIndexDef(),
				Storing:      sqlDollar[16].union.nameList(),
				Interleave:   sqlDollar[17].union.interleave(),
				PartitionBy:  sqlDollar[18].union.partitionBy(),
				Inverted:     sqlDollar[11].union.bool(),
				Concurrently: sqlDollar[4].union.bool(),
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5683
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[6].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				Columns:      sqlDollar[10].union.idxElems(),
				Storing:      sqlDollar[12].union.nameList(),
				Interleave:   sqlDollar[13].union.interleave(),
				PartitionBy:  sqlDollar[14].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5698
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:         tree.Name(sqlDollar[9].str),
				Table:        table,
				Unique:       sqlDollar[2].union.bool(),
				Inverted:     true,
				IfNotExists:  true,
				Columns:      sqlDollar[13].union.idxElems(),
				Storing:      sqlDollar[15].union.nameList(),
				Interleave:   sqlDollar[16].union.interleave(),
				PartitionBy:  sqlDollar[17].union.partitionBy(),
				Concurrently: sqlDollar[5].union.bool(),
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5713
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5716
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5717
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5721
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5736
		{
			sqlVAL.union.val = false
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = true
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5746
		{
			sqlVAL.union.val = false
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5752
		{
			sqlVAL.union.val = true
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = false
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5762
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5775
		{

			e := sqlDollar[1].union.expr()
			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: dir, NullsOrder: nullsOrder}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5797
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5798
		{
			sqlVAL.str = ""
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5806
		{
			sqlVAL.union.val = tree.Descending
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5810
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5816
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5822
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5828
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5836
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5842
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5850
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5856
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5868
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5873
		{
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5874
		{
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5877
		{
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5878
		{
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5886
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5889
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5899
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5908
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5911
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5919
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5922
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5926
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5927
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5928
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5944
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5947
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5949
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5952
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5962
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5965
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5967
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5970
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5974
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5979
		{
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5980
		{
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5981
		{
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5991
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5995
		{
			sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[4].str)}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5998
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6001
		{
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6002
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6006
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6016
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6020
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6026
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6030
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6043
		{
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6045
		{
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6049
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6054
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6058
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6062
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6068
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6074
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6080
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:6104
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6114
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6118
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6122
		{
			sqlVAL.str = ""
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6128
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6132
		{
			sqlVAL.str = ""
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.str = ""
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6148
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6152
		{
			sqlVAL.str = ""
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6157
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6158
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6170
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6177
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6184
		{
			return helpWith(sqllex, "INSERT")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6195
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6202
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6206
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6215
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6220
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6226
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6234
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6240
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6244
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6264
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6268
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6272
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6278
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6281
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6282
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6284
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6290
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6295
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6299
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:6316
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6328
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6334
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6340
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6357
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6360
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6364
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6407
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6432
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6436
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[3].union.lockingClause()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6444
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6448
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[5].union.limit(), Locking: sqlDollar[4].union.lockingClause()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), Locking: sqlDollar[5].union.lockingClause()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6465
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6466
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6469
		{
			sqlVAL.union.val = sqlDollar[1].union.lockingClause()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6470
		{
			sqlVAL.union.val = (tree.LockingClause)(nil)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = tree.LockingClause{sqlDollar[1].union.lockingItem()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = append(sqlDollar[1].union.lockingClause(), sqlDollar[2].union.lockingItem())
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = &tree.LockingItem{
				Strength:   sqlDollar[1].union.lockingStrength(),
				Targets:    sqlDollar[2].union.tableNames(),
				WaitPolicy: sqlDollar[3].union.lockingWaitPolicy(),
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6493
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6494
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6496
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.union.val = tree.LockWaitBlock
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.union.val = tree.LockWaitSkip
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6505
		{
			sqlVAL.union.val = tree.LockWaitError
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6510
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6545
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6546
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6547
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6569
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6582
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6596
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6608
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6612
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6621
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6645
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6652
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6664
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6668
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = &tree.With{Recursive: true, CTEList: sqlDollar[3].union.ctes()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6689
		{
			sqlVAL.union.val = true
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6693
		{
			sqlVAL.union.val = false
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6699
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Mtr: tree.MaterializeClause{
					Set: false,
				},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Mtr: tree.MaterializeClause{
					Materialize: sqlDollar[4].union.bool(),
					Set:         true,
				},
				Stmt: sqlDollar[6].union.stmt(),
			}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6721
		{
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6722
		{
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6726
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = nil
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6735
		{
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6736
		{
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6740
		{
			sqlVAL.union.val = true
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6744
		{
			sqlVAL.union.val = false
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6748
		{
			sqlVAL.union.val = false
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.union.val = true
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6760
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6765
		{
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6766
		{
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6770
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6786
		{
			sqlVAL.union.val = tree.OrderBy([]*tree.Order{sqlDollar[3].union.order()})
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqllex.Error("multiple ORDER BY clauses are not supported in this function")
			return 1
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6797
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6801
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6807
		{

			dir := sqlDollar[2].union.dir()
			nullsOrder := sqlDollar[3].union.nullsOrder()

			if nullsOrder != tree.DefaultNullsOrder {
				if dir == tree.Descending && nullsOrder == tree.NullsFirst {
					return unimplementedWithIssue(sqllex, 6224)
				}
				if dir != tree.Descending && nullsOrder == tree.NullsLast {
					return unimplementedWithIssue(sqllex, 6224)
				}
			}
			sqlVAL.union.val = &tree.Order{
				OrderType:  tree.OrderByColumn,
				Expr:       sqlDollar[1].union.expr(),
				Direction:  dir,
				NullsOrder: nullsOrder,
			}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6828
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6833
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6845
		{
			sqlVAL.union.val = tree.NullsFirst
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6849
		{
			sqlVAL.union.val = tree.NullsLast
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = tree.DefaultNullsOrder
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6862
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6871
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6882
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6887
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6895
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6909
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6913
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6928
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6950
		{
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6951
		{
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6954
		{
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6955
		{
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6982
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6986
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7008
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7010
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7022
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7025
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7047
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7052
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7057
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7068
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7075
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7080
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7099
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7138
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7148
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7158
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7183
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7194
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7218
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7224
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
				Columns: sqlDollar[3].union.tableRefCols(),
				As:      sqlDollar[4].union.aliasClause(),
			}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7257
		{
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7259
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7262
		{
			sqlVAL.union.val = nil
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7268
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7278
		{
			sqlVAL.union.val = true
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7282
		{
			sqlVAL.union.val = false
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7302
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7306
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7310
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7314
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7318
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7322
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7328
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7352
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7358
		{
			sqlVAL.str = tree.AstFull
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7366
		{
			sqlVAL.str = tree.AstRight
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7370
		{
			sqlVAL.str = tree.AstInner
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7376
		{
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7377
		{
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7398
		{
			sqlVAL.str = tree.AstHash
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.str = ""
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7434
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7439
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7444
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7458
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7462
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7468
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7474
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       sqlDollar[1].union.tblExpr(),
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7484
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7513
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.typeReference()
			}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7526
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7534
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7535
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.typeReference(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = sqlDollar[1].union.typeReference()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7553
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7555
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7563
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7576
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7583
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7592
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else if sqlDollar[1].str == "serial" {
				switch sqllex.(*lexer).nakedIntType.Width() {
				case 32:
					sqlVAL.union.val = &types.Serial4Type
				default:
					sqlVAL.union.val = &types.Serial8Type
				}
			} else {

				var ok bool
				var err error
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						aIdx := sqllex.(*lexer).NewAnnotation()
						sqlVAL.union.val, err = tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
						if err != nil {
							return setErr(sqllex, err)
						}
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = sqlDollar[1].union.typeReference()
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7639
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "point")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7640
		{
			return unimplementedWithIssueDetail(sqllex, 21286, "polygon")
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7643
		{
			sqlVAL.union.val = geopb.Shape_Point
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = geopb.Shape_LineString
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7645
		{
			sqlVAL.union.val = geopb.Shape_Polygon
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = geopb.Shape_GeometryCollection
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7647
		{
			sqlVAL.union.val = geopb.Shape_MultiPolygon
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = geopb.Shape_MultiLineString
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.union.val = geopb.Shape_MultiPoint
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7650
		{
			sqlVAL.union.val = geopb.Shape_Geometry
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7653
		{
			sqlVAL.union.val = types.Geography
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = types.Geometry
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.DefaultGeometrySRID)
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.DefaultGeographySRID)
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = types.MakeGeometry(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = types.MakeGeography(sqlDollar[3].union.geoFigure(), geopb.SRID(sqlDollar[5].union.int32()))
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7690
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7698
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = nil
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7713
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7717
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7721
		{
			sqlVAL.union.val = types.Int2
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7725
		{
			sqlVAL.union.val = types.Int
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7729
		{
			sqlVAL.union.val = types.Float4
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7737
		{
			sqlVAL.union.val = types.Float
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7741
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7749
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7757
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7765
		{
			sqlVAL.union.val = types.Bool
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7771
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = types.Float
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7790
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7796
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7818
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = types.String
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = true
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = false
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7863
		{
			sqlVAL.union.val = types.Date
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7867
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimeTZ
			} else {
				sqlVAL.union.val = types.Time
			}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7875
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimeTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTime(prec)
			}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = types.TimeTZ
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7889
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimeTZ(prec)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7898
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7906
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7919
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7923
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7933
		{
			sqlVAL.union.val = true
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = false
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7935
		{
			sqlVAL.union.val = false
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7939
		{
			sqlVAL.union.val = types.Interval
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = types.MakeInterval(sqlDollar[2].union.intervalTypeMetadata())
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7947
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.MakeInterval(types.IntervalTypeMetadata{Precision: prec, PrecisionIsSet: true})
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_YEAR,
				},
			}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_DAY,
				},
			}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = sqlDollar[1].union.intervalTypeMetadata()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8004
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_YEAR,
					DurationType:     types.IntervalDurationType_MONTH,
				},
			}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_HOUR,
				},
			}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_DAY,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8031
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_DAY
			sqlVAL.union.val = ret
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					FromDurationType: types.IntervalDurationType_HOUR,
					DurationType:     types.IntervalDurationType_MINUTE,
				},
			}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8046
		{
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_HOUR
			sqlVAL.union.val = ret
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = sqlDollar[3].union.intervalTypeMetadata()
			ret := sqlDollar[3].union.intervalTypeMetadata()
			ret.DurationField.FromDurationType = types.IntervalDurationType_MINUTE
			sqlVAL.union.val = ret
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = nil
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
			}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8076
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			sqlVAL.union.val = types.IntervalTypeMetadata{
				DurationField: types.IntervalDurationField{
					DurationType: types.IntervalDurationType_SECOND,
				},
				PrecisionIsSet: true,
				Precision:      prec,
			}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8113
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.CastShort}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.AnnotateShort}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8125
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[5].union.expr(), sqlDollar[1].union.expr()}}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8136
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8149
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnarySqrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8153
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryCbrt, Expr: sqlDollar[2].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8157
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8161
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8165
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8169
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8181
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8185
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8189
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8209
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8225
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8233
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8281
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8289
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8293
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8297
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8301
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8357
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8361
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8373
		{
			sqlVAL.union.val = &tree.IsNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8377
		{
			sqlVAL.union.val = &tree.IsNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = &tree.IsNotNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = &tree.IsNotNullExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8388
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8390
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8394
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8410
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.typeReferences()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.typeReferences()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8438
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8442
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8446
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8450
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8454
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8476
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8488
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.CastShort}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8492
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.typeReference(), SyntaxMode: tree.AnnotateShort}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8496
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8500
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8504
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8508
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8512
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8516
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8520
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8524
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8528
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8532
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8536
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8540
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8556
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8560
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8564
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8580
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8584
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8588
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8592
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.typeReferences()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8596
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.typeReferences()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8610
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8618
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8654
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8658
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8662
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8666
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8670
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8675
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8677
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8681
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8685
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8689
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8701
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8710
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8717
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8721
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8725
		{
			idx, err := sqlDollar[6].union.numVal().AsInt32()
			if err != nil || idx <= 0 {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ByIndex: true, ColIndex: int(idx - 1)}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8731
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8736
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8740
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8744
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8748
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8752
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8755
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8759
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8763
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy(), AggType: tree.GeneralAgg}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8766
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8767
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8769
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy(), AggType: tree.GeneralAgg}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8775
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8779
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8782
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8791
		{
			name := sqlDollar[1].union.unresolvedName()
			if name.NumParts == 1 {
				typName := name.Parts[0]

				if typName == "char" {
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: types.MakeQChar(0), SyntaxMode: tree.CastPrepend}
				} else if typName == "serial" {
					switch sqllex.(*lexer).nakedIntType.Width() {
					case 32:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial4Type, SyntaxMode: tree.CastPrepend}
					default:
						sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: &types.Serial8Type, SyntaxMode: tree.CastPrepend}
					}
				} else {

					var typ tree.ResolvableTypeReference
					var ok bool
					var err error
					var unimp int
					typ, ok, unimp = types.TypeForNonKeywordTypeName(typName)
					if !ok {
						switch unimp {
						case 0:

							aIdx := sqllex.(*lexer).NewAnnotation()
							typ, err = name.ToUnresolvedObjectName(aIdx)
							if err != nil {
								return setErr(sqllex, err)
							}
						case -1:
							return unimplemented(sqllex, "type name "+typName)
						default:
							return unimplementedWithIssueDetail(sqllex, unimp, typName)
						}
					}
					sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: typ, SyntaxMode: tree.CastPrepend}
				}
			} else {
				aIdx := sqllex.(*lexer).NewAnnotation()
				res, err := name.ToUnresolvedObjectName(aIdx)
				if err != nil {
					return setErr(sqllex, err)
				}
				sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: res, SyntaxMode: tree.CastPrepend}
			}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8844
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8857
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			w := sqlDollar[2].union.expr().(*tree.FuncExpr)
			if w.AggType != 0 {
				f.AggType = w.AggType
				f.OrderBy = w.OrderBy
			}
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8869
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8878
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8879
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8884
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8888
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8892
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8898
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8902
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8906
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8910
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8914
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8918
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8924
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8928
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8932
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8936
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.typeReference(), SyntaxMode: tree.CastExplicit}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8940
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.typeReference(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8944
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8948
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8952
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8956
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8960
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8964
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8968
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8972
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8979
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8982
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8984
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8987
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8989
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8996
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9005
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9007
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9011
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9014
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9016
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9020
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9023
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9025
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9028
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9030
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9033
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9035
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9038
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9040
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9043
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9045
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9049
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9052
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9053
		{
			return unimplemented(sqllex, "treat")
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9055
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9067
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9071
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9074
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9076
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9079
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9085
		{
			sqlVAL.union.val = &tree.FuncExpr{OrderBy: sqlDollar[4].union.orderBy(), AggType: tree.OrderedSetAgg}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9089
		{
			sqlVAL.union.val = &tree.FuncExpr{}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9095
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9099
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9106
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9110
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9116
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9126
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9134
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9138
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9142
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:9149
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9169
		{
			sqlVAL.str = ""
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9175
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9179
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9185
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9193
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9201
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9209
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9215
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9228
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9256
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9260
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9264
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9268
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9275
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9284
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9288
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9292
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9296
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9301
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9314
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9318
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9325
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9337
		{
			sqlVAL.union.val = tree.Any
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9341
		{
			sqlVAL.union.val = tree.Some
		}
	case 1659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9345
		{
			sqlVAL.union.val = tree.All
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9350
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9351
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9352
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9353
		{
			sqlVAL.union.val = tree.Div
		}
	case 1664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9354
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9355
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9356
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9357
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9358
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9359
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9360
		{
			sqlVAL.union.val = tree.LT
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9361
		{
			sqlVAL.union.val = tree.GT
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9362
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9363
		{
			sqlVAL.union.val = tree.LE
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9364
		{
			sqlVAL.union.val = tree.GE
		}
	case 1675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9365
		{
			sqlVAL.union.val = tree.NE
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9369
		{
			sqlVAL.union.val = tree.Like
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9370
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9371
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9372
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9395
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9399
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9405
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9409
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9413
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9424
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9428
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9434
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9438
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9445
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9451
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9455
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9461
		{
			sqlVAL.union.val = []tree.ResolvableTypeReference{sqlDollar[1].union.typeReference()}
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9465
		{
			sqlVAL.union.val = append(sqlDollar[1].union.typeReferences(), sqlDollar[3].union.typeReference())
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9471
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9475
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9481
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9485
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9491
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9495
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9518
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9522
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9526
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9532
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9539
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9543
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9560
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9564
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9568
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9572
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9576
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9582
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9588
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9594
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9598
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9602
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9608
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9620
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9627
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:9637
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9643
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9647
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9654
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9660
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9664
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9671
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9677
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9686
		{
		}
	case 1743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9687
		{
		}
	case 1744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9691
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9701
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9710
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9714
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9718
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9726
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9736
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9759
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9767
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.ObjectName)
			name.ObjectName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9790
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9799
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9803
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9807
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9811
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9817
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9821
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9836
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9840
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9852
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9856
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9865
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9876
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9885
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9893
		{
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithTypeMetadata(sqlDollar[2].str, sqlDollar[3].union.intervalTypeMetadata())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9905
		{
			prec := sqlDollar[3].union.int32()
			if prec < 0 || prec > 6 {
				sqllex.Error(fmt.Sprintf("precision %d out of range", prec))
				return 1
			}
			d, err := tree.ParseDIntervalWithTypeMetadata(sqlDollar[5].str, types.IntervalTypeMetadata{
				Precision:      prec,
				PrecisionIsSet: true,
			})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10006
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10013
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1804:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10017
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1805:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:10021
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1807:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:10035
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1808:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10039
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10043
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10056
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10065
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:10083
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10096
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1818:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:10103
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:10128
		{
			sqlVAL.str = ""
		}
	case 1827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:10134
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:10138
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
