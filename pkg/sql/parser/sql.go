// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:588
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9572

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1043,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	181, 882,
	198, 882,
	213, 244,
	291, 244,
	299, 722,
	326, 244,
	335, 722,
	372, 722,
	396, 244,
	420, 722,
	-2, 0,
	-1, 74,
	213, 248,
	-2, 0,
	-1, 75,
	107, 1043,
	187, 1043,
	406, 1043,
	407, 1043,
	-2, 0,
	-1, 87,
	120, 1017,
	136, 1017,
	195, 1017,
	224, 1017,
	255, 1017,
	265, 1017,
	401, 1017,
	-2, 1004,
	-1, 117,
	126, 643,
	212, 643,
	293, 623,
	344, 623,
	389, 643,
	-2, 0,
	-1, 118,
	4, 1045,
	21, 1045,
	22, 1045,
	23, 1045,
	24, 1045,
	25, 1045,
	27, 1045,
	32, 1045,
	37, 1045,
	38, 1045,
	39, 1045,
	40, 1045,
	41, 1045,
	42, 1045,
	43, 1045,
	44, 1045,
	45, 1045,
	46, 1045,
	47, 1045,
	49, 1045,
	50, 1045,
	51, 1045,
	52, 1045,
	53, 1045,
	54, 1045,
	57, 1045,
	58, 1045,
	59, 1045,
	60, 1045,
	62, 1045,
	63, 1045,
	67, 1045,
	68, 1045,
	69, 1045,
	70, 1045,
	71, 1045,
	72, 1045,
	74, 1045,
	75, 1045,
	76, 1045,
	77, 1045,
	79, 1045,
	81, 1045,
	82, 1045,
	83, 1045,
	86, 1045,
	87, 1045,
	95, 1045,
	96, 1045,
	97, 1045,
	98, 1045,
	99, 1045,
	100, 1045,
	101, 1045,
	102, 1045,
	104, 1045,
	106, 1045,
	107, 1045,
	109, 1045,
	112, 1045,
	113, 1045,
	114, 1045,
	116, 1045,
	118, 1045,
	119, 1045,
	121, 1045,
	122, 1045,
	123, 1045,
	124, 1045,
	125, 1045,
	126, 1045,
	127, 1045,
	128, 1045,
	129, 1045,
	130, 1045,
	131, 1045,
	132, 1045,
	133, 1045,
	135, 1045,
	141, 1045,
	142, 1045,
	143, 1045,
	144, 1045,
	145, 1045,
	146, 1045,
	148, 1045,
	150, 1045,
	154, 1045,
	155, 1045,
	157, 1045,
	158, 1045,
	160, 1045,
	161, 1045,
	163, 1045,
	164, 1045,
	165, 1045,
	166, 1045,
	167, 1045,
	168, 1045,
	169, 1045,
	170, 1045,
	172, 1045,
	173, 1045,
	175, 1045,
	176, 1045,
	177, 1045,
	181, 1045,
	182, 1045,
	183, 1045,
	184, 1045,
	187, 1045,
	188, 1045,
	189, 1045,
	190, 1045,
	191, 1045,
	192, 1045,
	193, 1045,
	194, 1045,
	196, 1045,
	198, 1045,
	200, 1045,
	202, 1045,
	203, 1045,
	204, 1045,
	206, 1045,
	207, 1045,
	210, 1045,
	211, 1045,
	212, 1045,
	213, 1045,
	215, 1045,
	216, 1045,
	218, 1045,
	219, 1045,
	221, 1045,
	222, 1045,
	225, 1045,
	226, 1045,
	229, 1045,
	230, 1045,
	232, 1045,
	233, 1045,
	234, 1045,
	235, 1045,
	236, 1045,
	237, 1045,
	238, 1045,
	239, 1045,
	240, 1045,
	241, 1045,
	243, 1045,
	244, 1045,
	245, 1045,
	246, 1045,
	248, 1045,
	251, 1045,
	252, 1045,
	253, 1045,
	254, 1045,
	256, 1045,
	257, 1045,
	258, 1045,
	260, 1045,
	261, 1045,
	262, 1045,
	263, 1045,
	266, 1045,
	267, 1045,
	268, 1045,
	270, 1045,
	272, 1045,
	273, 1045,
	274, 1045,
	275, 1045,
	276, 1045,
	277, 1045,
	278, 1045,
	279, 1045,
	280, 1045,
	281, 1045,
	283, 1045,
	284, 1045,
	285, 1045,
	286, 1045,
	287, 1045,
	288, 1045,
	290, 1045,
	292, 1045,
	293, 1045,
	294, 1045,
	295, 1045,
	296, 1045,
	297, 1045,
	298, 1045,
	299, 1045,
	300, 1045,
	302, 1045,
	303, 1045,
	304, 1045,
	305, 1045,
	306, 1045,
	308, 1045,
	309, 1045,
	310, 1045,
	311, 1045,
	312, 1045,
	313, 1045,
	314, 1045,
	315, 1045,
	317, 1045,
	319, 1045,
	320, 1045,
	321, 1045,
	322, 1045,
	323, 1045,
	324, 1045,
	326, 1045,
	327, 1045,
	328, 1045,
	329, 1045,
	330, 1045,
	331, 1045,
	332, 1045,
	333, 1045,
	335, 1045,
	336, 1045,
	337, 1045,
	338, 1045,
	339, 1045,
	340, 1045,
	341, 1045,
	342, 1045,
	343, 1045,
	344, 1045,
	346, 1045,
	347, 1045,
	348, 1045,
	349, 1045,
	351, 1045,
	352, 1045,
	353, 1045,
	354, 1045,
	356, 1045,
	357, 1045,
	358, 1045,
	359, 1045,
	360, 1045,
	361, 1045,
	362, 1045,
	363, 1045,
	364, 1045,
	365, 1045,
	366, 1045,
	367, 1045,
	369, 1045,
	370, 1045,
	371, 1045,
	373, 1045,
	374, 1045,
	375, 1045,
	376, 1045,
	377, 1045,
	378, 1045,
	379, 1045,
	381, 1045,
	382, 1045,
	383, 1045,
	384, 1045,
	385, 1045,
	387, 1045,
	389, 1045,
	390, 1045,
	391, 1045,
	392, 1045,
	393, 1045,
	395, 1045,
	396, 1045,
	397, 1045,
	399, 1045,
	400, 1045,
	403, 1045,
	404, 1045,
	405, 1045,
	406, 1045,
	407, 1045,
	408, 1045,
	410, 1045,
	412, 1045,
	413, 1045,
	414, 1045,
	415, 1045,
	416, 1045,
	417, 1045,
	418, 1045,
	420, 1045,
	421, 1045,
	422, 1045,
	427, 1045,
	428, 1045,
	429, 1045,
	430, 1045,
	431, 1045,
	432, 1045,
	-2, 0,
	-1, 119,
	1, 935,
	202, 935,
	290, 935,
	297, 935,
	435, 935,
	458, 935,
	-2, 0,
	-1, 121,
	1, 935,
	458, 935,
	-2, 0,
	-1, 122,
	1, 935,
	458, 935,
	-2, 0,
	-1, 123,
	1, 939,
	458, 939,
	-2, 0,
	-1, 147,
	120, 1016,
	136, 1016,
	195, 1016,
	224, 1016,
	255, 1016,
	265, 1016,
	401, 1016,
	-2, 1013,
	-1, 179,
	4, 1052,
	5, 1052,
	6, 1052,
	7, 1052,
	8, 1052,
	9, 1052,
	10, 1052,
	21, 1052,
	22, 1052,
	23, 1052,
	24, 1052,
	25, 1052,
	27, 1052,
	32, 1052,
	33, 1052,
	37, 1052,
	38, 1052,
	39, 1052,
	40, 1052,
	41, 1052,
	42, 1052,
	43, 1052,
	44, 1052,
	45, 1052,
	46, 1052,
	47, 1052,
	49, 1052,
	50, 1052,
	51, 1052,
	52, 1052,
	53, 1052,
	54, 1052,
	55, 1052,
	56, 1052,
	57, 1052,
	58, 1052,
	59, 1052,
	60, 1052,
	62, 1052,
	63, 1052,
	65, 1052,
	67, 1052,
	68, 1052,
	69, 1052,
	70, 1052,
	71, 1052,
	72, 1052,
	74, 1052,
	75, 1052,
	76, 1052,
	77, 1052,
	79, 1052,
	81, 1052,
	82, 1052,
	83, 1052,
	85, 1052,
	86, 1052,
	87, 1052,
	88, 1052,
	89, 1052,
	90, 1052,
	91, 1052,
	92, 1052,
	93, 1052,
	94, 1052,
	95, 1052,
	96, 1052,
	97, 1052,
	98, 1052,
	99, 1052,
	100, 1052,
	101, 1052,
	102, 1052,
	103, 1052,
	104, 1052,
	106, 1052,
	107, 1052,
	109, 1052,
	112, 1052,
	113, 1052,
	114, 1052,
	116, 1052,
	118, 1052,
	119, 1052,
	121, 1052,
	122, 1052,
	123, 1052,
	124, 1052,
	125, 1052,
	126, 1052,
	127, 1052,
	128, 1052,
	129, 1052,
	130, 1052,
	131, 1052,
	132, 1052,
	133, 1052,
	134, 1052,
	135, 1052,
	141, 1052,
	142, 1052,
	143, 1052,
	144, 1052,
	145, 1052,
	146, 1052,
	148, 1052,
	150, 1052,
	153, 1052,
	154, 1052,
	155, 1052,
	157, 1052,
	158, 1052,
	160, 1052,
	161, 1052,
	163, 1052,
	164, 1052,
	165, 1052,
	166, 1052,
	167, 1052,
	168, 1052,
	169, 1052,
	170, 1052,
	171, 1052,
	172, 1052,
	173, 1052,
	175, 1052,
	176, 1052,
	177, 1052,
	181, 1052,
	182, 1052,
	183, 1052,
	184, 1052,
	186, 1052,
	187, 1052,
	188, 1052,
	189, 1052,
	190, 1052,
	191, 1052,
	192, 1052,
	193, 1052,
	194, 1052,
	196, 1052,
	198, 1052,
	199, 1052,
	200, 1052,
	201, 1052,
	202, 1052,
	203, 1052,
	204, 1052,
	205, 1052,
	206, 1052,
	207, 1052,
	210, 1052,
	211, 1052,
	212, 1052,
	213, 1052,
	215, 1052,
	216, 1052,
	218, 1052,
	219, 1052,
	220, 1052,
	221, 1052,
	222, 1052,
	223, 1052,
	225, 1052,
	226, 1052,
	229, 1052,
	230, 1052,
	232, 1052,
	233, 1052,
	234, 1052,
	235, 1052,
	236, 1052,
	237, 1052,
	238, 1052,
	239, 1052,
	240, 1052,
	241, 1052,
	242, 1052,
	243, 1052,
	244, 1052,
	245, 1052,
	246, 1052,
	247, 1052,
	248, 1052,
	249, 1052,
	250, 1052,
	251, 1052,
	252, 1052,
	253, 1052,
	254, 1052,
	256, 1052,
	257, 1052,
	258, 1052,
	261, 1052,
	262, 1052,
	263, 1052,
	266, 1052,
	267, 1052,
	268, 1052,
	269, 1052,
	270, 1052,
	271, 1052,
	272, 1052,
	273, 1052,
	274, 1052,
	275, 1052,
	276, 1052,
	277, 1052,
	278, 1052,
	279, 1052,
	280, 1052,
	281, 1052,
	283, 1052,
	284, 1052,
	285, 1052,
	286, 1052,
	287, 1052,
	288, 1052,
	290, 1052,
	292, 1052,
	293, 1052,
	294, 1052,
	295, 1052,
	296, 1052,
	297, 1052,
	298, 1052,
	299, 1052,
	300, 1052,
	302, 1052,
	303, 1052,
	304, 1052,
	305, 1052,
	306, 1052,
	308, 1052,
	309, 1052,
	310, 1052,
	311, 1052,
	312, 1052,
	313, 1052,
	314, 1052,
	315, 1052,
	317, 1052,
	318, 1052,
	319, 1052,
	320, 1052,
	321, 1052,
	322, 1052,
	323, 1052,
	324, 1052,
	326, 1052,
	327, 1052,
	328, 1052,
	329, 1052,
	330, 1052,
	331, 1052,
	332, 1052,
	333, 1052,
	335, 1052,
	336, 1052,
	337, 1052,
	338, 1052,
	339, 1052,
	340, 1052,
	341, 1052,
	342, 1052,
	343, 1052,
	344, 1052,
	345, 1052,
	346, 1052,
	347, 1052,
	348, 1052,
	349, 1052,
	350, 1052,
	351, 1052,
	352, 1052,
	353, 1052,
	354, 1052,
	356, 1052,
	357, 1052,
	358, 1052,
	359, 1052,
	360, 1052,
	361, 1052,
	362, 1052,
	363, 1052,
	364, 1052,
	365, 1052,
	366, 1052,
	367, 1052,
	369, 1052,
	370, 1052,
	371, 1052,
	373, 1052,
	374, 1052,
	375, 1052,
	376, 1052,
	377, 1052,
	378, 1052,
	379, 1052,
	381, 1052,
	382, 1052,
	383, 1052,
	384, 1052,
	385, 1052,
	387, 1052,
	389, 1052,
	390, 1052,
	391, 1052,
	392, 1052,
	393, 1052,
	394, 1052,
	395, 1052,
	396, 1052,
	397, 1052,
	399, 1052,
	400, 1052,
	402, 1052,
	403, 1052,
	404, 1052,
	405, 1052,
	406, 1052,
	407, 1052,
	408, 1052,
	409, 1052,
	410, 1052,
	412, 1052,
	413, 1052,
	414, 1052,
	415, 1052,
	416, 1052,
	417, 1052,
	418, 1052,
	420, 1052,
	421, 1052,
	422, 1052,
	427, 1052,
	428, 1052,
	429, 1052,
	430, 1052,
	431, 1052,
	432, 1052,
	433, 1052,
	441, 1052,
	446, 1052,
	447, 1052,
	448, 1052,
	455, 1052,
	460, 1052,
	-2, 0,
	-1, 550,
	152, 1725,
	386, 1725,
	438, 1725,
	457, 1725,
	-2, 0,
	-1, 551,
	152, 1803,
	386, 1803,
	438, 1803,
	457, 1803,
	-2, 0,
	-1, 552,
	152, 1714,
	386, 1714,
	438, 1714,
	457, 1714,
	-2, 0,
	-1, 554,
	152, 1892,
	386, 1892,
	438, 1892,
	457, 1892,
	-2, 0,
	-1, 556,
	152, 1920,
	386, 1920,
	438, 1920,
	457, 1920,
	-2, 0,
	-1, 563,
	152, 1813,
	386, 1813,
	438, 1813,
	457, 1813,
	-2, 495,
	-1, 580,
	457, 1673,
	459, 1673,
	-2, 691,
	-1, 581,
	457, 1675,
	459, 1675,
	-2, 692,
	-1, 582,
	457, 1674,
	459, 1674,
	-2, 693,
	-1, 583,
	459, 1620,
	-2, 694,
	-1, 730,
	293, 624,
	344, 624,
	-2, 0,
	-1, 731,
	293, 623,
	344, 623,
	-2, 575,
	-1, 734,
	1, 653,
	454, 653,
	456, 653,
	458, 653,
	-2, 0,
	-1, 735,
	1, 690,
	149, 690,
	454, 690,
	456, 690,
	458, 690,
	-2, 0,
	-1, 743,
	1, 627,
	454, 627,
	456, 627,
	458, 627,
	-2, 0,
	-1, 746,
	1, 653,
	454, 653,
	456, 653,
	458, 653,
	-2, 0,
	-1, 747,
	1, 655,
	454, 655,
	456, 655,
	458, 655,
	-2, 0,
	-1, 748,
	1, 658,
	454, 658,
	456, 658,
	458, 658,
	-2, 0,
	-1, 752,
	1, 672,
	454, 672,
	456, 672,
	458, 672,
	-2, 0,
	-1, 753,
	1, 674,
	454, 674,
	456, 674,
	458, 674,
	-2, 0,
	-1, 795,
	136, 1054,
	224, 1054,
	255, 1054,
	-2, 1013,
	-1, 810,
	136, 1053,
	224, 1053,
	255, 1053,
	-2, 1013,
	-1, 834,
	457, 1672,
	-2, 503,
	-1, 863,
	455, 1664,
	-2, 1655,
	-1, 869,
	5, 1189,
	-2, 1705,
	-1, 870,
	5, 1190,
	-2, 1709,
	-1, 871,
	5, 1191,
	-2, 1708,
	-1, 872,
	5, 1192,
	-2, 1917,
	-1, 873,
	5, 1193,
	-2, 1815,
	-1, 874,
	5, 1194,
	-2, 1884,
	-1, 875,
	5, 1195,
	-2, 1886,
	-1, 876,
	5, 1196,
	-2, 1897,
	-1, 877,
	5, 1197,
	-2, 1887,
	-1, 878,
	5, 1198,
	-2, 1888,
	-1, 879,
	5, 1199,
	-2, 1704,
	-1, 880,
	5, 1200,
	-2, 1933,
	-1, 881,
	5, 1201,
	-2, 1778,
	-1, 882,
	5, 1202,
	-2, 1823,
	-1, 883,
	5, 1203,
	-2, 1825,
	-1, 884,
	5, 1204,
	-2, 1782,
	-1, 885,
	5, 1205,
	455, 1682,
	-2, 1673,
	-1, 886,
	5, 1261,
	455, 1261,
	-2, 1968,
	-1, 891,
	455, 1683,
	-2, 1674,
	-1, 893,
	5, 1209,
	-2, 1966,
	-1, 894,
	5, 1210,
	-2, 1967,
	-1, 895,
	5, 1211,
	-2, 1781,
	-1, 896,
	5, 1212,
	-2, 1979,
	-1, 897,
	5, 1213,
	-2, 1783,
	-1, 898,
	5, 1214,
	-2, 1784,
	-1, 899,
	5, 1215,
	-2, 1785,
	-1, 900,
	5, 1216,
	-2, 1948,
	-1, 901,
	5, 1217,
	-2, 1977,
	-1, 902,
	5, 1218,
	-2, 1761,
	-1, 903,
	5, 1219,
	-2, 1762,
	-1, 904,
	5, 1233,
	-2, 1960,
	-1, 906,
	5, 1208,
	-2, 1956,
	-1, 907,
	5, 1208,
	-2, 1955,
	-1, 908,
	5, 1208,
	-2, 1972,
	-1, 909,
	5, 1225,
	-2, 1950,
	-1, 910,
	5, 1226,
	-2, 1706,
	-1, 911,
	5, 1236,
	-2, 1949,
	-1, 912,
	5, 1238,
	-2, 1988,
	-1, 914,
	5, 1249,
	-2, 1735,
	-1, 915,
	5, 1260,
	-2, 1981,
	-1, 916,
	5, 1252,
	-2, 1982,
	-1, 917,
	5, 1260,
	-2, 1983,
	-1, 918,
	5, 1256,
	-2, 1984,
	-1, 919,
	5, 1176,
	-2, 1791,
	-1, 920,
	5, 1177,
	-2, 1792,
	-1, 921,
	457, 1670,
	-2, 1654,
	-1, 922,
	455, 2008,
	-2, 1671,
	-1, 942,
	5, 1244,
	-2, 1907,
	-1, 959,
	5, 1243,
	-2, 1989,
	-1, 969,
	5, 1245,
	421, 1245,
	-2, 1951,
	-1, 970,
	5, 1246,
	421, 1246,
	-2, 1952,
	-1, 1006,
	455, 1682,
	-2, 1673,
	-1, 1034,
	152, 1920,
	386, 1920,
	438, 1920,
	457, 1920,
	-2, 0,
	-1, 1035,
	1, 483,
	458, 483,
	-2, 947,
	-1, 1155,
	308, 1651,
	448, 1651,
	-2, 1650,
	-1, 1178,
	460, 1651,
	-2, 1652,
	-1, 1213,
	299, 722,
	420, 722,
	-2, 243,
	-1, 1233,
	279, 1041,
	-2, 855,
	-1, 1242,
	259, 1677,
	-2, 0,
	-1, 1306,
	1, 358,
	454, 358,
	456, 358,
	458, 358,
	-2, 1015,
	-1, 1309,
	4, 1987,
	11, 1987,
	12, 1987,
	14, 1987,
	15, 1987,
	16, 1987,
	17, 1987,
	18, 1987,
	19, 1987,
	21, 1987,
	22, 1987,
	23, 1987,
	24, 1987,
	25, 1987,
	27, 1987,
	30, 1987,
	32, 1987,
	34, 1987,
	37, 1987,
	38, 1987,
	39, 1987,
	40, 1987,
	41, 1987,
	42, 1987,
	43, 1987,
	44, 1987,
	45, 1987,
	46, 1987,
	47, 1987,
	49, 1987,
	50, 1987,
	51, 1987,
	52, 1987,
	53, 1987,
	54, 1987,
	57, 1987,
	58, 1987,
	59, 1987,
	60, 1987,
	62, 1987,
	63, 1987,
	64, 1987,
	67, 1987,
	68, 1987,
	69, 1987,
	70, 1987,
	71, 1987,
	72, 1987,
	73, 1987,
	74, 1987,
	75, 1987,
	76, 1987,
	77, 1987,
	79, 1987,
	80, 1987,
	81, 1987,
	82, 1987,
	83, 1987,
	85, 1987,
	86, 1987,
	87, 1987,
	95, 1987,
	96, 1987,
	97, 1987,
	98, 1987,
	99, 1987,
	100, 1987,
	101, 1987,
	102, 1987,
	104, 1987,
	106, 1987,
	107, 1987,
	109, 1987,
	112, 1987,
	113, 1987,
	114, 1987,
	116, 1987,
	118, 1987,
	119, 1987,
	121, 1987,
	122, 1987,
	123, 1987,
	124, 1987,
	125, 1987,
	126, 1987,
	127, 1987,
	128, 1987,
	129, 1987,
	130, 1987,
	131, 1987,
	132, 1987,
	133, 1987,
	137, 1987,
	138, 1987,
	139, 1987,
	140, 1987,
	141, 1987,
	142, 1987,
	143, 1987,
	144, 1987,
	145, 1987,
	146, 1987,
	147, 1987,
	148, 1987,
	150, 1987,
	153, 1987,
	154, 1987,
	155, 1987,
	157, 1987,
	158, 1987,
	160, 1987,
	161, 1987,
	163, 1987,
	164, 1987,
	165, 1987,
	166, 1987,
	167, 1987,
	168, 1987,
	169, 1987,
	170, 1987,
	171, 1987,
	172, 1987,
	173, 1987,
	174, 1987,
	175, 1987,
	176, 1987,
	177, 1987,
	178, 1987,
	179, 1987,
	180, 1987,
	182, 1987,
	183, 1987,
	184, 1987,
	186, 1987,
	187, 1987,
	188, 1987,
	189, 1987,
	190, 1987,
	191, 1987,
	192, 1987,
	193, 1987,
	194, 1987,
	196, 1987,
	198, 1987,
	199, 1987,
	200, 1987,
	201, 1987,
	202, 1987,
	203, 1987,
	204, 1987,
	205, 1987,
	206, 1987,
	207, 1987,
	208, 1987,
	209, 1987,
	210, 1987,
	211, 1987,
	212, 1987,
	213, 1987,
	215, 1987,
	216, 1987,
	218, 1987,
	219, 1987,
	220, 1987,
	221, 1987,
	222, 1987,
	223, 1987,
	225, 1987,
	226, 1987,
	229, 1987,
	230, 1987,
	231, 1987,
	232, 1987,
	233, 1987,
	234, 1987,
	235, 1987,
	236, 1987,
	237, 1987,
	238, 1987,
	239, 1987,
	240, 1987,
	241, 1987,
	242, 1987,
	243, 1987,
	244, 1987,
	245, 1987,
	246, 1987,
	249, 1987,
	251, 1987,
	252, 1987,
	253, 1987,
	254, 1987,
	256, 1987,
	257, 1987,
	258, 1987,
	261, 1987,
	262, 1987,
	263, 1987,
	264, 1987,
	266, 1987,
	267, 1987,
	268, 1987,
	270, 1987,
	272, 1987,
	273, 1987,
	274, 1987,
	275, 1987,
	276, 1987,
	277, 1987,
	278, 1987,
	279, 1987,
	280, 1987,
	281, 1987,
	283, 1987,
	284, 1987,
	285, 1987,
	286, 1987,
	287, 1987,
	288, 1987,
	290, 1987,
	292, 1987,
	293, 1987,
	294, 1987,
	295, 1987,
	296, 1987,
	297, 1987,
	298, 1987,
	299, 1987,
	300, 1987,
	302, 1987,
	303, 1987,
	304, 1987,
	305, 1987,
	306, 1987,
	307, 1987,
	308, 1987,
	309, 1987,
	310, 1987,
	311, 1987,
	312, 1987,
	313, 1987,
	314, 1987,
	315, 1987,
	317, 1987,
	318, 1987,
	319, 1987,
	320, 1987,
	321, 1987,
	322, 1987,
	323, 1987,
	324, 1987,
	325, 1987,
	326, 1987,
	327, 1987,
	328, 1987,
	329, 1987,
	330, 1987,
	331, 1987,
	332, 1987,
	333, 1987,
	335, 1987,
	336, 1987,
	337, 1987,
	338, 1987,
	339, 1987,
	340, 1987,
	341, 1987,
	342, 1987,
	343, 1987,
	344, 1987,
	346, 1987,
	347, 1987,
	348, 1987,
	349, 1987,
	350, 1987,
	351, 1987,
	352, 1987,
	353, 1987,
	354, 1987,
	356, 1987,
	357, 1987,
	358, 1987,
	359, 1987,
	360, 1987,
	361, 1987,
	362, 1987,
	363, 1987,
	364, 1987,
	365, 1987,
	366, 1987,
	367, 1987,
	369, 1987,
	370, 1987,
	371, 1987,
	373, 1987,
	374, 1987,
	375, 1987,
	376, 1987,
	377, 1987,
	378, 1987,
	379, 1987,
	381, 1987,
	382, 1987,
	383, 1987,
	384, 1987,
	385, 1987,
	387, 1987,
	389, 1987,
	390, 1987,
	391, 1987,
	392, 1987,
	393, 1987,
	395, 1987,
	396, 1987,
	397, 1987,
	399, 1987,
	400, 1987,
	403, 1987,
	404, 1987,
	405, 1987,
	406, 1987,
	407, 1987,
	408, 1987,
	410, 1987,
	412, 1987,
	413, 1987,
	414, 1987,
	415, 1987,
	416, 1987,
	417, 1987,
	418, 1987,
	420, 1987,
	421, 1987,
	422, 1987,
	427, 1987,
	428, 1987,
	429, 1987,
	430, 1987,
	431, 1987,
	432, 1987,
	433, 1987,
	434, 1987,
	436, 1987,
	437, 1987,
	438, 1987,
	439, 1987,
	440, 1987,
	441, 1987,
	443, 1987,
	444, 1987,
	445, 1987,
	446, 1987,
	447, 1987,
	448, 1987,
	449, 1987,
	450, 1987,
	451, 1987,
	453, 1987,
	456, 1987,
	457, 1987,
	459, 1987,
	460, 1987,
	-2, 0,
	-1, 1312,
	152, 1892,
	386, 1892,
	438, 1892,
	457, 1892,
	-2, 0,
	-1, 1341,
	293, 624,
	344, 624,
	-2, 0,
	-1, 1364,
	1, 619,
	454, 619,
	456, 619,
	458, 619,
	-2, 0,
	-1, 1365,
	1, 644,
	454, 644,
	456, 644,
	458, 644,
	-2, 0,
	-1, 1366,
	1, 626,
	454, 626,
	456, 626,
	458, 626,
	-2, 0,
	-1, 1368,
	1, 630,
	454, 630,
	456, 630,
	458, 630,
	-2, 0,
	-1, 1393,
	1, 1940,
	454, 1940,
	456, 1940,
	457, 1940,
	458, 1940,
	-2, 670,
	-1, 1394,
	1, 1890,
	454, 1890,
	456, 1890,
	457, 1890,
	458, 1890,
	-2, 671,
	-1, 1407,
	1, 942,
	458, 942,
	-2, 947,
	-1, 1412,
	136, 1053,
	224, 1053,
	255, 1053,
	-2, 1013,
	-1, 1505,
	120, 1017,
	136, 1017,
	195, 1017,
	224, 1017,
	255, 1017,
	265, 1017,
	401, 1017,
	-2, 1417,
	-1, 1558,
	456, 1555,
	-2, 0,
	-1, 1600,
	120, 1017,
	136, 1017,
	195, 1017,
	224, 1017,
	255, 1017,
	265, 1017,
	401, 1017,
	-2, 1126,
	-1, 1654,
	455, 1248,
	-2, 1236,
	-1, 1693,
	1, 485,
	458, 485,
	-2, 947,
	-1, 1887,
	1, 621,
	454, 621,
	456, 621,
	458, 621,
	-2, 0,
	-1, 1888,
	1, 646,
	454, 646,
	456, 646,
	458, 646,
	-2, 0,
	-1, 1971,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1297,
	-1, 1972,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1298,
	-1, 1973,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1299,
	-1, 1974,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1300,
	-1, 1975,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1301,
	-1, 1976,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1302,
	-1, 1977,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1303,
	-1, 1978,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1304,
	-1, 1990,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1316,
	-1, 1991,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1317,
	-1, 1992,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	208, 0,
	209, 0,
	436, 0,
	437, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1318,
	-1, 1995,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1323,
	-1, 2001,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1327,
	-1, 2003,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1335,
	-1, 2004,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1336,
	-1, 2005,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1337,
	-1, 2006,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1338,
	-1, 2100,
	5, 1205,
	152, 1566,
	455, 1682,
	-2, 1673,
	-1, 2101,
	152, 1567,
	-2, 1944,
	-1, 2102,
	152, 1568,
	-2, 1812,
	-1, 2103,
	152, 1569,
	-2, 1736,
	-1, 2104,
	152, 1570,
	-2, 1772,
	-1, 2105,
	152, 1571,
	-2, 1810,
	-1, 2106,
	152, 1572,
	-2, 1883,
	-1, 2182,
	1, 1127,
	2, 1127,
	85, 1127,
	120, 1127,
	136, 1127,
	149, 1127,
	153, 1127,
	159, 1127,
	162, 1127,
	186, 1127,
	195, 1127,
	205, 1127,
	220, 1127,
	224, 1127,
	242, 1127,
	255, 1127,
	259, 1127,
	265, 1127,
	316, 1127,
	318, 1127,
	401, 1127,
	411, 1127,
	424, 1127,
	425, 1127,
	426, 1127,
	435, 1127,
	454, 1127,
	456, 1127,
	458, 1127,
	459, 1127,
	-2, 1126,
	-1, 2187,
	455, 1656,
	-2, 1668,
	-1, 2208,
	455, 1247,
	-2, 1237,
	-1, 2445,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1325,
	-1, 2446,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1329,
	-1, 2452,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1331,
	-1, 2632,
	202, 947,
	290, 947,
	297, 947,
	435, 947,
	-2, 482,
	-1, 2723,
	279, 1041,
	-2, 855,
	-1, 2803,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1333,
	-1, 2810,
	199, 0,
	201, 0,
	249, 0,
	-2, 1352,
	-1, 2873,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1381,
	-1, 2874,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1382,
	-1, 2875,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1383,
	-1, 2879,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1387,
	-1, 2880,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1388,
	-1, 2881,
	14, 0,
	15, 0,
	16, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1389,
	-1, 2924,
	455, 1657,
	-2, 1669,
	-1, 3011,
	457, 2090,
	-2, 990,
	-1, 3057,
	199, 0,
	201, 0,
	249, 0,
	-2, 1353,
	-1, 3060,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1356,
	-1, 3061,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1358,
	-1, 3216,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1357,
	-1, 3217,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	171, 0,
	174, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1359,
	-1, 3227,
	199, 0,
	-2, 1390,
	-1, 3330,
	199, 0,
	-2, 1391,
	-1, 3446,
	41, 0,
	171, 0,
	223, 0,
	350, 0,
	433, 0,
	441, 0,
	-2, 1947,
}

const sqlPrivate = 57344

const sqlLast = 74263

var sqlAct = [...]int{

	891, 3257, 3540, 3282, 3445, 3260, 3455, 3424, 3160, 3530,
	2131, 3415, 3412, 2339, 1184, 2710, 3399, 3456, 3246, 3457,
	3493, 2348, 2841, 3289, 3334, 3043, 1007, 2340, 2173, 3184,
	1958, 3444, 1159, 2997, 3294, 2944, 3002, 3207, 1624, 211,
	2018, 211, 211, 820, 211, 211, 211, 211, 211, 3119,
	848, 211, 2732, 2174, 2706, 1420, 3007, 2984, 2734, 582,
	2739, 1298, 1294, 2945, 561, 2438, 1503, 811, 3231, 2380,
	1060, 2336, 1863, 2237, 2311, 2313, 2316, 211, 1595, 2608,
	999, 582, 2594, 2382, 2581, 2554, 863, 3042, 1593, 3091,
	2390, 1348, 2371, 1041, 1821, 1824, 2373, 678, 1747, 2570,
	2379, 2349, 2649, 1567, 2239, 1152, 1814, 2069, 2170, 1813,
	2896, 1738, 2175, 2473, 2553, 1531, 3335, 2049, 2296, 1955,
	2031, 819, 140, 890, 2434, 1513, 1951, 1171, 2389, 4,
	1776, 1765, 887, 86, 2271, 1725, 2177, 1048, 1723, 2314,
	1407, 1772, 2613, 3283, 1568, 32, 2061, 2015, 2272, 2708,
	2149, 2128, 1307, 1161, 1281, 1291, 1227, 1810, 2342, 1037,
	2383, 2043, 994, 808, 1577, 2157, 2139, 583, 1526, 205,
	1842, 2032, 204, 529, 211, 211, 973, 515, 2096, 1494,
	2229, 537, 1421, 147, 584, 1419, 578, 545, 991, 1809,
	555, 1830, 1305, 654, 1257, 148, 1737, 140, 623, 847,
	1181, 532, 1425, 996, 971, 673, 1406, 37, 36, 725,
	34, 25, 203, 23, 741, 21, 1239, 2913, 2469, 540,
	2914, 1864, 1367, 1433, 1434, 2341, 1844, 1504, 587, 2291,
	1045, 590, 3570, 2345, 1594, 2148, 3561, 1844, 1603, 2148,
	3560, 1045, 2798, 2148, 2258, 1844, 815, 179, 3539, 1436,
	587, 1781, 3522, 590, 2395, 3133, 3520, 2046, 3479, 3133,
	2748, 3480, 810, 3477, 815, 2899, 2148, 688, 1005, 3475,
	913, 3472, 2148, 2749, 3473, 3469, 1435, 846, 3470, 3466,
	1775, 3442, 1781, 816, 1781, 181, 3441, 1433, 1434, 1781,
	2630, 2148, 2488, 1476, 1477, 1478, 3440, 2489, 3395, 1856,
	1433, 1434, 2141, 3437, 3436, 1002, 1856, 1856, 3318, 3394,
	974, 974, 2201, 1436, 1856, 3384, 3383, 1482, 3133, 3133,
	977, 978, 3377, 2047, 796, 1781, 1436, 3371, 3369, 180,
	3133, 3133, 3332, 2899, 3315, 2201, 795, 1781, 3312, 173,
	1435, 3133, 1024, 3274, 1019, 179, 1781, 174, 75, 1455,
	1625, 3273, 3266, 1435, 1781, 1781, 803, 2140, 3265, 1441,
	179, 3133, 3237, 3218, 1202, 1781, 2201, 3205, 149, 3151,
	1856, 3196, 3157, 1196, 2761, 2148, 1781, 3150, 3132, 975,
	2148, 3133, 3059, 181, 3019, 2201, 1190, 2777, 2769, 2286,
	1463, 1464, 1465, 3013, 2048, 2045, 2777, 2982, 181, 2919,
	2983, 2909, 2920, 2902, 2910, 2834, 2148, 2822, 1781, 2776,
	2148, 2197, 2777, 1458, 1459, 1460, 1461, 1020, 2768, 2701,
	988, 2769, 1856, 1441, 2228, 2567, 2565, 180, 2148, 2148,
	2564, 1696, 2518, 2148, 818, 2148, 1441, 173, 2501, 889,
	2148, 2502, 180, 1456, 1781, 174, 2490, 1473, 2369, 2148,
	1483, 1860, 173, 2761, 1463, 1464, 1465, 2323, 2472, 2437,
	174, 1780, 2526, 2527, 179, 2214, 149, 2226, 2148, 2200,
	2195, 2189, 2201, 2148, 1781, 2147, 1859, 1563, 2148, 1860,
	1180, 149, 2750, 2168, 1350, 2167, 1845, 2166, 1433, 1434,
	2050, 1466, 1467, 1468, 1476, 1477, 1478, 1845, 2165, 1471,
	2164, 2751, 181, 2526, 2527, 1845, 979, 1456, 976, 1716,
	802, 801, 800, 179, 1436, 2418, 1504, 799, 1482, 798,
	211, 794, 793, 792, 2541, 791, 790, 789, 788, 1201,
	787, 786, 785, 784, 783, 723, 722, 1457, 1195, 721,
	720, 1435, 719, 718, 717, 716, 180, 715, 211, 714,
	1455, 181, 713, 179, 179, 211, 173, 1452, 712, 711,
	1168, 710, 709, 708, 174, 707, 706, 705, 117, 704,
	703, 211, 1063, 211, 211, 1164, 211, 1063, 211, 3108,
	2748, 702, 701, 1462, 700, 2344, 211, 211, 2044, 699,
	698, 181, 181, 697, 687, 180, 3070, 1020, 2532, 686,
	1061, 1457, 645, 1047, 644, 1172, 603, 1052, 2917, 2140,
	602, 211, 2206, 601, 1458, 1459, 1460, 1461, 593, 592,
	591, 1001, 568, 567, 1441, 211, 1474, 1164, 1164, 211,
	211, 1852, 211, 566, 149, 180, 180, 3462, 565, 2532,
	1174, 2778, 1843, 1369, 211, 173, 173, 549, 1473, 1020,
	1931, 1483, 211, 174, 174, 1463, 1464, 1465, 1437, 1438,
	1439, 1440, 1442, 1443, 201, 209, 211, 211, 211, 211,
	211, 1164, 1164, 200, 149, 149, 1164, 2087, 211, 1164,
	211, 211, 2542, 199, 198, 1450, 1451, 197, 2526, 2527,
	196, 2544, 2545, 2546, 211, 195, 179, 1035, 194, 193,
	1471, 192, 191, 190, 189, 179, 188, 3055, 1456, 1472,
	187, 186, 185, 184, 183, 1433, 1434, 1475, 179, 1446,
	1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443, 182, 2611,
	1164, 2526, 2527, 1302, 181, 1437, 1438, 1439, 1440, 1442,
	1443, 1436, 1189, 181, 1194, 1032, 1200, 2495, 2484, 2301,
	2541, 2190, 211, 1183, 2329, 587, 181, 1596, 590, 1056,
	2181, 1149, 1154, 2085, 2083, 211, 179, 1534, 1435, 2081,
	1182, 1721, 1866, 1533, 2079, 1610, 2543, 1520, 180, 1432,
	211, 1186, 1054, 1009, 1462, 3443, 1155, 180, 173, 3365,
	1178, 1322, 3325, 1534, 1537, 3321, 174, 173, 140, 1533,
	180, 3197, 1457, 3319, 181, 174, 1310, 3112, 3256, 816,
	173, 3192, 3090, 3089, 3077, 3076, 834, 149, 174, 3075,
	1532, 1285, 1288, 3074, 2532, 3068, 149, 1474, 1515, 1308,
	1318, 3067, 3066, 2981, 2933, 2932, 2930, 1321, 1377, 149,
	1865, 1240, 1240, 2923, 2893, 2892, 1241, 2891, 180, 2818,
	2814, 1441, 2606, 2561, 2552, 2525, 2522, 2521, 173, 2772,
	2519, 2508, 2507, 1413, 2506, 2503, 174, 2532, 2500, 2478,
	2526, 2527, 2477, 2544, 2545, 2546, 2547, 2470, 2370, 2182,
	2054, 1178, 1463, 1464, 1465, 1432, 1515, 149, 1786, 1368,
	1818, 2526, 2527, 987, 2537, 2535, 2536, 2528, 2529, 2530,
	2531, 2533, 2534, 1784, 1433, 1434, 1502, 3568, 2542, 1412,
	1472, 1431, 3538, 1447, 1448, 1454, 1453, 1449, 1475, 3537,
	1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443, 3478,
	1436, 2330, 2541, 1008, 2843, 1456, 1327, 3432, 2528, 2529,
	2530, 2531, 2533, 2534, 3430, 3362, 1342, 1717, 2273, 3359,
	3356, 2542, 3355, 1405, 3354, 3350, 2433, 1435, 1516, 1411,
	1514, 3344, 2526, 2527, 2587, 3316, 3311, 1410, 3310, 2021,
	3252, 3229, 3202, 211, 1418, 3201, 3182, 1408, 3179, 3173,
	3107, 3088, 3033, 3030, 2960, 2959, 2948, 2947, 2905, 816,
	845, 2809, 2779, 2762, 2726, 2695, 2674, 1574, 2652, 211,
	2651, 1565, 2543, 796, 2626, 2624, 2532, 3191, 2566, 211,
	1063, 211, 211, 211, 1414, 795, 1428, 1429, 2027, 582,
	211, 211, 2499, 1612, 582, 211, 1619, 2532, 2498, 1457,
	211, 2483, 2461, 1536, 1621, 1433, 1434, 2310, 1613, 1688,
	1441, 1538, 1691, 1535, 1527, 2543, 1524, 2210, 2209, 2185,
	2162, 2146, 2077, 1498, 1609, 1063, 1566, 1584, 2547, 1562,
	1561, 1436, 1560, 1559, 1558, 1557, 1556, 1555, 1554, 1552,
	1551, 1550, 1549, 1631, 1548, 1604, 1528, 1529, 1547, 1546,
	1005, 1545, 1005, 1722, 1544, 1571, 1572, 1543, 1435, 1542,
	2542, 2328, 1719, 1541, 1690, 1540, 1517, 1712, 2532, 1617,
	1499, 1497, 1492, 1031, 1022, 1015, 3337, 3178, 3109, 974,
	3063, 2929, 140, 2538, 2539, 2540, 2912, 1002, 2908, 1002,
	2537, 2535, 2536, 2528, 2529, 2530, 2531, 2533, 2534, 816,
	2487, 2086, 2203, 2652, 2163, 3241, 1589, 3111, 2526, 2527,
	2928, 1716, 1742, 1867, 1516, 1616, 2622, 1446, 1444, 1445,
	1437, 1438, 1439, 1440, 1442, 1443, 1495, 1605, 1601, 1051,
	1694, 2677, 1716, 2537, 2535, 2536, 2528, 2529, 2530, 2531,
	2533, 2534, 1003, 1036, 3357, 1693, 1716, 1564, 2735, 3195,
	1164, 211, 2542, 3152, 2543, 2915, 1049, 1063, 587, 2764,
	2763, 590, 1244, 587, 1042, 1715, 590, 1598, 1592, 1591,
	1731, 1590, 1588, 2275, 1587, 1620, 1586, 3295, 1534, 1045,
	1687, 1050, 1596, 1403, 1533, 1782, 2505, 2084, 2082, 2504,
	2443, 1547, 1622, 2080, 3322, 834, 211, 211, 2078, 834,
	1295, 2992, 3320, 211, 2260, 1046, 1547, 1147, 2958, 1702,
	1045, 1522, 1147, 211, 1349, 781, 1708, 2526, 2527, 1341,
	1864, 2712, 211, 2711, 211, 1045, 211, 3290, 1350, 1815,
	211, 3255, 2973, 2962, 2784, 1707, 1706, 1378, 2689, 1716,
	1713, 1760, 211, 3232, 3541, 2341, 2543, 2845, 3463, 2493,
	1762, 2062, 1043, 1764, 782, 2208, 1769, 1553, 1530, 1044,
	2704, 1806, 1746, 1656, 1217, 2538, 2539, 2540, 3474, 3471,
	1628, 2744, 2537, 2535, 2536, 2528, 2529, 2530, 2531, 2533,
	2534, 1819, 1164, 211, 1164, 2940, 3409, 211, 1773, 2998,
	1164, 2377, 3508, 1164, 211, 3376, 211, 211, 2530, 2531,
	2533, 2534, 1802, 2526, 2527, 3464, 1164, 1164, 1164, 3509,
	211, 1439, 1440, 1442, 1443, 211, 986, 1331, 1183, 1836,
	587, 1827, 640, 590, 582, 211, 1501, 211, 3143, 211,
	1042, 211, 2634, 211, 1710, 1182, 1433, 1434, 1794, 635,
	1205, 1768, 1215, 1042, 814, 2215, 777, 211, 2636, 814,
	211, 1779, 211, 2532, 3565, 3281, 775, 3276, 2241, 2975,
	1375, 211, 1436, 2971, 1739, 2232, 1834, 2528, 2529, 2530,
	2531, 2533, 2534, 809, 1883, 1919, 773, 2230, 1796, 1703,
	211, 1917, 1795, 762, 1869, 2970, 211, 1376, 2937, 1435,
	1051, 2936, 1735, 2482, 2481, 1726, 771, 1045, 2480, 1727,
	768, 2479, 641, 1001, 2447, 1001, 1063, 2293, 1051, 1805,
	634, 2285, 1216, 1740, 1741, 816, 1829, 1832, 1043, 813,
	1871, 2623, 2073, 2282, 813, 1044, 1847, 1657, 2263, 1849,
	2196, 1043, 1851, 2676, 1959, 1308, 1854, 2542, 1044, 2532,
	2002, 1736, 1050, 1409, 1179, 1443, 1374, 1938, 2244, 2072,
	1935, 2337, 1960, 3375, 1631, 1631, 2785, 1711, 2232, 1929,
	1050, 2046, 1878, 2013, 1329, 1250, 1248, 1249, 1247, 2222,
	2230, 1228, 1441, 1032, 1861, 1928, 830, 1324, 3262, 2033,
	2034, 1269, 3213, 1873, 1605, 2262, 1728, 2011, 2017, 815,
	2188, 1063, 2251, 587, 815, 765, 590, 2033, 2059, 1730,
	1416, 1742, 3434, 1463, 1464, 1465, 1886, 1226, 527, 1211,
	1899, 2250, 2017, 1388, 1833, 2828, 2787, 2786, 2415, 2063,
	1892, 2421, 2204, 2542, 2050, 1340, 2950, 2047, 2194, 2279,
	824, 2543, 522, 2095, 211, 2099, 2099, 2112, 1013, 2033,
	3545, 1614, 2132, 2134, 1225, 1930, 1933, 2138, 2534, 1717,
	2273, 2114, 2741, 1936, 3525, 1732, 1456, 2062, 633, 1927,
	632, 1030, 3498, 1045, 1213, 1063, 211, 1932, 1887, 1934,
	1717, 2273, 1325, 1937, 2686, 211, 1045, 2742, 211, 796,
	1364, 1063, 796, 796, 1717, 2273, 2243, 2681, 636, 1343,
	2186, 1947, 2007, 2825, 1948, 1949, 2435, 2436, 2048, 2045,
	2008, 816, 1012, 2009, 1893, 2424, 2014, 3351, 3508, 2187,
	2071, 2050, 2058, 1402, 816, 2075, 2076, 2543, 816, 1888,
	695, 643, 642, 1373, 2025, 812, 3526, 1759, 2183, 2023,
	812, 1365, 3555, 1010, 2741, 1005, 1733, 1744, 1350, 1228,
	2664, 672, 2169, 2029, 2635, 1147, 2179, 2180, 2620, 1733,
	1457, 2536, 2528, 2529, 2530, 2531, 2533, 2534, 2056, 1005,
	211, 1350, 2633, 1742, 2826, 1733, 2972, 2698, 1525, 3139,
	974, 3515, 1002, 3212, 1656, 1656, 2261, 1717, 1714, 2325,
	2670, 1628, 1628, 2663, 834, 2961, 2283, 1844, 3044, 2666,
	1147, 3223, 1063, 3420, 2050, 3361, 1002, 211, 2153, 2242,
	2123, 2423, 1733, 3497, 2107, 211, 816, 2053, 2144, 2145,
	2136, 3528, 2668, 1385, 2155, 140, 211, 2159, 2160, 2420,
	2227, 3169, 1491, 2198, 2497, 2158, 1330, 3546, 2178, 211,
	779, 1576, 1164, 1771, 778, 1601, 2535, 2536, 2528, 2529,
	2530, 2531, 2533, 2534, 769, 211, 1063, 2010, 569, 1164,
	1926, 211, 211, 1770, 1956, 1957, 2012, 1268, 2951, 2667,
	2050, 3263, 1918, 2205, 769, 1536, 2233, 815, 1916, 1631,
	1445, 1437, 1438, 1439, 1440, 1442, 1443, 211, 2231, 211,
	3177, 1766, 211, 3039, 770, 1210, 1729, 2154, 769, 2925,
	523, 1025, 2044, 2320, 3047, 1891, 2422, 211, 2213, 1580,
	3458, 1386, 1740, 1741, 211, 3460, 211, 2294, 211, 3507,
	2298, 1528, 1529, 3137, 211, 2265, 1352, 211, 2986, 211,
	2449, 211, 1147, 211, 211, 2216, 211, 1164, 1164, 1164,
	1767, 1164, 1583, 2212, 2280, 211, 211, 1424, 211, 211,
	2297, 3496, 524, 575, 2016, 1415, 1726, 1326, 3527, 211,
	1727, 1578, 1885, 2257, 2295, 3209, 1874, 2236, 2274, 2276,
	2277, 2278, 211, 211, 211, 766, 1581, 211, 3505, 211,
	1339, 1387, 211, 3533, 211, 3170, 211, 2352, 2245, 2247,
	525, 2408, 526, 2409, 2290, 2361, 2458, 757, 1579, 2365,
	2366, 2334, 3556, 2253, 696, 1763, 3392, 211, 211, 211,
	211, 2303, 211, 2305, 2264, 2583, 1029, 3300, 1011, 807,
	2456, 3086, 2391, 2393, 3181, 2396, 2397, 2281, 1183, 1328,
	587, 757, 2308, 590, 2218, 211, 2407, 577, 3461, 2730,
	2332, 3138, 3045, 2376, 2394, 2299, 2220, 1728, 2297, 2324,
	2297, 1155, 2354, 807, 1491, 1808, 2343, 1845, 2343, 1573,
	1730, 140, 2404, 2024, 1003, 1023, 1003, 1178, 3208, 2367,
	2426, 2347, 1999, 2398, 1582, 2399, 1018, 514, 2221, 2882,
	1743, 2358, 1704, 2359, 1423, 2360, 2614, 3268, 3267, 2362,
	758, 2219, 2419, 2368, 1308, 3142, 3250, 2378, 1001, 1656,
	3550, 3341, 3141, 1923, 2939, 2731, 1628, 2647, 2643, 1580,
	2333, 921, 2315, 3459, 1701, 2312, 1732, 1828, 1817, 1816,
	1790, 2450, 1001, 1748, 758, 2453, 1943, 2824, 2475, 2476,
	3363, 3400, 2267, 571, 211, 2150, 2454, 1423, 2413, 2459,
	3390, 1752, 1583, 2485, 1697, 1178, 1178, 1576, 2486, 3185,
	207, 576, 517, 518, 3003, 533, 517, 533, 543, 548,
	2309, 2156, 564, 3130, 3087, 1271, 1879, 2582, 3210, 3391,
	207, 2432, 1422, 3531, 3288, 3286, 1581, 3251, 2430, 2266,
	1699, 1147, 2471, 1353, 1749, 2654, 1178, 2653, 682, 2441,
	3127, 573, 207, 2907, 594, 2580, 1700, 2579, 1366, 2193,
	2429, 2152, 1997, 1424, 2192, 2000, 2151, 2191, 2322, 813,
	1733, 3346, 3161, 1242, 3258, 1580, 2883, 1256, 2700, 1254,
	1178, 2563, 2884, 1063, 2773, 1422, 1944, 2448, 570, 694,
	1243, 1826, 3128, 2568, 759, 816, 3403, 2577, 2575, 2576,
	3512, 2639, 211, 3532, 3284, 3092, 3140, 3549, 1583, 3347,
	211, 2574, 692, 2897, 1996, 2067, 3248, 211, 3514, 3476,
	211, 211, 1063, 3358, 1753, 574, 1147, 1578, 759, 685,
	3228, 1063, 2268, 2269, 1582, 3534, 572, 211, 3364, 3085,
	2455, 1915, 1581, 1400, 2601, 517, 517, 2492, 3249, 2457,
	2604, 2618, 211, 207, 3259, 1382, 2977, 2555, 1380, 2612,
	2808, 1363, 3404, 2591, 1579, 1361, 2629, 2782, 1005, 2589,
	211, 211, 211, 2602, 2603, 3348, 211, 2520, 2592, 211,
	2460, 2319, 2590, 1005, 1754, 1755, 211, 211, 211, 211,
	211, 2615, 1631, 1750, 2610, 2292, 2259, 2631, 760, 1359,
	1147, 2605, 211, 211, 211, 1002, 2609, 1729, 2211, 1611,
	2637, 211, 1005, 1608, 2586, 1401, 1147, 2558, 2559, 2560,
	1002, 1319, 1751, 211, 1164, 2569, 211, 2556, 1631, 1357,
	1355, 809, 760, 2417, 1063, 761, 3123, 2596, 1347, 3124,
	1582, 1998, 1063, 2640, 2641, 2644, 2584, 211, 1345, 1002,
	211, 211, 2416, 2600, 2401, 595, 596, 2627, 2628, 2655,
	211, 2658, 1925, 1164, 211, 2679, 1164, 1164, 1164, 761,
	2612, 1252, 1255, 211, 1253, 2616, 2617, 1896, 3126, 211,
	2680, 1689, 1539, 2715, 693, 211, 1323, 211, 1914, 2656,
	3129, 2660, 2661, 1399, 211, 1232, 2632, 1617, 3156, 2066,
	3454, 3149, 1507, 3397, 2638, 1381, 1512, 1756, 1379, 3116,
	2597, 1362, 1731, 690, 691, 1360, 3001, 1164, 1164, 767,
	2572, 2956, 2954, 2938, 2709, 211, 211, 1147, 2687, 211,
	683, 684, 2669, 2729, 2719, 2585, 1164, 1731, 2675, 2714,
	2671, 2672, 2696, 2682, 2673, 598, 597, 2737, 2746, 1358,
	2683, 2713, 2595, 2265, 2684, 2338, 2363, 2327, 2391, 211,
	2685, 1063, 211, 211, 1063, 211, 2697, 2391, 2691, 2326,
	1773, 1757, 2599, 2692, 2693, 2306, 1858, 2694, 1773, 1356,
	1354, 1147, 211, 2760, 1857, 1855, 1853, 1850, 1346, 1172,
	1848, 3125, 1061, 2406, 1846, 599, 600, 1837, 1344, 1787,
	1785, 1774, 2410, 1761, 2411, 1758, 2412, 2780, 1745, 1734,
	3494, 2836, 1656, 2743, 2733, 1178, 3304, 2439, 816, 1628,
	2771, 1251, 2752, 2745, 2775, 1063, 983, 2793, 1426, 2427,
	1618, 140, 3509, 3426, 2792, 1805, 1063, 3204, 211, 2759,
	2811, 772, 774, 3199, 3198, 2392, 1720, 2598, 1656, 1207,
	984, 2232, 1631, 2833, 3306, 1628, 805, 2249, 757, 1742,
	2232, 3012, 1889, 2230, 2839, 2232, 2781, 1397, 1398, 2754,
	2755, 2756, 2248, 2757, 2758, 1913, 1912, 2246, 1894, 3353,
	807, 3327, 2820, 2821, 1433, 1434, 3093, 2270, 2789, 2252,
	2440, 1016, 2621, 1430, 2289, 528, 2794, 2256, 2287, 2254,
	3396, 1631, 1631, 3366, 2796, 2288, 2990, 1726, 2255, 1003,
	1436, 1727, 1427, 2894, 2985, 2922, 806, 1631, 1631, 1026,
	2346, 1001, 1433, 1434, 2137, 1692, 564, 1623, 2648, 3529,
	2816, 211, 2619, 1003, 985, 3548, 1001, 1435, 2827, 2829,
	2830, 539, 207, 3368, 207, 207, 211, 1169, 1631, 207,
	2847, 758, 1063, 2846, 2842, 2835, 1333, 207, 1185, 2848,
	2526, 2527, 1332, 2849, 1504, 1001, 2070, 2916, 1433, 1434,
	2851, 211, 2224, 2223, 2927, 1435, 2831, 1178, 2859, 2886,
	2924, 2224, 1209, 2625, 2911, 2934, 2861, 2225, 2074, 2068,
	2041, 1384, 3064, 2926, 1383, 2823, 1231, 1502, 1728, 1500,
	207, 207, 3557, 1169, 2297, 3338, 1005, 1005, 3242, 2887,
	3240, 1730, 3172, 3110, 3036, 207, 3029, 211, 3018, 2996,
	2980, 2979, 2978, 1267, 2953, 2963, 2900, 2901, 140, 2898,
	2753, 2727, 2725, 2403, 2402, 2356, 2895, 207, 207, 207,
	207, 1169, 2331, 1002, 1002, 2307, 2974, 2028, 1911, 564,
	1910, 207, 207, 211, 211, 211, 1909, 1908, 2918, 1840,
	1839, 1838, 1820, 1798, 1797, 682, 1793, 1732, 1792, 1791,
	1063, 211, 1656, 1789, 2931, 1164, 1788, 1417, 1396, 1628,
	1395, 2967, 1280, 1279, 1278, 1277, 1276, 1275, 1274, 211,
	1273, 1272, 1270, 1265, 2942, 759, 1264, 1263, 1262, 1261,
	1631, 3014, 211, 211, 1164, 1164, 1164, 3005, 211, 211,
	211, 1224, 2976, 211, 211, 1223, 1222, 211, 211, 1221,
	1164, 1656, 1656, 207, 2265, 2994, 211, 1220, 1628, 1628,
	2968, 2969, 3004, 3008, 1219, 1218, 207, 1656, 1656, 1063,
	1212, 3009, 1206, 1204, 1628, 1628, 1203, 1028, 1147, 1027,
	2993, 548, 958, 868, 1695, 780, 627, 764, 2903, 2904,
	2989, 1733, 2352, 3261, 1390, 73, 3062, 1214, 1656, 2955,
	614, 2957, 67, 2995, 2952, 1628, 1005, 3408, 2999, 3025,
	2662, 3037, 1895, 3006, 211, 3010, 2690, 1147, 3058, 3016,
	3015, 2391, 1724, 1351, 1897, 3021, 1147, 804, 3020, 760,
	1631, 1956, 2852, 3049, 2588, 3026, 3027, 3031, 3035, 3032,
	3028, 2161, 3389, 1002, 3034, 3071, 2496, 1956, 2862, 834,
	3041, 3046, 3333, 3222, 2065, 1521, 69, 856, 941, 3168,
	3167, 3117, 834, 2941, 2381, 3165, 761, 3164, 823, 2736,
	1066, 1705, 862, 1718, 2207, 2098, 211, 3050, 2890, 1627,
	865, 1629, 867, 866, 1630, 1523, 1063, 864, 1063, 1626,
	3098, 2321, 2350, 1259, 745, 1709, 2022, 1805, 3038, 2060,
	2491, 1518, 836, 858, 2057, 1021, 835, 211, 211, 211,
	2593, 2740, 2921, 3190, 1942, 3084, 3105, 2431, 1939, 211,
	630, 2523, 2042, 1014, 2120, 211, 2113, 211, 1729, 1147,
	211, 211, 211, 3136, 2109, 1404, 1493, 1147, 2351, 1053,
	839, 211, 211, 1164, 3146, 3147, 1063, 3101, 1164, 2020,
	1656, 1509, 2790, 3135, 211, 1946, 1005, 1628, 2572, 3097,
	3095, 3096, 2465, 2747, 1005, 2607, 3102, 3100, 2026, 211,
	3106, 2609, 1063, 2202, 517, 1164, 3423, 1005, 3115, 1950,
	3113, 3114, 3134, 1807, 982, 981, 980, 1507, 3414, 1001,
	1001, 3411, 2707, 1002, 3103, 207, 1698, 207, 3144, 2217,
	207, 1002, 1485, 2716, 211, 852, 1177, 3187, 2573, 3159,
	1185, 2774, 1169, 207, 1002, 1063, 1229, 3153, 3203, 3352,
	207, 1185, 533, 1484, 776, 207, 1185, 3162, 3343, 3145,
	2648, 564, 3186, 3174, 2119, 3175, 3200, 3163, 3189, 1040,
	1039, 1063, 1038, 1061, 2646, 3554, 2949, 3154, 3188, 178,
	1656, 175, 3194, 177, 3158, 176, 1147, 1628, 2965, 1147,
	2699, 90, 1575, 35, 16, 116, 115, 114, 113, 3220,
	112, 111, 110, 109, 3234, 108, 107, 106, 105, 1063,
	3183, 104, 103, 102, 101, 3211, 3214, 211, 2115, 211,
	100, 1063, 211, 99, 98, 97, 1301, 3230, 96, 95,
	211, 3171, 1003, 3219, 94, 93, 3176, 3220, 3094, 1631,
	92, 91, 560, 557, 49, 48, 3099, 1003, 89, 1959,
	1147, 3245, 211, 88, 15, 33, 13, 53, 54, 3193,
	12, 1147, 1870, 28, 3235, 3236, 29, 79, 78, 27,
	211, 3239, 14, 26, 211, 24, 1003, 10, 8, 3238,
	7, 30, 211, 1585, 1805, 11, 3243, 1164, 3287, 1001,
	3292, 145, 211, 144, 1631, 72, 3279, 3264, 143, 71,
	142, 141, 70, 22, 9, 137, 3305, 3293, 2991, 66,
	139, 138, 207, 211, 211, 3297, 3277, 63, 3299, 3302,
	3285, 3244, 136, 135, 64, 134, 133, 65, 3291, 132,
	20, 5, 52, 211, 6, 3206, 3308, 3313, 3314, 211,
	2783, 3303, 83, 822, 3301, 84, 31, 2709, 61, 211,
	3008, 3307, 60, 59, 19, 51, 18, 207, 207, 169,
	168, 167, 166, 161, 207, 160, 165, 3340, 3331, 3349,
	3309, 3296, 163, 162, 1825, 164, 3324, 1147, 3317, 159,
	1631, 131, 171, 207, 170, 207, 157, 207, 153, 152,
	3326, 517, 3336, 156, 3339, 158, 155, 154, 3360, 151,
	172, 211, 1164, 1841, 130, 56, 129, 211, 128, 127,
	126, 1164, 1164, 125, 55, 3271, 3272, 1164, 3382, 17,
	2, 211, 1, 211, 0, 0, 0, 0, 3367, 0,
	0, 0, 3370, 0, 3373, 3387, 0, 3388, 3393, 1001,
	3374, 0, 0, 0, 564, 211, 0, 1001, 682, 0,
	0, 211, 211, 3405, 1063, 207, 3386, 1169, 207, 1656,
	1001, 0, 211, 211, 0, 3406, 1628, 3417, 3379, 0,
	3421, 564, 3380, 3381, 3427, 3429, 207, 3431, 3385, 0,
	3413, 3416, 1959, 0, 3410, 207, 207, 3296, 207, 3439,
	207, 3438, 207, 0, 207, 1147, 211, 0, 0, 0,
	0, 3418, 0, 0, 3433, 3435, 0, 3465, 1920, 3378,
	0, 1921, 0, 1922, 1656, 0, 0, 0, 0, 3453,
	3452, 1628, 207, 3450, 3451, 0, 1178, 0, 0, 0,
	0, 3481, 0, 0, 3467, 211, 3425, 0, 3483, 0,
	3485, 548, 3490, 0, 0, 0, 0, 564, 3491, 0,
	0, 3495, 3482, 0, 0, 211, 3487, 0, 0, 0,
	0, 0, 0, 0, 1147, 0, 3484, 0, 3486, 0,
	0, 3501, 3502, 3503, 0, 3506, 3504, 0, 0, 211,
	0, 211, 0, 3511, 3510, 3513, 0, 3519, 3517, 3521,
	0, 0, 0, 3516, 3270, 3524, 3413, 3518, 0, 3416,
	1656, 3523, 0, 0, 0, 0, 0, 1628, 2352, 3488,
	3489, 0, 3428, 3492, 0, 0, 0, 3536, 0, 3535,
	0, 0, 2119, 2119, 3543, 0, 3542, 0, 3544, 0,
	0, 0, 0, 0, 3547, 0, 0, 0, 3551, 2526,
	2527, 0, 2544, 2545, 2546, 0, 0, 0, 3552, 3553,
	0, 3558, 0, 3559, 3425, 0, 0, 0, 1433, 1434,
	0, 0, 3562, 3563, 3564, 3566, 3567, 0, 0, 0,
	1003, 1003, 0, 0, 3571, 0, 2115, 2115, 0, 3569,
	0, 1147, 0, 1147, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 517, 0, 2462, 2463, 0,
	0, 2541, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 2119, 2119, 2119, 0, 517, 0, 0,
	0, 0, 0, 0, 207, 0, 517, 0, 0, 207,
	0, 1147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3053, 1147, 0, 0,
	0, 0, 0, 0, 0, 2532, 0, 2115, 2115, 2115,
	0, 0, 0, 0, 1458, 1459, 1460, 1461, 1187, 0,
	1191, 0, 1197, 0, 1441, 0, 0, 0, 2549, 2550,
	2551, 1157, 0, 0, 0, 0, 0, 0, 0, 0,
	1147, 0, 0, 0, 0, 0, 0, 0, 0, 2526,
	2527, 533, 2544, 2545, 2546, 1463, 1464, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 1147, 0, 3054, 0,
	1003, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1233, 1236, 0, 0, 0, 2240, 2542,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 1147, 0, 1317, 207, 1456, 0,
	0, 2541, 0, 1320, 0, 0, 1147, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1314, 207, 0, 0, 0,
	0, 0, 207, 2300, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1370, 207, 0,
	1185, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2543, 1462, 2532, 1334, 0, 1825, 0,
	0, 0, 0, 0, 0, 2240, 0, 517, 0, 2355,
	0, 0, 1457, 0, 0, 207, 0, 0, 207, 0,
	207, 0, 207, 0, 207, 207, 0, 1169, 0, 0,
	1003, 0, 0, 0, 0, 0, 2374, 682, 1003, 2240,
	2240, 0, 0, 0, 0, 0, 0, 2547, 0, 0,
	207, 1003, 0, 0, 0, 0, 0, 0, 1486, 1487,
	1488, 1489, 1490, 207, 1169, 207, 0, 0, 1185, 0,
	1185, 0, 0, 1169, 0, 1169, 0, 1169, 0, 2542,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	0, 0, 0, 0, 1519, 2119, 2119, 0, 207, 207,
	1169, 207, 0, 207, 2538, 2539, 2540, 0, 0, 0,
	0, 2537, 2535, 2536, 2528, 2529, 2530, 2531, 2533, 2534,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443, 2526,
	2527, 0, 2544, 2545, 2546, 0, 0, 0, 0, 2115,
	2115, 0, 0, 0, 0, 0, 0, 0, 2813, 1147,
	0, 0, 0, 834, 0, 0, 0, 0, 0, 0,
	2804, 2805, 0, 2543, 0, 2119, 2119, 2119, 2119, 2119,
	2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119, 2119,
	2119, 2119, 2119, 2119, 0, 2119, 0, 0, 0, 0,
	0, 2541, 0, 0, 0, 0, 0, 2526, 2527, 0,
	2544, 2545, 2546, 1569, 1569, 1569, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1185, 2812, 0, 0, 2115,
	2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115,
	2115, 2115, 2115, 2115, 2115, 2115, 2115, 2115, 0, 2115,
	2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872,
	2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2541,
	2885, 0, 0, 0, 0, 2532, 0, 0, 0, 0,
	3130, 822, 0, 0, 2538, 2539, 2540, 0, 0, 0,
	0, 2537, 2535, 2536, 2528, 2529, 2530, 2531, 2533, 2534,
	0, 0, 0, 0, 0, 0, 0, 3127, 0, 0,
	3120, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3118, 0, 0, 2547, 207, 0,
	3122, 0, 0, 517, 0, 0, 0, 0, 0, 0,
	0, 517, 0, 2532, 0, 0, 0, 0, 517, 3128,
	0, 517, 517, 0, 0, 0, 0, 207, 0, 2542,
	0, 0, 0, 0, 0, 0, 0, 0, 1185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3121, 0, 1185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2547, 0, 0, 0, 0,
	0, 2240, 2240, 207, 0, 0, 0, 2240, 0, 0,
	2650, 0, 0, 0, 0, 0, 0, 2240, 2650, 2240,
	2650, 2650, 0, 0, 0, 0, 0, 2542, 0, 0,
	0, 0, 0, 207, 207, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1777, 0, 0, 0,
	0, 0, 0, 2543, 207, 0, 0, 1169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2703, 0,
	0, 2705, 2240, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 3123, 0, 207, 3124, 0, 0, 0,
	0, 0, 0, 0, 207, 0, 0, 0, 0, 0,
	1169, 0, 0, 0, 0, 0, 2240, 0, 517, 0,
	0, 2543, 0, 0, 0, 2240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3126, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3129, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 1825, 0, 0,
	1825, 0, 0, 0, 2538, 2539, 2540, 0, 0, 0,
	0, 2537, 2535, 2536, 2528, 2529, 2530, 2531, 2533, 2534,
	1862, 0, 0, 0, 0, 0, 1777, 0, 0, 1872,
	2788, 0, 0, 1169, 207, 0, 207, 0, 0, 0,
	0, 0, 1880, 1881, 1882, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2538, 2539, 2540, 0, 0, 0, 0, 2537,
	2535, 2536, 2528, 2529, 2530, 2531, 2533, 2534, 3125, 0,
	0, 0, 0, 0, 0, 1940, 0, 1945, 0, 0,
	0, 0, 0, 1952, 0, 0, 0, 0, 0, 2844,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 0, 2001, 57, 2003, 2004,
	2005, 2006, 0, 0, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 2030, 0,
	0, 0, 2119, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 1433, 1434, 0, 2055, 0, 0,
	0, 207, 207, 124, 0, 0, 0, 0, 0, 57,
	0, 0, 517, 0, 68, 0, 0, 0, 0, 0,
	1436, 58, 119, 0, 0, 2119, 0, 517, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 62, 2115, 0, 0, 2111,
	0, 2122, 2124, 2129, 74, 0, 0, 1435, 0, 0,
	39, 121, 1185, 0, 85, 0, 1455, 3227, 0, 75,
	82, 0, 0, 0, 38, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2115,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 42, 0, 0, 0, 0, 74, 0, 564, 122,
	3253, 0, 2807, 76, 0, 40, 85, 0, 0, 0,
	0, 75, 82, 0, 0, 0, 0, 0, 0, 0,
	1458, 1459, 1460, 1461, 0, 2119, 0, 0, 0, 0,
	1441, 892, 0, 0, 2987, 207, 207, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 0, 76, 0, 0, 0, 0,
	0, 1463, 1464, 1465, 0, 0, 0, 0, 0, 0,
	2240, 207, 0, 0, 0, 0, 0, 0, 0, 2115,
	0, 0, 0, 2374, 2374, 0, 0, 0, 0, 682,
	682, 2240, 0, 0, 1825, 1825, 0, 0, 682, 2240,
	3330, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	77, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 146, 80, 0, 81, 0, 0, 57, 0,
	676, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 77, 0, 179, 3072, 0, 2302, 0, 2304,
	44, 0, 0, 0, 62, 0, 677, 0, 2284, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 47, 146, 80, 0, 81, 0, 45,
	0, 0, 181, 123, 0, 68, 0, 0, 1457, 46,
	0, 0, 0, 0, 0, 0, 179, 0, 0, 0,
	0, 207, 0, 0, 0, 118, 0, 1185, 50, 207,
	0, 117, 0, 0, 0, 74, 0, 0, 150, 0,
	120, 0, 207, 0, 0, 85, 180, 0, 0, 0,
	75, 82, 0, 0, 181, 0, 173, 0, 2240, 2240,
	2240, 0, 0, 0, 174, 0, 0, 0, 0, 0,
	1185, 0, 0, 2364, 0, 0, 2240, 118, 2650, 0,
	0, 1185, 1185, 207, 0, 149, 0, 0, 0, 0,
	150, 0, 207, 207, 76, 0, 2414, 0, 180, 0,
	0, 0, 0, 0, 0, 2240, 0, 922, 173, 0,
	0, 0, 0, 0, 0, 0, 174, 0, 0, 0,
	3180, 0, 0, 0, 0, 0, 1446, 1444, 1445, 1437,
	1438, 1439, 1440, 1442, 1443, 0, 0, 149, 0, 0,
	3, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 1185, 0, 0, 0, 0,
	57, 0, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 2445,
	2446, 0, 0, 0, 0, 2452, 62, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 2466, 2467, 0, 0, 0, 0,
	2055, 0, 0, 0, 0, 0, 0, 68, 0, 2474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 146, 80, 0, 81, 0, 2240, 0,
	2650, 0, 0, 3247, 0, 2494, 0, 74, 0, 0,
	0, 207, 0, 0, 0, 179, 0, 85, 0, 0,
	2509, 0, 75, 82, 0, 0, 0, 677, 0, 0,
	117, 0, 0, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3247, 0, 181, 0, 2240, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 76, 0, 2129, 2129,
	2129, 0, 0, 1185, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 1569, 0, 0, 0, 0, 0, 150,
	0, 2578, 0, 0, 207, 207, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 173, 0, 0,
	0, 0, 0, 0, 2844, 174, 0, 0, 0, 0,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3247, 0, 0, 0, 0, 0, 675, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2199, 0, 822, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 1166, 0, 1065, 822,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 57, 0, 0, 0, 2650, 0,
	0, 0, 0, 0, 2665, 0, 58, 0, 0, 0,
	0, 0, 1185, 0, 1185, 146, 80, 0, 81, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 1166, 1166,
	0, 0, 0, 0, 0, 0, 3401, 179, 0, 0,
	0, 0, 1185, 207, 0, 0, 0, 0, 0, 677,
	0, 68, 117, 207, 2240, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2688, 0, 1166, 1166, 0, 181, 0, 1166, 0, 0,
	1166, 74, 0, 0, 0, 0, 0, 2844, 0, 0,
	0, 85, 0, 0, 2738, 0, 75, 82, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2720,
	0, 150, 2722, 2723, 2724, 0, 0, 0, 0, 180,
	0, 0, 0, 0, 0, 0, 2240, 0, 0, 173,
	0, 1166, 0, 0, 0, 0, 0, 174, 0, 0,
	76, 0, 0, 0, 0, 0, 3247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 2766, 2767, 0, 0, 0, 0, 0,
	1185, 0, 2240, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1777, 1433, 1434, 0, 2795, 0, 0, 0,
	1952, 0, 0, 0, 0, 0, 2799, 2800, 0, 0,
	2803, 0, 0, 0, 2806, 0, 0, 0, 0, 1436,
	0, 0, 0, 2810, 0, 0, 0, 0, 0, 0,
	0, 0, 2817, 0, 0, 2578, 0, 0, 0, 2526,
	2527, 0, 2544, 2545, 2546, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2837, 77, 208, 1068,
	208, 208, 1068, 0, 1068, 208, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 2853, 2854, 0, 2855, 2856,
	2857, 0, 0, 2858, 0, 0, 0, 2860, 0, 146,
	80, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 2541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 0, 1068, 1068, 208, 208, 2888, 2889,
	0, 1433, 1434, 677, 0, 0, 117, 0, 0, 1441,
	0, 208, 0, 0, 0, 0, 857, 87, 0, 0,
	0, 0, 0, 1433, 1434, 0, 2906, 1436, 0, 181,
	0, 0, 0, 208, 208, 208, 208, 0, 1068, 1068,
	1463, 1464, 1465, 1068, 0, 0, 1068, 208, 208, 1436,
	0, 0, 118, 0, 1435, 2532, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 150, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 0, 1435, 0, 0, 2935,
	1433, 1434, 2548, 173, 0, 1455, 0, 0, 0, 0,
	0, 174, 87, 1456, 2943, 2946, 0, 1068, 0, 0,
	0, 1065, 0, 0, 0, 0, 1436, 2547, 0, 2802,
	0, 0, 1311, 0, 0, 0, 0, 0, 2964, 208,
	0, 0, 0, 0, 0, 0, 0, 1458, 1459, 1460,
	1461, 2801, 208, 1435, 0, 0, 0, 1441, 0, 2542,
	0, 0, 1455, 0, 0, 0, 1065, 0, 0, 1458,
	1459, 1460, 1461, 0, 0, 0, 0, 797, 0, 1441,
	0, 0, 0, 0, 0, 0, 817, 0, 1463, 1464,
	1465, 0, 0, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 1569, 0, 0, 1457, 2451, 0,
	1463, 1464, 1465, 3017, 0, 0, 0, 0, 992, 0,
	0, 0, 0, 0, 0, 0, 1458, 1459, 1460, 1461,
	0, 0, 0, 0, 0, 0, 1441, 0, 206, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2543, 0, 0, 0, 0, 588, 0,
	3022, 3023, 3024, 1456, 3051, 3052, 0, 1463, 1464, 1465,
	3056, 3057, 0, 0, 0, 3060, 3061, 0, 0, 0,
	588, 0, 3065, 0, 0, 0, 0, 0, 0, 0,
	0, 1166, 0, 0, 0, 0, 0, 0, 1065, 0,
	0, 3069, 0, 0, 0, 0, 0, 0, 3073, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	1456, 0, 0, 0, 0, 0, 1444, 1445, 1437, 1438,
	1439, 1440, 1442, 1443, 0, 1457, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1433,
	1434, 0, 0, 0, 2538, 2539, 2540, 0, 0, 0,
	0, 2537, 2535, 2536, 2528, 2529, 2530, 2531, 2533, 2534,
	0, 1004, 0, 0, 0, 1436, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 1068, 0, 208,
	208, 0, 0, 0, 0, 0, 208, 0, 581, 0,
	2946, 208, 1435, 0, 1457, 0, 0, 0, 0, 0,
	0, 1455, 0, 1166, 0, 1166, 0, 0, 0, 0,
	581, 1166, 0, 0, 1166, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 1166, 1166, 1166,
	0, 0, 0, 1446, 1444, 1445, 1437, 1438, 1439, 1440,
	1442, 1443, 0, 0, 0, 0, 0, 2444, 0, 3155,
	0, 0, 0, 0, 0, 1446, 1444, 1445, 1437, 1438,
	1439, 1440, 1442, 1443, 0, 1458, 1459, 1460, 1461, 0,
	0, 0, 0, 2946, 0, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3215, 3216, 3217, 0,
	1433, 1434, 0, 0, 0, 0, 1463, 1464, 1465, 0,
	0, 0, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442,
	1443, 3225, 3226, 0, 0, 0, 1436, 1065, 0, 0,
	0, 0, 0, 0, 0, 3233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 208, 0,
	0, 0, 0, 1435, 1068, 0, 0, 0, 0, 1456,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2946, 0, 0, 0,
	0, 0, 0, 0, 3269, 0, 0, 0, 0, 0,
	0, 0, 3275, 208, 208, 822, 0, 0, 0, 3280,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	997, 0, 1065, 87, 0, 87, 0, 87, 0, 208,
	0, 208, 2946, 208, 0, 2946, 1458, 1459, 1460, 1461,
	0, 0, 0, 0, 0, 1462, 1441, 0, 0, 0,
	0, 0, 0, 0, 2946, 2946, 0, 0, 0, 202,
	0, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1463, 1464, 1465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	0, 1068, 0, 0, 0, 0, 1065, 1068, 0, 0,
	1068, 208, 817, 87, 208, 3342, 0, 0, 3345, 0,
	0, 87, 1065, 1068, 1068, 1068, 0, 0, 87, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	1456, 208, 208, 0, 208, 0, 208, 0, 208, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 206, 206, 0, 0, 0, 206, 208, 0,
	87, 0, 0, 0, 0, 588, 0, 0, 0, 0,
	0, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	822, 0, 0, 1068, 0, 0, 0, 0, 206, 206,
	0, 0, 0, 1065, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 3449, 3449, 3449, 797, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 206, 206, 206, 0,
	0, 0, 3468, 1166, 1496, 646, 0, 0, 0, 206,
	206, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	1166, 0, 1505, 2946, 0, 2946, 1511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 647, 0, 1068, 3449,
	0, 0, 0, 0, 0, 648, 0, 0, 0, 0,
	0, 1064, 0, 0, 1165, 0, 1064, 0, 0, 0,
	0, 649, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 206, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442,
	1443, 0, 650, 0, 206, 0, 0, 0, 1166, 1166,
	1166, 0, 1166, 0, 0, 0, 1165, 1165, 0, 0,
	0, 651, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3449, 0, 0, 208, 0, 0, 1068, 0,
	0, 652, 0, 0, 653, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1165, 1165, 0, 0, 0, 1165, 0, 87, 1165, 0,
	1597, 668, 1600, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 655, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 672, 656, 0, 0, 0, 208, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 1068, 0, 0, 1068, 0, 208, 671,
	0, 0, 0, 0, 0, 0, 657, 0, 0, 658,
	0, 0, 0, 0, 0, 666, 0, 0, 0, 0,
	0, 0, 659, 1599, 208, 1004, 0, 0, 206, 208,
	0, 1058, 0, 0, 0, 0, 0, 0, 1176, 0,
	0, 206, 1599, 0, 0, 0, 0, 0, 588, 0,
	0, 660, 667, 588, 0, 0, 0, 0, 0, 661,
	0, 208, 0, 0, 208, 0, 208, 0, 208, 0,
	208, 208, 663, 0, 1068, 1068, 1068, 662, 1068, 0,
	0, 0, 0, 0, 1065, 0, 0, 0, 0, 670,
	0, 0, 0, 0, 0, 0, 208, 724, 0, 757,
	665, 0, 0, 0, 1260, 0, 0, 0, 0, 208,
	0, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 731, 0, 1065, 0, 0, 1284, 1284, 1284, 1176,
	0, 0, 1065, 742, 729, 0, 0, 0, 0, 0,
	1315, 1316, 0, 0, 208, 208, 0, 208, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 732, 0, 0, 0, 763, 0, 0, 0,
	0, 0, 208, 739, 740, 0, 0, 0, 817, 751,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 758, 734, 0, 0, 0, 0, 581, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 0, 0,
	588, 0, 1389, 0, 0, 0, 0, 0, 0, 0,
	756, 0, 0, 0, 0, 1166, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 1065, 0, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 206, 206, 0, 0, 0,
	728, 0, 206, 0, 1166, 0, 0, 1166, 1166, 1166,
	0, 0, 0, 0, 0, 0, 736, 737, 0, 0,
	0, 206, 0, 206, 0, 206, 0, 0, 0, 0,
	0, 0, 797, 0, 0, 797, 797, 0, 744, 743,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1166, 1166,
	0, 762, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 759, 1166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2019, 0, 0, 206, 0, 0, 206, 0, 0, 1165,
	1068, 0, 1065, 0, 817, 1065, 1064, 0, 0, 0,
	0, 0, 0, 733, 206, 0, 0, 1505, 0, 0,
	0, 1505, 0, 588, 206, 0, 206, 0, 206, 0,
	206, 755, 206, 0, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 753, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 747, 1065, 0, 0, 0,
	0, 748, 0, 0, 0, 0, 0, 1065, 726, 0,
	760, 0, 0, 0, 0, 992, 0, 0, 0, 208,
	0, 0, 0, 0, 727, 0, 0, 0, 0, 1606,
	0, 0, 0, 0, 749, 0, 0, 0, 746, 1600,
	0, 0, 1615, 0, 0, 0, 0, 761, 0, 208,
	208, 208, 0, 0, 0, 750, 0, 0, 208, 0,
	87, 1165, 0, 1165, 0, 0, 0, 0, 0, 1165,
	208, 1068, 1165, 0, 0, 752, 0, 0, 0, 0,
	0, 1068, 0, 0, 0, 1165, 1165, 1165, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 0, 0, 581, 0, 604, 0, 208, 0, 0,
	1068, 208, 0, 1068, 1068, 1068, 0, 0, 0, 0,
	208, 0, 0, 1065, 0, 0, 0, 0, 605, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	625, 0, 0, 0, 1068, 1068, 0, 0, 0, 0,
	0, 0, 208, 0, 87, 0, 0, 0, 1004, 0,
	0, 607, 0, 1068, 608, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	631, 0, 1004, 0, 0, 87, 609, 206, 1068, 0,
	208, 1068, 208, 0, 0, 629, 0, 0, 0, 0,
	0, 0, 87, 0, 87, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 610, 0, 0, 0, 0, 0,
	0, 1065, 0, 0, 0, 0, 1166, 0, 0, 0,
	0, 0, 0, 0, 611, 0, 1800, 612, 635, 0,
	0, 0, 638, 1812, 0, 0, 0, 87, 0, 87,
	1064, 0, 1068, 0, 0, 1166, 1166, 1166, 0, 0,
	0, 0, 1260, 1068, 1831, 0, 1831, 0, 0, 0,
	0, 1166, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 634,
	0, 0, 0, 0, 206, 0, 615, 0, 0, 0,
	0, 0, 0, 0, 1064, 206, 0, 0, 0, 87,
	0, 0, 0, 0, 1812, 0, 0, 1876, 206, 0,
	1064, 0, 0, 0, 0, 0, 0, 613, 0, 0,
	0, 0, 0, 0, 206, 1890, 0, 616, 0, 0,
	588, 0, 0, 0, 0, 1900, 0, 1902, 0, 1904,
	0, 1906, 0, 1907, 0, 617, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1924, 637, 0, 0, 0, 0, 1065, 0, 1065,
	0, 0, 618, 0, 0, 0, 0, 2019, 0, 0,
	0, 0, 0, 206, 0, 619, 206, 0, 206, 0,
	206, 0, 206, 206, 0, 0, 0, 0, 1505, 0,
	0, 0, 624, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 620, 0, 0, 633, 206, 632,
	0, 0, 621, 0, 1166, 0, 0, 1065, 0, 1166,
	0, 206, 0, 206, 0, 622, 0, 0, 0, 0,
	628, 208, 208, 0, 0, 639, 0, 636, 0, 0,
	0, 1165, 626, 1065, 0, 0, 1166, 1068, 208, 0,
	0, 0, 1068, 0, 0, 1064, 206, 206, 1165, 206,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 1068, 1068, 206, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 992, 0,
	0, 0, 1065, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 992, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1165, 1165, 1165, 0,
	1165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1065, 0, 0, 0, 0, 0, 2184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 87, 0, 0, 87, 0, 0, 1166, 0,
	0, 0, 0, 1068, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 87, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1004, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 1004, 0, 208, 208,
	1068, 0, 0, 1068, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 1599, 0, 0, 0, 1068,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1176, 87, 0, 0, 0,
	0, 0, 0, 1166, 0, 0, 0, 0, 0, 0,
	0, 0, 1166, 1166, 0, 0, 0, 0, 1166, 0,
	0, 206, 1068, 0, 0, 0, 0, 2318, 0, 0,
	0, 0, 1812, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 0,
	0, 206, 206, 206, 0, 1065, 0, 0, 0, 0,
	1599, 0, 0, 0, 2357, 0, 0, 1284, 0, 1284,
	0, 1284, 206, 1176, 1176, 0, 0, 0, 0, 0,
	0, 0, 1064, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 2400,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 206,
	0, 0, 2405, 206, 1176, 0, 0, 0, 0, 0,
	0, 1064, 206, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2425, 1176, 0,
	2428, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 2442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 208, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 992, 992, 0, 0,
	0, 0, 206, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 1165, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1165, 0, 0, 1165, 1165, 1165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 208, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 1068,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1165, 1165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 1068, 0, 0, 0, 1165, 0, 0, 0, 208,
	0, 0, 0, 0, 0, 1433, 1434, 0, 1466, 1467,
	1468, 1476, 1477, 1478, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 1064, 1469, 0, 0, 0, 0, 1004,
	1004, 1436, 0, 0, 0, 1482, 992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 87,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2642, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 1459, 1460, 1461, 0, 0, 0, 0, 0,
	0, 1441, 2678, 1176, 2318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 206, 1473, 0, 0, 1483, 0,
	0, 0, 1463, 1464, 1465, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 0, 1479, 992, 1480, 0, 0, 0, 1004,
	2717, 0, 1450, 1451, 2721, 0, 0, 0, 0, 0,
	0, 1064, 0, 2728, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 2770, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 1462, 0, 2791, 0, 1176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 2797, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1433, 1434, 1165, 1466, 1467, 1468, 1476, 1477,
	1478, 0, 0, 0, 1474, 0, 0, 0, 0, 1004,
	0, 1469, 0, 0, 0, 0, 0, 1004, 1436, 0,
	0, 0, 1482, 1165, 1165, 1165, 0, 0, 0, 0,
	1599, 0, 0, 0, 0, 0, 0, 0, 0, 1165,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 1064, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 206, 0, 0, 0, 0, 0, 1472, 0, 0,
	1447, 1448, 1454, 1453, 1449, 1475, 0, 1446, 1444, 1445,
	1437, 1438, 1439, 1440, 1442, 1443, 0, 0, 0, 0,
	3080, 0, 0, 3079, 0, 0, 0, 0, 1458, 1459,
	1460, 1461, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2019, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 1483, 0, 0, 0, 1463,
	1464, 1465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 1064, 0, 0,
	1479, 0, 1480, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 0, 1165, 0, 0, 1064, 0, 1165, 0, 206,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 2988, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1165, 0, 0, 0, 0, 0,
	0, 3000, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 1457, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 206, 0, 0, 3040, 0, 0, 0,
	1064, 1474, 0, 0, 0, 0, 1433, 1434, 0, 1466,
	1467, 1468, 1476, 1477, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 1482, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	206, 0, 0, 0, 1472, 0, 0, 1447, 1448, 1454,
	1453, 1449, 1475, 0, 1446, 1444, 1445, 1437, 1438, 1439,
	1440, 1442, 1443, 0, 0, 0, 0, 2514, 0, 0,
	2515, 0, 0, 0, 0, 0, 1165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 1458, 1459, 1460, 1461, 0, 0, 0, 0,
	0, 206, 1441, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 0, 1483,
	0, 0, 3148, 1463, 1464, 1465, 0, 0, 0, 0,
	0, 2318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 1480, 0, 0, 0,
	0, 0, 0, 1450, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1471, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 1165, 0, 0, 0, 0, 0, 0, 0, 0,
	1165, 1165, 0, 0, 1481, 0, 1165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3254, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3323, 1176, 0, 0, 0, 1472, 0,
	0, 1447, 1448, 1454, 1453, 1449, 1475, 0, 1446, 1444,
	1445, 1437, 1438, 1439, 1440, 1442, 1443, 0, 0, 0,
	0, 2051, 0, 0, 2052, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 3407, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3422, 216, 217, 218, 219, 220, 1069, 221,
	1070, 1071, 1072, 1073, 468, 1074, 1075, 1076, 1077, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	1078, 229, 230, 231, 232, 233, 234, 1079, 1080, 235,
	473, 474, 475, 1081, 236, 476, 1082, 1067, 1083, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	1084, 247, 0, 248, 249, 250, 1085, 943, 251, 252,
	1086, 1087, 1089, 1088, 1090, 1091, 1092, 253, 254, 255,
	256, 257, 258, 477, 478, 1093, 259, 1094, 261, 260,
	1095, 262, 1096, 1097, 263, 264, 265, 1098, 266, 1099,
	267, 268, 1100, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 1101, 213, 1102, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 1103, 286, 1104, 1105, 944, 287, 288, 1106, 289,
	483, 1107, 484, 290, 1108, 291, 292, 293, 294, 485,
	486, 487, 342, 946, 295, 296, 1109, 297, 298, 300,
	0, 0, 0, 214, 299, 301, 308, 1110, 945, 302,
	488, 304, 303, 305, 306, 307, 489, 1111, 490, 1112,
	309, 947, 491, 948, 310, 311, 312, 949, 313, 314,
	0, 0, 315, 316, 317, 318, 1113, 320, 319, 1114,
	321, 492, 950, 322, 323, 951, 1115, 324, 325, 1116,
	1117, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 952, 338, 339, 341, 340, 1118,
	215, 953, 1119, 493, 494, 343, 344, 1120, 345, 346,
	347, 1121, 1122, 349, 350, 351, 1123, 1124, 352, 353,
	495, 954, 354, 955, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 1125, 363, 364, 497, 365, 498,
	366, 1126, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 1127, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 1128, 389,
	956, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 1129, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 1130, 416, 396,
	397, 417, 957, 418, 501, 419, 420, 1131, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	1132, 432, 433, 431, 1133, 434, 435, 436, 437, 438,
	274, 439, 1134, 440, 503, 504, 505, 506, 1135, 447,
	1136, 441, 442, 507, 443, 508, 1137, 444, 445, 446,
	0, 448, 449, 1138, 1139, 450, 451, 452, 453, 454,
	456, 1140, 457, 1141, 455, 458, 459, 460, 509, 510,
	511, 1142, 462, 461, 512, 1143, 1144, 1145, 1146, 463,
	464, 513, 465, 466, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1062, 0, 0,
	0, 0, 0, 0, 0, 2171, 0, 0, 0, 0,
	0, 0, 0, 2172, 216, 217, 218, 219, 220, 1069,
	221, 1070, 1071, 1072, 1073, 468, 1074, 1075, 1076, 1077,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 1078, 229, 230, 231, 232, 233, 234, 1079, 1080,
	235, 473, 474, 475, 1081, 236, 476, 1082, 1067, 1083,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 1084, 247, 0, 248, 249, 250, 1085, 943, 251,
	252, 1086, 1087, 1089, 1088, 1090, 1091, 1092, 253, 254,
	255, 256, 257, 258, 477, 478, 1093, 259, 1094, 261,
	260, 1095, 262, 1096, 1097, 263, 264, 265, 1098, 266,
	1099, 267, 268, 1100, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 1101, 213, 1102,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 1103, 286, 1104, 1105, 944, 287, 288, 1106,
	289, 483, 1107, 484, 290, 1108, 291, 292, 293, 294,
	485, 486, 487, 342, 946, 295, 296, 1109, 297, 298,
	300, 0, 0, 0, 214, 299, 301, 308, 1110, 945,
	302, 488, 304, 303, 305, 306, 307, 489, 1111, 490,
	1112, 309, 947, 491, 948, 310, 311, 312, 949, 313,
	314, 0, 0, 315, 316, 317, 318, 1113, 320, 319,
	1114, 321, 492, 950, 322, 323, 951, 1115, 324, 325,
	1116, 1117, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 952, 338, 339, 341, 340,
	1118, 215, 953, 1119, 493, 494, 343, 344, 1120, 345,
	346, 347, 1121, 1122, 349, 350, 351, 1123, 1124, 352,
	353, 495, 954, 354, 955, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 1125, 363, 364, 497, 365,
	498, 366, 1126, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 1127, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 1128,
	389, 956, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 1129, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 1130, 416,
	396, 397, 417, 957, 418, 501, 419, 420, 1131, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 1132, 432, 433, 431, 1133, 434, 435, 436, 437,
	438, 274, 439, 1134, 440, 503, 504, 505, 506, 1135,
	447, 1136, 441, 442, 507, 443, 508, 1137, 444, 445,
	446, 0, 448, 449, 1138, 1139, 450, 451, 452, 453,
	454, 456, 1140, 457, 1141, 455, 458, 459, 460, 509,
	510, 511, 1142, 462, 461, 512, 1143, 1144, 1145, 1146,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3104, 216, 217, 218,
	219, 220, 1069, 221, 1070, 1071, 1072, 1073, 468, 1074,
	1075, 1076, 1077, 222, 223, 224, 225, 469, 470, 226,
	471, 227, 228, 472, 1078, 229, 230, 231, 232, 233,
	234, 1079, 1080, 235, 473, 474, 475, 1081, 236, 476,
	1082, 1067, 1083, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 1084, 247, 0, 248, 249, 250,
	1085, 943, 251, 252, 1086, 1087, 1089, 1088, 1090, 1091,
	1092, 253, 254, 255, 256, 257, 258, 477, 478, 1093,
	259, 1094, 261, 260, 1095, 262, 1096, 1097, 263, 264,
	265, 1098, 266, 1099, 267, 268, 1100, 269, 479, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 480, 481,
	1101, 213, 1102, 0, 0, 0, 0, 280, 281, 282,
	482, 283, 284, 0, 285, 1103, 286, 1104, 1105, 944,
	287, 288, 1106, 289, 483, 1107, 484, 290, 1108, 291,
	292, 293, 294, 485, 486, 487, 342, 946, 295, 296,
	1109, 297, 298, 300, 0, 0, 0, 214, 299, 301,
	308, 1110, 945, 302, 488, 304, 303, 305, 306, 307,
	489, 1111, 490, 1112, 309, 947, 491, 948, 310, 311,
	312, 949, 313, 314, 0, 0, 315, 316, 317, 318,
	1113, 320, 319, 1114, 321, 492, 950, 322, 323, 951,
	1115, 324, 325, 1116, 1117, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 337, 335, 952, 338,
	339, 341, 340, 1118, 215, 953, 1119, 493, 494, 343,
	344, 1120, 345, 346, 347, 1121, 1122, 349, 350, 351,
	1123, 1124, 352, 353, 495, 954, 354, 955, 496, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 1125, 363,
	364, 497, 365, 498, 366, 1126, 367, 0, 368, 369,
	370, 371, 372, 373, 499, 374, 375, 1127, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 1128, 389, 956, 390, 391, 392, 393, 500,
	394, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	1129, 412, 413, 406, 408, 409, 410, 407, 411, 414,
	415, 1130, 416, 396, 397, 417, 957, 418, 501, 419,
	420, 1131, 430, 421, 422, 423, 398, 424, 428, 429,
	425, 426, 427, 502, 1132, 432, 433, 431, 1133, 434,
	435, 436, 437, 438, 274, 439, 1134, 440, 503, 504,
	505, 506, 1135, 447, 1136, 441, 442, 507, 443, 508,
	1137, 444, 445, 446, 0, 448, 449, 1138, 1139, 450,
	451, 452, 453, 454, 456, 1140, 457, 1141, 455, 458,
	459, 460, 509, 510, 511, 1142, 462, 461, 512, 1143,
	1144, 1145, 1146, 463, 464, 513, 465, 466, 467, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3221, 0, 216, 217, 218, 219,
	220, 1069, 221, 1070, 1071, 1072, 1073, 468, 1074, 1075,
	1076, 1077, 222, 223, 224, 225, 469, 470, 226, 471,
	227, 228, 472, 1078, 229, 230, 231, 232, 233, 234,
	1079, 1080, 235, 473, 474, 475, 1081, 236, 476, 1082,
	1067, 1083, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 1084, 247, 0, 248, 249, 250, 1085,
	943, 251, 252, 1086, 1087, 1089, 1088, 1090, 1091, 1092,
	253, 254, 255, 256, 257, 258, 477, 478, 1093, 259,
	1094, 261, 260, 1095, 262, 1096, 1097, 263, 264, 265,
	1098, 266, 1099, 267, 268, 1100, 269, 479, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 480, 481, 1101,
	213, 1102, 0, 0, 0, 0, 280, 281, 282, 482,
	283, 284, 0, 285, 1103, 286, 1104, 1105, 944, 287,
	288, 1106, 289, 483, 1107, 484, 290, 1108, 291, 292,
	293, 294, 485, 486, 487, 342, 946, 295, 296, 1109,
	297, 298, 300, 0, 0, 0, 214, 299, 301, 308,
	1110, 945, 302, 488, 304, 303, 305, 306, 307, 489,
	1111, 490, 1112, 309, 947, 491, 948, 310, 311, 312,
	949, 313, 314, 0, 0, 315, 316, 317, 318, 1113,
	320, 319, 1114, 321, 492, 950, 322, 323, 951, 1115,
	324, 325, 1116, 1117, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 337, 335, 952, 338, 339,
	341, 340, 1118, 215, 953, 1119, 493, 494, 343, 344,
	1120, 345, 346, 347, 1121, 1122, 349, 350, 351, 1123,
	1124, 352, 353, 495, 954, 354, 955, 496, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 1125, 363, 364,
	497, 365, 498, 366, 1126, 367, 0, 368, 369, 370,
	371, 372, 373, 499, 374, 375, 1127, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 1128, 389, 956, 390, 391, 392, 393, 500, 394,
	0, 395, 399, 400, 401, 402, 403, 404, 405, 1129,
	412, 413, 406, 408, 409, 410, 407, 411, 414, 415,
	1130, 416, 396, 397, 417, 957, 418, 501, 419, 420,
	1131, 430, 421, 422, 423, 398, 424, 428, 429, 425,
	426, 427, 502, 1132, 432, 433, 431, 1133, 434, 435,
	436, 437, 438, 274, 439, 1134, 440, 503, 504, 505,
	506, 1135, 447, 1136, 441, 442, 507, 443, 508, 1137,
	444, 445, 446, 0, 448, 449, 1138, 1139, 450, 451,
	452, 453, 454, 456, 1140, 457, 1141, 455, 458, 459,
	460, 509, 510, 511, 1142, 462, 461, 512, 1143, 1144,
	1145, 1146, 463, 464, 513, 465, 466, 467, 1062, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2840, 0, 216, 217, 218, 219, 220,
	1069, 221, 1070, 1071, 1072, 1073, 468, 1074, 1075, 1076,
	1077, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 1078, 229, 230, 231, 232, 233, 234, 1079,
	1080, 235, 473, 474, 475, 1081, 236, 476, 1082, 1067,
	1083, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 1084, 247, 0, 248, 249, 250, 1085, 943,
	251, 252, 1086, 1087, 1089, 1088, 1090, 1091, 1092, 253,
	254, 255, 256, 257, 258, 477, 478, 1093, 259, 1094,
	261, 260, 1095, 262, 1096, 1097, 263, 264, 265, 1098,
	266, 1099, 267, 268, 1100, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 1101, 213,
	1102, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 1103, 286, 1104, 1105, 944, 287, 288,
	1106, 289, 483, 1107, 484, 290, 1108, 291, 292, 293,
	294, 485, 486, 487, 342, 946, 295, 296, 1109, 297,
	298, 300, 0, 0, 0, 214, 299, 301, 308, 1110,
	945, 302, 488, 304, 303, 305, 306, 307, 489, 1111,
	490, 1112, 309, 947, 491, 948, 310, 311, 312, 949,
	313, 314, 0, 0, 315, 316, 317, 318, 1113, 320,
	319, 1114, 321, 492, 950, 322, 323, 951, 1115, 324,
	325, 1116, 1117, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 952, 338, 339, 341,
	340, 1118, 215, 953, 1119, 493, 494, 343, 344, 1120,
	345, 346, 347, 1121, 1122, 349, 350, 351, 1123, 1124,
	352, 353, 495, 954, 354, 955, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 1125, 363, 364, 497,
	365, 498, 366, 1126, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 1127, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	1128, 389, 956, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 1129, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 1130,
	416, 396, 397, 417, 957, 418, 501, 419, 420, 1131,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 1132, 432, 433, 431, 1133, 434, 435, 436,
	437, 438, 274, 439, 1134, 440, 503, 504, 505, 506,
	1135, 447, 1136, 441, 442, 507, 443, 508, 1137, 444,
	445, 446, 0, 448, 449, 1138, 1139, 450, 451, 452,
	453, 454, 456, 1140, 457, 1141, 455, 458, 459, 460,
	509, 510, 511, 1142, 462, 461, 512, 1143, 1144, 1145,
	1146, 463, 464, 513, 465, 466, 467, 1062, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2832, 0, 216, 217, 218, 219, 220, 1069,
	221, 1070, 1071, 1072, 1073, 468, 1074, 1075, 1076, 1077,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 1078, 229, 230, 231, 232, 233, 234, 1079, 1080,
	235, 473, 474, 475, 1081, 236, 476, 1082, 1067, 1083,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 1084, 247, 0, 248, 249, 250, 1085, 943, 251,
	252, 1086, 1087, 1089, 1088, 1090, 1091, 1092, 253, 254,
	255, 256, 257, 258, 477, 478, 1093, 259, 1094, 261,
	260, 1095, 262, 1096, 1097, 263, 264, 265, 1098, 266,
	1099, 267, 268, 1100, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 1101, 213, 1102,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 1103, 286, 1104, 1105, 944, 287, 288, 1106,
	289, 483, 1107, 484, 290, 1108, 291, 292, 293, 294,
	485, 486, 487, 342, 946, 295, 296, 1109, 297, 298,
	300, 0, 0, 0, 214, 299, 301, 308, 1110, 945,
	302, 488, 304, 303, 305, 306, 307, 489, 1111, 490,
	1112, 309, 947, 491, 948, 310, 311, 312, 949, 313,
	314, 0, 0, 315, 316, 317, 318, 1113, 320, 319,
	1114, 321, 492, 950, 322, 323, 951, 1115, 324, 325,
	1116, 1117, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 952, 338, 339, 341, 340,
	1118, 215, 953, 1119, 493, 494, 343, 344, 1120, 345,
	346, 347, 1121, 1122, 349, 350, 351, 1123, 1124, 352,
	353, 495, 954, 354, 955, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 1125, 363, 364, 497, 365,
	498, 366, 1126, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 1127, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 1128,
	389, 956, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 1129, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 1130, 416,
	396, 397, 417, 957, 418, 501, 419, 420, 1131, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 1132, 432, 433, 431, 1133, 434, 435, 436, 437,
	438, 274, 439, 1134, 440, 503, 504, 505, 506, 1135,
	447, 1136, 441, 442, 507, 443, 508, 1137, 444, 445,
	446, 0, 448, 449, 1138, 1139, 450, 451, 452, 453,
	454, 456, 1140, 457, 1141, 455, 458, 459, 460, 509,
	510, 511, 1142, 462, 461, 512, 1143, 1144, 1145, 1146,
	463, 464, 513, 465, 466, 467, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2702, 0, 216, 217, 218, 219, 220, 1069, 221,
	1070, 1071, 1072, 1073, 468, 1074, 1075, 1076, 1077, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	1078, 229, 230, 231, 232, 233, 234, 1079, 1080, 235,
	473, 474, 475, 1081, 236, 476, 1082, 1067, 1083, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	1084, 247, 0, 248, 249, 250, 1085, 943, 251, 252,
	1086, 1087, 1089, 1088, 1090, 1091, 1092, 253, 254, 255,
	256, 257, 258, 477, 478, 1093, 259, 1094, 261, 260,
	1095, 262, 1096, 1097, 263, 264, 265, 1098, 266, 1099,
	267, 268, 1100, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 1101, 213, 1102, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 1103, 286, 1104, 1105, 944, 287, 288, 1106, 289,
	483, 1107, 484, 290, 1108, 291, 292, 293, 294, 485,
	486, 487, 342, 946, 295, 296, 1109, 297, 298, 300,
	0, 0, 0, 214, 299, 301, 308, 1110, 945, 302,
	488, 304, 303, 305, 306, 307, 489, 1111, 490, 1112,
	309, 947, 491, 948, 310, 311, 312, 949, 313, 314,
	0, 0, 315, 316, 317, 318, 1113, 320, 319, 1114,
	321, 492, 950, 322, 323, 951, 1115, 324, 325, 1116,
	1117, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 952, 338, 339, 341, 340, 1118,
	215, 953, 1119, 493, 494, 343, 344, 1120, 345, 346,
	347, 1121, 1122, 349, 350, 351, 1123, 1124, 352, 353,
	495, 954, 354, 955, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 1125, 363, 364, 497, 365, 498,
	366, 1126, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 1127, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 1128, 389,
	956, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 1129, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 1130, 416, 396,
	397, 417, 957, 418, 501, 419, 420, 1131, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	1132, 432, 433, 431, 1133, 434, 435, 436, 437, 438,
	274, 439, 1134, 440, 503, 504, 505, 506, 1135, 447,
	1136, 441, 442, 507, 443, 508, 1137, 444, 445, 446,
	0, 448, 449, 1138, 1139, 450, 451, 452, 453, 454,
	456, 1140, 457, 1141, 455, 458, 459, 460, 509, 510,
	511, 1142, 462, 461, 512, 1143, 1144, 1145, 1146, 463,
	464, 513, 465, 466, 467, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2064, 0, 216, 217, 218, 219, 220, 1069, 221, 1070,
	1071, 1072, 1073, 468, 1074, 1075, 1076, 1077, 222, 223,
	224, 225, 469, 470, 226, 471, 227, 228, 472, 1078,
	229, 230, 231, 232, 233, 234, 1079, 1080, 235, 473,
	474, 475, 1081, 236, 476, 1082, 1067, 1083, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 1084,
	247, 0, 248, 249, 250, 1085, 943, 251, 252, 1086,
	1087, 1089, 1088, 1090, 1091, 1092, 253, 254, 255, 256,
	257, 258, 477, 478, 1093, 259, 1094, 261, 260, 1095,
	262, 1096, 1097, 263, 264, 265, 1098, 266, 1099, 267,
	268, 1100, 269, 479, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 480, 481, 1101, 213, 1102, 0, 0,
	0, 0, 280, 281, 282, 482, 283, 284, 0, 285,
	1103, 286, 1104, 1105, 944, 287, 288, 1106, 289, 483,
	1107, 484, 290, 1108, 291, 292, 293, 294, 485, 486,
	487, 342, 946, 295, 296, 1109, 297, 298, 300, 0,
	0, 0, 214, 299, 301, 308, 1110, 945, 302, 488,
	304, 303, 305, 306, 307, 489, 1111, 490, 1112, 309,
	947, 491, 948, 310, 311, 312, 949, 313, 314, 0,
	0, 315, 316, 317, 318, 1113, 320, 319, 1114, 321,
	492, 950, 322, 323, 951, 1115, 324, 325, 1116, 1117,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 337, 335, 952, 338, 339, 341, 340, 1118, 215,
	953, 1119, 493, 494, 343, 344, 1120, 345, 346, 347,
	1121, 1122, 349, 350, 351, 1123, 1124, 352, 353, 495,
	954, 354, 955, 496, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 1125, 363, 364, 497, 365, 498, 366,
	1126, 367, 0, 368, 369, 370, 371, 372, 373, 499,
	374, 375, 1127, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 1128, 389, 956,
	390, 391, 392, 393, 500, 394, 0, 395, 399, 400,
	401, 402, 403, 404, 405, 1129, 412, 413, 406, 408,
	409, 410, 407, 411, 414, 415, 1130, 416, 396, 397,
	417, 957, 418, 501, 419, 420, 1131, 430, 421, 422,
	423, 398, 424, 428, 429, 425, 426, 427, 502, 1132,
	432, 433, 431, 1133, 434, 435, 436, 437, 438, 274,
	439, 1134, 440, 503, 504, 505, 506, 1135, 447, 1136,
	441, 442, 507, 443, 508, 1137, 444, 445, 446, 0,
	448, 449, 1138, 1139, 450, 451, 452, 453, 454, 456,
	1140, 457, 1141, 455, 458, 459, 460, 509, 510, 511,
	1142, 462, 461, 512, 1143, 1144, 1145, 1146, 463, 464,
	513, 465, 466, 467, 1170, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1783,
	0, 0, 0, 216, 217, 218, 219, 220, 1069, 221,
	1070, 1071, 1072, 1073, 468, 1074, 1075, 1076, 1077, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	1078, 229, 230, 231, 232, 233, 234, 1079, 1080, 235,
	473, 474, 475, 1081, 236, 476, 1082, 1067, 1083, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	1084, 247, 0, 248, 249, 250, 1085, 943, 251, 252,
	1086, 1087, 1089, 1088, 1090, 1091, 1092, 253, 254, 255,
	256, 257, 258, 477, 478, 1093, 259, 1094, 261, 260,
	1095, 262, 1096, 1097, 263, 264, 265, 1098, 266, 1099,
	267, 268, 1100, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 1101, 213, 1102, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 1103, 286, 1104, 1105, 944, 287, 288, 1106, 289,
	483, 1107, 484, 290, 1108, 291, 292, 293, 294, 485,
	486, 487, 342, 946, 295, 296, 1109, 297, 298, 300,
	0, 0, 0, 214, 299, 301, 308, 1110, 945, 302,
	488, 304, 303, 305, 306, 307, 489, 1111, 490, 1112,
	309, 947, 491, 948, 310, 311, 312, 949, 313, 314,
	0, 0, 315, 316, 317, 318, 1113, 320, 319, 1114,
	321, 492, 950, 322, 323, 951, 1115, 324, 325, 1116,
	1117, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 952, 338, 339, 341, 340, 1118,
	215, 953, 1119, 493, 494, 343, 344, 1120, 345, 346,
	347, 1121, 1122, 349, 350, 351, 1123, 1124, 352, 353,
	495, 954, 354, 955, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 1125, 363, 364, 497, 365, 498,
	366, 1126, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 1127, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 1128, 389,
	956, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 1129, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 1130, 416, 396,
	397, 417, 957, 418, 501, 419, 420, 1131, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	1132, 432, 433, 431, 1133, 434, 435, 436, 437, 438,
	274, 439, 1134, 440, 503, 504, 505, 506, 1135, 447,
	1136, 441, 442, 507, 443, 508, 1137, 444, 445, 446,
	0, 448, 449, 1138, 1139, 450, 451, 452, 453, 454,
	456, 1140, 457, 1141, 455, 458, 459, 460, 509, 510,
	511, 1142, 462, 461, 512, 1143, 1144, 1145, 1146, 463,
	464, 513, 465, 466, 467, 1059, 0, 1062, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 1069,
	221, 1070, 1071, 1072, 1073, 468, 1074, 1075, 1076, 1077,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 1078, 229, 230, 231, 232, 233, 234, 1079, 1080,
	235, 473, 474, 475, 1081, 236, 476, 1082, 1067, 1083,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 1084, 247, 0, 248, 249, 250, 1085, 943, 251,
	252, 1086, 1087, 1089, 1088, 1090, 1091, 1092, 253, 254,
	255, 256, 257, 258, 477, 478, 1093, 259, 1094, 261,
	260, 1095, 262, 1096, 1097, 263, 264, 265, 1098, 266,
	1099, 267, 268, 1100, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 1101, 213, 1102,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 1103, 286, 1104, 1105, 944, 287, 288, 1106,
	289, 483, 1107, 484, 290, 1108, 291, 292, 293, 294,
	485, 486, 487, 342, 946, 295, 296, 1109, 297, 298,
	300, 0, 0, 0, 214, 299, 301, 308, 1110, 945,
	302, 488, 304, 303, 305, 306, 307, 489, 1111, 490,
	1112, 309, 947, 491, 948, 310, 311, 312, 949, 313,
	314, 0, 0, 315, 316, 317, 318, 1113, 320, 319,
	1114, 321, 492, 950, 322, 323, 951, 1115, 324, 325,
	1116, 1117, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 952, 338, 339, 341, 340,
	1118, 215, 953, 1119, 493, 494, 343, 344, 1120, 345,
	346, 347, 1121, 1122, 349, 350, 351, 1123, 1124, 352,
	353, 495, 954, 354, 955, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 1125, 363, 364, 497, 365,
	498, 366, 1126, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 1127, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 1128,
	389, 956, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 1129, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 1130, 416,
	396, 397, 417, 957, 418, 501, 419, 420, 1131, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 1132, 432, 433, 431, 1133, 434, 435, 436, 437,
	438, 274, 439, 1134, 440, 503, 504, 505, 506, 1135,
	447, 1136, 441, 442, 507, 443, 508, 1137, 444, 445,
	446, 0, 448, 449, 1138, 1139, 450, 451, 452, 453,
	454, 456, 1140, 457, 1141, 455, 458, 459, 460, 509,
	510, 511, 1142, 462, 461, 512, 1143, 1144, 1145, 1146,
	463, 464, 513, 465, 466, 467, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 1069, 221,
	1070, 1071, 1072, 1073, 468, 1074, 1075, 1076, 1077, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	1078, 229, 230, 231, 232, 233, 234, 1079, 1080, 235,
	473, 474, 475, 1081, 236, 476, 1082, 1067, 1083, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	1084, 247, 0, 248, 249, 250, 1085, 943, 251, 252,
	1086, 1087, 1089, 1088, 1090, 1091, 1092, 253, 254, 255,
	256, 257, 258, 477, 478, 1093, 259, 1094, 261, 260,
	1095, 262, 1096, 1097, 263, 264, 265, 1098, 266, 1099,
	267, 268, 1100, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 1101, 213, 1102, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 1103, 286, 1104, 1105, 944, 287, 288, 1106, 289,
	483, 1107, 484, 290, 1108, 291, 292, 293, 294, 485,
	486, 487, 342, 946, 295, 296, 1109, 297, 298, 300,
	0, 0, 0, 214, 299, 301, 308, 1110, 945, 302,
	488, 304, 303, 305, 306, 307, 489, 1111, 490, 1112,
	309, 947, 491, 948, 310, 311, 312, 949, 313, 314,
	0, 0, 315, 316, 317, 318, 1113, 320, 319, 1114,
	321, 492, 950, 322, 323, 951, 1115, 324, 325, 1116,
	1117, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 952, 338, 339, 341, 340, 1118,
	215, 953, 1119, 493, 494, 343, 344, 1120, 345, 346,
	347, 1121, 1122, 349, 350, 351, 1123, 1124, 352, 353,
	495, 954, 354, 955, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 1125, 363, 364, 497, 365, 498,
	366, 1126, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 1127, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 1128, 389,
	956, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 1129, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 1130, 416, 396,
	397, 417, 957, 418, 501, 419, 420, 1131, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	1132, 432, 433, 431, 1133, 434, 435, 436, 437, 438,
	274, 439, 1134, 440, 503, 504, 505, 506, 1135, 447,
	1136, 441, 442, 507, 443, 508, 1137, 444, 445, 446,
	0, 448, 449, 1138, 1139, 450, 451, 452, 453, 454,
	456, 1140, 457, 1141, 455, 458, 459, 460, 509, 510,
	511, 1142, 462, 461, 512, 1143, 1144, 1145, 1146, 463,
	464, 513, 465, 466, 467, 2040, 0, 885, 842, 843,
	844, 840, 841, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 2037,
	221, 0, 0, 0, 0, 934, 859, 0, 0, 0,
	222, 223, 224, 225, 469, 900, 879, 911, 869, 910,
	909, 0, 229, 871, 870, 232, 233, 234, 861, 933,
	235, 969, 970, 475, 0, 236, 940, 0, 923, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 943, 251,
	252, 926, 924, 925, 930, 928, 927, 929, 253, 254,
	255, 256, 914, 258, 907, 906, 831, 259, 0, 261,
	260, 0, 262, 2038, 0, 263, 905, 265, 0, 266,
	0, 267, 268, 0, 269, 837, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 960, 961, 850, 213, 0,
	0, 0, 0, 0, 280, 281, 282, 904, 902, 903,
	0, 285, 0, 286, 0, 0, 944, 287, 288, 0,
	289, 967, 0, 860, 290, 0, 291, 292, 293, 294,
	935, 936, 939, 342, 946, 295, 296, 0, 297, 298,
	881, 0, 0, 0, 214, 299, 301, 308, 0, 945,
	302, 893, 884, 895, 897, 898, 899, 894, 0, 886,
	0, 309, 947, 937, 948, 310, 311, 312, 949, 919,
	920, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 968, 950, 322, 323, 951, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 873, 335, 952, 338, 339, 341, 340,
	828, 215, 953, 851, 938, 908, 343, 344, 0, 882,
	346, 883, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 954, 354, 955, 962, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 963, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 901, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 956, 390, 391, 392, 393, 838, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	874, 875, 877, 878, 407, 411, 414, 415, 931, 416,
	396, 397, 417, 957, 418, 896, 876, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 942, 425, 426, 427,
	964, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 872, 0, 440, 915, 916, 917, 918, 0,
	447, 0, 441, 442, 965, 443, 966, 849, 444, 445,
	446, 0, 448, 449, 0, 832, 450, 451, 452, 453,
	454, 456, 932, 457, 0, 880, 458, 459, 460, 509,
	912, 959, 2036, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 829, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 825,
	826, 2039, 0, 0, 0, 0, 0, 0, 855, 2035,
	0, 0, 818, 853, 885, 842, 843, 844, 840, 841,
	854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 934, 859, 0, 0, 0, 222, 223, 224,
	225, 469, 900, 879, 911, 869, 910, 909, 0, 229,
	871, 870, 232, 233, 234, 861, 933, 235, 969, 970,
	475, 0, 236, 940, 0, 923, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 943, 251, 252, 926, 924,
	925, 930, 928, 927, 929, 253, 254, 255, 256, 914,
	258, 907, 906, 831, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 905, 265, 0, 266, 0, 267, 268,
	0, 269, 837, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 960, 961, 850, 213, 0, 0, 0, 0,
	0, 280, 281, 282, 904, 902, 903, 0, 285, 0,
	286, 0, 0, 944, 287, 288, 0, 289, 967, 0,
	860, 290, 0, 291, 292, 293, 294, 935, 936, 939,
	342, 946, 295, 296, 0, 297, 298, 881, 0, 0,
	0, 214, 299, 301, 308, 0, 945, 302, 893, 884,
	895, 897, 898, 899, 894, 0, 886, 0, 309, 947,
	937, 948, 310, 311, 312, 949, 919, 920, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 968,
	950, 322, 323, 951, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 332, 334, 336,
	873, 335, 952, 338, 339, 341, 340, 828, 215, 953,
	851, 938, 908, 343, 344, 0, 882, 346, 883, 0,
	0, 349, 350, 351, 0, 0, 352, 353, 495, 954,
	354, 955, 962, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 963, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 372, 373, 901, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 956, 390,
	391, 392, 393, 838, 394, 0, 395, 399, 400, 401,
	402, 403, 404, 405, 179, 412, 413, 874, 875, 877,
	878, 407, 411, 414, 415, 931, 416, 396, 397, 417,
	957, 418, 896, 876, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 942, 425, 426, 427, 964, 0, 432,
	433, 431, 181, 434, 435, 436, 437, 438, 274, 872,
	0, 440, 915, 916, 917, 918, 0, 447, 0, 441,
	442, 965, 443, 966, 849, 444, 445, 446, 0, 448,
	449, 0, 832, 450, 451, 452, 453, 454, 456, 932,
	457, 0, 880, 458, 459, 460, 1309, 912, 959, 0,
	462, 461, 512, 0, 0, 0, 173, 463, 464, 513,
	465, 466, 467, 829, 174, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 825, 826, 885, 842,
	843, 844, 840, 841, 854, 1510, 1508, 0, 0, 0,
	853, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 934, 859, 0, 0,
	0, 222, 223, 224, 225, 469, 900, 879, 911, 869,
	910, 909, 0, 229, 871, 870, 232, 233, 234, 861,
	933, 235, 969, 970, 475, 0, 236, 940, 0, 923,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 943,
	251, 252, 926, 924, 925, 930, 928, 927, 929, 253,
	254, 255, 256, 914, 258, 907, 906, 831, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 905, 265, 0,
	266, 0, 267, 268, 0, 269, 837, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 960, 961, 850, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 904, 902,
	903, 0, 285, 0, 286, 0, 0, 944, 287, 288,
	0, 289, 967, 0, 860, 290, 0, 291, 292, 293,
	294, 935, 936, 939, 342, 946, 295, 296, 0, 297,
	298, 881, 0, 0, 0, 214, 299, 301, 308, 0,
	945, 302, 893, 884, 895, 897, 898, 899, 894, 0,
	886, 0, 309, 947, 937, 948, 310, 311, 312, 949,
	919, 920, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 968, 950, 322, 323, 951, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 873, 335, 952, 338, 339, 341,
	340, 828, 215, 953, 851, 938, 908, 343, 344, 0,
	882, 346, 883, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 954, 354, 955, 962, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 963,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 901, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 956, 390, 391, 392, 393, 838, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 179, 412,
	413, 874, 875, 877, 878, 407, 411, 414, 415, 931,
	416, 396, 397, 417, 957, 418, 896, 876, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 942, 425, 426,
	427, 964, 0, 432, 433, 431, 181, 434, 435, 436,
	437, 438, 274, 872, 0, 440, 915, 916, 917, 918,
	0, 447, 0, 441, 442, 965, 443, 966, 849, 444,
	445, 446, 0, 448, 449, 0, 832, 450, 451, 452,
	453, 454, 456, 932, 457, 0, 880, 458, 459, 460,
	1309, 912, 959, 0, 462, 461, 512, 0, 0, 0,
	173, 463, 464, 513, 465, 466, 467, 829, 174, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	825, 826, 885, 842, 843, 844, 840, 841, 854, 1510,
	2464, 0, 0, 0, 853, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	934, 859, 0, 0, 0, 222, 223, 224, 225, 469,
	900, 879, 911, 869, 910, 909, 0, 229, 871, 870,
	232, 233, 234, 861, 933, 235, 969, 970, 475, 0,
	236, 940, 0, 923, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 943, 251, 252, 926, 924, 925, 930,
	928, 927, 929, 253, 254, 255, 256, 914, 258, 907,
	906, 831, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 905, 265, 0, 266, 0, 267, 268, 0, 269,
	837, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	960, 961, 850, 213, 0, 0, 0, 0, 0, 280,
	281, 282, 904, 902, 903, 0, 285, 0, 286, 0,
	0, 944, 287, 288, 0, 289, 967, 0, 860, 290,
	0, 291, 292, 293, 294, 935, 936, 939, 342, 946,
	295, 296, 0, 297, 298, 881, 0, 0, 0, 214,
	299, 301, 308, 0, 945, 302, 893, 884, 895, 897,
	898, 899, 894, 0, 886, 0, 309, 947, 937, 948,
	310, 311, 312, 949, 919, 920, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 968, 950, 322,
	323, 951, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 873, 335,
	952, 338, 339, 341, 340, 828, 215, 953, 851, 938,
	908, 343, 344, 0, 882, 346, 883, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 954, 354, 955,
	962, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 963, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 901, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 956, 390, 391, 392,
	393, 838, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 179, 412, 413, 874, 875, 877, 878, 407,
	411, 414, 415, 931, 416, 396, 397, 417, 957, 418,
	896, 876, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 942, 425, 426, 427, 964, 0, 432, 433, 431,
	181, 434, 435, 436, 437, 438, 274, 872, 0, 440,
	915, 916, 917, 918, 0, 447, 0, 441, 442, 965,
	443, 966, 849, 444, 445, 446, 0, 448, 449, 0,
	832, 450, 451, 452, 453, 454, 456, 932, 457, 0,
	880, 458, 459, 460, 1309, 912, 959, 0, 462, 461,
	512, 0, 0, 0, 173, 463, 464, 513, 465, 466,
	467, 829, 174, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 825, 826, 885, 842, 843, 844,
	840, 841, 854, 1510, 1508, 0, 0, 0, 853, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 934, 859, 0, 0, 0, 222,
	223, 224, 225, 469, 900, 879, 911, 869, 910, 909,
	2125, 229, 871, 870, 232, 233, 234, 861, 933, 235,
	969, 970, 475, 0, 236, 940, 0, 923, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 943, 251, 252,
	926, 924, 925, 930, 928, 927, 929, 253, 254, 255,
	256, 914, 258, 907, 906, 831, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 905, 265, 0, 266, 0,
	267, 268, 0, 269, 837, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 960, 961, 850, 213, 0, 0,
	0, 0, 0, 280, 281, 282, 904, 902, 903, 0,
	285, 0, 286, 0, 2130, 944, 287, 288, 0, 289,
	967, 0, 860, 290, 0, 291, 292, 293, 294, 935,
	936, 939, 342, 946, 295, 296, 0, 297, 298, 881,
	0, 0, 0, 214, 299, 301, 308, 0, 945, 302,
	893, 884, 895, 897, 898, 899, 894, 0, 886, 0,
	309, 947, 937, 948, 310, 311, 312, 949, 919, 920,
	0, 0, 315, 316, 317, 318, 0, 320, 319, 2126,
	321, 968, 950, 322, 323, 951, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 873, 335, 952, 338, 339, 341, 340, 828,
	215, 953, 851, 938, 908, 343, 344, 0, 882, 346,
	883, 0, 0, 349, 350, 351, 0, 0, 352, 353,
	495, 954, 354, 955, 962, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 963, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	901, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	956, 390, 391, 392, 393, 838, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 0, 412, 413, 874,
	875, 877, 878, 407, 411, 414, 415, 931, 416, 396,
	397, 417, 957, 418, 896, 876, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 942, 425, 426, 427, 964,
	0, 432, 433, 431, 0, 434, 435, 436, 437, 438,
	274, 872, 0, 440, 915, 916, 917, 918, 0, 447,
	2127, 441, 442, 965, 443, 966, 849, 444, 445, 446,
	0, 448, 449, 0, 832, 450, 451, 452, 453, 454,
	456, 932, 457, 0, 880, 458, 459, 460, 509, 912,
	959, 0, 462, 461, 512, 0, 0, 0, 0, 463,
	464, 513, 465, 466, 467, 829, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 825, 826,
	0, 0, 0, 0, 0, 0, 0, 855, 0, 0,
	0, 1372, 853, 885, 842, 843, 844, 840, 841, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 934, 859, 0, 0, 0, 222, 223, 224, 225,
	469, 900, 879, 911, 869, 910, 909, 0, 229, 871,
	870, 232, 233, 234, 861, 933, 235, 969, 970, 475,
	0, 236, 940, 0, 923, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 943, 251, 252, 926, 924, 925,
	930, 928, 927, 929, 253, 254, 255, 256, 914, 258,
	907, 906, 831, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 905, 265, 0, 266, 0, 267, 268, 0,
	269, 837, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 960, 961, 850, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 904, 902, 903, 0, 285, 0, 286,
	0, 0, 944, 287, 288, 0, 289, 967, 0, 860,
	290, 0, 291, 292, 293, 294, 935, 936, 939, 342,
	946, 295, 296, 0, 297, 298, 881, 0, 0, 0,
	214, 299, 301, 308, 0, 945, 302, 893, 884, 895,
	897, 898, 899, 894, 0, 886, 0, 309, 947, 937,
	948, 310, 311, 312, 949, 919, 920, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 968, 950,
	322, 323, 951, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 873,
	335, 952, 338, 339, 341, 340, 828, 215, 953, 851,
	938, 908, 343, 344, 0, 882, 346, 883, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 954, 354,
	955, 962, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 963, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 901, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 956, 390, 391,
	392, 393, 838, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 874, 875, 877, 878,
	407, 411, 414, 415, 931, 416, 396, 397, 417, 957,
	418, 896, 876, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 942, 425, 426, 427, 964, 0, 432, 433,
	431, 0, 434, 435, 436, 437, 438, 274, 872, 0,
	440, 915, 916, 917, 918, 0, 447, 0, 441, 442,
	965, 443, 966, 849, 444, 445, 446, 0, 448, 449,
	0, 832, 450, 451, 452, 453, 454, 456, 932, 457,
	0, 880, 458, 459, 460, 509, 912, 959, 0, 462,
	461, 512, 1371, 0, 0, 0, 463, 464, 513, 465,
	466, 467, 829, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 825, 826, 0, 0, 0,
	0, 0, 0, 0, 855, 0, 0, 0, 821, 853,
	885, 842, 843, 844, 840, 841, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 934, 859,
	0, 0, 0, 222, 223, 224, 225, 469, 900, 879,
	911, 869, 910, 909, 0, 229, 871, 870, 232, 233,
	234, 861, 933, 235, 969, 970, 475, 0, 236, 940,
	0, 923, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 943, 251, 252, 926, 924, 925, 930, 928, 927,
	929, 253, 254, 255, 256, 914, 258, 907, 906, 831,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 905,
	265, 0, 266, 0, 267, 268, 0, 269, 837, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 960, 961,
	850, 213, 0, 0, 0, 0, 0, 280, 281, 282,
	904, 902, 903, 0, 285, 0, 286, 0, 0, 944,
	287, 288, 0, 289, 967, 0, 860, 290, 0, 291,
	292, 293, 294, 935, 936, 939, 342, 946, 295, 296,
	0, 297, 298, 881, 0, 0, 0, 214, 299, 301,
	308, 0, 945, 302, 893, 884, 895, 897, 898, 899,
	894, 0, 886, 0, 309, 947, 937, 948, 310, 311,
	312, 949, 919, 920, 0, 0, 315, 316, 317, 318,
	0, 320, 319, 0, 321, 968, 950, 322, 323, 951,
	0, 324, 325, 0, 0, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 873, 335, 952, 338,
	339, 341, 340, 828, 215, 953, 851, 938, 908, 343,
	344, 0, 882, 346, 883, 833, 0, 349, 350, 351,
	0, 0, 352, 353, 495, 954, 354, 955, 962, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 0, 363,
	364, 963, 365, 498, 366, 0, 367, 0, 368, 369,
	370, 371, 372, 373, 901, 374, 375, 0, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 0, 389, 956, 390, 391, 392, 393, 838,
	394, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	0, 412, 413, 874, 875, 877, 878, 407, 411, 414,
	415, 931, 416, 396, 397, 417, 957, 418, 896, 876,
	420, 0, 430, 421, 422, 423, 398, 424, 428, 942,
	425, 426, 427, 964, 0, 432, 433, 431, 0, 434,
	435, 436, 437, 438, 274, 872, 0, 440, 915, 916,
	917, 918, 0, 447, 0, 441, 442, 965, 443, 966,
	849, 444, 445, 446, 0, 448, 449, 0, 832, 450,
	451, 452, 453, 454, 456, 932, 457, 0, 880, 458,
	459, 460, 509, 912, 959, 0, 462, 461, 512, 0,
	0, 0, 0, 463, 464, 513, 465, 466, 467, 829,
	0, 0, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 825, 826, 885, 842, 843, 844, 840, 841,
	854, 855, 0, 0, 0, 0, 853, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 934, 859, 0, 0, 0, 222, 223, 224,
	225, 469, 900, 879, 911, 869, 910, 909, 0, 229,
	871, 870, 232, 233, 234, 861, 933, 235, 969, 970,
	475, 0, 236, 940, 0, 923, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 3419, 250, 0, 943, 251, 252, 926, 924,
	925, 930, 928, 927, 929, 253, 254, 255, 256, 914,
	258, 907, 906, 831, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 905, 265, 0, 266, 0, 267, 268,
	0, 269, 837, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 960, 961, 850, 213, 0, 0, 0, 0,
	0, 280, 281, 282, 904, 902, 903, 0, 285, 0,
	286, 0, 0, 944, 287, 288, 0, 289, 967, 0,
	860, 290, 0, 291, 292, 293, 294, 935, 936, 939,
	342, 946, 295, 296, 0, 297, 298, 881, 0, 0,
	0, 214, 299, 301, 308, 0, 945, 302, 893, 884,
	895, 897, 898, 899, 894, 0, 886, 0, 309, 947,
	937, 948, 310, 311, 312, 949, 919, 920, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 968,
	950, 322, 323, 951, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 332, 334, 336,
	873, 335, 952, 338, 339, 341, 340, 828, 215, 953,
	851, 938, 908, 343, 344, 0, 882, 346, 883, 833,
	0, 349, 350, 351, 0, 0, 352, 353, 495, 954,
	354, 955, 962, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 963, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 372, 373, 901, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 956, 390,
	391, 392, 393, 838, 394, 0, 395, 399, 400, 401,
	402, 403, 404, 405, 0, 412, 413, 874, 875, 877,
	878, 407, 411, 414, 415, 931, 416, 396, 397, 417,
	957, 418, 896, 876, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 942, 425, 426, 427, 964, 0, 432,
	433, 431, 0, 434, 435, 436, 437, 438, 274, 872,
	0, 440, 915, 916, 917, 918, 0, 447, 0, 441,
	442, 965, 443, 966, 849, 444, 445, 446, 0, 448,
	449, 0, 832, 450, 451, 452, 453, 454, 456, 932,
	457, 0, 880, 458, 459, 460, 509, 912, 959, 0,
	462, 461, 512, 0, 0, 0, 0, 463, 464, 513,
	465, 466, 467, 829, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 825, 826, 885, 842,
	843, 844, 840, 841, 854, 855, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 934, 859, 0, 0,
	0, 222, 223, 224, 225, 469, 900, 879, 911, 869,
	910, 909, 0, 229, 871, 870, 232, 233, 234, 861,
	933, 235, 969, 970, 475, 0, 236, 940, 0, 923,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 3278, 250, 0, 943,
	251, 252, 926, 924, 925, 930, 928, 927, 929, 253,
	254, 255, 256, 914, 258, 907, 906, 831, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 905, 265, 0,
	266, 0, 267, 268, 0, 269, 837, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 960, 961, 850, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 904, 902,
	903, 0, 285, 0, 286, 0, 0, 944, 287, 288,
	0, 289, 967, 0, 860, 290, 0, 291, 292, 293,
	294, 935, 936, 939, 342, 946, 295, 296, 0, 297,
	298, 881, 0, 0, 0, 214, 299, 301, 308, 0,
	945, 302, 893, 884, 895, 897, 898, 899, 894, 0,
	886, 0, 309, 947, 937, 948, 310, 311, 312, 949,
	919, 920, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 968, 950, 322, 323, 951, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 873, 335, 952, 338, 339, 341,
	340, 828, 215, 953, 851, 938, 908, 343, 344, 0,
	882, 346, 883, 833, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 954, 354, 955, 962, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 963,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 901, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 956, 390, 391, 392, 393, 838, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 874, 875, 877, 878, 407, 411, 414, 415, 931,
	416, 396, 397, 417, 957, 418, 896, 876, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 942, 425, 426,
	427, 964, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 872, 0, 440, 915, 916, 917, 918,
	0, 447, 0, 441, 442, 965, 443, 966, 849, 444,
	445, 446, 0, 448, 449, 0, 832, 450, 451, 452,
	453, 454, 456, 932, 457, 0, 880, 458, 459, 460,
	509, 912, 959, 0, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 829, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	825, 826, 885, 842, 843, 844, 840, 841, 854, 855,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	934, 859, 0, 0, 0, 222, 223, 224, 225, 469,
	900, 879, 911, 869, 910, 909, 0, 229, 871, 870,
	232, 233, 234, 861, 933, 235, 969, 970, 475, 0,
	236, 940, 0, 923, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 943, 251, 252, 926, 924, 925, 930,
	928, 927, 929, 253, 254, 255, 256, 914, 258, 907,
	906, 831, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 905, 265, 0, 266, 0, 267, 268, 0, 269,
	837, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	960, 961, 850, 213, 0, 0, 0, 0, 0, 280,
	281, 282, 904, 902, 903, 0, 285, 0, 286, 0,
	0, 944, 287, 288, 0, 289, 967, 0, 860, 290,
	0, 291, 292, 293, 294, 935, 936, 939, 342, 946,
	295, 296, 0, 297, 298, 881, 0, 0, 0, 214,
	299, 301, 308, 0, 945, 302, 893, 884, 895, 897,
	898, 899, 894, 0, 886, 0, 309, 947, 937, 948,
	310, 311, 312, 949, 919, 920, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 968, 950, 322,
	323, 951, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 873, 335,
	952, 338, 339, 341, 340, 828, 3011, 953, 851, 938,
	908, 343, 344, 0, 882, 346, 883, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 954, 354, 955,
	962, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 963, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 901, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 956, 390, 391, 392,
	393, 838, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 874, 875, 877, 878, 407,
	411, 414, 415, 931, 416, 396, 397, 417, 957, 418,
	896, 876, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 942, 425, 426, 427, 964, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 872, 0, 440,
	915, 916, 917, 918, 0, 447, 0, 441, 442, 965,
	443, 966, 849, 444, 445, 446, 0, 448, 449, 0,
	832, 450, 451, 452, 453, 454, 456, 932, 457, 0,
	880, 458, 459, 460, 509, 912, 959, 0, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 829, 0, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 825, 826, 1570, 0, 0, 0,
	0, 0, 0, 855, 0, 0, 0, 0, 853, 885,
	842, 843, 844, 840, 841, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 934, 859, 0,
	0, 0, 222, 223, 224, 225, 469, 900, 879, 911,
	869, 910, 909, 0, 229, 871, 870, 232, 233, 234,
	861, 933, 235, 969, 970, 475, 0, 236, 940, 0,
	923, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	943, 251, 252, 926, 924, 925, 930, 928, 927, 929,
	253, 254, 255, 256, 914, 258, 907, 906, 831, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 905, 265,
	0, 266, 0, 267, 268, 0, 269, 837, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 960, 961, 850,
	213, 0, 0, 0, 0, 0, 280, 281, 282, 904,
	902, 903, 0, 285, 0, 286, 0, 0, 944, 287,
	288, 0, 289, 967, 0, 860, 290, 0, 291, 292,
	293, 294, 935, 936, 939, 342, 946, 295, 296, 0,
	297, 298, 881, 0, 0, 0, 214, 299, 301, 308,
	0, 945, 302, 893, 884, 895, 897, 898, 899, 894,
	0, 886, 0, 309, 947, 937, 948, 310, 311, 312,
	949, 919, 920, 0, 0, 315, 316, 317, 318, 0,
	320, 319, 0, 321, 968, 950, 322, 323, 951, 0,
	324, 325, 0, 0, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 873, 335, 952, 338, 339,
	341, 340, 828, 215, 953, 851, 938, 908, 343, 344,
	0, 882, 346, 883, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 495, 954, 354, 955, 962, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 0, 363, 364,
	963, 365, 498, 366, 0, 367, 0, 368, 369, 370,
	371, 372, 373, 901, 374, 375, 0, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 0, 389, 956, 390, 391, 392, 393, 838, 394,
	0, 395, 399, 400, 401, 402, 403, 404, 405, 0,
	412, 413, 874, 875, 877, 878, 407, 411, 414, 415,
	931, 416, 396, 397, 417, 957, 418, 896, 876, 420,
	0, 430, 421, 422, 423, 398, 424, 428, 942, 425,
	426, 427, 964, 0, 432, 433, 431, 0, 434, 435,
	436, 437, 438, 274, 872, 0, 440, 915, 916, 917,
	918, 0, 447, 0, 441, 442, 965, 443, 966, 849,
	444, 445, 446, 0, 448, 449, 0, 832, 450, 451,
	452, 453, 454, 456, 932, 457, 0, 880, 458, 459,
	460, 509, 912, 959, 2819, 462, 461, 512, 0, 0,
	0, 0, 463, 464, 513, 465, 466, 467, 829, 0,
	0, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 825, 826, 885, 842, 843, 844, 840, 841, 854,
	855, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 934, 859, 0, 0, 0, 222, 223, 224, 225,
	469, 900, 879, 911, 869, 910, 909, 0, 229, 871,
	870, 232, 233, 234, 861, 933, 235, 969, 970, 475,
	0, 236, 940, 0, 923, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 943, 251, 252, 926, 924, 925,
	930, 928, 927, 929, 253, 254, 255, 256, 914, 258,
	907, 906, 831, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 905, 265, 0, 266, 0, 267, 268, 0,
	269, 837, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 960, 961, 850, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 904, 902, 903, 0, 285, 0, 286,
	0, 0, 944, 287, 288, 0, 289, 967, 0, 860,
	290, 0, 291, 292, 293, 294, 935, 936, 939, 342,
	946, 295, 296, 0, 297, 298, 881, 0, 0, 0,
	1954, 299, 301, 308, 0, 945, 302, 893, 884, 895,
	897, 898, 899, 894, 0, 886, 0, 309, 947, 937,
	948, 310, 311, 312, 949, 919, 920, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 968, 950,
	322, 323, 951, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 873,
	335, 952, 338, 339, 341, 340, 828, 215, 953, 851,
	938, 908, 343, 344, 0, 882, 346, 883, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 954, 354,
	955, 962, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 963, 365, 498, 366, 1953, 367,
	0, 368, 369, 370, 371, 372, 373, 901, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 956, 390, 391,
	392, 393, 838, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 874, 875, 877, 878,
	407, 411, 414, 415, 931, 416, 396, 397, 417, 957,
	418, 896, 876, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 942, 425, 426, 427, 964, 0, 432, 433,
	431, 0, 434, 435, 436, 437, 438, 274, 872, 0,
	440, 915, 916, 917, 918, 0, 447, 0, 441, 442,
	965, 443, 966, 849, 444, 445, 446, 0, 448, 449,
	0, 832, 450, 451, 452, 453, 454, 456, 932, 457,
	0, 880, 458, 459, 460, 509, 912, 959, 0, 462,
	461, 512, 0, 0, 0, 0, 463, 464, 513, 465,
	466, 467, 829, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 825, 826, 885, 842, 843,
	844, 840, 841, 854, 855, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 934, 859, 0, 0, 0,
	222, 223, 224, 225, 469, 900, 879, 911, 869, 910,
	909, 0, 229, 871, 870, 232, 233, 234, 861, 933,
	235, 969, 970, 475, 0, 236, 940, 0, 923, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 943, 251,
	252, 926, 924, 925, 930, 928, 927, 929, 253, 254,
	255, 256, 914, 258, 907, 906, 831, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 905, 265, 0, 266,
	0, 267, 268, 0, 269, 837, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 960, 961, 850, 213, 0,
	0, 0, 0, 0, 280, 281, 282, 904, 902, 903,
	0, 285, 0, 286, 0, 0, 944, 287, 288, 0,
	289, 967, 0, 860, 290, 0, 291, 292, 293, 294,
	935, 936, 939, 342, 946, 295, 296, 0, 297, 298,
	881, 0, 0, 0, 214, 299, 301, 308, 0, 945,
	302, 893, 884, 895, 897, 898, 899, 894, 0, 886,
	0, 309, 947, 937, 948, 310, 311, 312, 949, 919,
	920, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 968, 950, 322, 323, 951, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 873, 335, 952, 338, 339, 341, 340,
	828, 215, 953, 851, 938, 908, 343, 344, 0, 882,
	346, 883, 833, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 954, 354, 955, 962, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 963, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 901, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 956, 390, 391, 392, 393, 838, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	874, 875, 877, 878, 407, 411, 414, 415, 931, 416,
	396, 397, 417, 957, 418, 896, 876, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 942, 425, 426, 427,
	964, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 872, 0, 440, 915, 916, 917, 918, 0,
	447, 0, 441, 442, 965, 443, 966, 849, 444, 445,
	446, 0, 448, 449, 0, 832, 450, 451, 452, 453,
	454, 456, 932, 457, 0, 880, 458, 459, 460, 509,
	912, 959, 0, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 829, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 825,
	826, 885, 842, 843, 844, 840, 841, 854, 855, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 934,
	859, 0, 0, 0, 222, 223, 224, 225, 469, 900,
	879, 911, 869, 910, 909, 0, 229, 871, 870, 232,
	233, 234, 861, 933, 235, 969, 970, 475, 0, 236,
	940, 0, 923, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 943, 251, 252, 926, 924, 925, 930, 928,
	927, 929, 253, 254, 255, 256, 914, 258, 907, 906,
	831, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	905, 265, 0, 266, 0, 267, 268, 0, 269, 837,
	270, 271, 273, 275, 272, 276, 277, 278, 279, 960,
	961, 850, 213, 0, 0, 0, 0, 0, 280, 281,
	282, 904, 902, 903, 0, 285, 0, 286, 0, 0,
	944, 287, 288, 0, 289, 967, 0, 860, 290, 0,
	291, 292, 293, 294, 935, 936, 939, 342, 946, 295,
	296, 0, 297, 298, 881, 0, 0, 0, 214, 299,
	301, 308, 0, 945, 302, 893, 884, 895, 897, 898,
	899, 894, 0, 886, 0, 309, 947, 937, 948, 310,
	311, 312, 949, 919, 920, 0, 0, 315, 316, 317,
	318, 0, 320, 319, 0, 321, 968, 950, 322, 323,
	951, 0, 324, 325, 0, 0, 326, 327, 0, 328,
	329, 331, 333, 330, 332, 334, 336, 873, 335, 952,
	338, 339, 341, 340, 828, 215, 953, 851, 938, 908,
	343, 344, 0, 882, 346, 883, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 495, 954, 354, 955, 962,
	355, 348, 356, 357, 358, 359, 360, 361, 362, 0,
	363, 364, 963, 365, 498, 366, 0, 367, 0, 368,
	369, 370, 371, 372, 373, 901, 374, 375, 0, 376,
	377, 378, 379, 380, 0, 382, 383, 384, 381, 385,
	386, 387, 388, 0, 389, 956, 390, 391, 392, 393,
	838, 394, 0, 395, 399, 400, 401, 402, 403, 404,
	405, 0, 412, 413, 874, 875, 877, 878, 407, 411,
	414, 415, 931, 416, 396, 397, 417, 957, 418, 896,
	876, 420, 0, 430, 421, 422, 423, 398, 424, 428,
	942, 425, 426, 427, 964, 0, 432, 433, 431, 0,
	434, 435, 436, 437, 438, 274, 872, 0, 440, 915,
	916, 917, 918, 0, 447, 0, 441, 442, 965, 443,
	966, 849, 444, 445, 446, 0, 448, 449, 0, 832,
	450, 451, 452, 453, 454, 456, 932, 457, 0, 880,
	458, 459, 460, 509, 912, 959, 0, 462, 461, 512,
	0, 0, 0, 0, 463, 464, 513, 465, 466, 467,
	829, 0, 0, 0, 0, 0, 0, 0, 827, 0,
	0, 0, 0, 825, 826, 1570, 0, 0, 0, 0,
	0, 0, 855, 0, 0, 0, 0, 853, 885, 842,
	843, 844, 840, 841, 854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 934, 859, 0, 0,
	0, 222, 223, 224, 225, 469, 900, 879, 911, 869,
	910, 909, 0, 229, 871, 870, 232, 233, 234, 861,
	933, 235, 969, 970, 475, 0, 236, 940, 0, 923,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 943,
	251, 252, 926, 924, 925, 930, 928, 927, 929, 253,
	254, 255, 256, 914, 258, 907, 906, 831, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 905, 265, 0,
	266, 0, 267, 268, 0, 269, 837, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 960, 961, 850, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 904, 902,
	903, 0, 285, 0, 286, 0, 2130, 944, 287, 288,
	0, 289, 967, 0, 860, 290, 0, 291, 292, 293,
	294, 935, 936, 939, 342, 946, 295, 296, 0, 297,
	298, 881, 0, 0, 0, 214, 299, 301, 308, 0,
	945, 302, 893, 884, 895, 897, 898, 899, 894, 0,
	886, 0, 309, 947, 937, 948, 310, 311, 312, 949,
	919, 920, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 968, 950, 322, 323, 951, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 873, 335, 952, 338, 339, 341,
	340, 828, 215, 953, 851, 938, 908, 343, 344, 0,
	882, 346, 883, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 954, 354, 955, 962, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 963,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 901, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 956, 390, 391, 392, 393, 838, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 874, 875, 877, 878, 407, 411, 414, 415, 931,
	416, 396, 397, 417, 957, 418, 896, 876, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 942, 425, 426,
	427, 964, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 872, 0, 440, 915, 916, 917, 918,
	0, 447, 0, 441, 442, 965, 443, 966, 849, 444,
	445, 446, 0, 448, 449, 0, 832, 450, 451, 452,
	453, 454, 456, 932, 457, 0, 880, 458, 459, 460,
	509, 912, 959, 0, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 829, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	825, 826, 885, 842, 843, 844, 840, 841, 854, 855,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	934, 859, 0, 0, 0, 222, 223, 224, 225, 469,
	900, 879, 911, 869, 910, 909, 0, 229, 871, 870,
	232, 233, 234, 861, 933, 235, 969, 970, 475, 0,
	236, 940, 0, 923, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 943, 251, 252, 926, 924, 925, 930,
	928, 927, 929, 253, 254, 255, 256, 914, 258, 907,
	906, 831, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 905, 265, 0, 266, 0, 267, 268, 0, 269,
	837, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	960, 961, 850, 213, 0, 0, 0, 0, 0, 280,
	281, 282, 904, 902, 903, 0, 285, 0, 286, 0,
	0, 944, 287, 288, 0, 289, 967, 0, 860, 290,
	0, 291, 292, 293, 294, 935, 936, 939, 342, 946,
	295, 296, 0, 297, 298, 881, 0, 0, 0, 214,
	299, 301, 308, 0, 945, 302, 893, 884, 895, 897,
	898, 899, 894, 0, 886, 0, 309, 947, 937, 948,
	310, 311, 312, 949, 919, 920, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 968, 950, 322,
	323, 951, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 873, 335,
	952, 338, 339, 341, 340, 828, 215, 953, 851, 938,
	908, 343, 344, 0, 882, 346, 883, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 954, 354, 955,
	962, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 963, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 901, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 956, 390, 391, 392,
	393, 838, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 874, 875, 877, 878, 407,
	411, 414, 415, 931, 416, 396, 397, 417, 957, 418,
	896, 876, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 942, 425, 426, 427, 964, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 872, 0, 440,
	915, 916, 917, 918, 0, 447, 0, 441, 442, 965,
	443, 966, 849, 444, 445, 446, 0, 448, 449, 0,
	832, 450, 451, 452, 453, 454, 456, 932, 457, 0,
	880, 458, 459, 460, 509, 912, 959, 0, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 829, 0, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 825, 826, 0, 0, 0, 0,
	0, 0, 0, 855, 1508, 0, 0, 2135, 853, 885,
	842, 843, 844, 840, 841, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 934, 859, 0,
	0, 0, 222, 223, 224, 225, 469, 900, 879, 911,
	869, 910, 909, 0, 229, 871, 870, 232, 233, 234,
	861, 933, 235, 969, 970, 475, 0, 236, 940, 0,
	923, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	943, 251, 252, 926, 924, 925, 930, 928, 927, 929,
	253, 254, 255, 256, 914, 258, 907, 906, 831, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 905, 265,
	0, 266, 0, 267, 268, 0, 269, 837, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 960, 961, 850,
	213, 0, 0, 0, 0, 0, 280, 281, 282, 904,
	902, 903, 0, 285, 0, 286, 0, 0, 944, 287,
	288, 0, 289, 967, 0, 860, 290, 0, 291, 292,
	293, 294, 935, 936, 939, 342, 946, 295, 296, 0,
	297, 298, 881, 0, 0, 0, 214, 299, 301, 308,
	0, 945, 302, 893, 884, 895, 897, 898, 899, 894,
	0, 886, 0, 309, 947, 937, 948, 310, 311, 312,
	949, 919, 920, 0, 0, 315, 316, 317, 318, 0,
	320, 319, 0, 321, 968, 950, 322, 323, 951, 0,
	324, 325, 0, 0, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 873, 335, 952, 338, 339,
	341, 340, 828, 215, 953, 851, 938, 908, 343, 344,
	0, 882, 346, 883, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 495, 954, 354, 955, 962, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 0, 363, 364,
	963, 365, 498, 366, 0, 367, 0, 368, 369, 370,
	371, 372, 373, 901, 374, 375, 0, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 0, 389, 956, 390, 391, 392, 393, 838, 394,
	0, 395, 399, 400, 401, 402, 403, 404, 405, 0,
	412, 413, 874, 875, 877, 878, 407, 411, 414, 415,
	931, 416, 396, 397, 417, 957, 418, 896, 876, 420,
	0, 430, 421, 422, 423, 398, 424, 428, 942, 425,
	426, 427, 964, 0, 432, 433, 431, 0, 434, 435,
	436, 437, 438, 274, 872, 0, 440, 915, 916, 917,
	918, 0, 447, 0, 441, 442, 965, 443, 966, 849,
	444, 445, 446, 0, 448, 449, 0, 832, 450, 451,
	452, 453, 454, 456, 932, 457, 0, 880, 458, 459,
	460, 509, 912, 959, 0, 462, 461, 512, 0, 0,
	0, 0, 463, 464, 513, 465, 466, 467, 829, 0,
	0, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 825, 826, 0, 0, 0, 0, 0, 0, 0,
	855, 0, 0, 0, 2133, 853, 885, 842, 843, 844,
	840, 841, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 934, 859, 0, 0, 0, 222,
	223, 224, 225, 469, 900, 879, 911, 869, 910, 909,
	0, 229, 871, 870, 232, 233, 234, 861, 933, 235,
	969, 970, 475, 0, 236, 940, 0, 923, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 943, 251, 252,
	926, 924, 925, 930, 928, 927, 929, 253, 254, 255,
	256, 914, 258, 907, 906, 831, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 905, 265, 0, 266, 0,
	267, 268, 0, 269, 837, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 960, 961, 850, 213, 0, 0,
	0, 0, 0, 280, 281, 282, 904, 902, 903, 0,
	285, 0, 286, 0, 0, 944, 287, 288, 0, 289,
	967, 0, 860, 290, 0, 291, 292, 293, 294, 935,
	936, 939, 342, 946, 295, 296, 0, 297, 298, 881,
	0, 0, 0, 214, 299, 301, 308, 0, 945, 302,
	893, 884, 895, 897, 898, 899, 894, 0, 886, 0,
	309, 947, 937, 948, 310, 311, 312, 949, 919, 920,
	0, 0, 315, 316, 317, 318, 0, 320, 319, 0,
	321, 968, 950, 322, 323, 951, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 873, 335, 952, 338, 339, 341, 340, 828,
	215, 953, 851, 938, 908, 343, 344, 0, 882, 346,
	883, 0, 0, 349, 350, 351, 0, 0, 352, 353,
	495, 954, 354, 955, 962, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 963, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	901, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	956, 390, 391, 392, 393, 838, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 0, 412, 413, 874,
	875, 877, 878, 407, 411, 414, 415, 931, 416, 396,
	397, 417, 957, 418, 896, 876, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 942, 425, 426, 427, 964,
	0, 432, 433, 431, 0, 434, 435, 436, 437, 438,
	274, 872, 0, 440, 915, 916, 917, 918, 0, 447,
	0, 441, 442, 965, 443, 966, 849, 444, 445, 446,
	0, 448, 449, 0, 832, 450, 451, 452, 453, 454,
	456, 932, 457, 0, 880, 458, 459, 460, 509, 912,
	959, 0, 462, 461, 512, 0, 0, 0, 0, 463,
	464, 513, 465, 466, 467, 829, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 825, 826,
	0, 0, 0, 0, 0, 0, 0, 855, 0, 0,
	0, 2121, 853, 885, 842, 843, 844, 840, 841, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 934, 859, 0, 0, 0, 222, 223, 224, 225,
	469, 900, 879, 911, 869, 910, 909, 0, 229, 871,
	870, 232, 233, 234, 861, 933, 235, 969, 970, 475,
	0, 236, 940, 0, 923, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 943, 251, 252, 926, 924, 925,
	930, 928, 927, 929, 253, 254, 255, 256, 914, 258,
	907, 906, 831, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 905, 265, 0, 266, 0, 267, 268, 0,
	269, 837, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 960, 961, 850, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 904, 902, 903, 0, 285, 0, 286,
	0, 0, 944, 287, 288, 0, 289, 967, 0, 860,
	290, 0, 291, 292, 293, 294, 935, 936, 939, 342,
	946, 295, 296, 0, 297, 298, 881, 0, 0, 0,
	214, 299, 301, 308, 0, 945, 302, 893, 884, 895,
	897, 898, 899, 894, 0, 886, 0, 309, 947, 937,
	948, 310, 311, 312, 949, 919, 920, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 968, 950,
	322, 323, 951, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 873,
	335, 952, 338, 339, 341, 340, 828, 215, 953, 851,
	938, 908, 343, 344, 0, 882, 346, 883, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 954, 354,
	955, 962, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 963, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 901, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 956, 390, 391,
	392, 393, 838, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 874, 875, 877, 878,
	407, 411, 414, 415, 931, 416, 396, 397, 417, 957,
	418, 896, 876, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 942, 425, 426, 427, 964, 0, 432, 433,
	431, 0, 434, 435, 436, 437, 438, 274, 872, 0,
	440, 915, 916, 917, 918, 0, 447, 0, 441, 442,
	965, 443, 966, 849, 444, 445, 446, 0, 448, 449,
	0, 832, 450, 451, 452, 453, 454, 456, 932, 457,
	0, 880, 458, 459, 460, 509, 912, 959, 0, 462,
	461, 512, 0, 0, 0, 0, 463, 464, 513, 465,
	466, 467, 829, 0, 0, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 0, 825, 826, 0, 0, 0,
	0, 0, 0, 0, 855, 0, 0, 0, 2110, 853,
	885, 842, 843, 844, 840, 841, 854, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 934, 859,
	0, 0, 0, 222, 223, 224, 225, 469, 900, 879,
	911, 869, 910, 909, 0, 229, 871, 870, 232, 233,
	234, 861, 933, 235, 969, 970, 475, 0, 236, 940,
	0, 923, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 943, 251, 252, 926, 924, 925, 930, 928, 927,
	929, 253, 254, 255, 256, 914, 258, 907, 906, 831,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 905,
	265, 0, 266, 0, 267, 268, 0, 269, 837, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 960, 961,
	850, 213, 0, 0, 0, 0, 0, 280, 281, 282,
	904, 902, 903, 0, 285, 0, 286, 0, 0, 944,
	287, 288, 0, 289, 967, 0, 860, 290, 0, 291,
	292, 293, 294, 935, 936, 939, 342, 946, 295, 296,
	0, 297, 298, 881, 0, 0, 0, 214, 299, 301,
	308, 0, 945, 302, 893, 884, 895, 897, 898, 899,
	894, 0, 886, 0, 309, 947, 937, 948, 310, 311,
	312, 949, 919, 920, 0, 0, 315, 316, 317, 318,
	0, 320, 319, 0, 321, 968, 950, 322, 323, 951,
	0, 324, 325, 0, 0, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 873, 335, 952, 338,
	339, 341, 340, 828, 215, 953, 851, 938, 908, 343,
	344, 0, 882, 346, 883, 0, 0, 349, 350, 351,
	0, 0, 352, 353, 495, 954, 354, 955, 962, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 0, 363,
	364, 963, 365, 498, 366, 0, 367, 0, 368, 369,
	370, 371, 372, 373, 901, 374, 375, 0, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 0, 389, 956, 390, 391, 392, 393, 838,
	394, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	0, 412, 413, 874, 875, 877, 878, 407, 411, 414,
	415, 931, 416, 396, 397, 417, 957, 418, 896, 876,
	420, 0, 430, 421, 422, 423, 398, 424, 428, 942,
	425, 426, 427, 964, 0, 432, 433, 431, 0, 434,
	435, 436, 437, 438, 274, 872, 0, 440, 915, 916,
	917, 918, 0, 447, 0, 441, 442, 965, 443, 966,
	849, 444, 445, 446, 0, 448, 449, 0, 832, 450,
	451, 452, 453, 454, 456, 932, 457, 0, 880, 458,
	459, 460, 509, 912, 959, 0, 462, 461, 512, 0,
	0, 0, 0, 463, 464, 513, 465, 466, 467, 829,
	0, 0, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 825, 826, 0, 0, 0, 0, 0, 0,
	0, 855, 0, 0, 0, 2108, 853, 2100, 842, 843,
	844, 840, 841, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 934, 859, 0, 0, 0,
	222, 223, 224, 225, 469, 900, 879, 911, 869, 910,
	909, 0, 229, 871, 870, 232, 233, 234, 861, 933,
	235, 969, 970, 475, 0, 236, 940, 0, 923, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 943, 251,
	252, 926, 924, 925, 930, 928, 927, 929, 253, 254,
	255, 256, 914, 2103, 907, 906, 831, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 905, 265, 0, 266,
	0, 267, 268, 0, 269, 837, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 960, 961, 850, 213, 0,
	0, 0, 0, 0, 280, 281, 282, 904, 902, 903,
	0, 285, 0, 286, 0, 0, 944, 287, 288, 0,
	289, 967, 0, 860, 290, 0, 291, 292, 293, 2104,
	935, 936, 939, 342, 946, 295, 296, 0, 297, 298,
	881, 0, 0, 0, 214, 299, 301, 308, 0, 945,
	302, 893, 884, 895, 897, 898, 899, 894, 0, 886,
	0, 309, 947, 937, 948, 310, 311, 312, 949, 919,
	920, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 968, 950, 322, 323, 951, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	2105, 2102, 336, 873, 335, 952, 338, 339, 341, 340,
	828, 215, 953, 851, 938, 908, 343, 344, 0, 882,
	346, 883, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 954, 354, 955, 962, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 963, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 901, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 956, 390, 391, 392, 393, 838, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 2106, 0, 412, 413,
	874, 875, 877, 878, 407, 411, 414, 415, 931, 416,
	396, 397, 417, 957, 418, 896, 876, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 942, 425, 426, 427,
	964, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 872, 0, 440, 915, 916, 917, 918, 0,
	447, 0, 441, 442, 965, 443, 966, 849, 444, 445,
	446, 0, 448, 449, 0, 832, 450, 451, 452, 453,
	454, 456, 932, 457, 0, 880, 458, 459, 460, 509,
	912, 959, 0, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 2101, 467, 829, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 825,
	826, 0, 0, 0, 0, 0, 0, 0, 855, 0,
	0, 0, 2097, 853, 2100, 842, 843, 844, 840, 841,
	854, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 934, 859, 0, 0, 0, 222, 223, 224,
	225, 469, 900, 879, 911, 869, 910, 909, 0, 229,
	871, 870, 232, 233, 234, 861, 933, 235, 969, 970,
	475, 0, 236, 940, 0, 923, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 943, 251, 252, 926, 924,
	925, 930, 928, 927, 929, 253, 254, 255, 256, 914,
	2103, 907, 906, 831, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 905, 265, 0, 266, 0, 267, 268,
	0, 269, 837, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 960, 961, 850, 213, 0, 0, 0, 0,
	0, 280, 281, 282, 904, 902, 903, 0, 285, 0,
	286, 0, 0, 944, 287, 288, 0, 289, 967, 0,
	860, 290, 0, 291, 292, 293, 2104, 935, 936, 939,
	342, 946, 295, 296, 0, 297, 298, 881, 0, 0,
	0, 214, 299, 301, 308, 0, 945, 302, 893, 884,
	895, 897, 898, 899, 894, 0, 886, 0, 309, 947,
	937, 948, 310, 311, 312, 949, 919, 920, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 968,
	950, 322, 323, 951, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 2105, 2102, 336,
	873, 335, 952, 338, 339, 341, 340, 828, 215, 953,
	851, 938, 908, 343, 344, 0, 882, 346, 883, 0,
	0, 349, 350, 351, 0, 0, 352, 353, 495, 954,
	354, 955, 962, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 963, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 372, 373, 901, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 956, 390,
	391, 392, 393, 838, 394, 0, 395, 399, 400, 401,
	402, 403, 404, 2106, 0, 412, 413, 874, 875, 877,
	878, 407, 411, 414, 415, 931, 416, 396, 397, 417,
	957, 418, 896, 876, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 942, 425, 426, 427, 964, 0, 432,
	433, 431, 0, 434, 435, 436, 437, 438, 274, 872,
	0, 440, 915, 916, 917, 918, 0, 447, 0, 441,
	442, 965, 443, 966, 849, 444, 445, 446, 0, 448,
	449, 0, 832, 450, 451, 452, 453, 454, 456, 932,
	457, 0, 880, 458, 459, 460, 509, 912, 959, 0,
	462, 461, 512, 0, 0, 0, 0, 463, 464, 513,
	465, 2101, 467, 829, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 825, 826, 885, 842,
	843, 844, 840, 841, 854, 855, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 934, 859, 0, 0,
	0, 222, 223, 224, 225, 469, 900, 879, 911, 869,
	910, 909, 0, 229, 871, 870, 232, 233, 234, 861,
	933, 235, 969, 970, 475, 0, 236, 940, 0, 923,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 943,
	251, 252, 926, 924, 925, 930, 928, 927, 929, 253,
	254, 255, 256, 914, 258, 907, 906, 831, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 905, 265, 0,
	266, 0, 267, 268, 0, 269, 837, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 960, 961, 850, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 904, 902,
	903, 0, 285, 0, 286, 0, 0, 944, 287, 288,
	0, 289, 967, 0, 860, 290, 0, 291, 292, 293,
	294, 935, 936, 939, 342, 946, 295, 296, 0, 297,
	298, 881, 0, 0, 0, 214, 299, 301, 308, 0,
	945, 302, 893, 884, 895, 897, 898, 899, 894, 0,
	886, 0, 309, 947, 937, 948, 310, 311, 312, 949,
	919, 920, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 968, 950, 322, 323, 951, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 873, 335, 952, 338, 339, 341,
	340, 828, 215, 953, 851, 938, 908, 343, 344, 0,
	882, 346, 883, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 954, 354, 955, 962, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 963,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 901, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 956, 390, 391, 392, 393, 838, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 874, 875, 877, 878, 407, 411, 414, 415, 931,
	416, 396, 397, 417, 957, 418, 896, 876, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 942, 425, 426,
	427, 964, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 872, 0, 440, 915, 916, 917, 918,
	0, 447, 0, 441, 442, 965, 443, 966, 849, 444,
	445, 446, 0, 448, 449, 0, 832, 450, 451, 452,
	453, 454, 456, 932, 457, 0, 880, 458, 459, 460,
	509, 912, 959, 0, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 829, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	825, 826, 0, 0, 0, 0, 0, 1516, 0, 855,
	0, 0, 0, 0, 853, 885, 842, 843, 844, 840,
	841, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 1941, 221, 0,
	0, 0, 0, 934, 859, 0, 0, 0, 222, 223,
	224, 225, 469, 900, 879, 911, 869, 910, 909, 0,
	229, 871, 870, 232, 233, 234, 861, 933, 235, 969,
	970, 475, 0, 236, 940, 0, 923, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 943, 251, 252, 926,
	924, 925, 930, 928, 927, 929, 253, 254, 255, 256,
	914, 258, 907, 906, 831, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 905, 265, 0, 266, 0, 267,
	268, 0, 269, 837, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 960, 961, 850, 213, 0, 0, 0,
	0, 0, 280, 281, 282, 904, 902, 903, 0, 285,
	0, 286, 0, 0, 944, 287, 288, 0, 289, 967,
	0, 860, 290, 0, 291, 292, 293, 294, 935, 936,
	939, 342, 946, 295, 296, 0, 297, 298, 881, 0,
	0, 0, 214, 299, 301, 308, 0, 945, 302, 893,
	884, 895, 897, 898, 899, 894, 0, 886, 0, 309,
	947, 937, 948, 310, 311, 312, 949, 919, 920, 0,
	0, 315, 316, 317, 318, 0, 320, 319, 0, 321,
	968, 950, 322, 323, 951, 0, 324, 325, 0, 0,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 873, 335, 952, 338, 339, 341, 340, 828, 215,
	953, 851, 938, 908, 343, 344, 0, 882, 346, 883,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 495,
	954, 354, 955, 962, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 0, 363, 364, 963, 365, 498, 366,
	0, 367, 0, 368, 369, 370, 371, 372, 373, 901,
	374, 375, 0, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 0, 389, 956,
	390, 391, 392, 393, 838, 394, 0, 395, 399, 400,
	401, 402, 403, 404, 405, 0, 412, 413, 874, 875,
	877, 878, 407, 411, 414, 415, 931, 416, 396, 397,
	417, 957, 418, 896, 876, 420, 0, 430, 421, 422,
	423, 398, 424, 428, 942, 425, 426, 427, 964, 0,
	432, 433, 431, 0, 434, 435, 436, 437, 438, 274,
	872, 0, 440, 915, 916, 917, 918, 0, 447, 0,
	441, 442, 965, 443, 966, 849, 444, 445, 446, 0,
	448, 449, 0, 832, 450, 451, 452, 453, 454, 456,
	932, 457, 0, 880, 458, 459, 460, 509, 912, 959,
	0, 462, 461, 512, 0, 0, 0, 0, 463, 464,
	513, 465, 466, 467, 829, 0, 0, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 825, 826, 0,
	0, 0, 0, 0, 0, 0, 855, 0, 0, 0,
	1199, 853, 885, 842, 843, 844, 840, 841, 854, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	934, 859, 0, 0, 0, 222, 223, 224, 225, 469,
	900, 879, 911, 869, 910, 909, 0, 229, 871, 870,
	232, 233, 234, 861, 933, 235, 969, 970, 475, 0,
	236, 940, 0, 923, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 943, 251, 252, 926, 924, 925, 930,
	928, 927, 929, 253, 254, 255, 256, 914, 258, 907,
	906, 831, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 905, 265, 0, 266, 0, 267, 268, 0, 269,
	837, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	960, 961, 850, 213, 0, 0, 0, 0, 0, 280,
	281, 282, 904, 902, 903, 0, 285, 0, 286, 0,
	0, 944, 287, 288, 0, 289, 967, 0, 860, 290,
	0, 291, 292, 293, 294, 1198, 936, 939, 342, 946,
	295, 296, 0, 297, 298, 881, 0, 0, 0, 214,
	299, 301, 308, 0, 945, 302, 893, 884, 895, 897,
	898, 899, 894, 0, 886, 0, 309, 947, 937, 948,
	310, 311, 312, 949, 919, 920, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 968, 950, 322,
	323, 951, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 873, 335,
	952, 338, 339, 341, 340, 828, 215, 953, 851, 938,
	908, 343, 344, 0, 882, 346, 883, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 954, 354, 955,
	962, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 963, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 901, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 956, 390, 391, 392,
	393, 838, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 874, 875, 877, 878, 407,
	411, 414, 415, 931, 416, 396, 397, 417, 957, 418,
	896, 876, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 942, 425, 426, 427, 964, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 872, 0, 440,
	915, 916, 917, 918, 0, 447, 0, 441, 442, 965,
	443, 966, 849, 444, 445, 446, 0, 448, 449, 0,
	832, 450, 451, 452, 453, 454, 456, 932, 457, 0,
	880, 458, 459, 460, 509, 912, 959, 0, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 829, 0, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 825, 826, 0, 0, 0, 0,
	0, 0, 0, 855, 0, 0, 0, 1193, 853, 885,
	842, 843, 844, 840, 841, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 934, 859, 0,
	0, 0, 222, 223, 224, 225, 469, 900, 879, 911,
	869, 910, 909, 0, 229, 871, 870, 232, 233, 234,
	861, 933, 235, 969, 970, 475, 0, 236, 940, 0,
	923, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	943, 251, 252, 926, 924, 925, 930, 928, 927, 929,
	253, 254, 255, 256, 914, 258, 907, 906, 831, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 905, 265,
	0, 266, 0, 267, 268, 0, 269, 837, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 960, 961, 850,
	213, 0, 0, 0, 0, 0, 280, 281, 282, 904,
	902, 903, 0, 285, 0, 286, 0, 0, 944, 287,
	288, 0, 289, 967, 0, 860, 290, 0, 291, 292,
	293, 294, 1192, 936, 939, 342, 946, 295, 296, 0,
	297, 298, 881, 0, 0, 0, 214, 299, 301, 308,
	0, 945, 302, 893, 884, 895, 897, 898, 899, 894,
	0, 886, 0, 309, 947, 937, 948, 310, 311, 312,
	949, 919, 920, 0, 0, 315, 316, 317, 318, 0,
	320, 319, 0, 321, 968, 950, 322, 323, 951, 0,
	324, 325, 0, 0, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 873, 335, 952, 338, 339,
	341, 340, 828, 215, 953, 851, 938, 908, 343, 344,
	0, 882, 346, 883, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 495, 954, 354, 955, 962, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 0, 363, 364,
	963, 365, 498, 366, 0, 367, 0, 368, 369, 370,
	371, 372, 373, 901, 374, 375, 0, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 0, 389, 956, 390, 391, 392, 393, 838, 394,
	0, 395, 399, 400, 401, 402, 403, 404, 405, 0,
	412, 413, 874, 875, 877, 878, 407, 411, 414, 415,
	931, 416, 396, 397, 417, 957, 418, 896, 876, 420,
	0, 430, 421, 422, 423, 398, 424, 428, 942, 425,
	426, 427, 964, 0, 432, 433, 431, 0, 434, 435,
	436, 437, 438, 274, 872, 0, 440, 915, 916, 917,
	918, 0, 447, 0, 441, 442, 965, 443, 966, 849,
	444, 445, 446, 0, 448, 449, 0, 832, 450, 451,
	452, 453, 454, 456, 932, 457, 0, 880, 458, 459,
	460, 509, 912, 959, 0, 462, 461, 512, 0, 0,
	0, 0, 463, 464, 513, 465, 466, 467, 829, 0,
	0, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 825, 826, 0, 0, 0, 0, 0, 0, 0,
	855, 0, 0, 0, 1188, 853, 885, 842, 843, 844,
	840, 841, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 934, 859, 0, 0, 0, 222,
	223, 224, 225, 469, 900, 879, 911, 869, 910, 909,
	0, 229, 871, 870, 232, 233, 234, 861, 933, 235,
	969, 970, 475, 0, 236, 940, 0, 923, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 943, 251, 252,
	926, 924, 925, 930, 928, 927, 929, 253, 254, 255,
	256, 914, 258, 907, 906, 831, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 905, 265, 0, 266, 0,
	267, 268, 0, 269, 837, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 960, 961, 850, 213, 0, 0,
	0, 0, 0, 280, 281, 282, 904, 902, 903, 0,
	285, 0, 286, 0, 0, 944, 287, 288, 0, 289,
	967, 0, 860, 290, 0, 291, 292, 293, 294, 935,
	936, 939, 342, 946, 295, 296, 0, 297, 298, 881,
	0, 0, 0, 214, 299, 301, 308, 0, 945, 302,
	893, 884, 895, 897, 898, 899, 894, 0, 886, 0,
	309, 947, 937, 948, 310, 311, 312, 949, 919, 920,
	0, 0, 315, 316, 317, 318, 0, 320, 319, 0,
	321, 968, 950, 322, 323, 951, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 873, 335, 952, 338, 339, 341, 340, 828,
	215, 953, 851, 938, 908, 343, 344, 0, 882, 346,
	883, 0, 0, 349, 350, 351, 0, 0, 352, 353,
	495, 954, 354, 955, 962, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 963, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	901, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	956, 390, 391, 392, 393, 838, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 0, 412, 413, 874,
	875, 877, 878, 407, 411, 414, 415, 931, 416, 396,
	397, 417, 957, 418, 896, 876, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 942, 425, 426, 427, 964,
	0, 432, 433, 431, 0, 434, 435, 436, 437, 438,
	274, 872, 0, 440, 915, 916, 917, 918, 0, 447,
	0, 441, 442, 965, 443, 966, 849, 444, 445, 446,
	0, 448, 449, 0, 832, 450, 451, 452, 453, 454,
	456, 932, 457, 0, 880, 458, 459, 460, 509, 912,
	959, 0, 462, 461, 512, 0, 0, 0, 0, 463,
	464, 513, 465, 466, 467, 829, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 825, 826,
	885, 842, 843, 844, 840, 841, 854, 855, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 934, 859,
	0, 0, 0, 222, 223, 224, 225, 469, 900, 879,
	911, 869, 910, 909, 0, 229, 871, 870, 232, 233,
	234, 861, 933, 235, 969, 970, 475, 0, 236, 940,
	0, 923, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 943, 251, 252, 926, 924, 925, 930, 928, 927,
	929, 253, 254, 255, 256, 914, 258, 907, 906, 831,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 905,
	265, 0, 266, 0, 267, 268, 0, 269, 837, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 960, 961,
	850, 213, 0, 0, 0, 0, 0, 280, 281, 282,
	904, 902, 903, 0, 285, 0, 286, 0, 0, 944,
	287, 288, 0, 289, 967, 0, 860, 290, 0, 291,
	292, 293, 294, 935, 936, 939, 342, 946, 295, 296,
	0, 297, 298, 881, 0, 0, 0, 214, 299, 301,
	308, 0, 945, 302, 893, 884, 895, 897, 898, 899,
	894, 0, 886, 0, 309, 947, 937, 948, 310, 311,
	312, 949, 919, 920, 0, 0, 315, 316, 317, 318,
	0, 320, 319, 0, 321, 968, 950, 322, 323, 951,
	0, 324, 325, 0, 0, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 873, 335, 952, 338,
	339, 341, 340, 828, 215, 953, 851, 938, 908, 343,
	344, 0, 882, 346, 883, 0, 0, 349, 350, 351,
	0, 0, 352, 353, 495, 954, 354, 955, 962, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 0, 363,
	364, 963, 365, 498, 366, 0, 367, 0, 368, 369,
	370, 371, 372, 373, 901, 374, 375, 0, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 0, 389, 956, 390, 391, 392, 393, 838,
	394, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	0, 412, 413, 874, 875, 877, 878, 407, 411, 414,
	415, 931, 416, 396, 397, 417, 957, 418, 896, 876,
	420, 0, 430, 421, 422, 423, 398, 424, 428, 942,
	425, 426, 427, 964, 0, 432, 433, 431, 0, 434,
	435, 436, 437, 438, 274, 872, 0, 440, 915, 916,
	917, 918, 0, 447, 0, 441, 442, 965, 443, 966,
	849, 444, 445, 446, 0, 448, 449, 0, 832, 450,
	451, 452, 453, 454, 456, 932, 457, 0, 880, 458,
	459, 460, 509, 912, 959, 0, 462, 461, 512, 0,
	0, 0, 0, 463, 464, 513, 465, 466, 467, 829,
	0, 0, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 825, 826, 885, 842, 843, 844, 840, 841,
	854, 855, 0, 0, 0, 0, 853, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 934, 859, 0, 0, 0, 222, 223, 224,
	225, 469, 900, 879, 911, 869, 910, 909, 0, 229,
	871, 870, 232, 233, 234, 861, 933, 235, 969, 970,
	475, 0, 236, 940, 0, 923, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 943, 251, 3448, 926, 924,
	925, 930, 928, 927, 929, 253, 254, 255, 256, 914,
	258, 907, 906, 831, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 905, 265, 0, 266, 0, 267, 268,
	0, 269, 837, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 960, 961, 850, 213, 0, 0, 0, 0,
	0, 280, 281, 282, 904, 902, 903, 0, 285, 0,
	286, 0, 0, 944, 287, 288, 0, 289, 967, 0,
	860, 290, 0, 291, 292, 293, 294, 935, 936, 939,
	342, 946, 295, 296, 0, 297, 298, 881, 0, 0,
	0, 214, 299, 301, 308, 0, 945, 302, 893, 884,
	895, 897, 898, 899, 894, 0, 886, 0, 309, 947,
	937, 948, 310, 311, 312, 949, 919, 920, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 968,
	950, 322, 323, 951, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 332, 334, 336,
	873, 335, 952, 338, 339, 341, 340, 828, 215, 953,
	851, 938, 908, 343, 344, 0, 882, 346, 883, 0,
	0, 349, 350, 351, 0, 0, 352, 353, 495, 954,
	354, 955, 962, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 963, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 372, 373, 901, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 956, 390,
	391, 392, 393, 838, 394, 0, 395, 399, 400, 401,
	402, 403, 404, 405, 0, 412, 413, 874, 875, 877,
	878, 407, 411, 414, 415, 931, 416, 396, 397, 417,
	957, 418, 896, 876, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 942, 425, 426, 427, 964, 0, 432,
	433, 431, 0, 434, 435, 436, 437, 438, 274, 872,
	0, 440, 915, 916, 917, 918, 0, 447, 0, 441,
	442, 965, 443, 966, 849, 444, 445, 446, 0, 3447,
	449, 0, 832, 450, 451, 452, 453, 454, 456, 932,
	457, 0, 880, 458, 459, 460, 509, 912, 959, 0,
	462, 461, 512, 0, 0, 0, 0, 463, 464, 513,
	465, 466, 467, 829, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 825, 826, 885, 842,
	843, 844, 840, 841, 854, 855, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 934, 859, 0, 0,
	0, 222, 223, 224, 225, 3446, 900, 879, 911, 869,
	910, 909, 0, 229, 871, 870, 232, 233, 234, 861,
	933, 235, 969, 970, 475, 0, 236, 940, 0, 923,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 943,
	251, 3448, 926, 924, 925, 930, 928, 927, 929, 253,
	254, 255, 256, 914, 258, 907, 906, 831, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 905, 265, 0,
	266, 0, 267, 268, 0, 269, 837, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 960, 961, 850, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 904, 902,
	903, 0, 285, 0, 286, 0, 0, 944, 287, 288,
	0, 289, 967, 0, 860, 290, 0, 291, 292, 293,
	294, 935, 936, 939, 342, 946, 295, 296, 0, 297,
	298, 881, 0, 0, 0, 214, 299, 301, 308, 0,
	945, 302, 893, 884, 895, 897, 898, 899, 894, 0,
	886, 0, 309, 947, 937, 948, 310, 311, 312, 949,
	919, 920, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 968, 950, 322, 323, 951, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 873, 335, 952, 338, 339, 341,
	340, 828, 215, 953, 851, 938, 908, 343, 344, 0,
	882, 346, 883, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 954, 354, 955, 962, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 963,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 901, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 956, 390, 391, 392, 393, 838, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 874, 875, 877, 878, 407, 411, 414, 415, 931,
	416, 396, 397, 417, 957, 418, 896, 876, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 942, 425, 426,
	427, 964, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 872, 0, 440, 915, 916, 917, 918,
	0, 447, 0, 441, 442, 965, 443, 966, 849, 444,
	445, 446, 0, 3447, 449, 0, 832, 450, 451, 452,
	453, 454, 456, 932, 457, 0, 880, 458, 459, 460,
	509, 912, 959, 0, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 829, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	825, 826, 885, 842, 843, 844, 840, 841, 854, 855,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	934, 859, 0, 0, 0, 222, 223, 224, 225, 469,
	900, 879, 911, 869, 910, 909, 0, 229, 871, 870,
	232, 233, 234, 861, 933, 235, 969, 970, 475, 0,
	236, 940, 0, 923, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 943, 251, 252, 926, 924, 925, 930,
	928, 927, 929, 253, 254, 255, 256, 914, 258, 907,
	906, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 905, 265, 0, 266, 0, 267, 268, 0, 269,
	837, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	960, 961, 850, 213, 0, 0, 0, 0, 0, 280,
	281, 282, 904, 902, 903, 0, 285, 0, 286, 0,
	0, 944, 287, 288, 0, 289, 967, 0, 860, 290,
	0, 291, 292, 293, 294, 935, 936, 939, 342, 946,
	295, 296, 0, 297, 298, 881, 0, 0, 0, 214,
	299, 301, 308, 0, 945, 302, 893, 884, 895, 897,
	898, 899, 894, 0, 886, 0, 309, 947, 937, 948,
	310, 311, 312, 949, 919, 920, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 968, 950, 322,
	323, 951, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 873, 335,
	952, 338, 339, 341, 340, 0, 215, 953, 851, 938,
	908, 343, 344, 0, 882, 346, 883, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 954, 354, 955,
	962, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 963, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 901, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 956, 390, 391, 392,
	393, 838, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 874, 875, 877, 878, 407,
	411, 414, 415, 931, 416, 396, 397, 417, 957, 418,
	896, 876, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 942, 425, 426, 427, 964, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 872, 0, 440,
	915, 916, 917, 918, 0, 447, 0, 441, 442, 965,
	443, 966, 849, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 932, 457, 0,
	880, 458, 459, 460, 509, 912, 959, 0, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 885, 842, 843, 844, 840, 841, 854, 0, 2118,
	0, 0, 0, 0, 2116, 2117, 0, 0, 216, 217,
	218, 219, 220, 855, 221, 0, 0, 0, 853, 934,
	859, 0, 0, 0, 222, 223, 224, 225, 0, 900,
	879, 911, 869, 910, 909, 0, 229, 871, 870, 232,
	233, 234, 861, 933, 235, 969, 970, 475, 0, 236,
	940, 0, 923, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 943, 251, 3448, 926, 924, 925, 930, 928,
	927, 929, 253, 254, 255, 256, 914, 258, 907, 906,
	831, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	905, 265, 0, 266, 0, 267, 268, 0, 269, 837,
	270, 271, 273, 275, 272, 276, 277, 278, 279, 960,
	961, 850, 213, 0, 0, 0, 0, 0, 280, 281,
	282, 904, 902, 903, 0, 285, 0, 286, 0, 0,
	944, 287, 288, 0, 289, 967, 0, 860, 290, 0,
	291, 292, 293, 294, 935, 936, 939, 342, 0, 295,
	296, 0, 297, 298, 881, 0, 0, 0, 214, 299,
	301, 308, 0, 945, 302, 893, 884, 895, 897, 898,
	899, 894, 0, 886, 0, 309, 0, 937, 0, 310,
	311, 312, 949, 919, 920, 0, 0, 315, 316, 317,
	318, 0, 320, 319, 0, 321, 968, 950, 322, 323,
	0, 0, 324, 325, 0, 0, 326, 327, 0, 328,
	329, 331, 333, 330, 332, 334, 336, 873, 335, 952,
	338, 339, 341, 340, 828, 215, 0, 851, 938, 908,
	343, 344, 0, 882, 346, 883, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 495, 954, 354, 955, 962,
	355, 348, 356, 357, 358, 359, 360, 361, 362, 0,
	363, 364, 963, 365, 498, 366, 0, 367, 0, 368,
	369, 370, 371, 372, 373, 901, 374, 375, 0, 376,
	377, 378, 379, 380, 0, 382, 383, 384, 381, 385,
	386, 387, 388, 0, 389, 956, 390, 391, 392, 393,
	838, 394, 0, 395, 399, 400, 401, 402, 403, 404,
	405, 0, 412, 413, 874, 875, 877, 878, 407, 411,
	414, 415, 931, 416, 396, 397, 417, 0, 418, 896,
	876, 420, 0, 430, 421, 422, 423, 398, 424, 428,
	942, 425, 426, 427, 964, 0, 432, 433, 431, 0,
	434, 435, 436, 437, 438, 274, 872, 0, 440, 915,
	916, 917, 918, 0, 447, 0, 441, 442, 965, 443,
	966, 849, 444, 445, 446, 0, 3447, 449, 0, 832,
	450, 451, 452, 453, 454, 456, 932, 457, 0, 880,
	458, 459, 460, 509, 912, 959, 0, 462, 461, 512,
	0, 0, 0, 0, 463, 464, 513, 465, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 1006, 0, 825, 826, 0, 0, 0, 0, 0,
	0, 0, 855, 0, 0, 0, 0, 853, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 934,
	0, 0, 0, 0, 222, 223, 224, 225, 469, 470,
	226, 471, 227, 228, 472, 0, 229, 230, 231, 232,
	233, 234, 0, 933, 235, 473, 474, 475, 0, 236,
	940, 0, 923, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 943, 251, 252, 926, 924, 925, 930, 928,
	927, 929, 253, 254, 255, 256, 257, 258, 477, 478,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 269, 479,
	270, 271, 273, 275, 272, 276, 277, 278, 279, 960,
	961, 0, 213, 0, 0, 0, 0, 0, 280, 281,
	282, 482, 283, 284, 0, 285, 0, 286, 0, 0,
	944, 287, 288, 0, 289, 967, 0, 484, 290, 0,
	291, 292, 293, 294, 935, 936, 939, 342, 946, 295,
	296, 0, 297, 298, 300, 0, 0, 0, 214, 299,
	301, 308, 0, 945, 302, 488, 304, 303, 305, 306,
	307, 489, 0, 490, 0, 309, 947, 937, 948, 310,
	311, 312, 949, 313, 314, 0, 0, 315, 316, 317,
	318, 993, 320, 319, 0, 321, 968, 950, 322, 323,
	951, 0, 324, 325, 0, 0, 326, 327, 0, 328,
	329, 331, 333, 330, 332, 334, 336, 337, 335, 952,
	338, 339, 341, 340, 0, 215, 953, 0, 938, 494,
	343, 344, 0, 345, 346, 347, 0, 998, 349, 350,
	351, 0, 0, 352, 353, 495, 954, 354, 955, 962,
	355, 348, 356, 357, 358, 359, 360, 361, 362, 0,
	363, 364, 963, 365, 498, 366, 0, 367, 0, 368,
	369, 370, 371, 372, 373, 499, 374, 375, 0, 376,
	377, 378, 379, 380, 0, 382, 383, 384, 381, 385,
	386, 387, 388, 0, 389, 956, 390, 391, 392, 393,
	500, 1000, 0, 395, 399, 400, 401, 402, 403, 404,
	405, 179, 412, 413, 406, 408, 409, 410, 407, 411,
	414, 415, 931, 416, 396, 397, 417, 957, 418, 501,
	419, 420, 0, 430, 421, 422, 423, 398, 424, 428,
	429, 425, 426, 427, 964, 0, 432, 433, 431, 181,
	434, 435, 436, 437, 438, 274, 439, 0, 440, 503,
	504, 505, 506, 0, 447, 0, 441, 442, 965, 443,
	966, 0, 444, 445, 446, 0, 448, 449, 0, 0,
	450, 451, 452, 453, 454, 456, 932, 457, 0, 455,
	458, 459, 460, 1309, 510, 511, 0, 462, 461, 512,
	1006, 0, 0, 173, 463, 464, 513, 465, 466, 467,
	0, 174, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 934, 0,
	990, 0, 1602, 222, 223, 224, 225, 469, 470, 226,
	471, 227, 228, 472, 0, 229, 230, 231, 232, 233,
	234, 0, 933, 235, 473, 474, 475, 0, 236, 940,
	0, 923, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 943, 251, 252, 926, 924, 925, 930, 928, 927,
	929, 253, 254, 255, 256, 257, 258, 477, 478, 0,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 264,
	265, 0, 266, 0, 267, 268, 0, 269, 479, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 960, 961,
	0, 213, 0, 0, 0, 0, 0, 280, 281, 282,
	482, 283, 284, 0, 285, 0, 286, 0, 0, 944,
	287, 288, 0, 289, 967, 0, 484, 290, 0, 291,
	292, 293, 294, 935, 936, 939, 342, 946, 295, 296,
	0, 297, 298, 300, 0, 0, 0, 214, 299, 301,
	308, 0, 945, 302, 488, 304, 303, 305, 306, 307,
	489, 0, 490, 0, 309, 947, 937, 948, 310, 311,
	312, 949, 313, 314, 0, 0, 315, 316, 317, 318,
	993, 320, 319, 0, 321, 968, 950, 322, 323, 951,
	0, 324, 325, 0, 0, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 337, 335, 952, 338,
	339, 341, 340, 0, 215, 953, 0, 938, 494, 343,
	344, 0, 345, 346, 347, 0, 998, 349, 350, 351,
	0, 0, 352, 353, 495, 954, 354, 955, 962, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 0, 363,
	364, 963, 365, 498, 366, 0, 367, 0, 368, 369,
	370, 371, 372, 373, 499, 374, 375, 0, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 0, 389, 956, 390, 391, 392, 393, 500,
	1000, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	179, 412, 413, 406, 408, 409, 410, 407, 411, 414,
	415, 931, 416, 396, 397, 417, 957, 418, 501, 419,
	420, 0, 430, 421, 422, 423, 398, 424, 428, 429,
	425, 426, 427, 964, 0, 432, 433, 431, 181, 434,
	435, 436, 437, 438, 274, 439, 0, 440, 503, 504,
	505, 506, 0, 447, 0, 441, 442, 965, 443, 966,
	0, 444, 445, 446, 0, 448, 449, 0, 0, 450,
	451, 452, 453, 454, 456, 932, 457, 0, 455, 458,
	459, 460, 1309, 510, 511, 0, 462, 461, 512, 0,
	0, 0, 173, 463, 464, 513, 465, 466, 467, 0,
	174, 0, 0, 2571, 0, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 990,
	0, 1602, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 934, 0, 0, 0, 0, 222, 223,
	224, 225, 469, 470, 226, 471, 227, 228, 472, 0,
	229, 230, 231, 232, 233, 234, 0, 933, 235, 473,
	474, 475, 0, 236, 940, 0, 923, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 943, 251, 252, 926,
	924, 925, 930, 928, 927, 929, 253, 254, 255, 256,
	257, 258, 477, 478, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 269, 479, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 960, 961, 0, 213, 0, 0, 0,
	0, 0, 280, 281, 282, 482, 283, 284, 0, 285,
	0, 286, 0, 0, 944, 287, 288, 0, 289, 967,
	0, 484, 290, 0, 291, 292, 293, 294, 935, 936,
	939, 342, 946, 295, 296, 0, 297, 298, 300, 0,
	0, 0, 214, 299, 301, 308, 0, 945, 302, 488,
	304, 303, 305, 306, 307, 489, 0, 490, 0, 309,
	947, 937, 948, 310, 311, 312, 949, 313, 314, 0,
	0, 315, 316, 317, 318, 993, 320, 319, 0, 321,
	968, 950, 322, 323, 951, 0, 324, 325, 0, 0,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 337, 335, 952, 338, 339, 341, 340, 0, 215,
	953, 0, 938, 494, 343, 344, 0, 345, 346, 347,
	0, 998, 349, 350, 351, 0, 0, 352, 353, 495,
	954, 354, 955, 962, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 0, 363, 364, 963, 365, 498, 366,
	0, 367, 0, 368, 369, 370, 371, 372, 373, 499,
	374, 375, 0, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 0, 389, 956,
	390, 391, 392, 393, 500, 1000, 0, 395, 399, 400,
	401, 402, 403, 404, 405, 0, 412, 413, 406, 408,
	409, 410, 407, 411, 414, 415, 931, 416, 396, 397,
	417, 957, 418, 501, 419, 420, 0, 430, 421, 422,
	423, 398, 424, 428, 429, 425, 426, 427, 964, 0,
	432, 433, 431, 0, 434, 435, 436, 437, 438, 274,
	439, 0, 440, 503, 504, 505, 506, 0, 447, 0,
	441, 442, 965, 443, 966, 0, 444, 445, 446, 0,
	448, 449, 0, 0, 450, 451, 452, 453, 454, 456,
	932, 457, 0, 455, 458, 459, 460, 509, 510, 511,
	0, 462, 461, 512, 0, 989, 0, 1006, 463, 464,
	513, 465, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 990, 934, 995, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 933,
	235, 473, 474, 475, 0, 236, 940, 0, 923, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 943, 251,
	252, 926, 924, 925, 930, 928, 927, 929, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 960, 961, 0, 213, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 944, 287, 288, 0,
	289, 967, 0, 484, 290, 0, 291, 292, 293, 294,
	935, 936, 939, 342, 946, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 214, 299, 301, 308, 0, 945,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 947, 937, 948, 310, 311, 312, 949, 313,
	314, 0, 0, 315, 316, 317, 318, 993, 320, 319,
	0, 321, 968, 950, 322, 323, 951, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 952, 338, 339, 341, 340,
	0, 215, 953, 0, 938, 494, 343, 344, 0, 345,
	346, 347, 0, 998, 349, 350, 351, 0, 0, 352,
	353, 495, 954, 354, 955, 962, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 963, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 956, 390, 391, 392, 393, 500, 1000, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 931, 416,
	396, 397, 417, 957, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	964, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 965, 443, 966, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 932, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 0, 462, 461, 512, 1006, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 934, 0, 990, 0, 995, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	0, 229, 230, 231, 232, 233, 234, 0, 933, 235,
	473, 474, 475, 0, 236, 940, 0, 923, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 943, 251, 252,
	926, 924, 925, 930, 928, 927, 929, 253, 254, 255,
	256, 257, 258, 477, 478, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 960, 961, 0, 213, 0, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 0, 286, 0, 0, 944, 287, 288, 0, 289,
	967, 0, 484, 290, 0, 291, 292, 293, 294, 935,
	936, 939, 342, 946, 295, 296, 0, 297, 298, 300,
	0, 0, 0, 214, 299, 301, 308, 0, 945, 302,
	488, 304, 303, 305, 306, 307, 489, 0, 490, 0,
	309, 947, 937, 948, 310, 311, 312, 949, 313, 314,
	0, 0, 315, 316, 317, 318, 993, 320, 319, 0,
	321, 968, 950, 322, 323, 951, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 952, 338, 339, 341, 340, 0,
	215, 953, 0, 938, 494, 343, 344, 0, 345, 346,
	347, 0, 998, 349, 350, 351, 0, 0, 352, 353,
	495, 954, 354, 955, 962, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 963, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	956, 390, 391, 392, 393, 500, 1000, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 0, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 931, 416, 396,
	397, 417, 957, 418, 501, 419, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 964,
	0, 432, 433, 431, 0, 434, 435, 436, 437, 438,
	274, 439, 0, 440, 503, 504, 505, 506, 0, 447,
	0, 441, 442, 965, 443, 966, 0, 444, 445, 446,
	0, 448, 449, 0, 0, 450, 451, 452, 453, 454,
	456, 932, 457, 0, 455, 458, 459, 460, 509, 510,
	511, 0, 462, 461, 512, 1006, 0, 0, 0, 463,
	464, 513, 465, 466, 467, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 934, 0, 990, 0, 995, 222, 223,
	224, 225, 469, 470, 226, 471, 227, 228, 472, 0,
	229, 230, 231, 232, 233, 234, 0, 933, 235, 473,
	474, 475, 0, 236, 940, 0, 923, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 943, 251, 252, 926,
	924, 925, 930, 928, 927, 929, 253, 254, 255, 256,
	257, 258, 477, 478, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 269, 479, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 960, 961, 0, 213, 0, 0, 0,
	0, 0, 280, 281, 282, 482, 283, 284, 0, 285,
	0, 286, 0, 0, 944, 287, 288, 0, 289, 967,
	0, 484, 290, 0, 291, 292, 293, 294, 935, 936,
	939, 342, 946, 295, 296, 0, 297, 298, 300, 0,
	0, 0, 214, 299, 301, 308, 0, 945, 302, 488,
	304, 303, 305, 306, 307, 489, 0, 490, 0, 309,
	947, 937, 948, 310, 311, 312, 949, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 320, 319, 0, 321,
	968, 950, 322, 323, 951, 0, 324, 325, 0, 0,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 337, 335, 952, 338, 339, 341, 340, 0, 215,
	953, 0, 938, 494, 343, 344, 0, 345, 346, 347,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 495,
	954, 354, 955, 962, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 0, 363, 364, 963, 365, 498, 366,
	0, 367, 0, 368, 369, 370, 371, 372, 373, 499,
	374, 375, 0, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 0, 389, 956,
	390, 391, 392, 393, 500, 1000, 0, 395, 399, 400,
	401, 402, 403, 404, 405, 0, 412, 413, 406, 408,
	409, 410, 407, 411, 414, 415, 931, 416, 396, 397,
	417, 957, 418, 501, 419, 420, 0, 430, 421, 422,
	423, 398, 424, 428, 429, 425, 426, 427, 964, 0,
	432, 433, 431, 0, 434, 435, 436, 437, 438, 274,
	439, 0, 440, 503, 504, 505, 506, 0, 447, 0,
	441, 442, 965, 443, 966, 0, 444, 445, 446, 0,
	448, 449, 0, 0, 450, 451, 452, 453, 454, 456,
	932, 457, 0, 455, 458, 459, 460, 509, 510, 511,
	0, 462, 461, 512, 818, 0, 1163, 0, 463, 464,
	513, 465, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 468, 0, 1497, 0, 0, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	473, 474, 475, 0, 236, 476, 0, 1067, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 943, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 477, 478, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 0, 213, 0, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 0, 286, 0, 0, 944, 287, 288, 0, 289,
	483, 0, 484, 290, 0, 291, 292, 293, 294, 485,
	486, 487, 342, 946, 295, 296, 0, 297, 298, 300,
	0, 0, 0, 0, 299, 301, 308, 0, 945, 302,
	488, 304, 303, 305, 306, 307, 489, 0, 490, 0,
	309, 947, 491, 948, 310, 311, 312, 949, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 320, 319, 0,
	321, 492, 950, 322, 323, 951, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 952, 338, 339, 341, 340, 0,
	0, 953, 0, 493, 494, 343, 344, 0, 345, 346,
	347, 0, 0, 349, 350, 351, 0, 0, 352, 353,
	495, 954, 354, 955, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 497, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	956, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 179, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 0, 416, 396,
	397, 417, 957, 418, 501, 419, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	0, 432, 433, 431, 181, 434, 435, 436, 437, 438,
	274, 439, 0, 440, 503, 504, 505, 506, 0, 447,
	0, 441, 442, 507, 443, 508, 0, 444, 445, 446,
	0, 448, 449, 0, 0, 450, 451, 452, 453, 454,
	456, 0, 457, 0, 455, 458, 459, 460, 1309, 510,
	511, 0, 462, 461, 512, 1306, 0, 1163, 173, 463,
	464, 513, 465, 466, 467, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 149, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 1067, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 943, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 213, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 944, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 946, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 945,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 947, 491, 948, 310, 311, 312, 949, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 950, 322, 323, 951, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 952, 338, 339, 341, 340,
	0, 0, 953, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 954, 354, 955, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 956, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 179, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 957, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 181, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 1309,
	510, 511, 0, 462, 461, 512, 0, 0, 0, 173,
	463, 464, 513, 465, 466, 467, 0, 174, 0, 0,
	0, 0, 1163, 1162, 0, 0, 0, 0, 1160, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 475, 0,
	236, 476, 0, 1067, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 943, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 213, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 0,
	0, 944, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 485, 486, 487, 342, 946,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 0,
	299, 301, 308, 0, 945, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 947, 491, 948,
	310, 311, 312, 949, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 950, 322,
	323, 951, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 335,
	952, 338, 339, 341, 340, 0, 0, 953, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 954, 354, 955,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 956, 390, 391, 392,
	393, 500, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 957, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	503, 504, 505, 506, 0, 447, 0, 441, 442, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 0, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 1163, 1162, 0, 0, 0, 0, 1160, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 1778, 221, 0, 0, 0, 0, 468,
	0, 0, 0, 0, 222, 223, 224, 225, 469, 470,
	226, 471, 227, 228, 472, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 473, 474, 475, 0, 236,
	476, 0, 1067, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 943, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 477, 478,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 269, 479,
	270, 271, 273, 275, 272, 276, 277, 278, 279, 480,
	481, 0, 213, 0, 0, 0, 0, 0, 280, 281,
	282, 482, 283, 284, 0, 285, 0, 286, 0, 0,
	944, 287, 288, 0, 289, 483, 0, 484, 290, 0,
	291, 292, 293, 294, 485, 486, 487, 342, 946, 295,
	296, 0, 297, 298, 300, 0, 0, 0, 0, 299,
	301, 308, 0, 945, 302, 488, 304, 303, 305, 306,
	307, 489, 0, 490, 0, 309, 947, 491, 948, 310,
	311, 312, 949, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 320, 319, 0, 321, 492, 950, 322, 323,
	951, 0, 324, 325, 0, 0, 326, 327, 0, 328,
	329, 331, 333, 330, 332, 334, 336, 337, 335, 952,
	338, 339, 341, 340, 0, 0, 953, 0, 493, 494,
	343, 344, 0, 345, 346, 347, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 495, 954, 354, 955, 496,
	355, 348, 356, 357, 358, 359, 360, 361, 362, 0,
	363, 364, 497, 365, 498, 366, 0, 367, 0, 368,
	369, 370, 371, 372, 373, 499, 374, 375, 0, 376,
	377, 378, 379, 380, 0, 382, 383, 384, 381, 385,
	386, 387, 388, 0, 389, 956, 390, 391, 392, 393,
	500, 394, 0, 395, 399, 400, 401, 402, 403, 404,
	405, 0, 412, 413, 406, 408, 409, 410, 407, 411,
	414, 415, 0, 416, 396, 397, 417, 957, 418, 501,
	419, 420, 0, 430, 421, 422, 423, 398, 424, 428,
	429, 425, 426, 427, 502, 0, 432, 433, 431, 0,
	434, 435, 436, 437, 438, 274, 439, 0, 440, 503,
	504, 505, 506, 0, 447, 0, 441, 442, 507, 443,
	508, 0, 444, 445, 446, 0, 448, 449, 0, 0,
	450, 451, 452, 453, 454, 456, 0, 457, 0, 455,
	458, 459, 460, 509, 510, 511, 0, 462, 461, 512,
	0, 0, 0, 0, 463, 464, 513, 465, 466, 467,
	1163, 1162, 0, 0, 0, 0, 1160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 2765, 221, 0, 0, 0, 0, 468, 0,
	0, 0, 0, 222, 223, 224, 225, 469, 470, 226,
	471, 227, 228, 472, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 473, 474, 475, 0, 236, 476,
	0, 1067, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 943, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 477, 478, 0,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 264,
	265, 0, 266, 0, 267, 268, 0, 269, 479, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 480, 481,
	0, 213, 0, 0, 0, 0, 0, 280, 281, 282,
	482, 283, 284, 0, 285, 0, 286, 0, 0, 944,
	287, 288, 0, 289, 483, 0, 484, 290, 0, 291,
	292, 293, 294, 485, 486, 487, 342, 946, 295, 296,
	0, 297, 298, 300, 0, 0, 0, 0, 299, 301,
	308, 0, 945, 302, 488, 304, 303, 305, 306, 307,
	489, 0, 490, 0, 309, 947, 491, 948, 310, 311,
	312, 949, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 320, 319, 0, 321, 492, 950, 322, 323, 951,
	0, 324, 325, 0, 0, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 337, 335, 952, 338,
	339, 341, 340, 0, 0, 953, 0, 493, 494, 343,
	344, 0, 345, 346, 347, 0, 0, 349, 350, 351,
	0, 0, 352, 353, 495, 954, 354, 955, 496, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 0, 363,
	364, 497, 365, 498, 366, 0, 367, 0, 368, 369,
	370, 371, 372, 373, 499, 374, 375, 0, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 0, 389, 956, 390, 391, 392, 393, 500,
	394, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	0, 412, 413, 406, 408, 409, 410, 407, 411, 414,
	415, 0, 416, 396, 397, 417, 957, 418, 501, 419,
	420, 0, 430, 421, 422, 423, 398, 424, 428, 429,
	425, 426, 427, 502, 0, 432, 433, 431, 0, 434,
	435, 436, 437, 438, 274, 439, 0, 440, 503, 504,
	505, 506, 0, 447, 0, 441, 442, 507, 443, 508,
	0, 444, 445, 446, 0, 448, 449, 0, 0, 450,
	451, 452, 453, 454, 456, 0, 457, 0, 455, 458,
	459, 460, 509, 510, 511, 0, 462, 461, 512, 1006,
	0, 0, 0, 463, 464, 513, 465, 466, 467, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 934, 0, 0,
	0, 1313, 222, 223, 224, 225, 469, 470, 226, 471,
	227, 228, 472, 0, 229, 230, 231, 232, 233, 234,
	0, 933, 235, 473, 474, 475, 0, 236, 940, 0,
	923, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	943, 251, 252, 926, 924, 925, 930, 928, 927, 929,
	253, 254, 255, 256, 257, 258, 477, 478, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 269, 479, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 960, 961, 0,
	213, 0, 0, 0, 0, 0, 280, 281, 282, 482,
	283, 284, 0, 285, 0, 286, 0, 0, 944, 287,
	288, 0, 289, 967, 0, 484, 290, 0, 291, 292,
	293, 294, 935, 936, 939, 342, 946, 295, 296, 0,
	297, 298, 300, 0, 0, 0, 214, 299, 301, 308,
	0, 945, 302, 488, 304, 303, 305, 306, 307, 489,
	0, 490, 0, 309, 947, 937, 948, 310, 311, 312,
	949, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	320, 319, 0, 321, 968, 950, 322, 323, 951, 0,
	324, 325, 0, 0, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 337, 335, 952, 338, 339,
	341, 340, 0, 215, 953, 0, 938, 494, 343, 344,
	0, 345, 346, 347, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 495, 954, 354, 955, 962, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 0, 363, 364,
	963, 365, 498, 366, 0, 367, 0, 368, 369, 370,
	371, 372, 373, 499, 374, 375, 0, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 0, 389, 956, 390, 391, 392, 393, 500, 394,
	0, 395, 399, 400, 401, 402, 403, 404, 405, 0,
	412, 413, 406, 408, 409, 410, 407, 411, 414, 415,
	931, 416, 396, 397, 417, 957, 418, 501, 419, 420,
	0, 430, 421, 422, 423, 398, 424, 428, 429, 425,
	426, 427, 964, 0, 432, 433, 431, 0, 434, 435,
	436, 437, 438, 274, 439, 0, 440, 503, 504, 505,
	506, 0, 447, 0, 441, 442, 965, 443, 966, 0,
	444, 445, 446, 0, 448, 449, 0, 0, 450, 451,
	452, 453, 454, 456, 932, 457, 0, 455, 458, 459,
	460, 509, 510, 511, 0, 462, 461, 512, 818, 0,
	210, 0, 463, 464, 513, 465, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 468, 0,
	0, 0, 0, 222, 223, 224, 225, 469, 470, 226,
	471, 227, 228, 472, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 473, 474, 475, 0, 236, 476,
	0, 0, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 0, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 477, 478, 0,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 264,
	265, 0, 266, 0, 267, 268, 0, 269, 479, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 480, 481,
	0, 0, 0, 0, 0, 0, 0, 280, 281, 282,
	482, 283, 284, 0, 285, 0, 286, 0, 0, 0,
	287, 288, 0, 289, 483, 0, 484, 290, 0, 291,
	292, 293, 294, 485, 486, 487, 342, 0, 295, 296,
	0, 297, 298, 300, 0, 0, 0, 0, 299, 301,
	308, 0, 0, 302, 488, 304, 303, 305, 306, 307,
	489, 0, 490, 0, 309, 0, 491, 0, 310, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 320, 319, 0, 321, 492, 0, 322, 323, 0,
	0, 324, 325, 0, 0, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 337, 335, 0, 338,
	339, 341, 340, 0, 0, 0, 0, 493, 494, 343,
	344, 0, 345, 346, 347, 0, 0, 349, 350, 351,
	0, 0, 352, 353, 495, 0, 354, 0, 496, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 0, 363,
	364, 497, 365, 498, 366, 0, 367, 0, 368, 369,
	370, 371, 372, 373, 499, 374, 375, 0, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 0, 389, 0, 390, 391, 392, 393, 500,
	394, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	179, 412, 413, 406, 408, 409, 410, 407, 411, 414,
	415, 0, 416, 396, 397, 417, 0, 418, 501, 419,
	420, 0, 430, 421, 422, 423, 398, 424, 428, 429,
	425, 426, 427, 502, 0, 432, 433, 431, 181, 434,
	435, 436, 437, 438, 274, 439, 0, 440, 503, 504,
	505, 506, 0, 447, 0, 441, 442, 507, 443, 508,
	0, 444, 445, 446, 0, 448, 449, 0, 0, 450,
	451, 452, 453, 454, 456, 0, 457, 0, 455, 458,
	459, 460, 1309, 510, 511, 0, 462, 461, 512, 210,
	0, 0, 173, 463, 464, 513, 465, 466, 467, 0,
	174, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 468, 0, 0,
	0, 149, 222, 223, 224, 225, 469, 470, 226, 471,
	227, 228, 472, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 473, 474, 475, 0, 236, 476, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 477, 478, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 269, 479, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 480, 481, 0,
	213, 0, 0, 0, 0, 0, 280, 281, 282, 482,
	283, 284, 0, 285, 0, 286, 0, 0, 0, 287,
	288, 0, 289, 483, 0, 484, 290, 0, 291, 292,
	293, 294, 485, 486, 487, 342, 0, 295, 296, 0,
	297, 298, 300, 0, 0, 0, 214, 299, 301, 308,
	0, 0, 302, 488, 304, 303, 305, 306, 307, 489,
	0, 490, 0, 309, 0, 491, 0, 310, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	320, 319, 0, 321, 492, 0, 322, 323, 0, 0,
	324, 325, 0, 0, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 337, 335, 0, 338, 339,
	341, 340, 0, 215, 0, 0, 493, 494, 343, 344,
	0, 345, 346, 347, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 495, 0, 354, 0, 496, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 0, 363, 364,
	497, 365, 498, 366, 0, 367, 0, 368, 369, 370,
	371, 372, 373, 499, 374, 375, 0, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 0, 389, 0, 390, 391, 392, 393, 500, 394,
	0, 395, 399, 400, 401, 402, 403, 404, 405, 0,
	412, 413, 406, 408, 409, 410, 407, 411, 414, 415,
	0, 416, 396, 397, 417, 0, 418, 501, 419, 420,
	0, 430, 421, 422, 423, 398, 424, 428, 429, 425,
	426, 427, 502, 0, 432, 433, 431, 0, 434, 435,
	436, 437, 438, 274, 439, 0, 440, 503, 504, 505,
	506, 0, 447, 0, 441, 442, 507, 443, 508, 0,
	444, 445, 446, 0, 448, 449, 0, 0, 450, 451,
	452, 453, 454, 456, 0, 457, 0, 455, 458, 459,
	460, 509, 510, 511, 0, 462, 461, 512, 210, 0,
	0, 0, 463, 464, 513, 465, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	1607, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 0, 287, 288,
	0, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 485, 486, 487, 342, 0, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 214, 299, 301, 308, 0,
	0, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 0, 491, 0, 310, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 0, 322, 323, 0, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 0, 338, 339, 341,
	340, 0, 215, 0, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 0, 354, 0, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 0, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 0, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 0, 462, 461, 512, 210, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 2718, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 0, 462, 461, 512, 210, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 468, 0, 0, 0, 2353, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	473, 474, 475, 0, 236, 476, 0, 0, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 0, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 477, 478, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 0, 0, 0, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 0, 286, 0, 0, 0, 287, 288, 0, 289,
	483, 0, 484, 290, 0, 291, 292, 293, 294, 485,
	486, 487, 342, 0, 295, 296, 0, 297, 298, 300,
	0, 0, 0, 0, 299, 301, 308, 0, 0, 302,
	488, 304, 303, 305, 306, 307, 489, 0, 490, 0,
	309, 0, 491, 0, 310, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 320, 319, 0,
	321, 492, 0, 322, 323, 0, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 0, 338, 339, 341, 340, 0,
	0, 0, 0, 493, 494, 343, 344, 0, 345, 346,
	347, 0, 0, 349, 350, 351, 0, 0, 352, 353,
	495, 0, 354, 0, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 497, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	0, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 0, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 0, 416, 396,
	397, 417, 0, 418, 501, 419, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	0, 432, 433, 431, 0, 434, 435, 436, 437, 438,
	274, 439, 0, 440, 503, 504, 505, 506, 0, 447,
	0, 441, 442, 507, 443, 508, 0, 444, 445, 446,
	0, 448, 449, 0, 0, 450, 451, 452, 453, 454,
	456, 0, 457, 0, 455, 458, 459, 460, 509, 510,
	511, 0, 462, 461, 512, 210, 0, 0, 0, 463,
	464, 513, 465, 466, 467, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 468, 0, 0, 0, 2843, 222, 223,
	224, 225, 469, 470, 226, 471, 227, 228, 472, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 473,
	474, 475, 0, 236, 476, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 477, 478, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 269, 479, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 480, 481, 0, 0, 0, 0, 0,
	0, 0, 280, 281, 282, 482, 283, 284, 0, 285,
	0, 286, 0, 0, 0, 287, 288, 0, 289, 483,
	0, 484, 290, 0, 291, 292, 293, 294, 485, 486,
	487, 342, 0, 295, 296, 0, 297, 298, 300, 0,
	0, 0, 0, 299, 301, 308, 0, 0, 302, 488,
	304, 303, 305, 306, 307, 489, 0, 490, 0, 309,
	0, 491, 0, 310, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 320, 319, 0, 321,
	492, 0, 322, 323, 0, 0, 324, 325, 0, 0,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 337, 335, 0, 338, 339, 341, 340, 0, 0,
	0, 0, 493, 494, 343, 344, 0, 345, 346, 347,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 495,
	0, 354, 0, 496, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 0, 363, 364, 497, 365, 498, 366,
	0, 367, 0, 368, 369, 370, 371, 372, 373, 499,
	374, 375, 0, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 0, 389, 0,
	390, 391, 392, 393, 500, 394, 0, 395, 399, 400,
	401, 402, 403, 404, 405, 0, 412, 413, 406, 408,
	409, 410, 407, 411, 414, 415, 0, 416, 396, 397,
	417, 0, 418, 501, 419, 420, 0, 430, 421, 422,
	423, 398, 424, 428, 429, 425, 426, 427, 502, 0,
	432, 433, 431, 0, 434, 435, 436, 437, 438, 274,
	439, 0, 440, 503, 504, 505, 506, 0, 447, 0,
	441, 442, 507, 443, 508, 0, 444, 445, 446, 0,
	448, 449, 0, 0, 450, 451, 452, 453, 454, 456,
	0, 457, 0, 455, 458, 459, 460, 509, 510, 511,
	0, 462, 461, 512, 689, 0, 580, 0, 463, 464,
	513, 465, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 468, 0, 1868, 0, 0, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	473, 474, 475, 0, 236, 476, 0, 0, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 0, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 586,
	256, 257, 258, 477, 478, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 0, 213, 0, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 0, 286, 0, 0, 0, 287, 288, 0, 289,
	483, 0, 484, 290, 0, 291, 292, 293, 294, 485,
	486, 487, 342, 0, 295, 296, 0, 297, 298, 300,
	0, 0, 0, 214, 299, 301, 308, 0, 0, 302,
	488, 304, 303, 305, 306, 307, 489, 0, 490, 0,
	309, 0, 491, 0, 310, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 320, 319, 0,
	321, 492, 0, 322, 323, 0, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 0, 338, 339, 341, 340, 0,
	215, 0, 0, 493, 494, 343, 344, 0, 345, 346,
	347, 0, 0, 349, 350, 351, 0, 0, 352, 353,
	495, 0, 354, 0, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 497, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	0, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 0, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 0, 416, 396,
	397, 417, 0, 418, 501, 419, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	0, 432, 433, 431, 585, 434, 435, 436, 437, 438,
	274, 439, 0, 440, 503, 504, 505, 506, 0, 447,
	0, 441, 442, 507, 443, 508, 0, 444, 445, 446,
	0, 448, 449, 0, 0, 450, 451, 452, 453, 454,
	456, 0, 457, 0, 455, 458, 459, 460, 509, 510,
	511, 0, 462, 461, 512, 0, 579, 0, 580, 463,
	464, 513, 465, 466, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	589, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 586, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 0, 287, 288,
	0, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 485, 486, 487, 342, 0, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 214, 299, 301, 308, 0,
	0, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 0, 491, 0, 310, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 0, 322, 323, 0, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 0, 338, 339, 341,
	340, 0, 215, 0, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 0, 354, 0, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 0, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 0, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 585, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 580, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 468, 589, 0, 0, 0, 222, 223, 224, 225,
	469, 470, 226, 471, 227, 228, 472, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 473, 474, 475,
	0, 236, 476, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 586, 256, 257, 258,
	477, 478, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	269, 479, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 480, 481, 0, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 482, 283, 284, 0, 285, 0, 286,
	0, 0, 0, 287, 288, 0, 289, 483, 0, 484,
	290, 0, 291, 292, 293, 294, 485, 486, 487, 342,
	0, 295, 296, 0, 297, 298, 300, 0, 0, 0,
	214, 299, 301, 308, 0, 0, 302, 488, 304, 303,
	305, 306, 307, 489, 0, 490, 0, 309, 0, 491,
	0, 310, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 492, 0,
	322, 323, 0, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 337,
	335, 0, 338, 339, 341, 340, 0, 215, 0, 0,
	493, 494, 343, 344, 0, 345, 346, 347, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 0, 354,
	0, 496, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 497, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 499, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 0, 1898, 391,
	392, 393, 500, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 406, 408, 409, 410,
	407, 411, 414, 415, 0, 416, 396, 397, 417, 0,
	418, 501, 419, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 429, 425, 426, 427, 502, 0, 432, 433,
	431, 585, 434, 435, 436, 437, 438, 274, 439, 0,
	440, 503, 504, 505, 506, 0, 447, 0, 441, 442,
	507, 443, 508, 0, 444, 445, 446, 0, 448, 449,
	0, 0, 450, 451, 452, 453, 454, 456, 0, 457,
	0, 455, 458, 459, 460, 509, 510, 511, 580, 462,
	461, 512, 0, 0, 0, 0, 463, 464, 513, 465,
	466, 467, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 468, 589, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 586, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 0, 287, 288,
	0, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 485, 486, 487, 342, 0, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 214, 299, 301, 308, 0,
	0, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 0, 491, 0, 310, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 0, 322, 323, 0, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 0, 338, 339, 341,
	340, 0, 215, 0, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 0, 354, 0, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 0, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 0, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 585, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 210, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 468, 589, 0, 0, 0, 222, 223, 224, 225,
	469, 470, 226, 471, 227, 228, 472, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 473, 474, 475,
	0, 236, 476, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	477, 478, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	269, 479, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 480, 481, 0, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 482, 283, 284, 0, 285, 0, 286,
	0, 0, 0, 287, 288, 0, 289, 483, 0, 484,
	290, 0, 291, 292, 293, 294, 485, 486, 487, 342,
	0, 295, 296, 0, 297, 298, 300, 0, 0, 0,
	214, 299, 301, 308, 0, 0, 302, 488, 304, 303,
	305, 306, 307, 489, 0, 490, 0, 309, 0, 491,
	0, 310, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 492, 0,
	322, 323, 0, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 337,
	335, 0, 338, 339, 341, 340, 0, 215, 0, 0,
	493, 494, 343, 344, 0, 345, 346, 347, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 0, 354,
	0, 496, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 497, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 499, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 0, 390, 391,
	392, 393, 500, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 406, 408, 409, 410,
	407, 411, 414, 415, 0, 416, 396, 397, 417, 0,
	418, 501, 419, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 429, 425, 426, 427, 502, 0, 432, 433,
	431, 0, 434, 435, 436, 437, 438, 274, 439, 0,
	440, 503, 504, 505, 506, 0, 447, 0, 441, 442,
	507, 443, 508, 0, 444, 445, 446, 0, 448, 449,
	0, 0, 450, 451, 452, 453, 454, 456, 0, 457,
	0, 455, 458, 459, 460, 509, 510, 511, 0, 462,
	461, 512, 0, 0, 0, 0, 463, 464, 513, 465,
	466, 467, 1338, 0, 1163, 1162, 0, 0, 0, 0,
	1160, 0, 0, 0, 0, 0, 0, 589, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 468, 0, 0, 0, 0, 222, 223, 224,
	225, 469, 470, 226, 471, 227, 228, 472, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 473, 474,
	475, 0, 236, 476, 0, 1067, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 943, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 477, 478, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 269, 479, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 480, 481, 0, 213, 0, 0, 0, 0,
	0, 1337, 281, 282, 482, 283, 284, 0, 285, 0,
	286, 0, 0, 944, 287, 288, 0, 289, 483, 0,
	484, 290, 0, 291, 292, 293, 294, 485, 486, 487,
	342, 946, 295, 296, 0, 297, 298, 300, 0, 0,
	0, 0, 299, 301, 308, 0, 945, 302, 488, 304,
	303, 305, 306, 307, 489, 0, 490, 0, 309, 947,
	491, 948, 310, 311, 312, 949, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 492,
	950, 322, 323, 951, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 332, 334, 336,
	337, 335, 952, 338, 339, 341, 340, 0, 0, 953,
	0, 493, 494, 343, 344, 0, 345, 346, 347, 0,
	0, 349, 350, 351, 0, 0, 352, 353, 495, 954,
	354, 955, 496, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 497, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 1336, 373, 499, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 956, 390,
	391, 392, 393, 500, 394, 0, 395, 399, 400, 401,
	1335, 403, 404, 405, 0, 412, 413, 406, 408, 409,
	410, 407, 411, 414, 415, 0, 416, 396, 397, 417,
	957, 418, 501, 419, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 429, 425, 426, 427, 502, 0, 432,
	433, 431, 0, 434, 435, 436, 437, 438, 274, 439,
	0, 440, 503, 504, 505, 506, 0, 447, 0, 441,
	442, 507, 443, 508, 0, 444, 445, 446, 0, 448,
	449, 0, 0, 450, 451, 452, 453, 454, 456, 0,
	457, 0, 455, 458, 459, 460, 509, 510, 511, 0,
	462, 461, 512, 0, 0, 0, 0, 463, 464, 513,
	465, 466, 467, 1304, 0, 1163, 1162, 0, 0, 0,
	0, 1160, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 468, 0, 0, 0, 0, 222, 223,
	224, 225, 469, 470, 226, 471, 227, 228, 472, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 473,
	474, 475, 0, 236, 476, 0, 1067, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 943, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 477, 478, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 269, 479, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 480, 481, 0, 213, 0, 0, 0,
	0, 0, 280, 281, 282, 482, 283, 284, 0, 285,
	0, 286, 0, 0, 944, 287, 288, 0, 289, 483,
	0, 484, 290, 0, 291, 292, 293, 294, 1303, 486,
	487, 342, 946, 295, 296, 0, 297, 298, 300, 0,
	0, 0, 0, 299, 301, 308, 0, 945, 302, 488,
	304, 303, 305, 306, 307, 489, 0, 490, 0, 309,
	947, 491, 948, 310, 311, 312, 949, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 320, 319, 0, 321,
	492, 950, 322, 323, 951, 0, 324, 325, 0, 0,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 337, 335, 952, 338, 339, 341, 340, 0, 0,
	953, 0, 493, 494, 343, 344, 0, 345, 346, 347,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 495,
	954, 354, 955, 496, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 0, 363, 364, 497, 365, 498, 366,
	0, 367, 0, 368, 369, 370, 371, 372, 373, 499,
	374, 375, 0, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 0, 389, 956,
	390, 391, 392, 393, 500, 394, 0, 395, 399, 400,
	401, 402, 403, 404, 405, 0, 412, 413, 406, 408,
	409, 410, 407, 411, 414, 415, 0, 416, 396, 397,
	417, 957, 418, 501, 419, 420, 0, 430, 421, 422,
	423, 398, 424, 428, 429, 425, 426, 427, 502, 0,
	432, 433, 431, 0, 434, 435, 436, 437, 438, 274,
	439, 0, 440, 503, 504, 505, 506, 0, 447, 0,
	441, 442, 507, 443, 508, 0, 444, 445, 446, 0,
	448, 449, 0, 0, 450, 451, 452, 453, 454, 456,
	0, 457, 0, 455, 458, 459, 460, 509, 510, 511,
	0, 462, 461, 512, 0, 0, 0, 0, 463, 464,
	513, 465, 466, 467, 1300, 0, 1163, 1162, 0, 0,
	0, 0, 1160, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 468, 0, 0, 0, 0, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	473, 474, 475, 0, 236, 476, 0, 1067, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 943, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 477, 478, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 0, 213, 0, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 0, 286, 0, 0, 944, 287, 288, 0, 289,
	483, 0, 484, 290, 0, 291, 292, 293, 294, 1299,
	486, 487, 342, 946, 295, 296, 0, 297, 298, 300,
	0, 0, 0, 0, 299, 301, 308, 0, 945, 302,
	488, 304, 303, 305, 306, 307, 489, 0, 490, 0,
	309, 947, 491, 948, 310, 311, 312, 949, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 320, 319, 0,
	321, 492, 950, 322, 323, 951, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 952, 338, 339, 341, 340, 0,
	0, 953, 0, 493, 494, 343, 344, 0, 345, 346,
	347, 0, 0, 349, 350, 351, 0, 0, 352, 353,
	495, 954, 354, 955, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 497, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	956, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 0, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 0, 416, 396,
	397, 417, 957, 418, 501, 419, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	0, 432, 433, 431, 0, 434, 435, 436, 437, 438,
	274, 439, 0, 440, 503, 504, 505, 506, 0, 447,
	0, 441, 442, 507, 443, 508, 0, 444, 445, 446,
	0, 448, 449, 0, 0, 450, 451, 452, 453, 454,
	456, 0, 457, 0, 455, 458, 459, 460, 509, 510,
	511, 0, 462, 461, 512, 0, 0, 0, 0, 463,
	464, 513, 465, 466, 467, 1238, 0, 1163, 1162, 0,
	0, 0, 0, 1160, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 1067, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 943, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 213, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 944, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	1237, 486, 487, 342, 946, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 945,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 947, 491, 948, 310, 311, 312, 949, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 950, 322, 323, 951, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 952, 338, 339, 341, 340,
	0, 0, 953, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 954, 354, 955, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 956, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 957, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 0, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 1235, 0, 1163, 1162,
	0, 0, 0, 0, 1160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 1067,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 943,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 944, 287, 288,
	0, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 1234, 486, 487, 342, 946, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 0, 299, 301, 308, 0,
	945, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 947, 491, 948, 310, 311, 312, 949,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 950, 322, 323, 951, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 952, 338, 339, 341,
	340, 0, 0, 953, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 954, 354, 955, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 956, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 957, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 0, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 1156, 0, 1163,
	1162, 0, 0, 0, 0, 1160, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 468, 0, 0,
	0, 0, 222, 223, 224, 225, 469, 470, 226, 471,
	227, 228, 472, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 473, 474, 475, 0, 236, 476, 0,
	1067, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	943, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 477, 478, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 269, 479, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 480, 481, 0,
	213, 0, 0, 0, 0, 0, 280, 281, 282, 482,
	283, 284, 0, 285, 0, 286, 0, 0, 944, 287,
	288, 0, 289, 483, 0, 484, 290, 0, 291, 292,
	293, 294, 1158, 486, 487, 342, 946, 295, 296, 0,
	297, 298, 300, 0, 0, 0, 0, 299, 301, 308,
	0, 945, 302, 488, 304, 303, 305, 306, 307, 489,
	0, 490, 0, 309, 947, 491, 948, 310, 311, 312,
	949, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	320, 319, 0, 321, 492, 950, 322, 323, 951, 0,
	324, 325, 0, 0, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 337, 335, 952, 338, 339,
	341, 340, 0, 0, 953, 0, 493, 494, 343, 344,
	0, 345, 346, 347, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 495, 954, 354, 955, 496, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 0, 363, 364,
	497, 365, 498, 366, 0, 367, 0, 368, 369, 370,
	371, 372, 373, 499, 374, 375, 0, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 0, 389, 956, 390, 391, 392, 393, 500, 394,
	0, 395, 399, 400, 401, 402, 403, 404, 405, 0,
	412, 413, 406, 408, 409, 410, 407, 411, 414, 415,
	0, 416, 396, 397, 417, 957, 418, 501, 419, 420,
	0, 430, 421, 422, 423, 398, 424, 428, 429, 425,
	426, 427, 502, 0, 432, 433, 431, 0, 434, 435,
	436, 437, 438, 274, 439, 0, 440, 503, 504, 505,
	506, 0, 447, 0, 441, 442, 507, 443, 508, 0,
	444, 445, 446, 0, 448, 449, 0, 0, 450, 451,
	452, 453, 454, 456, 0, 457, 0, 455, 458, 459,
	460, 509, 510, 511, 0, 462, 461, 512, 0, 0,
	0, 0, 463, 464, 513, 465, 466, 467, 1163, 1162,
	0, 0, 0, 0, 1160, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 1067,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 943,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 944, 287, 288,
	0, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 485, 486, 487, 342, 946, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 0, 299, 301, 308, 0,
	945, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 947, 491, 948, 310, 311, 312, 949,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 950, 322, 323, 951, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 952, 338, 339, 341,
	340, 0, 0, 953, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 954, 354, 955, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 956, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 957, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 0, 462, 461, 512, 1163, 1162, 0,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 1067, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 943, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 213, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 944, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 946, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 945,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 947, 491, 948, 310, 311, 312, 949, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 950, 322, 323, 951, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 952, 338, 339, 341, 340,
	0, 0, 953, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 954, 354, 955, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 956, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 957, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 1163, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 475, 0,
	236, 476, 0, 1067, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 943, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 213, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 0,
	0, 944, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 485, 486, 487, 342, 946,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 0,
	299, 301, 308, 0, 945, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 947, 491, 948,
	310, 311, 312, 949, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 950, 322,
	323, 951, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 335,
	952, 338, 339, 341, 340, 0, 0, 953, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 954, 354, 955,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 956, 390, 391, 392,
	393, 500, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 957, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	503, 504, 505, 506, 0, 447, 0, 441, 442, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 210, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 2241, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 2238, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 2388, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 2244, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 2385, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 2387, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 2384, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 2243, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 2386, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 210, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 475, 2241,
	236, 476, 0, 0, 2235, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 2238, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 2244,
	0, 0, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 2234, 486, 487, 342, 0,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 0,
	299, 301, 308, 0, 0, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 0, 491, 0,
	310, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 0, 322,
	323, 0, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 335,
	0, 338, 339, 341, 340, 0, 0, 0, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 0, 354, 0,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 2243, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 0, 390, 391, 392,
	393, 500, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 0, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	503, 504, 505, 506, 0, 447, 0, 441, 442, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	2242, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 0, 462, 461,
	512, 1391, 0, 210, 0, 463, 464, 513, 465, 466,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 468, 0, 0, 0, 0, 222, 223, 224, 225,
	469, 470, 226, 471, 227, 228, 472, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 473, 474, 475,
	0, 236, 476, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	477, 478, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	269, 479, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 480, 481, 0, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 482, 283, 284, 0, 285, 0, 286,
	0, 0, 0, 287, 288, 0, 289, 483, 0, 484,
	290, 0, 291, 292, 293, 294, 485, 486, 487, 342,
	0, 295, 296, 0, 297, 298, 300, 0, 0, 0,
	214, 299, 301, 308, 0, 0, 302, 488, 304, 303,
	305, 306, 307, 489, 0, 490, 0, 309, 0, 491,
	0, 310, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 492, 0,
	322, 323, 0, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 337,
	335, 0, 338, 339, 341, 340, 0, 215, 0, 0,
	493, 494, 343, 344, 0, 345, 346, 347, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 0, 354,
	0, 496, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 497, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 499, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 0, 390, 391,
	392, 393, 500, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 1394, 413, 406, 408, 409, 410,
	407, 411, 414, 415, 0, 416, 396, 397, 417, 0,
	418, 501, 419, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 429, 425, 426, 427, 502, 0, 432, 433,
	431, 1392, 434, 435, 436, 437, 438, 274, 439, 0,
	440, 503, 504, 505, 506, 0, 447, 0, 441, 442,
	507, 443, 508, 0, 444, 445, 446, 0, 448, 449,
	0, 0, 450, 451, 452, 453, 454, 456, 0, 457,
	0, 455, 458, 459, 460, 509, 510, 511, 0, 1393,
	461, 512, 1151, 0, 210, 0, 463, 464, 513, 465,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 468, 0, 0, 0, 0, 222, 223, 224,
	225, 469, 470, 226, 471, 227, 228, 472, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 473, 474,
	475, 0, 236, 476, 0, 0, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 0, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 477, 478, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 269, 479, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 480, 481, 0, 213, 0, 0, 0, 0,
	0, 280, 281, 282, 482, 283, 284, 0, 285, 0,
	286, 0, 0, 0, 287, 288, 0, 289, 483, 0,
	484, 290, 0, 291, 292, 293, 294, 1153, 486, 487,
	342, 0, 295, 296, 0, 297, 298, 300, 0, 0,
	0, 214, 299, 301, 308, 0, 0, 302, 488, 304,
	303, 305, 306, 307, 489, 0, 490, 0, 309, 0,
	491, 0, 310, 311, 312, 0, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 492,
	0, 322, 323, 0, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 332, 334, 336,
	337, 335, 0, 338, 339, 341, 340, 0, 215, 0,
	0, 493, 494, 343, 344, 0, 345, 346, 347, 0,
	998, 349, 350, 351, 0, 0, 352, 353, 495, 0,
	354, 0, 496, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 497, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 372, 373, 499, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 0, 390,
	391, 392, 393, 500, 394, 0, 395, 399, 400, 401,
	402, 403, 404, 405, 0, 412, 413, 406, 408, 409,
	410, 407, 411, 414, 415, 0, 416, 396, 397, 417,
	0, 418, 501, 419, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 429, 425, 426, 427, 502, 0, 432,
	433, 431, 0, 434, 435, 436, 437, 438, 274, 439,
	0, 440, 503, 504, 505, 506, 0, 447, 0, 441,
	442, 507, 443, 508, 0, 444, 445, 446, 0, 448,
	449, 0, 0, 450, 451, 452, 453, 454, 456, 0,
	457, 0, 455, 458, 459, 460, 509, 510, 511, 0,
	462, 461, 512, 1148, 0, 210, 0, 463, 464, 513,
	465, 466, 467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 468, 0, 0, 0, 0, 222, 223,
	224, 225, 469, 470, 226, 471, 227, 228, 472, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 473,
	474, 475, 0, 236, 476, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 477, 478, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 269, 479, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 480, 481, 0, 213, 0, 0, 0,
	0, 0, 280, 281, 282, 482, 283, 284, 0, 285,
	0, 286, 0, 0, 0, 287, 288, 0, 289, 483,
	0, 484, 290, 0, 291, 292, 293, 294, 1150, 486,
	487, 342, 0, 295, 296, 0, 297, 298, 300, 0,
	0, 0, 214, 299, 301, 308, 0, 0, 302, 488,
	304, 303, 305, 306, 307, 489, 0, 490, 0, 309,
	0, 491, 0, 310, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 320, 319, 0, 321,
	492, 0, 322, 323, 0, 0, 324, 325, 0, 0,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 337, 335, 0, 338, 339, 341, 340, 0, 215,
	0, 0, 493, 494, 343, 344, 0, 345, 346, 347,
	0, 998, 349, 350, 351, 0, 0, 352, 353, 495,
	0, 354, 0, 496, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 0, 363, 364, 497, 365, 498, 366,
	0, 367, 0, 368, 369, 370, 371, 372, 373, 499,
	374, 375, 0, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 0, 389, 0,
	390, 391, 392, 393, 500, 394, 0, 395, 399, 400,
	401, 402, 403, 404, 405, 0, 412, 413, 406, 408,
	409, 410, 407, 411, 414, 415, 0, 416, 396, 397,
	417, 0, 418, 501, 419, 420, 0, 430, 421, 422,
	423, 398, 424, 428, 429, 425, 426, 427, 502, 0,
	432, 433, 431, 0, 434, 435, 436, 437, 438, 274,
	439, 0, 440, 503, 504, 505, 506, 0, 447, 0,
	441, 442, 507, 443, 508, 0, 444, 445, 446, 0,
	448, 449, 0, 0, 450, 451, 452, 453, 454, 456,
	0, 457, 0, 455, 458, 459, 460, 509, 510, 511,
	0, 462, 461, 512, 1055, 0, 210, 0, 463, 464,
	513, 465, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 468, 0, 0, 0, 0, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	473, 474, 475, 0, 236, 476, 0, 0, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 0, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 477, 478, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 0, 213, 0, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 0, 286, 0, 0, 0, 287, 288, 0, 289,
	483, 0, 484, 290, 0, 291, 292, 293, 294, 1057,
	486, 487, 342, 0, 295, 296, 0, 297, 298, 300,
	0, 0, 0, 214, 299, 301, 308, 0, 0, 302,
	488, 304, 303, 305, 306, 307, 489, 0, 490, 0,
	309, 0, 491, 0, 310, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 320, 319, 0,
	321, 492, 0, 322, 323, 0, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 0, 338, 339, 341, 340, 0,
	215, 0, 0, 493, 494, 343, 344, 0, 345, 346,
	347, 0, 998, 349, 350, 351, 0, 0, 352, 353,
	495, 0, 354, 0, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 497, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	0, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 0, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 0, 416, 396,
	397, 417, 0, 418, 501, 419, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	0, 432, 433, 431, 0, 434, 435, 436, 437, 438,
	274, 439, 0, 440, 503, 504, 505, 506, 0, 447,
	0, 441, 442, 507, 443, 508, 0, 444, 445, 446,
	0, 448, 449, 0, 0, 450, 451, 452, 453, 454,
	456, 0, 457, 0, 455, 458, 459, 460, 509, 510,
	511, 0, 462, 461, 512, 542, 0, 210, 0, 463,
	464, 513, 465, 466, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 541, 220, 531,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 534, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 535,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 536, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 0, 462, 461, 512, 530, 0, 210, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	531, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 534, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 0,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 0, 287, 288,
	535, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 485, 486, 487, 342, 0, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 0, 299, 301, 308, 0,
	0, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 0, 491, 0, 310, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 0, 322, 323, 0, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 0, 338, 339, 341,
	340, 0, 0, 0, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 0, 354, 0, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 0, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 536, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 0, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 210, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 468, 0, 0, 0, 0, 222, 223, 224, 225,
	469, 470, 226, 471, 227, 228, 472, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 473, 474, 475,
	0, 236, 476, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	477, 478, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	269, 479, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 480, 481, 0, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 482, 283, 284, 0, 285, 0, 286,
	0, 0, 0, 287, 288, 0, 289, 483, 0, 484,
	290, 0, 291, 292, 293, 294, 485, 486, 487, 342,
	0, 295, 296, 0, 297, 298, 300, 0, 0, 0,
	214, 299, 301, 308, 0, 0, 302, 488, 304, 303,
	305, 306, 307, 489, 0, 490, 0, 309, 0, 491,
	0, 310, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 492, 0,
	322, 323, 0, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 337,
	335, 0, 338, 339, 341, 340, 0, 215, 0, 0,
	493, 494, 343, 344, 0, 345, 346, 347, 0, 998,
	349, 350, 351, 0, 0, 352, 353, 495, 0, 354,
	0, 496, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 497, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 499, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 0, 390, 391,
	392, 393, 500, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 406, 408, 409, 410,
	407, 411, 414, 415, 0, 416, 396, 397, 417, 0,
	418, 501, 419, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 429, 425, 426, 427, 502, 0, 432, 433,
	431, 0, 434, 435, 436, 437, 438, 274, 439, 0,
	440, 503, 504, 505, 506, 0, 447, 0, 441, 442,
	507, 443, 508, 0, 444, 445, 446, 0, 448, 449,
	0, 0, 450, 451, 452, 453, 454, 456, 0, 457,
	0, 455, 458, 459, 460, 509, 510, 511, 0, 462,
	461, 512, 2317, 0, 210, 0, 463, 464, 513, 465,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 468, 0, 0, 0, 0, 222, 223, 224,
	225, 469, 470, 226, 471, 227, 228, 472, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 473, 474,
	475, 0, 236, 476, 0, 0, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 0, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 477, 478, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 269, 479, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 480, 481, 0, 213, 0, 0, 0, 0,
	0, 280, 281, 282, 482, 283, 284, 0, 285, 0,
	286, 0, 0, 0, 287, 288, 0, 289, 483, 0,
	484, 290, 0, 291, 292, 293, 294, 485, 486, 487,
	342, 0, 295, 296, 0, 297, 298, 300, 0, 0,
	0, 214, 299, 301, 308, 0, 0, 302, 488, 304,
	303, 305, 306, 307, 489, 0, 490, 0, 309, 0,
	491, 0, 310, 311, 312, 0, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 492,
	0, 322, 323, 0, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 332, 334, 336,
	337, 335, 0, 338, 339, 341, 340, 0, 215, 0,
	0, 493, 494, 343, 344, 0, 345, 346, 347, 0,
	0, 349, 350, 351, 0, 0, 352, 353, 495, 0,
	354, 0, 496, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 497, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 372, 373, 499, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 0, 390,
	391, 392, 393, 500, 394, 0, 395, 399, 400, 401,
	402, 403, 404, 405, 0, 412, 413, 406, 408, 409,
	410, 407, 411, 414, 415, 0, 416, 396, 397, 417,
	0, 418, 501, 419, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 429, 425, 426, 427, 502, 0, 432,
	433, 431, 0, 434, 435, 436, 437, 438, 274, 439,
	0, 440, 503, 504, 505, 506, 0, 447, 0, 441,
	442, 507, 443, 508, 0, 444, 445, 446, 0, 448,
	449, 0, 0, 450, 451, 452, 453, 454, 456, 0,
	457, 0, 455, 458, 459, 460, 509, 510, 511, 0,
	462, 461, 512, 1877, 0, 210, 0, 463, 464, 513,
	465, 466, 467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 468, 0, 0, 0, 0, 222, 223,
	224, 225, 469, 470, 226, 471, 227, 228, 472, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 473,
	474, 475, 0, 236, 476, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 477, 478, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 269, 479, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 480, 481, 0, 213, 0, 0, 0,
	0, 0, 280, 281, 282, 482, 283, 284, 0, 285,
	0, 286, 0, 0, 0, 287, 288, 0, 289, 483,
	0, 484, 290, 0, 291, 292, 293, 294, 485, 486,
	487, 342, 0, 295, 296, 0, 297, 298, 300, 0,
	0, 0, 214, 299, 301, 308, 0, 0, 302, 488,
	304, 303, 305, 306, 307, 489, 0, 490, 0, 309,
	0, 491, 0, 310, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 320, 319, 0, 321,
	492, 0, 322, 323, 0, 0, 324, 325, 0, 0,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 337, 335, 0, 338, 339, 341, 340, 0, 215,
	0, 0, 493, 494, 343, 344, 0, 345, 346, 347,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 495,
	0, 354, 0, 496, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 0, 363, 364, 497, 365, 498, 366,
	0, 367, 0, 368, 369, 370, 371, 372, 373, 499,
	374, 375, 0, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 0, 389, 0,
	390, 391, 392, 393, 500, 394, 0, 395, 399, 400,
	401, 402, 403, 404, 405, 0, 412, 413, 406, 408,
	409, 410, 407, 411, 414, 415, 0, 416, 396, 397,
	417, 0, 418, 501, 419, 420, 0, 430, 421, 422,
	423, 398, 424, 428, 429, 425, 426, 427, 502, 0,
	432, 433, 431, 0, 434, 435, 436, 437, 438, 274,
	439, 0, 440, 503, 504, 505, 506, 0, 447, 0,
	441, 442, 507, 443, 508, 0, 444, 445, 446, 0,
	448, 449, 0, 0, 450, 451, 452, 453, 454, 456,
	0, 457, 0, 455, 458, 459, 460, 509, 510, 511,
	210, 462, 461, 512, 0, 0, 0, 0, 463, 464,
	513, 465, 466, 467, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 468, 0,
	0, 0, 0, 222, 223, 224, 225, 469, 470, 226,
	471, 227, 228, 472, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 473, 474, 475, 0, 236, 476,
	0, 0, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 0, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 477, 478, 0,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 264,
	265, 0, 266, 0, 267, 268, 0, 269, 479, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 480, 481,
	0, 213, 0, 0, 0, 0, 0, 280, 281, 282,
	482, 283, 284, 0, 285, 0, 286, 0, 0, 0,
	287, 288, 0, 289, 483, 0, 484, 290, 0, 291,
	292, 293, 294, 485, 486, 487, 342, 0, 295, 296,
	0, 297, 298, 300, 0, 0, 0, 214, 299, 301,
	308, 0, 0, 302, 488, 304, 303, 305, 306, 307,
	489, 0, 490, 0, 309, 0, 491, 0, 310, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 320, 319, 0, 321, 492, 0, 322, 323, 0,
	0, 324, 325, 0, 0, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 337, 335, 0, 338,
	339, 341, 340, 0, 215, 0, 0, 493, 494, 343,
	344, 0, 345, 346, 347, 0, 0, 349, 350, 351,
	0, 0, 352, 353, 495, 0, 354, 0, 496, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 0, 363,
	364, 497, 365, 498, 366, 0, 367, 0, 368, 369,
	370, 371, 372, 373, 499, 374, 375, 0, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 0, 389, 0, 390, 391, 392, 393, 500,
	394, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	0, 412, 413, 406, 408, 409, 410, 407, 411, 414,
	415, 0, 416, 396, 397, 417, 0, 418, 501, 419,
	420, 0, 430, 421, 422, 423, 398, 424, 428, 429,
	425, 426, 427, 502, 0, 432, 433, 431, 1811, 434,
	435, 436, 437, 438, 274, 439, 0, 440, 503, 504,
	505, 506, 0, 447, 0, 441, 442, 507, 443, 508,
	0, 444, 445, 446, 0, 448, 449, 0, 0, 450,
	451, 452, 453, 454, 456, 0, 457, 0, 455, 458,
	459, 460, 509, 510, 511, 0, 462, 461, 512, 1804,
	0, 210, 0, 463, 464, 513, 465, 466, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 468,
	0, 0, 0, 0, 222, 223, 224, 225, 469, 470,
	226, 471, 227, 228, 472, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 473, 474, 475, 0, 236,
	476, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 477, 478,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 269, 479,
	270, 271, 273, 275, 272, 276, 277, 278, 279, 480,
	481, 0, 213, 0, 0, 0, 0, 0, 280, 281,
	282, 482, 283, 284, 0, 285, 0, 286, 0, 0,
	0, 287, 288, 0, 289, 483, 0, 484, 290, 0,
	291, 292, 293, 294, 1803, 486, 487, 342, 0, 295,
	296, 0, 297, 298, 300, 0, 0, 0, 214, 299,
	301, 308, 0, 0, 302, 488, 304, 303, 305, 306,
	307, 489, 0, 490, 0, 309, 0, 491, 0, 310,
	311, 312, 0, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 320, 319, 0, 321, 492, 0, 322, 323,
	0, 0, 324, 325, 0, 0, 326, 327, 0, 328,
	329, 331, 333, 330, 332, 334, 336, 337, 335, 0,
	338, 339, 341, 340, 0, 215, 0, 0, 493, 494,
	343, 344, 0, 345, 346, 347, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 495, 0, 354, 0, 496,
	355, 348, 356, 357, 358, 359, 360, 361, 362, 0,
	363, 364, 497, 365, 498, 366, 0, 367, 0, 368,
	369, 370, 371, 372, 373, 499, 374, 375, 0, 376,
	377, 378, 379, 380, 0, 382, 383, 384, 381, 385,
	386, 387, 388, 0, 389, 0, 390, 391, 392, 393,
	500, 394, 0, 395, 399, 400, 401, 402, 403, 404,
	405, 0, 412, 413, 406, 408, 409, 410, 407, 411,
	414, 415, 0, 416, 396, 397, 417, 0, 418, 501,
	419, 420, 0, 430, 421, 422, 423, 398, 424, 428,
	429, 425, 426, 427, 502, 0, 432, 433, 431, 0,
	434, 435, 436, 437, 438, 274, 439, 0, 440, 503,
	504, 505, 506, 0, 447, 0, 441, 442, 507, 443,
	508, 0, 444, 445, 446, 0, 448, 449, 0, 0,
	450, 451, 452, 453, 454, 456, 0, 457, 0, 455,
	458, 459, 460, 509, 510, 511, 0, 462, 461, 512,
	1799, 0, 210, 0, 463, 464, 513, 465, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 475, 0,
	236, 476, 0, 0, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 213, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 0,
	0, 0, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 1801, 486, 487, 342, 0,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 214,
	299, 301, 308, 0, 0, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 0, 491, 0,
	310, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 0, 322,
	323, 0, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 335,
	0, 338, 339, 341, 340, 0, 215, 0, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 0, 354, 0,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 0, 390, 391, 392,
	393, 500, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 0, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	503, 504, 505, 506, 0, 447, 0, 441, 442, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 0, 462, 461,
	512, 1293, 0, 210, 0, 463, 464, 513, 465, 466,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 468, 0, 0, 0, 0, 222, 223, 224, 225,
	469, 470, 226, 471, 227, 228, 472, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 473, 474, 475,
	0, 236, 476, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	477, 478, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	269, 479, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 480, 481, 0, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 482, 283, 284, 0, 285, 0, 286,
	0, 0, 0, 287, 288, 0, 289, 483, 0, 484,
	290, 0, 291, 292, 293, 294, 1292, 486, 487, 342,
	0, 295, 296, 0, 297, 298, 300, 0, 0, 0,
	214, 299, 301, 308, 0, 0, 302, 488, 304, 303,
	305, 306, 307, 489, 0, 490, 0, 309, 0, 491,
	0, 310, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 492, 0,
	322, 323, 0, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 337,
	335, 0, 338, 339, 341, 340, 0, 215, 0, 0,
	493, 494, 343, 344, 0, 345, 346, 347, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 0, 354,
	0, 496, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 497, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 499, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 0, 390, 391,
	392, 393, 500, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 406, 408, 409, 410,
	407, 411, 414, 415, 0, 416, 396, 397, 417, 0,
	418, 501, 419, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 429, 425, 426, 427, 502, 0, 432, 433,
	431, 0, 434, 435, 436, 437, 438, 274, 439, 0,
	440, 503, 504, 505, 506, 0, 447, 0, 441, 442,
	507, 443, 508, 0, 444, 445, 446, 0, 448, 449,
	0, 0, 450, 451, 452, 453, 454, 456, 0, 457,
	0, 455, 458, 459, 460, 509, 510, 511, 0, 462,
	461, 512, 1290, 0, 210, 0, 463, 464, 513, 465,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 468, 0, 0, 0, 0, 222, 223, 224,
	225, 469, 470, 226, 471, 227, 228, 472, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 473, 474,
	475, 0, 236, 476, 0, 0, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 0, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 477, 478, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 269, 479, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 480, 481, 0, 213, 0, 0, 0, 0,
	0, 280, 281, 282, 482, 283, 284, 0, 285, 0,
	286, 0, 0, 0, 287, 288, 0, 289, 483, 0,
	484, 290, 0, 291, 292, 293, 294, 1289, 486, 487,
	342, 0, 295, 296, 0, 297, 298, 300, 0, 0,
	0, 214, 299, 301, 308, 0, 0, 302, 488, 304,
	303, 305, 306, 307, 489, 0, 490, 0, 309, 0,
	491, 0, 310, 311, 312, 0, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 492,
	0, 322, 323, 0, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 332, 334, 336,
	337, 335, 0, 338, 339, 341, 340, 0, 215, 0,
	0, 493, 494, 343, 344, 0, 345, 346, 347, 0,
	0, 349, 350, 351, 0, 0, 352, 353, 495, 0,
	354, 0, 496, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 497, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 372, 373, 499, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 0, 390,
	391, 392, 393, 500, 394, 0, 395, 399, 400, 401,
	402, 403, 404, 405, 0, 412, 413, 406, 408, 409,
	410, 407, 411, 414, 415, 0, 416, 396, 397, 417,
	0, 418, 501, 419, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 429, 425, 426, 427, 502, 0, 432,
	433, 431, 0, 434, 435, 436, 437, 438, 274, 439,
	0, 440, 503, 504, 505, 506, 0, 447, 0, 441,
	442, 507, 443, 508, 0, 444, 445, 446, 0, 448,
	449, 0, 0, 450, 451, 452, 453, 454, 456, 0,
	457, 0, 455, 458, 459, 460, 509, 510, 511, 0,
	462, 461, 512, 1287, 0, 210, 0, 463, 464, 513,
	465, 466, 467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 468, 0, 0, 0, 0, 222, 223,
	224, 225, 469, 470, 226, 471, 227, 228, 472, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 473,
	474, 475, 0, 236, 476, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 477, 478, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 269, 479, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 480, 481, 0, 213, 0, 0, 0,
	0, 0, 280, 281, 282, 482, 283, 284, 0, 285,
	0, 286, 0, 0, 0, 287, 288, 0, 289, 483,
	0, 484, 290, 0, 291, 292, 293, 294, 1286, 486,
	487, 342, 0, 295, 296, 0, 297, 298, 300, 0,
	0, 0, 214, 299, 301, 308, 0, 0, 302, 488,
	304, 303, 305, 306, 307, 489, 0, 490, 0, 309,
	0, 491, 0, 310, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 320, 319, 0, 321,
	492, 0, 322, 323, 0, 0, 324, 325, 0, 0,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 337, 335, 0, 338, 339, 341, 340, 0, 215,
	0, 0, 493, 494, 343, 344, 0, 345, 346, 347,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 495,
	0, 354, 0, 496, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 0, 363, 364, 497, 365, 498, 366,
	0, 367, 0, 368, 369, 370, 371, 372, 373, 499,
	374, 375, 0, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 0, 389, 0,
	390, 391, 392, 393, 500, 394, 0, 395, 399, 400,
	401, 402, 403, 404, 405, 0, 412, 413, 406, 408,
	409, 410, 407, 411, 414, 415, 0, 416, 396, 397,
	417, 0, 418, 501, 419, 420, 0, 430, 421, 422,
	423, 398, 424, 428, 429, 425, 426, 427, 502, 0,
	432, 433, 431, 0, 434, 435, 436, 437, 438, 274,
	439, 0, 440, 503, 504, 505, 506, 0, 447, 0,
	441, 442, 507, 443, 508, 0, 444, 445, 446, 0,
	448, 449, 0, 0, 450, 451, 452, 453, 454, 456,
	0, 457, 0, 455, 458, 459, 460, 509, 510, 511,
	0, 462, 461, 512, 1283, 0, 210, 0, 463, 464,
	513, 465, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 468, 0, 0, 0, 0, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	473, 474, 475, 0, 236, 476, 0, 0, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 0, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 477, 478, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 0, 213, 0, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 0, 286, 0, 0, 0, 287, 288, 0, 289,
	483, 0, 484, 290, 0, 291, 292, 293, 294, 1282,
	486, 487, 342, 0, 295, 296, 0, 297, 298, 300,
	0, 0, 0, 214, 299, 301, 308, 0, 0, 302,
	488, 304, 303, 305, 306, 307, 489, 0, 490, 0,
	309, 0, 491, 0, 310, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 320, 319, 0,
	321, 492, 0, 322, 323, 0, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 0, 338, 339, 341, 340, 0,
	215, 0, 0, 493, 494, 343, 344, 0, 345, 346,
	347, 0, 0, 349, 350, 351, 0, 0, 352, 353,
	495, 0, 354, 0, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 497, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	0, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 0, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 0, 416, 396,
	397, 417, 0, 418, 501, 419, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	0, 432, 433, 431, 0, 434, 435, 436, 437, 438,
	274, 439, 0, 440, 503, 504, 505, 506, 0, 447,
	0, 441, 442, 507, 443, 508, 0, 444, 445, 446,
	0, 448, 449, 0, 0, 450, 451, 452, 453, 454,
	456, 0, 457, 0, 455, 458, 459, 460, 509, 510,
	511, 0, 462, 461, 512, 1258, 0, 210, 0, 463,
	464, 513, 465, 466, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 213, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 214, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 215, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 0, 462, 461, 512, 1173, 0, 210, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 0, 287, 288,
	0, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 1175, 486, 487, 342, 0, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 214, 299, 301, 308, 0,
	0, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 0, 491, 0, 310, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 0, 322, 323, 0, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 0, 338, 339, 341,
	340, 0, 215, 0, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 0, 354, 0, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 0, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 0, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 210, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 468, 0, 0, 0, 0, 222, 223, 224, 225,
	469, 470, 226, 471, 227, 228, 472, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 473, 474, 475,
	0, 236, 476, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	477, 478, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	269, 479, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 480, 481, 0, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 482, 283, 284, 0, 285, 0, 286,
	0, 0, 0, 287, 288, 0, 289, 483, 0, 484,
	290, 0, 291, 292, 293, 294, 485, 486, 487, 342,
	0, 295, 296, 0, 297, 298, 300, 0, 0, 0,
	214, 299, 301, 308, 0, 0, 302, 488, 304, 303,
	305, 306, 307, 489, 0, 490, 0, 309, 0, 491,
	0, 310, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 492, 0,
	322, 323, 0, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 337,
	335, 0, 338, 339, 341, 340, 0, 215, 0, 0,
	493, 494, 343, 344, 0, 345, 346, 347, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 0, 354,
	0, 496, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 497, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 499, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 0, 390, 391,
	392, 393, 500, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 406, 408, 409, 410,
	407, 411, 414, 415, 0, 416, 396, 397, 417, 0,
	418, 501, 419, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 429, 425, 426, 427, 502, 0, 432, 433,
	431, 0, 434, 435, 436, 437, 438, 274, 439, 0,
	440, 503, 504, 505, 506, 0, 447, 0, 441, 442,
	507, 443, 508, 0, 444, 445, 446, 0, 448, 449,
	0, 0, 450, 451, 452, 453, 454, 456, 0, 457,
	0, 455, 458, 459, 460, 509, 510, 511, 210, 462,
	461, 512, 0, 0, 0, 0, 463, 464, 513, 465,
	466, 467, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 534, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 0,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 0, 287, 288,
	535, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 485, 486, 487, 342, 0, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 0, 299, 301, 308, 0,
	0, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 0, 491, 0, 310, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 0, 322, 323, 0, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 0, 338, 339, 341,
	340, 0, 0, 0, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 0, 354, 0, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 0, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 536, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 0, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 210, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 468, 0, 0, 0, 0, 222, 223, 224, 225,
	469, 470, 226, 471, 227, 228, 472, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 473, 474, 475,
	0, 236, 476, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 1905, 256, 257, 258,
	477, 478, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	269, 479, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 480, 481, 0, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 482, 283, 284, 0, 285, 0, 286,
	0, 0, 0, 287, 288, 0, 289, 483, 0, 484,
	290, 0, 291, 292, 293, 294, 485, 486, 487, 342,
	0, 295, 296, 0, 297, 298, 300, 0, 0, 0,
	214, 299, 301, 308, 0, 0, 302, 488, 304, 303,
	305, 306, 307, 489, 0, 490, 0, 309, 0, 491,
	0, 310, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 492, 0,
	322, 323, 0, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 337,
	335, 0, 338, 339, 341, 340, 0, 215, 0, 0,
	493, 494, 343, 344, 0, 345, 346, 347, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 0, 354,
	0, 496, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 497, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 499, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 0, 390, 391,
	392, 393, 500, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 406, 408, 409, 410,
	407, 411, 414, 415, 0, 416, 396, 397, 417, 0,
	418, 501, 419, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 429, 425, 426, 427, 502, 0, 432, 433,
	431, 0, 434, 435, 436, 437, 438, 274, 439, 0,
	440, 503, 504, 505, 506, 0, 447, 0, 441, 442,
	507, 443, 508, 0, 444, 445, 446, 0, 448, 449,
	0, 0, 450, 451, 452, 453, 454, 456, 0, 457,
	0, 455, 458, 459, 460, 509, 510, 511, 210, 462,
	461, 512, 0, 0, 0, 0, 463, 464, 513, 465,
	466, 467, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 1903, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 213,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 0, 287, 288,
	0, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 485, 486, 487, 342, 0, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 214, 299, 301, 308, 0,
	0, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 0, 491, 0, 310, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 0, 322, 323, 0, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 0, 338, 339, 341,
	340, 0, 215, 0, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 0, 354, 0, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 0, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 0, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 210, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 468, 0, 0, 0, 0, 222, 223, 224, 225,
	469, 470, 226, 471, 227, 228, 472, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 473, 474, 475,
	0, 236, 476, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 1901, 256, 257, 258,
	477, 478, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	269, 479, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 480, 481, 0, 213, 0, 0, 0, 0, 0,
	280, 281, 282, 482, 283, 284, 0, 285, 0, 286,
	0, 0, 0, 287, 288, 0, 289, 483, 0, 484,
	290, 0, 291, 292, 293, 294, 485, 486, 487, 342,
	0, 295, 296, 0, 297, 298, 300, 0, 0, 0,
	214, 299, 301, 308, 0, 0, 302, 488, 304, 303,
	305, 306, 307, 489, 0, 490, 0, 309, 0, 491,
	0, 310, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 492, 0,
	322, 323, 0, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 337,
	335, 0, 338, 339, 341, 340, 0, 215, 0, 0,
	493, 494, 343, 344, 0, 345, 346, 347, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 0, 354,
	0, 496, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 497, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 499, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 0, 390, 391,
	392, 393, 500, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 406, 408, 409, 410,
	407, 411, 414, 415, 0, 416, 396, 397, 417, 0,
	418, 501, 419, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 429, 425, 426, 427, 502, 0, 432, 433,
	431, 0, 434, 435, 436, 437, 438, 274, 439, 0,
	440, 503, 504, 505, 506, 0, 447, 0, 441, 442,
	507, 443, 508, 0, 444, 445, 446, 0, 448, 449,
	0, 0, 450, 451, 452, 453, 454, 456, 0, 457,
	0, 455, 458, 459, 460, 509, 510, 511, 0, 462,
	461, 512, 681, 0, 210, 0, 463, 464, 513, 465,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 468, 0, 0, 0, 0, 222, 223, 224,
	225, 469, 470, 226, 471, 227, 228, 472, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 473, 474,
	475, 0, 236, 476, 0, 0, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 0, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 477, 478, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 269, 479, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 480, 481, 0, 0, 0, 0, 0, 0,
	0, 280, 281, 282, 482, 283, 284, 0, 285, 0,
	286, 0, 0, 0, 287, 288, 0, 289, 483, 0,
	484, 290, 0, 291, 292, 293, 294, 485, 486, 487,
	342, 0, 295, 296, 0, 297, 298, 300, 0, 0,
	0, 0, 299, 301, 308, 0, 0, 302, 488, 304,
	303, 305, 306, 307, 489, 0, 490, 680, 309, 0,
	491, 0, 310, 311, 312, 0, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 492,
	0, 322, 323, 0, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 332, 334, 336,
	337, 335, 0, 338, 339, 341, 340, 0, 0, 0,
	0, 493, 494, 343, 344, 0, 345, 346, 347, 0,
	0, 349, 350, 351, 0, 0, 352, 353, 495, 0,
	354, 0, 496, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 497, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 372, 373, 499, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 0, 390,
	391, 392, 393, 500, 394, 0, 395, 399, 400, 401,
	402, 403, 404, 405, 0, 412, 413, 406, 408, 409,
	410, 407, 411, 414, 415, 0, 416, 396, 397, 417,
	0, 418, 501, 419, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 429, 425, 426, 427, 502, 0, 432,
	433, 431, 679, 434, 435, 436, 437, 438, 274, 439,
	0, 440, 503, 504, 505, 506, 0, 447, 0, 441,
	442, 507, 443, 508, 0, 444, 445, 446, 0, 448,
	449, 0, 0, 450, 451, 452, 453, 454, 456, 0,
	457, 0, 455, 458, 459, 460, 509, 510, 511, 210,
	462, 461, 512, 0, 0, 0, 0, 463, 464, 513,
	465, 466, 467, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 468, 0, 0,
	0, 0, 222, 223, 224, 225, 469, 470, 226, 471,
	227, 228, 472, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 473, 474, 475, 0, 236, 476, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 477, 478, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 269, 479, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 480, 481, 0,
	2388, 0, 0, 0, 0, 0, 280, 281, 282, 482,
	283, 284, 0, 285, 0, 286, 0, 0, 0, 287,
	288, 0, 289, 483, 0, 484, 290, 0, 291, 292,
	293, 294, 485, 486, 487, 342, 0, 295, 296, 0,
	297, 298, 300, 0, 0, 0, 0, 299, 301, 308,
	0, 0, 302, 488, 304, 303, 305, 306, 307, 489,
	0, 490, 0, 309, 0, 491, 0, 310, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	320, 319, 0, 321, 492, 0, 322, 323, 0, 0,
	324, 325, 0, 0, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 337, 335, 0, 338, 339,
	341, 340, 0, 0, 0, 0, 493, 494, 343, 344,
	0, 345, 346, 347, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 495, 0, 354, 0, 496, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 0, 363, 364,
	497, 365, 498, 366, 3166, 367, 0, 368, 369, 370,
	371, 372, 373, 499, 374, 375, 0, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 0, 389, 0, 390, 391, 392, 393, 500, 394,
	0, 395, 399, 400, 401, 402, 403, 404, 405, 0,
	412, 413, 406, 408, 409, 410, 407, 411, 414, 415,
	0, 416, 396, 397, 417, 0, 418, 501, 419, 420,
	0, 430, 421, 422, 423, 398, 424, 428, 429, 425,
	426, 427, 502, 0, 432, 433, 431, 0, 434, 435,
	436, 437, 438, 274, 439, 0, 440, 503, 504, 505,
	506, 0, 447, 0, 441, 442, 507, 443, 508, 0,
	444, 445, 446, 0, 448, 449, 0, 0, 450, 451,
	452, 453, 454, 456, 0, 457, 0, 455, 458, 459,
	460, 509, 510, 511, 0, 462, 461, 512, 521, 0,
	210, 0, 463, 464, 513, 465, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 520, 221, 0, 0, 0, 0, 468, 0,
	0, 0, 0, 222, 223, 224, 225, 469, 470, 226,
	471, 227, 228, 472, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 473, 474, 475, 0, 236, 476,
	0, 0, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 0, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 477, 478, 0,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 264,
	265, 0, 266, 0, 267, 268, 0, 269, 479, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 480, 481,
	0, 0, 0, 0, 0, 0, 0, 280, 281, 282,
	482, 283, 284, 0, 285, 0, 286, 0, 0, 0,
	287, 288, 0, 289, 483, 0, 484, 290, 0, 291,
	292, 293, 294, 485, 486, 487, 342, 0, 295, 296,
	0, 297, 298, 300, 0, 0, 0, 0, 299, 301,
	308, 0, 0, 302, 488, 304, 303, 305, 306, 307,
	489, 0, 490, 0, 309, 0, 491, 0, 310, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 320, 319, 0, 321, 492, 0, 322, 323, 0,
	0, 324, 325, 0, 0, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 337, 335, 0, 338,
	339, 341, 340, 0, 0, 0, 0, 493, 494, 343,
	344, 0, 345, 346, 347, 0, 0, 349, 350, 351,
	0, 0, 352, 353, 495, 0, 354, 0, 496, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 0, 363,
	364, 497, 365, 498, 519, 0, 367, 0, 368, 369,
	370, 371, 372, 373, 499, 374, 375, 0, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 0, 389, 0, 390, 391, 392, 393, 500,
	394, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	0, 412, 413, 406, 408, 409, 410, 407, 411, 414,
	415, 0, 416, 396, 397, 417, 0, 418, 501, 419,
	420, 0, 430, 421, 422, 423, 398, 424, 428, 429,
	425, 426, 427, 502, 0, 432, 433, 431, 0, 434,
	435, 436, 437, 438, 274, 439, 0, 440, 503, 504,
	505, 506, 0, 447, 0, 441, 442, 507, 443, 508,
	0, 444, 445, 446, 0, 448, 449, 0, 0, 450,
	451, 452, 453, 454, 456, 0, 457, 0, 455, 458,
	459, 460, 509, 510, 511, 210, 462, 461, 512, 0,
	0, 0, 0, 463, 464, 513, 465, 466, 467, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 468, 0, 2176, 0, 0, 222, 223,
	224, 225, 469, 470, 226, 471, 227, 228, 472, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 473,
	474, 475, 0, 236, 476, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 477, 478, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 269, 479, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 480, 481, 0, 0, 0, 0, 0,
	0, 0, 280, 281, 282, 482, 283, 284, 0, 285,
	0, 286, 0, 0, 0, 287, 288, 0, 289, 483,
	0, 484, 290, 0, 291, 292, 293, 294, 485, 486,
	487, 342, 0, 295, 296, 0, 297, 298, 300, 0,
	0, 0, 0, 299, 301, 308, 0, 0, 302, 488,
	304, 303, 305, 306, 307, 489, 0, 490, 0, 309,
	0, 491, 0, 310, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 320, 319, 0, 321,
	492, 0, 322, 323, 0, 0, 324, 325, 0, 0,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 337, 335, 0, 338, 339, 341, 340, 0, 0,
	0, 0, 493, 494, 343, 344, 0, 345, 346, 347,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 495,
	0, 354, 0, 496, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 0, 363, 364, 497, 365, 498, 366,
	0, 367, 0, 368, 369, 370, 371, 372, 373, 499,
	374, 375, 0, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 0, 389, 0,
	390, 391, 392, 393, 500, 394, 0, 395, 399, 400,
	401, 402, 403, 404, 405, 0, 412, 413, 406, 408,
	409, 410, 407, 411, 414, 415, 0, 416, 396, 397,
	417, 0, 418, 501, 419, 420, 0, 430, 421, 422,
	423, 398, 424, 428, 429, 425, 426, 427, 502, 0,
	432, 433, 431, 0, 434, 435, 436, 437, 438, 274,
	439, 0, 440, 503, 504, 505, 506, 0, 447, 0,
	441, 442, 507, 443, 508, 0, 444, 445, 446, 0,
	448, 449, 0, 0, 450, 451, 452, 453, 454, 456,
	0, 457, 0, 455, 458, 459, 460, 509, 510, 511,
	0, 462, 461, 512, 210, 2375, 0, 0, 463, 464,
	513, 465, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 468, 0, 0, 0, 0, 222, 223, 224,
	225, 469, 470, 226, 471, 227, 228, 472, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 473, 474,
	475, 0, 236, 476, 0, 0, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 0, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 477, 478, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 269, 479, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 480, 481, 0, 0, 0, 0, 0, 0,
	0, 280, 281, 282, 482, 283, 284, 0, 285, 0,
	286, 0, 0, 0, 287, 288, 0, 289, 483, 0,
	484, 290, 0, 291, 292, 293, 294, 485, 486, 487,
	342, 0, 295, 296, 0, 297, 298, 300, 0, 0,
	0, 0, 299, 301, 308, 0, 0, 302, 488, 304,
	303, 305, 306, 307, 489, 0, 490, 0, 309, 0,
	491, 0, 310, 311, 312, 0, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 492,
	0, 322, 323, 0, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 332, 334, 336,
	337, 335, 0, 338, 339, 341, 340, 0, 0, 0,
	0, 493, 494, 343, 344, 0, 345, 346, 347, 0,
	0, 349, 350, 351, 0, 0, 352, 353, 495, 0,
	354, 0, 496, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 497, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 372, 373, 499, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 0, 390,
	391, 392, 393, 500, 394, 0, 395, 399, 400, 401,
	402, 403, 404, 405, 0, 412, 413, 406, 408, 409,
	410, 407, 411, 414, 415, 0, 416, 396, 397, 417,
	0, 418, 501, 419, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 429, 425, 426, 427, 502, 0, 432,
	433, 431, 0, 434, 435, 436, 437, 438, 274, 439,
	0, 440, 503, 504, 505, 506, 0, 447, 0, 441,
	442, 507, 443, 508, 0, 444, 445, 446, 0, 448,
	449, 0, 0, 450, 451, 452, 453, 454, 456, 0,
	457, 0, 455, 458, 459, 460, 509, 510, 511, 210,
	462, 461, 512, 0, 0, 0, 0, 463, 464, 513,
	465, 466, 467, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 468, 0, 0,
	0, 0, 222, 223, 224, 225, 469, 470, 226, 471,
	227, 228, 472, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 473, 474, 475, 0, 236, 476, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 477, 478, 2966, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 269, 479, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 480, 481, 0,
	0, 0, 0, 0, 0, 0, 280, 281, 282, 482,
	283, 284, 0, 285, 0, 286, 0, 0, 0, 287,
	288, 0, 289, 483, 0, 484, 290, 0, 291, 292,
	293, 294, 485, 486, 487, 342, 0, 295, 296, 0,
	297, 298, 300, 0, 0, 0, 0, 299, 301, 308,
	0, 0, 302, 488, 304, 303, 305, 306, 307, 489,
	0, 490, 0, 309, 0, 491, 0, 310, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	320, 319, 0, 321, 492, 0, 322, 323, 0, 0,
	324, 325, 0, 0, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 337, 335, 0, 338, 339,
	341, 340, 0, 0, 0, 0, 493, 494, 343, 344,
	0, 345, 346, 347, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 495, 0, 354, 0, 496, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 0, 363, 364,
	497, 365, 498, 366, 0, 367, 0, 368, 369, 370,
	371, 372, 373, 499, 374, 375, 0, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 0, 389, 0, 390, 391, 392, 393, 500, 394,
	0, 395, 399, 400, 401, 402, 403, 404, 405, 0,
	412, 413, 406, 408, 409, 410, 407, 411, 414, 415,
	0, 416, 396, 397, 417, 0, 418, 501, 419, 420,
	0, 430, 421, 422, 423, 398, 424, 428, 429, 425,
	426, 427, 502, 0, 432, 433, 431, 0, 434, 435,
	436, 437, 438, 274, 439, 0, 440, 503, 504, 505,
	506, 0, 447, 0, 441, 442, 507, 443, 508, 0,
	444, 445, 446, 0, 448, 449, 0, 0, 450, 451,
	452, 453, 454, 456, 0, 457, 0, 455, 458, 459,
	460, 509, 510, 511, 0, 462, 461, 512, 210, 2375,
	0, 0, 463, 464, 513, 465, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 0,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 0, 287, 288,
	0, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 485, 486, 487, 342, 0, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 0, 299, 301, 308, 0,
	0, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 0, 491, 0, 310, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 0, 322, 323, 0, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 0, 338, 339, 341,
	340, 0, 0, 0, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 2372, 0, 0,
	352, 353, 495, 0, 354, 0, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 0, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 0, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 210, 462, 461, 512, 0, 0, 0,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	216, 217, 218, 219, 220, 1884, 221, 0, 0, 0,
	0, 468, 0, 0, 0, 0, 222, 223, 224, 225,
	469, 470, 226, 471, 227, 228, 472, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 473, 474, 475,
	0, 236, 476, 0, 0, 0, 237, 238, 239, 240,
	241, 242, 0, 244, 245, 246, 243, 0, 247, 0,
	248, 249, 250, 0, 0, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 253, 254, 255, 256, 257, 258,
	477, 478, 0, 259, 0, 261, 260, 0, 262, 0,
	0, 263, 264, 265, 0, 266, 0, 267, 268, 0,
	269, 479, 270, 271, 273, 275, 272, 276, 277, 278,
	279, 480, 481, 0, 0, 0, 0, 0, 0, 0,
	280, 281, 282, 482, 283, 284, 0, 285, 0, 286,
	0, 0, 0, 287, 288, 0, 289, 483, 0, 484,
	290, 0, 291, 292, 293, 294, 485, 486, 487, 342,
	0, 295, 296, 0, 297, 298, 300, 0, 0, 0,
	0, 299, 301, 308, 0, 0, 302, 488, 304, 303,
	305, 306, 307, 489, 0, 490, 0, 309, 0, 491,
	0, 310, 311, 312, 0, 313, 314, 0, 0, 315,
	316, 317, 318, 0, 320, 319, 0, 321, 492, 0,
	322, 323, 0, 0, 324, 325, 0, 0, 326, 327,
	0, 328, 329, 331, 333, 330, 332, 334, 336, 337,
	335, 0, 338, 339, 341, 340, 0, 0, 0, 0,
	493, 494, 343, 344, 0, 345, 346, 347, 0, 0,
	349, 350, 351, 0, 0, 352, 353, 495, 0, 354,
	0, 496, 355, 348, 356, 357, 358, 359, 360, 361,
	362, 0, 363, 364, 497, 365, 498, 366, 0, 367,
	0, 368, 369, 370, 371, 372, 373, 499, 374, 375,
	0, 376, 377, 378, 379, 380, 0, 382, 383, 384,
	381, 385, 386, 387, 388, 0, 389, 0, 390, 391,
	392, 393, 500, 394, 0, 395, 399, 400, 401, 402,
	403, 404, 405, 0, 412, 413, 406, 408, 409, 410,
	407, 411, 414, 415, 0, 416, 396, 397, 417, 0,
	418, 501, 419, 420, 0, 430, 421, 422, 423, 398,
	424, 428, 429, 425, 426, 427, 502, 0, 432, 433,
	431, 0, 434, 435, 436, 437, 438, 274, 439, 0,
	440, 503, 504, 505, 506, 0, 447, 0, 441, 442,
	507, 443, 508, 0, 444, 445, 446, 0, 448, 449,
	0, 0, 450, 451, 452, 453, 454, 456, 0, 457,
	0, 455, 458, 459, 460, 509, 510, 511, 0, 462,
	461, 512, 1875, 0, 210, 0, 463, 464, 513, 465,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 468, 0, 0, 0, 0, 222, 223, 224,
	225, 469, 470, 226, 471, 227, 228, 472, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 473, 474,
	475, 0, 236, 476, 0, 0, 0, 237, 238, 239,
	240, 241, 242, 0, 244, 245, 246, 243, 0, 247,
	0, 248, 249, 250, 0, 0, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 253, 254, 255, 256, 257,
	258, 477, 478, 0, 259, 0, 261, 260, 0, 262,
	0, 0, 263, 264, 265, 0, 266, 0, 267, 268,
	0, 269, 479, 270, 271, 273, 275, 272, 276, 277,
	278, 279, 480, 481, 0, 0, 0, 0, 0, 0,
	0, 280, 281, 282, 482, 283, 284, 0, 285, 0,
	286, 0, 0, 0, 287, 288, 0, 289, 483, 0,
	484, 290, 0, 291, 292, 293, 294, 485, 486, 487,
	342, 0, 295, 296, 0, 297, 298, 300, 0, 0,
	0, 0, 299, 301, 308, 0, 0, 302, 488, 304,
	303, 305, 306, 307, 489, 0, 490, 0, 309, 0,
	491, 0, 310, 311, 312, 0, 313, 314, 0, 0,
	315, 316, 317, 318, 0, 320, 319, 0, 321, 492,
	0, 322, 323, 0, 0, 324, 325, 0, 0, 326,
	327, 0, 328, 329, 331, 333, 330, 332, 334, 336,
	337, 335, 0, 338, 339, 341, 340, 0, 0, 0,
	0, 493, 494, 343, 344, 0, 345, 346, 347, 0,
	0, 349, 350, 351, 0, 0, 352, 353, 495, 0,
	354, 0, 496, 355, 348, 356, 357, 358, 359, 360,
	361, 362, 0, 363, 364, 497, 365, 498, 366, 0,
	367, 0, 368, 369, 370, 371, 372, 373, 499, 374,
	375, 0, 376, 377, 378, 379, 380, 0, 382, 383,
	384, 381, 385, 386, 387, 388, 0, 389, 0, 390,
	391, 392, 393, 500, 394, 0, 395, 399, 400, 401,
	402, 403, 404, 405, 0, 412, 413, 406, 408, 409,
	410, 407, 411, 414, 415, 0, 416, 396, 397, 417,
	0, 418, 501, 419, 420, 0, 430, 421, 422, 423,
	398, 424, 428, 429, 425, 426, 427, 502, 0, 432,
	433, 431, 0, 434, 435, 436, 437, 438, 274, 439,
	0, 440, 503, 504, 505, 506, 0, 447, 0, 441,
	442, 507, 443, 508, 0, 444, 445, 446, 0, 448,
	449, 0, 0, 450, 451, 452, 453, 454, 456, 0,
	457, 0, 455, 458, 459, 460, 509, 510, 511, 0,
	462, 461, 512, 562, 0, 210, 0, 463, 464, 513,
	465, 466, 467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 468, 0, 0, 0, 0, 222, 223,
	224, 225, 469, 470, 226, 471, 227, 228, 472, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 473,
	474, 1033, 0, 236, 476, 0, 0, 0, 237, 238,
	239, 240, 241, 242, 0, 244, 245, 246, 243, 0,
	247, 0, 248, 249, 250, 0, 0, 251, 252, 0,
	0, 0, 0, 0, 0, 0, 253, 254, 255, 256,
	257, 258, 477, 478, 0, 259, 0, 261, 260, 0,
	262, 0, 0, 263, 264, 265, 0, 266, 0, 267,
	268, 0, 269, 479, 270, 271, 273, 275, 272, 276,
	277, 278, 279, 480, 481, 0, 0, 0, 0, 0,
	0, 0, 280, 281, 282, 482, 283, 284, 0, 285,
	0, 286, 0, 0, 0, 287, 288, 0, 289, 483,
	0, 484, 290, 0, 291, 292, 293, 294, 485, 486,
	487, 342, 0, 295, 296, 0, 297, 298, 300, 0,
	0, 0, 0, 299, 301, 308, 0, 0, 302, 488,
	304, 303, 305, 306, 307, 489, 0, 490, 0, 309,
	0, 491, 0, 310, 311, 312, 0, 313, 314, 0,
	0, 315, 316, 317, 318, 0, 320, 319, 0, 321,
	492, 0, 322, 323, 0, 0, 324, 325, 0, 0,
	326, 327, 0, 328, 329, 331, 333, 330, 332, 334,
	336, 337, 563, 0, 338, 339, 341, 340, 0, 0,
	0, 0, 493, 494, 343, 344, 0, 345, 346, 347,
	0, 0, 349, 350, 351, 0, 0, 352, 353, 495,
	0, 354, 0, 496, 355, 348, 356, 357, 358, 359,
	360, 361, 362, 0, 363, 364, 497, 365, 498, 366,
	0, 367, 0, 368, 369, 370, 371, 372, 373, 499,
	374, 375, 0, 376, 377, 378, 379, 380, 0, 382,
	383, 384, 381, 385, 386, 387, 388, 0, 389, 0,
	390, 391, 392, 393, 500, 394, 0, 395, 399, 400,
	559, 402, 403, 404, 405, 0, 412, 413, 406, 408,
	409, 410, 407, 411, 414, 415, 0, 416, 396, 397,
	417, 0, 418, 501, 419, 420, 0, 430, 421, 422,
	423, 398, 424, 428, 429, 425, 426, 427, 502, 0,
	432, 433, 431, 0, 434, 435, 436, 437, 438, 274,
	439, 0, 440, 558, 504, 505, 506, 0, 447, 0,
	441, 442, 507, 443, 508, 0, 444, 445, 446, 0,
	448, 449, 0, 0, 450, 451, 452, 453, 454, 456,
	0, 457, 0, 455, 458, 459, 460, 509, 510, 511,
	0, 462, 461, 512, 1823, 0, 210, 0, 463, 464,
	513, 465, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 468, 0, 0, 0, 0, 222,
	223, 224, 225, 469, 470, 226, 471, 227, 228, 472,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	473, 474, 475, 0, 236, 476, 0, 0, 0, 237,
	238, 239, 240, 241, 242, 0, 244, 245, 246, 243,
	0, 247, 0, 248, 249, 250, 0, 0, 251, 252,
	0, 0, 0, 0, 0, 0, 0, 253, 254, 255,
	256, 257, 258, 477, 478, 0, 259, 0, 261, 260,
	0, 262, 0, 0, 263, 264, 265, 0, 266, 0,
	267, 268, 0, 269, 479, 270, 271, 273, 275, 272,
	276, 277, 278, 279, 480, 481, 0, 0, 0, 0,
	0, 0, 0, 280, 281, 282, 482, 283, 284, 0,
	285, 0, 286, 0, 0, 0, 287, 288, 0, 289,
	483, 0, 484, 290, 0, 291, 292, 293, 294, 1822,
	486, 487, 342, 0, 295, 296, 0, 297, 298, 300,
	0, 0, 0, 0, 299, 301, 308, 0, 0, 302,
	488, 304, 303, 305, 306, 307, 489, 0, 490, 0,
	309, 0, 491, 0, 310, 311, 312, 0, 313, 314,
	0, 0, 315, 316, 317, 318, 0, 320, 319, 0,
	321, 492, 0, 322, 323, 0, 0, 324, 325, 0,
	0, 326, 327, 0, 328, 329, 331, 333, 330, 332,
	334, 336, 337, 335, 0, 338, 339, 341, 340, 0,
	0, 0, 0, 493, 494, 343, 344, 0, 345, 346,
	347, 0, 0, 349, 350, 351, 0, 0, 352, 353,
	495, 0, 354, 0, 496, 355, 348, 356, 357, 358,
	359, 360, 361, 362, 0, 363, 364, 497, 365, 498,
	366, 0, 367, 0, 368, 369, 370, 371, 372, 373,
	499, 374, 375, 0, 376, 377, 378, 379, 380, 0,
	382, 383, 384, 381, 385, 386, 387, 388, 0, 389,
	0, 390, 391, 392, 393, 500, 394, 0, 395, 399,
	400, 401, 402, 403, 404, 405, 0, 412, 413, 406,
	408, 409, 410, 407, 411, 414, 415, 0, 416, 396,
	397, 417, 0, 418, 501, 419, 420, 0, 430, 421,
	422, 423, 398, 424, 428, 429, 425, 426, 427, 502,
	0, 432, 433, 431, 0, 434, 435, 436, 437, 438,
	274, 439, 0, 440, 503, 504, 505, 506, 0, 447,
	0, 441, 442, 507, 443, 508, 0, 444, 445, 446,
	0, 448, 449, 0, 0, 450, 451, 452, 453, 454,
	456, 0, 457, 0, 455, 458, 459, 460, 509, 510,
	511, 0, 462, 461, 512, 562, 0, 210, 0, 463,
	464, 513, 465, 466, 467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 552, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 563, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 559, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 1312, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 558, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 0, 462, 461, 512, 1297, 0, 210, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 236, 476, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 247, 0, 248, 249, 250, 0, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 0,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 0, 287, 288,
	0, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 1296, 486, 487, 342, 0, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 0, 299, 301, 308, 0,
	0, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 0, 491, 0, 310, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 0, 322, 323, 0, 0, 324,
	325, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 335, 0, 338, 339, 341,
	340, 0, 0, 0, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 0, 354, 0, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 0, 390, 391, 392, 393, 500, 394, 0,
	395, 399, 400, 401, 402, 403, 404, 405, 0, 412,
	413, 406, 408, 409, 410, 407, 411, 414, 415, 0,
	416, 396, 397, 417, 0, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 503, 504, 505, 506,
	0, 447, 0, 441, 442, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 0, 462, 461, 512, 1246, 0, 210,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 468, 0, 0,
	0, 0, 222, 223, 224, 225, 469, 470, 226, 471,
	227, 228, 472, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 473, 474, 475, 0, 236, 476, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 477, 478, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 269, 479, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 480, 481, 0,
	0, 0, 0, 0, 0, 0, 280, 281, 282, 482,
	283, 284, 0, 285, 0, 286, 0, 0, 0, 287,
	288, 0, 289, 483, 0, 484, 290, 0, 291, 292,
	293, 294, 1245, 486, 487, 342, 0, 295, 296, 0,
	297, 298, 300, 0, 0, 0, 0, 299, 301, 308,
	0, 0, 302, 488, 304, 303, 305, 306, 307, 489,
	0, 490, 0, 309, 0, 491, 0, 310, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	320, 319, 0, 321, 492, 0, 322, 323, 0, 0,
	324, 325, 0, 0, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 337, 335, 0, 338, 339,
	341, 340, 0, 0, 0, 0, 493, 494, 343, 344,
	0, 345, 346, 347, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 495, 0, 354, 0, 496, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 0, 363, 364,
	497, 365, 498, 366, 0, 367, 0, 368, 369, 370,
	371, 372, 373, 499, 374, 375, 0, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 0, 389, 0, 390, 391, 392, 393, 500, 394,
	0, 395, 399, 400, 401, 402, 403, 404, 405, 0,
	412, 413, 406, 408, 409, 410, 407, 411, 414, 415,
	0, 416, 396, 397, 417, 0, 418, 501, 419, 420,
	0, 430, 421, 422, 423, 398, 424, 428, 429, 425,
	426, 427, 502, 0, 432, 433, 431, 0, 434, 435,
	436, 437, 438, 274, 439, 0, 440, 503, 504, 505,
	506, 0, 447, 0, 441, 442, 507, 443, 508, 0,
	444, 445, 446, 0, 448, 449, 0, 0, 450, 451,
	452, 453, 454, 456, 0, 457, 0, 455, 458, 459,
	460, 509, 510, 511, 0, 462, 461, 512, 1230, 0,
	210, 0, 463, 464, 513, 465, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 468, 0,
	0, 0, 0, 222, 223, 224, 225, 469, 470, 226,
	471, 227, 228, 472, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 473, 474, 475, 0, 236, 476,
	0, 0, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 0, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 477, 478, 0,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 264,
	265, 0, 266, 0, 267, 268, 0, 269, 479, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 480, 481,
	0, 0, 0, 0, 0, 0, 0, 280, 281, 282,
	482, 283, 284, 0, 285, 0, 286, 0, 0, 0,
	287, 288, 0, 289, 483, 0, 484, 290, 0, 291,
	292, 293, 294, 485, 486, 487, 342, 0, 295, 296,
	0, 297, 298, 300, 0, 0, 0, 0, 299, 301,
	308, 0, 0, 302, 488, 304, 303, 305, 306, 307,
	489, 0, 490, 0, 309, 0, 491, 0, 310, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 320, 319, 0, 321, 492, 0, 322, 323, 0,
	0, 324, 325, 0, 0, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 337, 335, 0, 338,
	339, 341, 340, 0, 0, 0, 0, 493, 494, 343,
	344, 0, 345, 346, 347, 0, 0, 349, 350, 351,
	0, 0, 352, 353, 495, 0, 354, 0, 496, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 0, 363,
	364, 497, 365, 498, 366, 0, 367, 0, 368, 369,
	370, 371, 372, 373, 499, 374, 375, 0, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 0, 389, 0, 390, 391, 392, 393, 500,
	394, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	0, 412, 413, 406, 408, 409, 410, 407, 411, 414,
	415, 0, 416, 396, 397, 417, 0, 418, 501, 419,
	420, 0, 430, 421, 422, 423, 398, 424, 428, 429,
	425, 426, 427, 502, 0, 432, 433, 431, 0, 434,
	435, 436, 437, 438, 274, 439, 0, 440, 503, 504,
	505, 506, 0, 447, 0, 441, 442, 507, 443, 508,
	0, 444, 445, 446, 0, 448, 449, 0, 0, 450,
	451, 452, 453, 454, 456, 0, 457, 0, 455, 458,
	459, 460, 509, 510, 511, 0, 462, 461, 512, 1167,
	0, 210, 0, 463, 464, 513, 465, 466, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 468,
	0, 0, 0, 0, 222, 223, 224, 225, 469, 470,
	226, 471, 227, 228, 472, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 473, 474, 475, 0, 236,
	476, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 477, 478,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 269, 479,
	270, 271, 273, 275, 272, 276, 277, 278, 279, 480,
	481, 0, 0, 0, 0, 0, 0, 0, 280, 281,
	282, 482, 283, 284, 0, 285, 0, 286, 0, 0,
	0, 287, 288, 0, 289, 483, 0, 484, 290, 0,
	291, 292, 293, 294, 485, 486, 487, 342, 0, 295,
	296, 0, 297, 298, 300, 0, 0, 0, 0, 299,
	301, 308, 0, 0, 302, 488, 304, 303, 305, 306,
	307, 489, 0, 490, 0, 309, 0, 491, 0, 310,
	311, 312, 0, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 320, 319, 0, 321, 492, 0, 322, 323,
	0, 0, 324, 325, 0, 0, 326, 327, 0, 328,
	329, 331, 333, 330, 332, 334, 336, 337, 335, 0,
	338, 339, 341, 340, 0, 0, 0, 0, 493, 494,
	343, 344, 0, 345, 346, 347, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 495, 0, 354, 0, 496,
	355, 348, 356, 357, 358, 359, 360, 361, 362, 0,
	363, 364, 497, 365, 498, 366, 0, 367, 0, 368,
	369, 370, 371, 372, 373, 499, 374, 375, 0, 376,
	377, 378, 379, 380, 0, 382, 383, 384, 381, 385,
	386, 387, 388, 0, 389, 0, 390, 391, 392, 393,
	500, 394, 0, 395, 399, 400, 401, 402, 403, 404,
	405, 0, 412, 413, 406, 408, 409, 410, 407, 411,
	414, 415, 0, 416, 396, 397, 417, 0, 418, 501,
	419, 420, 0, 430, 421, 422, 423, 398, 424, 428,
	429, 425, 426, 427, 502, 0, 432, 433, 431, 0,
	434, 435, 436, 437, 438, 274, 439, 0, 440, 503,
	504, 505, 506, 0, 447, 0, 441, 442, 507, 443,
	508, 0, 444, 445, 446, 0, 448, 449, 0, 0,
	450, 451, 452, 453, 454, 456, 0, 457, 0, 455,
	458, 459, 460, 509, 510, 511, 0, 462, 461, 512,
	562, 0, 210, 0, 463, 464, 513, 465, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 1033, 0,
	236, 476, 0, 0, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 0,
	0, 0, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 485, 486, 487, 342, 0,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 0,
	299, 301, 308, 0, 0, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 0, 491, 0,
	310, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 0, 322,
	323, 0, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 563,
	0, 338, 339, 341, 340, 0, 0, 0, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 0, 354, 0,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 0, 390, 391, 392,
	393, 500, 394, 0, 395, 399, 400, 559, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 0, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	558, 504, 505, 506, 0, 447, 0, 441, 1034, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 210, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 0, 0, 0, 216, 217, 218, 219, 220, 1017,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 0, 462, 461, 512, 562, 0, 210, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 468, 0, 0, 0,
	0, 222, 223, 224, 225, 469, 470, 226, 471, 227,
	228, 472, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 473, 474, 475, 0, 552, 476, 0, 0,
	0, 237, 238, 239, 240, 241, 242, 0, 244, 245,
	246, 243, 0, 550, 0, 248, 249, 250, 0, 0,
	251, 252, 0, 0, 0, 0, 0, 0, 0, 253,
	254, 255, 256, 257, 258, 477, 478, 0, 259, 0,
	261, 260, 0, 262, 0, 0, 263, 264, 265, 0,
	266, 0, 267, 268, 0, 269, 479, 270, 271, 273,
	275, 272, 276, 277, 278, 279, 480, 481, 0, 0,
	0, 0, 0, 0, 0, 280, 281, 282, 482, 283,
	284, 0, 285, 0, 286, 0, 0, 0, 287, 288,
	0, 289, 483, 0, 484, 290, 0, 291, 292, 293,
	294, 485, 486, 487, 342, 0, 295, 296, 0, 297,
	298, 300, 0, 0, 0, 0, 299, 301, 308, 0,
	0, 302, 488, 304, 303, 305, 306, 307, 489, 0,
	490, 0, 309, 0, 491, 0, 310, 311, 312, 0,
	313, 314, 0, 0, 315, 316, 317, 318, 0, 320,
	319, 0, 321, 492, 0, 322, 323, 0, 0, 324,
	551, 0, 0, 326, 327, 0, 328, 329, 331, 333,
	330, 332, 334, 336, 337, 563, 0, 338, 339, 341,
	340, 0, 0, 0, 0, 493, 494, 343, 344, 0,
	345, 346, 347, 0, 0, 349, 350, 351, 0, 0,
	352, 353, 495, 0, 354, 0, 496, 355, 348, 356,
	357, 358, 359, 360, 361, 362, 0, 363, 364, 497,
	365, 498, 366, 0, 367, 0, 368, 369, 370, 371,
	372, 373, 499, 374, 375, 0, 376, 377, 378, 379,
	380, 0, 382, 383, 384, 381, 385, 386, 387, 388,
	0, 389, 0, 390, 391, 392, 393, 553, 394, 0,
	395, 399, 400, 559, 402, 403, 404, 405, 0, 412,
	413, 406, 408, 409, 410, 407, 411, 554, 415, 0,
	416, 396, 397, 417, 0, 418, 501, 419, 420, 0,
	430, 421, 422, 423, 398, 424, 428, 429, 425, 426,
	427, 502, 0, 432, 433, 431, 0, 434, 435, 436,
	437, 438, 274, 439, 0, 440, 558, 504, 505, 506,
	0, 447, 0, 441, 556, 507, 443, 508, 0, 444,
	445, 446, 0, 448, 449, 0, 0, 450, 451, 452,
	453, 454, 456, 0, 457, 0, 455, 458, 459, 460,
	509, 510, 511, 0, 462, 461, 512, 546, 0, 210,
	0, 463, 464, 513, 465, 466, 467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 468, 0, 0,
	0, 0, 222, 223, 224, 225, 469, 470, 226, 471,
	227, 228, 472, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 473, 474, 475, 0, 236, 476, 0,
	0, 0, 237, 238, 239, 240, 241, 242, 0, 244,
	245, 246, 243, 0, 247, 0, 248, 249, 250, 0,
	0, 251, 252, 0, 0, 0, 0, 0, 0, 0,
	253, 254, 255, 256, 257, 258, 477, 478, 0, 259,
	0, 261, 260, 0, 262, 0, 0, 263, 264, 265,
	0, 266, 0, 267, 268, 0, 269, 479, 270, 271,
	273, 275, 272, 276, 277, 278, 279, 480, 481, 0,
	0, 0, 0, 0, 0, 0, 280, 281, 282, 482,
	283, 284, 0, 285, 0, 286, 0, 0, 0, 287,
	288, 0, 289, 483, 0, 484, 290, 0, 291, 292,
	293, 294, 485, 486, 487, 342, 0, 295, 296, 0,
	297, 298, 300, 0, 0, 0, 0, 299, 301, 308,
	0, 0, 302, 488, 304, 303, 305, 306, 307, 489,
	0, 490, 0, 309, 0, 491, 0, 310, 311, 312,
	0, 313, 314, 0, 0, 315, 316, 317, 318, 0,
	320, 319, 0, 321, 492, 0, 322, 323, 0, 0,
	324, 325, 0, 0, 326, 327, 0, 328, 329, 331,
	333, 330, 332, 334, 336, 337, 335, 0, 338, 339,
	341, 340, 0, 0, 0, 0, 493, 494, 343, 344,
	0, 345, 346, 347, 0, 0, 349, 350, 351, 0,
	0, 352, 353, 495, 0, 354, 0, 496, 355, 348,
	356, 357, 358, 359, 360, 361, 362, 0, 363, 364,
	497, 365, 498, 366, 0, 367, 0, 368, 369, 370,
	371, 372, 373, 499, 374, 375, 0, 376, 377, 378,
	379, 380, 0, 382, 383, 384, 381, 385, 386, 387,
	388, 0, 389, 0, 390, 391, 392, 393, 500, 394,
	0, 395, 547, 400, 401, 402, 403, 404, 405, 0,
	412, 413, 406, 408, 409, 410, 407, 411, 414, 415,
	0, 416, 396, 397, 417, 0, 418, 501, 419, 420,
	0, 430, 421, 422, 423, 398, 424, 428, 429, 425,
	426, 427, 502, 0, 432, 433, 431, 0, 434, 435,
	436, 437, 438, 274, 439, 0, 440, 503, 504, 505,
	506, 0, 447, 0, 441, 442, 507, 443, 508, 0,
	444, 445, 446, 0, 448, 449, 0, 0, 450, 451,
	452, 453, 454, 456, 0, 457, 0, 455, 458, 459,
	460, 509, 510, 511, 0, 462, 461, 512, 544, 0,
	210, 0, 463, 464, 513, 465, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 468, 0,
	0, 0, 0, 222, 223, 224, 225, 469, 470, 226,
	471, 227, 228, 472, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 473, 474, 475, 0, 236, 476,
	0, 0, 0, 237, 238, 239, 240, 241, 242, 0,
	244, 245, 246, 243, 0, 247, 0, 248, 249, 250,
	0, 0, 251, 252, 0, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 257, 258, 477, 478, 0,
	259, 0, 261, 260, 0, 262, 0, 0, 263, 264,
	265, 0, 266, 0, 267, 268, 0, 269, 479, 270,
	271, 273, 275, 272, 276, 277, 278, 279, 480, 481,
	0, 0, 0, 0, 0, 0, 0, 280, 281, 282,
	482, 283, 284, 0, 285, 0, 286, 0, 0, 0,
	287, 288, 0, 289, 483, 0, 484, 290, 0, 291,
	292, 293, 294, 485, 486, 487, 342, 0, 295, 296,
	0, 297, 298, 300, 0, 0, 0, 0, 299, 301,
	308, 0, 0, 302, 488, 304, 303, 305, 306, 307,
	489, 0, 490, 0, 309, 0, 491, 0, 310, 311,
	312, 0, 313, 314, 0, 0, 315, 316, 317, 318,
	0, 320, 319, 0, 321, 492, 0, 322, 323, 0,
	0, 324, 325, 0, 0, 326, 327, 0, 328, 329,
	331, 333, 330, 332, 334, 336, 337, 335, 0, 338,
	339, 341, 340, 0, 0, 0, 0, 493, 494, 343,
	344, 0, 345, 346, 347, 0, 0, 349, 350, 351,
	0, 0, 352, 353, 495, 0, 354, 0, 496, 355,
	348, 356, 357, 358, 359, 360, 361, 362, 0, 363,
	364, 497, 365, 498, 366, 0, 367, 0, 368, 369,
	370, 371, 372, 373, 499, 374, 375, 0, 376, 377,
	378, 379, 380, 0, 382, 383, 384, 381, 385, 386,
	387, 388, 0, 389, 0, 390, 391, 392, 393, 500,
	394, 0, 395, 399, 400, 401, 402, 403, 404, 405,
	0, 412, 413, 406, 408, 409, 410, 407, 411, 414,
	415, 0, 416, 396, 397, 417, 0, 418, 501, 419,
	420, 0, 430, 421, 422, 423, 398, 424, 428, 429,
	425, 426, 427, 502, 0, 432, 433, 431, 0, 434,
	435, 436, 437, 438, 274, 439, 0, 440, 503, 504,
	505, 506, 0, 447, 0, 441, 442, 507, 443, 508,
	0, 444, 445, 446, 0, 448, 449, 0, 0, 450,
	451, 452, 453, 454, 456, 0, 457, 0, 455, 458,
	459, 460, 509, 510, 511, 0, 462, 461, 512, 538,
	0, 210, 0, 463, 464, 513, 465, 466, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 468,
	0, 0, 0, 0, 222, 223, 224, 225, 469, 470,
	226, 471, 227, 228, 472, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 473, 474, 475, 0, 236,
	476, 0, 0, 0, 237, 238, 239, 240, 241, 242,
	0, 244, 245, 246, 243, 0, 247, 0, 248, 249,
	250, 0, 0, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 253, 254, 255, 256, 257, 258, 477, 478,
	0, 259, 0, 261, 260, 0, 262, 0, 0, 263,
	264, 265, 0, 266, 0, 267, 268, 0, 269, 479,
	270, 271, 273, 275, 272, 276, 277, 278, 279, 480,
	481, 0, 0, 0, 0, 0, 0, 0, 280, 281,
	282, 482, 283, 284, 0, 285, 0, 286, 0, 0,
	0, 287, 288, 0, 289, 483, 0, 484, 290, 0,
	291, 292, 293, 294, 485, 486, 487, 342, 0, 295,
	296, 0, 297, 298, 300, 0, 0, 0, 0, 299,
	301, 308, 0, 0, 302, 488, 304, 303, 305, 306,
	307, 489, 0, 490, 0, 309, 0, 491, 0, 310,
	311, 312, 0, 313, 314, 0, 0, 315, 316, 317,
	318, 0, 320, 319, 0, 321, 492, 0, 322, 323,
	0, 0, 324, 325, 0, 0, 326, 327, 0, 328,
	329, 331, 333, 330, 332, 334, 336, 337, 335, 0,
	338, 339, 341, 340, 0, 0, 0, 0, 493, 494,
	343, 344, 0, 345, 346, 347, 0, 0, 349, 350,
	351, 0, 0, 352, 353, 495, 0, 354, 0, 496,
	355, 348, 356, 357, 358, 359, 360, 361, 362, 0,
	363, 364, 497, 365, 498, 366, 0, 367, 0, 368,
	369, 370, 371, 372, 373, 499, 374, 375, 0, 376,
	377, 378, 379, 380, 0, 382, 383, 384, 381, 385,
	386, 387, 388, 0, 389, 0, 390, 391, 392, 393,
	500, 394, 0, 395, 399, 400, 401, 402, 403, 404,
	405, 0, 412, 413, 406, 408, 409, 410, 407, 411,
	414, 415, 0, 416, 396, 397, 417, 0, 418, 501,
	419, 420, 0, 430, 421, 422, 423, 398, 424, 428,
	429, 425, 426, 427, 502, 0, 432, 433, 431, 0,
	434, 435, 436, 437, 438, 274, 439, 0, 440, 503,
	504, 505, 506, 0, 447, 0, 441, 442, 507, 443,
	508, 0, 444, 445, 446, 0, 448, 449, 0, 0,
	450, 451, 452, 453, 454, 456, 0, 457, 0, 455,
	458, 459, 460, 509, 510, 511, 0, 462, 461, 512,
	516, 0, 210, 0, 463, 464, 513, 465, 466, 467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 475, 0,
	236, 476, 0, 0, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 0,
	0, 0, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 485, 486, 487, 342, 0,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 0,
	299, 301, 308, 0, 0, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 0, 491, 0,
	310, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 0, 322,
	323, 0, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 335,
	0, 338, 339, 341, 340, 0, 0, 0, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 0, 354, 0,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 0, 390, 391, 392,
	393, 500, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 0, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	503, 504, 505, 506, 0, 447, 0, 441, 442, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 210, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 210, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 475, 0,
	236, 476, 0, 0, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 0,
	0, 0, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 2659, 486, 487, 342, 0,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 0,
	299, 301, 308, 0, 0, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 0, 491, 0,
	310, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 0, 322,
	323, 0, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 335,
	0, 338, 339, 341, 340, 0, 0, 0, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 0, 354, 0,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 0, 390, 391, 392,
	393, 500, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 0, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	503, 504, 505, 506, 0, 447, 0, 441, 442, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 210, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	2657, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 210, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 475, 0,
	236, 476, 0, 0, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 0,
	0, 0, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 2645, 486, 487, 342, 0,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 0,
	299, 301, 308, 0, 0, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 0, 491, 0,
	310, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 0, 322,
	323, 0, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 335,
	0, 338, 339, 341, 340, 0, 0, 0, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 0, 354, 0,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 0, 390, 391, 392,
	393, 500, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 0, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	503, 504, 505, 506, 0, 447, 0, 441, 442, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 210, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	2335, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 210, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 475, 0,
	236, 476, 0, 0, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 0,
	0, 0, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 485, 486, 487, 342, 0,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 0,
	299, 301, 308, 0, 0, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 0, 491, 0,
	310, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 0, 322,
	323, 0, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 335,
	0, 338, 339, 341, 340, 0, 0, 0, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 0, 354, 0,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 0, 390, 391, 392,
	393, 500, 394, 0, 395, 547, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 0, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	503, 504, 505, 506, 0, 447, 0, 441, 442, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 210, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 1835, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 0,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 210, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 475, 0,
	236, 476, 0, 0, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 0,
	0, 0, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 1266, 486, 487, 342, 0,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 0,
	299, 301, 308, 0, 0, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 0, 491, 0,
	310, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 0, 322,
	323, 0, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 335,
	0, 338, 339, 341, 340, 0, 0, 0, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 0, 354, 0,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 374, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 0, 390, 391, 392,
	393, 500, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 0, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	503, 504, 505, 506, 0, 447, 0, 441, 442, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 210, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 290, 0, 291, 292, 293, 294,
	1208, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	358, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 371, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 394, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 210, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	468, 0, 0, 0, 0, 222, 223, 224, 225, 469,
	470, 226, 471, 227, 228, 472, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 473, 474, 475, 0,
	236, 476, 0, 0, 0, 237, 238, 239, 240, 241,
	242, 0, 244, 245, 246, 243, 0, 247, 0, 248,
	249, 250, 0, 0, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 253, 254, 255, 256, 257, 258, 477,
	478, 0, 259, 0, 261, 260, 0, 262, 0, 0,
	263, 264, 265, 0, 266, 0, 267, 268, 0, 269,
	479, 270, 271, 273, 275, 272, 276, 277, 278, 279,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 280,
	281, 282, 482, 283, 284, 0, 285, 0, 286, 0,
	0, 0, 287, 288, 0, 289, 483, 0, 484, 290,
	0, 291, 292, 293, 294, 485, 486, 487, 342, 0,
	295, 296, 0, 297, 298, 300, 0, 0, 0, 0,
	299, 301, 308, 0, 0, 302, 488, 304, 303, 305,
	306, 307, 489, 0, 490, 0, 309, 0, 491, 0,
	310, 311, 312, 0, 313, 314, 0, 0, 315, 316,
	317, 318, 0, 320, 319, 0, 321, 492, 0, 322,
	323, 0, 0, 324, 325, 0, 0, 326, 327, 0,
	328, 329, 331, 333, 330, 332, 334, 336, 337, 335,
	0, 338, 339, 341, 340, 0, 0, 0, 0, 493,
	494, 343, 344, 0, 345, 346, 347, 0, 0, 349,
	350, 351, 0, 0, 352, 353, 495, 0, 354, 0,
	496, 355, 348, 356, 357, 358, 359, 360, 361, 362,
	0, 363, 364, 497, 365, 498, 366, 0, 367, 0,
	368, 369, 370, 371, 372, 373, 499, 972, 375, 0,
	376, 377, 378, 379, 380, 0, 382, 383, 384, 381,
	385, 386, 387, 388, 0, 389, 0, 390, 391, 392,
	393, 500, 394, 0, 395, 399, 400, 401, 402, 403,
	404, 405, 0, 412, 413, 406, 408, 409, 410, 407,
	411, 414, 415, 0, 416, 396, 397, 417, 0, 418,
	501, 419, 420, 0, 430, 421, 422, 423, 398, 424,
	428, 429, 425, 426, 427, 502, 0, 432, 433, 431,
	0, 434, 435, 436, 437, 438, 274, 439, 0, 440,
	503, 504, 505, 506, 0, 447, 0, 441, 442, 507,
	443, 508, 0, 444, 445, 446, 0, 448, 449, 0,
	0, 450, 451, 452, 453, 454, 456, 0, 457, 0,
	455, 458, 459, 460, 509, 510, 511, 210, 462, 461,
	512, 0, 0, 0, 0, 463, 464, 513, 465, 466,
	467, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 468, 0, 0, 0, 0,
	222, 223, 224, 225, 469, 470, 226, 471, 227, 228,
	472, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 473, 474, 475, 0, 236, 476, 0, 0, 0,
	237, 238, 239, 240, 241, 242, 0, 244, 245, 246,
	243, 0, 247, 0, 248, 249, 250, 0, 0, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 253, 254,
	255, 256, 257, 258, 477, 478, 0, 259, 0, 261,
	260, 0, 262, 0, 0, 263, 264, 265, 0, 266,
	0, 267, 268, 0, 269, 479, 270, 271, 273, 275,
	272, 276, 277, 278, 279, 480, 481, 0, 0, 0,
	0, 0, 0, 0, 280, 281, 282, 482, 283, 284,
	0, 285, 0, 286, 0, 0, 0, 287, 288, 0,
	289, 483, 0, 484, 0, 0, 291, 292, 293, 294,
	485, 486, 487, 342, 0, 295, 296, 0, 297, 298,
	300, 0, 0, 0, 0, 299, 301, 308, 0, 0,
	302, 488, 304, 303, 305, 306, 307, 489, 0, 490,
	0, 309, 0, 491, 0, 310, 311, 312, 0, 313,
	314, 0, 0, 315, 316, 317, 318, 0, 320, 319,
	0, 321, 492, 0, 322, 323, 0, 0, 324, 325,
	0, 0, 326, 327, 0, 328, 329, 331, 333, 330,
	332, 334, 336, 337, 335, 0, 338, 339, 341, 340,
	0, 0, 0, 0, 493, 494, 343, 344, 0, 345,
	346, 347, 0, 0, 349, 350, 351, 0, 0, 352,
	353, 495, 0, 354, 0, 496, 355, 348, 356, 357,
	0, 359, 360, 361, 362, 0, 363, 364, 497, 365,
	498, 366, 0, 367, 0, 368, 369, 370, 0, 372,
	373, 499, 374, 375, 0, 376, 377, 378, 379, 380,
	0, 382, 383, 384, 381, 385, 386, 387, 388, 0,
	389, 0, 390, 391, 392, 393, 500, 0, 0, 395,
	399, 400, 401, 402, 403, 404, 405, 0, 412, 413,
	406, 408, 409, 410, 407, 411, 414, 415, 0, 416,
	396, 397, 417, 0, 418, 501, 419, 420, 0, 430,
	421, 422, 423, 398, 424, 428, 429, 425, 426, 427,
	502, 0, 432, 433, 431, 0, 434, 435, 436, 437,
	438, 274, 439, 0, 440, 503, 504, 505, 506, 0,
	447, 0, 441, 442, 507, 443, 508, 0, 444, 445,
	446, 0, 448, 449, 0, 0, 450, 451, 452, 453,
	454, 456, 0, 457, 0, 455, 458, 459, 460, 509,
	510, 511, 0, 462, 461, 512, 0, 0, 0, 0,
	463, 464, 513, 465, 466, 467, 1433, 1434, 0, 1466,
	1467, 1468, 1476, 1477, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 1433, 1434, 0, 1466, 1467, 1468, 1476,
	1477, 1478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 1459, 1460, 1461, 1435, 0, 0, 0,
	0, 0, 1441, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 0, 1483,
	0, 0, 0, 1463, 1464, 1465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 1480, 0, 0, 0,
	0, 0, 0, 1450, 1451, 0, 0, 0, 0, 1458,
	1459, 1460, 1461, 0, 0, 0, 0, 0, 1471, 1441,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 1481, 0, 1483, 0, 0, 0,
	1463, 1464, 1465, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 0, 1480, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1471, 0, 0, 0, 0,
	0, 0, 1462, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1433,
	1434, 0, 1466, 1467, 1468, 1476, 1477, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1469, 0,
	0, 0, 1474, 0, 0, 1436, 0, 0, 1472, 1482,
	0, 1447, 1448, 1454, 1453, 1449, 1475, 0, 1446, 1444,
	1445, 1437, 1438, 1439, 1440, 1442, 1443, 0, 0, 0,
	0, 0, 1435, 0, 3078, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 1433, 1434, 0, 1466,
	1467, 1468, 1476, 1477, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 1472, 1482, 0, 1447, 1448,
	1454, 1453, 1449, 1475, 0, 1446, 1444, 1445, 1437, 1438,
	1439, 1440, 1442, 1443, 0, 1458, 1459, 1460, 1461, 1435,
	0, 2815, 0, 0, 0, 1441, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 0, 1483, 0, 0, 0, 1463, 1464, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1479, 0, 1480,
	0, 0, 0, 0, 0, 0, 1450, 1451, 0, 0,
	0, 0, 1458, 1459, 1460, 1461, 0, 0, 0, 0,
	0, 1471, 1441, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1481, 0, 1483,
	0, 0, 0, 1463, 1464, 1465, 0, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 1480, 0, 0, 0,
	0, 0, 0, 1450, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1471, 0,
	0, 0, 0, 0, 0, 1462, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 1481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 1433, 1434, 0, 1466, 1467, 1468, 1476, 1477,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 0, 1474, 0, 0, 1436, 0,
	0, 1472, 1482, 0, 1447, 1448, 1454, 1453, 1449, 1475,
	0, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443,
	0, 0, 0, 0, 0, 1435, 0, 2517, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 1433,
	1434, 0, 1466, 1467, 1468, 1476, 1477, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1469, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 1472, 1482,
	0, 1447, 1448, 1454, 1453, 1449, 1475, 0, 1446, 1444,
	1445, 1437, 1438, 1439, 1440, 1442, 1443, 0, 1458, 1459,
	1460, 1461, 1435, 0, 2516, 0, 0, 0, 1441, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 0, 1483, 0, 0, 0, 1463,
	1464, 1465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 0, 1480, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 1458, 1459, 1460, 1461, 0,
	0, 0, 0, 0, 1471, 1441, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	1481, 0, 1483, 0, 0, 0, 1463, 1464, 1465, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1479, 0, 1480,
	0, 0, 0, 0, 0, 0, 1450, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1471, 0, 0, 0, 0, 0, 0, 1462, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1433, 1434, 0, 1466, 1467,
	1468, 1476, 1477, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 1474, 0,
	0, 1436, 0, 0, 1472, 1482, 0, 1447, 1448, 1454,
	1453, 1449, 1475, 0, 1446, 1444, 1445, 1437, 1438, 1439,
	1440, 1442, 1443, 0, 0, 0, 0, 0, 1435, 0,
	2513, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 1433, 1434, 0, 1466, 1467, 1468, 1476, 1477,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 1472, 1482, 0, 1447, 1448, 1454, 1453, 1449, 1475,
	0, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443,
	0, 1458, 1459, 1460, 1461, 1435, 0, 2512, 0, 0,
	0, 1441, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 0, 1483, 0,
	0, 0, 1463, 1464, 1465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 1480, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 1458, 1459,
	1460, 1461, 0, 0, 0, 0, 0, 1471, 1441, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 1481, 0, 1483, 0, 0, 0, 1463,
	1464, 1465, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 0, 1480, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 0, 0, 0,
	0, 1462, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 1433, 1434,
	0, 1466, 1467, 1468, 1476, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 1474, 0, 0, 1436, 0, 0, 1472, 1482, 0,
	1447, 1448, 1454, 1453, 1449, 1475, 0, 1446, 1444, 1445,
	1437, 1438, 1439, 1440, 1442, 1443, 0, 0, 0, 0,
	0, 1435, 0, 2511, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 1433, 1434, 0, 1466, 1467,
	1468, 1476, 1477, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 1472, 1482, 0, 1447, 1448, 1454,
	1453, 1449, 1475, 0, 1446, 1444, 1445, 1437, 1438, 1439,
	1440, 1442, 1443, 0, 1458, 1459, 1460, 1461, 1435, 0,
	2052, 0, 0, 0, 1441, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 1483, 0, 0, 0, 1463, 1464, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 1480, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 1458, 1459, 1460, 1461, 0, 0, 0, 0, 0,
	1471, 1441, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1481, 0, 1483, 0,
	0, 0, 1463, 1464, 1465, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 1480, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 0, 1462, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	1472, 0, 0, 1447, 1448, 1454, 1453, 1449, 1475, 0,
	1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443, 0,
	0, 0, 0, 3402, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 1434, 0, 1466, 1467, 1468, 1476,
	1477, 1478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 1482, 0, 0, 0, 1472, 0, 0,
	1447, 1448, 1454, 1453, 1449, 1475, 0, 1446, 1444, 1445,
	1437, 1438, 1439, 1440, 1442, 1443, 1435, 0, 0, 0,
	3398, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	1433, 1434, 0, 1466, 1467, 1468, 1476, 1477, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	1459, 1460, 1461, 1435, 0, 0, 0, 0, 0, 1441,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 1483, 0, 0, 0,
	1463, 1464, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 0, 1480, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 1458, 1459, 1460, 1461,
	0, 0, 0, 0, 0, 1471, 1441, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1481, 0, 1483, 0, 0, 0, 1463, 1464, 1465,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	1480, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 0, 0, 0, 1462,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 1472, 0, 0, 1447, 1448,
	1454, 1453, 1449, 1475, 0, 1446, 1444, 1445, 1437, 1438,
	1439, 1440, 1442, 1443, 0, 0, 0, 0, 3329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 1434,
	0, 1466, 1467, 1468, 1476, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 1482, 0,
	0, 0, 1472, 0, 0, 1447, 1448, 1454, 1453, 1449,
	1475, 0, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442,
	1443, 1435, 0, 0, 0, 3328, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 1433, 1434, 0, 1466, 1467,
	1468, 1476, 1477, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 1460, 1461, 1435, 0,
	0, 0, 0, 0, 1441, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 1483, 0, 0, 0, 1463, 1464, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 1480, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 1458, 1459, 1460, 1461, 0, 0, 0, 0, 0,
	1471, 1441, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1481, 0, 1483, 0,
	0, 0, 1463, 1464, 1465, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 1480, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 0, 1462, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	1472, 0, 0, 1447, 1448, 1454, 1453, 1449, 1475, 0,
	1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443, 0,
	0, 0, 0, 3224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 1434, 0, 1466, 1467, 1468, 1476,
	1477, 1478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 1482, 0, 0, 0, 1472, 0, 0,
	1447, 1448, 1454, 1453, 1449, 1475, 0, 1446, 1444, 1445,
	1437, 1438, 1439, 1440, 1442, 1443, 1435, 0, 0, 0,
	3131, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	1433, 1434, 0, 1466, 1467, 1468, 1476, 1477, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	1459, 1460, 1461, 1435, 0, 0, 0, 0, 0, 1441,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 1483, 0, 0, 0,
	1463, 1464, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 0, 1480, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 1458, 1459, 1460, 1461,
	0, 0, 0, 0, 0, 1471, 1441, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1481, 0, 1483, 0, 0, 0, 1463, 1464, 1465,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	1480, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 0, 0, 0, 1462,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 1472, 0, 0, 1447, 1448,
	1454, 1453, 1449, 1475, 0, 1446, 1444, 1445, 1437, 1438,
	1439, 1440, 1442, 1443, 0, 0, 0, 0, 3083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 1434,
	0, 1466, 1467, 1468, 1476, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 1482, 0,
	0, 0, 1472, 0, 0, 1447, 1448, 1454, 1453, 1449,
	1475, 0, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442,
	1443, 1435, 0, 0, 0, 3082, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 1433, 1434, 0, 1466, 1467,
	1468, 1476, 1477, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 1460, 1461, 1435, 0,
	0, 0, 0, 0, 1441, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 1483, 0, 0, 0, 1463, 1464, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 1480, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 1458, 1459, 1460, 1461, 0, 0, 0, 0, 0,
	1471, 1441, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 1481, 0, 1483, 0,
	0, 0, 1463, 1464, 1465, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 1480, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 0, 0, 1462, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1474, 0, 0, 0, 0, 0,
	1472, 0, 0, 1447, 1448, 1454, 1453, 1449, 1475, 0,
	1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443, 0,
	0, 0, 0, 3081, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 1434, 0, 1466, 1467, 1468, 1476,
	1477, 1478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 1482, 0, 0, 0, 1472, 0, 0,
	1447, 1448, 1454, 1453, 1449, 1475, 0, 1446, 1444, 1445,
	1437, 1438, 1439, 1440, 1442, 1443, 1435, 0, 0, 0,
	3048, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	1433, 1434, 0, 1466, 1467, 1468, 1476, 1477, 1478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	1482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	1459, 1460, 1461, 1435, 0, 0, 0, 0, 0, 1441,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 0, 1483, 0, 0, 0,
	1463, 1464, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 0, 1480, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 1458, 1459, 1460, 1461,
	0, 0, 0, 0, 0, 1471, 1441, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 1481, 0, 1483, 0, 0, 0, 1463, 1464, 1465,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	1480, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 0, 0, 0, 1462,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 1472, 0, 0, 1447, 1448,
	1454, 1453, 1449, 1475, 0, 1446, 1444, 1445, 1437, 1438,
	1439, 1440, 1442, 1443, 0, 0, 0, 0, 2850, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 1434,
	0, 1466, 1467, 1468, 1476, 1477, 1478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 1482, 0,
	0, 0, 1472, 0, 0, 1447, 1448, 1454, 1453, 1449,
	1475, 0, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442,
	1443, 1435, 0, 2468, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 1434, 0,
	1466, 1467, 1468, 1476, 1477, 1478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1469, 0, 0, 0,
	0, 2439, 0, 1436, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 1460, 1461, 0, 0,
	1435, 0, 0, 0, 1441, 3500, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 1452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	0, 1483, 0, 0, 0, 1463, 1464, 1465, 0, 0,
	0, 0, 0, 0, 2440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 1480, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1458, 1459, 1460, 1461, 0, 0, 0,
	1471, 0, 0, 1441, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 1473, 0, 0,
	1483, 0, 0, 0, 1463, 1464, 1465, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1479, 0, 1480, 0, 0,
	0, 0, 0, 3499, 1450, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	0, 0, 0, 0, 1462, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 1434, 0, 1466, 1467, 1468, 1476, 1477, 1478, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	1482, 1457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 1474, 0, 0, 0,
	1472, 0, 1455, 1447, 1448, 1454, 1453, 1449, 1475, 1452,
	1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 1459, 1460, 1461,
	0, 0, 0, 0, 0, 0, 1441, 0, 2556, 1472,
	0, 2555, 1447, 1448, 1454, 1453, 1449, 1475, 0, 1446,
	1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443, 0, 0,
	1473, 0, 0, 1483, 0, 0, 0, 1463, 1464, 1465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	1480, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1471, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2143, 0, 0, 0, 0, 0,
	0, 1433, 1434, 0, 1466, 1467, 1468, 1476, 1477, 1478,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	1469, 0, 0, 0, 2142, 0, 0, 1436, 0, 0,
	0, 1482, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 1474,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	1452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 1434, 0, 1466, 1467, 1468, 1476, 1477,
	1478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 1482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 1459, 1460,
	1461, 0, 0, 0, 0, 1435, 0, 1441, 0, 0,
	0, 0, 1472, 0, 1455, 1447, 1448, 1454, 1453, 1449,
	1475, 1452, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442,
	1443, 1473, 0, 0, 1483, 0, 0, 0, 1463, 1464,
	1465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1479,
	0, 1480, 0, 0, 0, 0, 0, 0, 1450, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 1459,
	1460, 1461, 0, 1471, 0, 0, 0, 0, 1441, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 1473, 0, 0, 1483, 0, 0, 0, 1463,
	1464, 1465, 0, 0, 1470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1479, 0, 1480, 0, 0, 0, 0, 0, 0, 1450,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 0, 0, 1462, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1470, 815, 0, 0, 0,
	1474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 1434, 0, 1466, 1467, 1468, 1476,
	1477, 1478, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 1482, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 1474, 0, 1472, 0, 1455, 1447, 1448, 1454, 1453,
	1449, 1475, 1452, 1446, 1444, 1445, 1437, 1438, 1439, 1440,
	1442, 1443, 0, 0, 1433, 1434, 0, 1466, 1467, 1468,
	1476, 1477, 1478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	1459, 1460, 1461, 0, 0, 0, 0, 1435, 0, 1441,
	0, 0, 0, 0, 1472, 0, 1455, 1447, 1448, 1454,
	1453, 1449, 1475, 1452, 1446, 1444, 1445, 1437, 1438, 1439,
	1440, 1442, 1443, 1473, 0, 0, 1483, 0, 0, 0,
	1463, 1464, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 0, 1480, 0, 0, 0, 0, 0, 0,
	1450, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 1459, 1460, 1461, 0, 1471, 0, 0, 0, 0,
	1441, 0, 0, 1456, 0, 2562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1481, 0, 0, 1473, 0, 0, 1483, 0, 0,
	0, 1463, 1464, 1465, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 1480, 0, 0, 0, 0, 0,
	0, 1450, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1471, 0, 0, 1462,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 1474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2838, 0, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1474, 0, 1472, 0, 0, 1447, 1448,
	1454, 1453, 1449, 1475, 0, 1446, 1444, 1445, 1437, 1438,
	1439, 1440, 1442, 1443, 0, 0, 1433, 1434, 0, 1466,
	1467, 1468, 1476, 1477, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 2557,
	0, 0, 1436, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 1472, 0, 1455, 1447,
	1448, 1454, 1453, 1449, 1475, 1452, 1446, 1444, 1445, 1437,
	1438, 1439, 1440, 1442, 1443, 1433, 1434, 0, 1466, 1467,
	1468, 1476, 1477, 1478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 1459, 1460, 1461, 0, 0, 1435, 0,
	0, 0, 1441, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 0, 1483,
	0, 0, 0, 1463, 1464, 1465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1479, 0, 1480, 0, 0, 0,
	0, 0, 0, 1450, 1451, 0, 0, 0, 0, 0,
	0, 1458, 1459, 1460, 1461, 0, 0, 0, 1471, 0,
	0, 1441, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 1473, 0, 0, 1483, 0,
	0, 0, 1463, 1464, 1465, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 1480, 0, 0, 0, 0,
	0, 0, 1450, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1471, 0, 0,
	0, 0, 1462, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 1474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2524, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 1434,
	0, 1466, 1467, 1468, 1476, 1477, 1478, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 2510, 0, 0, 1436, 0, 0, 0, 1482, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 1474, 0, 0, 0, 1472, 0,
	1455, 1447, 1448, 1454, 1453, 1449, 1475, 1452, 1446, 1444,
	1445, 1437, 1438, 1439, 1440, 1442, 1443, 1433, 1434, 0,
	1466, 1467, 1468, 1476, 1477, 1478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 1459, 1460, 1461, 0, 0,
	1435, 0, 0, 0, 1441, 0, 0, 1472, 0, 1455,
	1447, 1448, 1454, 1453, 1449, 1475, 1452, 1446, 1444, 1445,
	1437, 1438, 1439, 1440, 1442, 1443, 0, 0, 1473, 0,
	0, 1483, 0, 0, 0, 1463, 1464, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1479, 0, 1480, 0,
	0, 0, 0, 0, 0, 1450, 1451, 0, 0, 0,
	0, 0, 0, 1458, 1459, 1460, 1461, 0, 0, 0,
	1471, 0, 0, 1441, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 1473, 0, 0,
	1483, 0, 0, 0, 1463, 1464, 1465, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1479, 0, 1480, 0, 0,
	0, 0, 0, 0, 1450, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	0, 0, 0, 0, 1462, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 1434, 0, 1466, 1467, 1468, 1476, 1477, 1478, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	1482, 1457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 1474, 0, 0, 0,
	1472, 0, 1455, 1447, 1448, 1454, 1453, 1449, 1475, 1452,
	1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443, 1433,
	1434, 0, 1466, 1467, 1468, 1476, 1477, 1478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 1482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 1459, 1460, 1461,
	0, 0, 1435, 0, 0, 0, 1441, 0, 0, 1472,
	0, 1455, 1447, 1448, 1454, 1453, 1449, 1475, 1452, 1446,
	1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443, 0, 0,
	1473, 0, 0, 1483, 0, 0, 0, 1463, 1464, 1465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 0,
	1480, 0, 0, 0, 0, 0, 0, 1450, 1451, 0,
	0, 0, 0, 0, 0, 1458, 1459, 1460, 1461, 0,
	0, 0, 1471, 0, 0, 1441, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 1473,
	0, 0, 1483, 0, 0, 0, 1463, 1464, 1465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1479, 0, 1480,
	0, 0, 0, 0, 0, 0, 1450, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1471, 0, 0, 0, 0, 1462, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 1481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1474,
	0, 0, 0, 0, 0, 0, 0, 0, 1653, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1665, 1647, 1654, 1637,
	1675, 1674, 0, 1457, 1639, 1638, 0, 0, 0, 0,
	0, 0, 1685, 1686, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 0, 1472, 0, 0, 1447, 1448, 1454, 1453, 1449,
	1475, 0, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442,
	1443, 0, 0, 1676, 0, 1672, 1671, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1670, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1669, 1667,
	1668, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 1447, 1448, 1454, 1453, 1449, 1475,
	0, 1446, 1444, 1445, 1437, 1438, 1439, 1440, 1442, 1443,
	0, 1649, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1658, 1652, 1660, 1662, 1663, 1664, 1659, 0,
	1657, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1681, 1682, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1641, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1673, 0, 0, 0,
	1650, 0, 1651, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1666, 0, 0, 0, 1634, 1632, 1633, 1636,
	1635, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1642, 1643, 1645, 1646, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1661, 1644, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1684, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1640, 0, 0, 1677, 1678, 1679, 1680,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1648, 0, 0, 0,
	0, 1655, 1683,
}
var sqlPact = [...]int{

	4592, -1000, -1000, -1000, -1000, -1000, -1000, 270, 256, 255,
	254, 253, 252, 248, 246, -1000, -1000, -1000, 245, -1000,
	-1000, 244, -1000, 243, 241, 240, 237, -1000, 232, 229,
	226, -1000, -1000, -1000, -1000, 225, 215, 206, 50659, 1738,
	61968, 53576, 1536, 45204, 61547, 44783, 61126, 60705, 189, -1000,
	60284, 180, 175, 165, -1000, -1000, 164, 1776, 36754, 162,
	161, 160, 2112, 155, 152, -1000, 148, -1000, 7333, 1245,
	-1000, 146, 144, -1000, 6480, 4831, 52740, 2187, 141, 136,
	36332, 2170, 2147, -1000, -1000, 1593, -1000, -1000, 135, 132,
	131, 126, 124, 123, 112, 111, 109, -1000, 108, 107,
	105, 104, 103, 101, 100, 94, 91, 89, 87, 86,
	85, 84, 82, 81, 78, 77, -1000, 6895, 1523, 1428,
	1424, 1404, 1384, 1374, 855, 76, 75, 74, 73, 72,
	70, -1000, -1000, 69, 68, 67, 65, -1000, 64, 63,
	179, 61, 59, 54, 53, 52, 2514, 2142, 1259, 432,
	17046, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 66118, 62383, 50, -138, 48, -1000, 2484,
	891, 30003, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 478, -1000, -1000, -1000, 326, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1566, 650, -1000, -1000, -1000, 59863,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1737, -42,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 649, -1000, 1726,
	190, 1559, -1000, -1000, -1000, -1000, -1000, 62383, -1000, -1000,
	2807, 2805, 1589, 648, 59448, -1000, 1171, -1000, 803, 19723,
	-1000, 1034, -1000, 19723, 325, -1000, -1000, -1000, -1000, -1000,
	44362, 13483, 43941, 43520, 40585, 59027, 13052, 50244, 1088, -1000,
	-1000, -1000, -1000, -1000, 21, 37999, 62383, -1000, 324, -1000,
	-1000, -1000, -1000, -1000, -1000, 26082, 384, 25625, 371, 25168,
	362, -1000, -1000, -1000, -1000, 2804, 2801, 978, 2800, 2428,
	65703, 1443, 2798, 1284, 1046, 874, 2793, 2792, 2785, 2777,
	2774, 2773, 2769, 1202, 58606, 2206, 40154, 39723, 50659, 50659,
	1952, 58185, -1000, -1000, 1122, 1121, -1000, -1000, -1000, -1000,
	2329, 2137, 2135, 49823, -1000, -1000, 2757, 2756, 2755, 2754,
	2751, 65288, 1415, 2750, 1872, 2749, 2748, 2746, 2745, 2744,
	2743, 2742, 2741, 2740, -1000, 49402, 48981, 48560, 48139, 57764,
	39292, 38861, -1000, -1000, -1000, 31683, 5307, 57343, 32976, 50659,
	50659, -1000, -1000, 26526, -87, -1000, -1000, -1000, 2129, -1000,
	26526, -87, -1000, 62383, -1000, 2197, 1505, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1947, 1345, 2614, 38430,
	1553, 1187, 2306, 2296, 1242, 1844, 2288, 2287, 2257, 2223,
	2219, 1317, 1914, 220, 16589, 1264, 1265, 2216, 2213, 2649,
	1541, 43099, 2738, 2736, 2453, 2201, 2123, -1000, -1000, -1000,
	-1000, 1211, -1000, -1000, 45619, -1000, -1000, 992, -1000, -1000,
	992, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1087, 64458,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1254, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1913, -1000, 1528, -1000, -1000, 2735,
	2142, 1868, 2462, 2462, 2462, 2504, 455, 429, -1000, 179,
	-1000, -1000, 73206, -1000, -1000, 26526, 26526, 26526, 26526, 26526,
	1481, -1000, 647, -1000, -1000, 703, -1000, 646, 598, -1000,
	-1000, -1000, -1000, -1000, -1000, 645, 2654, -1000, 901, -1000,
	-1000, -1000, -1000, 2616, -1000, 15688, -1000, -1000, -1000, 505,
	641, 26526, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 320, 814,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 591, 1411, 589, 589, 589, -1000,
	-1000, 867, -1000, -1000, -1000, 365, 588, 339, 586, -1000,
	-1000, -1000, -1000, 2193, 640, 638, -1000, 634, 632, 629,
	-1000, -1000, -1000, 626, 624, 623, 619, 617, 616, 615,
	614, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 866, -1000,
	613, 612, 611, 610, 609, 608, 607, 605, 604, -1000,
	-1000, 18, 62383, -1000, 478, 18, -1000, -1000, 601, -1000,
	20167, 20167, 20167, -1000, -1000, 1720, 26526, -1000, 1982, -1000,
	219, -226, 778, 30841, -1000, 29146, 778, 709, 34235, -1000,
	2121, -1000, -1000, 599, 318, -1000, -1000, 2117, 62383, 13912,
	62383, 50659, 50659, -1000, 2381, 26526, -1000, -1000, 37584, 62383,
	51074, 2553, 73844, 37584, 62383, 2192, -1000, -1000, -1000, 62383,
	-1000, 26526, -1000, 2551, 1158, -28, -1000, -1000, -1000, -1000,
	-1000, -1000, 1842, 1870, 979, 1749, 1261, -1000, 19723, 2419,
	-1000, -1000, -1000, 314, 13912, -1000, 2544, 2347, 1066, -1000,
	1747, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1359,
	2346, -1000, 2009, 2343, 1349, -1000, -1000, 845, 2341, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1617, -1000,
	-1000, 2443, -1000, -1000, 1455, 2339, -180, -1000, -1000, 32118,
	37999, 2, -1000, -1000, -83, -1000, 12621, 73206, -1000, -1000,
	-1000, 73206, 781, -1000, -1000, 2338, -1000, 73206, 766, -1000,
	-1000, 2337, -1000, -1000, -1000, 2734, -1000, 2731, 1793, 2727,
	2726, 2724, -1000, 1214, 1380, 2722, -1000, 2721, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47718, 47297, 871, -1000, 1716,
	-1000, -1000, 46876, 833, 1792, -1000, -1000, 1791, -1000, 856,
	-1000, 2720, 56922, 1970, 833, 1790, -1000, -1000, -1000, -1000,
	-1000, 50659, -1000, 50659, -1000, 50659, -1000, 1198, -1000, 64873,
	-226, -1000, -1000, -1000, -1000, -1000, 2335, 2719, 2718, 2717,
	-1000, 62383, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 183, 2332, -1000, -1000, 183, 2328, -1000, 183, 2325,
	-1000, 172, 2324, -1000, -1000, 1663, 2323, -1000, -145, 2322,
	-1000, -1000, -145, 2314, -1000, 20, -1000, -1000, -1000, 891,
	-1000, 31262, 56501, 41014, 824, 688, 35911, 73206, -1000, 32118,
	73206, -1000, 41014, 46876, -1000, 56080, 46461, -1000, -1000, 1120,
	1880, -1000, -1000, -1000, -1000, 41014, 41014, 41014, -1000, 55659,
	-1000, 1534, 1305, 2447, 50659, -1000, 1453, -1000, -1000, -1000,
	2470, 2188, -1000, 37169, 52319, -1000, 51904, -1000, 51489, -1000,
	50659, -1000, 50659, -1000, 2715, 2714, 2708, -1000, 2706, 2464,
	73206, 2463, -1000, 2199, 1409, 1403, 62383, -1000, -1000, 62383,
	-1000, 62383, -1000, -1000, -1000, 1801, -1000, -1000, -1000, -1000,
	50659, -1000, -1000, -1000, -1000, -1000, -1000, 2173, -1000, 1408,
	-1000, 1117, -1000, -1000, 191, -1000, -1000, -28, -1000, 64458,
	-1000, -1000, 2142, 1868, -1000, 62383, -1000, -1000, -1000, 2142,
	1612, 1921, 24711, 1903, 26526, 179, -1000, -1000, 179, 179,
	19279, -1000, -1000, 73844, 73844, 13912, 1100, 26526, 26526, 26526,
	26526, 26526, 26526, 26526, 26526, 26526, 26526, 26526, 26526, 26526,
	26526, 26526, 26526, 26526, 26526, 26526, 26526, 26526, 26526, 26526,
	26526, 26526, 26526, 26526, 26526, 26526, 26526, 26526, 26526, 26526,
	26526, 26526, 1951, 26526, 1084, 26526, 26526, 26526, 26526, 1383,
	-1000, -1000, 1506, 514, 1628, -1000, 2617, 2617, 2617, 73568,
	73568, 563, 2705, 703, -1000, 26526, -1000, -87, 26526, 14343,
	-1000, 2642, 1391, -1000, -1000, 429, 9045, 1703, -1000, 424,
	14800, -1000, -1000, -1000, 15688, 598, 24254, 26526, 858, 73206,
	12192, 2217, 2016, -1000, 2641, -1000, -1000, 2618, -1000, -1000,
	-1000, -1000, 2618, 1097, 1070, 2640, -1000, 2618, 2618, 597,
	772, 767, 762, 761, 675, 26526, 26526, 26526, 26526, 26526,
	26526, 26526, 26526, -1000, 23810, 23353, 22896, 27858, 22439, 26526,
	16132, 21982, 21525, 62383, 18, 2550, 26526, 150, -1000, 71960,
	-1000, 150, 150, 596, 19, 73206, 1892, 1892, 30422, 1876,
	1486, 1486, 1486, -1000, 595, 680, 42, 40, 29, -1000,
	-1000, 27, 25, 778, 9602, 53991, 1492, 778, 778, 303,
	323, 423, 28727, 1982, 53991, -1000, -1000, 50659, 594, 14343,
	13912, 1159, 15, 294, 1928, 1925, 1920, -1000, 1234, 14,
	1074, -15, -1000, 5043, 13, -1000, 1099, -1000, -1000, -1000,
	-1000, 157, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 864, 593, 592, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 591,
	1411, 589, 589, 589, -1000, -1000, -1000, 365, 588, 339,
	586, -1000, -1000, -1000, -1000, -1000, -1000, 2116, -83, 51074,
	773, 9, 985, -28, -1000, 992, -1000, 1657, -1000, -1000,
	-1000, -1000, -1000, -1000, 1129, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2652, -1000, 2624, -1000, -1000, 2639, 8, -1000,
	-1000, 13912, -1000, -35, 1422, -1000, 42678, 2459, 2454, 2439,
	1195, -1000, 1163, 2500, 45619, 2522, 2531, 26, -1000, 2104,
	-1000, -1000, 802, 1334, 1072, 45619, 2009, -1000, 73844, -1000,
	1957, 2498, 1168, 1154, 1168, 1168, 1133, -1000, 45619, 1067,
	1437, 41014, -1000, 1055, -1000, -70, 2521, 2528, 11, -1000,
	2103, 1051, -1000, -1000, 50659, 13912, 774, -1000, 41014, 2,
	37999, 62383, 292, -1000, 26526, -87, 26526, -87, -1000, -1000,
	2313, -1000, -1000, -1000, 2703, 1370, 1867, -1000, -1000, -1000,
	582, 1788, 2009, 1785, -1000, -1000, 46040, 2089, 62383, 1931,
	-2, 50659, -1000, -1000, 1430, -1000, 2307, 2295, 636, 2700,
	-1000, 1701, 1783, -1000, -1000, -1000, 64043, 1106, 2293, 851,
	130, 2546, 130, 35073, -1000, 62383, -1000, 62383, -1000, -1000,
	-1000, 2693, -1000, 50659, -1000, -1000, 50659, -1000, 50659, -1000,
	50659, -1000, 50659, 50659, -1000, 62383, 41014, 41014, 41014, 4540,
	41848, -8, 422, -1000, 55244, 62383, 910, 42263, 62383, 2409,
	-205, -1000, 824, 824, 774, -1000, 774, -1000, 50659, 2165,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2692, 2691, -1000,
	832, 50659, 62383, 50659, -1000, -1000, 62383, -1000, 62383, -1000,
	-1000, 62383, -1000, 62383, -1000, 62383, -1000, -1000, -1000, -1000,
	-1000, -1000, -87, 26526, 1205, -1000, 2163, -1000, 2144, -1000,
	58, -1000, -1000, -1000, -1000, 1454, 50659, 50659, 62383, 50659,
	-1000, 45619, -1000, -1000, 2142, -1000, -1000, -1000, -1000, -1000,
	73206, -1000, 501, -1000, -1000, 73206, 1303, 1934, -1000, 1934,
	0, -1000, 71396, 1899, 50659, -1000, -1000, -1000, -1000, -1000,
	788, 893, 893, 1024, 1024, 1024, 1024, 2533, 1355, 212,
	5512, 276, 276, 276, 276, 276, 276, 276, 276, 704,
	289, 289, 704, 704, 704, 704, 704, 289, 289, 289,
	276, 276, 276, 73568, 73489, 5978, 26526, 26526, 1048, 1482,
	514, 5719, 26526, 6139, 6139, 6139, 6139, -1000, 1806, -1000,
	-1000, -1000, -1000, 2088, 577, 27858, 27858, -1000, -1000, -1000,
	-1000, 15244, 26526, -1000, -1000, -1000, -1000, 21068, -1000, -1000,
	70929, -245, 421, -168, -1, -1000, 26526, 26526, 26526, 416,
	-1000, 413, -1000, -1000, 1045, -1000, 1042, 1038, 1037, -1000,
	576, 291, 26526, 62383, -1000, 68211, 676, -162, -1000, -10,
	1164, -1000, 26526, 290, -1000, 1484, 573, 567, 412, -18,
	-1000, 409, 787, 784, 408, 406, 405, 26526, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 73127, 68134,
	67818, 67741, 8701, 67425, 67348, -24, 404, -1000, 2085, -168,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 401, -1000, 400,
	-1000, 72844, -168, 399, 5558, -1000, 27858, 27858, 27858, -1000,
	398, -1000, 71679, -1000, 72765, 20624, 20624, 20624, 397, 72403,
	26526, -168, -26, -1000, -30, -1000, -1000, 553, -31, 851,
	20167, 29581, 13912, -1000, 851, 851, 26526, -1000, 26526, 1912,
	-1000, -1000, -1000, 1910, 1676, 1892, 30422, -1000, -1000, -1000,
	-1000, 53991, 508, 778, -1000, -1000, -1000, -1000, -1000, 53991,
	-1000, 2616, 2262, -1000, -1000, -1000, 62383, 478, -1000, 53991,
	53991, 13912, 778, -1000, 396, 33395, -1, 272, -1000, -1000,
	13912, 2001, 2001, 2001, -1000, -1000, 62383, 2568, -1000, 1395,
	-1000, 73844, -1000, 693, 997, -1000, 2635, 549, -1000, 2618,
	2618, 62383, 138, 19723, -1000, 992, -1000, -1000, 1292, -1000,
	1377, -1000, 996, -1000, -1000, -1000, 19723, -1000, 1853, 62383,
	62383, 50659, -1000, -1000, 1781, 63628, 1780, 73844, 62383, -1000,
	-1000, 545, 543, 1897, 1895, 62383, 62383, 63213, 62798, 62383,
	1416, 26526, 1494, 1402, -87, -87, -1000, -1000, -87, 541,
	1052, 50659, 50659, 50659, 1309, -1000, -1000, -1000, -1000, -1000,
	50659, -1000, -1000, 2633, -1000, 1168, -1000, -1000, -1000, 1168,
	2009, 1296, 50659, 41014, 842, 62383, 1418, -87, -87, -1000,
	-1000, -87, 540, 13912, 1389, -1000, 1962, -1000, -37, -1000,
	-1000, 11763, 73206, -1000, 73206, -1000, 62383, -1000, 870, 62383,
	42263, 825, 2289, -1000, 2009, 2277, 478, -1000, -1000, 34654,
	-83, 824, 41014, 50659, -2, 41014, 41014, 41014, 2690, 539,
	2689, -1000, 50659, 2271, 1700, 1778, 2358, 740, 62383, 1532,
	-1000, 26526, 1348, -1000, 33816, 885, 62383, 1266, 121, -1000,
	-1000, -1000, 44, 62383, -1000, 2688, -1000, -1000, 183, 183,
	183, -1000, 172, 1663, -1000, -145, -145, -1000, -1000, 4540,
	824, -6, 538, -1000, 752, 751, 32547, 41014, -38, -1000,
	-1000, -1000, -1000, -1000, 50659, 62383, 678, 1963, 62383, -47,
	-1000, 184, 537, -1000, 824, 32118, 2075, -1000, -1000, 838,
	-1000, 1114, -1000, -1000, -1000, -1000, -1000, -1000, -83, -83,
	-1000, -1000, -1000, -1000, 73206, -1000, 1204, 1203, 62383, -1000,
	13912, 62383, 50659, 13912, 50659, -1000, -1000, -1000, -1000, -1000,
	-1000, 1303, -1000, 26526, -1000, -1000, -1000, 19279, -1000, -1000,
	-1000, 50659, -218, 26526, 26526, 5662, 5640, 26526, 27858, 27858,
	-1000, 26526, 4593, -1000, -1000, -1000, -1000, -1000, 2068, 536,
	26526, 73844, 4056, 3988, -1000, 394, 67032, 704, -1000, 26526,
	-1000, 393, 18835, -1000, 72041, -19, -49, -1000, 2650, 1809,
	1457, 1308, 1221, 2628, 11334, -168, -51, -1000, -1000, 691,
	-1000, 2354, -1000, 26526, 72322, 10905, -1000, 35492, 853, 1532,
	-1000, -1000, 2618, 780, -1000, -1000, -1000, 780, -1000, 70852,
	73844, 73844, 26526, 26526, -1000, 26526, 26526, 26526, -1000, -1000,
	26526, -1000, -1000, 2065, 26526, -1000, 73844, 73844, 27858, 27858,
	27858, 27858, 27858, 27858, 27858, 27858, 27858, 27858, 27858, 27858,
	27858, 27858, 27858, 27858, 27858, 27858, 27858, 1889, 27858, 2609,
	2609, 2609, -1000, 2138, 2065, 26526, 26526, 73844, 391, 389,
	388, -1000, 26526, -168, -1000, -1000, 4540, -1000, 2014, -1000,
	-194, -1000, 1982, -1000, -1000, 2014, 2014, -53, 73206, 30422,
	30422, -1000, 533, 26526, 1908, -1000, 664, -1000, -55, -1000,
	53991, -1000, 662, -242, -1000, 747, -1000, -1000, -1000, -1000,
	478, -1000, -1000, -1000, 151, 53991, -1000, -57, -1000, 2541,
	387, 13912, -1000, -1000, -1000, -1000, -1000, -1000, -83, 1557,
	2648, -1000, 2626, 687, 657, 380, 2618, 379, 378, -83,
	62383, -1000, -28, -1000, -1000, -1000, 26526, -1000, -1000, 2445,
	1035, 1032, -1000, 2261, -1000, 1777, -1000, 902, -1000, 1327,
	-1000, 26526, 26526, 532, 531, 1442, 2682, 2260, 1663, 2259,
	1663, -1000, -1000, 808, -1000, 73206, 530, 529, -1000, -35,
	1329, 837, -1000, -1000, 26526, 26526, 54825, -1000, 2443, 2443,
	-1000, 1029, -1000, -1000, -1000, 2009, 1007, -1000, -1000, 1417,
	-1000, -1000, 836, -1000, -1000, 26526, -1000, -70, 1003, 824,
	2064, -1000, -1000, 2680, 2679, 2678, 377, -59, -71, 73844,
	2540, 1591, 62383, 50659, 50659, 2532, 805, -1000, 2616, -1000,
	-1000, -1000, -1000, 833, -1000, -1000, 2677, -1000, 908, 13912,
	50659, 2254, 1858, 740, 41433, -1000, 833, 1921, 73206, -1000,
	1266, 18378, 2444, -63, -1000, -1000, -1000, 851, 35073, 30422,
	26526, 2676, -72, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 54410, 54410, 41014, 41014, 41014, 824, 62383, 62383, 42263,
	2674, 528, 62383, 62383, 527, -1000, 62383, 62383, 2672, 41014,
	-1000, -1000, -87, -1000, 1550, 50659, -1000, -1000, 832, -1000,
	-1000, 1441, 1709, 1441, 1564, 70464, -1000, 2442, 13912, 2571,
	6139, 26526, 26526, 3547, 3708, 677, 6139, 26526, 26526, 73844,
	477, -74, 26526, 26526, -1000, 26526, 656, 73206, 2647, 26526,
	376, 375, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 369, -1000, -1000, -1000, -1000, -1000, 73206, 26526, 139,
	-1000, -1000, -1000, 66533, -1000, 26526, 367, 363, -1000, -1000,
	-1000, 359, 358, 66955, 8374, 70387, 69999, 69922, 73206, 2138,
	73206, -1000, -1000, 880, 880, 1127, 1127, 1127, 1127, 2609,
	1236, 951, 1322, 451, 451, 451, 720, 492, 492, 451,
	451, 451, 2047, 1831, 526, 859, -1000, -1000, 73206, 73206,
	357, -1000, -1000, -1000, -168, 356, 2003, 2497, -1000, 30422,
	2003, 2003, -1000, -1000, 1676, 62383, 73206, 30422, -226, -1000,
	2616, -1000, -1000, 2262, -1000, 10043, -1000, 13912, -1000, -1000,
	33395, -1000, 525, -1000, 122, -1000, -1000, 654, 2671, 684,
	-1000, 351, -1000, -1000, -83, 73206, 62383, 62383, 62383, 2247,
	-1000, 4106, -1000, 69534, -78, -1000, 71396, 26526, 62383, -1000,
	1596, 1919, 961, -1000, 62383, -1000, 62383, -1000, -1000, 62383,
	62383, 50659, 2233, -79, 73206, -90, -1000, 745, -1000, -1000,
	50659, 50659, 41014, 2230, -84, 13912, -1000, 41014, -1000, -1000,
	-1000, 1948, -1000, 53155, 1616, -87, -1000, 2670, 524, 2009,
	-87, -1000, 1547, -1000, 653, -1000, -1000, 523, 62383, 1685,
	521, 13912, 1854, 740, 41433, -1000, 1106, 1266, -1000, -1000,
	-102, -1000, 552, -87, 1532, -1000, -126, 73206, -1000, 741,
	-1000, -85, -1000, -1000, 345, -1000, 2408, 2407, -1000, -1000,
	26526, 520, 517, 62383, 2401, -1000, -1000, -89, -1000, 1807,
	-1000, -1000, -1000, -1000, 13912, 1331, -1000, -1000, -1000, -1000,
	2442, 6139, 6139, 26526, 26526, 26526, 6139, 477, -93, -1000,
	6139, 6139, -168, -1000, -1000, 72041, -1000, -1000, -1000, 73206,
	10476, 1444, -1000, 69457, -1000, -1000, -1000, -1000, 26526, 26526,
	-1000, -1000, -1000, -1000, -1000, 27858, 2038, 516, 73844, -1000,
	-1000, 848, 26526, 26526, 1982, 848, 848, -1000, -94, -1000,
	778, -1000, -1000, -1000, 2616, 122, -1000, 2668, 13912, 682,
	-1000, 2666, -1000, -1000, -1000, -1000, 62383, -1000, 62383, -1000,
	13912, 62383, 2041, 1766, -1000, -1000, 1887, 515, 27858, 50659,
	806, 2029, 1425, 26526, -1000, -98, -104, 1758, -1000, -1000,
	1757, 26526, -1000, 73844, 1663, 1663, -105, -113, -1000, 26526,
	1001, 62383, 17934, -1000, -1000, -1000, 26526, 999, -1000, -145,
	1418, 1990, -1000, -1000, -1000, -1000, 1885, -1000, -1000, 62383,
	1884, 831, -1000, 42263, 825, -1000, -1000, 820, -1000, 26526,
	-1000, 50659, 26526, 1678, -1000, 740, 41433, -1000, 2358, -1000,
	2365, 62383, 2436, -1000, 1921, 514, -1000, 824, 513, 511,
	-118, 26526, 26526, -122, 510, 824, -151, -1000, 777, 769,
	-1000, -1000, 50659, 50659, -1000, 6139, 6139, 6139, -1000, 336,
	-1000, -1000, 1532, 2492, -1000, 69069, 68992, 3528, 27858, 73844,
	-124, -1000, 62383, 73206, -168, -1000, -1000, -1000, 53991, 652,
	-1000, 2663, -1000, -1000, 2049, -1000, -1000, -1000, 62383, 1774,
	-1000, -1000, 26526, 859, 506, 26526, -1000, -1000, 1946, 2063,
	1948, 500, -1000, -1000, -1000, -1000, 1336, -1000, -1000, 73206,
	2475, -1000, -1000, 499, 497, 73206, 495, 736, 2031, -1000,
	73206, 494, 825, -1000, 1450, 1616, 490, -1000, -1000, -1000,
	1954, 333, 2529, 820, -1000, 2594, -1000, -128, 908, -129,
	50659, 41433, -1000, 1858, 1077, -134, 62383, 1266, -1000, -1000,
	41014, 41014, 1425, -140, -141, -1000, 41014, -1000, 1807, -1000,
	62383, -1000, 62383, -1000, -1000, -1000, 1765, 26526, -1000, -1000,
	3528, -147, -1000, -161, -1000, 2526, -1000, -1000, -1000, -1000,
	-1000, 2241, 68604, 1819, 62383, 68527, 2050, -1000, -1000, 1418,
	62383, 50659, 905, 13912, 1441, 1441, 26526, 17490, 1448, 26526,
	-1000, 50659, 62383, -1000, 2397, 1948, -87, -1000, -1000, 1425,
	489, 1425, 482, -1000, 1854, 1186, -1000, 851, -1000, -1000,
	-152, -153, 1948, 1425, -1000, -160, -1000, -170, -175, 329,
	27414, 27414, 27414, -168, -1000, 62383, 479, 2225, -1000, 1571,
	1682, 181, 913, -1000, -1000, 2029, -177, 478, -1000, 26526,
	-1000, -181, -1000, 883, -185, -1000, 882, -187, -1000, 2027,
	-1000, -193, 474, -198, -1000, -1000, -1000, 1418, 831, 1948,
	26526, 1948, 26526, -1000, 35073, -1000, 824, 824, 1418, 1948,
	824, -1000, -1000, -1000, 2349, -1000, 28287, 1585, 1269, 71317,
	2349, 2349, -1000, -1000, 62383, -1000, 1639, 1580, 1232, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1819, 73206, -1000,
	1441, 1986, -1000, 1441, 2026, -1000, 1426, -1000, 62383, -1000,
	62383, 825, -1000, 1418, -200, 1418, -204, -199, -1000, -1000,
	-1000, 1418, -1000, -1000, 1497, 2559, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2385, -1000, 916, 1849, 1849,
	1571, -1000, 464, -1000, 457, -1000, -208, -1000, -1000, 850,
	1425, 850, 1425, -1000, -1000, 1247, -1000, -1000, 1490, 26970,
	-1000, 2573, -1000, -1000, 1917, -1000, 2029, 26526, 26526, 1608,
	-1000, 2660, 1948, -1000, 1948, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -216, -220, -1000, -1000, -1000, -1000, 1418, 1418,
	1418, 998, 850, 850, -1000, 452, -1000, -1000, 26526, -224,
	1418, -1000,
}
var sqlPgo = [...]int{

	0, 3322, 3320, 3319, 3314, 3313, 3310, 3309, 3308, 3306,
	3305, 3304, 3300, 3299, 3297, 3296, 3295, 3293, 3289, 3288,
	3286, 3284, 3282, 3281, 3279, 3275, 3273, 3272, 3266, 3265,
	3263, 3262, 3261, 3260, 3259, 3256, 3255, 3254, 3253, 3252,
	3248, 3246, 3245, 3242, 3240, 3235, 37, 3234, 3232, 3231,
	3230, 3229, 3227, 3226, 3225, 3224, 3223, 3222, 3217, 3211,
	3210, 3209, 3208, 3207, 34, 3205, 215, 3204, 3203, 3202,
	3201, 3200, 3199, 3198, 3195, 3193, 3191, 213, 3185, 129,
	3183, 3181, 3180, 3178, 3177, 211, 3175, 3173, 3172, 3169,
	3168, 3167, 3166, 3163, 130, 3162, 3160, 145, 3158, 3157,
	3156, 3155, 3154, 3153, 3148, 3145, 3144, 3143, 190, 3142,
	210, 3141, 3140, 3135, 3134, 3129, 3128, 3125, 3124, 3123,
	3120, 3114, 3113, 3112, 3111, 3108, 3107, 3106, 3105, 3103,
	3102, 3101, 3100, 3098, 3097, 3096, 3095, 209, 142, 3094,
	3093, 208, 207, 3091, 3090, 96, 92, 72, 3088, 97,
	133, 195, 5666, 183, 3085, 3083, 3081, 3079, 3076, 65,
	135, 138, 141, 131, 170, 3075, 3074, 71, 52, 36,
	29, 109, 3072, 3070, 3069, 2031, 95, 3058, 3054, 201,
	187, 3053, 990, 3049, 560, 108, 94, 73, 90, 3046,
	116, 18, 3041, 136, 102, 3038, 127, 70, 30, 5829,
	6260, 3036, 105, 216, 76, 212, 172, 169, 184, 167,
	132, 86, 3035, 191, 3033, 62, 155, 3032, 3029, 3026,
	54, 149, 74, 3022, 8, 3, 143, 25, 87, 12,
	3021, 11, 3018, 3016, 3015, 3014, 26, 128, 3013, 113,
	67, 3009, 35, 3006, 14, 173, 3003, 166, 99, 2995,
	2993, 200, 157, 154, 10, 171, 2992, 2981, 2979, 2970,
	2969, 103, 21, 101, 2968, 2966, 110, 185, 2965, 60,
	139, 75, 98, 202, 91, 165, 84, 164, 150, 178,
	2964, 2956, 2954, 151, 2953, 2952, 117, 161, 2951, 2950,
	214, 33, 55, 182, 56, 2948, 2947, 124, 2944, 158,
	2943, 2942, 2941, 206, 140, 159, 5, 69, 100, 27,
	13, 179, 120, 88, 82, 2940, 3092, 1581, 1560, 2936,
	114, 85, 40, 89, 125, 199, 38, 2935, 2934, 1506,
	2933, 2932, 2931, 2930, 146, 2929, 2926, 2925, 112, 53,
	78, 2924, 126, 63, 7, 238, 203, 79, 162, 188,
	194, 2923, 144, 2922, 93, 118, 2921, 152, 192, 350,
	2919, 277, 115, 2917, 168, 2915, 2914, 2913, 2912, 50,
	2911, 2910, 270, 2909, 119, 2905, 2904, 148, 107, 134,
	66, 43, 2903, 64, 28, 2902, 153, 32, 2901, 3126,
	61, 0, 4741, 5017, 5979, 2900, 665, 2898, 160, 104,
	2897, 2895, 2894, 83, 2893, 57, 2891, 2890, 49, 2889,
	16, 6, 9, 19, 17, 439, 123, 2888, 2887, 80,
	106, 121, 2886, 204, 176, 2885, 2884, 2883, 68, 2882,
	24, 2876, 22, 2875, 2872, 31, 4, 20, 2871, 2864,
	186, 2854, 189, 2853, 2842, 2555, 2840, 196, 111, 2837,
	137, 180, 2834, 2832, 2830, 2827, 193, 2825, 198, 2824,
	15, 23, 1, 2823, 2817, 2816, 156, 2, 2379, 2815,
	2814, 58, 163, 2813, 2812, 147,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 7, 7, 8, 8, 8, 34, 34, 10, 10,
	9, 9, 9, 11, 11, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 24, 24, 14, 14,
	26, 26, 15, 15, 27, 27, 447, 447, 18, 29,
	19, 30, 12, 448, 448, 448, 448, 22, 20, 20,
	31, 31, 148, 148, 148, 148, 17, 17, 25, 25,
	161, 161, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 446, 446, 163, 163, 162, 158, 158,
	449, 449, 164, 164, 164, 166, 166, 35, 35, 93,
	93, 93, 94, 94, 95, 95, 149, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 81, 81, 389, 389,
	390, 390, 144, 144, 145, 145, 145, 145, 146, 146,
	147, 147, 147, 49, 37, 37, 37, 37, 37, 37,
	37, 38, 38, 38, 38, 39, 39, 39, 39, 39,
	39, 40, 40, 40, 40, 40, 40, 47, 47, 47,
	47, 138, 138, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 454, 454, 455, 455, 456, 456, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 61, 61, 238, 238, 214, 214,
	62, 62, 62, 63, 63, 64, 64, 51, 51, 442,
	442, 252, 252, 356, 356, 66, 66, 67, 67, 67,
	67, 67, 67, 68, 68, 68, 68, 68, 68, 68,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	75, 75, 75, 76, 76, 76, 73, 73, 73, 71,
	71, 71, 70, 70, 70, 74, 74, 74, 72, 72,
	72, 253, 253, 77, 77, 77, 77, 77, 77, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 358, 358, 78, 78, 78, 327,
	327, 82, 82, 82, 284, 284, 83, 83, 83, 83,
	83, 84, 84, 84, 84, 96, 96, 96, 96, 445,
	445, 245, 245, 179, 179, 179, 179, 89, 89, 89,
	89, 90, 90, 90, 91, 91, 143, 143, 102, 102,
	102, 102, 102, 101, 101, 101, 101, 101, 101, 41,
	41, 41, 42, 42, 43, 43, 44, 44, 45, 45,
	46, 46, 46, 46, 46, 104, 104, 450, 450, 106,
	103, 103, 103, 105, 105, 105, 105, 107, 108, 108,
	108, 108, 108, 108, 109, 109, 383, 383, 260, 260,
	381, 381, 397, 397, 382, 382, 218, 218, 218, 218,
	218, 219, 219, 219, 388, 388, 388, 388, 388, 388,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 128, 128, 128, 137, 137, 137, 137, 137, 137,
	137, 130, 130, 130, 119, 119, 111, 111, 111, 111,
	111, 115, 115, 115, 115, 115, 112, 112, 121, 121,
	121, 121, 116, 116, 118, 118, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 113, 113, 113, 113, 123,
	123, 123, 123, 290, 290, 290, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 133, 133, 133, 133,
	133, 133, 341, 341, 129, 129, 129, 129, 132, 132,
	132, 132, 274, 274, 126, 126, 126, 127, 127, 127,
	131, 131, 134, 134, 134, 134, 114, 114, 114, 459,
	459, 459, 135, 135, 125, 125, 136, 136, 136, 136,
	136, 136, 136, 136, 124, 124, 124, 124, 117, 443,
	443, 440, 440, 440, 440, 440, 440, 440, 441, 441,
	444, 444, 87, 87, 87, 56, 56, 460, 460, 460,
	57, 57, 461, 461, 461, 458, 458, 458, 458, 458,
	458, 458, 458, 220, 220, 221, 221, 308, 308, 308,
	308, 308, 224, 224, 165, 165, 165, 227, 228, 228,
	225, 225, 226, 226, 226, 230, 230, 229, 232, 232,
	231, 307, 404, 404, 406, 406, 406, 406, 406, 406,
	406, 408, 408, 408, 408, 408, 408, 408, 408, 408,
	408, 402, 402, 402, 403, 398, 398, 399, 399, 399,
	399, 222, 222, 223, 223, 223, 223, 400, 401, 243,
	243, 344, 405, 405, 407, 407, 409, 462, 462, 462,
	462, 462, 462, 463, 463, 306, 306, 236, 236, 410,
	410, 410, 410, 411, 411, 411, 411, 411, 414, 413,
	412, 412, 412, 412, 412, 337, 337, 337, 60, 60,
	60, 271, 271, 270, 270, 272, 272, 272, 272, 272,
	272, 272, 272, 272, 272, 272, 272, 272, 272, 140,
	140, 58, 58, 58, 171, 171, 55, 55, 55, 465,
	465, 59, 59, 59, 466, 466, 65, 65, 65, 65,
	65, 65, 54, 54, 54, 54, 54, 467, 467, 291,
	291, 289, 289, 242, 242, 343, 183, 183, 159, 159,
	159, 21, 23, 23, 16, 16, 32, 32, 33, 33,
	28, 28, 451, 451, 452, 452, 88, 88, 92, 92,
	92, 100, 100, 139, 139, 139, 139, 139, 139, 139,
	36, 36, 36, 36, 48, 48, 48, 48, 98, 469,
	469, 469, 99, 99, 468, 468, 178, 178, 178, 178,
	180, 180, 303, 303, 304, 304, 470, 470, 305, 305,
	305, 305, 173, 172, 174, 174, 53, 53, 53, 167,
	167, 168, 168, 169, 169, 170, 170, 471, 471, 85,
	85, 85, 142, 142, 213, 213, 299, 299, 299, 237,
	237, 188, 188, 302, 302, 300, 300, 300, 300, 269,
	269, 269, 141, 141, 250, 250, 262, 262, 263, 263,
	353, 353, 264, 97, 97, 152, 152, 150, 150, 150,
	150, 150, 150, 472, 472, 151, 151, 151, 153, 153,
	153, 153, 153, 153, 153, 156, 156, 156, 156, 157,
	157, 157, 155, 155, 421, 421, 421, 423, 423, 424,
	420, 420, 422, 422, 464, 464, 273, 273, 273, 234,
	235, 233, 233, 240, 240, 239, 241, 241, 342, 342,
	342, 267, 267, 267, 267, 294, 294, 292, 292, 293,
	293, 295, 295, 296, 296, 296, 297, 297, 298, 298,
	266, 266, 323, 323, 154, 154, 154, 247, 247, 247,
	248, 248, 314, 314, 314, 314, 314, 314, 315, 315,
	313, 313, 313, 313, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 346, 346, 249, 249, 347, 301, 301,
	438, 438, 438, 439, 439, 340, 340, 348, 348, 348,
	348, 348, 348, 338, 338, 339, 339, 354, 355, 355,
	277, 277, 277, 277, 275, 275, 278, 278, 278, 278,
	276, 276, 349, 349, 349, 349, 268, 268, 350, 350,
	350, 351, 309, 310, 310, 359, 359, 359, 359, 359,
	374, 246, 246, 246, 246, 246, 473, 473, 360, 360,
	360, 360, 360, 360, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 364, 364, 364, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 373, 373, 373,
	373, 373, 365, 365, 370, 370, 371, 371, 371, 366,
	367, 372, 372, 372, 372, 474, 474, 376, 376, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 362, 362,
	362, 369, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 285, 285, 286, 286, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 318, 318, 318, 318, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 415, 415, 415, 415, 415, 415, 415,
	415, 418, 418, 419, 419, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 417, 417, 425, 425, 426, 426, 428, 428,
	429, 429, 430, 431, 431, 431, 432, 433, 433, 427,
	427, 434, 434, 434, 434, 435, 435, 436, 436, 436,
	436, 436, 437, 437, 437, 437, 437, 329, 329, 330,
	330, 336, 336, 336, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	181, 181, 181, 181, 181, 258, 258, 256, 256, 256,
	259, 259, 257, 257, 255, 255, 254, 254, 326, 326,
	324, 324, 328, 328, 279, 279, 375, 375, 375, 375,
	375, 375, 375, 280, 280, 280, 288, 281, 281, 282,
	282, 282, 282, 282, 320, 321, 283, 283, 283, 322,
	322, 331, 335, 335, 334, 333, 333, 332, 332, 311,
	311, 312, 312, 265, 265, 475, 475, 261, 261, 352,
	352, 352, 352, 216, 216, 251, 251, 215, 215, 208,
	208, 209, 209, 209, 209, 244, 244, 377, 377, 377,
	378, 379, 380, 325, 198, 197, 185, 186, 196, 195,
	194, 184, 187, 191, 192, 193, 189, 190, 204, 203,
	202, 200, 201, 357, 210, 210, 211, 211, 211, 212,
	212, 212, 212, 182, 182, 205, 205, 206, 207, 207,
	199, 199, 199, 175, 175, 175, 176, 176, 177, 177,
	387, 387, 385, 385, 385, 386, 386, 386, 386, 384,
	384, 384, 384, 384, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 393,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 396,
	396,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 9,
	6, 9, 6, 5, 6, 5, 1, 1, 5, 5,
	6, 6, 4, 4, 4, 4, 3, 4, 4, 7,
	4, 7, 5, 3, 5, 7, 4, 12, 4, 12,
	1, 3, 5, 5, 2, 5, 3, 6, 4, 6,
	5, 6, 6, 4, 8, 3, 4, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 3, 1, 3, 1, 6, 4, 9,
	7, 12, 12, 12, 9, 2, 7, 2, 1, 1,
	1, 3, 3, 0, 3, 1, 3, 1, 1, 3,
	2, 5, 0, 5, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 3, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 6, 6, 6,
	3, 1, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 3, 3, 4, 3, 4, 7, 4, 4,
	4, 3, 5, 7, 4, 3, 3, 4, 3, 3,
	3, 3, 3, 2, 0, 1, 0, 1, 0, 3,
	3, 3, 3, 3, 6, 4, 4, 4, 3, 5,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 1,
	1, 2, 1, 2, 7, 3, 2, 0, 1, 3,
	3, 1, 0, 1, 2, 2, 1, 6, 5, 1,
	2, 1, 3, 2, 0, 8, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 3, 5,
	3, 1, 3, 2, 2, 5, 3, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 3, 5, 7, 2, 3,
	0, 3, 5, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 3, 3, 1, 1, 1, 1, 1, 2,
	2, 5, 7, 3, 3, 3, 3, 4, 4, 4,
	3, 4, 4, 3, 4, 4, 5, 3, 5, 5,
	5, 3, 3, 3, 4, 3, 4, 3, 5, 4,
	5, 3, 4, 5, 3, 4, 3, 4, 3, 3,
	4, 4, 5, 0, 1, 1, 3, 2, 4, 3,
	3, 5, 4, 3, 5, 3, 5, 4, 6, 4,
	6, 4, 1, 0, 3, 4, 4, 5, 7, 5,
	3, 3, 2, 0, 4, 2, 3, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 3, 4, 3, 1,
	1, 1, 2, 3, 2, 3, 6, 6, 7, 9,
	7, 9, 3, 4, 5, 5, 5, 3, 5, 2,
	0, 1, 1, 1, 1, 3, 2, 2, 2, 1,
	2, 0, 3, 3, 2, 10, 13, 0, 2, 3,
	9, 12, 0, 2, 3, 1, 1, 2, 2, 2,
	2, 1, 0, 1, 0, 1, 3, 1, 1, 1,
	1, 3, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 4, 2, 5, 5, 5,
	2, 8, 9, 6, 5, 3, 1, 5, 8, 5,
	11, 3, 0, 2, 4, 3, 3, 1, 5, 1,
	3, 1, 2, 0, 1, 2, 2, 0, 1, 3,
	3, 2, 2, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 5, 8,
	4, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 1, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 1,
	1, 8, 7, 5, 0, 1, 6, 7, 6, 5,
	3, 4, 14, 17, 14, 17, 4, 0, 2, 2,
	0, 1, 0, 1, 3, 2, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 6, 8, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 0, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 4, 2, 1,
	3, 1, 3, 8, 5, 3, 4, 3, 0, 2,
	2, 0, 10, 3, 2, 0, 1, 3, 1, 1,
	3, 3, 5, 1, 1, 3, 3, 2, 3, 4,
	3, 4, 5, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 3, 1, 3, 2, 4,
	5, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 1, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 5, 6,
	4, 6, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 1, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 2, 1, 0, 2, 5, 7, 2, 1,
	1, 2, 4, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 4, 1, 2, 1, 4,
	1, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	2, 5, 1, 4, 2, 5, 1, 4, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 1, 5, 5, 3, 1, 1, 1, 2,
	2, 2, 4, 3, 5, 6, 8, 6, 5, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 3, 3, 3, 0, 1, 4, 2, 2, 2,
	2, 2, 3, 2, 2, 3, 0, 4, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 1, 2, 3,
	2, 3, 2, 3, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	1, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 7, 1,
	7, 5, 3, 1, 1, 1, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 458, -79, -49, -47, -82, -83, -67,
	-84, -78, -96, -100, -88, -102, -139, -3, -35, -37,
	-50, -66, -68, -77, -86, -85, -87, -89, -93, -92,
	-81, -41, -97, -101, -110, -140, -141, -142, 82, 68,
	123, 104, 109, 156, 288, 317, 327, 311, -105, -106,
	346, -36, -48, -99, -98, -4, -10, 27, 39, -38,
	-39, -40, 53, -58, -55, -52, -61, -453, 84, -422,
	-69, -72, -74, -457, 114, 129, 173, 280, -90, -91,
	313, 315, 130, -43, -42, 124, -150, -152, -103, -104,
	-143, -111, -112, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, -128, -129,
	-130, -131, -132, -133, -134, -135, -136, 349, 395, 40,
	358, 69, 117, 321, 21, -5, -6, -7, -8, -9,
	-11, -23, -51, -53, -54, -56, -57, -65, -59, -60,
	-421, -70, -71, -73, -75, -76, 312, -153, -151, 455,
	408, -13, -18, -19, -14, -15, -17, -20, -16, -24,
	-29, -30, -26, -27, -25, -28, -31, -32, -33, -34,
	-21, -22, -12, 426, 434, -156, -154, -155, -157, 334,
	416, 372, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, -200, -205, -206, -207, -199, -175, -393, -396,
	4, -391, -394, 135, 181, 248, 21, 22, 23, 24,
	25, 27, 37, 38, 39, 40, 43, 45, 46, 49,
	50, 51, 52, 53, 54, 57, 62, 67, 68, 69,
	70, 71, 72, 77, 74, 75, 76, 79, 81, 82,
	83, 86, 87, 95, 96, 97, 98, 99, 100, 104,
	107, 106, 109, 112, 113, 114, 116, 118, 119, 121,
	123, 124, 127, 125, 378, 126, 128, 129, 130, 131,
	141, 142, 143, 145, 146, 148, 150, 154, 155, 157,
	161, 163, 164, 165, 166, 172, 173, 175, 176, 182,
	177, 183, 187, 190, 189, 191, 192, 193, 184, 198,
	202, 203, 204, 206, 207, 210, 211, 212, 213, 216,
	215, 218, 221, 222, 225, 226, 229, 230, 232, 233,
	236, 234, 237, 235, 238, 241, 239, 240, 243, 244,
	246, 245, 170, 253, 254, 256, 257, 258, 274, 261,
	262, 263, 266, 267, 270, 273, 275, 276, 277, 278,
	279, 280, 281, 283, 284, 286, 288, 290, 292, 293,
	294, 295, 296, 297, 299, 300, 302, 303, 304, 305,
	306, 311, 308, 309, 310, 312, 313, 314, 315, 317,
	319, 320, 321, 322, 324, 326, 347, 348, 360, 327,
	328, 329, 330, 331, 332, 333, 337, 341, 338, 339,
	340, 342, 335, 336, 343, 344, 346, 349, 351, 353,
	354, 357, 358, 359, 361, 364, 365, 366, 362, 363,
	356, 371, 369, 370, 373, 374, 375, 376, 377, 379,
	381, 389, 390, 392, 395, 396, 397, 387, 399, 400,
	403, 404, 405, 406, 407, 412, 408, 410, 413, 414,
	415, 421, 420, 427, 428, 430, 431, 432, 32, 41,
	42, 44, 47, 58, 59, 60, 63, 101, 102, 122,
	132, 133, 144, 158, 160, 167, 168, 169, 188, 194,
	196, 200, 219, 251, 252, 268, 272, 285, 287, 298,
	323, 352, 367, 382, 383, 384, 385, 391, 393, 416,
	417, 418, 422, 429, 259, -193, 2, -175, -175, 288,
	26, 2, 26, 284, 336, 374, 376, 2, -445, -245,
	2, 26, -179, -175, 84, 156, 334, -193, 2, -445,
	-245, 24, 2, -175, 2, -180, 2, 327, -175, 458,
	79, 226, 62, 323, 343, -108, 390, -107, 382, 329,
	-109, -383, 2, 241, -175, 458, 458, 458, 458, 2,
	372, 277, 420, 335, 409, 97, 295, 181, -440, 2,
	4, -394, -391, -209, -208, 372, 97, -207, -199, 448,
	-206, 458, 458, 458, 2, 203, 204, 294, 293, 343,
	344, 458, 458, 458, 2, 25, 56, 78, 81, 103,
	131, 151, 154, 264, -454, 233, 274, 292, 329, 342,
	371, 379, 392, -458, 359, 57, 409, -465, 397, 112,
	-289, 97, 376, 374, 226, 155, 404, 319, 159, 402,
	107, 187, 407, 406, 458, 458, 25, 56, 65, 81,
	112, 131, 151, 154, -456, 274, 292, 326, 329, 342,
	371, 379, 397, 392, 2, 420, 335, 372, 181, 97,
	409, 319, 291, -79, 2, 455, 29, 346, -149, 372,
	197, 2, -175, 203, 204, 2, 458, 458, -440, 2,
	203, 204, 2, 197, 2, 57, 331, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 2, -137, 343, 359, 165, 39,
	62, 26, 67, 278, 98, 157, 181, 182, 211, 78,
	79, -290, 38, 204, 203, -341, 373, 330, 336, 369,
	390, 84, 410, 320, 432, 296, 125, 4, 97, 241,
	345, 382, 226, 71, -464, 2, 372, -468, 2, 390,
	390, 2, -468, 2, -468, 2, -178, 2, 390, 386,
	-469, 390, 429, 458, 458, 458, 458, 458, 458, 458,
	458, 458, 458, 458, 458, -151, -153, -152, 458, 458,
	458, 458, 458, -137, 343, 2, 62, 26, -472, 149,
	-239, -240, 401, 195, 120, 265, -150, -152, 2, -421,
	-381, 2, -316, -397, -318, 446, 447, 441, 247, 433,
	-329, 103, 402, 259, -396, -319, -331, 122, 323, -259,
	8, 9, 5, 6, 7, -182, -361, -325, -369, 394,
	134, 250, -212, 460, 10, 455, -418, -152, -330, 33,
	160, 55, -385, -211, -363, -371, -367, -368, -473, 45,
	51, 50, 379, 240, 337, 338, 353, 339, 340, 43,
	412, 177, 256, 258, 189, 4, 196, -210, -199, -415,
	-416, -391, -392, 188, 194, 190, 352, 191, 192, 193,
	42, 298, 145, 146, 144, 113, 102, 101, 252, 47,
	46, 44, 417, -372, 99, 382, 383, 384, 385, 206,
	207, -175, -393, 65, 89, 90, 88, 93, 92, 94,
	91, 345, 409, 56, 32, 167, 168, 200, 251, 169,
	63, -417, 363, 85, 153, 186, 171, 199, 201, 205,
	220, 223, 242, 249, 269, 271, 318, 350, -474, 418,
	132, 133, 272, 285, 367, 391, 393, 158, 219, 58,
	59, -423, 299, -424, -193, -423, 458, 458, 459, 458,
	-233, -234, -235, 2, 26, 110, 455, 2, -345, 2,
	453, -349, -152, 214, -348, 455, -346, -200, 260, -419,
	324, -415, -416, -182, -199, -211, 4, -236, 455, 457,
	97, 372, 66, 2, -284, 455, -175, 26, 259, 386,
	459, -327, 455, 259, 152, 262, -175, 2, 2, 347,
	2, 455, -108, 60, 390, -304, 2, -305, -172, -173,
	-174, -354, 202, 290, 297, 435, 432, -381, -450, 152,
	438, 386, -381, -260, 457, 2, -349, 167, -200, 2,
	-197, -384, 4, -391, -394, -392, -395, 65, -393, 26,
	28, 29, 30, 31, 33, 34, 35, 36, 48, 55,
	56, 61, 64, 66, 78, 84, 88, 89, 91, 90,
	92, 93, 94, 103, 105, 108, 110, 111, 115, 117,
	120, 134, 136, 149, 151, 152, 156, 159, 162, 174,
	185, 195, 197, 214, 217, 224, 227, 228, 247, 250,
	255, 259, 260, 264, 265, 282, 289, 301, 316, 334,
	345, 355, 368, 372, 380, 386, 388, 394, 401, 402,
	409, 411, 419, 423, 424, 425, 426, -396, 2, -349,
	167, 2, -202, 167, -349, -205, 2, -389, 167, -387,
	10, -386, 5, 4, -391, -394, -392, 2, -184, -175,
	2, -196, -384, 2, -215, 167, -200, -201, -205, 386,
	459, -251, -208, -209, -244, -175, 457, -316, 2, -97,
	2, -316, 167, 2, -97, 167, 2, -316, 167, 2,
	-97, 167, 2, 2, 2, 392, 2, 81, 167, -175,
	372, 96, 2, 310, -455, 326, 396, 420, 2, 2,
	2, 2, 2, 2, 2, 372, 335, -466, 299, -189,
	2, -175, 149, -389, 167, 2, -389, 167, 2, -203,
	-205, -203, 181, 198, -184, 167, 2, 376, 374, 376,
	374, 152, 2, 197, 2, 197, 2, -350, 2, -351,
	-200, 2, 2, 2, 2, 2, 167, -175, 372, 96,
	2, 213, 2, 2, 2, 2, 2, 2, 2, 2,
	2, -253, 167, 2, -200, -253, 167, 2, -253, 167,
	2, -216, 167, 2, -215, -184, 167, 2, -390, 167,
	2, -389, -390, 167, 2, -358, 2, -357, -386, 416,
	-79, 455, 343, 455, -389, -200, -200, -316, -97, 152,
	-316, -97, -149, 149, 2, 97, 372, -137, 2, 149,
	411, 2, 8, 2, -389, 330, 296, 141, 2, 347,
	2, 62, -290, 432, 152, 2, 152, 2, -274, 2,
	426, -443, 2, 259, 152, 2, 152, 2, 152, 2,
	152, 2, 152, 2, 293, 344, 204, 2, -97, 423,
	-316, 423, 2, 389, 212, 126, 152, -274, 2, 152,
	2, 152, 2, 5, 2, 202, 290, 360, 2, -200,
	-459, 2, 372, 420, 335, 2, 2, 74, 75, 152,
	2, 152, 432, 2, -268, -349, -303, -304, -303, 386,
	-180, -472, -239, -240, -137, 347, 2, 2, -472, -267,
	-292, -293, 224, 136, 255, -273, 26, 110, -273, -273,
	49, 456, 456, 11, 12, 64, 37, 446, 447, 448,
	449, 147, 450, 451, 444, 445, 443, 436, 437, 440,
	208, 209, 80, 439, 438, 73, 231, 325, 137, 138,
	139, 140, 307, 178, 179, 180, 14, 15, 16, 30,
	264, 223, 433, 171, 350, 441, 17, 18, 19, 199,
	201, 249, 41, 174, -181, -217, -316, -316, -316, -316,
	-316, 271, 455, -265, -311, 453, -152, 455, 455, 455,
	5, 455, 5, -380, 8, -152, -316, -329, 456, -257,
	455, -152, -329, -324, 455, 323, 453, 455, -332, -316,
	457, -425, 427, -365, 455, 287, -364, 455, -364, -364,
	421, -362, 455, 434, 428, 455, -362, 455, 455, 149,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 421, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 459, -423, -236, 455, -261, -352, -316,
	448, -261, -261, 259, -254, -316, 85, -277, 205, 242,
	153, 220, 318, 186, -380, -80, -66, -77, -85, -97,
	-110, -141, -142, -313, 460, -340, 434, -152, -346, -199,
	-152, -348, 455, -345, -340, 448, -200, 455, 152, 455,
	457, 152, -244, -384, -184, -200, -210, -211, 109, -254,
	-440, -244, -179, 34, -326, -359, -360, -373, -361, -370,
	-366, -369, 303, 304, 302, 306, 305, 45, 51, 50,
	379, 240, 337, 338, 353, 339, 340, 43, 412, 177,
	256, 258, 189, 4, 44, 417, -372, 196, 188, 194,
	190, 352, 191, 192, 193, 42, 298, 145, 146, 144,
	113, 102, 101, 252, 47, 46, 99, 382, 383, 384,
	385, 206, 207, 418, 363, 58, 59, -440, -244, 149,
	-383, -254, 34, -304, 2, -470, 459, 222, -219, 230,
	246, 164, 260, 430, 253, -388, 5, 4, -325, -337,
	103, 226, -369, 9, 447, -377, 8, 446, -382, -381,
	87, 457, -384, -161, 308, -160, 23, 27, 114, 414,
	127, -226, 183, 277, 122, 356, 405, -447, -448, 328,
	377, 378, 76, 253, 308, 122, -270, -272, 34, 95,
	244, 273, 52, 175, 235, 236, 358, 422, 122, 308,
	426, 122, -448, 308, -448, -163, 356, 405, -447, -448,
	328, 308, -162, -226, 122, 460, -94, -389, 455, -251,
	459, 459, -384, 448, 122, 122, 122, 122, 2, 2,
	247, 2, 2, 2, 154, -458, -456, 2, 2, 2,
	-200, 167, -202, 167, 2, -205, 420, -238, 259, -442,
	-252, 372, -200, -171, -420, 426, 247, 247, 34, 455,
	2, -186, 167, 2, -176, -175, 181, -420, 247, -350,
	-213, -200, -213, 346, -193, 34, -313, 122, 2, 2,
	2, -175, -164, 459, 54, 314, 122, -164, 122, -164,
	122, -164, 459, 122, -164, 122, 459, 122, 122, 456,
	459, -358, -389, -147, 426, 152, 84, 455, 455, -149,
	-95, -94, -389, -442, -184, 2, -200, 2, 372, 206,
	-389, -389, -389, -383, 26, 348, 2, 293, 344, 75,
	-200, 372, 97, 181, 68, -444, 149, -441, 319, -440,
	-200, 97, -200, 97, -200, 97, -200, -200, 2, 2,
	2, 2, 72, 72, 149, 2, 389, 2, 389, 2,
	-175, -175, -175, 222, -200, 149, 372, 181, 97, 372,
	-164, 459, -180, -472, -267, -383, -472, -293, -292, -295,
	-316, 26, -298, 143, 243, -316, -318, -151, -151, -151,
	-241, -342, -316, 289, 181, -374, -359, -359, -198, -384,
	382, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, -316, -316, -316, -316,
	-316, -316, -316, -316, -316, -316, 223, 171, 350, 41,
	174, -316, 386, -316, -316, -316, -316, 239, 247, 250,
	394, 134, 403, 110, 253, -475, 368, 36, -322, -152,
	-258, 455, -336, 31, 355, 26, -329, 455, 2, -311,
	-316, -312, -255, -254, -254, 456, 419, 26, 110, 448,
	2, 8, -285, -287, 431, 238, 100, 166, 237, -286,
	333, 456, 459, 34, 456, -316, -255, -328, -324, -254,
	-335, -334, 423, -384, 448, -426, 142, 159, 8, -378,
	8, -378, 382, 382, 8, -378, -378, 455, 456, 2,
	456, 2, 456, 2, 456, 2, 456, 2, -316, -316,
	-316, -316, -316, -316, -316, -254, -279, 2, -375, -254,
	4, 431, 238, 100, 166, 237, 333, -279, 2, -280,
	2, -316, -254, -281, -317, -318, 446, 447, 441, -329,
	-282, 2, -316, -255, -316, 48, 217, 388, -283, -316,
	152, -254, -254, 2, -254, 2, -424, 34, -254, -247,
	459, 152, 34, 4, -247, -247, 455, 456, 459, -278,
	163, 234, 229, -278, -345, -277, 205, -275, 269, -275,
	-275, -438, 455, 454, 458, 458, 458, 458, 458, -340,
	-185, 453, 461, -384, -339, -338, 34, -193, 266, -340,
	-340, 457, 456, -339, -200, 455, -254, -384, 361, 456,
	457, 199, 199, 199, 324, 456, 386, 426, -79, 261,
	456, 459, -246, 33, 453, -287, 455, -376, 421, 455,
	455, 152, -245, -450, 456, 390, -305, -218, 297, 354,
	309, 341, 370, 9, 8, 8, 459, -384, 459, -451,
	78, 386, 66, -307, 167, 66, -398, -187, 78, -399,
	-175, 61, 402, 289, 151, -451, 78, -451, 78, 78,
	346, 359, 49, -349, 37, 37, 26, -97, 218, 152,
	432, 372, 181, 386, -349, -272, -359, 95, 235, 236,
	49, -379, -377, 447, -379, 49, -379, -379, -379, 426,
	-202, -349, 386, 279, -389, 386, 459, 37, 37, 26,
	-97, 218, 152, 386, -215, -185, -355, -354, -390, -208,
	-175, 457, -316, -97, -316, -97, 122, 2, -466, 213,
	455, -222, 247, -271, -270, 247, -204, 2, -200, 152,
	-244, -356, 197, 459, -252, 279, 122, 122, 455, 118,
	295, 2, 259, 247, -186, 167, -167, 375, 122, -310,
	-309, 424, -299, -97, 455, 103, 34, -299, -262, -263,
	-353, -264, -187, 455, -193, -175, 2, -200, -253, -253,
	-253, -215, -216, -184, -389, -390, -390, -79, -357, 456,
	456, -146, 263, -145, -175, 5, -149, 411, -221, -308,
	-307, -402, -403, -398, 223, 181, 402, 198, 135, -237,
	-188, -187, 96, -147, -354, 459, -147, -147, -355, -355,
	-200, 149, 2, 2, -274, -200, -184, -215, -244, -244,
	-184, -184, -184, -97, -316, 343, 149, 149, 457, -274,
	295, 97, 372, 277, 181, -200, -215, -184, -200, -349,
	-472, -296, -377, 455, -297, 323, 324, 459, -159, 35,
	108, 210, -200, 432, 119, -316, -316, 386, -475, 368,
	-322, 119, -316, 239, 250, 394, 134, 403, 110, 253,
	152, 455, -317, -317, 456, -256, -316, -316, 454, 463,
	456, -240, 459, -239, -316, -254, -254, 456, 456, 386,
	386, 386, 386, 455, 457, -254, -244, 454, 454, 459,
	456, -333, -334, 115, -316, 457, -431, 270, 455, 455,
	456, 456, 459, 456, 432, 432, 456, 456, 456, -316,
	34, 459, 459, 459, 456, 459, 459, 459, 456, 456,
	152, 456, 456, -288, 282, 456, 11, 12, 446, 447,
	448, 449, 147, 450, 451, 444, 445, 443, 436, 437,
	438, 73, 231, 325, 14, 15, 16, 199, 174, -317,
	-317, -317, 456, -320, -321, 152, 149, 34, -283, -283,
	-283, 456, 152, -254, 456, 456, 455, 456, -310, -352,
	-248, 2, -345, -195, -384, -310, -310, -254, -316, 205,
	205, -276, 411, 259, -278, -345, -338, 456, -439, -380,
	-340, -339, -380, -315, -314, 150, 35, 108, 245, 170,
	-193, -236, -339, -339, -384, -340, 456, -249, -347, -419,
	-240, 457, -384, -138, 5, 250, -138, -138, -244, 24,
	283, -359, 453, 454, 8, 8, 455, -378, -378, -244,
	152, -381, -304, 400, 70, 297, 382, -381, -160, 308,
	-187, -187, -200, 247, -307, 167, -166, 247, -359, -194,
	-175, 455, 455, 210, 210, -187, -194, 167, -187, 167,
	-194, -194, -446, 297, 254, -316, 225, 295, 248, -161,
	308, -97, -97, -97, 455, -450, 411, 109, -200, -215,
	-204, 308, -210, -379, -379, -270, 308, -202, -389, 426,
	-184, -162, -97, -97, -97, 455, -185, -163, 308, -144,
	176, 456, 448, -175, 420, -175, -220, -223, -221, -187,
	-460, 428, 426, 122, 122, -236, -214, -200, 453, -147,
	-389, -200, -389, -389, -389, 2, 455, 2, -200, 122,
	259, 247, -168, 116, -471, 438, -184, -240, -316, -269,
	-302, 316, 259, -237, 416, -193, -269, -250, 459, 152,
	438, 457, -237, 2, -164, -164, -164, -164, -164, -79,
	-147, 459, 455, 438, 438, 455, -389, -389, 456, 459,
	-200, -186, 181, 181, -192, -176, 456, 459, 457, 455,
	-147, -94, 152, -44, 426, 372, 343, 343, -175, -196,
	-184, -200, -197, -215, -297, -316, -342, -200, 460, -316,
	-316, 119, 119, -316, -317, -317, -316, 119, 152, 455,
	-316, -326, 30, 30, 456, 459, -312, -316, 456, 419,
	-240, -240, 456, 5, 238, 166, 237, -286, 237, -286,
	-286, 8, 448, -384, 456, -324, 117, -316, 380, -384,
	448, -432, -190, 455, -175, 424, -239, -378, -362, -362,
	456, -374, -359, -316, -316, -316, -316, -316, -316, -320,
	-316, -374, -359, -317, -317, -317, -317, -317, -317, -317,
	-317, -317, -317, -317, -317, -317, -317, -317, -317, -317,
	-317, -317, 110, 247, 253, -317, -321, -320, -316, -316,
	-359, 456, 456, 456, -254, -79, -266, 159, -355, 459,
	-266, -266, 456, -345, -345, 455, -316, 205, 454, 456,
	459, -339, 454, 459, 462, 438, -236, 457, -338, 456,
	459, -301, 34, 456, -384, 262, 5, 8, 453, 454,
	456, -378, 456, 456, -244, -316, 386, 386, 122, 247,
	413, -404, -399, -316, -242, -343, -316, 455, 455, -158,
	114, 346, -452, 2, 122, -164, 122, -164, 430, 455,
	455, 386, 426, -254, -316, -148, 103, -383, -448, -448,
	386, 386, 279, 426, -254, 386, -147, 152, 2, 2,
	2, 456, 456, 459, -405, 34, 257, -175, -200, -202,
	34, -62, 426, -354, -380, -171, 2, -291, 411, -185,
	-200, 122, -169, 216, -471, -387, -420, -294, -292, -269,
	-261, 248, 77, 456, -310, -263, -248, -316, 2, 456,
	-145, -146, -389, -389, -389, -147, -149, -149, -308, 2,
	455, -186, -176, 455, -149, -188, 2, -390, -97, 263,
	-200, -274, -228, -227, 277, 253, -228, 260, 456, -159,
	-185, -316, -316, 119, 30, 30, -316, -316, -326, 456,
	-316, -316, -254, 454, 5, -316, 456, 456, 456, -316,
	457, -433, -175, -316, 456, 456, 456, 456, 459, 459,
	456, 456, 456, 456, -321, 152, 110, 253, 455, 456,
	456, -323, 162, 49, -345, -323, -323, -276, -244, -345,
	-313, -380, -314, -185, 453, -384, -347, 455, 457, 454,
	2, 453, 456, -187, -187, -307, 122, -406, 78, -408,
	64, 135, 84, 247, 250, 402, 289, 61, 103, 301,
	34, 456, 456, 459, -159, -242, -244, 247, 365, 103,
	247, 103, 96, 397, -187, -194, -244, -244, -200, 128,
	456, 459, 438, -204, -202, -389, 128, 456, -185, -390,
	-224, 184, -187, -403, -400, -401, 289, -407, -409, 135,
	289, -97, 2, 455, -222, -271, -97, 263, 454, 455,
	-175, 259, 455, -185, -170, 215, -471, -387, -167, -269,
	-300, 455, 259, -97, -240, 438, 456, 456, 96, 96,
	-242, 455, 455, -244, 96, 456, -45, -46, 181, 78,
	281, -197, 372, 181, -159, -316, -316, -316, 456, -240,
	-384, 448, -427, 277, 456, -316, -316, -317, 152, 455,
	-326, -428, 425, -316, -254, -428, -428, 456, -340, -380,
	2, 453, 2, -307, -194, -198, -191, -175, 135, 167,
	250, 210, 455, -317, -200, 455, 2, -462, 105, 185,
	-306, -463, 83, 366, -343, 456, 456, 250, 250, -316,
	-359, -164, -164, 456, 456, -316, 386, -383, 82, -381,
	-316, 386, -225, -226, 174, -405, 210, -191, 210, -461,
	426, -220, -460, -63, -64, 387, -354, -242, -200, -242,
	259, -471, -387, -168, 111, -244, 78, -294, -322, -147,
	455, 455, 456, -242, -242, 456, 455, -147, 459, 26,
	455, 26, 455, -200, -215, 456, -240, 49, 456, 456,
	-317, -326, 456, -429, -430, -190, -339, 454, 2, -408,
	-191, 247, -316, -177, 455, -316, 185, 106, 172, -224,
	455, 301, -183, 64, 455, 455, 455, 438, 152, 455,
	-460, 275, 455, 96, 244, 456, 34, -64, 9, 456,
	-291, 456, -200, -387, -169, 406, 248, 456, -194, -269,
	-390, -390, -306, 456, 456, -390, -46, -244, -244, -434,
	295, 324, 161, -254, 456, 459, 34, 122, 456, -410,
	232, -175, 456, 106, 172, -225, -244, -200, -449, 411,
	-198, -230, -229, -227, -232, -231, -227, -254, -381, 82,
	275, -254, -200, -243, -344, -187, 96, -224, -97, -306,
	455, -306, 455, -170, 346, -309, 456, 456, -224, -306,
	456, 456, 456, 456, -435, -436, 41, 399, 87, -316,
	-435, -435, -430, -432, 135, -411, -414, -413, 259, 351,
	153, 276, 456, 365, 422, -462, 456, -236, -316, 456,
	459, 416, 456, 459, 416, 456, 152, 456, 455, 456,
	459, -225, -461, -224, -242, -224, -242, -262, -147, -147,
	-225, -224, -147, -437, 121, -436, 286, 148, 323, 286,
	148, -437, -437, -191, -413, 259, -414, 259, 406, 107,
	-410, -229, 174, -231, 152, 275, -244, -344, -460, -225,
	456, -225, 456, -310, -225, 87, 159, 381, 244, 30,
	-412, 244, 314, 54, 346, -412, -411, 455, 455, 456,
	-467, 424, -306, -467, -306, 323, 267, -436, 22, 250,
	103, -462, -254, -254, -165, 54, 314, 2, -224, -224,
	456, 456, -225, -225, -225, 386, -467, -467, 455, -254,
	456, -225,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 359, 360, 362,
	363, 364, 366, 367, 369, 371, 373, 375, 376, 378,
	380, 382, 383, 384, 385, 386, 388, 390, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 450,
	0, 913, 915, 917, 919, 25, 26, 0, 0, 184,
	186, 188, 0, 213, 215, 217, 218, 220, -2, 0,
	313, 314, 316, 318, -2, -2, 0, 0, 437, 439,
	0, 0, 0, 459, 460, 0, 1003, -2, 453, 455,
	457, 520, 522, 524, 526, 528, 530, 532, 533, 535,
	537, 539, 541, 543, 545, 547, 549, 551, 553, 555,
	557, 559, 561, 563, 565, 567, 569, -2, -2, -2,
	0, -2, -2, -2, 931, 29, 31, 33, 35, 37,
	39, 58, 269, 270, 272, 274, 276, 279, 280, 282,
	1042, 320, 322, 324, 326, 328, 0, -2, 1054, 0,
	0, 41, 42, 43, 44, 45, 46, 47, 48, 65,
	66, 67, 68, 69, 70, 71, 72, 51, 53, 54,
	60, 61, 63, 0, 0, 1018, 1020, 1022, 1024, -2,
	0, 0, 7, 9, 11, 13, 15, 17, 19, 21,
	361, 365, 368, 370, 372, 374, 377, 379, 381, 387,
	389, 391, 808, 1651, 1665, 1666, 1667, 1670, 1671, 1672,
	1673, 1674, 1675, 2009, 2089, 2090, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 0, 415, 413, 1645, 416, 1844,
	418, 420, 307, 308, 309, 310, 311, 312, 0, 430,
	424, 429, 431, 433, 434, 435, 436, 410, 408, 0,
	430, 1697, 428, 911, 912, 906, 907, 1877, 941, 449,
	-2, -2, -2, 1978, -2, 481, -2, 488, 1981, 1879,
	491, 0, 493, -2, 496, 914, 916, 918, 27, 28,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	-2, -2, -2, -2, 0, 0, 1733, 1621, 1667, 1624,
	1619, 185, 187, 189, 190, 0, 0, 0, 0, 0,
	0, 214, 216, 219, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 715, 716, 0, 0, 721, 859, 860, 881,
	0, 0, 0, 0, 315, 317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 0, 0, 0, 0, 0,
	0, 0, 247, 353, 354, 0, 1043, 0, 0, 0,
	0, 165, 156, 0, 0, 704, 438, 440, 0, 151,
	0, 0, 910, 0, 167, 0, 0, 454, 456, 458,
	521, 523, 525, 527, 529, 531, 534, 536, 538, 540,
	542, 544, 546, 548, 550, 552, 554, 556, 558, 560,
	562, 564, 566, 568, 570, 571, 0, 0, 0, 0,
	-2, -2, 0, 0, -2, -2, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, -2, -2, -2, 0,
	0, 0, -2, -2, 0, 0, 0, 574, 576, 577,
	578, 0, 625, 642, 0, 850, 1044, 943, 921, 934,
	943, 923, 924, 925, 926, 927, 932, 933, 936, 0,
	928, 929, 930, 30, 32, 34, 36, 38, 40, 271,
	273, 275, 277, 281, 283, -2, 1016, 1017, 321, 323,
	325, 327, 329, 441, 0, 443, 0, 575, 1007, 0,
	-2, 0, 1048, 1048, 1048, 0, 0, 1017, 1015, 0,
	446, 447, 500, 501, 1279, 0, 0, 0, 0, 0,
	1519, 1363, 0, 502, -2, 1394, 1396, 1957, 1978, 1518,
	1398, 1399, 1400, 1401, 1402, 0, 0, 1405, 0, 1407,
	1408, 1409, 1410, 0, 1412, 0, 1416, 1417, 1418, 0,
	1962, 1598, 1663, -2, 1184, 1185, 1186, 1187, 1188, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1659, 0, 1485,
	1432, -2, 1684, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1742, -2, -2, -2, -2,
	-2, -2, -2, 1240, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1992, 1436, 1437, 1438, 1439, 1440, 1441,
	1442, 1443, 1444, 0, 1946, 1963, 1964, 1969, 1971, 1965,
	1954, 1455, -2, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 1241, -2,
	1958, 1959, 1974, 1975, 1980, 1985, 1986, 1961, 1970, -2,
	-2, 1034, 1852, 1037, 808, 1035, 1019, 1021, 0, 1023,
	0, 0, 0, 1028, 1051, 1049, 0, 1085, 1032, 1033,
	1043, 1103, 1126, 0, 1108, 0, 1126, 1152, 0, 1113,
	1872, 1433, 1434, 0, 1667, 1664, -2, 0, 0, 0,
	0, 0, 0, 210, 411, 0, 417, 419, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 451, 452, 0,
	476, 0, 480, 1953, -2, -2, 484, 944, 948, 949,
	950, 951, 0, 0, 0, 0, 0, 490, 0, 0,
	477, 478, 494, 497, 0, 49, 0, 1963, 1152, 50,
	0, 1635, 1689, 1690, 1691, 1692, 1693, 1992, 2008, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
	2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 52, 0,
	1963, 55, 0, 1963, 0, -2, 59, 0, 1963, 168,
	169, 1680, 1681, 1685, 1686, 1687, 1688, 62, 0, 1641,
	64, 0, 1638, 73, 0, 1963, 0, 1618, -2, 0,
	0, 696, 1615, 1620, 697, 1625, 0, 191, 192, 193,
	194, 195, 1963, 197, 198, 0, 200, 201, 1963, 203,
	204, 0, 206, 222, 223, 0, 225, 0, 1963, 0,
	0, 0, 231, -2, 248, 0, 245, 0, 235, 236,
	238, 239, 240, 241, 242, 0, 0, 0, 865, 287,
	285, 1646, 0, -2, 1963, 853, 856, 1963, 858, 870,
	1649, 0, -2, 0, 1041, 1963, 958, 717, 718, 719,
	720, 0, 306, 0, 971, 0, 973, 0, 993, 1158,
	1103, 249, 250, 251, 252, 253, 1963, 0, 0, 0,
	258, 0, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 144, 1963, 332, 351, 144, 1963, 335, 144, 1963,
	338, 144, 1963, 341, 1613, 144, 1963, 344, 345, 1963,
	347, 170, 348, 1963, 350, 0, -2, 404, 1653, -2,
	356, 0, -2, 0, 182, 0, 0, 702, 703, 0,
	908, 909, 0, 0, 461, 0, 0, 572, 573, 0,
	0, 583, 584, 585, 586, 1880, 1850, 1758, 590, 0,
	593, -2, 0, 0, 0, 597, 0, 601, 602, 603,
	0, 701, 605, 0, 0, 607, 0, 611, 0, 614,
	0, 616, 0, 618, -2, -2, -2, 629, -2, 0,
	633, 0, 635, 0, 0, 0, 0, 650, 651, 0,
	656, 0, 659, 660, 661, 0, 663, 664, 665, 666,
	0, 668, 669, -2, -2, 673, 675, 0, 682, 0,
	687, 0, 579, 580, 144, 1156, 920, -2, 922, 0,
	938, 1010, -2, 0, 442, 0, 445, 1014, 1008, 1013,
	1063, 1064, 0, 0, 0, 0, 1046, 1047, 0, 0,
	0, 1005, 1006, 0, 0, 0, 0, 1524, 1525, 1526,
	1527, 1528, 1529, 1532, 1533, 1530, 1531, 1534, 1535, 0,
	0, 0, 0, 0, 1536, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1537, 1538, 1539, 0,
	0, 1541, 0, 1543, 0, 0, 0, 0, 0, 0,
	1342, 1344, 1606, 0, 0, 1540, 1284, 1285, 1286, 1321,
	1322, 0, 0, 1395, 1603, 1602, 1397, 0, 1555, 0,
	1404, 0, 1276, 1411, 1632, -2, 0, 1519, 1550, 0,
	0, 1419, 1420, 1421, 0, 0, 1555, 0, 0, 1597,
	0, 1487, 0, 1220, 0, 1221, 1222, 0, 1223, 1224,
	1237, 1250, 0, 0, 0, 0, 1254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1242, 0, 0, 0, 1578, -2, 0,
	0, 0, 0, 0, 1036, 0, 0, 1089, 1607, 1611,
	1612, 1089, 1089, 0, 0, 1556, 1149, 1149, 0, 0,
	1145, 1145, 1145, 1143, 1120, 0, 392, 394, 396, 398,
	399, 400, 402, 1126, 0, 1136, 0, 1126, 1126, 0,
	-2, 1108, 0, 0, 1136, 1153, 1154, 0, 0, 0,
	0, 0, 0, 1668, 0, 0, 0, 1655, 0, 0,
	0, 422, 432, 1043, 0, 1558, 1175, 1169, 1178, 1179,
	1180, 1181, 1227, 1228, 1229, 1230, 1231, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, -2, 1238, 1240, 1261, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1233,
	0, 1208, 1208, 1208, 1225, 1226, 1249, 1260, 1252, 1260,
	1256, 1176, 1177, 1243, 1244, 1245, 1246, 0, 426, 0,
	0, 0, 0, -2, 486, 0, 946, 0, 952, 511,
	512, 513, 954, 955, 0, 489, 514, 515, 516, 517,
	518, 519, 0, 825, 0, 827, 1627, 0, 487, 504,
	492, 0, 498, 74, 903, 110, 0, 903, 903, 0,
	0, 131, 0, 0, 0, 0, 0, 0, 98, 106,
	86, 87, 0, 0, 0, 0, 56, 833, 0, 836,
	0, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 97, 0, 92, 76, 0, 0, 0, 100,
	108, 0, 135, 137, 0, 0, 1139, 152, 0, 695,
	0, 0, 1668, 1623, 0, 0, 0, 0, 224, 226,
	0, 228, 229, 230, 0, 864, 0, 237, 234, 278,
	782, 1963, 832, 1963, 830, 1650, 0, 0, 0, 304,
	299, 0, 301, 851, 0, 1040, 0, 0, 0, 0,
	871, 0, 1963, 876, 1637, 1676, 1677, 960, 0, 1164,
	0, 974, 0, 0, 1159, 0, 1161, 0, 255, 256,
	257, 0, 330, 0, 142, 143, 0, 333, 0, 336,
	0, 339, 0, 0, 342, 0, 0, 0, 0, 1043,
	0, 0, 0, 158, 0, 0, 0, 0, 0, 0,
	182, 154, 182, 182, 1139, 463, 1139, 465, 0, 0,
	587, 588, 589, 591, 592, 594, 595, -2, -2, 683,
	653, 0, 0, 0, 652, 604, 0, 689, 1868, 699,
	606, 1733, 609, 1733, 612, 1733, 615, 617, 620, 645,
	628, 632, 0, 0, 0, 637, 0, 639, 0, 641,
	653, 654, 657, 662, 667, 0, 0, 0, 0, 0,
	849, 0, 937, 1011, 1013, 444, 1009, 1061, 1062, 1067,
	1071, 1072, 1075, 1078, 1079, 1069, 1279, 1029, 1030, 1031,
	1055, 1056, 890, 0, 2089, 1280, 1170, 1281, 1282, 1634,
	0, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, -2, -2, -2, -2, -2, -2, -2, -2, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	-2, -2, -2, 1319, 1320, -2, 1542, 1544, 0, 1606,
	0, -2, 0, -2, -2, -2, -2, 1339, 0, 1341,
	1346, 1348, 1350, 0, 0, 0, 0, 1605, 1360, 1589,
	1590, 0, 0, 1521, 1522, 1523, 1345, 0, 1364, 1604,
	1601, 0, 0, 1554, 1054, 1423, 0, 0, 0, 0,
	1430, 0, 1633, 1275, 1262, 1263, 1264, 1265, 1266, 1267,
	1277, 1415, 1552, 0, 1551, 0, 0, 0, 1562, 0,
	1596, 1592, 0, 1656, 1662, 1495, 0, 0, 0, 0,
	1630, 0, 0, 0, 0, 0, 0, 0, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1565,
	-2, -2, -2, -2, -2, -2, -2, 0, 1469, 0,
	1471, 1556, 1575, 0, 0, 1365, 0, 0, 0, 1519,
	0, 1474, 1556, 1583, 0, 0, 0, 0, 0, 1556,
	0, 1588, 0, 1481, 0, 1483, 1038, 0, 0, 1164,
	0, 0, 0, 1610, 1164, 1164, 0, 1084, 0, 0,
	1146, 1147, 1148, 0, 0, 1149, 0, 1140, 1144, 1141,
	1142, 0, 0, 1126, 393, 395, 397, 401, 403, 1136,
	1100, 0, 0, 1636, 1106, 1135, 0, 808, 1125, 1136,
	1136, 0, -2, 1110, 0, 0, 1054, -2, 183, 807,
	0, 0, 0, 0, 412, 414, 0, 0, 406, 0,
	409, 0, 1165, 1168, 0, 1182, 0, 0, -2, 0,
	0, 0, 0, 0, 479, 0, 945, 953, 0, 508,
	0, 510, 0, 826, 1629, 1628, 0, 499, 0, 0,
	0, 0, 902, 114, 1963, 0, 146, 0, 0, 776,
	1642, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 88, 0, 0,
	0, 0, 0, 0, 0, 834, 835, 837, 843, 845,
	0, 839, 1631, 0, 840, 0, 842, 844, 846, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	89, 0, 0, 0, 0, 1617, 173, 1138, 0, 1616,
	1626, 0, 196, 199, 202, 205, 0, 232, 0, 0,
	724, 707, 0, 828, 831, 0, 808, 863, 1648, 0,
	286, 182, 0, 0, 300, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 1963, 962, 968, 0, 1054,
	1163, 0, 991, 976, 0, 0, 0, 991, 995, 996,
	998, 999, 0, 0, 1160, 0, 259, 352, 144, 144,
	144, 1614, 144, 144, 171, 346, 349, 355, 405, 1043,
	182, 180, 1829, 178, 175, 177, 0, 0, 0, 725,
	727, 728, 729, 730, 0, 1677, 0, 1787, 1677, 0,
	979, 981, 0, 149, 182, 0, 0, 298, 462, 467,
	581, 0, 622, 647, 596, 598, 599, 600, 700, 698,
	608, 610, 613, 631, 634, 636, 0, 0, 0, 649,
	0, 0, 0, 0, 0, 684, 685, 686, 688, 1157,
	1012, 0, 1073, 0, 1070, 1076, 1077, 0, 1058, 888,
	889, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1361, 0, -2, 1340, 1343, 1347, 1349, 1351, 0, 0,
	0, 0, 0, 0, 1545, 0, 1547, 1362, 1599, 1602,
	1517, 0, 0, 1053, 1054, 1054, 0, 1429, 0, 0,
	0, 0, 0, 0, 0, 1553, 0, 1560, 1561, 0,
	1422, 0, 1593, 0, 0, 0, 1431, 0, 0, 0,
	1232, 1206, 0, 1260, 1258, 1259, 1253, 1260, 1257, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 1454, 1466,
	0, 1468, 1470, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1368,
	1369, 1370, 1473, 1581, 1582, 0, 0, 0, 0, 0,
	0, 1479, 0, 1587, 1480, 1482, 1043, 1086, 1081, 1608,
	1139, 1088, 1090, 1609, 1639, 1081, 1081, 0, 1557, 0,
	0, 1130, 0, 0, 0, 1132, 0, 1121, 0, 1123,
	1136, 1105, 0, 0, 1098, 0, 1094, 1095, 1096, 1097,
	808, 1134, 1107, 1111, 1656, 0, 1155, 0, 1115, 1118,
	0, 0, 1669, 207, 211, 212, 208, 209, 421, 0,
	0, 1559, 0, 1171, 0, 0, 0, 0, 0, 425,
	0, 475, -2, 506, 507, 509, 0, 505, 111, 903,
	0, 0, 894, 0, 116, 1963, 125, 0, 753, 0,
	1640, 0, 0, 0, 0, 905, 0, 1963, 144, 1963,
	144, 127, 130, 0, 134, 132, 0, 0, 744, 75,
	903, 78, 82, 90, 0, 0, 0, 96, 0, 0,
	896, 0, 838, 841, 847, 57, 0, 898, 892, 0,
	891, 136, 80, 84, 91, 0, 900, 77, 0, 182,
	0, 153, 1622, 0, 0, 0, 0, 0, 723, 793,
	0, 0, 0, 0, 0, 0, 292, 288, 0, 297,
	303, 302, 854, -2, 857, 866, 0, 868, 880, 0,
	0, 0, 964, 968, 0, 967, 1041, 1066, 1162, 969,
	991, 0, 0, 0, 978, 975, 972, 1164, 0, 0,
	0, 0, 0, 254, 331, 334, 337, 340, 343, 357,
	157, 0, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 1677, 1677, 0, 1644, 0, 0, 0, 0,
	150, 155, 0, 464, 0, 0, 638, 640, 653, 676,
	677, 739, 0, 739, 0, 0, 1057, 890, 0, 1283,
	1324, 0, 0, -2, 0, 0, 1328, 0, 0, 0,
	-2, 0, 0, 0, 1546, 1548, 0, 1601, 1424, 0,
	0, 0, 1428, 1406, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 0, 1413, 1414, 1520, 1563, 1591, 1595, 0, 1657,
	1661, 1493, 1494, 1498, 1647, 0, 0, 0, 1251, 1255,
	1435, 0, 0, 0, 0, 0, 0, 0, 1564, 1574,
	1576, 1366, 1367, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, -2, -2, -2, 1384, 1385, 1386, -2,
	-2, -2, 0, 0, 0, 1577, 1579, 1580, 1584, 1585,
	0, 1476, 1477, 1478, 1586, 0, 1083, 0, 1087, 0,
	1083, 1083, 1050, 1128, 0, 0, 1151, 0, 1103, 1122,
	0, 1112, 1101, 0, 1102, 0, 1133, 0, 1109, 1114,
	0, 1117, 0, 1424, -2, 423, 407, 0, 0, 1173,
	1183, 0, 1235, 1239, 427, 1137, 0, 0, 0, 0,
	145, 751, 775, 0, 0, 883, 890, 0, 0, 118,
	0, 0, 0, 126, 0, 123, 0, 129, 133, 0,
	0, 0, 0, 0, 93, 94, 95, 0, 99, 101,
	0, 0, 0, 0, 0, 0, 147, 0, 227, 862,
	233, 733, 781, 0, 783, 0, 708, 0, 782, 832,
	0, 284, 0, 291, 0, 852, 867, 0, 0, 0,
	0, 0, 966, 968, 0, 959, 960, 991, 1065, 970,
	989, -2, 988, 0, 1054, 997, 994, 1000, 1001, 0,
	179, 0, 174, 176, 0, 160, 0, 0, 726, 731,
	0, 0, 0, 0, 0, 980, 982, 0, 166, 0,
	582, 648, 678, 738, 0, 0, 680, 1068, 1074, 1059,
	890, 1326, 1330, 0, 0, 0, 1332, -2, 0, 1354,
	-2, -2, 1549, 1600, 1403, 1054, 1425, 1427, 1278, 1594,
	0, 1500, 1497, 0, 1484, 1207, 1445, 1446, 0, 0,
	1449, 1451, 1452, 1453, 1573, 0, 0, 0, 0, 1475,
	1039, 1489, 0, 0, 1091, 1489, 1489, 1129, 0, 1131,
	1126, 1124, 1099, 1092, 0, 1657, 1116, 0, 0, 1166,
	1172, 0, 1234, 112, 113, 115, 0, 752, 0, 755,
	0, 0, 0, 0, 762, 763, 0, 0, 0, 0,
	0, 797, 806, 0, 885, 0, 0, 0, 120, 139,
	0, 0, 904, 0, 144, 144, 0, 0, 895, 0,
	0, 0, 0, 897, 899, 893, 0, 0, 901, 172,
	741, 0, 793, 785, 786, 787, 0, 792, 794, 0,
	0, 712, 709, 724, 707, 829, 861, 0, 289, 0,
	879, 0, 0, 0, 956, 968, 0, 961, 962, 305,
	0, 0, 0, 977, 1066, 0, 181, 182, 0, 0,
	0, 0, 0, 0, 0, 182, 466, 468, 0, 0,
	474, 737, 0, 0, 1060, 1334, -2, -2, 1355, 0,
	1658, 1660, 1054, 0, 1486, 0, 0, -2, 0, 0,
	0, 1025, 0, 1082, 1080, 1026, 1027, 1150, 1136, 0,
	1119, 0, 1174, 117, 0, 756, 757, 1643, 759, 0,
	761, 764, 0, 766, 1679, 0, 770, 777, 798, 0,
	733, 0, 803, 804, 884, 779, 0, 119, 121, 138,
	887, 122, 128, 0, 0, 79, 0, 0, 1727, 103,
	81, 0, 707, 740, 0, 784, 0, 795, 796, 710,
	0, 0, 0, 290, 293, 0, 296, 0, 880, 0,
	0, 0, 963, 964, 0, 0, 0, 991, 1002, 159,
	0, 0, 806, 0, 0, 774, 0, 164, 0, 470,
	0, 472, 0, 679, 681, 1426, 1504, 0, 1447, 1448,
	-2, 0, 1392, 1488, 1490, 0, 1104, 1093, 1167, 754,
	758, 0, 0, 812, 0, 0, 0, 801, 802, 741,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	705, 0, 0, 713, 0, 733, 0, 294, 295, 806,
	0, 806, 0, 965, 966, 0, 984, 985, 987, 992,
	0, 0, 733, 806, 773, 0, 469, 0, 0, 0,
	0, 0, 0, 1499, 1393, 0, 0, 0, 765, 817,
	0, 0, 0, 799, 800, 797, 0, 808, 124, 0,
	886, 0, 745, 0, 0, 748, 0, 0, 104, 1727,
	102, 0, 0, 0, 789, 791, 714, 741, 712, 733,
	0, 733, 0, 957, 0, 986, 182, 182, 741, 733,
	182, 471, 473, 1496, 1516, 1505, -2, 1926, 1730, 0,
	1516, 1516, 1491, 1492, 0, 767, 813, 814, 0, 809,
	810, 811, 1678, 768, 769, 778, 805, 812, 140, 742,
	0, 0, 743, 0, 0, 107, 0, 109, 0, 788,
	0, 707, 711, 741, 0, 741, 0, 1164, 161, 162,
	771, 741, 163, 1501, 0, 0, 1507, 1508, 1509, 1510,
	1511, 1502, 1503, 760, 815, 0, 816, 0, 0, 0,
	817, 746, 0, 749, 0, 105, 0, 790, 706, 877,
	806, 877, 806, 983, 772, 0, 1513, 1514, 0, 0,
	818, 0, 821, 822, 0, 819, 797, 0, 0, 736,
	872, 0, 733, 874, 733, 1512, 1515, 1506, 820, 823,
	824, 780, 0, 0, 732, 734, 735, 878, 741, 741,
	741, 0, 877, 877, 747, 0, 873, 875, 0, 0,
	741, 750,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 444, 3, 450, 445, 3,
	455, 456, 448, 446, 459, 447, 457, 449, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 463, 3,
	436, 438, 437, 440, 460, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 453, 3, 454, 451, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 461, 443, 462, 441,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 439, 57779, 442,
	57780, 452, 57781, 458, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1066
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1075
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1076
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1077
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1078
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1079
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1080
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1082
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1086
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1158
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1159
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1170
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1185
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1189
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1193
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1204
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1216
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1235
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1268
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1276
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1282
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1286
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1292
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1301
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1312
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1316
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1322
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1330
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1340
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1344
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1354
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1365
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1372
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1384
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1391
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1399
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1404
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1408
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1413
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1419
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1427
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1436
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1448
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1456
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1471
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1479
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1485
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1490
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1501
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1505
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1511
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1515
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1522
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1527
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1532
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1537
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1542
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1547
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1552
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1557
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1562
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1567
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1572
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1593
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1610
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1629
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1643
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1650
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1658
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1663
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1667
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1673
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1685
		{
			sqlVAL.union.val = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1695
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1710
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1716
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1720
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1749
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1779
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1787
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1803
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1840
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1845
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1849
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1855
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1860
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1865
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1870
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1875
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1879
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1895
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1898
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1902
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1906
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1924
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1928
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1934
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1942
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1946
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1952
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1966
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1970
		{
			sqlVAL.union.val = nil
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1976
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1989
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1990
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1991
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1992
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2002
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2010
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2012
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2015
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2025
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2034
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2042
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2044
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2048
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2051
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2070
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2080
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2084
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2087
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2091
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2095
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2099
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2114
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2120
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2125
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2137
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2138
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2140
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2141
		{
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2142
		{
			return helpWith(sqllex, "CREATE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2145
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2146
		{
			return unimplemented(sqllex, "create cast")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2147
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2148
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2150
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2151
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2154
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2155
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2156
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2157
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return unimplemented(sqllex, "create operator")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2159
		{
			return unimplemented(sqllex, "create publication")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2160
		{
			return unimplemented(sqllex, "create rule")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2162
		{
			return unimplemented(sqllex, "create server")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2164
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2165
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2168
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2169
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2172
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2173
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2176
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2177
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2180
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2181
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2182
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2183
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2184
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2185
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2186
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2187
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2188
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2189
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2190
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2191
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2192
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2194
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2195
		{
			return unimplemented(sqllex, "drop server")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2196
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2197
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2198
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2199
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2203
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2204
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2205
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2208
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2209
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2210
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2211
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2221
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2229
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2233
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2237
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2243
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2247
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2256
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2263
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2269
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2275
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2279
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2290
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2318
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2332
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2342
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2349
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2353
		{

			sqlVAL.union.val = nil
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2367
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2377
		{
			return helpWith(sqllex, "DELETE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2384
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2387
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2388
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2389
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2390
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2391
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2400
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2401
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2402
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2403
		{
			return helpWith(sqllex, "DROP")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2406
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2407
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2408
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2409
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2410
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2422
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2425
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2433
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2437
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2440
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2452
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2455
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2463
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2471
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2486
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2494
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2501
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2513
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2516
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2531
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2535
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2566
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2568
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2576
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2583
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2587
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2590
		{
			return helpWith(sqllex, "DELETE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2592
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2593
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2594
		{
			return helpWith(sqllex, "INSERT")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2595
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2597
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2598
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2599
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2602
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2607
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2608
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2609
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2614
		{
			return helpWith(sqllex, "DELETE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2615
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2616
		{
			return helpWith(sqllex, "INSERT")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2618
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2622
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2623
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2627
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2641
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2649
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2657
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2661
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2665
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2675
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2682
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2690
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2694
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2698
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2708
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2716
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2720
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2723
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2743
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2751
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2754
		{
			return helpWith(sqllex, "GRANT")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2774
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2778
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2782
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2785
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2790
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2794
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2804
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2822
		{
			return helpWith(sqllex, "RESET")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2823
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2831
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2835
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2838
		{
			return helpWith(sqllex, "RESET")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2846
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2849
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2860
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2863
		{
			return helpWith(sqllex, "USE")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2867
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2868
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2869
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2870
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2874
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2875
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2876
		{
			return helpWith(sqllex, "USE")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2892
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2907
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2910
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2928
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2936
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2944
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2950
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2954
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2960
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2964
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2968
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2972
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2976
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2990
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3000
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3020
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3025
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3042
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3045
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3047
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3050
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3054
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3073
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3080
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3086
		{
			return unimplemented(sqllex, "set from current")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3087
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3095
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3100
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3107
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3111
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3117
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3128
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3149
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3159
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3163
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3167
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3171
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3175
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3181
		{
			sqlVAL.union.val = tree.Low
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3185
		{
			sqlVAL.union.val = tree.Normal
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3189
		{
			sqlVAL.union.val = tree.High
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3200
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3204
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3208
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3213
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3217
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3230
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3231
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3232
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3233
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3234
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3235
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3237
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3238
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3239
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3240
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3241
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3243
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3244
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3245
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3246
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3247
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3249
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3250
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3251
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3253
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3254
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3256
		{
			return helpWith(sqllex, "SHOW")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3263
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3264
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3265
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3276
		{
			sqlVAL.str = "client_encoding"
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3279
		{
			sqlVAL.str = "timezone"
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3280
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3294
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3298
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3302
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3313
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3321
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3329
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3336
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3344
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3352
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3359
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3369
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3373
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3376
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3378
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3381
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3389
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3392
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.unresolvedObjectName().String(), IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3404
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].str, IsDB: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.newTableIndexName().String(), IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3411
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3419
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3422
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3435
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3443
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3451
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3454
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3456
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3464
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3467
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3473
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3476
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3484
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3487
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3489
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3492
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3500
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3503
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3512
		{
			sqlVAL.union.val = true
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3514
		{
			sqlVAL.union.val = true
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3516
		{
			sqlVAL.union.val = false
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3530
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3533
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3534
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3536
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3540
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3543
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3545
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3570
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3573
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3575
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3578
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3580
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3584
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3587
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3588
		{
			sqlVAL.union.val = false
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3596
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3599
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3601
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3604
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3612
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3632
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3635
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = true
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3639
		{
			sqlVAL.union.val = false
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3646
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3650
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3653
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3660
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3664
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3667
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3674
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3678
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3686
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3691
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3696
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3700
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3708
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3712
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3716
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3732
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3740
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3743
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3747
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3751
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3755
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3763
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3771
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3778
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3785
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3789
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3800
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3805
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3809
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: sqlDollar[5].str}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3812
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3816
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3823
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3828
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3948
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3952
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3956
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3995
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3999
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4004
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4008
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4017
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4024
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4028
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4040
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4049
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4052
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4088
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4100
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4113
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4114
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4115
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4119
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4130
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4142
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4143
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4144
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4158
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4159
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4160
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4161
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4162
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4163
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4164
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4165
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4170
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4176
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4186
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4192
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4195
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4199
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4208
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4215
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4220
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4225
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4231
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4238
		{
			sqlVAL.str = ""
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4245
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4251
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4258
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4265
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4271
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4281
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4291
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4301
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4315
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4330
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4336
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4340
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4344
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4348
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4352
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4356
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4360
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4378
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4382
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4386
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4390
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4394
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4398
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4402
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4412
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4416
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4420
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 771:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4427
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4449
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4459
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4471
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4476
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4482
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4488
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4499
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4509
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4533
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4543
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4554
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4558
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4565
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4571
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4582
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4586
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4592
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4602
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4608
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4618
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4623
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4624
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4625
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4626
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4627
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4628
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4645
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4649
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4655
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4659
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4679
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4683
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4687
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4691
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4700
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4704
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4708
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4712
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4722
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4728
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4740
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4744
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4748
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4752
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4758
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4762
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4768
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4787
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4792
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4796
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4803
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4807
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4810
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4811
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4812
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4815
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4817
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4819
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4822
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4824
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4825
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4827
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4829
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4837
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4840
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4848
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4852
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4855
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4859
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4863
		{
			sqlVAL.union.val = nil
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4873
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4877
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4880
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4885
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4886
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4894
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4902
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4903
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4906
		{
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4907
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 866:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4913
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4915
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4917
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 869:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4919
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4921
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4923
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4939
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4953
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4968
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4982
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4996
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4999
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5000
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5004
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5019
		{
			sqlVAL.union.val = false
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5025
		{
			sqlVAL.union.val = true
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5029
		{
			sqlVAL.union.val = false
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5035
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5048
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5059
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.str = ""
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.union.val = tree.Descending
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5072
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 891:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5078
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5085
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5089
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5095
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5101
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5109
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5115
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5123
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5129
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5141
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5146
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5147
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5150
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5151
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5159
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5162
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5172
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5181
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5184
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5192
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5195
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5199
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5200
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5201
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5217
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5220
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5222
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5225
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5235
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5238
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5240
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5243
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5247
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5252
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5253
		{
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5254
		{
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5262
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5269
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5272
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5273
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5277
		{
			sqlVAL.str = ""
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5281
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5285
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5289
		{
			sqlVAL.str = ""
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5295
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5299
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5315
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5319
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5332
		{
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5334
		{
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5338
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5343
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5347
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5351
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5357
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5369
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5373
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 956:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5383
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5393
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5403
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5407
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5411
		{
			sqlVAL.str = ""
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 962:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5421
		{
			sqlVAL.str = ""
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5427
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5431
		{
			sqlVAL.str = ""
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5437
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 966:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5441
		{
			sqlVAL.str = ""
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5446
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5447
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5459
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5466
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5473
		{
			return helpWith(sqllex, "INSERT")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5484
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5491
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5495
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5504
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5511
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5515
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5519
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5525
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5549
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5553
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5557
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5563
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5566
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5567
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5569
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5575
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5580
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5584
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 992:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5601
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5613
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5616
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5619
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5625
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5629
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5642
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5645
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5649
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5692
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5698
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5702
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5717
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5721
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5725
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5729
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5733
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5737
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5742
		{
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5743
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5748
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5783
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5784
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5785
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5807
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5820
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5834
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5846
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5850
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5859
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5868
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5883
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5890
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5902
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5906
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5910
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5914
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5924
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5932
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5933
		{
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5937
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5941
		{
			sqlVAL.union.val = nil
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5946
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5947
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = true
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5955
		{
			sqlVAL.union.val = false
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5959
		{
			sqlVAL.union.val = false
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5965
		{
			sqlVAL.union.val = true
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5971
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5976
		{
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5977
		{
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5981
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5985
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5991
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5997
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6001
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6007
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6011
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6016
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6031
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6040
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6055
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6064
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6070
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6077
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6093
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6097
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6107
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6108
		{
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6111
		{
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6112
		{
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6129
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6133
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6139
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6143
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6162
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6165
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6167
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6179
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6182
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6200
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6204
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6209
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6214
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6220
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6225
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6232
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6237
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6248
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6252
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6256
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6295
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6309
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6319
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6336
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6340
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6344
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6355
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6379
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6389
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6395
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6397
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6401
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6407
		{
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6409
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6412
		{
			sqlVAL.union.val = nil
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6413
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6414
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6418
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6422
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6428
		{
			sqlVAL.union.val = true
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6432
		{
			sqlVAL.union.val = false
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6452
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6456
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6460
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6464
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6468
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6472
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6489
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6495
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6502
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.str = tree.AstFull
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.str = tree.AstRight
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.str = tree.AstInner
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6526
		{
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6527
		{
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.str = tree.AstHash
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6552
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6556
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6560
		{
			sqlVAL.str = ""
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6577
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6582
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6583
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6584
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6585
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6589
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6594
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6608
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6612
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6618
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6626
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6655
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6668
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6676
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6677
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6691
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6699
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6701
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6709
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6721
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6722
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6739
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6743
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6747
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6751
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6755
		{
			sqlVAL.union.val = types.String
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6759
		{
			sqlVAL.union.val = types.Name
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6763
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6772
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6776
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6784
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6788
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6792
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = types.INet
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6800
		{
			sqlVAL.union.val = types.Oid
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6812
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6843
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6851
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6859
		{
			sqlVAL.union.val = nil
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6870
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = types.Int2
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6878
		{
			sqlVAL.union.val = types.Int2
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6882
		{
			sqlVAL.union.val = types.Int4
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6886
		{
			sqlVAL.union.val = types.Int
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6890
		{
			sqlVAL.union.val = types.Int
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6894
		{
			sqlVAL.union.val = types.Int
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6898
		{
			sqlVAL.union.val = types.Float4
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6902
		{
			sqlVAL.union.val = types.Float4
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = types.Float
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = types.Float
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6918
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6926
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6934
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6942
		{
			sqlVAL.union.val = types.Bool
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6946
		{
			sqlVAL.union.val = types.Bool
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6953
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6957
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6961
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = types.RegType
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6975
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = types.Float
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6994
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7000
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7016
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7022
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7034
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7040
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = types.String
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = true
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7062
		{
			sqlVAL.union.val = false
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7067
		{
			sqlVAL.union.val = types.Date
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7071
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7076
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7083
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7084
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7086
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7094
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7106
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7110
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = true
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7120
		{
			sqlVAL.union.val = false
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = false
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = types.Interval
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = tree.Year
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = tree.Month
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = tree.Day
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7157
		{
			sqlVAL.union.val = tree.Month
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7161
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7165
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7169
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7173
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7177
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7181
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7188
		{
			sqlVAL.union.val = nil
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7194
		{
			sqlVAL.union.val = tree.Second
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7197
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7244
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7277
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7281
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7285
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7289
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7293
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7297
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7301
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7305
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7309
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7313
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7317
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7321
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7325
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7329
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7333
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7337
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7341
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7353
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7365
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7369
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7373
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7377
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7381
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7385
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7389
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7393
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7397
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7413
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7417
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7421
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7425
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7429
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7445
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7453
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7457
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7461
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7488
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7490
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7494
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7506
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7510
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7554
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7571
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7576
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7604
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7612
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7616
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7620
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7624
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7628
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7632
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7648
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7770
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7775
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7777
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7781
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7784
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7786
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7798
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7802
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7811
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7826
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7835
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7839
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7843
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7850
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7858
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7861
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7862
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7870
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7874
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7877
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7888
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7910
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7914
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7918
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7932
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7950
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7986
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7990
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7997
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8000
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8005
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8010
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8012
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8015
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8020
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8025
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8030
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8035
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8044
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8045
		{
			return unimplemented(sqllex, "treat")
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8066
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8071
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8076
		{
			return unimplemented(sqllex, "within group")
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8077
		{
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8096
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8112
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8120
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8124
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8128
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.str = ""
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8161
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8165
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8195
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8201
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8214
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8242
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8270
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8274
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8278
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8282
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8287
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8311
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8323
		{
			sqlVAL.union.val = tree.Any
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8327
		{
			sqlVAL.union.val = tree.Some
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8331
		{
			sqlVAL.union.val = tree.All
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8338
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.union.val = tree.Div
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8342
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8346
		{
			sqlVAL.union.val = tree.LT
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8347
		{
			sqlVAL.union.val = tree.GT
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8348
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8349
		{
			sqlVAL.union.val = tree.LE
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8350
		{
			sqlVAL.union.val = tree.GE
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = tree.NE
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8355
		{
			sqlVAL.union.val = tree.Like
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8357
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8358
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8395
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8410
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8424
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8431
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8447
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8457
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8461
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8477
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8524
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8528
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8545
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8549
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8553
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8557
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8583
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8587
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8593
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8605
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8612
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8616
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8622
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8628
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8632
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8639
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8645
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8656
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8662
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8671
		{
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8672
		{
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8676
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8680
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8686
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8695
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8699
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8703
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8711
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8721
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8744
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8752
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8775
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8784
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8788
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8792
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8796
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8806
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8814
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8818
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8827
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8838
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8847
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8855
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8952
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8959
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8963
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1658:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8967
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8981
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8985
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8989
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9002
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9020
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9033
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9040
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9065
		{
			sqlVAL.str = ""
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9071
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9075
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
