// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9329

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 1008,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	179, 847,
	196, 847,
	211, 239,
	287, 239,
	295, 703,
	322, 239,
	331, 703,
	368, 703,
	393, 239,
	417, 703,
	-2, 0,
	-1, 75,
	211, 243,
	-2, 0,
	-1, 76,
	106, 1008,
	185, 1008,
	403, 1008,
	404, 1008,
	-2, 0,
	-1, 87,
	119, 982,
	134, 982,
	193, 982,
	222, 982,
	253, 982,
	263, 982,
	398, 982,
	-2, 969,
	-1, 116,
	124, 623,
	202, 615,
	210, 623,
	289, 609,
	340, 609,
	386, 623,
	-2, 0,
	-1, 117,
	4, 1010,
	21, 1010,
	22, 1010,
	23, 1010,
	24, 1010,
	25, 1010,
	27, 1010,
	32, 1010,
	37, 1010,
	38, 1010,
	39, 1010,
	40, 1010,
	41, 1010,
	42, 1010,
	43, 1010,
	44, 1010,
	45, 1010,
	46, 1010,
	47, 1010,
	49, 1010,
	50, 1010,
	51, 1010,
	52, 1010,
	53, 1010,
	54, 1010,
	57, 1010,
	58, 1010,
	59, 1010,
	60, 1010,
	62, 1010,
	63, 1010,
	67, 1010,
	68, 1010,
	69, 1010,
	70, 1010,
	71, 1010,
	73, 1010,
	74, 1010,
	75, 1010,
	76, 1010,
	78, 1010,
	80, 1010,
	81, 1010,
	82, 1010,
	85, 1010,
	86, 1010,
	94, 1010,
	95, 1010,
	96, 1010,
	97, 1010,
	98, 1010,
	99, 1010,
	100, 1010,
	101, 1010,
	103, 1010,
	105, 1010,
	106, 1010,
	108, 1010,
	111, 1010,
	112, 1010,
	113, 1010,
	115, 1010,
	117, 1010,
	118, 1010,
	120, 1010,
	121, 1010,
	122, 1010,
	123, 1010,
	124, 1010,
	125, 1010,
	126, 1010,
	127, 1010,
	128, 1010,
	129, 1010,
	130, 1010,
	131, 1010,
	133, 1010,
	139, 1010,
	140, 1010,
	141, 1010,
	142, 1010,
	143, 1010,
	144, 1010,
	146, 1010,
	148, 1010,
	152, 1010,
	153, 1010,
	155, 1010,
	156, 1010,
	158, 1010,
	159, 1010,
	161, 1010,
	162, 1010,
	163, 1010,
	164, 1010,
	165, 1010,
	166, 1010,
	167, 1010,
	168, 1010,
	170, 1010,
	171, 1010,
	173, 1010,
	174, 1010,
	175, 1010,
	179, 1010,
	180, 1010,
	181, 1010,
	182, 1010,
	185, 1010,
	186, 1010,
	187, 1010,
	188, 1010,
	189, 1010,
	190, 1010,
	191, 1010,
	192, 1010,
	194, 1010,
	196, 1010,
	198, 1010,
	200, 1010,
	201, 1010,
	202, 1010,
	204, 1010,
	205, 1010,
	208, 1010,
	209, 1010,
	210, 1010,
	211, 1010,
	213, 1010,
	214, 1010,
	216, 1010,
	217, 1010,
	219, 1010,
	220, 1010,
	223, 1010,
	224, 1010,
	227, 1010,
	228, 1010,
	230, 1010,
	231, 1010,
	232, 1010,
	233, 1010,
	234, 1010,
	235, 1010,
	236, 1010,
	237, 1010,
	238, 1010,
	239, 1010,
	241, 1010,
	242, 1010,
	243, 1010,
	244, 1010,
	246, 1010,
	249, 1010,
	250, 1010,
	251, 1010,
	252, 1010,
	254, 1010,
	255, 1010,
	256, 1010,
	258, 1010,
	259, 1010,
	260, 1010,
	261, 1010,
	264, 1010,
	265, 1010,
	267, 1010,
	269, 1010,
	270, 1010,
	271, 1010,
	272, 1010,
	273, 1010,
	274, 1010,
	275, 1010,
	276, 1010,
	277, 1010,
	279, 1010,
	280, 1010,
	281, 1010,
	282, 1010,
	283, 1010,
	284, 1010,
	286, 1010,
	288, 1010,
	289, 1010,
	290, 1010,
	291, 1010,
	292, 1010,
	293, 1010,
	294, 1010,
	295, 1010,
	296, 1010,
	298, 1010,
	299, 1010,
	300, 1010,
	301, 1010,
	302, 1010,
	304, 1010,
	305, 1010,
	306, 1010,
	307, 1010,
	308, 1010,
	309, 1010,
	310, 1010,
	311, 1010,
	313, 1010,
	315, 1010,
	316, 1010,
	317, 1010,
	318, 1010,
	319, 1010,
	320, 1010,
	322, 1010,
	323, 1010,
	324, 1010,
	325, 1010,
	326, 1010,
	327, 1010,
	328, 1010,
	329, 1010,
	331, 1010,
	332, 1010,
	333, 1010,
	334, 1010,
	335, 1010,
	336, 1010,
	337, 1010,
	338, 1010,
	339, 1010,
	340, 1010,
	342, 1010,
	343, 1010,
	344, 1010,
	345, 1010,
	347, 1010,
	348, 1010,
	349, 1010,
	350, 1010,
	352, 1010,
	353, 1010,
	354, 1010,
	355, 1010,
	356, 1010,
	357, 1010,
	358, 1010,
	359, 1010,
	360, 1010,
	361, 1010,
	362, 1010,
	363, 1010,
	365, 1010,
	366, 1010,
	367, 1010,
	369, 1010,
	370, 1010,
	371, 1010,
	372, 1010,
	373, 1010,
	374, 1010,
	375, 1010,
	376, 1010,
	377, 1010,
	379, 1010,
	380, 1010,
	381, 1010,
	382, 1010,
	384, 1010,
	386, 1010,
	387, 1010,
	388, 1010,
	389, 1010,
	390, 1010,
	392, 1010,
	393, 1010,
	394, 1010,
	396, 1010,
	397, 1010,
	400, 1010,
	401, 1010,
	402, 1010,
	403, 1010,
	404, 1010,
	405, 1010,
	407, 1010,
	409, 1010,
	410, 1010,
	411, 1010,
	412, 1010,
	413, 1010,
	414, 1010,
	415, 1010,
	417, 1010,
	418, 1010,
	419, 1010,
	424, 1010,
	425, 1010,
	426, 1010,
	427, 1010,
	428, 1010,
	429, 1010,
	-2, 0,
	-1, 118,
	1, 900,
	200, 900,
	286, 900,
	293, 900,
	432, 900,
	455, 900,
	-2, 0,
	-1, 120,
	1, 900,
	455, 900,
	-2, 0,
	-1, 121,
	1, 900,
	455, 900,
	-2, 0,
	-1, 122,
	1, 904,
	455, 904,
	-2, 0,
	-1, 146,
	119, 981,
	134, 981,
	193, 981,
	222, 981,
	253, 981,
	263, 981,
	398, 981,
	-2, 978,
	-1, 178,
	4, 1017,
	5, 1017,
	6, 1017,
	7, 1017,
	8, 1017,
	9, 1017,
	10, 1017,
	21, 1017,
	22, 1017,
	23, 1017,
	24, 1017,
	25, 1017,
	27, 1017,
	32, 1017,
	33, 1017,
	37, 1017,
	38, 1017,
	39, 1017,
	40, 1017,
	41, 1017,
	42, 1017,
	43, 1017,
	44, 1017,
	45, 1017,
	46, 1017,
	47, 1017,
	49, 1017,
	50, 1017,
	51, 1017,
	52, 1017,
	53, 1017,
	54, 1017,
	55, 1017,
	56, 1017,
	57, 1017,
	58, 1017,
	59, 1017,
	60, 1017,
	62, 1017,
	63, 1017,
	65, 1017,
	67, 1017,
	68, 1017,
	69, 1017,
	70, 1017,
	71, 1017,
	73, 1017,
	74, 1017,
	75, 1017,
	76, 1017,
	78, 1017,
	80, 1017,
	81, 1017,
	82, 1017,
	84, 1017,
	85, 1017,
	86, 1017,
	87, 1017,
	88, 1017,
	89, 1017,
	90, 1017,
	91, 1017,
	92, 1017,
	93, 1017,
	94, 1017,
	95, 1017,
	96, 1017,
	97, 1017,
	98, 1017,
	99, 1017,
	100, 1017,
	101, 1017,
	102, 1017,
	103, 1017,
	105, 1017,
	106, 1017,
	108, 1017,
	111, 1017,
	112, 1017,
	113, 1017,
	115, 1017,
	117, 1017,
	118, 1017,
	120, 1017,
	121, 1017,
	122, 1017,
	123, 1017,
	124, 1017,
	125, 1017,
	126, 1017,
	127, 1017,
	128, 1017,
	129, 1017,
	130, 1017,
	131, 1017,
	132, 1017,
	133, 1017,
	139, 1017,
	140, 1017,
	141, 1017,
	142, 1017,
	143, 1017,
	144, 1017,
	146, 1017,
	148, 1017,
	151, 1017,
	152, 1017,
	153, 1017,
	155, 1017,
	156, 1017,
	158, 1017,
	159, 1017,
	161, 1017,
	162, 1017,
	163, 1017,
	164, 1017,
	165, 1017,
	166, 1017,
	167, 1017,
	168, 1017,
	169, 1017,
	170, 1017,
	171, 1017,
	173, 1017,
	174, 1017,
	175, 1017,
	179, 1017,
	180, 1017,
	181, 1017,
	182, 1017,
	184, 1017,
	185, 1017,
	186, 1017,
	187, 1017,
	188, 1017,
	189, 1017,
	190, 1017,
	191, 1017,
	192, 1017,
	194, 1017,
	196, 1017,
	197, 1017,
	198, 1017,
	199, 1017,
	200, 1017,
	201, 1017,
	202, 1017,
	203, 1017,
	204, 1017,
	205, 1017,
	208, 1017,
	209, 1017,
	210, 1017,
	211, 1017,
	213, 1017,
	214, 1017,
	216, 1017,
	217, 1017,
	218, 1017,
	219, 1017,
	220, 1017,
	221, 1017,
	223, 1017,
	224, 1017,
	227, 1017,
	228, 1017,
	230, 1017,
	231, 1017,
	232, 1017,
	233, 1017,
	234, 1017,
	235, 1017,
	236, 1017,
	237, 1017,
	238, 1017,
	239, 1017,
	240, 1017,
	241, 1017,
	242, 1017,
	243, 1017,
	244, 1017,
	245, 1017,
	246, 1017,
	247, 1017,
	248, 1017,
	249, 1017,
	250, 1017,
	251, 1017,
	252, 1017,
	254, 1017,
	255, 1017,
	256, 1017,
	259, 1017,
	260, 1017,
	261, 1017,
	264, 1017,
	265, 1017,
	266, 1017,
	267, 1017,
	268, 1017,
	269, 1017,
	270, 1017,
	271, 1017,
	272, 1017,
	273, 1017,
	274, 1017,
	275, 1017,
	276, 1017,
	277, 1017,
	279, 1017,
	280, 1017,
	281, 1017,
	282, 1017,
	283, 1017,
	284, 1017,
	286, 1017,
	288, 1017,
	289, 1017,
	290, 1017,
	291, 1017,
	292, 1017,
	293, 1017,
	294, 1017,
	295, 1017,
	296, 1017,
	298, 1017,
	299, 1017,
	300, 1017,
	301, 1017,
	302, 1017,
	304, 1017,
	305, 1017,
	306, 1017,
	307, 1017,
	308, 1017,
	309, 1017,
	310, 1017,
	311, 1017,
	313, 1017,
	314, 1017,
	315, 1017,
	316, 1017,
	317, 1017,
	318, 1017,
	319, 1017,
	320, 1017,
	322, 1017,
	323, 1017,
	324, 1017,
	325, 1017,
	326, 1017,
	327, 1017,
	328, 1017,
	329, 1017,
	331, 1017,
	332, 1017,
	333, 1017,
	334, 1017,
	335, 1017,
	336, 1017,
	337, 1017,
	338, 1017,
	339, 1017,
	340, 1017,
	341, 1017,
	342, 1017,
	343, 1017,
	344, 1017,
	345, 1017,
	346, 1017,
	347, 1017,
	348, 1017,
	349, 1017,
	350, 1017,
	352, 1017,
	353, 1017,
	354, 1017,
	355, 1017,
	356, 1017,
	357, 1017,
	358, 1017,
	359, 1017,
	360, 1017,
	361, 1017,
	362, 1017,
	363, 1017,
	365, 1017,
	366, 1017,
	367, 1017,
	369, 1017,
	370, 1017,
	371, 1017,
	372, 1017,
	373, 1017,
	374, 1017,
	375, 1017,
	376, 1017,
	377, 1017,
	379, 1017,
	380, 1017,
	381, 1017,
	382, 1017,
	384, 1017,
	386, 1017,
	387, 1017,
	388, 1017,
	389, 1017,
	390, 1017,
	391, 1017,
	392, 1017,
	393, 1017,
	394, 1017,
	396, 1017,
	397, 1017,
	399, 1017,
	400, 1017,
	401, 1017,
	402, 1017,
	403, 1017,
	404, 1017,
	405, 1017,
	406, 1017,
	407, 1017,
	409, 1017,
	410, 1017,
	411, 1017,
	412, 1017,
	413, 1017,
	414, 1017,
	415, 1017,
	417, 1017,
	418, 1017,
	419, 1017,
	424, 1017,
	425, 1017,
	426, 1017,
	427, 1017,
	428, 1017,
	429, 1017,
	430, 1017,
	438, 1017,
	443, 1017,
	444, 1017,
	445, 1017,
	452, 1017,
	457, 1017,
	-2, 0,
	-1, 548,
	150, 1686,
	383, 1686,
	435, 1686,
	454, 1686,
	-2, 0,
	-1, 549,
	150, 1764,
	383, 1764,
	435, 1764,
	454, 1764,
	-2, 0,
	-1, 550,
	150, 1676,
	383, 1676,
	435, 1676,
	454, 1676,
	-2, 0,
	-1, 552,
	150, 1851,
	383, 1851,
	435, 1851,
	454, 1851,
	-2, 0,
	-1, 554,
	150, 1879,
	383, 1879,
	435, 1879,
	454, 1879,
	-2, 0,
	-1, 561,
	150, 1774,
	383, 1774,
	435, 1774,
	454, 1774,
	-2, 488,
	-1, 578,
	454, 1635,
	456, 1635,
	-2, 672,
	-1, 579,
	454, 1637,
	456, 1637,
	-2, 673,
	-1, 580,
	454, 1636,
	456, 1636,
	-2, 674,
	-1, 581,
	456, 1582,
	-2, 675,
	-1, 725,
	289, 610,
	340, 610,
	-2, 0,
	-1, 726,
	289, 609,
	340, 609,
	-2, 566,
	-1, 728,
	1, 633,
	451, 633,
	453, 633,
	455, 633,
	-2, 0,
	-1, 729,
	1, 671,
	147, 671,
	451, 671,
	453, 671,
	455, 671,
	-2, 0,
	-1, 738,
	1, 633,
	451, 633,
	453, 633,
	455, 633,
	-2, 0,
	-1, 739,
	1, 635,
	451, 635,
	453, 635,
	455, 635,
	-2, 0,
	-1, 740,
	1, 638,
	451, 638,
	453, 638,
	455, 638,
	-2, 0,
	-1, 744,
	1, 652,
	451, 652,
	453, 652,
	455, 652,
	-2, 0,
	-1, 745,
	1, 654,
	451, 654,
	453, 654,
	455, 654,
	-2, 0,
	-1, 790,
	134, 1021,
	222, 1021,
	253, 1021,
	-2, 978,
	-1, 805,
	134, 1020,
	222, 1020,
	253, 1020,
	-2, 978,
	-1, 829,
	454, 1634,
	-2, 496,
	-1, 858,
	452, 1626,
	-2, 1617,
	-1, 864,
	5, 1156,
	-2, 1667,
	-1, 865,
	5, 1157,
	-2, 1671,
	-1, 866,
	5, 1158,
	-2, 1670,
	-1, 867,
	5, 1159,
	-2, 1877,
	-1, 868,
	5, 1160,
	-2, 1776,
	-1, 869,
	5, 1161,
	-2, 1843,
	-1, 870,
	5, 1162,
	-2, 1845,
	-1, 871,
	5, 1163,
	-2, 1856,
	-1, 872,
	5, 1164,
	-2, 1846,
	-1, 873,
	5, 1165,
	-2, 1847,
	-1, 874,
	5, 1166,
	-2, 1666,
	-1, 875,
	5, 1167,
	-2, 1892,
	-1, 876,
	5, 1168,
	-2, 1739,
	-1, 877,
	5, 1169,
	-2, 1784,
	-1, 878,
	5, 1170,
	-2, 1786,
	-1, 879,
	5, 1171,
	-2, 1743,
	-1, 880,
	5, 1172,
	452, 1644,
	-2, 1635,
	-1, 881,
	5, 1228,
	452, 1228,
	-2, 1927,
	-1, 886,
	452, 1645,
	-2, 1636,
	-1, 888,
	5, 1176,
	-2, 1925,
	-1, 889,
	5, 1177,
	-2, 1926,
	-1, 890,
	5, 1178,
	-2, 1742,
	-1, 891,
	5, 1179,
	-2, 1938,
	-1, 892,
	5, 1180,
	-2, 1744,
	-1, 893,
	5, 1181,
	-2, 1745,
	-1, 894,
	5, 1182,
	-2, 1746,
	-1, 895,
	5, 1183,
	-2, 1907,
	-1, 896,
	5, 1184,
	-2, 1936,
	-1, 897,
	5, 1185,
	-2, 1722,
	-1, 898,
	5, 1186,
	-2, 1723,
	-1, 899,
	5, 1200,
	-2, 1919,
	-1, 901,
	5, 1175,
	-2, 1915,
	-1, 902,
	5, 1175,
	-2, 1914,
	-1, 903,
	5, 1175,
	-2, 1931,
	-1, 904,
	5, 1192,
	-2, 1909,
	-1, 905,
	5, 1193,
	-2, 1668,
	-1, 906,
	5, 1203,
	-2, 1908,
	-1, 907,
	5, 1205,
	-2, 1947,
	-1, 909,
	5, 1216,
	-2, 1696,
	-1, 910,
	5, 1227,
	-2, 1940,
	-1, 911,
	5, 1219,
	-2, 1941,
	-1, 912,
	5, 1227,
	-2, 1942,
	-1, 913,
	5, 1223,
	-2, 1943,
	-1, 914,
	5, 1143,
	-2, 1752,
	-1, 915,
	5, 1144,
	-2, 1753,
	-1, 916,
	454, 1632,
	-2, 1616,
	-1, 917,
	452, 1967,
	-2, 1633,
	-1, 937,
	5, 1211,
	-2, 1866,
	-1, 954,
	5, 1210,
	-2, 1948,
	-1, 964,
	5, 1212,
	418, 1212,
	-2, 1910,
	-1, 965,
	5, 1213,
	418, 1213,
	-2, 1911,
	-1, 1001,
	452, 1644,
	-2, 1635,
	-1, 1030,
	150, 1879,
	383, 1879,
	435, 1879,
	454, 1879,
	-2, 0,
	-1, 1031,
	1, 476,
	455, 476,
	-2, 912,
	-1, 1151,
	304, 1613,
	445, 1613,
	-2, 1612,
	-1, 1174,
	457, 1613,
	-2, 1614,
	-1, 1209,
	295, 703,
	417, 703,
	-2, 238,
	-1, 1229,
	275, 1006,
	-2, 820,
	-1, 1238,
	257, 1639,
	-2, 0,
	-1, 1302,
	1, 353,
	451, 353,
	453, 353,
	455, 353,
	-2, 980,
	-1, 1305,
	4, 1946,
	11, 1946,
	12, 1946,
	14, 1946,
	15, 1946,
	16, 1946,
	17, 1946,
	18, 1946,
	19, 1946,
	21, 1946,
	22, 1946,
	23, 1946,
	24, 1946,
	25, 1946,
	27, 1946,
	30, 1946,
	32, 1946,
	34, 1946,
	37, 1946,
	38, 1946,
	39, 1946,
	40, 1946,
	41, 1946,
	42, 1946,
	43, 1946,
	44, 1946,
	45, 1946,
	46, 1946,
	47, 1946,
	49, 1946,
	50, 1946,
	51, 1946,
	52, 1946,
	53, 1946,
	54, 1946,
	57, 1946,
	58, 1946,
	59, 1946,
	60, 1946,
	62, 1946,
	63, 1946,
	64, 1946,
	67, 1946,
	68, 1946,
	69, 1946,
	70, 1946,
	71, 1946,
	72, 1946,
	73, 1946,
	74, 1946,
	75, 1946,
	76, 1946,
	78, 1946,
	79, 1946,
	80, 1946,
	81, 1946,
	82, 1946,
	84, 1946,
	85, 1946,
	86, 1946,
	94, 1946,
	95, 1946,
	96, 1946,
	97, 1946,
	98, 1946,
	99, 1946,
	100, 1946,
	101, 1946,
	103, 1946,
	105, 1946,
	106, 1946,
	108, 1946,
	111, 1946,
	112, 1946,
	113, 1946,
	115, 1946,
	117, 1946,
	118, 1946,
	120, 1946,
	121, 1946,
	122, 1946,
	123, 1946,
	124, 1946,
	125, 1946,
	126, 1946,
	127, 1946,
	128, 1946,
	129, 1946,
	130, 1946,
	131, 1946,
	135, 1946,
	136, 1946,
	137, 1946,
	138, 1946,
	139, 1946,
	140, 1946,
	141, 1946,
	142, 1946,
	143, 1946,
	144, 1946,
	145, 1946,
	146, 1946,
	148, 1946,
	151, 1946,
	152, 1946,
	153, 1946,
	155, 1946,
	156, 1946,
	158, 1946,
	159, 1946,
	161, 1946,
	162, 1946,
	163, 1946,
	164, 1946,
	165, 1946,
	166, 1946,
	167, 1946,
	168, 1946,
	169, 1946,
	170, 1946,
	171, 1946,
	172, 1946,
	173, 1946,
	174, 1946,
	175, 1946,
	176, 1946,
	177, 1946,
	178, 1946,
	180, 1946,
	181, 1946,
	182, 1946,
	184, 1946,
	185, 1946,
	186, 1946,
	187, 1946,
	188, 1946,
	189, 1946,
	190, 1946,
	191, 1946,
	192, 1946,
	194, 1946,
	196, 1946,
	197, 1946,
	198, 1946,
	199, 1946,
	200, 1946,
	201, 1946,
	202, 1946,
	203, 1946,
	204, 1946,
	205, 1946,
	206, 1946,
	207, 1946,
	208, 1946,
	209, 1946,
	210, 1946,
	211, 1946,
	213, 1946,
	214, 1946,
	216, 1946,
	217, 1946,
	218, 1946,
	219, 1946,
	220, 1946,
	221, 1946,
	223, 1946,
	224, 1946,
	227, 1946,
	228, 1946,
	229, 1946,
	230, 1946,
	231, 1946,
	232, 1946,
	233, 1946,
	234, 1946,
	235, 1946,
	236, 1946,
	237, 1946,
	238, 1946,
	239, 1946,
	240, 1946,
	241, 1946,
	242, 1946,
	243, 1946,
	244, 1946,
	247, 1946,
	249, 1946,
	250, 1946,
	251, 1946,
	252, 1946,
	254, 1946,
	255, 1946,
	256, 1946,
	259, 1946,
	260, 1946,
	261, 1946,
	262, 1946,
	264, 1946,
	265, 1946,
	267, 1946,
	269, 1946,
	270, 1946,
	271, 1946,
	272, 1946,
	273, 1946,
	274, 1946,
	275, 1946,
	276, 1946,
	277, 1946,
	279, 1946,
	280, 1946,
	281, 1946,
	282, 1946,
	283, 1946,
	284, 1946,
	286, 1946,
	288, 1946,
	289, 1946,
	290, 1946,
	291, 1946,
	292, 1946,
	293, 1946,
	294, 1946,
	295, 1946,
	296, 1946,
	298, 1946,
	299, 1946,
	300, 1946,
	301, 1946,
	302, 1946,
	303, 1946,
	304, 1946,
	305, 1946,
	306, 1946,
	307, 1946,
	308, 1946,
	309, 1946,
	310, 1946,
	311, 1946,
	313, 1946,
	314, 1946,
	315, 1946,
	316, 1946,
	317, 1946,
	318, 1946,
	319, 1946,
	320, 1946,
	321, 1946,
	322, 1946,
	323, 1946,
	324, 1946,
	325, 1946,
	326, 1946,
	327, 1946,
	328, 1946,
	329, 1946,
	331, 1946,
	332, 1946,
	333, 1946,
	334, 1946,
	335, 1946,
	336, 1946,
	337, 1946,
	338, 1946,
	339, 1946,
	340, 1946,
	342, 1946,
	343, 1946,
	344, 1946,
	345, 1946,
	346, 1946,
	347, 1946,
	348, 1946,
	349, 1946,
	350, 1946,
	352, 1946,
	353, 1946,
	354, 1946,
	355, 1946,
	356, 1946,
	357, 1946,
	358, 1946,
	359, 1946,
	360, 1946,
	361, 1946,
	362, 1946,
	363, 1946,
	365, 1946,
	366, 1946,
	367, 1946,
	369, 1946,
	370, 1946,
	371, 1946,
	372, 1946,
	373, 1946,
	374, 1946,
	375, 1946,
	376, 1946,
	377, 1946,
	379, 1946,
	380, 1946,
	381, 1946,
	382, 1946,
	384, 1946,
	386, 1946,
	387, 1946,
	388, 1946,
	389, 1946,
	390, 1946,
	392, 1946,
	393, 1946,
	394, 1946,
	396, 1946,
	397, 1946,
	400, 1946,
	401, 1946,
	402, 1946,
	403, 1946,
	404, 1946,
	405, 1946,
	407, 1946,
	409, 1946,
	410, 1946,
	411, 1946,
	412, 1946,
	413, 1946,
	414, 1946,
	415, 1946,
	417, 1946,
	418, 1946,
	419, 1946,
	424, 1946,
	425, 1946,
	426, 1946,
	427, 1946,
	428, 1946,
	429, 1946,
	430, 1946,
	431, 1946,
	433, 1946,
	434, 1946,
	435, 1946,
	436, 1946,
	437, 1946,
	438, 1946,
	440, 1946,
	441, 1946,
	442, 1946,
	443, 1946,
	444, 1946,
	445, 1946,
	446, 1946,
	447, 1946,
	448, 1946,
	450, 1946,
	453, 1946,
	454, 1946,
	456, 1946,
	457, 1946,
	-2, 0,
	-1, 1308,
	150, 1851,
	383, 1851,
	435, 1851,
	454, 1851,
	-2, 0,
	-1, 1335,
	289, 610,
	340, 610,
	-2, 0,
	-1, 1356,
	1, 605,
	451, 605,
	453, 605,
	455, 605,
	-2, 0,
	-1, 1357,
	1, 624,
	451, 624,
	453, 624,
	455, 624,
	-2, 0,
	-1, 1358,
	1, 612,
	451, 612,
	453, 612,
	455, 612,
	-2, 0,
	-1, 1379,
	1, 1899,
	451, 1899,
	453, 1899,
	454, 1899,
	455, 1899,
	-2, 650,
	-1, 1380,
	1, 1849,
	451, 1849,
	453, 1849,
	454, 1849,
	455, 1849,
	-2, 651,
	-1, 1393,
	1, 907,
	455, 907,
	-2, 912,
	-1, 1398,
	134, 1020,
	222, 1020,
	253, 1020,
	-2, 978,
	-1, 1491,
	119, 982,
	134, 982,
	193, 982,
	222, 982,
	253, 982,
	263, 982,
	398, 982,
	-2, 1384,
	-1, 1544,
	453, 1517,
	-2, 0,
	-1, 1586,
	119, 982,
	134, 982,
	193, 982,
	222, 982,
	253, 982,
	263, 982,
	398, 982,
	-2, 1093,
	-1, 1641,
	452, 1215,
	-2, 1203,
	-1, 1680,
	1, 478,
	455, 478,
	-2, 912,
	-1, 1868,
	1, 607,
	451, 607,
	453, 607,
	455, 607,
	-2, 0,
	-1, 1869,
	1, 626,
	451, 626,
	453, 626,
	455, 626,
	-2, 0,
	-1, 1945,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1264,
	-1, 1946,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1265,
	-1, 1947,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1266,
	-1, 1948,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1267,
	-1, 1949,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1268,
	-1, 1950,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1269,
	-1, 1951,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1270,
	-1, 1952,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1271,
	-1, 1964,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1283,
	-1, 1965,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1284,
	-1, 1966,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	-2, 1285,
	-1, 1969,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1290,
	-1, 1975,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1294,
	-1, 1977,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1302,
	-1, 1978,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1303,
	-1, 1979,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1304,
	-1, 1980,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1305,
	-1, 2074,
	5, 1172,
	150, 1528,
	452, 1644,
	-2, 1635,
	-1, 2075,
	150, 1529,
	-2, 1903,
	-1, 2076,
	150, 1530,
	-2, 1773,
	-1, 2077,
	150, 1531,
	-2, 1697,
	-1, 2078,
	150, 1532,
	-2, 1733,
	-1, 2079,
	150, 1533,
	-2, 1771,
	-1, 2080,
	150, 1534,
	-2, 1842,
	-1, 2156,
	1, 1094,
	84, 1094,
	119, 1094,
	134, 1094,
	147, 1094,
	151, 1094,
	157, 1094,
	160, 1094,
	184, 1094,
	193, 1094,
	203, 1094,
	218, 1094,
	222, 1094,
	240, 1094,
	253, 1094,
	257, 1094,
	263, 1094,
	312, 1094,
	314, 1094,
	398, 1094,
	408, 1094,
	421, 1094,
	422, 1094,
	423, 1094,
	432, 1094,
	451, 1094,
	453, 1094,
	455, 1094,
	456, 1094,
	-2, 1093,
	-1, 2161,
	452, 1618,
	-2, 1630,
	-1, 2183,
	452, 1214,
	-2, 1204,
	-1, 2408,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1292,
	-1, 2409,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1296,
	-1, 2415,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1298,
	-1, 2596,
	200, 912,
	286, 912,
	293, 912,
	432, 912,
	-2, 475,
	-1, 2671,
	453, 1587,
	456, 1587,
	-2, 1604,
	-1, 2685,
	275, 1006,
	-2, 820,
	-1, 2763,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1300,
	-1, 2770,
	197, 0,
	199, 0,
	247, 0,
	-2, 1319,
	-1, 2833,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1348,
	-1, 2834,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1349,
	-1, 2835,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1350,
	-1, 2839,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1354,
	-1, 2840,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1355,
	-1, 2841,
	14, 0,
	15, 0,
	16, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1356,
	-1, 2884,
	452, 1619,
	-2, 1631,
	-1, 2969,
	454, 2049,
	-2, 955,
	-1, 3013,
	197, 0,
	199, 0,
	247, 0,
	-2, 1320,
	-1, 3016,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1323,
	-1, 3017,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1325,
	-1, 3163,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1324,
	-1, 3164,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1326,
	-1, 3174,
	197, 0,
	-2, 1357,
	-1, 3272,
	197, 0,
	-2, 1358,
	-1, 3384,
	41, 0,
	169, 0,
	221, 0,
	346, 0,
	430, 0,
	438, 0,
	-2, 1906,
}

const sqlPrivate = 57344

const sqlLast = 71956

var sqlAct = [...]int{

	886, 3204, 3117, 3457, 2672, 3229, 3467, 3393, 2311, 2999,
	3207, 3383, 3356, 2105, 3353, 3394, 3193, 3395, 2905, 2320,
	3340, 3232, 2801, 3382, 3276, 2312, 3132, 1002, 815, 3154,
	2960, 1848, 3237, 1932, 2702, 3076, 2955, 1037, 2148, 210,
	2965, 210, 210, 2212, 2436, 210, 210, 210, 210, 210,
	1155, 1611, 210, 2613, 1992, 559, 1294, 2696, 1406, 806,
	580, 2906, 2694, 1581, 2401, 2669, 2434, 2285, 1056, 1598,
	2352, 3178, 2308, 1612, 994, 1290, 2288, 2571, 210, 2557,
	1579, 2544, 580, 2517, 1589, 2998, 2144, 676, 2362, 3048,
	2351, 1809, 1340, 2533, 2343, 2321, 1489, 1553, 2516, 2345,
	1799, 3277, 1148, 2214, 1798, 1725, 1929, 1806, 1297, 2269,
	202, 2856, 1499, 1734, 2023, 2149, 2043, 2005, 814, 139,
	1925, 2397, 1517, 1167, 4, 2361, 2245, 86, 1752, 1759,
	882, 1712, 1393, 1044, 1164, 1710, 2286, 858, 2035, 1827,
	2123, 3230, 2576, 2246, 1554, 1989, 2670, 803, 1157, 1303,
	1277, 1287, 986, 2314, 1795, 1223, 527, 2355, 204, 203,
	2017, 2102, 1033, 2204, 1512, 581, 582, 968, 989, 2131,
	1563, 2070, 2113, 210, 210, 2006, 1480, 146, 1407, 1405,
	543, 576, 2151, 147, 32, 1815, 553, 1794, 1301, 652,
	1177, 885, 805, 1253, 621, 139, 530, 842, 1724, 991,
	966, 671, 1411, 538, 37, 36, 34, 26, 1392, 24,
	735, 22, 1235, 884, 2873, 2432, 1849, 2874, 585, 588,
	1829, 2313, 720, 511, 843, 1041, 3495, 2264, 535, 2122,
	3486, 3485, 1829, 2122, 2122, 810, 3466, 178, 1829, 1766,
	585, 588, 3453, 3451, 3415, 3090, 3090, 2122, 3413, 1841,
	3410, 2122, 3407, 3411, 3404, 3408, 2711, 1766, 3380, 3379,
	2020, 1766, 1766, 686, 3378, 983, 3375, 1841, 3374, 1841,
	2122, 1841, 1041, 1419, 1420, 180, 811, 2232, 3335, 3325,
	3324, 2176, 3090, 3090, 3318, 3312, 3310, 1766, 3090, 3090,
	3274, 3258, 3255, 2176, 1766, 3090, 2859, 3221, 3220, 1422,
	1766, 1766, 3213, 3212, 3184, 1766, 3090, 1766, 3165, 3144,
	3114, 2176, 2724, 2122, 810, 1580, 2758, 791, 1000, 908,
	179, 2489, 2490, 790, 3107, 2021, 1421, 2122, 3089, 3015,
	172, 3090, 2176, 2977, 1419, 1420, 2740, 2712, 173, 2971,
	841, 178, 2740, 2879, 2869, 2862, 2880, 2870, 2122, 2794,
	2739, 2731, 1766, 2740, 2732, 969, 969, 2172, 2530, 148,
	1422, 2122, 2528, 1198, 2527, 2122, 2594, 2122, 798, 2115,
	2481, 2451, 997, 2122, 970, 2464, 2452, 2453, 2465, 180,
	2122, 1490, 2341, 2189, 1762, 1845, 2122, 1421, 3336, 2175,
	1766, 178, 2176, 1020, 996, 2169, 2022, 2019, 2122, 1192,
	2163, 2121, 1844, 1766, 2122, 1845, 3260, 1427, 1015, 972,
	973, 1841, 2859, 2114, 3108, 1766, 2732, 2260, 2203, 1683,
	2724, 2295, 2400, 1765, 179, 2201, 2489, 2490, 2122, 180,
	1549, 1176, 2713, 1342, 172, 2142, 2141, 2140, 1449, 1450,
	1451, 2139, 173, 2138, 178, 974, 971, 797, 796, 795,
	794, 2714, 3065, 1419, 1420, 2495, 1452, 1453, 1454, 1462,
	1463, 1464, 793, 148, 2382, 2061, 2059, 789, 1427, 2147,
	1419, 1420, 1455, 788, 179, 1703, 1830, 787, 786, 1422,
	3027, 1016, 180, 1468, 172, 785, 784, 2504, 1830, 783,
	2024, 1442, 173, 782, 1830, 781, 1422, 780, 2489, 2490,
	76, 2507, 2508, 2509, 779, 778, 1421, 2435, 718, 717,
	716, 715, 714, 148, 1441, 713, 210, 3011, 712, 711,
	710, 1438, 709, 1421, 708, 210, 1197, 179, 1419, 1420,
	707, 1441, 706, 705, 704, 703, 702, 701, 700, 2505,
	699, 698, 697, 696, 695, 694, 210, 693, 685, 2489,
	2490, 684, 643, 210, 1422, 642, 601, 600, 599, 2504,
	2495, 591, 1191, 590, 589, 566, 148, 565, 564, 210,
	1059, 210, 210, 1160, 210, 1059, 210, 1444, 1445, 1446,
	1447, 1421, 563, 1443, 210, 210, 1043, 1427, 547, 2018,
	1048, 200, 199, 198, 1444, 1445, 1446, 1447, 197, 196,
	195, 194, 193, 192, 1427, 191, 190, 189, 188, 210,
	187, 1459, 1013, 2181, 1469, 186, 1490, 185, 1449, 1450,
	1451, 1186, 1837, 210, 184, 1160, 1160, 210, 210, 183,
	210, 2506, 2495, 2877, 1828, 1449, 1450, 1451, 182, 1465,
	1905, 1466, 210, 2711, 2505, 181, 2741, 2574, 1436, 1437,
	210, 1170, 2458, 2447, 1180, 2273, 2164, 2489, 2490, 2155,
	2057, 2055, 1427, 1457, 210, 210, 210, 210, 210, 1160,
	1160, 1442, 1016, 2053, 1160, 2114, 210, 1160, 210, 210,
	2317, 1153, 1151, 2495, 2510, 1708, 1174, 1031, 1442, 1467,
	2301, 178, 1520, 1449, 1450, 1451, 1596, 3400, 1519, 1016,
	2489, 2490, 1506, 178, 1456, 1423, 1424, 1425, 1426, 1428,
	1429, 1501, 1182, 1582, 1050, 1004, 2505, 3381, 116, 1523,
	1851, 1052, 3306, 1145, 1150, 1160, 1298, 178, 3267, 180,
	3263, 3261, 3145, 1229, 1232, 1418, 2506, 1236, 1236, 1028,
	3069, 180, 585, 588, 210, 1448, 1442, 3140, 3203, 1179,
	1178, 2498, 2499, 2491, 2492, 2493, 2494, 2496, 2497, 3047,
	210, 3046, 1448, 1443, 1240, 180, 1423, 1424, 1425, 1426,
	1428, 1429, 3034, 3033, 179, 210, 1520, 1174, 813, 1185,
	1443, 1190, 1519, 1196, 172, 1310, 179, 1850, 1460, 3032,
	3031, 2495, 173, 139, 3025, 3024, 172, 3023, 3022, 1306,
	2942, 811, 1291, 1518, 173, 2894, 2893, 2891, 2506, 2883,
	179, 2853, 2852, 148, 2735, 1281, 1284, 2851, 2778, 2774,
	172, 2569, 1304, 2524, 2515, 148, 1803, 2488, 173, 2485,
	2484, 1363, 2482, 1329, 2495, 1398, 2471, 2470, 1443, 2469,
	1237, 2466, 1502, 2463, 1500, 1703, 2441, 2440, 2433, 148,
	1399, 2342, 2156, 2028, 1418, 2500, 2498, 2499, 2491, 2492,
	2493, 2494, 2496, 2497, 2302, 2489, 2490, 1314, 2507, 2508,
	2509, 1771, 1458, 982, 1317, 1433, 1434, 1440, 1439, 1435,
	1461, 1488, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 1417, 1769, 3493, 1501, 3037, 3465, 3464, 3036, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 178, 3416,
	1704, 2247, 1391, 1003, 2803, 2588, 2060, 2058, 2505, 2396,
	2501, 2502, 2503, 3370, 3368, 3301, 2504, 2500, 2498, 2499,
	2491, 2492, 2493, 2494, 2496, 2497, 3298, 1336, 1397, 2178,
	3297, 3296, 3139, 3292, 1322, 3286, 180, 3259, 3254, 178,
	3253, 1995, 3199, 1404, 3176, 1396, 3150, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 3149, 3130, 210, 1591,
	3127, 3121, 3064, 3045, 1394, 2991, 1419, 1420, 811, 2988,
	2921, 2491, 2492, 2493, 2494, 2496, 2497, 180, 2920, 2909,
	3279, 179, 791, 2908, 210, 1560, 2865, 1551, 790, 2495,
	2769, 172, 1422, 2725, 210, 1059, 210, 210, 210, 173,
	2506, 1414, 1415, 2688, 1160, 580, 210, 210, 2659, 2638,
	580, 210, 1400, 2616, 1605, 2300, 210, 2001, 2615, 1421,
	2316, 2590, 179, 2529, 2462, 1522, 2461, 2446, 2424, 1057,
	2282, 1678, 172, 1524, 1168, 1521, 1513, 2489, 2490, 1510,
	173, 1059, 1419, 1420, 2185, 1590, 2184, 2159, 2136, 2120,
	3126, 2550, 2051, 1484, 1853, 1595, 1552, 1514, 1515, 1548,
	1547, 148, 840, 1706, 1557, 1558, 1546, 1545, 1422, 1544,
	1543, 1677, 1570, 2505, 1542, 1608, 1541, 2616, 1540, 1852,
	1675, 2493, 2494, 2496, 2497, 1538, 1537, 1536, 3066, 2489,
	2490, 825, 1535, 1534, 139, 1421, 178, 1533, 1532, 1531,
	1427, 2056, 2054, 1530, 1529, 1528, 1527, 1526, 811, 1503,
	1485, 1483, 1606, 3019, 2052, 1478, 1000, 1027, 1000, 2500,
	2498, 2499, 2491, 2492, 2493, 2494, 2496, 2497, 1602, 1018,
	1600, 3188, 1010, 2890, 180, 1603, 2872, 2868, 2450, 2137,
	969, 3068, 2889, 2489, 2490, 3299, 3264, 3262, 1502, 1587,
	2586, 1481, 1045, 1680, 1047, 1703, 2697, 1703, 1550, 3143,
	1575, 3109, 2875, 585, 588, 2506, 1160, 210, 585, 588,
	997, 2495, 997, 1059, 2727, 2641, 1702, 1729, 1584, 179,
	1578, 1577, 1576, 1574, 1718, 1573, 1607, 1572, 3202, 172,
	2726, 1674, 996, 1533, 996, 2950, 1041, 173, 2249, 3238,
	1582, 1520, 1389, 1609, 1041, 2919, 1046, 1519, 1038, 2468,
	1335, 1689, 210, 210, 1533, 2467, 2406, 819, 148, 210,
	2234, 2489, 2490, 2495, 2507, 2508, 2509, 1042, 2020, 210,
	1695, 1508, 1849, 1618, 1804, 3233, 1342, 776, 210, 2674,
	210, 2673, 210, 998, 1681, 1800, 210, 1041, 2934, 2489,
	2490, 2923, 2507, 2508, 2509, 2505, 1364, 1699, 210, 2744,
	1749, 2653, 1747, 1751, 3179, 2036, 1756, 1341, 3010, 3468,
	1704, 2247, 2313, 2805, 1763, 1733, 777, 2501, 2502, 2503,
	2456, 2183, 2504, 1032, 2500, 2498, 2499, 2491, 2492, 2493,
	2494, 2496, 2497, 2021, 1039, 1539, 3401, 1516, 1160, 210,
	1160, 1040, 1760, 2667, 1791, 1213, 1160, 2505, 3412, 210,
	2504, 210, 210, 981, 3409, 1787, 2707, 2901, 1487, 3350,
	2956, 1160, 1160, 1790, 210, 585, 588, 1821, 1643, 210,
	2349, 1812, 1179, 1178, 3317, 1326, 580, 210, 3100, 210,
	3440, 210, 1211, 210, 2190, 210, 2179, 2506, 2587, 1615,
	3441, 1201, 3490, 210, 3402, 2495, 210, 1764, 210, 1755,
	2598, 3228, 1854, 3223, 2022, 2019, 2936, 210, 2932, 2931,
	809, 2216, 754, 772, 2088, 770, 2898, 768, 638, 1864,
	1690, 766, 2511, 2495, 2207, 1047, 210, 1894, 763, 2897,
	1781, 2600, 210, 1892, 1780, 2205, 2445, 2444, 804, 2506,
	1425, 1426, 1428, 1429, 1362, 2443, 2442, 2510, 1847, 2047,
	2410, 1832, 1059, 1212, 1834, 2266, 809, 1836, 2259, 2256,
	2237, 1839, 2171, 1976, 1395, 811, 1726, 1817, 1819, 1862,
	1863, 1814, 1175, 2046, 1934, 2510, 2309, 1046, 2207, 2505,
	1041, 1265, 1038, 1361, 808, 1856, 1304, 1909, 2745, 2205,
	1047, 1246, 3160, 1245, 1722, 1903, 1912, 639, 2024, 2219,
	1244, 1207, 1243, 1860, 1599, 2197, 1991, 2505, 2499, 2491,
	2492, 2493, 2494, 2496, 2497, 2640, 1224, 1727, 1728, 1429,
	1324, 1038, 1991, 1930, 1931, 1028, 1846, 2162, 2007, 2008,
	808, 3316, 2226, 3372, 585, 588, 1855, 1059, 2225, 1818,
	1008, 2236, 1046, 3209, 1723, 760, 2007, 2033, 1402, 2911,
	1709, 1902, 1222, 2385, 810, 2747, 2746, 1877, 2379, 2788,
	1904, 2491, 2492, 2493, 2494, 2496, 2497, 2024, 1039, 1360,
	3432, 2506, 2398, 2399, 2168, 1040, 1907, 1867, 1319, 3398,
	210, 2704, 2069, 1910, 2073, 2073, 2086, 1591, 2007, 1221,
	1334, 2106, 2108, 3096, 1209, 1224, 2112, 2018, 1868, 2506,
	810, 1729, 2650, 2645, 1007, 1356, 1906, 1039, 2705, 1908,
	2253, 1059, 210, 2599, 1040, 1911, 1026, 1337, 1746, 791,
	2497, 210, 791, 791, 210, 1921, 2036, 1059, 1922, 1923,
	1704, 2247, 1704, 2247, 1005, 2218, 2388, 1731, 3480, 2160,
	3293, 811, 670, 2489, 2490, 2032, 2507, 2508, 2509, 1869,
	1999, 1511, 2933, 2024, 811, 1997, 1357, 3460, 811, 2157,
	2584, 2628, 2773, 2704, 2297, 2045, 2257, 691, 2170, 1388,
	2049, 2050, 1320, 2143, 1618, 1618, 1987, 2153, 2154, 2128,
	3431, 3159, 1767, 2501, 2502, 2503, 2003, 3440, 567, 807,
	2500, 2498, 2499, 2491, 2492, 2493, 2494, 2496, 2497, 1985,
	1477, 3399, 2627, 1720, 2504, 1694, 1693, 210, 2030, 1703,
	1700, 2501, 2502, 2503, 1041, 641, 640, 1342, 2500, 2498,
	2499, 2491, 2492, 2493, 2494, 2496, 2497, 2597, 1342, 1720,
	2235, 2387, 1000, 2662, 2127, 807, 3094, 3087, 1713, 1059,
	1901, 2922, 1714, 2081, 210, 1359, 811, 2110, 2384, 2217,
	2097, 1829, 210, 1041, 1264, 3000, 1000, 3170, 3087, 139,
	2118, 2119, 969, 210, 3084, 2173, 2129, 2133, 2134, 1643,
	1643, 3447, 3361, 3303, 1206, 3397, 210, 2495, 2912, 1160,
	1713, 1325, 573, 2460, 1714, 3084, 997, 1587, 3077, 2132,
	1615, 1615, 210, 1059, 774, 2206, 210, 210, 773, 2152,
	764, 3075, 764, 1697, 1981, 3085, 765, 3079, 996, 2180,
	997, 1893, 1982, 764, 2208, 1983, 3430, 1891, 1988, 1522,
	810, 3125, 210, 3210, 210, 2386, 3085, 210, 1715, 2510,
	1750, 2270, 996, 1713, 2412, 2027, 3003, 1714, 2995, 2240,
	1717, 2188, 210, 2283, 1374, 3458, 2193, 2886, 3396, 210,
	1990, 210, 3095, 210, 1514, 1515, 1021, 3078, 2195, 210,
	1344, 2505, 210, 2187, 210, 575, 210, 2267, 210, 210,
	1715, 210, 1160, 1160, 1160, 2191, 1160, 2239, 2254, 2268,
	210, 210, 1717, 210, 210, 2785, 1151, 2258, 1729, 1401,
	2196, 210, 2324, 2292, 3481, 1644, 1719, 2248, 2250, 2251,
	2252, 2211, 1174, 2194, 2228, 210, 1006, 210, 2220, 2222,
	210, 761, 210, 3459, 210, 2238, 2364, 2366, 3439, 1866,
	3333, 1933, 2365, 1715, 2270, 1698, 2270, 2363, 2255, 2337,
	2338, 1333, 210, 210, 210, 1717, 210, 692, 1719, 2231,
	3437, 1779, 633, 2333, 1321, 3461, 3243, 3129, 3080, 2306,
	2692, 3081, 2304, 2506, 585, 588, 2786, 1025, 1984, 210,
	569, 1179, 2271, 1793, 1559, 1019, 2280, 1986, 2348, 3080,
	2263, 1566, 3081, 1014, 2374, 1998, 2375, 574, 1174, 1174,
	2336, 2296, 1493, 510, 2944, 2275, 1498, 2277, 3083, 1720,
	1618, 1719, 3156, 139, 2373, 1410, 2367, 1735, 2368, 2339,
	3086, 2319, 3001, 2630, 1569, 2335, 2037, 1830, 2390, 3083,
	1730, 1691, 2330, 632, 2331, 1739, 2332, 571, 2383, 2634,
	2334, 3086, 1409, 2130, 1304, 2340, 2632, 749, 2421, 2350,
	2315, 1720, 2315, 2326, 3475, 2842, 3043, 3341, 1567, 2577,
	3215, 3214, 1371, 1174, 2376, 1973, 2377, 3197, 2378, 802,
	2024, 2419, 3331, 3283, 568, 2438, 2439, 1736, 210, 2413,
	2900, 2603, 2693, 2611, 2607, 2501, 2502, 2503, 2305, 1477,
	2448, 2631, 2500, 2498, 2499, 2491, 2492, 2493, 2494, 2496,
	2497, 3332, 3099, 2287, 1720, 1643, 2393, 1720, 2392, 3098,
	2395, 998, 572, 998, 3155, 2284, 2161, 1813, 523, 1802,
	1801, 1775, 3082, 570, 2784, 1409, 1615, 2559, 2961, 1688,
	1408, 1917, 3304, 1898, 1711, 1345, 2124, 1758, 1684, 750,
	3133, 592, 518, 3082, 2281, 1267, 1716, 2449, 1372, 3198,
	1323, 2618, 749, 2617, 1568, 1861, 1740, 1757, 2404, 1562,
	2867, 1410, 2543, 2542, 1704, 1701, 1358, 1059, 2526, 2411,
	2167, 2166, 2531, 811, 802, 2165, 2416, 2538, 2539, 631,
	2294, 630, 2241, 3288, 2540, 1753, 210, 2417, 1716, 1252,
	2422, 2843, 690, 1971, 210, 1686, 1974, 2844, 3044, 2560,
	3474, 210, 2126, 808, 210, 210, 1059, 2125, 1727, 1728,
	634, 1687, 3157, 1408, 3118, 1059, 1741, 1742, 1373, 1238,
	1250, 2736, 210, 2455, 1811, 1737, 1566, 2664, 2202, 2564,
	3444, 1918, 2554, 3231, 525, 1754, 1239, 210, 3049, 3344,
	2558, 1716, 2565, 2566, 750, 1970, 2857, 3205, 2041, 3446,
	2535, 2553, 3097, 1738, 3289, 210, 210, 210, 3195, 1569,
	2562, 210, 683, 3414, 210, 2548, 3392, 2595, 3300, 3175,
	2568, 210, 210, 210, 210, 210, 3042, 2573, 1564, 3305,
	2601, 2938, 751, 2552, 2572, 2518, 210, 210, 210, 1890,
	3196, 2582, 2555, 1567, 1386, 210, 2768, 1368, 2604, 2605,
	2585, 2549, 2578, 1000, 3345, 2581, 2593, 210, 1160, 2532,
	210, 2521, 2522, 2523, 2619, 1565, 2622, 1059, 1000, 3290,
	2547, 2242, 2243, 1366, 1059, 2620, 3206, 2624, 2625, 210,
	2418, 2608, 210, 210, 1355, 2561, 2612, 1743, 2483, 2420,
	593, 594, 210, 1353, 2423, 1160, 210, 1000, 1160, 1160,
	1160, 2591, 2592, 2291, 2265, 210, 1351, 997, 2233, 2579,
	2580, 210, 2643, 2186, 2644, 1349, 2677, 210, 2519, 210,
	1972, 1347, 997, 2596, 1597, 2681, 210, 1594, 1387, 996,
	1339, 1315, 1251, 2563, 752, 2602, 1248, 751, 804, 1568,
	2381, 688, 689, 2380, 996, 1718, 519, 1174, 2370, 1160,
	1160, 997, 1744, 2660, 2709, 1900, 2700, 210, 210, 2651,
	2363, 210, 1874, 1249, 2633, 1676, 2652, 1790, 2639, 2363,
	1718, 2699, 753, 996, 2723, 2646, 2647, 524, 596, 595,
	2648, 1525, 1603, 210, 1889, 1059, 210, 210, 1059, 210,
	2655, 2649, 1385, 1318, 2654, 1367, 2661, 2742, 520, 1228,
	2239, 1618, 1760, 2682, 2040, 210, 2684, 2685, 2686, 1760,
	3113, 681, 682, 3106, 2635, 2636, 762, 2637, 3338, 3073,
	2959, 1365, 2917, 2915, 2796, 2899, 2691, 2676, 597, 598,
	2675, 800, 1354, 749, 2310, 2299, 521, 1618, 522, 752,
	916, 1352, 2706, 2298, 811, 2698, 2656, 2657, 1059, 2658,
	2278, 2715, 2738, 1843, 1350, 802, 2752, 2729, 2730, 1059,
	139, 210, 1842, 1348, 2753, 2734, 2722, 1840, 1838, 1346,
	2717, 2718, 2719, 1835, 2720, 2721, 2771, 753, 1338, 206,
	1833, 513, 514, 1831, 1247, 531, 513, 531, 541, 546,
	1822, 801, 562, 1772, 1770, 1761, 1643, 1748, 1745, 1174,
	206, 2708, 1732, 1721, 2780, 2781, 2782, 2806, 2749, 2695,
	978, 3247, 2402, 1604, 1412, 3441, 2754, 1615, 680, 3364,
	2750, 2756, 206, 3152, 1707, 750, 3147, 3146, 1203, 2207,
	2207, 2207, 1643, 3249, 979, 2224, 2970, 767, 769, 2854,
	2205, 2223, 2221, 1729, 1383, 1384, 1870, 1930, 2812, 1872,
	2776, 1419, 1420, 1615, 210, 1419, 1420, 3295, 2787, 2789,
	2790, 3269, 2802, 1930, 2822, 2795, 1562, 3050, 2244, 210,
	2227, 2270, 1416, 526, 2262, 1059, 2261, 1422, 2230, 2000,
	2811, 3337, 2807, 2229, 2403, 2819, 2537, 3307, 2948, 2808,
	2943, 2876, 2871, 2809, 2850, 210, 2821, 1413, 1493, 2882,
	2846, 2318, 2111, 1679, 1421, 1610, 3456, 2583, 1421, 3473,
	2489, 2490, 3309, 513, 513, 3020, 2847, 980, 1419, 1420,
	537, 206, 2199, 2198, 1328, 2567, 1490, 2863, 2864, 2044,
	1327, 2888, 2791, 1566, 2575, 2199, 2589, 998, 1920, 2200,
	2048, 210, 2042, 2858, 2015, 2093, 2887, 2783, 139, 1618,
	2860, 2861, 2924, 1370, 2855, 1488, 1369, 1486, 3482, 3280,
	3189, 998, 3187, 3120, 2895, 3067, 1569, 2994, 751, 2987,
	2976, 2954, 2941, 2935, 2940, 210, 210, 210, 2939, 2914,
	1000, 1000, 2716, 2689, 2878, 1564, 2687, 2372, 2371, 2328,
	2303, 2279, 1059, 210, 2002, 2937, 2928, 1160, 1618, 1618,
	1567, 1888, 1887, 1886, 1825, 1824, 1823, 2892, 1805, 1783,
	1782, 1778, 210, 1777, 1618, 1618, 2951, 2903, 1776, 2972,
	1774, 1773, 1565, 1403, 1382, 210, 210, 1160, 1160, 1160,
	1381, 210, 210, 210, 997, 997, 210, 210, 2967, 2546,
	210, 210, 1276, 2575, 1643, 1618, 210, 2963, 2929, 2930,
	1275, 1274, 1273, 2962, 1272, 2324, 996, 996, 2966, 1059,
	1271, 2983, 2916, 2239, 2918, 1615, 2885, 1270, 799, 1269,
	752, 2089, 1268, 1266, 1261, 1260, 1259, 2952, 2957, 2947,
	1258, 1257, 1220, 1219, 2363, 1218, 1217, 1790, 1216, 3018,
	2953, 1215, 1214, 1643, 1643, 1208, 1568, 2535, 1202, 2964,
	1200, 1199, 2968, 1024, 210, 1023, 2974, 2973, 753, 1643,
	1643, 953, 863, 1682, 1615, 1615, 775, 625, 2984, 2985,
	2979, 3014, 3005, 2986, 2978, 759, 3208, 2992, 2990, 2993,
	1615, 1615, 1376, 74, 1210, 2980, 2981, 2982, 612, 3002,
	1643, 2997, 68, 2989, 2913, 3006, 3349, 747, 2626, 1873,
	1000, 1343, 1875, 2551, 1168, 2135, 3330, 1057, 3028, 2459,
	3275, 1615, 3169, 2039, 1507, 70, 210, 851, 936, 3074,
	2902, 2354, 2353, 818, 1062, 1692, 1059, 857, 1059, 1705,
	2182, 2072, 1614, 860, 1616, 862, 861, 1617, 1509, 859,
	2545, 1613, 2293, 2322, 1255, 736, 737, 1696, 210, 210,
	210, 1996, 2034, 3041, 997, 2454, 1504, 831, 853, 2031,
	210, 1017, 830, 2556, 2703, 2881, 210, 2793, 210, 3138,
	1916, 210, 210, 210, 2394, 1913, 996, 3092, 2799, 628,
	2486, 2016, 210, 210, 1160, 3055, 1009, 1059, 2094, 1160,
	2087, 3070, 3071, 2083, 3051, 1390, 3054, 1479, 2323, 3057,
	3052, 3053, 3056, 3059, 1049, 2572, 1011, 210, 3063, 3101,
	1059, 834, 3060, 1160, 1994, 680, 1495, 3058, 2428, 2570,
	3072, 3102, 3091, 2710, 3122, 2177, 1924, 1792, 977, 3093,
	976, 975, 3355, 3352, 1685, 2192, 1022, 1471, 2678, 847,
	3103, 3104, 210, 562, 1618, 3116, 1173, 1000, 2536, 2737,
	3137, 1059, 1225, 3294, 1470, 1000, 771, 3148, 3110, 206,
	3285, 206, 206, 3135, 1165, 3123, 206, 2700, 1000, 3134,
	1036, 1035, 1034, 3115, 206, 1181, 2610, 3479, 1059, 2910,
	177, 174, 3142, 176, 175, 3111, 2926, 3136, 2663, 90,
	35, 17, 3112, 1790, 2884, 115, 3131, 114, 113, 1205,
	112, 997, 111, 110, 109, 108, 107, 106, 105, 997,
	104, 3151, 103, 1227, 3181, 102, 1059, 206, 206, 3158,
	1165, 3161, 997, 996, 210, 101, 210, 100, 1059, 210,
	99, 996, 206, 98, 97, 96, 95, 210, 3166, 1643,
	1263, 2093, 2093, 94, 996, 93, 92, 3177, 91, 558,
	555, 50, 49, 89, 206, 206, 206, 206, 1165, 210,
	1615, 3192, 88, 16, 33, 14, 562, 54, 206, 206,
	55, 3185, 210, 13, 3182, 3183, 29, 3235, 3119, 3191,
	210, 30, 80, 3124, 79, 1160, 28, 15, 3226, 27,
	210, 25, 11, 8, 3190, 7, 3240, 10, 1571, 3242,
	12, 144, 3211, 143, 73, 142, 3141, 72, 3186, 141,
	210, 210, 140, 3239, 3224, 71, 23, 9, 3256, 3257,
	136, 3236, 2949, 67, 3217, 138, 137, 3252, 64, 135,
	210, 134, 65, 3250, 206, 3245, 210, 3234, 998, 133,
	132, 3244, 2093, 2093, 2093, 66, 210, 131, 3251, 3246,
	206, 2966, 21, 998, 5, 53, 6, 3153, 2743, 3248,
	3291, 83, 3282, 84, 2700, 546, 31, 2089, 2089, 62,
	61, 60, 20, 52, 3278, 19, 168, 3281, 3273, 3268,
	167, 166, 998, 165, 3302, 160, 3266, 159, 164, 162,
	161, 3218, 3219, 163, 210, 1160, 158, 130, 170, 169,
	210, 156, 152, 151, 1160, 1160, 155, 157, 154, 153,
	1160, 150, 171, 210, 129, 210, 3323, 57, 128, 3308,
	1618, 1174, 127, 126, 3239, 125, 124, 3315, 3311, 56,
	18, 2, 1, 3334, 0, 3320, 0, 210, 0, 0,
	3327, 0, 0, 210, 210, 3314, 1059, 3346, 0, 0,
	0, 0, 0, 3319, 210, 0, 3354, 3357, 0, 3365,
	3321, 3322, 3358, 0, 0, 3362, 3326, 0, 2089, 2089,
	2089, 3367, 0, 3369, 0, 1618, 3376, 0, 3359, 3351,
	0, 0, 3328, 0, 3329, 3377, 0, 210, 0, 0,
	0, 0, 3371, 0, 3373, 0, 0, 3062, 3403, 0,
	0, 0, 0, 0, 0, 0, 3388, 3389, 0, 0,
	3391, 3390, 3347, 0, 0, 1643, 0, 0, 0, 0,
	3419, 3417, 3421, 210, 2425, 2426, 3405, 0, 0, 0,
	3427, 0, 3426, 0, 0, 0, 1615, 3420, 3418, 3422,
	0, 0, 3423, 210, 0, 0, 3429, 0, 0, 0,
	0, 1618, 0, 0, 0, 0, 3424, 3425, 513, 3435,
	3428, 3438, 3436, 0, 0, 0, 2324, 210, 3354, 0,
	1643, 3357, 3449, 3443, 3445, 3450, 3442, 3452, 0, 206,
	0, 206, 3454, 3455, 206, 0, 0, 0, 0, 0,
	0, 1615, 0, 0, 1181, 3462, 1165, 206, 0, 0,
	3463, 0, 0, 0, 0, 206, 1181, 531, 0, 3470,
	206, 1181, 3469, 0, 3471, 3476, 562, 0, 3472, 0,
	1057, 0, 3483, 0, 3484, 2512, 2513, 2514, 3477, 3478,
	0, 1561, 0, 0, 0, 0, 3448, 0, 0, 3487,
	3488, 3489, 3366, 0, 3491, 3492, 1643, 3167, 0, 0,
	0, 3496, 0, 0, 0, 0, 0, 3494, 0, 672,
	0, 0, 0, 2093, 2093, 0, 0, 1615, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 3167, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 1933, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 2093, 2093, 2093, 2093, 2093, 2093, 2093,
	2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093, 2093,
	2093, 2093, 0, 2093, 0, 998, 998, 206, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 817, 0, 0, 76, 0, 0, 0, 0, 2089,
	2089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 0,
	58, 0, 206, 206, 0, 0, 0, 0, 0, 206,
	0, 0, 59, 0, 0, 0, 0, 0, 77, 1810,
	0, 0, 1422, 0, 0, 0, 63, 0, 206, 0,
	206, 0, 206, 0, 0, 0, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1826, 1421,
	0, 0, 0, 0, 829, 0, 69, 0, 0, 2089,
	2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089,
	2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089, 0, 2089,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 562,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 206,
	76, 1165, 206, 0, 0, 1933, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 0, 0, 0, 0, 206,
	0, 0, 0, 78, 0, 998, 206, 206, 0, 206,
	1427, 206, 0, 206, 0, 206, 2764, 2765, 0, 0,
	0, 0, 0, 1895, 77, 0, 1896, 0, 1897, 0,
	0, 0, 0, 0, 0, 145, 81, 206, 82, 0,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 546, 178, 0, 0,
	0, 0, 562, 0, 0, 0, 0, 0, 0, 675,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1442, 180, 2823, 2824, 2825, 2826,
	2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836,
	2837, 2838, 2839, 2840, 2841, 0, 2845, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 0, 149, 0, 0, 0, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	172, 0, 998, 0, 0, 0, 0, 0, 173, 0,
	998, 145, 81, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 998, 0, 0, 0, 0, 0, 673,
	0, 0, 0, 178, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 675, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 206, 0, 0, 0, 0,
	0, 0, 0, 2489, 2490, 58, 2507, 2508, 2509, 0,
	0, 0, 513, 0, 0, 117, 0, 59, 0, 206,
	0, 513, 2772, 0, 206, 0, 0, 0, 149, 817,
	0, 63, 0, 817, 0, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 69, 0, 0, 2504, 1183, 0, 1187, 0, 1193,
	0, 0, 0, 0, 0, 148, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 76, 0, 531, 0, 0,
	0, 0, 829, 58, 0, 0, 829, 0, 0, 0,
	0, 0, 0, 0, 1143, 59, 0, 0, 0, 1143,
	0, 0, 0, 0, 2093, 0, 0, 2495, 0, 63,
	0, 0, 0, 0, 2215, 0, 0, 0, 0, 77,
	0, 0, 206, 1313, 0, 0, 0, 0, 0, 0,
	1316, 0, 0, 206, 0, 0, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 206, 2093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2510,
	0, 0, 206, 0, 0, 0, 206, 2272, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 2505, 206, 0, 1181, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2174, 0, 0,
	0, 0, 1810, 0, 0, 0, 0, 0, 0, 2215,
	0, 513, 0, 2327, 78, 0, 0, 77, 0, 206,
	2089, 0, 206, 0, 206, 0, 206, 2093, 206, 206,
	0, 1165, 0, 0, 0, 0, 0, 0, 0, 0,
	2346, 680, 0, 2215, 2215, 0, 145, 81, 0, 82,
	0, 206, 1472, 1473, 1474, 1475, 1476, 0, 0, 0,
	0, 0, 0, 2089, 0, 1181, 0, 1181, 178, 0,
	1165, 0, 1165, 2506, 1165, 0, 0, 0, 0, 0,
	675, 0, 1492, 116, 0, 0, 0, 0, 1505, 0,
	0, 0, 206, 206, 206, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0, 206,
	0, 0, 78, 0, 0, 0, 1455, 0, 0, 0,
	117, 0, 0, 1422, 0, 0, 0, 1468, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	0, 179, 0, 2089, 145, 81, 0, 82, 0, 0,
	1421, 172, 0, 0, 0, 0, 0, 0, 1441, 173,
	0, 0, 0, 0, 0, 1438, 178, 3174, 0, 0,
	0, 0, 0, 0, 0, 2501, 2502, 2503, 675, 0,
	148, 116, 2500, 2498, 2499, 2491, 2492, 2493, 2494, 2496,
	2497, 0, 0, 0, 0, 0, 0, 1555, 1555, 1555,
	0, 0, 0, 0, 180, 0, 0, 0, 1181, 0,
	3200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 0, 117, 0,
	0, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 0, 1459, 0, 0, 1469, 172,
	0, 0, 1449, 1450, 1451, 0, 817, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 1307, 0,
	0, 0, 1436, 1437, 0, 0, 206, 0, 0, 0,
	3272, 0, 0, 1422, 0, 0, 0, 1457, 0, 1143,
	0, 206, 0, 0, 0, 1442, 513, 0, 0, 0,
	0, 0, 0, 0, 513, 0, 0, 0, 0, 0,
	1421, 513, 0, 1467, 513, 513, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 1456, 829,
	0, 0, 1181, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2215, 2215, 206, 0, 1448,
	0, 2215, 0, 0, 2614, 0, 0, 0, 0, 0,
	0, 2215, 2614, 2215, 2614, 2614, 0, 1443, 0, 2489,
	2490, 1427, 2507, 2508, 2509, 0, 206, 206, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 206, 0, 0,
	1165, 0, 1449, 1450, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2666,
	0, 0, 2668, 2671, 0, 0, 0, 0, 0, 0,
	2504, 0, 206, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 1143, 0, 0,
	0, 1165, 0, 0, 0, 1442, 0, 2215, 0, 513,
	0, 0, 0, 0, 0, 0, 2215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 1433,
	1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 0, 206, 1810, 2477,
	0, 1810, 2478, 2495, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2748, 0, 0, 1165, 206, 0, 206,
	0, 0, 0, 1419, 1420, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 2510, 0, 0, 0, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 2505, 0, 0,
	1914, 0, 1919, 0, 1441, 0, 0, 0, 1926, 0,
	0, 2804, 0, 0, 0, 1935, 1936, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	3009, 1975, 0, 1977, 1978, 1979, 1980, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 1446,
	1447, 0, 0, 2004, 0, 0, 0, 1427, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 0, 0, 1492, 2506,
	0, 0, 2029, 206, 206, 0, 1143, 0, 0, 0,
	0, 0, 0, 0, 513, 0, 0, 0, 1449, 1450,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 513,
	0, 0, 0, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	0, 0, 0, 0, 2085, 0, 2096, 2098, 2103, 0,
	0, 0, 0, 0, 0, 1181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2501, 2502, 2503, 1422, 0, 0, 0, 2500, 2498,
	2499, 2491, 2492, 2493, 2494, 2496, 2497, 0, 0, 0,
	0, 0, 0, 0, 0, 2945, 206, 206, 0, 0,
	0, 1421, 0, 0, 0, 1448, 0, 0, 0, 1441,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 1143, 0, 0, 0, 0,
	0, 0, 2215, 206, 0, 0, 0, 0, 0, 0,
	0, 1143, 0, 0, 0, 2346, 2346, 0, 0, 0,
	0, 680, 680, 2215, 0, 2767, 1810, 1810, 0, 0,
	680, 2215, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 1455, 0,
	0, 0, 0, 0, 3029, 1422, 0, 0, 0, 1468,
	0, 2274, 0, 2276, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 0, 1421, 1143, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 1442, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 1181, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 1143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2215, 2215,
	2215, 0, 0, 1444, 1445, 1446, 1447, 0, 0, 0,
	1181, 0, 0, 1427, 0, 0, 2215, 0, 2614, 0,
	1448, 1181, 1181, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 206, 0, 0, 0, 1459, 1443, 0,
	1469, 0, 0, 0, 1449, 1450, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3128, 0, 0,
	0, 0, 0, 0, 0, 1465, 917, 1466, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 1181, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 2408, 2409, 0, 1467, 0, 0, 2415, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 2429, 2430, 0,
	0, 0, 0, 2029, 0, 0, 0, 0, 207, 0,
	0, 0, 2437, 0, 0, 0, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0,
	0, 1448, 0, 0, 2215, 0, 2614, 0, 2457, 3194,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 1443,
	0, 0, 0, 2472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 2671, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1181, 2103, 2103, 2103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1555, 0, 0, 0,
	206, 206, 0, 0, 2541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2804, 0, 0, 0, 0, 0, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3194, 0, 1458, 0,
	0, 1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0,
	0, 2025, 0, 0, 2026, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1143, 0, 817, 206, 0, 0, 0, 0, 0,
	2614, 0, 0, 1419, 1420, 0, 0, 0, 0, 0,
	883, 0, 0, 1181, 0, 1181, 0, 0, 2629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1422,
	1143, 0, 0, 0, 0, 0, 0, 3342, 0, 1143,
	0, 0, 0, 1181, 206, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 206, 0, 1421, 0, 0, 0,
	0, 0, 0, 829, 1441, 0, 0, 0, 0, 0,
	586, 0, 0, 0, 0, 0, 829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2804, 0, 211,
	0, 0, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2701, 0, 0, 0, 0,
	2762, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2215, 0, 0, 0, 1444, 1445, 1446,
	1447, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	0, 1143, 0, 3194, 0, 0, 0, 0, 1143, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1181, 1449, 1450,
	1451, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2755, 0,
	0, 999, 1926, 0, 1419, 1420, 0, 0, 2759, 2760,
	0, 0, 2763, 0, 0, 0, 2766, 0, 0, 0,
	0, 0, 0, 0, 0, 2770, 0, 0, 0, 0,
	1422, 1442, 0, 0, 2777, 0, 0, 2541, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 2797, 0,
	0, 0, 0, 0, 0, 1441, 0, 0, 0, 1143,
	0, 0, 1143, 0, 0, 0, 0, 2813, 2814, 0,
	2815, 2816, 2817, 0, 0, 2818, 0, 0, 0, 2820,
	0, 0, 0, 0, 0, 207, 1064, 207, 207, 1064,
	0, 1064, 207, 0, 0, 1448, 0, 0, 0, 0,
	207, 2761, 0, 0, 0, 0, 0, 0, 0, 0,
	2848, 2849, 0, 1443, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 1143, 0, 0, 0, 0, 0, 1427, 0,
	0, 0, 0, 1143, 0, 0, 0, 0, 2866, 0,
	0, 1064, 1064, 207, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 207, 207, 207, 0, 1064, 1064, 0, 0, 0,
	1064, 0, 2896, 1064, 207, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2904, 2907, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	0, 2925, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 1064, 0, 0, 0, 0, 0, 0, 603, 1143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 604,
	623, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1555, 0, 0, 0,
	605, 0, 0, 606, 1443, 2975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 0, 0, 0, 607, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 3007, 3008, 0, 0, 0, 0, 3012,
	3013, 0, 0, 0, 3016, 3017, 1143, 0, 0, 0,
	0, 3021, 609, 0, 0, 610, 633, 0, 0, 205,
	636, 205, 205, 0, 0, 0, 205, 0, 0, 0,
	3026, 0, 0, 0, 586, 0, 0, 3030, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 1143, 0, 0, 0, 205, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 632, 0, 0,
	0, 0, 205, 0, 613, 0, 0, 0, 0, 1060,
	0, 0, 1161, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 205, 205, 205, 0, 0,
	0, 0, 0, 0, 0, 611, 0, 0, 205, 205,
	0, 0, 0, 0, 614, 0, 0, 0, 0, 0,
	2907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 615, 0, 0, 1161, 1161, 0, 0, 0, 0,
	0, 1064, 0, 207, 207, 0, 0, 0, 0, 0,
	1064, 207, 0, 0, 0, 0, 207, 0, 635, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 616, 0,
	1143, 0, 1143, 0, 205, 0, 0, 0, 1161, 1161,
	0, 617, 0, 1161, 0, 0, 1161, 1064, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	2907, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	618, 0, 0, 631, 0, 630, 0, 0, 0, 0,
	619, 3162, 3163, 3164, 0, 0, 0, 0, 0, 0,
	0, 1143, 620, 0, 1161, 0, 0, 626, 0, 0,
	0, 0, 637, 0, 634, 123, 0, 3172, 3173, 624,
	0, 58, 0, 0, 1143, 0, 0, 0, 0, 0,
	0, 3180, 0, 59, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 1420, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 39, 120, 0, 1143, 0, 0, 0, 0,
	0, 1422, 2907, 0, 0, 38, 0, 69, 0, 0,
	3216, 0, 1064, 207, 0, 0, 0, 0, 3222, 1064,
	0, 817, 1143, 0, 0, 3227, 0, 41, 1421, 0,
	0, 0, 42, 0, 0, 0, 1441, 75, 0, 2907,
	121, 0, 2907, 0, 0, 40, 85, 0, 0, 0,
	0, 76, 43, 0, 0, 0, 0, 0, 207, 207,
	1143, 2907, 2907, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 2414, 0, 207, 0, 207, 0, 207, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 0, 1444,
	1445, 1446, 1447, 0, 829, 0, 0, 0, 0, 1427,
	0, 3284, 0, 0, 3287, 0, 0, 0, 0, 1585,
	0, 999, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 1585, 0,
	1449, 1450, 1451, 0, 1064, 586, 1064, 0, 0, 0,
	586, 0, 1064, 0, 0, 207, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 1064, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 207, 207, 0, 207, 0, 207, 0, 207,
	0, 207, 0, 1442, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 817, 0, 207, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 1161, 579, 0, 0, 0, 0, 579,
	0, 48, 145, 81, 0, 82, 0, 46, 0, 0,
	0, 122, 0, 3387, 3387, 3387, 0, 47, 0, 0,
	0, 0, 0, 0, 178, 0, 0, 0, 1064, 0,
	1060, 0, 3406, 0, 0, 0, 51, 1448, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	2907, 0, 2907, 0, 0, 1443, 0, 0, 0, 0,
	1143, 0, 180, 0, 829, 0, 3387, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 0, 887, 0, 179, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 172, 0, 0,
	0, 0, 205, 205, 0, 173, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 3387, 0,
	0, 0, 0, 0, 0, 0, 148, 0, 205, 3,
	205, 0, 205, 0, 0, 1161, 0, 0, 0, 0,
	0, 0, 1060, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 852, 87, 0, 0, 0, 0,
	207, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 586, 205, 0, 205,
	0, 205, 0, 205, 0, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1161, 0, 1161,
	0, 0, 0, 0, 0, 1161, 0, 0, 0, 0,
	0, 0, 0, 992, 0, 0, 0, 0, 0, 0,
	1161, 1161, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 0, 0, 207, 0,
	0, 0, 0, 0, 792, 0, 0, 0, 0, 207,
	0, 0, 201, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 1064,
	0, 0, 207, 0, 0, 987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 1060, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 207, 0,
	207, 0, 207, 0, 207, 207, 0, 0, 1064, 1064,
	1064, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 999, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 999,
	0, 1419, 1420, 0, 205, 0, 0, 1462, 1463, 1464,
	0, 0, 1419, 1420, 0, 0, 0, 0, 207, 207,
	207, 0, 207, 0, 0, 0, 0, 1422, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 1421, 0, 0, 0, 0,
	1060, 0, 0, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2407,
	0, 0, 0, 0, 0, 1444, 1445, 1446, 1447, 0,
	0, 0, 205, 0, 0, 1427, 1444, 1445, 1446, 1447,
	0, 0, 0, 205, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 1459,
	0, 0, 1469, 0, 0, 0, 1449, 1450, 1451, 0,
	0, 0, 205, 0, 0, 0, 586, 1449, 1450, 1451,
	0, 0, 0, 0, 0, 1061, 0, 0, 1162, 0,
	1061, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 205, 0, 0, 0, 0, 205, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 1064, 0, 0, 0, 0, 1161, 205,
	1162, 1162, 205, 0, 205, 0, 205, 0, 205, 205,
	0, 0, 1060, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1162, 1162, 0, 0, 0, 1162,
	0, 0, 1162, 1448, 0, 0, 0, 0, 0, 87,
	0, 87, 0, 87, 1448, 0, 0, 0, 0, 0,
	0, 1443, 205, 205, 205, 0, 205, 0, 0, 0,
	0, 0, 1443, 207, 0, 0, 0, 0, 0, 0,
	0, 1161, 1161, 1161, 0, 1161, 1460, 0, 0, 205,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 207, 207, 0, 0, 0, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 1064, 0, 0, 0, 812, 87,
	0, 0, 1054, 1064, 0, 0, 0, 87, 0, 1172,
	1064, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 1064, 207, 0, 1064, 1064, 1064, 0, 0, 0,
	1458, 207, 0, 0, 0, 0, 0, 0, 1461, 0,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0,
	0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	0, 0, 0, 0, 0, 1256, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 1064, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 1280, 1280, 1280,
	1172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1311, 1312, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 207, 1064, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 207, 0, 0, 0, 0, 999, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 999, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 1375, 0, 1497,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	1585, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	1061, 0, 0, 0, 0, 0, 0, 0, 0, 1162,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 205, 205, 205, 0,
	0, 719, 0, 749, 1060, 1585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 205, 0, 0,
	0, 0, 0, 0, 0, 726, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 755, 724, 0,
	87, 1064, 0, 1583, 0, 1586, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 205, 0, 0, 0,
	0, 725, 0, 0, 0, 205, 727, 0, 0, 0,
	756, 0, 0, 0, 0, 0, 733, 734, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 728, 1161, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 205, 0, 0,
	0, 0, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1161, 0, 0, 1161, 1161, 1161,
	0, 1162, 207, 207, 0, 0, 0, 205, 1061, 205,
	0, 0, 0, 0, 729, 0, 0, 1592, 1064, 207,
	0, 0, 723, 1064, 0, 205, 0, 0, 0, 0,
	1601, 0, 0, 0, 0, 0, 0, 0, 730, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 1161, 1161,
	0, 0, 0, 1064, 1064, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 754, 1060, 1064, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 751, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1162, 0, 1162, 0, 0, 0, 0,
	644, 1162, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 1162, 1162, 1060, 0,
	0, 0, 0, 999, 999, 0, 0, 0, 0, 0,
	0, 645, 0, 0, 0, 745, 0, 0, 0, 0,
	646, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 647, 0, 0, 721, 0,
	752, 0, 1064, 0, 1064, 0, 0, 0, 0, 0,
	0, 667, 0, 0, 722, 0, 0, 0, 0, 0,
	0, 0, 812, 0, 741, 0, 648, 0, 738, 0,
	0, 0, 757, 758, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 649, 1785, 742, 1061, 0, 207,
	0, 0, 1797, 0, 0, 0, 0, 0, 207, 207,
	1064, 0, 0, 1064, 650, 1064, 744, 651, 0, 0,
	0, 1256, 0, 1816, 1060, 1816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 746, 1064,
	0, 0, 0, 0, 666, 0, 205, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 792, 1064, 0, 792,
	792, 0, 1061, 999, 0, 0, 0, 0, 0, 0,
	0, 0, 1797, 0, 0, 1858, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 1871, 0, 0, 0, 205, 0, 0, 0,
	1878, 0, 1880, 0, 1882, 0, 1884, 0, 1885, 0,
	0, 0, 0, 0, 1993, 0, 653, 0, 0, 0,
	0, 1060, 1064, 0, 0, 0, 1161, 0, 812, 0,
	1899, 0, 670, 654, 1064, 0, 1061, 0, 0, 0,
	0, 1491, 0, 207, 0, 1491, 0, 0, 0, 0,
	0, 0, 1061, 0, 0, 0, 1161, 1161, 1161, 0,
	669, 0, 0, 0, 0, 0, 0, 655, 0, 0,
	656, 0, 0, 0, 0, 0, 664, 0, 0, 0,
	0, 0, 0, 657, 0, 0, 207, 0, 1060, 0,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	999, 0, 658, 665, 0, 0, 207, 207, 999, 0,
	0, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 1585, 0, 1586, 661, 0, 0, 0, 0, 660,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 668, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 663, 0, 1061, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 1064, 0, 0, 1162, 1060, 0, 1060, 0, 0,
	1064, 1064, 0, 0, 0, 0, 1064, 0, 1061, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2158, 0, 0,
	207, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 1161, 0, 0, 1060, 0, 1161, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 1161, 0, 0, 0, 0, 1162, 1162, 1162,
	87, 1162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	87, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	205, 205, 0, 0, 0, 1172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2290, 0, 0, 0, 0,
	1797, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2329, 0, 0, 1280, 0, 1280, 0, 1280,
	0, 1172, 1172, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2369, 0, 0, 0, 0, 1993,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 2389, 1172, 2391, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 0, 1161, 0, 0, 0, 0, 0,
	0, 0, 2405, 1161, 1161, 0, 0, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	1061, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 1162, 1422, 0, 0, 0, 1468, 0,
	0, 0, 1061, 0, 0, 0, 0, 0, 0, 1061,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 0, 1441,
	1162, 0, 0, 1162, 1162, 1162, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 87, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1162, 1162, 87, 87, 0, 87,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1061, 0, 0, 1061, 0, 0, 1459, 0, 0, 1469,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	2606, 812, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 87, 0, 0, 2642,
	1172, 2290, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 1061, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 1061, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 2679, 0, 0, 0, 2683,
	0, 0, 0, 0, 0, 0, 0, 0, 2690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	1061, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2751, 0, 1172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2757, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 1419, 1420, 0, 1452, 1453,
	1454, 1462, 1463, 1464, 0, 0, 0, 987, 987, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 1468, 0, 1458, 0, 0,
	1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 87, 0, 1421, 0,
	0, 0, 0, 3035, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 0, 1061, 0, 0,
	0, 0, 1162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1162, 1162, 1162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 1427,
	0, 0, 0, 0, 1061, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 1469, 0, 0, 0,
	1449, 1450, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 1465, 0, 1466, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 2946,
	0, 1061, 0, 1061, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2958, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 1162,
	0, 0, 1061, 0, 1162, 0, 0, 0, 0, 2996,
	0, 0, 0, 0, 987, 0, 0, 0, 0, 0,
	1460, 0, 987, 0, 0, 1061, 0, 0, 1162, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1652, 1634,
	1641, 1624, 1662, 1661, 0, 0, 1626, 1625, 0, 0,
	0, 0, 0, 1061, 1672, 1673, 0, 0, 87, 0,
	0, 0, 0, 87, 1458, 0, 0, 1433, 1434, 1440,
	1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 0, 0, 87, 0, 0, 0,
	2775, 1061, 0, 0, 1663, 0, 1659, 1658, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 1657, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1656, 1654,
	1655, 0, 0, 0, 0, 0, 3105, 0, 0, 0,
	0, 0, 0, 0, 0, 2290, 0, 0, 0, 0,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1636, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1645, 1639, 1647, 1649, 1650, 1651, 1646, 0,
	1644, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1668, 1669, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1660, 0, 0, 0,
	1637, 0, 1638, 0, 0, 0, 0, 0, 1993, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 1162,
	1162, 0, 0, 0, 0, 1162, 0, 0, 0, 0,
	1653, 0, 0, 0, 1621, 1619, 1620, 1623, 1622, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3201, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 0, 1629,
	1630, 1632, 1633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1648, 1631, 0, 0, 0, 0,
	0, 0, 0, 3241, 0, 1671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1627, 0, 1664, 1665, 1666, 1667, 0,
	0, 0, 0, 3265, 1172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1635, 0, 0, 0, 0,
	1642, 1670, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3313, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1058, 0, 0, 0, 0, 0, 3348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3363, 215, 216,
	217, 218, 219, 1065, 220, 1066, 1067, 1068, 1069, 464,
	1070, 1071, 1072, 1073, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 1074, 228, 229, 230, 231,
	232, 233, 1075, 1076, 234, 469, 470, 471, 1077, 235,
	472, 1078, 1063, 1079, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 1080, 245, 0, 246, 247, 248,
	1081, 938, 249, 250, 1082, 1083, 1085, 1084, 1086, 1087,
	1088, 251, 252, 253, 254, 255, 256, 473, 474, 1089,
	257, 1090, 259, 258, 1091, 260, 1092, 1093, 261, 262,
	263, 1094, 264, 1095, 265, 266, 1096, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 1097,
	212, 1098, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 1099, 284, 1100, 1101, 939, 285,
	286, 1102, 287, 479, 1103, 480, 288, 1104, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 1105,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	1106, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	1107, 486, 1108, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 1109,
	318, 317, 1110, 319, 488, 945, 320, 321, 946, 1111,
	322, 323, 1112, 1113, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 1114, 214, 948, 1115, 489, 490, 341, 342,
	1116, 343, 344, 345, 1117, 1118, 347, 348, 349, 1119,
	1120, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 1121, 359, 360, 493, 361,
	494, 362, 1122, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 1123, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 1124,
	385, 951, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 1125, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 1126, 412,
	392, 393, 413, 952, 414, 497, 415, 416, 1127, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 1128, 428, 429, 427, 1129, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 1130, 499, 500, 501, 502,
	1131, 443, 1132, 437, 438, 503, 439, 504, 1133, 440,
	441, 442, 0, 444, 445, 1134, 1135, 446, 447, 448,
	449, 450, 452, 1136, 453, 1137, 451, 454, 455, 456,
	505, 506, 507, 1138, 458, 457, 508, 1139, 1140, 1141,
	1142, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 0, 0, 2145, 0, 0,
	0, 0, 0, 0, 0, 2146, 215, 216, 217, 218,
	219, 1065, 220, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 1074, 228, 229, 230, 231, 232, 233,
	1075, 1076, 234, 469, 470, 471, 1077, 235, 472, 1078,
	1063, 1079, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 1080, 245, 0, 246, 247, 248, 1081, 938,
	249, 250, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 251,
	252, 253, 254, 255, 256, 473, 474, 1089, 257, 1090,
	259, 258, 1091, 260, 1092, 1093, 261, 262, 263, 1094,
	264, 1095, 265, 266, 1096, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 1097, 212, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 939, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 1106, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 945, 320, 321, 946, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1114, 214, 948, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 1121, 359, 360, 493, 361, 494, 362,
	1122, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 1123, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 1124, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 1125, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 1126, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 1127, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 1128,
	428, 429, 427, 1129, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 1130, 499, 500, 501, 502, 1131, 443,
	1132, 437, 438, 503, 439, 504, 1133, 440, 441, 442,
	0, 444, 445, 1134, 1135, 446, 447, 448, 449, 450,
	452, 1136, 453, 1137, 451, 454, 455, 456, 505, 506,
	507, 1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3061, 215, 216, 217, 218,
	219, 1065, 220, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 1074, 228, 229, 230, 231, 232, 233,
	1075, 1076, 234, 469, 470, 471, 1077, 235, 472, 1078,
	1063, 1079, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 1080, 245, 0, 246, 247, 248, 1081, 938,
	249, 250, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 251,
	252, 253, 254, 255, 256, 473, 474, 1089, 257, 1090,
	259, 258, 1091, 260, 1092, 1093, 261, 262, 263, 1094,
	264, 1095, 265, 266, 1096, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 1097, 212, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 939, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 1106, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 945, 320, 321, 946, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1114, 214, 948, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 1121, 359, 360, 493, 361, 494, 362,
	1122, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 1123, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 1124, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 1125, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 1126, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 1127, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 1128,
	428, 429, 427, 1129, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 1130, 499, 500, 501, 502, 1131, 443,
	1132, 437, 438, 503, 439, 504, 1133, 440, 441, 442,
	0, 444, 445, 1134, 1135, 446, 447, 448, 449, 450,
	452, 1136, 453, 1137, 451, 454, 455, 456, 505, 506,
	507, 1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459,
	460, 509, 461, 462, 463, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3168, 0, 215, 216, 217, 218, 219, 1065, 220, 1066,
	1067, 1068, 1069, 464, 1070, 1071, 1072, 1073, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 1074,
	228, 229, 230, 231, 232, 233, 1075, 1076, 234, 469,
	470, 471, 1077, 235, 472, 1078, 1063, 1079, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 1080, 245,
	0, 246, 247, 248, 1081, 938, 249, 250, 1082, 1083,
	1085, 1084, 1086, 1087, 1088, 251, 252, 253, 254, 255,
	256, 473, 474, 1089, 257, 1090, 259, 258, 1091, 260,
	1092, 1093, 261, 262, 263, 1094, 264, 1095, 265, 266,
	1096, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 1097, 212, 1098, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 1099, 284,
	1100, 1101, 939, 285, 286, 1102, 287, 479, 1103, 480,
	288, 1104, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 1105, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 1106, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 1107, 486, 1108, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 1109, 318, 317, 1110, 319, 488, 945,
	320, 321, 946, 1111, 322, 323, 1112, 1113, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 1114, 214, 948, 1115,
	489, 490, 341, 342, 1116, 343, 344, 345, 1117, 1118,
	347, 348, 349, 1119, 1120, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 1121,
	359, 360, 493, 361, 494, 362, 1122, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 1123, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 1124, 385, 951, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 1125, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 1126, 412, 392, 393, 413, 952, 414, 497,
	415, 416, 1127, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 1128, 428, 429, 427, 1129,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 1130,
	499, 500, 501, 502, 1131, 443, 1132, 437, 438, 503,
	439, 504, 1133, 440, 441, 442, 0, 444, 445, 1134,
	1135, 446, 447, 448, 449, 450, 452, 1136, 453, 1137,
	451, 454, 455, 456, 505, 506, 507, 1138, 458, 457,
	508, 1139, 1140, 1141, 1142, 459, 460, 509, 461, 462,
	463, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2800, 0, 215, 216,
	217, 218, 219, 1065, 220, 1066, 1067, 1068, 1069, 464,
	1070, 1071, 1072, 1073, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 1074, 228, 229, 230, 231,
	232, 233, 1075, 1076, 234, 469, 470, 471, 1077, 235,
	472, 1078, 1063, 1079, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 1080, 245, 0, 246, 247, 248,
	1081, 938, 249, 250, 1082, 1083, 1085, 1084, 1086, 1087,
	1088, 251, 252, 253, 254, 255, 256, 473, 474, 1089,
	257, 1090, 259, 258, 1091, 260, 1092, 1093, 261, 262,
	263, 1094, 264, 1095, 265, 266, 1096, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 1097,
	212, 1098, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 1099, 284, 1100, 1101, 939, 285,
	286, 1102, 287, 479, 1103, 480, 288, 1104, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 1105,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	1106, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	1107, 486, 1108, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 1109,
	318, 317, 1110, 319, 488, 945, 320, 321, 946, 1111,
	322, 323, 1112, 1113, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 1114, 214, 948, 1115, 489, 490, 341, 342,
	1116, 343, 344, 345, 1117, 1118, 347, 348, 349, 1119,
	1120, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 1121, 359, 360, 493, 361,
	494, 362, 1122, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 1123, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 1124,
	385, 951, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 1125, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 1126, 412,
	392, 393, 413, 952, 414, 497, 415, 416, 1127, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 1128, 428, 429, 427, 1129, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 1130, 499, 500, 501, 502,
	1131, 443, 1132, 437, 438, 503, 439, 504, 1133, 440,
	441, 442, 0, 444, 445, 1134, 1135, 446, 447, 448,
	449, 450, 452, 1136, 453, 1137, 451, 454, 455, 456,
	505, 506, 507, 1138, 458, 457, 508, 1139, 1140, 1141,
	1142, 459, 460, 509, 461, 462, 463, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2792, 0, 215, 216, 217, 218, 219, 1065,
	220, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072, 1073,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 1074, 228, 229, 230, 231, 232, 233, 1075, 1076,
	234, 469, 470, 471, 1077, 235, 472, 1078, 1063, 1079,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	1080, 245, 0, 246, 247, 248, 1081, 938, 249, 250,
	1082, 1083, 1085, 1084, 1086, 1087, 1088, 251, 252, 253,
	254, 255, 256, 473, 474, 1089, 257, 1090, 259, 258,
	1091, 260, 1092, 1093, 261, 262, 263, 1094, 264, 1095,
	265, 266, 1096, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 1097, 212, 1098, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	1099, 284, 1100, 1101, 939, 285, 286, 1102, 287, 479,
	1103, 480, 288, 1104, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 1105, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 1106, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 1107, 486, 1108, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 1109, 318, 317, 1110, 319,
	488, 945, 320, 321, 946, 1111, 322, 323, 1112, 1113,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 1114, 214,
	948, 1115, 489, 490, 341, 342, 1116, 343, 344, 345,
	1117, 1118, 347, 348, 349, 1119, 1120, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 1121, 359, 360, 493, 361, 494, 362, 1122, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	1123, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 1124, 385, 951, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 1125, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 1126, 412, 392, 393, 413, 952,
	414, 497, 415, 416, 1127, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 1128, 428, 429,
	427, 1129, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 1130, 499, 500, 501, 502, 1131, 443, 1132, 437,
	438, 503, 439, 504, 1133, 440, 441, 442, 0, 444,
	445, 1134, 1135, 446, 447, 448, 449, 450, 452, 1136,
	453, 1137, 451, 454, 455, 456, 505, 506, 507, 1138,
	458, 457, 508, 1139, 1140, 1141, 1142, 459, 460, 509,
	461, 462, 463, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2665, 0,
	215, 216, 217, 218, 219, 1065, 220, 1066, 1067, 1068,
	1069, 464, 1070, 1071, 1072, 1073, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 1074, 228, 229,
	230, 231, 232, 233, 1075, 1076, 234, 469, 470, 471,
	1077, 235, 472, 1078, 1063, 1079, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 1080, 245, 0, 246,
	247, 248, 1081, 938, 249, 250, 1082, 1083, 1085, 1084,
	1086, 1087, 1088, 251, 252, 253, 254, 255, 256, 473,
	474, 1089, 257, 1090, 259, 258, 1091, 260, 1092, 1093,
	261, 262, 263, 1094, 264, 1095, 265, 266, 1096, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 1097, 212, 1098, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 1099, 284, 1100, 1101,
	939, 285, 286, 1102, 287, 479, 1103, 480, 288, 1104,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 1105, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 1106, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 1107, 486, 1108, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 1109, 318, 317, 1110, 319, 488, 945, 320, 321,
	946, 1111, 322, 323, 1112, 1113, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 1114, 214, 948, 1115, 489, 490,
	341, 342, 1116, 343, 344, 345, 1117, 1118, 347, 348,
	349, 1119, 1120, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 1121, 359, 360,
	493, 361, 494, 362, 1122, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 1123, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 1124, 385, 951, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 1125,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	1126, 412, 392, 393, 413, 952, 414, 497, 415, 416,
	1127, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 1128, 428, 429, 427, 1129, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 1130, 499, 500,
	501, 502, 1131, 443, 1132, 437, 438, 503, 439, 504,
	1133, 440, 441, 442, 0, 444, 445, 1134, 1135, 446,
	447, 448, 449, 450, 452, 1136, 453, 1137, 451, 454,
	455, 456, 505, 506, 507, 1138, 458, 457, 508, 1139,
	1140, 1141, 1142, 459, 460, 509, 461, 462, 463, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2038, 0, 215, 216, 217, 218,
	219, 1065, 220, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 1074, 228, 229, 230, 231, 232, 233,
	1075, 1076, 234, 469, 470, 471, 1077, 235, 472, 1078,
	1063, 1079, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 1080, 245, 0, 246, 247, 248, 1081, 938,
	249, 250, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 251,
	252, 253, 254, 255, 256, 473, 474, 1089, 257, 1090,
	259, 258, 1091, 260, 1092, 1093, 261, 262, 263, 1094,
	264, 1095, 265, 266, 1096, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 1097, 212, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 939, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 1106, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 945, 320, 321, 946, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1114, 214, 948, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 1121, 359, 360, 493, 361, 494, 362,
	1122, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 1123, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 1124, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 1125, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 1126, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 1127, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 1128,
	428, 429, 427, 1129, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 1130, 499, 500, 501, 502, 1131, 443,
	1132, 437, 438, 503, 439, 504, 1133, 440, 441, 442,
	0, 444, 445, 1134, 1135, 446, 447, 448, 449, 450,
	452, 1136, 453, 1137, 451, 454, 455, 456, 505, 506,
	507, 1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459,
	460, 509, 461, 462, 463, 1166, 0, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1768, 0, 0, 0, 215, 216, 217, 218, 219, 1065,
	220, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072, 1073,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 1074, 228, 229, 230, 231, 232, 233, 1075, 1076,
	234, 469, 470, 471, 1077, 235, 472, 1078, 1063, 1079,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	1080, 245, 0, 246, 247, 248, 1081, 938, 249, 250,
	1082, 1083, 1085, 1084, 1086, 1087, 1088, 251, 252, 253,
	254, 255, 256, 473, 474, 1089, 257, 1090, 259, 258,
	1091, 260, 1092, 1093, 261, 262, 263, 1094, 264, 1095,
	265, 266, 1096, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 1097, 212, 1098, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	1099, 284, 1100, 1101, 939, 285, 286, 1102, 287, 479,
	1103, 480, 288, 1104, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 1105, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 1106, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 1107, 486, 1108, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 1109, 318, 317, 1110, 319,
	488, 945, 320, 321, 946, 1111, 322, 323, 1112, 1113,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 1114, 214,
	948, 1115, 489, 490, 341, 342, 1116, 343, 344, 345,
	1117, 1118, 347, 348, 349, 1119, 1120, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 1121, 359, 360, 493, 361, 494, 362, 1122, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	1123, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 1124, 385, 951, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 1125, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 1126, 412, 392, 393, 413, 952,
	414, 497, 415, 416, 1127, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 1128, 428, 429,
	427, 1129, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 1130, 499, 500, 501, 502, 1131, 443, 1132, 437,
	438, 503, 439, 504, 1133, 440, 441, 442, 0, 444,
	445, 1134, 1135, 446, 447, 448, 449, 450, 452, 1136,
	453, 1137, 451, 454, 455, 456, 505, 506, 507, 1138,
	458, 457, 508, 1139, 1140, 1141, 1142, 459, 460, 509,
	461, 462, 463, 1055, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 1065, 220, 1066,
	1067, 1068, 1069, 464, 1070, 1071, 1072, 1073, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 1074,
	228, 229, 230, 231, 232, 233, 1075, 1076, 234, 469,
	470, 471, 1077, 235, 472, 1078, 1063, 1079, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 1080, 245,
	0, 246, 247, 248, 1081, 938, 249, 250, 1082, 1083,
	1085, 1084, 1086, 1087, 1088, 251, 252, 253, 254, 255,
	256, 473, 474, 1089, 257, 1090, 259, 258, 1091, 260,
	1092, 1093, 261, 262, 263, 1094, 264, 1095, 265, 266,
	1096, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 1097, 212, 1098, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 1099, 284,
	1100, 1101, 939, 285, 286, 1102, 287, 479, 1103, 480,
	288, 1104, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 1105, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 1106, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 1107, 486, 1108, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 1109, 318, 317, 1110, 319, 488, 945,
	320, 321, 946, 1111, 322, 323, 1112, 1113, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 1114, 214, 948, 1115,
	489, 490, 341, 342, 1116, 343, 344, 345, 1117, 1118,
	347, 348, 349, 1119, 1120, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 1121,
	359, 360, 493, 361, 494, 362, 1122, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 1123, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 1124, 385, 951, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 1125, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 1126, 412, 392, 393, 413, 952, 414, 497,
	415, 416, 1127, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 1128, 428, 429, 427, 1129,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 1130,
	499, 500, 501, 502, 1131, 443, 1132, 437, 438, 503,
	439, 504, 1133, 440, 441, 442, 0, 444, 445, 1134,
	1135, 446, 447, 448, 449, 450, 452, 1136, 453, 1137,
	451, 454, 455, 456, 505, 506, 507, 1138, 458, 457,
	508, 1139, 1140, 1141, 1142, 459, 460, 509, 461, 462,
	463, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 1065, 220, 1066, 1067, 1068, 1069, 464,
	1070, 1071, 1072, 1073, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 1074, 228, 229, 230, 231,
	232, 233, 1075, 1076, 234, 469, 470, 471, 1077, 235,
	472, 1078, 1063, 1079, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 1080, 245, 0, 246, 247, 248,
	1081, 938, 249, 250, 1082, 1083, 1085, 1084, 1086, 1087,
	1088, 251, 252, 253, 254, 255, 256, 473, 474, 1089,
	257, 1090, 259, 258, 1091, 260, 1092, 1093, 261, 262,
	263, 1094, 264, 1095, 265, 266, 1096, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 1097,
	212, 1098, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 1099, 284, 1100, 1101, 939, 285,
	286, 1102, 287, 479, 1103, 480, 288, 1104, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 1105,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	1106, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	1107, 486, 1108, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 1109,
	318, 317, 1110, 319, 488, 945, 320, 321, 946, 1111,
	322, 323, 1112, 1113, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 1114, 214, 948, 1115, 489, 490, 341, 342,
	1116, 343, 344, 345, 1117, 1118, 347, 348, 349, 1119,
	1120, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 1121, 359, 360, 493, 361,
	494, 362, 1122, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 1123, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 1124,
	385, 951, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 1125, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 1126, 412,
	392, 393, 413, 952, 414, 497, 415, 416, 1127, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 1128, 428, 429, 427, 1129, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 1130, 499, 500, 501, 502,
	1131, 443, 1132, 437, 438, 503, 439, 504, 1133, 440,
	441, 442, 0, 444, 445, 1134, 1135, 446, 447, 448,
	449, 450, 452, 1136, 453, 1137, 451, 454, 455, 456,
	505, 506, 507, 1138, 458, 457, 508, 1139, 1140, 1141,
	1142, 459, 460, 509, 461, 462, 463, 2014, 0, 880,
	837, 838, 839, 835, 836, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 2011, 220, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 221, 222, 223, 224, 465, 895, 874, 906,
	864, 905, 904, 0, 228, 866, 865, 231, 232, 233,
	856, 928, 234, 964, 965, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 909, 256, 902, 901, 826, 257, 0,
	259, 258, 0, 260, 2012, 0, 261, 900, 263, 0,
	264, 0, 265, 266, 0, 832, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 845, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 214, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 896,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 833, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 869, 870,
	872, 873, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 891, 871, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 937, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 2010, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	2013, 0, 0, 0, 0, 0, 0, 850, 2009, 0,
	0, 813, 848, 880, 837, 838, 839, 835, 836, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 221, 222, 223, 224,
	465, 895, 874, 906, 864, 905, 904, 0, 228, 866,
	865, 231, 232, 233, 856, 928, 234, 964, 965, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 909, 256, 902,
	901, 826, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 900, 263, 0, 264, 0, 265, 266, 0, 832,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 845, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 214, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 896, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 833, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 178,
	408, 409, 869, 870, 872, 873, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 891, 871, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 937, 421,
	422, 423, 959, 0, 428, 429, 427, 180, 430, 431,
	432, 433, 434, 271, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 1305, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 172, 459, 460, 509, 461, 462, 463, 824,
	173, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 880, 837, 838, 839, 835, 836,
	849, 1496, 1494, 0, 0, 0, 848, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 221, 222, 223,
	224, 465, 895, 874, 906, 864, 905, 904, 0, 228,
	866, 865, 231, 232, 233, 856, 928, 234, 964, 965,
	471, 0, 235, 935, 0, 918, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 921, 919, 920,
	925, 923, 922, 924, 251, 252, 253, 254, 909, 256,
	902, 901, 826, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 900, 263, 0, 264, 0, 265, 266, 0,
	832, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	955, 956, 845, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 213,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 214, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 958, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 896, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 833,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	178, 408, 409, 869, 870, 872, 873, 403, 407, 410,
	411, 926, 412, 392, 393, 413, 952, 414, 891, 871,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 937,
	421, 422, 423, 959, 0, 428, 429, 427, 180, 430,
	431, 432, 433, 434, 271, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 1305, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 172, 459, 460, 509, 461, 462, 463,
	824, 173, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 880, 837, 838, 839, 835,
	836, 849, 1496, 2427, 0, 0, 0, 848, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 221, 222,
	223, 224, 465, 895, 874, 906, 864, 905, 904, 0,
	228, 866, 865, 231, 232, 233, 856, 928, 234, 964,
	965, 471, 0, 235, 935, 0, 918, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 921, 919,
	920, 925, 923, 922, 924, 251, 252, 253, 254, 909,
	256, 902, 901, 826, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 900, 263, 0, 264, 0, 265, 266,
	0, 832, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 955, 956, 845, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	213, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 214, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 958, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 896, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	833, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 178, 408, 409, 869, 870, 872, 873, 403, 407,
	410, 411, 926, 412, 392, 393, 413, 952, 414, 891,
	871, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	937, 421, 422, 423, 959, 0, 428, 429, 427, 180,
	430, 431, 432, 433, 434, 271, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 1305, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 172, 459, 460, 509, 461, 462,
	463, 824, 173, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 880, 837, 838, 839,
	835, 836, 849, 1496, 1494, 0, 0, 0, 848, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 221,
	222, 223, 224, 465, 895, 874, 906, 864, 905, 904,
	2099, 228, 866, 865, 231, 232, 233, 856, 928, 234,
	964, 965, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	909, 256, 902, 901, 826, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 900, 263, 0, 264, 0, 265,
	266, 0, 832, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 845, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 2104, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 213, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 2100, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 214, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 896, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 833, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 869, 870, 872, 873, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 952, 414,
	891, 871, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 937, 421, 422, 423, 959, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 2101, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 816, 848,
	880, 837, 838, 839, 835, 836, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 221, 222, 223, 224, 465, 895, 874,
	906, 864, 905, 904, 0, 228, 866, 865, 231, 232,
	233, 856, 928, 234, 964, 965, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 909, 256, 902, 901, 826, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 900, 263,
	0, 264, 0, 265, 266, 0, 832, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 845, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 214, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 828, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	896, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 833, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 869,
	870, 872, 873, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 891, 871, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 937, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 880, 837, 838, 839, 835, 836, 849, 850, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 221, 222, 223, 224, 465, 895,
	874, 906, 864, 905, 904, 0, 228, 866, 865, 231,
	232, 233, 856, 928, 234, 964, 965, 471, 0, 235,
	935, 0, 918, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 3360, 248,
	0, 938, 249, 250, 921, 919, 920, 925, 923, 922,
	924, 251, 252, 253, 254, 909, 256, 902, 901, 826,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 900,
	263, 0, 264, 0, 265, 266, 0, 832, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 955, 956, 845,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 213, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 214, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 828, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 958, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 896, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 833, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	869, 870, 872, 873, 403, 407, 410, 411, 926, 412,
	392, 393, 413, 952, 414, 891, 871, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 937, 421, 422, 423,
	959, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 880, 837, 838, 839, 835, 836, 849, 850,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 221, 222, 223, 224, 465,
	895, 874, 906, 864, 905, 904, 0, 228, 866, 865,
	231, 232, 233, 856, 928, 234, 964, 965, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 3225,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 909, 256, 902, 901,
	826, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	900, 263, 0, 264, 0, 265, 266, 0, 832, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	845, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 214, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 828, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 896, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 833, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 869, 870, 872, 873, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 891, 871, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 937, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 880, 837, 838, 839, 835, 836, 849,
	850, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 221, 222, 223, 224,
	465, 895, 874, 906, 864, 905, 904, 0, 228, 866,
	865, 231, 232, 233, 856, 928, 234, 964, 965, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 909, 256, 902,
	901, 826, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 900, 263, 0, 264, 0, 265, 266, 0, 832,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 845, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 2969, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 896, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 833, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 869, 870, 872, 873, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 891, 871, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 937, 421,
	422, 423, 959, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 1556, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 465, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 256, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 2779,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 850, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 221, 222, 223, 224, 465, 895, 874, 906, 864,
	905, 904, 0, 228, 866, 865, 231, 232, 233, 856,
	928, 234, 964, 965, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 909, 256, 902, 901, 826, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 900, 263, 0, 264,
	0, 265, 266, 0, 832, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 845, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 1928, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	214, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 1927,
	363, 0, 364, 365, 366, 367, 368, 369, 896, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 833, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 869, 870, 872,
	873, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 891, 871, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 937, 421, 422, 423, 959, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 880,
	837, 838, 839, 835, 836, 849, 850, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 221, 222, 223, 224, 465, 895, 874, 906,
	864, 905, 904, 0, 228, 866, 865, 231, 232, 233,
	856, 928, 234, 964, 965, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 909, 256, 902, 901, 826, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 900, 263, 0,
	264, 0, 265, 266, 0, 832, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 845, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 214, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 828, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 896,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 833, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 869, 870,
	872, 873, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 891, 871, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 937, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 850, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 221, 222, 223, 224, 465, 895, 874,
	906, 864, 905, 904, 0, 228, 866, 865, 231, 232,
	233, 856, 928, 234, 964, 965, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 909, 256, 902, 901, 826, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 900, 263,
	0, 264, 0, 265, 266, 0, 832, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 845, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 214, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	896, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 833, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 869,
	870, 872, 873, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 891, 871, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 937, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 1556, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 848, 880, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 221, 222, 223,
	224, 465, 895, 874, 906, 864, 905, 904, 0, 228,
	866, 865, 231, 232, 233, 856, 928, 234, 964, 965,
	471, 0, 235, 935, 0, 918, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 921, 919, 920,
	925, 923, 922, 924, 251, 252, 253, 254, 909, 256,
	902, 901, 826, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 900, 263, 0, 264, 0, 265, 266, 0,
	832, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	955, 956, 845, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	2104, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 213,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 214, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 958, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 896, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 833,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 869, 870, 872, 873, 403, 407, 410,
	411, 926, 412, 392, 393, 413, 952, 414, 891, 871,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 937,
	421, 422, 423, 959, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 880, 837, 838, 839, 835,
	836, 849, 850, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 221, 222,
	223, 224, 465, 895, 874, 906, 864, 905, 904, 0,
	228, 866, 865, 231, 232, 233, 856, 928, 234, 964,
	965, 471, 0, 235, 935, 0, 918, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 921, 919,
	920, 925, 923, 922, 924, 251, 252, 253, 254, 909,
	256, 902, 901, 826, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 900, 263, 0, 264, 0, 265, 266,
	0, 832, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 955, 956, 845, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	213, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 214, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 958, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 896, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	833, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 869, 870, 872, 873, 403, 407,
	410, 411, 926, 412, 392, 393, 413, 952, 414, 891,
	871, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	937, 421, 422, 423, 959, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 0, 0, 0, 0,
	0, 0, 0, 850, 1494, 0, 0, 2109, 848, 880,
	837, 838, 839, 835, 836, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 221, 222, 223, 224, 465, 895, 874, 906,
	864, 905, 904, 0, 228, 866, 865, 231, 232, 233,
	856, 928, 234, 964, 965, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 909, 256, 902, 901, 826, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 900, 263, 0,
	264, 0, 265, 266, 0, 832, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 845, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 214, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 896,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 833, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 869, 870,
	872, 873, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 891, 871, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 937, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 2107, 848, 880, 837, 838, 839, 835, 836, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 221, 222, 223, 224,
	465, 895, 874, 906, 864, 905, 904, 0, 228, 866,
	865, 231, 232, 233, 856, 928, 234, 964, 965, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 909, 256, 902,
	901, 826, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 900, 263, 0, 264, 0, 265, 266, 0, 832,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 845, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 214, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 896, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 833, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 869, 870, 872, 873, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 891, 871, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 937, 421,
	422, 423, 959, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 0, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 2095, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 465, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 256, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 2084,
	848, 880, 837, 838, 839, 835, 836, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 221, 222, 223, 224, 465, 895,
	874, 906, 864, 905, 904, 0, 228, 866, 865, 231,
	232, 233, 856, 928, 234, 964, 965, 471, 0, 235,
	935, 0, 918, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 921, 919, 920, 925, 923, 922,
	924, 251, 252, 253, 254, 909, 256, 902, 901, 826,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 900,
	263, 0, 264, 0, 265, 266, 0, 832, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 955, 956, 845,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 213, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 214, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 958, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 896, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 833, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	869, 870, 872, 873, 403, 407, 410, 411, 926, 412,
	392, 393, 413, 952, 414, 891, 871, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 937, 421, 422, 423,
	959, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 2082, 848, 2074, 837, 838, 839, 835,
	836, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 221, 222,
	223, 224, 465, 895, 874, 906, 864, 905, 904, 0,
	228, 866, 865, 231, 232, 233, 856, 928, 234, 964,
	965, 471, 0, 235, 935, 0, 918, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 921, 919,
	920, 925, 923, 922, 924, 251, 252, 253, 254, 909,
	2077, 902, 901, 826, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 900, 263, 0, 264, 0, 265, 266,
	0, 832, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 955, 956, 845, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 2078, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	213, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 2079, 2076, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 214, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 958, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 896, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	833, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	2080, 0, 408, 409, 869, 870, 872, 873, 403, 407,
	410, 411, 926, 412, 392, 393, 413, 952, 414, 891,
	871, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	937, 421, 422, 423, 959, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 2075,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 2071, 848, 2074,
	837, 838, 839, 835, 836, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 221, 222, 223, 224, 465, 895, 874, 906,
	864, 905, 904, 0, 228, 866, 865, 231, 232, 233,
	856, 928, 234, 964, 965, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 909, 2077, 902, 901, 826, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 900, 263, 0,
	264, 0, 265, 266, 0, 832, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 845, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 2078,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	2079, 2076, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 214, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 896,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 833, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 2080, 0, 408, 409, 869, 870,
	872, 873, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 891, 871, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 937, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 2075, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 850, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 221, 222, 223, 224, 465, 895, 874,
	906, 864, 905, 904, 0, 228, 866, 865, 231, 232,
	233, 856, 928, 234, 964, 965, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 909, 256, 902, 901, 826, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 900, 263,
	0, 264, 0, 265, 266, 0, 832, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 845, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 214, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	896, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 833, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 869,
	870, 872, 873, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 891, 871, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 937, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 0, 0, 0, 0, 0, 1502, 0, 850, 0,
	0, 0, 0, 848, 880, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 1915, 220, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 221, 222, 223,
	224, 465, 895, 874, 906, 864, 905, 904, 0, 228,
	866, 865, 231, 232, 233, 856, 928, 234, 964, 965,
	471, 0, 235, 935, 0, 918, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 938, 249, 250, 921, 919, 920,
	925, 923, 922, 924, 251, 252, 253, 254, 909, 256,
	902, 901, 826, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 900, 263, 0, 264, 0, 265, 266, 0,
	832, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	955, 956, 845, 212, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 213,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 214, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 958, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 896, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 951, 386, 387, 388, 389, 833,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 869, 870, 872, 873, 403, 407, 410,
	411, 926, 412, 392, 393, 413, 952, 414, 891, 871,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 937,
	421, 422, 423, 959, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 0, 0, 0, 0, 0,
	0, 0, 850, 0, 0, 0, 1195, 848, 880, 837,
	838, 839, 835, 836, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 221, 222, 223, 224, 465, 895, 874, 906, 864,
	905, 904, 0, 228, 866, 865, 231, 232, 233, 856,
	928, 234, 964, 965, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 909, 256, 902, 901, 826, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 900, 263, 0, 264,
	0, 265, 266, 0, 832, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 845, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 1194,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 213, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	214, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 896, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 833, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 869, 870, 872,
	873, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 891, 871, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 937, 421, 422, 423, 959, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 0,
	0, 0, 0, 0, 0, 0, 850, 0, 0, 0,
	1189, 848, 880, 837, 838, 839, 835, 836, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 221, 222, 223, 224, 465,
	895, 874, 906, 864, 905, 904, 0, 228, 866, 865,
	231, 232, 233, 856, 928, 234, 964, 965, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 909, 256, 902, 901,
	826, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	900, 263, 0, 264, 0, 265, 266, 0, 832, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	845, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 1188, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 214, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 896, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 833, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 869, 870, 872, 873, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 891, 871, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 937, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 1184, 848, 880, 837, 838, 839,
	835, 836, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 221,
	222, 223, 224, 465, 895, 874, 906, 864, 905, 904,
	0, 228, 866, 865, 231, 232, 233, 856, 928, 234,
	964, 965, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	909, 256, 902, 901, 826, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 900, 263, 0, 264, 0, 265,
	266, 0, 832, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 845, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 213, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 214, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 896, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 833, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 869, 870, 872, 873, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 952, 414,
	891, 871, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 937, 421, 422, 423, 959, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	221, 222, 223, 224, 465, 895, 874, 906, 864, 905,
	904, 0, 228, 866, 865, 231, 232, 233, 856, 928,
	234, 964, 965, 471, 0, 235, 935, 0, 918, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	921, 919, 920, 925, 923, 922, 924, 251, 252, 253,
	254, 909, 256, 902, 901, 826, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 900, 263, 0, 264, 0,
	265, 266, 0, 832, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 955, 956, 845, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 213, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 214,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 958, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 896, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 833, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 869, 870, 872, 873,
	403, 407, 410, 411, 926, 412, 392, 393, 413, 952,
	414, 891, 871, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 937, 421, 422, 423, 959, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 850, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 221, 222, 223, 224, 465, 895, 874, 906, 864,
	905, 904, 0, 228, 866, 865, 231, 232, 233, 856,
	928, 234, 964, 965, 471, 0, 235, 935, 0, 918,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	3386, 921, 919, 920, 925, 923, 922, 924, 251, 252,
	253, 254, 909, 256, 902, 901, 826, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 900, 263, 0, 264,
	0, 265, 266, 0, 832, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 955, 956, 845, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 213, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	214, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 958, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 896, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 833, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 869, 870, 872,
	873, 403, 407, 410, 411, 926, 412, 392, 393, 413,
	952, 414, 891, 871, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 937, 421, 422, 423, 959, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	3385, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 880,
	837, 838, 839, 835, 836, 849, 850, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 221, 222, 223, 224, 3384, 895, 874, 906,
	864, 905, 904, 0, 228, 866, 865, 231, 232, 233,
	856, 928, 234, 964, 965, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 3386, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 909, 256, 902, 901, 826, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 900, 263, 0,
	264, 0, 265, 266, 0, 832, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 845, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 214, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 896,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 833, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 869, 870,
	872, 873, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 891, 871, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 937, 421, 422, 423, 959, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 3385, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	880, 837, 838, 839, 835, 836, 849, 850, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 221, 222, 223, 224, 465, 895, 874,
	906, 864, 905, 904, 0, 228, 866, 865, 231, 232,
	233, 856, 928, 234, 964, 965, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 909, 256, 902, 901, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 900, 263,
	0, 264, 0, 265, 266, 0, 832, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 845, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 0, 214, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	896, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 833, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 869,
	870, 872, 873, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 891, 871, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 937, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 880, 837, 838, 839,
	835, 836, 849, 0, 2092, 0, 0, 0, 0, 2090,
	2091, 0, 0, 215, 216, 217, 218, 219, 850, 220,
	0, 0, 0, 848, 929, 854, 0, 0, 0, 221,
	222, 223, 224, 0, 895, 874, 906, 864, 905, 904,
	0, 228, 866, 865, 231, 232, 233, 856, 928, 234,
	964, 965, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 3386, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	909, 256, 902, 901, 826, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 900, 263, 0, 264, 0, 265,
	266, 0, 832, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 845, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 0, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 213, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 0,
	932, 0, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 214, 0,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 896, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 833, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 869, 870, 872, 873, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 0, 414,
	891, 871, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 937, 421, 422, 423, 959, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 3385, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 813, 0, 1001, 0, 820, 821, 0, 0, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 0, 848,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 929, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 928, 234, 469, 470, 471,
	0, 235, 935, 0, 918, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 921, 919, 920, 925,
	923, 922, 924, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 955,
	956, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 480, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 988, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 214, 948, 0, 933, 490,
	341, 342, 0, 343, 344, 345, 0, 993, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	958, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 496, 995,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 178,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	926, 412, 392, 393, 413, 952, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 959, 0, 428, 429, 427, 180, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 960, 439, 961,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 451, 454,
	455, 456, 1305, 506, 507, 0, 458, 457, 508, 1001,
	0, 0, 172, 459, 460, 509, 461, 462, 463, 0,
	173, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 929, 0, 985,
	0, 1588, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 928, 234, 469, 470, 471, 0, 235, 935, 0,
	918, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 921, 919, 920, 925, 923, 922, 924, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 955, 956, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 480, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 988, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 214, 948, 0, 933, 490, 341, 342, 0, 343,
	344, 345, 0, 993, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 958, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 496, 995, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 178, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 926, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 959, 0,
	428, 429, 427, 180, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 960, 439, 961, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 451, 454, 455, 456, 1305, 506,
	507, 0, 458, 457, 508, 0, 0, 0, 172, 459,
	460, 509, 461, 462, 463, 0, 173, 0, 0, 2534,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 0, 1588, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 928, 234, 469, 470, 471, 0, 235,
	935, 0, 918, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 921, 919, 920, 925, 923, 922,
	924, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 955, 956, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 480, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 988,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 214, 948, 0, 933, 490, 341, 342,
	0, 343, 344, 345, 0, 993, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 958, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 496, 995, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 926, 412,
	392, 393, 413, 952, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	959, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 960, 439, 961, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 0, 984, 0,
	1001, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 985, 929, 990,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 928, 234, 469, 470, 471, 0, 235, 935,
	0, 918, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 921, 919, 920, 925, 923, 922, 924,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 955, 956, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 480, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 988, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 0, 214, 948, 0, 933, 490, 341, 342, 0,
	343, 344, 345, 0, 993, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 958, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 496, 995, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 926, 412, 392,
	393, 413, 952, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 959,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 960, 439, 961, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1001, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 929, 0, 985, 0, 990, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 928, 234,
	469, 470, 471, 0, 235, 935, 0, 918, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 921,
	919, 920, 925, 923, 922, 924, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 955, 956, 0, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	480, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 988, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 214, 948,
	0, 933, 490, 341, 342, 0, 343, 344, 345, 0,
	993, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 958, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 496, 995, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 926, 412, 392, 393, 413, 952, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 959, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	960, 439, 961, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1001, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 0, 985, 0, 990, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 928, 234, 469, 470, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 480, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 214, 948, 0, 933, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 496, 995, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 960, 439, 961, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 813, 0,
	1159, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	1483, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 1063, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 941, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 942, 487, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 0, 0, 948, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 178, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 952, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 180, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 1305,
	506, 507, 0, 458, 457, 508, 1302, 0, 1159, 172,
	459, 460, 509, 461, 462, 463, 0, 173, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 148, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 1063,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 938, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 212, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 951, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 178, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	952, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 180, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 1305, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 172, 459, 460,
	509, 461, 462, 463, 0, 173, 0, 0, 0, 0,
	1159, 1158, 0, 0, 0, 0, 1156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 148, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 1063, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	938, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 212,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 941, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 942, 487, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 0, 0, 948, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	951, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 952, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 1159, 1158, 0, 0,
	0, 0, 1156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 2728, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 1063, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 938, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 0, 948,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 951, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 952, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1001, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	929, 0, 0, 0, 1309, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 928, 234, 469, 470, 471, 0,
	235, 935, 0, 918, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 938, 249, 250, 921, 919, 920, 925, 923,
	922, 924, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 955, 956,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 480, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 214, 948, 0, 933, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 958,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 951, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 926,
	412, 392, 393, 413, 952, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 959, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 960, 439, 961, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 813, 0,
	209, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 221, 222, 223, 224, 465, 466, 225,
	467, 226, 227, 468, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 469, 470, 471, 0, 235, 472,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 473, 474, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 475, 267, 268, 270,
	273, 269, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 0, 359, 360, 493, 361, 494,
	362, 0, 363, 0, 364, 365, 366, 367, 368, 369,
	495, 370, 371, 0, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 496, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 178, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 497, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 498,
	0, 428, 429, 427, 180, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 1305,
	506, 507, 0, 458, 457, 508, 209, 0, 0, 172,
	459, 460, 509, 461, 462, 463, 0, 173, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 464, 0, 0, 0, 148, 221,
	222, 223, 224, 465, 466, 225, 467, 226, 227, 468,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	469, 470, 471, 0, 235, 472, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 473, 474, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 475, 267, 268, 270, 273, 269, 274, 275,
	276, 277, 476, 477, 0, 212, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 214, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	0, 359, 360, 493, 361, 494, 362, 0, 363, 0,
	364, 365, 366, 367, 368, 369, 495, 370, 371, 0,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 496, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	497, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 498, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 209, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 0, 0, 1593, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 214, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 209, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 464, 0, 2680, 0,
	0, 221, 222, 223, 224, 465, 466, 225, 467, 226,
	227, 468, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 469, 470, 471, 0, 235, 472, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 473, 474, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 475, 267, 268, 270, 273, 269,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 0, 359, 360, 493, 361, 494, 362, 0,
	363, 0, 364, 365, 366, 367, 368, 369, 495, 370,
	371, 0, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 496, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 497, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 498, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 209, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 464, 0, 0, 0, 2325, 221, 222, 223,
	224, 465, 466, 225, 467, 226, 227, 468, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 469, 470,
	471, 0, 235, 472, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	473, 474, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	475, 267, 268, 270, 273, 269, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 0, 359,
	360, 493, 361, 494, 362, 0, 363, 0, 364, 365,
	366, 367, 368, 369, 495, 370, 371, 0, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 496,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 497, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 498, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	687, 0, 578, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	464, 0, 2803, 0, 0, 221, 222, 223, 224, 465,
	466, 225, 467, 226, 227, 468, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 469, 470, 471, 0,
	235, 472, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 584, 254, 255, 256, 473, 474,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 475, 267,
	268, 270, 273, 269, 274, 275, 276, 277, 476, 477,
	0, 212, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 214, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 0, 359, 360, 493,
	361, 494, 362, 0, 363, 0, 364, 365, 366, 367,
	368, 369, 495, 370, 371, 0, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 496, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 497, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 498, 0, 428, 429, 427, 583, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 0, 577,
	0, 578, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 587, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 584, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 583, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 578, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 587, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 584, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 1876, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 583, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 578, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 587, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 584, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 583,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 209, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 587, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 1332, 0, 1159, 1158, 0, 0, 0,
	0, 1156, 0, 0, 0, 0, 0, 0, 587, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 1063, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	1331, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 0, 948, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 1330, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 952, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1300, 0, 1159, 1158, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 1063, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 938, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1299, 482, 483, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 0, 948, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 951, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 952, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 1296,
	0, 1159, 1158, 0, 0, 0, 0, 1156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 1063, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1295, 482, 483, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 0, 948, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 952, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 1234, 0, 1159,
	1158, 0, 0, 0, 0, 1156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	1063, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1233, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 1231, 0, 1159, 1158, 0,
	0, 0, 0, 1156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 1063, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1230, 482,
	483, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 0,
	948, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 952,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 1152, 0, 1159, 1158, 0, 0, 0,
	0, 1156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 1063, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 938, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1154, 482, 483, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 0, 948, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 951, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 952, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1159, 1158, 0, 0, 0, 0, 1156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 1063, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 938, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 0, 948, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 951, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 952, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1159, 1158, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 1063, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 938, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 0,
	948, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 951, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 952,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 1159,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	1063, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 938,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 951,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 952, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 2216, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 2213, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	2360, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 2219, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 2357, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 2359, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 2356, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 2218, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 2358, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	2216, 235, 472, 0, 0, 2210, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 2213, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 2219, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 2209, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 2218, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 2217, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1377,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 1380, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 1378, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 1379, 457, 508, 1147, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1149, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 993, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1144, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1146, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 993, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1051, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1053, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 993,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 540, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 539, 219, 529, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 532, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 533, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 534,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 528,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 529, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	532, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 533, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 534, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 993, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 2289,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1859, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 1796, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1789, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1788, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1784, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1786, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1289, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1288, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1286, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1285, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1283,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1282, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1279, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 212, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1278, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1254, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1169, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1171, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 209, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 212, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 209,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 532, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 533,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 534, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 1883, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	212, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 1881, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 212, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 209, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 1879, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 212, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 679, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 678, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 677, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 517,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 516, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 515, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 2150, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 209,
	2347, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 2927,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 209, 2347, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 2344, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 209,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 1865, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1857, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 560, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 1029, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	561, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 557, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	556, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1808, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1807, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 560,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 550,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 561, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 557, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 1308, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 556, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1293, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1292, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1242, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1241, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1226, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1163, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 560,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 1029, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 561, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 557, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 556, 500, 501, 502,
	0, 443, 0, 437, 1030, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 1012, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 560,
	0, 209, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 550,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 548, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 549, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 561, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 551, 390, 0, 391,
	395, 396, 557, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 552, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 556, 500, 501, 502,
	0, 443, 0, 437, 554, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 544, 0, 209,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 545, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 542, 0, 209, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 536, 0, 209, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 512, 0, 209, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 209, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 209, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 2623, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 209,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	2621, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 2609, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 2307, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 370, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 209, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 367, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 390, 0, 391, 545, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 209, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 464, 0, 1820, 0, 0,
	221, 222, 223, 224, 465, 466, 225, 467, 226, 227,
	468, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 469, 470, 471, 0, 235, 472, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 473, 474, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 475, 267, 268, 270, 273, 269, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 0, 359, 360, 493, 361, 494, 362, 0, 363,
	0, 364, 365, 366, 367, 368, 369, 495, 370, 371,
	0, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 496, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 0, 392, 393, 413, 0,
	414, 497, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 498, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 209,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 221, 222, 223, 224, 465, 466, 225, 467,
	226, 227, 468, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 469, 470, 471, 0, 235, 472, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 473, 474, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 475, 267, 268, 270, 273,
	269, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1262, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 0, 359, 360, 493, 361, 494, 362,
	0, 363, 0, 364, 365, 366, 367, 368, 369, 495,
	370, 371, 0, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 496, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 497, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 498, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 209, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 221, 222, 223, 224, 465, 466,
	225, 467, 226, 227, 468, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 469, 470, 471, 0, 235,
	472, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 473, 474, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 475, 267, 268,
	270, 273, 269, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1204, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 0, 359, 360, 493, 361,
	494, 362, 0, 363, 0, 364, 365, 366, 367, 368,
	369, 495, 370, 371, 0, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 496, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 497, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	498, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 209, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 221, 222, 223, 224,
	465, 466, 225, 467, 226, 227, 468, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 469, 470, 471,
	0, 235, 472, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 473,
	474, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 475,
	267, 268, 270, 273, 269, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 0, 359, 360,
	493, 361, 494, 362, 0, 363, 0, 364, 365, 366,
	367, 368, 369, 495, 967, 371, 0, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 496, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 497, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 498, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 209, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 221, 222,
	223, 224, 465, 466, 225, 467, 226, 227, 468, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 469,
	470, 471, 0, 235, 472, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 473, 474, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 475, 267, 268, 270, 273, 269, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	0, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 0, 356, 357, 358, 0,
	359, 360, 493, 361, 494, 362, 0, 363, 0, 364,
	365, 366, 0, 368, 369, 495, 370, 371, 0, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	496, 0, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 497,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 498, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 1441, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 1446, 1447, 0,
	0, 1421, 0, 0, 0, 1427, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 1469, 0, 0, 0, 1449, 1450, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1466,
	0, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 1457, 1427, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 1467, 0, 1469,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 1448, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 1422, 1443, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 1421, 0, 0, 0, 0, 0,
	1458, 0, 1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 2480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454,
	1462, 1463, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 1444, 1445, 1446, 1447, 0,
	1422, 0, 0, 0, 1468, 1427, 0, 1458, 0, 0,
	1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 1421, 0, 1459,
	0, 0, 1469, 2479, 0, 1441, 1449, 1450, 1451, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 1466,
	0, 0, 0, 0, 0, 0, 1436, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 1467, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 1469, 0, 0, 0, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 1448, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1460, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 1443, 0, 0, 1468, 0, 0,
	1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 0,
	1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 1460,
	1421, 0, 0, 0, 0, 0, 2476, 0, 1441, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454,
	1462, 1463, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 0, 0, 0, 0, 0,
	1422, 0, 0, 0, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 1421, 0, 0,
	0, 1427, 0, 1458, 0, 1441, 1433, 1434, 1440, 1439,
	1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 0, 0, 1459, 0, 0, 1469, 2475,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 0, 0, 0, 0, 0, 1457, 1427, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 1467, 0, 1469, 0, 0, 0, 1449,
	1450, 1451, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1466, 0, 0, 0, 0, 0, 0, 1436,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 1448,
	0, 0, 1442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 1443, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	1421, 0, 0, 0, 0, 0, 1458, 0, 1441, 1433,
	1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 2474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 1444, 1445, 1446, 1447, 0, 1422, 0, 0, 0,
	1468, 1427, 0, 1458, 0, 0, 1433, 1434, 1440, 1439,
	1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 1429, 0, 1421, 0, 1459, 0, 0, 1469, 2026,
	0, 1441, 1449, 1450, 1451, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 1444, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 1467, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 1469, 0, 0, 0, 1449, 1450, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 1466, 1448,
	0, 0, 0, 0, 0, 1436, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1460, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462,
	1463, 1464, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 1422,
	1443, 0, 0, 1468, 0, 0, 1458, 0, 0, 1433,
	1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 1460, 1421, 0, 0, 3343,
	0, 0, 0, 0, 1441, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	1468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1444, 1445, 1446,
	1447, 0, 0, 1421, 0, 0, 0, 1427, 0, 1458,
	0, 1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0,
	0, 1459, 3339, 0, 1469, 0, 0, 0, 1449, 1450,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1466, 0, 0, 0, 0, 0, 0, 1436, 1437,
	0, 0, 0, 0, 1444, 1445, 1446, 1447, 0, 0,
	0, 0, 0, 1457, 1427, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 1467,
	0, 1469, 0, 0, 0, 1449, 1450, 1451, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 1466, 0,
	0, 0, 0, 0, 0, 1436, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 1448, 0, 0, 1442, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462,
	1463, 1464, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 0, 0, 0, 0, 0, 1422,
	1443, 0, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 1421, 0, 0, 0,
	0, 0, 1458, 0, 1441, 1433, 1434, 1440, 1439, 1435,
	1461, 1438, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 0, 0, 0, 0, 3271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 1444, 1445, 1446,
	1447, 0, 1422, 0, 0, 0, 1468, 1427, 0, 1458,
	0, 0, 1433, 1434, 1440, 1439, 1435, 1461, 0, 1432,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 1421,
	0, 1459, 3270, 0, 1469, 0, 0, 1441, 1449, 1450,
	1451, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1466, 0, 0, 0, 0, 0, 0, 1436, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	0, 1442, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 1446, 1447, 0, 0, 0, 0, 0, 1467,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 1469, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 1466, 1448, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 1422, 1443, 0, 0, 1468,
	0, 0, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435,
	1461, 0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	1429, 1460, 1421, 0, 0, 3171, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1444, 1445, 1446, 1447, 0, 0, 1421,
	0, 0, 0, 1427, 0, 1458, 0, 1441, 1433, 1434,
	1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 0, 0, 1459, 3088, 0,
	1469, 0, 0, 0, 1449, 1450, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 1466, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 0, 0, 0,
	1444, 1445, 1446, 1447, 0, 0, 0, 0, 0, 1457,
	1427, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 1467, 0, 1469, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 1466, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 1448, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	1420, 0, 1452, 1453, 1454, 1462, 1463, 1464, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 1422, 1443, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 1421, 0, 0, 0, 0, 0, 1458, 0,
	1441, 1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0,
	0, 3040, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 1444, 1445, 1446, 1447, 0, 1422, 0,
	0, 0, 1468, 1427, 0, 1458, 0, 0, 1433, 1434,
	1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 1421, 0, 1459, 3039, 0,
	1469, 0, 0, 1441, 1449, 1450, 1451, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 1466, 0, 0,
	0, 0, 0, 0, 1436, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	0, 0, 0, 0, 0, 0, 1444, 1445, 1446, 1447,
	0, 0, 0, 0, 0, 1467, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 0, 0, 1469, 0, 0, 0, 1449, 1450, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1466, 1448, 0, 0, 0, 0, 0, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1460, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 1452, 1453,
	1454, 1462, 1463, 1464, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 1422, 1443, 0, 0, 1468, 0, 0, 1458, 0,
	0, 1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 1429, 1460, 1421, 0,
	0, 3038, 0, 0, 0, 0, 1441, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 1420, 0, 1452, 1453, 1454, 1462, 1463,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 0, 0, 0, 0, 1422, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 1446, 1447, 0, 0, 1421, 0, 0, 0, 1427,
	0, 1458, 0, 1441, 1433, 1434, 1440, 1439, 1435, 1461,
	1438, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	0, 0, 0, 1459, 3004, 0, 1469, 0, 0, 0,
	1449, 1450, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 1466, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 0, 0, 0, 1444, 1445, 1446, 1447,
	0, 0, 0, 0, 0, 1457, 1427, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1459, 1467, 0, 1469, 0, 0, 0, 1449, 1450, 1451,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1466, 0, 0, 0, 0, 0, 0, 1436, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 1448, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 1420, 0, 1452, 1453,
	1454, 1462, 1463, 1464, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 1422, 1443, 0, 0, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 1421, 0,
	0, 0, 0, 0, 1458, 0, 1441, 1433, 1434, 1440,
	1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 0, 0, 0, 2810, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 1446, 1447, 0, 0, 0, 0, 0, 0, 1427,
	3434, 1458, 0, 0, 1433, 1434, 1440, 1439, 1435, 1461,
	0, 1432, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 1429,
	0, 0, 2431, 1459, 0, 0, 1469, 0, 0, 0,
	1449, 1450, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 1466, 0, 0, 0, 0, 0, 0,
	1436, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	2402, 0, 1422, 0, 0, 1443, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1460, 0, 0, 0, 0, 0, 0, 1441, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2403, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 1446, 1447, 0, 0, 0, 0, 0, 0,
	1427, 0, 0, 0, 1458, 0, 0, 1433, 1434, 1440,
	1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 1429, 0, 1459, 0, 0, 1469, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 1466, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 1443, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1460, 0, 0, 0, 0, 0, 0, 1441, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 2117,
	0, 0, 0, 0, 0, 0, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 2116,
	0, 0, 1422, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 0, 0, 1421,
	0, 1427, 0, 2519, 0, 1458, 2518, 1441, 1433, 1434,
	1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 1459, 0, 0, 1469, 0,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	1444, 1445, 1446, 1447, 0, 0, 0, 1457, 0, 0,
	1427, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 1459, 0, 0, 1469, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 1466, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 1448,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 1443, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1460, 0, 0, 0, 0, 1458, 0, 1441, 1433,
	1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 1419, 1420, 0, 1452,
	1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 0, 0, 0,
	0, 0, 1422, 0, 0, 0, 1468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 0, 0, 1421,
	0, 1427, 0, 0, 0, 1458, 0, 1441, 1433, 1434,
	1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 1459, 0, 0, 1469, 0,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	1444, 1445, 1446, 1447, 0, 0, 0, 1457, 0, 0,
	1427, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 1459, 0, 0, 1469, 0, 0,
	0, 1449, 1450, 1451, 0, 0, 0, 0, 1456, 810,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 1466, 0, 0, 0, 0, 0,
	0, 1436, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 1448,
	0, 0, 0, 0, 1442, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 1443, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1460, 0, 0, 0, 0, 1458, 0, 1441, 1433,
	1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 2798, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 0, 0, 0,
	0, 1427, 0, 0, 0, 1458, 2525, 0, 1433, 1434,
	1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 1429, 0, 1459, 0, 0, 1469, 0,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 2520, 0, 0, 1422, 0, 0, 1443, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1460, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 0, 0,
	1421, 0, 1427, 0, 0, 0, 1458, 0, 1441, 1433,
	1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 1459, 0, 0, 1469,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 0, 1457, 0,
	0, 1427, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1459, 0, 0, 1469, 0,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	1448, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2487, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 2473, 0, 0, 1422, 0, 0, 1443, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1460, 0, 0, 0, 0, 1458, 0, 1441,
	1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 0, 0,
	1421, 0, 1427, 0, 0, 0, 1458, 0, 1441, 1433,
	1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 1459, 0, 0, 1469,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 0, 1457, 0,
	0, 1427, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1459, 0, 0, 1469, 0,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	1448, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 1443, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1460, 0, 0, 0, 0, 1458, 0, 1441,
	1433, 1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 1419, 1420, 0,
	1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 0, 0,
	1421, 0, 1427, 0, 0, 0, 1458, 0, 1441, 1433,
	1434, 1440, 1439, 1435, 1461, 1438, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 1459, 0, 0, 1469,
	0, 0, 0, 1449, 1450, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 1466, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 1444, 1445, 1446, 1447, 0, 0, 0, 1457, 0,
	0, 1427, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1459, 0, 0, 1469, 0,
	0, 0, 1449, 1450, 1451, 0, 0, 0, 1419, 1420,
	0, 1452, 1453, 1454, 1462, 1463, 1464, 0, 0, 0,
	0, 0, 0, 1465, 0, 1466, 0, 0, 0, 0,
	0, 0, 1436, 1437, 1422, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	1448, 0, 0, 0, 0, 1442, 0, 0, 0, 0,
	0, 1421, 0, 0, 0, 0, 0, 0, 1443, 1441,
	0, 0, 0, 1467, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 1444, 1445, 1446, 1447, 0, 0, 0, 0,
	0, 0, 1427, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 1469,
	0, 0, 1460, 1449, 1450, 1451, 0, 1458, 0, 0,
	1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 1436, 1437, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 1442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 1433,
	1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	1433, 1434, 1440, 1439, 1435, 1461, 0, 1432, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1429,
}
var sqlPact = [...]int{

	6494, -1000, -1000, -1000, -1000, -1000, -1000, 190, 183, 174,
	169, 162, 160, 155, 153, 152, -1000, -1000, -1000, 151,
	-1000, -1000, 150, -1000, 148, 147, 146, 145, -1000, 144,
	143, -1000, -1000, -1000, -1000, 138, 137, 136, 49863, 1696,
	60679, 52347, 2066, 2182, 44447, 60261, 44029, 59843, 59425, 133,
	-1000, 59007, 127, 113, 112, -1000, -1000, 110, 1656, 36057,
	109, 108, 106, 2089, 103, 102, -1000, 101, -1000, 6113,
	1282, -1000, 100, 97, -1000, 8195, 3507, 51929, 2210, 96,
	93, 35638, 2140, -1000, -1000, 1580, -1000, -1000, 92, 90,
	89, 88, 87, 86, 85, 83, 82, -1000, 81, 80,
	79, 78, 77, 75, 69, 67, 65, 64, 63, 60,
	57, 56, 55, 54, 53, -1000, 7939, 1513, 1396, 1389,
	1385, 1383, 1381, 860, 50, 49, 42, 40, 38, 34,
	-1000, -1000, 31, 30, 23, 22, -1000, 18, 12, 114,
	7, -5, -6, -7, -8, 2429, 2191, 1307, 776, 17326,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 64799, 61091, -9, -46, -10, -1000, 2508, 871,
	30196, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 461, -1000, -1000, -1000, 261, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1508, 690, -1000, -1000, -1000, 58589, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 61091, -1000, 1686, 25, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 687, -1000, 1678, 243, 1566,
	-1000, -1000, -1000, -1000, -1000, 61091, -1000, -1000, 2803, 2801,
	1584, 675, 58177, -1000, 1291, -1000, 808, 19985, -1000, 1012,
	-1000, 19985, 260, -1000, -1000, -1000, -1000, -1000, 43611, 14241,
	43193, 42775, 39861, 57759, 13813, 49451, 1059, -1000, -1000, -1000,
	-1000, -1000, -25, 37293, 61091, -1000, 258, -1000, -1000, -1000,
	-1000, -1000, -1000, 26302, 619, 25848, 397, 25394, 361, -1000,
	-1000, -1000, -1000, 2799, 2798, 972, 2796, 2448, 64387, 1376,
	2793, 1258, 1030, 898, 2790, 2789, 2786, 2784, 2783, 2781,
	2780, 1191, 57341, 2252, 39433, 39005, 49863, 49863, 1990, 56923,
	-1000, -1000, 1100, 1091, -1000, -1000, -1000, -1000, 2334, 2168,
	2137, 49033, -1000, -1000, 2779, 2778, 2774, 2773, 2772, 63975,
	1356, 2771, 1884, 2770, 2767, 2765, 2758, 2752, 2750, 2749,
	2748, 2740, -1000, 48615, 48197, 47779, 47361, 56505, 38577, 38149,
	-1000, -1000, -1000, 31864, 4096, 56087, 32722, 49863, 49863, -1000,
	-1000, 26743, -93, -1000, -1000, -1000, 2181, -1000, 26743, -93,
	-1000, 2246, 1546, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2098, 1343, 2622, 37721, 1558, 1158, 2328, 1275, 1828,
	2319, 2313, 2304, 2291, 2282, 1286, 1914, 1329, 1264, 2271,
	2245, 2651, 1812, 42357, 2728, 2722, 2471, 2242, 2178, -1000,
	-1000, -1000, -1000, 1210, -1000, -1000, -1000, -1000, -1000, 44859,
	-1000, -1000, 1018, -1000, -1000, 1018, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1051, 63151, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1261, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1993,
	-1000, 1516, -1000, -1000, 2721, 2191, 1858, 2488, 2488, 2488,
	2523, 438, 401, -1000, 114, -1000, -1000, 70976, -1000, -1000,
	26743, 26743, 26743, 26743, 26743, 1402, -1000, 673, -1000, -1000,
	711, -1000, 669, 611, -1000, -1000, -1000, -1000, -1000, -1000,
	668, 2652, -1000, 876, -1000, -1000, -1000, -1000, 2618, -1000,
	16431, -1000, -1000, -1000, 392, 667, 26743, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 248, 817, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 597,
	1338, 594, 594, 594, -1000, -1000, 889, -1000, -1000, -1000,
	351, 593, 267, 591, -1000, -1000, -1000, -1000, 2234, 665,
	664, -1000, 663, 662, 661, -1000, -1000, -1000, 657, 656,
	655, 651, 650, 645, 644, 643, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 887, -1000, 636, 634, 632, 628, 627,
	625, 624, 618, 617, -1000, -1000, -26, 61091, -1000, 461,
	-26, -1000, -1000, 614, -1000, 20426, 20426, 20426, -1000, -1000,
	1677, 26743, -1000, 2025, -1000, 373, -142, 779, 31028, -1000,
	29345, 779, 524, 33972, -1000, 2177, -1000, -1000, 613, 242,
	-1000, -1000, 2174, 61091, 14667, 61091, 49863, 49863, -1000, 2405,
	26743, -1000, -1000, 40287, 36881, 61091, 50275, 2571, 9876, 36881,
	61091, 2218, -1000, -1000, -1000, 61091, -1000, 26743, -1000, 2569,
	1252, -37, -1000, -1000, -1000, -1000, -1000, -1000, 1868, 1917,
	963, 1730, 1671, -1000, 19985, 2438, -1000, -1000, -1000, 231,
	14667, -1000, 1780, 2383, 1112, -1000, 1729, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1303, 2382, -1000, 1933, 2378,
	1284, -1000, -1000, 849, 2377, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1496, -1000, -1000, 2468, -1000, -1000,
	1783, 2375, -73, -1000, -1000, 40287, 37293, -33, -1000, -1000,
	-41, -1000, 13385, 70976, -1000, -1000, -1000, 70976, 772, -1000,
	-1000, 2374, -1000, 70976, 751, -1000, -1000, 2373, -1000, -1000,
	-1000, 2719, -1000, 2718, 1826, 2716, 2711, 2709, -1000, 1759,
	1325, 2708, -1000, 2707, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 46943, 46525, 897, -1000, 1676, -1000, -1000, 46107, 832,
	1825, -1000, -1000, 1824, -1000, 792, -1000, 2706, 55669, 1995,
	832, 1822, -1000, -1000, -1000, -1000, -1000, 49863, -1000, 49863,
	-1000, 49863, -1000, 1167, -1000, 63563, -142, -1000, -1000, -1000,
	-1000, -1000, 2370, 2704, 2703, 2702, -1000, 61091, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 178, 2363, -1000,
	-1000, 178, 2360, -1000, 178, 2353, -1000, 166, 2348, -1000,
	-1000, 1667, 2347, -1000, -45, 2342, -1000, -1000, -45, 2333,
	-1000, -51, -1000, -1000, -1000, 871, -1000, 31446, 55251, 40287,
	819, 637, 612, 70976, -1000, 40287, 70976, -1000, 46107, -1000,
	54833, 45695, -1000, -1000, 1105, 1901, -1000, -1000, -1000, -1000,
	40287, 40287, -1000, 54415, -1000, 1545, 1279, 2472, 49863, -1000,
	-1000, -1000, 2481, 2215, -1000, 36469, 51511, -1000, 51099, -1000,
	50687, -1000, 49863, -1000, 49863, -1000, 2701, 2700, 2699, 2237,
	1401, 1395, 61091, -1000, -1000, 61091, -1000, 61091, -1000, -1000,
	-1000, 1863, -1000, -1000, -1000, -1000, 49863, -1000, -1000, -1000,
	-1000, -1000, -1000, 2208, -1000, 1342, -1000, 1097, -1000, -1000,
	184, -1000, -1000, -37, -1000, 63151, -1000, -1000, 2191, 1858,
	-1000, 61091, -1000, -1000, -1000, 2191, 1712, 1941, 24940, 1940,
	26743, 114, -1000, -1000, 114, 114, 19544, -1000, -1000, 9876,
	9876, 14667, 1065, 26743, 26743, 26743, 26743, 26743, 26743, 26743,
	26743, 26743, 26743, 26743, 26743, 26743, 26743, 26743, 26743, 26743,
	26743, 26743, 26743, 26743, 26743, 26743, 26743, 26743, 26743, 26743,
	26743, 26743, 26743, 26743, 26743, 26743, 26743, 26743, 1974, 26743,
	1050, 26743, 26743, 26743, 26743, 1537, -1000, -1000, 1456, 499,
	1594, -1000, 2607, 2607, 2607, 71336, 71336, 575, 2692, 711,
	-1000, 26743, -1000, -93, 26743, 15095, -1000, 2636, 1139, -1000,
	-1000, 401, 5208, 1771, -1000, 400, 15549, -1000, -1000, -1000,
	16431, 611, 24486, 26743, 855, 70976, 12959, 2264, 2041, -1000,
	2634, -1000, -1000, 2621, -1000, -1000, -1000, -1000, 2621, 1064,
	1040, 2632, -1000, 2621, 2621, 610, 671, 659, 658, 464,
	463, 26743, 26743, 26743, 26743, 26743, 26743, 26743, 26743, -1000,
	24045, 23591, 23137, 28066, 22683, 26743, 16872, 22229, 21775, 61091,
	-26, 2568, 26743, 219, -1000, 69615, -1000, 219, 219, 607,
	-52, 70976, 1925, 1925, 30612, 1790, 1493, 1493, 1493, -1000,
	606, 698, -12, -14, -18, -1000, -1000, -19, -20, 779,
	10387, 52759, 1505, 779, 779, 205, 282, 399, 28929, 2025,
	52759, -1000, -1000, 49863, 605, 15095, 14667, 1140, -53, 202,
	1928, 1924, 1923, -1000, 1224, -58, 819, 1049, -66, -1000,
	3988, -64, -1000, 906, -1000, -1000, -1000, -1000, 161, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 873, 604, 602, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 597, 1338, 594, 594,
	594, -1000, -1000, -1000, 351, 593, 267, 591, -1000, -1000,
	-1000, -1000, -1000, -1000, 2163, -41, 50275, 781, -70, 967,
	-37, -1000, 1018, -1000, 1523, -1000, -1000, -1000, -1000, -1000,
	-1000, 1109, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2650,
	-1000, 2614, -1000, -1000, 2631, -31, -1000, -1000, 14667, -1000,
	-38, 1382, -1000, 41939, 2465, 2464, 2458, 1166, -1000, 1147,
	2521, 44859, 2546, 2541, 61, -1000, 2158, -1000, -1000, 801,
	1332, 1047, 44859, 1933, -1000, 9876, -1000, 2038, 2519, 837,
	1159, 837, 837, 1157, -1000, 44859, 1046, 1361, 40287, -1000,
	1045, -1000, -39, 2539, 2537, 11, -1000, 2154, 1042, -1000,
	-1000, 49863, 14667, 774, -33, 37293, 61091, 201, -1000, 26743,
	-93, 26743, -93, -1000, -1000, 2330, -1000, -1000, -1000, 2689,
	1270, 1883, -1000, -1000, -1000, 588, 1820, 1933, 1808, -1000,
	-1000, 45277, 2153, 61091, 1935, -35, 49863, -1000, -1000, 1359,
	-1000, 2323, 2315, 573, 2688, -1000, 1665, 1793, -1000, -1000,
	-1000, 62739, 1075, 2314, 861, 578, 2567, 578, 34804, -1000,
	61091, -1000, 61091, -1000, -1000, -1000, 2687, -1000, 49863, -1000,
	-1000, 49863, -1000, 49863, -1000, 49863, -1000, 49863, 49863, -1000,
	61091, 40287, 40287, 40287, 3633, 41115, -71, 398, -1000, 54003,
	61091, 932, 41527, 61091, -207, 819, 774, -1000, 774, -1000,
	49863, 2201, -1000, -1000, -1000, -1000, -1000, -1000, 2686, 2685,
	-1000, 823, -1000, -1000, 61091, -1000, 61091, -1000, -1000, 61091,
	-1000, 61091, -1000, 61091, -1000, -1000, -1000, -1000, -1000, 1189,
	-1000, 2196, -1000, 2193, -1000, 10, -1000, -1000, -1000, -1000,
	1427, 49863, 49863, 49863, -1000, 44859, -1000, -1000, 2191, -1000,
	-1000, -1000, -1000, -1000, 70976, -1000, 467, -1000, -1000, 70976,
	1223, 1960, -1000, 1960, -34, -1000, 69255, 1900, 49863, -1000,
	-1000, -1000, -1000, -1000, 797, 965, 965, 1041, 1041, 1041,
	1041, 2540, 4526, 262, 3645, 7280, 7280, 7280, 7280, 7280,
	7280, 7280, 7280, 517, 323, 323, 517, 517, 517, 517,
	517, 323, 323, 323, 7280, 7280, 7280, 71336, 71257, 7291,
	26743, 26743, 1037, 1440, 499, 6534, 26743, 459, 459, 459,
	459, -1000, 1889, -1000, -1000, -1000, -1000, 2144, 586, 28066,
	28066, -1000, -1000, -1000, -1000, 15990, 26743, -1000, -1000, -1000,
	-1000, 21321, -1000, -1000, 68691, -245, 395, -186, 51, -1000,
	26743, 26743, 26743, 394, -1000, 393, -1000, -1000, 1033, -1000,
	1032, 1024, 1023, -1000, 585, 199, 26743, 61091, -1000, 66453,
	697, -80, -1000, -76, 1176, -1000, 26743, 198, -1000, 1486,
	584, 582, 390, -78, -1000, 388, 796, 790, 386, 384,
	383, 26743, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 70897, 66376, 66093, 65990, 4346, 65707, 65630, -83,
	379, -1000, 2138, -186, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 377, -1000, 376, -1000, 70616, -186, 374, 1220, -1000,
	28066, 28066, 28066, -1000, 371, -1000, 69536, -1000, 70537, 20880,
	20880, 20880, 370, 70256, 26743, -186, -89, -1000, -91, -1000,
	-1000, 581, -95, 861, 20426, 29777, 14667, -1000, 861, 861,
	26743, -1000, 26743, 1910, -1000, -1000, -1000, 1909, 2482, 1925,
	30612, -1000, -1000, -1000, -1000, 52759, 608, 779, -1000, -1000,
	-1000, -1000, -1000, 52759, -1000, 2618, 2042, -1000, -1000, -1000,
	61091, 461, -1000, 52759, 52759, 14667, 779, -1000, 368, 33138,
	51, 193, -1000, -1000, 14667, 2004, 2004, 2004, -1000, -1000,
	2105, 61091, 2583, -1000, 1351, -1000, 9876, -1000, 710, 907,
	-1000, 2628, 579, -1000, 2621, 2621, 61091, 216, 19985, -1000,
	1018, -1000, -1000, 1300, -1000, 1290, -1000, 1022, -1000, -1000,
	-1000, 19985, -1000, 1727, 61091, 61091, 49863, -1000, -1000, 1789,
	62327, 1788, 9876, 61091, -1000, -1000, 576, 571, 1895, 1893,
	61091, 61091, 61915, 61503, 61091, 1379, 26743, 1750, 1685, -93,
	-93, -1000, -93, 567, 1077, 49863, 49863, 49863, 1269, -1000,
	-1000, -1000, -1000, -1000, 49863, -1000, -1000, 2627, -1000, 837,
	-1000, -1000, -1000, 837, 1933, 1268, 49863, 40287, 848, 61091,
	1425, -93, -93, -1000, -93, 566, 14667, 1399, -1000, 2003,
	-1000, -1000, -1000, 12533, 70976, -1000, 70976, -1000, 61091, -1000,
	896, 61091, 41527, 826, 2310, -1000, 1933, 2307, 461, -1000,
	-1000, 34388, -41, 819, 40287, 49863, -35, 40287, 40287, 40287,
	2684, 561, 2681, -1000, 49863, 2306, 1663, 1787, 2394, 731,
	61091, 1527, -1000, 26743, 1321, -1000, 33556, 913, 61091, 1239,
	187, -1000, -1000, -1000, -3, 61091, -1000, 2680, -1000, -1000,
	178, 178, 178, -1000, 166, 1667, -1000, -45, -45, -1000,
	-1000, 3633, 819, -36, 551, -1000, 765, 749, 32296, 40287,
	-102, -1000, -1000, -1000, -1000, -1000, 49863, 61091, 635, 1992,
	61091, -103, -1000, 192, -1000, 819, -1000, -1000, 846, -1000,
	1090, -1000, -1000, -1000, -41, -41, -1000, -1000, -1000, -1000,
	1187, 1186, 61091, -1000, 14667, 61091, 49863, 14667, 49863, -1000,
	-1000, -1000, -1000, -1000, 1223, -1000, 26743, -1000, -1000, -1000,
	19544, -1000, -1000, -1000, 49863, -141, 26743, 26743, 5873, 5682,
	26743, 28066, 28066, -1000, 26743, 5057, -1000, -1000, -1000, -1000,
	-1000, 2096, 548, 26743, 9876, 4002, 1602, -1000, 366, 9514,
	517, -1000, 26743, -1000, 365, 19103, -1000, 69896, -28, -28,
	-1000, 2642, 1838, 1691, 1294, 1208, 2624, 12107, -186, -104,
	-1000, -1000, 708, -1000, 2308, -1000, 26743, 69975, 11681, -1000,
	35220, 862, 1527, -1000, -1000, 2621, 786, -1000, -1000, -1000,
	786, -1000, 68614, 9876, 9876, 26743, 26743, -1000, 26743, 26743,
	26743, -1000, -1000, 26743, -1000, -1000, 2085, 26743, -1000, 9876,
	9876, 28066, 28066, 28066, 28066, 28066, 28066, 28066, 28066, 28066,
	28066, 28066, 28066, 28066, 28066, 28066, 28066, 28066, 28066, 28066,
	1896, 28066, 2599, 2599, 2599, -1000, 2171, 2085, 26743, 26743,
	9876, 364, 359, 358, -1000, 26743, -186, -1000, -1000, 3633,
	-1000, 2039, -1000, -160, -1000, 2025, -1000, -1000, 2039, 2039,
	-108, 70976, 30612, 30612, -1000, 544, 26743, 1907, -1000, 696,
	-1000, -109, -1000, 52759, -1000, 695, -242, -1000, 737, -1000,
	-1000, -1000, -1000, 461, -1000, -1000, -1000, 179, 52759, -1000,
	-110, -1000, 2565, 356, 14667, -1000, -1000, -1000, -1000, -1000,
	-1000, -93, -41, 1557, 2641, -1000, 2623, 702, 692, 354,
	2621, 353, 352, -41, 61091, -1000, -37, -1000, -1000, -1000,
	26743, -1000, -1000, 2463, 1016, 1003, -1000, 2305, -1000, 1785,
	-1000, 917, -1000, 1320, -1000, 26743, 26743, 541, 537, 1406,
	2677, 2303, 1667, 2302, 1667, -1000, -1000, 788, -1000, 70976,
	536, 528, -1000, -38, 1328, 838, -1000, -1000, 26743, 26743,
	53587, -1000, 2468, 2468, -1000, 996, -1000, -1000, -1000, 1933,
	995, -1000, -1000, 1347, -1000, -1000, 835, -1000, -1000, 26743,
	-1000, -39, 993, 819, 2081, -1000, 2676, 2672, 2670, 347,
	-40, -1000, 2556, 1699, 61091, 49863, 49863, 2554, 782, -1000,
	2618, -1000, -1000, -1000, -1000, 832, -1000, -1000, 2669, -1000,
	922, 14667, 49863, 2300, 1864, 731, 40703, -1000, 832, 1941,
	-1000, 70976, -1000, 1239, 18649, 2460, -114, -1000, -1000, -1000,
	861, 34804, 30612, 26743, 2668, -120, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 53175, 53175, 40287, 40287, 40287, 819,
	61091, 61091, 41527, 2667, 527, 61091, 61091, 523, -1000, 61091,
	61091, 2665, -1000, -1000, 1547, 49863, -1000, -1000, 823, -1000,
	-1000, 1451, 1721, 1451, 1548, 68331, -1000, 2477, 14667, 2544,
	459, 26743, 26743, 4822, 1248, 487, 459, 26743, 26743, 9876,
	71507, -124, 26743, 26743, -1000, 26743, 672, 70976, 2610, 26743,
	345, 344, 342, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 341, -1000, -1000, -1000, -1000, -1000, 70976, 26743, 26,
	-1000, -1000, -1000, 65211, -1000, 26743, 337, 336, -1000, -1000,
	-1000, 320, 319, 9127, 442, 68228, 67945, 67868, 70976, 2171,
	70976, -1000, -1000, 646, 646, 1142, 1142, 1142, 1142, 2599,
	1036, 1088, 310, 415, 415, 415, 689, 538, 538, 415,
	415, 415, 2076, 1897, 521, 4658, -1000, -1000, 70976, 70976,
	308, -1000, -1000, -1000, -186, 306, 2028, 2518, -1000, 30612,
	2028, 2028, -1000, -1000, 2482, 61091, 70976, 30612, -142, -1000,
	2618, -1000, -1000, 2042, -1000, 10825, -1000, 14667, -1000, -1000,
	33138, -1000, 520, -1000, -2, -1000, -1000, -1000, 647, 2663,
	701, -1000, 287, -1000, -1000, -41, 70976, 61091, 61091, 61091,
	2299, -1000, 1694, -1000, 67585, -125, -1000, 69255, 26743, 61091,
	-1000, 1461, 1957, 954, -1000, 61091, -1000, 61091, -1000, -1000,
	61091, 61091, 49863, 2287, -129, 70976, -42, -1000, 736, -1000,
	-1000, 49863, 49863, 40287, 2284, -143, 14667, -1000, 40287, -1000,
	-1000, -1000, 1982, -93, -1000, 2661, 519, 1933, -93, -1000,
	1530, -1000, 609, -1000, -1000, 518, 61091, 1660, 515, 14667,
	1877, 731, 40703, -1000, 1075, 1239, -1000, -1000, -43, -1000,
	490, -93, 1527, -1000, -44, 70976, -1000, 734, -1000, -144,
	-1000, -1000, 279, -1000, 2432, 2431, -1000, -1000, 26743, 514,
	504, 61091, 2428, -1000, -1000, 1885, -1000, -1000, -1000, -1000,
	14667, 1283, -1000, -1000, -1000, -1000, 2477, 459, 459, 26743,
	26743, 26743, 459, 71507, -145, -1000, 459, 459, -186, -1000,
	-1000, 69896, -1000, -1000, -1000, -1000, 70976, 11255, 1453, -1000,
	67482, -1000, -1000, -1000, -1000, 26743, 26743, -1000, -1000, -1000,
	-1000, -1000, 28066, 2069, 502, 9876, -1000, -1000, 852, 26743,
	26743, 2025, 852, 852, -1000, -149, -1000, 779, -1000, -1000,
	-1000, 2618, -2, -1000, 2660, 14667, 691, -1000, 2658, -1000,
	-1000, -1000, -1000, 61091, -1000, 61091, -1000, 14667, 61091, 2075,
	1769, -1000, -1000, 1891, 500, 28066, 49863, 746, 2093, 1431,
	26743, -1000, -150, -151, 1763, -1000, -1000, 1762, 26743, -1000,
	9876, 1667, 1667, -155, -156, -1000, 26743, 990, 61091, 18208,
	-1000, -1000, -1000, 26743, 988, -1000, -45, 1425, 2011, 822,
	-1000, 41527, 826, -1000, -1000, 825, -1000, 26743, -1000, 49863,
	26743, 1659, -1000, 731, 40703, -1000, 2394, -1000, 2401, 61091,
	2456, -1000, 1941, 499, -1000, 819, 498, 496, -161, 26743,
	26743, -162, 495, -50, -1000, 705, 704, -1000, -1000, 49863,
	49863, -1000, 459, 459, 459, -1000, 275, -1000, -1000, 1527,
	2512, -1000, 67199, 67122, 854, 28066, 9876, -163, -1000, 61091,
	70976, -186, -1000, -1000, -1000, 52759, 539, -1000, 2657, -1000,
	-1000, 1673, -1000, -1000, -1000, 61091, 1778, -1000, -1000, 26743,
	4658, 493, 26743, -1000, -1000, 1950, 2099, 1982, 491, -1000,
	-1000, -1000, -1000, 1313, -1000, -1000, 70976, 2493, -1000, -1000,
	489, 488, 70976, 484, 720, 2068, -1000, 70976, 473, 826,
	-1000, 1471, -1000, 1987, 269, 2553, 825, -1000, 2603, -1000,
	-167, 922, -168, 49863, 40703, -1000, 1864, 1098, -169, 61091,
	1239, -1000, -1000, 40287, 40287, 1431, -173, -174, -1000, 40287,
	1885, -1000, 61091, -1000, 61091, -1000, -1000, -1000, 1731, 26743,
	-1000, -1000, 854, -175, -1000, -68, -1000, 2547, -1000, -1000,
	-1000, -1000, -1000, 2298, 66839, 1777, 61091, 66736, 2084, -1000,
	-1000, 1425, 61091, 49863, 921, 14667, 1451, 1451, 26743, 17767,
	1470, 26743, -1000, 49863, -1000, 2424, 1982, -93, -1000, -1000,
	1431, 472, 1431, 471, -1000, 1877, 1161, -1000, 861, -1000,
	-1000, -185, -187, 1982, 1431, -1000, -189, -1000, -194, -195,
	264, 27625, 27625, 27625, -186, -1000, 61091, 462, 2083, -1000,
	1561, 1398, 244, 945, -1000, -1000, 2093, -199, 461, -1000,
	26743, -1000, -201, -1000, 911, -203, -1000, 905, -205, -1000,
	2063, -1000, -209, 457, -1000, 1425, 822, 1982, 26743, 1982,
	26743, -1000, 34804, -1000, 819, 819, 1425, 1982, 819, -1000,
	-1000, -1000, -1000, -1000, 28492, 1504, 1221, 68974, -1000, -1000,
	-1000, -1000, 61091, -1000, 1653, 1631, 1254, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1777, 70976, -1000, 1451, 2008,
	-1000, 1451, 2049, -1000, 1469, -1000, 61091, 826, -1000, 1425,
	-210, 1425, -211, -200, -1000, -1000, -1000, 1425, -1000, 2576,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2409, -1000, 947,
	1573, 1573, 1561, -1000, 445, -1000, 444, -1000, -217, -1000,
	858, 1431, 858, 1431, -1000, -1000, 27184, -1000, 2587, -1000,
	-1000, 1902, -1000, 2093, 26743, 26743, 1554, -1000, 2656, 1982,
	-1000, 1982, -1000, -1000, -1000, -1000, -1000, -222, -223, -1000,
	-1000, -1000, -1000, 1425, 1425, 1425, 979, 858, 858, -1000,
	441, -1000, -1000, 26743, -227, 1425, -1000,
}
var sqlPgo = [...]int{

	0, 3282, 3281, 3280, 3279, 3276, 3275, 3273, 3272, 3268,
	3267, 3264, 3262, 3261, 3259, 3258, 3257, 3256, 3253, 3252,
	3251, 3249, 3248, 3247, 3246, 3243, 3240, 3239, 3238, 3237,
	3235, 3233, 3231, 3230, 3226, 3225, 3223, 3222, 3221, 3220,
	3219, 3216, 3213, 3211, 3208, 3207, 29, 3206, 3205, 3204,
	3202, 3197, 3195, 3190, 3189, 3182, 3181, 3179, 3178, 3176,
	3175, 3173, 3172, 3171, 32, 3170, 211, 3167, 3166, 3165,
	3162, 3159, 3157, 3155, 3154, 3153, 3151, 209, 3150, 124,
	3148, 3147, 3145, 3143, 3142, 207, 3141, 3139, 3137, 3136,
	3134, 3132, 3131, 3126, 3123, 184, 3120, 3117, 3115, 3114,
	3113, 3112, 3103, 3102, 3101, 3100, 186, 3099, 206, 3098,
	3096, 3095, 3093, 3086, 3085, 3084, 3083, 3080, 3077, 3075,
	3065, 3062, 3060, 3058, 3057, 3056, 3055, 3054, 3053, 3052,
	3050, 3048, 3047, 3045, 222, 142, 3041, 3040, 205, 204,
	3039, 3038, 99, 94, 31, 3036, 87, 127, 183, 6994,
	177, 3034, 3033, 3031, 3030, 3029, 64, 131, 135, 129,
	128, 139, 3027, 3026, 72, 62, 30, 26, 104, 3022,
	3021, 3020, 2440, 91, 3010, 3006, 196, 180, 3004, 1072,
	3003, 134, 86, 107, 43, 88, 3002, 101, 16, 2999,
	182, 53, 2998, 123, 68, 33, 5700, 7103, 2996, 102,
	212, 76, 110, 159, 158, 166, 165, 130, 137, 2989,
	185, 2988, 75, 151, 2987, 2985, 2984, 65, 146, 2,
	5, 141, 9, 85, 14, 2983, 12, 2982, 2981, 2980,
	2978, 27, 125, 2977, 44, 59, 2976, 18, 69, 156,
	2975, 172, 2973, 93, 2969, 190, 154, 150, 13, 175,
	2968, 2966, 2964, 2961, 2954, 97, 19, 95, 2948, 2947,
	111, 179, 2945, 34, 136, 67, 113, 202, 92, 169,
	81, 170, 140, 171, 2943, 2940, 2938, 161, 2936, 2931,
	114, 160, 2930, 2929, 210, 36, 58, 178, 40, 2925,
	2924, 121, 2920, 153, 2919, 2915, 2914, 208, 132, 162,
	10, 70, 90, 25, 8, 176, 117, 80, 79, 2913,
	3481, 1384, 1227, 2912, 98, 83, 54, 89, 112, 197,
	51, 2911, 2909, 1101, 2908, 2907, 2906, 2905, 138, 2902,
	2901, 2897, 115, 38, 63, 2896, 2895, 120, 61, 84,
	199, 77, 168, 152, 193, 2894, 144, 2893, 37, 109,
	2892, 149, 188, 73, 2891, 340, 122, 2889, 164, 2888,
	2887, 2886, 2885, 224, 2884, 2883, 319, 2882, 106, 2881,
	2880, 143, 116, 126, 96, 28, 2879, 55, 469, 2877,
	148, 50, 2875, 108, 56, 0, 6905, 5406, 5779, 2874,
	3564, 2873, 157, 103, 2872, 2871, 2870, 2869, 35, 20,
	7, 3, 17, 15, 213, 191, 2868, 2867, 74, 100,
	118, 2865, 200, 167, 2864, 2863, 2862, 71, 2860, 24,
	2859, 22, 2858, 2856, 23, 11, 2855, 2853, 181, 2852,
	187, 2851, 2849, 2573, 2848, 198, 2847, 105, 2846, 133,
	163, 2844, 2842, 2838, 2834, 189, 2833, 194, 2832, 4,
	21, 1, 2826, 2825, 2817, 155, 6, 2416, 2816, 2813,
	57, 147, 66, 2812, 2811, 145,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 7, 7, 8, 8, 8, 34, 34,
	10, 10, 9, 9, 9, 11, 11, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 13, 13, 24, 24,
	14, 14, 26, 26, 15, 27, 435, 435, 18, 29,
	19, 30, 12, 437, 437, 437, 437, 22, 20, 20,
	31, 31, 145, 145, 145, 145, 17, 17, 25, 25,
	158, 158, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 434, 434, 160, 160, 159, 155, 155,
	438, 438, 161, 161, 161, 163, 163, 35, 35, 93,
	93, 93, 146, 86, 86, 86, 86, 86, 86, 86,
	86, 81, 81, 383, 383, 384, 384, 141, 141, 142,
	142, 142, 142, 143, 143, 144, 144, 144, 49, 37,
	37, 37, 37, 37, 37, 37, 38, 38, 38, 38,
	39, 39, 39, 39, 39, 39, 40, 40, 40, 40,
	40, 40, 47, 47, 47, 47, 135, 135, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 443, 443,
	444, 444, 445, 445, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 446, 446, 446, 446, 446, 446,
	446, 446, 446, 446, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 61,
	61, 233, 233, 211, 211, 62, 62, 62, 63, 63,
	64, 64, 51, 51, 430, 430, 246, 246, 350, 350,
	66, 66, 67, 67, 67, 67, 67, 67, 68, 68,
	68, 68, 68, 68, 68, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 75, 75, 75, 76, 76,
	76, 73, 73, 73, 71, 71, 71, 70, 70, 70,
	74, 74, 74, 72, 72, 72, 247, 247, 77, 77,
	77, 77, 77, 77, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 352, 352, 78,
	78, 78, 321, 321, 82, 82, 82, 278, 278, 83,
	83, 83, 83, 83, 84, 84, 84, 84, 94, 94,
	94, 94, 433, 433, 239, 239, 176, 176, 176, 176,
	89, 89, 89, 89, 90, 90, 90, 91, 91, 140,
	140, 100, 100, 100, 100, 100, 99, 99, 99, 99,
	99, 99, 41, 41, 41, 42, 42, 43, 43, 44,
	44, 45, 45, 46, 46, 46, 46, 46, 102, 102,
	439, 439, 104, 101, 101, 101, 103, 103, 103, 103,
	105, 106, 106, 106, 106, 106, 106, 107, 107, 377,
	377, 254, 254, 375, 375, 391, 391, 376, 376, 215,
	215, 215, 215, 215, 216, 216, 216, 382, 382, 382,
	382, 382, 382, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 125, 125, 125, 134, 134, 134, 134, 134,
	134, 134, 127, 127, 127, 117, 117, 109, 109, 109,
	109, 113, 113, 113, 113, 113, 110, 110, 114, 114,
	116, 116, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 111, 111, 111, 111, 120, 120, 120, 120, 284,
	284, 284, 119, 119, 336, 336, 130, 130, 130, 130,
	130, 130, 335, 335, 126, 126, 126, 126, 129, 129,
	129, 129, 268, 268, 123, 123, 123, 124, 124, 124,
	128, 128, 131, 131, 131, 131, 112, 112, 112, 448,
	448, 448, 132, 132, 122, 122, 133, 133, 133, 133,
	133, 133, 133, 133, 121, 121, 121, 436, 436, 115,
	431, 431, 428, 428, 428, 428, 428, 428, 428, 429,
	429, 432, 432, 87, 87, 87, 56, 56, 449, 449,
	449, 57, 57, 450, 450, 450, 447, 447, 447, 447,
	447, 447, 447, 447, 217, 217, 218, 218, 302, 302,
	302, 302, 302, 219, 219, 162, 162, 162, 222, 223,
	223, 220, 220, 221, 221, 221, 225, 225, 224, 227,
	227, 226, 301, 396, 396, 397, 397, 397, 397, 397,
	397, 397, 398, 398, 398, 398, 398, 398, 398, 398,
	398, 398, 394, 394, 394, 395, 392, 392, 393, 393,
	393, 393, 451, 451, 451, 451, 451, 451, 452, 452,
	300, 300, 231, 231, 399, 399, 399, 399, 400, 400,
	400, 400, 400, 403, 402, 401, 401, 401, 401, 401,
	331, 331, 331, 60, 60, 60, 265, 265, 264, 264,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 137, 137, 58, 58, 58, 168,
	168, 55, 55, 55, 454, 454, 59, 59, 59, 455,
	455, 65, 65, 65, 65, 65, 65, 54, 54, 54,
	54, 54, 456, 456, 285, 285, 283, 283, 237, 237,
	338, 180, 180, 156, 156, 156, 21, 23, 23, 16,
	16, 32, 32, 33, 33, 28, 28, 440, 440, 441,
	441, 88, 88, 92, 92, 92, 98, 98, 136, 136,
	136, 136, 136, 136, 136, 36, 36, 36, 36, 48,
	48, 48, 48, 96, 458, 458, 458, 97, 97, 457,
	457, 175, 175, 175, 175, 177, 177, 297, 297, 298,
	298, 459, 459, 299, 299, 299, 299, 170, 169, 171,
	171, 53, 53, 53, 164, 164, 165, 165, 166, 166,
	167, 167, 460, 460, 85, 85, 85, 139, 139, 210,
	210, 293, 293, 293, 232, 232, 185, 185, 296, 296,
	294, 294, 294, 294, 263, 263, 263, 138, 138, 242,
	242, 256, 256, 257, 257, 347, 347, 258, 95, 95,
	149, 149, 147, 147, 147, 147, 147, 147, 461, 461,
	148, 148, 148, 150, 150, 150, 150, 150, 150, 150,
	153, 153, 153, 153, 154, 154, 154, 152, 152, 410,
	410, 410, 412, 412, 413, 409, 409, 411, 411, 453,
	453, 267, 267, 267, 229, 230, 228, 228, 462, 462,
	235, 235, 234, 236, 236, 337, 337, 337, 261, 261,
	261, 261, 288, 288, 286, 286, 287, 287, 289, 289,
	290, 290, 290, 291, 291, 292, 292, 260, 260, 317,
	317, 151, 151, 151, 241, 241, 241, 243, 243, 308,
	308, 308, 308, 308, 308, 309, 309, 307, 307, 307,
	307, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	340, 340, 244, 244, 341, 295, 295, 426, 426, 426,
	427, 427, 334, 334, 342, 342, 342, 342, 342, 342,
	332, 332, 333, 333, 348, 349, 349, 271, 271, 271,
	271, 269, 269, 272, 272, 272, 272, 270, 270, 343,
	343, 343, 343, 262, 262, 344, 344, 344, 345, 303,
	304, 304, 353, 353, 353, 353, 353, 368, 240, 240,
	240, 240, 240, 463, 463, 354, 354, 354, 354, 354,
	354, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 358, 358, 358, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 367, 367, 367, 367, 367, 359,
	359, 364, 364, 365, 365, 365, 360, 361, 366, 366,
	366, 366, 464, 464, 370, 370, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 356, 356, 356, 363, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 279, 279, 280, 280, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 312, 312, 312, 312, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	404, 404, 404, 404, 404, 404, 404, 404, 407, 407,
	408, 408, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 405, 405, 405, 405, 405, 405, 405,
	405, 405, 405, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 414, 414, 415, 415, 417, 417, 418, 418, 419,
	420, 420, 420, 421, 422, 422, 416, 416, 423, 423,
	423, 423, 424, 424, 425, 425, 425, 425, 425, 323,
	323, 324, 324, 330, 330, 330, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 178, 178, 178, 178, 178, 252, 252, 250,
	250, 250, 253, 253, 251, 251, 249, 249, 248, 248,
	320, 320, 318, 318, 322, 322, 273, 273, 369, 369,
	369, 369, 369, 369, 369, 274, 274, 274, 282, 275,
	275, 276, 276, 276, 276, 276, 314, 315, 277, 277,
	277, 316, 316, 325, 329, 329, 328, 327, 327, 326,
	326, 305, 305, 306, 306, 259, 259, 465, 465, 255,
	255, 346, 346, 346, 346, 213, 213, 245, 245, 212,
	212, 205, 205, 206, 206, 206, 206, 238, 238, 371,
	371, 371, 372, 373, 374, 319, 195, 194, 182, 183,
	193, 192, 191, 181, 184, 188, 189, 190, 186, 187,
	201, 200, 199, 197, 198, 351, 207, 207, 208, 208,
	208, 209, 209, 209, 209, 179, 179, 202, 202, 203,
	204, 204, 196, 196, 196, 172, 172, 172, 173, 173,
	174, 174, 381, 381, 379, 379, 379, 380, 380, 380,
	380, 378, 378, 378, 378, 378, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 388, 388, 388, 388, 388, 388, 388, 388, 388,
	388, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 387, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 390, 390,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 1, 3, 4, 6,
	1, 3, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 9, 6, 9, 6, 6, 1, 1, 5, 5,
	6, 6, 4, 4, 4, 4, 3, 4, 4, 7,
	4, 7, 5, 3, 5, 7, 4, 12, 4, 12,
	1, 3, 5, 5, 2, 5, 3, 6, 4, 6,
	5, 6, 6, 4, 8, 3, 4, 3, 6, 4,
	3, 1, 3, 2, 1, 1, 3, 1, 3, 2,
	2, 0, 1, 1, 0, 2, 0, 7, 2, 5,
	6, 2, 1, 6, 4, 9, 7, 12, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 6, 3, 1, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 3, 3, 4,
	3, 4, 7, 4, 4, 4, 3, 5, 7, 4,
	3, 3, 4, 3, 3, 3, 3, 3, 2, 0,
	1, 0, 1, 0, 3, 3, 3, 3, 3, 6,
	4, 4, 4, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 1, 1, 2, 1, 2, 7,
	3, 2, 0, 1, 3, 3, 1, 0, 1, 2,
	2, 1, 6, 5, 1, 2, 1, 3, 2, 0,
	8, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 3, 6, 3, 1, 1, 2, 1, 1, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 2, 1, 3, 5,
	7, 2, 3, 0, 3, 5, 2, 3, 0, 2,
	3, 2, 3, 2, 6, 4, 7, 2, 6, 4,
	7, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 2, 4, 3, 2,
	2, 1, 2, 1, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 5, 4, 6, 4, 3,
	0, 1, 3, 2, 4, 2, 4, 1, 6, 3,
	1, 1, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 1, 3, 2, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 5, 7, 3, 3, 3, 3, 4, 4,
	3, 4, 4, 3, 4, 4, 5, 3, 3, 3,
	4, 3, 4, 3, 5, 4, 5, 3, 4, 5,
	3, 4, 3, 4, 3, 3, 4, 4, 5, 0,
	1, 1, 3, 4, 1, 0, 5, 4, 6, 4,
	6, 4, 1, 0, 3, 4, 4, 5, 7, 5,
	3, 3, 2, 0, 4, 2, 3, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 3, 4, 3, 1,
	1, 1, 2, 3, 2, 3, 6, 6, 7, 9,
	7, 9, 3, 4, 5, 5, 3, 1, 1, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 10, 13, 0, 2,
	3, 9, 12, 0, 2, 3, 1, 1, 2, 2,
	2, 2, 1, 0, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 8, 0, 1, 1, 0, 2, 1,
	0, 1, 0, 9, 9, 3, 1, 3, 7, 1,
	3, 11, 3, 2, 0, 3, 1, 2, 2, 3,
	2, 6, 2, 1, 1, 2, 4, 2, 5, 5,
	5, 2, 8, 9, 6, 5, 3, 1, 5, 8,
	5, 11, 0, 1, 3, 3, 2, 2, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 5, 8, 4, 1, 0, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 2, 2, 2,
	2, 2, 3, 1, 4, 2, 4, 7, 3, 3,
	0, 3, 6, 3, 1, 1, 8, 7, 5, 0,
	1, 6, 7, 6, 5, 3, 4, 14, 17, 14,
	17, 4, 0, 2, 2, 0, 1, 0, 1, 3,
	2, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 1, 3, 1, 3, 8, 5,
	3, 4, 3, 0, 2, 2, 0, 10, 3, 2,
	0, 1, 3, 1, 1, 3, 3, 5, 1, 1,
	3, 3, 2, 3, 4, 3, 4, 5, 0, 2,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 1, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 3, 4, 1, 5, 3, 4, 5,
	1, 5, 1, 3, 2, 0, 3, 0, 2, 3,
	1, 3, 2, 0, 3, 5, 6, 4, 6, 4,
	3, 2, 1, 0, 5, 1, 0, 2, 2, 2,
	1, 1, 0, 1, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 2,
	1, 0, 2, 5, 7, 2, 1, 1, 2, 4,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 5, 4, 1, 2, 1, 4, 1, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 2, 5, 1,
	4, 2, 5, 1, 4, 3, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 5, 4, 6, 3, 5, 4, 6, 4, 6,
	5, 7, 3, 3, 3, 3, 3, 4, 3, 2,
	4, 2, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 1,
	5, 5, 3, 1, 1, 1, 2, 2, 2, 4,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 8, 8, 6, 4, 6, 6,
	6, 4, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4,
	4, 3, 6, 5, 5, 5, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	1, 1, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 1,
	2, 3, 2, 3, 2, 3, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 1, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 1, 2, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 3,
	1, 1, 1, 1, 5, 3, 1, 1, 3, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	7, 1, 7, 5, 3, 1, 1, 1, 1, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 455, -79, -49, -47, -82, -83, -67,
	-81, -84, -78, -94, -98, -88, -100, -136, -3, -35,
	-37, -50, -66, -68, -77, -86, -85, -87, -89, -93,
	-92, -41, -95, -99, -108, -137, -138, -139, 81, 68,
	121, 103, 108, 128, 154, 284, 313, 323, 307, -103,
	-104, 342, -36, -48, -97, -96, -4, -10, 27, 39,
	-38, -39, -40, 53, -58, -55, -52, -61, -442, 83,
	-411, -69, -72, -74, -446, 113, 127, 171, 276, -90,
	-91, 309, 311, -43, -42, 122, -147, -149, -101, -102,
	-140, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, -129, -130, -131, -132, -133, 345, 392, 40, 354,
	69, 116, 317, 21, -5, -6, -7, -8, -9, -11,
	-23, -51, -53, -54, -56, -57, -65, -59, -60, -410,
	-70, -71, -73, -75, -76, 308, -150, -148, 452, 405,
	-13, -18, -19, -14, -15, -17, -20, -16, -24, -29,
	-30, -26, -27, -25, -28, -31, -32, -33, -34, -21,
	-22, -12, 423, 431, -153, -151, -152, -154, 330, 413,
	368, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, -197, -202, -203, -204, -196, -172, -387, -390, 4,
	-385, -388, 133, 179, 246, 21, 22, 23, 24, 25,
	27, 37, 38, 39, 40, 43, 45, 46, 49, 50,
	51, 52, 53, 54, 57, 62, 67, 68, 69, 70,
	71, 76, 73, 74, 75, 78, 80, 81, 82, 85,
	86, 94, 95, 96, 97, 98, 99, 103, 106, 105,
	108, 111, 112, 113, 115, 117, 118, 121, 122, 125,
	123, 374, 376, 124, 126, 127, 128, 129, 139, 140,
	141, 143, 144, 146, 148, 152, 153, 155, 159, 161,
	162, 163, 164, 170, 171, 173, 174, 180, 175, 181,
	185, 188, 187, 189, 190, 191, 182, 196, 200, 201,
	202, 204, 205, 208, 209, 210, 211, 214, 213, 216,
	219, 220, 223, 224, 227, 228, 230, 231, 234, 232,
	235, 233, 236, 239, 237, 238, 241, 242, 244, 243,
	168, 251, 252, 254, 255, 256, 271, 259, 260, 261,
	264, 267, 270, 272, 273, 274, 275, 276, 277, 279,
	280, 282, 284, 286, 288, 289, 290, 291, 292, 293,
	295, 296, 298, 299, 300, 301, 302, 307, 304, 305,
	306, 308, 309, 310, 311, 313, 315, 316, 317, 318,
	320, 322, 343, 344, 356, 323, 324, 325, 326, 327,
	328, 329, 333, 337, 334, 335, 336, 338, 331, 332,
	339, 340, 342, 345, 347, 349, 350, 353, 354, 355,
	357, 360, 361, 362, 358, 359, 352, 367, 365, 366,
	369, 370, 371, 372, 373, 375, 377, 386, 387, 389,
	392, 393, 394, 384, 396, 397, 400, 401, 402, 403,
	404, 409, 405, 407, 410, 411, 412, 418, 417, 424,
	425, 427, 428, 429, 32, 41, 42, 44, 47, 58,
	59, 60, 63, 100, 101, 120, 130, 131, 142, 156,
	158, 165, 166, 167, 186, 192, 194, 198, 217, 249,
	250, 265, 269, 281, 283, 294, 319, 348, 363, 379,
	380, 381, 382, 388, 390, 413, 414, 415, 419, 426,
	257, -190, 2, -172, -172, 284, 26, 2, 26, 280,
	332, 370, 372, 2, 195, 2, -433, -239, 2, 26,
	-176, -172, 83, 154, 330, -190, 2, -433, -239, 24,
	2, -172, 2, -177, 2, 323, -172, 455, 78, 224,
	62, 319, 339, -106, 387, -105, 379, 325, -107, -377,
	2, 239, -172, 455, 455, 455, 455, 2, 368, 274,
	417, 331, 406, 96, 291, 179, -428, 2, 4, -388,
	-385, -206, -205, 368, 96, -204, -196, 445, -203, 455,
	455, 455, 2, 201, 202, 290, 289, 339, 340, 455,
	455, 455, 2, 25, 56, 77, 80, 102, 129, 149,
	152, 262, -443, 231, 271, 288, 325, 338, 367, 377,
	389, -447, 355, 57, 406, -454, 394, 111, -283, 96,
	372, 370, 224, 153, 401, 315, 157, 399, 106, 185,
	404, 403, 455, 455, 25, 56, 65, 80, 111, 129,
	149, 152, -445, 271, 288, 322, 325, 338, 367, 377,
	394, 389, 2, 417, 331, 368, 179, 96, 406, 315,
	287, -79, 2, 452, 29, 342, -146, 368, 195, 2,
	-172, 201, 202, 2, 455, 455, -428, 2, 201, 202,
	2, 57, 327, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 2,
	-134, 339, 355, 163, 39, 62, 26, 67, 97, 155,
	179, 180, 209, 77, 78, -284, -336, -335, 369, 326,
	332, 365, 387, 83, 407, 316, 429, -436, 123, 4,
	96, 239, 341, 379, 224, 38, 71, 373, 374, -453,
	2, 368, -457, 2, 387, 387, 2, -457, 2, -457,
	2, -175, 2, 387, 383, -458, 387, 426, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	-148, -150, -149, 455, 455, 455, 455, 455, -134, 339,
	2, 62, 26, -461, 147, -234, -235, 398, 193, 119,
	263, -147, -149, 2, -410, -375, 2, -310, -391, -312,
	443, 444, 438, 245, 430, -323, 102, 399, 257, -390,
	-313, -325, 120, 319, -253, 8, 9, 5, 6, 7,
	-179, -355, -319, -363, 391, 132, 248, -209, 457, 10,
	452, -407, -149, -324, 33, 158, 55, -379, -208, -357,
	-365, -361, -362, -463, 45, 51, 50, 377, 238, 333,
	334, 349, 335, 336, 43, 409, 175, 254, 256, 187,
	4, 194, -207, -196, -404, -405, -385, -386, 186, 192,
	188, 348, 189, 190, 191, 42, 294, 143, 144, 142,
	112, 101, 100, 250, 47, 46, 44, 414, -366, 98,
	379, 380, 381, 382, 204, 205, -172, -387, 65, 88,
	89, 87, 92, 91, 93, 90, 341, 406, 56, 32,
	165, 166, 198, 249, 167, 63, -406, 359, 84, 151,
	184, 169, 197, 199, 203, 218, 221, 240, 247, 266,
	268, 314, 346, -464, 415, 130, 131, 269, 281, 363,
	388, 390, 156, 217, 58, 59, -412, 295, -413, -190,
	-412, 455, 455, 456, 455, -228, -229, -230, 2, 26,
	109, 452, 2, -339, 2, 450, -343, -149, 212, -342,
	452, -340, -197, 258, -408, 320, -404, -405, -179, -196,
	-208, 4, -231, 452, 454, 96, 368, 66, 2, -278,
	452, -172, 26, -146, 257, 383, 456, -321, 452, 257,
	150, 260, -172, 2, 2, 343, 2, 452, -106, 60,
	387, -298, 2, -299, -169, -170, -171, -348, 200, 286,
	293, 432, 429, -375, -439, 150, 435, 383, -375, -254,
	454, 2, -343, 165, -197, 2, -194, -378, 4, -385,
	-388, -386, -389, 65, -387, 26, 28, 29, 30, 31,
	33, 34, 35, 36, 48, 55, 56, 61, 64, 66,
	77, 83, 87, 88, 90, 89, 91, 92, 93, 102,
	104, 107, 109, 110, 114, 116, 119, 132, 134, 147,
	149, 150, 154, 157, 160, 172, 183, 193, 195, 212,
	215, 222, 225, 226, 245, 248, 253, 257, 258, 262,
	263, 278, 285, 297, 312, 330, 341, 351, 364, 368,
	378, 383, 385, 391, 398, 399, 406, 408, 416, 420,
	421, 422, 423, -390, 2, -343, 165, 2, -199, 165,
	-343, -202, 2, -383, 165, -381, 10, -380, 5, 4,
	-385, -388, -386, 2, -181, -172, 2, -193, -378, 2,
	-212, 165, -197, -198, -202, 383, 456, -245, -205, -206,
	-238, -172, 454, -310, 2, -95, 2, -310, 165, 2,
	-95, 165, 2, -310, 165, 2, -95, 165, 2, 2,
	2, 389, 2, 80, 165, -172, 368, 95, 2, 306,
	-444, 322, 393, 417, 2, 2, 2, 2, 2, 2,
	2, 368, 331, -455, 295, -186, 2, -172, 147, -383,
	165, 2, -383, 165, 2, -200, -202, -200, 179, 196,
	-181, 165, 2, 372, 370, 372, 370, 150, 2, 195,
	2, 195, 2, -344, 2, -345, -197, 2, 2, 2,
	2, 2, 165, -172, 368, 95, 2, 211, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -247, 165, 2,
	-197, -247, 165, 2, -247, 165, 2, -213, 165, 2,
	-212, -181, 165, 2, -384, 165, 2, -383, -384, 165,
	2, -352, 2, -351, -380, 413, -79, 452, 339, 452,
	-383, -197, -197, -310, -95, 150, -310, -95, 147, 2,
	96, 368, -134, 2, 147, 408, 2, 8, 2, -383,
	292, 139, 2, 343, 2, 62, -284, 429, 150, 2,
	-268, 2, 423, -431, 2, 257, 150, 2, 150, 2,
	150, 2, 150, 2, 150, 2, 289, 340, 202, 386,
	210, 124, 150, -268, 2, 150, 2, 150, 2, 5,
	2, 200, 286, 356, 2, -197, -448, 2, 368, 417,
	331, 2, 2, 73, 74, 150, 2, 150, 429, 2,
	-262, -343, -297, -298, -297, 383, -177, -461, -234, -235,
	-134, 343, 2, 2, -461, -261, -286, -287, 222, 134,
	253, -267, 26, 109, -267, -267, 49, 453, 453, 11,
	12, 64, 37, 443, 444, 445, 446, 145, 447, 448,
	441, 442, 440, 433, 434, 437, 206, 207, 79, 436,
	435, 72, 229, 321, 135, 136, 137, 138, 303, 176,
	177, 178, 14, 15, 16, 30, 262, 221, 430, 169,
	346, 438, 17, 18, 19, 197, 199, 247, 41, 172,
	-178, -214, -310, -310, -310, -310, -310, 268, 452, -259,
	-305, 450, -149, 452, 452, 452, 5, 452, 5, -374,
	8, -149, -310, -323, 453, -251, 452, -149, -323, -318,
	452, 319, 450, 452, -326, -310, 454, -414, 424, -359,
	452, 283, -358, 452, -358, -358, 418, -356, 452, 431,
	425, 452, -356, 452, 452, 147, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 418,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 456,
	-412, -231, 452, -255, -346, -310, 445, -255, -255, 257,
	-248, -310, 84, -271, 203, 240, 151, 218, 314, 184,
	-374, -80, -66, -77, -85, -95, -108, -138, -139, -307,
	457, -334, 431, -149, -340, -196, -149, -342, 452, -339,
	-334, 445, -197, 452, 150, 452, 454, 150, -238, -378,
	-181, -197, -207, -208, 108, -248, -383, -428, -238, -176,
	34, -320, -353, -354, -367, -355, -364, -360, -363, 299,
	300, 298, 302, 301, 45, 51, 50, 377, 238, 333,
	334, 349, 335, 336, 43, 409, 175, 254, 256, 187,
	4, 44, 414, -366, 194, 186, 192, 188, 348, 189,
	190, 191, 42, 294, 143, 144, 142, 112, 101, 100,
	250, 47, 46, 98, 379, 380, 381, 382, 204, 205,
	415, 359, 58, 59, -428, -238, 147, -377, -248, 34,
	-298, 2, -459, 456, 220, -216, 228, 244, 162, 258,
	427, 251, -382, 5, 4, -319, -331, 102, 224, -363,
	9, 444, -371, 8, 443, -376, -375, 86, 454, -378,
	-158, 304, -157, 23, 27, 113, 411, 125, -221, 181,
	274, 120, 352, 402, -435, -437, 324, 375, 376, 75,
	251, 304, 120, -264, -266, 34, 94, 242, 270, 52,
	173, 233, 234, 354, 419, 120, 304, 423, 120, -437,
	304, -437, -160, 352, 402, -435, -437, 324, 304, -159,
	-221, 120, 457, -383, -245, 456, 456, -378, 445, 120,
	120, 120, 120, 2, 2, 245, 2, 2, 2, 152,
	-447, -445, 2, 2, 2, -197, 165, -199, 165, 2,
	-202, 417, -233, 257, -430, -246, 368, -197, -168, -409,
	423, 245, 245, 34, 452, 2, -183, 165, 2, -173,
	-172, 179, -409, 245, -344, -210, -197, -210, 342, -190,
	34, -307, 120, 2, 2, 2, -172, -161, 456, 54,
	310, 120, -161, 120, -161, 120, -161, 456, 120, -161,
	120, 456, 120, 120, 453, 456, -352, -383, -144, 423,
	150, 83, 452, 452, -384, -430, -181, 2, -197, 2,
	368, 204, -383, -383, -377, 26, 344, 2, 289, 340,
	74, -197, 68, -432, 147, -429, 315, -428, -197, 96,
	-197, 96, -197, 96, -197, -197, 2, 2, 2, 147,
	2, 386, 2, 386, 2, -172, -172, -172, 220, -197,
	147, 368, 179, 368, -161, 456, -177, -461, -261, -377,
	-461, -287, -286, -289, -310, 26, -292, 141, 241, -310,
	-312, -148, -148, -148, -236, -337, -310, 285, 179, -368,
	-353, -353, -195, -378, 379, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
	221, 169, 346, 41, 172, -310, 383, -310, -310, -310,
	-310, 237, 245, 248, 391, 132, 400, 109, 251, -465,
	364, 36, -316, -149, -252, 452, -330, 31, 351, 26,
	-323, 452, 2, -305, -310, -306, -249, -248, -248, 453,
	416, 26, 109, 445, 2, 8, -279, -281, 428, 236,
	99, 164, 235, -280, 329, 453, 456, 34, 453, -310,
	-249, -322, -318, -248, -329, -328, 420, -378, 445, -415,
	140, 157, 8, -372, 8, -372, 379, 379, 8, -372,
	-372, 452, 453, 2, 453, 2, 453, 2, 453, 2,
	453, 2, -310, -310, -310, -310, -310, -310, -310, -248,
	-273, 2, -369, -248, 4, 428, 236, 99, 164, 235,
	329, -273, 2, -274, 2, -310, -248, -275, -311, -312,
	443, 444, 438, -323, -276, 2, -310, -249, -310, 48,
	215, 385, -277, -310, 150, -248, -248, 2, -248, 2,
	-413, 34, -248, -241, 456, 150, 34, 4, -241, -241,
	452, 453, 456, -272, 161, 232, 227, -272, -339, -271,
	203, -269, 266, -269, -269, -426, 452, 451, 455, 455,
	455, 455, 455, -334, -182, 450, 458, -378, -333, -332,
	34, -190, 264, -334, -334, 454, 453, -333, -197, 452,
	-248, -378, 357, 453, 454, 197, 197, 197, 320, 453,
	-144, 383, 423, -79, 259, 453, 456, -240, 33, 450,
	-281, 452, -370, 418, 452, 452, 150, -239, -439, 453,
	387, -299, -215, 293, 350, 305, 337, 366, 9, 8,
	8, 456, -378, 456, -440, 77, 383, 66, -301, 165,
	66, -392, -184, 77, -393, -172, 61, 399, 285, 149,
	-440, 77, -440, 77, 77, 342, 355, 49, -343, 37,
	37, -95, 216, 150, 429, 368, 179, 383, -343, -266,
	-353, 94, 233, 234, 49, -373, -371, 444, -373, 49,
	-373, -373, -373, 423, -199, -343, 383, 275, -383, 383,
	456, 37, 37, -95, 216, 150, 383, -212, -182, -349,
	-348, -205, -172, 454, -310, -95, -310, -95, 120, 2,
	-455, 211, 452, -231, 245, -265, -264, 245, -201, 2,
	-197, 150, -238, -350, 195, 456, -246, 275, 120, 120,
	452, 117, 291, 2, 257, 245, -183, 165, -164, 371,
	120, -304, -303, 421, -293, -95, 452, 102, 34, -293,
	-256, -257, -347, -258, -184, 452, -190, -172, 2, -197,
	-247, -247, -247, -212, -213, -181, -383, -384, -384, -79,
	-351, 453, 453, -143, 261, -142, -172, 5, -146, 408,
	-218, -302, -301, -394, -395, -392, 221, 179, 399, 196,
	133, -232, -185, -184, -144, -348, -144, -349, -349, -197,
	147, 2, 2, -268, -238, -238, -181, -181, -181, 339,
	147, 147, 454, -268, 291, 96, 368, 274, 179, -197,
	-212, -197, -343, -461, -290, -371, 452, -291, 319, 320,
	456, -156, 35, 107, 208, -197, 429, 118, -310, -310,
	383, -465, 364, -316, 118, -310, 237, 248, 391, 132,
	400, 109, 251, 150, 452, -311, -311, 453, -250, -310,
	-310, 451, 460, 453, -462, 456, -234, -310, -248, -248,
	453, 453, 383, 383, 383, 383, 452, 454, -248, -238,
	451, 451, 456, 453, -327, -328, 114, -310, 454, -420,
	267, 452, 452, 453, 453, 456, 453, 429, 429, 453,
	453, 453, -310, 34, 456, 456, 456, 453, 456, 456,
	456, 453, 453, 150, 453, 453, -282, 278, 453, 11,
	12, 443, 444, 445, 446, 145, 447, 448, 441, 442,
	440, 433, 434, 435, 72, 229, 321, 14, 15, 16,
	197, 172, -311, -311, -311, 453, -314, -315, 150, 147,
	34, -277, -277, -277, 453, 150, -248, 453, 453, 452,
	453, -304, -346, -243, 2, -339, -192, -378, -304, -304,
	-248, -310, 203, 203, -270, 408, 257, -272, -339, -332,
	453, -427, -374, -334, -333, -374, -309, -308, 148, 35,
	107, 243, 168, -190, -231, -333, -333, -378, -334, 453,
	-244, -341, -408, -462, 454, -378, -135, 5, 248, -135,
	-135, 150, -238, 24, 279, -353, 450, 451, 8, 8,
	452, -372, -372, -238, 150, -375, -298, 397, 70, 293,
	379, -375, -157, 304, -184, -184, -197, 245, -301, 165,
	-163, 245, -353, -191, -172, 452, 452, 208, 208, -184,
	-191, 165, -184, 165, -191, -191, -434, 293, 252, -310,
	223, 291, 246, -158, 304, -95, -95, -95, 452, -439,
	408, 108, -197, -212, -201, 304, -207, -373, -373, -264,
	304, -199, -383, 423, -181, -159, -95, -95, -95, 452,
	-182, -160, 304, -141, 174, 445, -172, 417, -172, -217,
	-218, -172, -449, 425, 423, 120, 120, -231, -211, -197,
	450, -144, -383, -197, -383, -383, -383, 2, 452, 2,
	-197, 120, 257, 245, -165, 115, -460, 435, -181, -235,
	-234, -310, -263, -296, 312, 257, -232, 413, -190, -263,
	-242, 456, 150, 435, 454, -232, 2, -161, -161, -161,
	-161, -161, -79, -144, 456, 452, 435, 435, 452, -383,
	-383, 453, 456, -197, -183, 179, 179, -189, -173, 453,
	456, 454, -144, -44, 423, 368, 339, 339, -172, -193,
	-181, -197, -194, -212, -291, -310, -337, -197, 457, -310,
	-310, 118, 118, -310, -311, -311, -310, 118, 150, 452,
	-310, -320, 30, 30, 453, 456, -306, -310, 453, 416,
	-462, -462, -462, 5, 236, 164, 235, -280, 235, -280,
	-280, 8, 445, -378, 453, -318, 116, -310, 378, -378,
	445, -421, -187, 452, -172, 421, -234, -372, -356, -356,
	453, -368, -353, -310, -310, -310, -310, -310, -310, -314,
	-310, -368, -353, -311, -311, -311, -311, -311, -311, -311,
	-311, -311, -311, -311, -311, -311, -311, -311, -311, -311,
	-311, -311, 109, 245, 251, -311, -315, -314, -310, -310,
	-353, 453, 453, 453, -248, -79, -260, 157, -349, 456,
	-260, -260, 453, -339, -339, 452, -310, 203, 451, 453,
	456, -333, 451, 456, 459, 435, -231, 454, -332, 453,
	456, -295, 34, 453, -378, -95, 260, 5, 8, 450,
	451, 453, -372, 453, 453, -238, -310, 383, 383, 120,
	245, 410, -396, -393, -310, -237, -338, -310, 452, 452,
	-155, 113, 342, -441, 2, 120, -161, 120, -161, 427,
	452, 452, 383, 423, -248, -310, -145, 102, -377, -437,
	-437, 383, 383, 275, 423, -248, 383, -144, 150, 2,
	2, 2, 453, 34, 255, -172, -197, -199, 34, -62,
	423, -348, -374, -168, 2, -285, 408, -182, -197, 120,
	-166, 214, -460, -381, -409, -288, -286, -263, -255, 246,
	76, 453, -304, -257, -243, -310, 2, 453, -142, -143,
	-383, -383, -383, -144, -146, -146, -302, 2, 452, -183,
	-173, 452, -146, -185, 2, 261, -197, -268, -223, -222,
	274, 251, -223, 258, 453, -156, -182, -310, -310, 118,
	30, 30, -310, -310, -320, 453, -310, -310, -248, 451,
	5, -310, 453, 453, 453, 453, -310, 454, -422, -172,
	-310, 453, 453, 453, 453, 456, 456, 453, 453, 453,
	453, -315, 150, 109, 251, 452, 453, 453, -317, 160,
	49, -339, -317, -317, -270, -238, -339, -307, -374, -308,
	-182, 450, -378, -341, 452, 454, 451, 2, 450, 453,
	-184, -184, -301, 120, -397, 77, -398, 64, 133, 83,
	245, 248, 399, 285, 61, 102, 297, 34, 453, 453,
	456, -156, -237, -238, 245, 361, 102, 245, 102, 95,
	394, -184, -191, -238, -238, -197, 126, 453, 456, 435,
	-201, -199, -383, 126, 453, -182, -384, -219, 182, -95,
	2, 452, -231, -265, -95, 261, 451, 452, -172, 257,
	452, -182, -167, 213, -460, -381, -164, -263, -294, 452,
	257, -95, -235, 435, 453, 453, 95, 95, -237, 452,
	452, -238, 95, -45, -46, 179, 77, 277, -194, 368,
	179, -156, -310, -310, -310, 453, -462, -378, 445, -416,
	274, 453, -310, -310, -311, 150, 452, -320, -417, 422,
	-310, -248, -417, -417, 453, -334, -374, 2, 450, 2,
	-301, -191, -195, -188, -172, 133, 165, 248, 208, 452,
	-311, -197, 452, 2, -451, 104, 183, -300, -452, 82,
	362, -338, 453, 453, 248, 248, -310, -353, -161, -161,
	453, 453, -310, 383, -377, 81, -375, -310, 383, -220,
	-221, 172, -450, 423, -217, -449, -63, -64, 384, -348,
	-237, -197, -237, 257, -460, -381, -165, 110, -238, 77,
	-288, -316, -144, 452, 452, 453, -237, -237, 453, 452,
	456, 26, 452, 26, 452, -197, -212, 453, -235, 49,
	453, 453, -311, -320, 453, -418, -419, -187, -333, 451,
	2, -398, -188, 245, -310, -174, 452, -310, 183, 105,
	170, -219, 452, 297, -180, 64, 452, 452, 452, 435,
	150, 452, -449, 272, 95, 242, 453, 34, -64, 9,
	453, -285, 453, -197, -381, -166, 403, 246, 453, -191,
	-263, -384, -384, -300, 453, 453, -384, -46, -238, -238,
	-423, 291, 320, 159, -248, 453, 456, 34, 120, 453,
	-399, 230, -172, 453, 105, 170, -220, -238, -197, -438,
	408, -195, -225, -224, -222, -227, -226, -222, -248, -375,
	81, 272, -248, -197, 95, -219, -95, -300, 452, -300,
	452, -167, 342, -303, 453, 453, -219, -300, 453, 453,
	453, 453, -424, -425, 41, 396, 86, -310, -424, -424,
	-419, -421, 133, -400, -403, -402, 257, 347, 151, 273,
	453, 361, 419, -451, 453, -231, -310, 453, 456, 413,
	453, 456, 413, 453, 150, 453, 452, -220, -450, -219,
	-237, -219, -237, -256, -144, -144, -220, -219, -144, -425,
	282, 146, 319, 282, 146, -188, -402, 257, -403, 257,
	403, 106, -399, -224, 172, -226, 150, 272, -238, -449,
	-220, 453, -220, 453, -304, -220, 30, -401, 242, 310,
	54, 342, -401, -400, 452, 452, 453, -456, 421, -300,
	-456, -300, -425, 22, 248, 102, -451, -248, -248, -162,
	54, 310, 2, -219, -219, 453, 453, -220, -220, -220,
	383, -456, -456, 452, -248, 453, -220,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 354, 355,
	357, 358, 359, 361, 362, 364, 366, 368, 370, 371,
	373, 375, 376, 377, 378, 379, 381, 383, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 441,
	443, 0, 878, 880, 882, 884, 27, 28, 0, 0,
	179, 181, 183, 0, 208, 210, 212, 213, 215, -2,
	0, 308, 309, 311, 313, -2, -2, 0, 0, 430,
	432, 0, 0, 452, 453, 0, 968, -2, 446, 448,
	450, 513, 515, 517, 519, 521, 523, 525, 526, 528,
	530, 532, 534, 536, 538, 540, 542, 544, 546, 548,
	550, 552, 554, 556, 558, 560, -2, -2, -2, 0,
	-2, -2, -2, 896, 31, 33, 35, 37, 39, 41,
	60, 264, 265, 267, 269, 271, 274, 275, 277, 1007,
	315, 317, 319, 321, 323, 0, -2, 1021, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 50, 67, 68,
	69, 70, 71, 72, 73, 74, 53, 55, 56, 62,
	63, 65, 0, 0, 983, 985, 987, 989, -2, 0,
	0, 7, 9, 11, 13, 15, 17, 19, 21, 23,
	356, 360, 363, 365, 367, 369, 372, 374, 380, 382,
	384, 773, 1613, 1627, 1628, 1629, 1632, 1633, 1634, 1635,
	1636, 1637, 1968, 2048, 2049, 1656, 1657, 1658, 1659, 1660,
	1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690,
	1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	0, 408, 406, 1607, 409, 1803, 411, 413, 302, 303,
	304, 305, 306, 307, 0, 162, 0, 423, 417, 422,
	424, 426, 427, 428, 429, 403, 401, 0, 423, 1659,
	421, 876, 877, 871, 872, 1836, 906, 442, -2, -2,
	-2, 1937, -2, 474, -2, 481, 1940, 1838, 484, 0,
	486, -2, 489, 879, 881, 883, 29, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, -2, -2,
	-2, -2, 0, 0, 1694, 1583, 1629, 1586, 1581, 180,
	182, 184, 185, 0, 0, 0, 0, 0, 0, 209,
	211, 214, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 241, 0, 0, 0, 0, 0, 0, 0,
	0, 829, 0, 0, 0, 0, 0, 0, 0, 0,
	696, 697, 0, 0, 702, 824, 825, 846, 0, 0,
	0, 0, 310, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	242, 348, 349, 0, 1008, 0, 0, 0, 0, 160,
	152, 0, 0, 685, 431, 433, 0, 151, 0, 0,
	875, 0, 0, 447, 449, 451, 514, 516, 518, 520,
	522, 524, 527, 529, 531, 533, 535, 537, 539, 541,
	543, 545, 547, 549, 551, 553, 555, 557, 559, 561,
	562, 0, 0, 0, 0, -2, -2, 0, -2, -2,
	0, 0, 0, 0, 0, 0, 0, 0, -2, -2,
	-2, 0, 0, 0, -2, -2, 0, 0, 0, 565,
	567, 568, 569, 0, 611, 614, 622, 667, 668, 0,
	815, 1009, 908, 886, 899, 908, 888, 889, 890, 891,
	892, 897, 898, 901, 0, 893, 894, 895, 32, 34,
	36, 38, 40, 42, 266, 268, 270, 272, 276, 278,
	-2, 981, 982, 316, 318, 320, 322, 324, 434, 0,
	436, 0, 566, 972, 0, -2, 0, 1013, 1013, 1013,
	0, 0, 982, 980, 0, 439, 440, 493, 494, 1246,
	0, 0, 0, 0, 0, 1481, 1330, 0, 495, -2,
	1361, 1363, 1916, 1937, 1480, 1365, 1366, 1367, 1368, 1369,
	0, 0, 1372, 0, 1374, 1375, 1376, 1377, 0, 1379,
	0, 1383, 1384, 1385, 0, 1921, 1560, 1625, -2, 1151,
	1152, 1153, 1154, 1155, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1621, 0, 1452, 1399, -2, 1646, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1703, -2, -2, -2, -2, -2, -2, -2, 1207, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1951, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 0, 1905,
	1922, 1923, 1928, 1930, 1924, 1913, 1422, -2, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1208, -2, 1917, 1918, 1933, 1934, 1939,
	1944, 1945, 1920, 1929, -2, -2, 999, 1811, 1002, 773,
	1000, 984, 986, 0, 988, 0, 0, 0, 993, 1016,
	1014, 0, 1052, 997, 998, 1008, 1070, 1093, 0, 1075,
	0, 1093, 1119, 0, 1080, 1831, 1400, 1401, 0, 1629,
	1626, -2, 0, 0, 0, 0, 0, 0, 205, 404,
	0, 410, 412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 905, 444, 445, 0, 469, 0, 473, 1912,
	-2, -2, 477, 909, 913, 914, 915, 916, 0, 0,
	0, 0, 0, 483, 0, 0, 470, 471, 487, 490,
	0, 51, 0, 1922, 1119, 52, 0, 1597, 1651, 1652,
	1653, 1654, 1655, 1951, 1967, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 54, 0, 1922, 57, 0, 1922,
	0, -2, 61, 0, 1922, 163, 164, 1642, 1643, 1647,
	1648, 1649, 1650, 64, 0, 1603, 66, 0, 1600, 75,
	0, 1922, 0, 1580, -2, 0, 0, 677, 1577, 1582,
	678, 1587, 0, 186, 187, 188, 189, 190, 1922, 192,
	193, 0, 195, 196, 1922, 198, 199, 0, 201, 217,
	218, 0, 220, 0, 1922, 0, 0, 0, 226, -2,
	243, 0, 240, 0, 230, 231, 233, 234, 235, 236,
	237, 0, 0, 0, 830, 282, 280, 1608, 0, -2,
	1922, 818, 821, 1922, 823, 835, 1611, 0, -2, 0,
	1006, 1922, 923, 698, 699, 700, 701, 0, 301, 0,
	936, 0, 938, 0, 958, 1125, 1070, 244, 245, 246,
	247, 248, 1922, 0, 0, 0, 253, 0, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 144, 1922, 327,
	346, 144, 1922, 330, 144, 1922, 333, 144, 1922, 336,
	1575, 144, 1922, 339, 340, 1922, 342, 165, 343, 1922,
	345, 0, -2, 397, 1615, -2, 351, 0, -2, 0,
	177, 0, 0, 683, 684, 0, 873, 874, 0, 454,
	0, 0, 563, 564, 0, 0, 574, 575, 576, 577,
	1809, 1719, 580, 0, 583, -2, 0, 0, 0, 587,
	588, 589, 0, 682, 591, 0, 0, 593, 0, 597,
	0, 600, 0, 602, 0, 604, -2, -2, -2, 0,
	0, 0, 0, 630, 631, 0, 636, 0, 639, 640,
	641, 0, 643, 644, 645, 646, 0, 648, 649, -2,
	-2, 653, 655, 0, 662, 0, 666, 0, 570, 571,
	144, 1123, 885, -2, 887, 0, 903, 975, -2, 0,
	435, 0, 438, 979, 973, 978, 1030, 1031, 0, 0,
	0, 0, 1011, 1012, 0, 0, 0, 970, 971, 0,
	0, 0, 0, 1486, 1487, 1488, 1489, 1490, 1491, 1494,
	1495, 1492, 1493, 1496, 1497, 0, 0, 0, 0, 0,
	1498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 1500, 1501, 0, 0, 1503, 0, 1505,
	0, 0, 0, 0, 0, 0, 1309, 1311, 1568, 0,
	0, 1502, 1251, 1252, 1253, 1288, 1289, 0, 0, 1362,
	1565, 1564, 1364, 0, 1517, 0, 1371, 0, 1243, 1378,
	1594, -2, 0, 1481, 1512, 0, 0, 1386, 1387, 1388,
	0, 0, 1517, 0, 0, 1559, 0, 1454, 0, 1187,
	0, 1188, 1189, 0, 1190, 1191, 1204, 1217, 0, 0,
	0, 0, 1221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1209,
	0, 0, 0, 1540, -2, 0, 0, 0, 0, 0,
	1001, 0, 0, 1056, 1569, 1573, 1574, 1056, 1056, 0,
	0, 1518, 1116, 1116, 0, 0, 1112, 1112, 1112, 1110,
	1087, 0, 385, 387, 389, 391, 392, 393, 395, 1093,
	0, 1103, 0, 1093, 1093, 0, -2, 1075, 0, 0,
	1103, 1120, 1121, 0, 0, 0, 0, 0, 0, 1630,
	0, 0, 0, 1617, 0, 0, 177, 0, 415, 425,
	1008, 0, 1520, 1142, 1136, 1145, 1146, 1147, 1148, 1194,
	1195, 1196, 1197, 1198, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, -2, 1205, 1207, 1228, 1176, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1200, 0, 1175, 1175,
	1175, 1192, 1193, 1216, 1227, 1219, 1227, 1223, 1143, 1144,
	1210, 1211, 1212, 1213, 0, 419, 0, 0, 0, 0,
	-2, 479, 0, 911, 0, 917, 504, 505, 506, 919,
	920, 0, 482, 507, 508, 509, 510, 511, 512, 0,
	790, 0, 792, 1589, 0, 480, 497, 485, 0, 491,
	76, 868, 110, 0, 868, 868, 0, 0, 131, 0,
	0, 0, 0, 0, 0, 98, 106, 86, 87, 0,
	0, 0, 0, 58, 798, 0, 801, 0, 0, 0,
	0, 0, 0, 0, 813, 0, 0, 0, 0, 97,
	0, 92, 78, 0, 0, 0, 100, 108, 0, 135,
	137, 0, 0, 1106, 676, 0, 0, 1630, 1585, 0,
	0, 0, 0, 219, 221, 0, 223, 224, 225, 0,
	829, 0, 232, 229, 273, 773, 1922, 797, 1922, 795,
	1612, 0, 0, 0, 299, 294, 0, 296, 816, 0,
	1005, 0, 0, 0, 0, 836, 0, 1922, 841, 1599,
	1638, 1639, 925, 0, 1131, 0, 939, 0, 0, 1126,
	0, 1128, 0, 250, 251, 252, 0, 325, 0, 142,
	143, 0, 328, 0, 331, 0, 334, 0, 0, 337,
	0, 0, 0, 0, 1008, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 177, 177, 1106, 456, 1106, 458,
	0, 0, 578, 579, 581, 582, 584, 585, -2, -2,
	663, 633, 632, 590, 0, 670, 1827, 680, 592, 1694,
	595, 1694, 598, 1694, 601, 603, 606, 625, 613, 0,
	617, 0, 619, 0, 621, 633, 634, 637, 642, 647,
	0, 0, 0, 0, 814, 0, 902, 976, 978, 437,
	974, 1028, 1029, 1034, 1038, 1039, 1042, 1045, 1046, 1036,
	1246, 994, 995, 996, 1022, 1023, 855, 0, 2048, 1247,
	1137, 1248, 1249, 1596, 0, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, -2, -2, -2, -2, -2,
	-2, -2, -2, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, -2, -2, -2, 1286, 1287, -2,
	1504, 1506, 0, 1568, 0, -2, 0, -2, -2, -2,
	-2, 1306, 0, 1308, 1313, 1315, 1317, 0, 0, 0,
	0, 1567, 1327, 1551, 1552, 0, 0, 1483, 1484, 1485,
	1312, 0, 1331, 1566, 1563, 0, 0, 1516, 1019, 1390,
	0, 0, 0, 0, 1397, 0, 1595, 1242, 1229, 1230,
	1231, 1232, 1233, 1234, 1244, 1382, 1514, 0, 1513, 0,
	0, 0, 1524, 0, 1558, 1554, 0, 1618, 1624, 1462,
	0, 0, 0, 0, 1592, 0, 0, 0, 0, 0,
	0, 0, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 1527, -2, -2, -2, -2, -2, -2,
	-2, 0, 1436, 0, 1438, 1518, 1537, 0, 0, 1332,
	0, 0, 0, 1481, 0, 1441, 1518, 1545, 0, 0,
	0, 0, 0, 1518, 0, 1550, 0, 1448, 0, 1450,
	1003, 0, 0, 1131, 0, 0, 0, 1572, 1131, 1131,
	0, 1051, 0, 0, 1113, 1114, 1115, 0, 0, 1116,
	0, 1107, 1111, 1108, 1109, 0, 0, 1093, 386, 388,
	390, 394, 396, 1103, 1067, 0, 0, 1598, 1073, 1102,
	0, 773, 1092, 1103, 1103, 0, -2, 1077, 0, 0,
	1019, -2, 178, 772, 0, 0, 0, 0, 405, 407,
	0, 0, 0, 399, 0, 402, 0, 1132, 1135, 0,
	1149, 0, 0, -2, 0, 0, 0, 0, 0, 472,
	0, 910, 918, 0, 501, 0, 503, 0, 791, 1591,
	1590, 0, 492, 0, 0, 0, 0, 867, 114, 1922,
	0, 146, 0, 0, 757, 1604, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 799,
	800, 802, 808, 810, 0, 804, 1593, 0, 805, 0,
	807, 809, 811, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 1579, 168,
	1105, 1578, 1588, 0, 191, 194, 197, 200, 0, 227,
	0, 0, 705, 688, 0, 793, 796, 0, 773, 828,
	1610, 0, 281, 177, 0, 0, 295, 0, 0, 0,
	0, 0, 0, 834, 0, 0, 0, 1922, 927, 933,
	0, 1021, 1130, 0, 956, 941, 0, 0, 0, 956,
	960, 961, 963, 964, 0, 0, 1127, 0, 254, 347,
	144, 144, 144, 1576, 144, 144, 166, 341, 344, 350,
	398, 1008, 177, 175, 1790, 173, 170, 172, 0, 0,
	0, 706, 708, 709, 710, 711, 0, 1639, 0, 1748,
	1639, 0, 944, 946, 149, 177, 293, 455, 460, 572,
	0, 608, 627, 586, 681, 679, 594, 596, 599, 616,
	0, 0, 0, 629, 0, 0, 0, 0, 0, 664,
	665, 669, 1124, 977, 0, 1040, 0, 1037, 1043, 1044,
	0, 1025, 853, 854, 0, 0, 0, 0, -2, -2,
	0, 0, 0, 1328, 0, -2, 1307, 1310, 1314, 1316,
	1318, 0, 0, 0, 0, 0, 0, 1507, 0, 1509,
	1329, 1561, 1564, 1479, 0, 0, 1018, 1019, 1019, 1019,
	1396, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	1522, 1523, 0, 1389, 0, 1555, 0, 0, 0, 1398,
	0, 0, 0, 1199, 1173, 0, 1227, 1225, 1226, 1220,
	1227, 1224, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 1421, 1433, 0, 1435, 1437, 0, 0, 1439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1335, 1336, 1337, 1440, 1543, 1544, 0, 0,
	0, 0, 0, 0, 1446, 0, 1549, 1447, 1449, 1008,
	1053, 1048, 1570, 1106, 1055, 1057, 1571, 1601, 1048, 1048,
	0, 1519, 0, 0, 1097, 0, 0, 0, 1099, 0,
	1088, 0, 1090, 1103, 1072, 0, 0, 1065, 0, 1061,
	1062, 1063, 1064, 773, 1101, 1074, 1078, 1618, 0, 1122,
	0, 1082, 1085, 0, 0, 1631, 202, 206, 207, 203,
	204, 0, 414, 0, 0, 1521, 0, 1138, 0, 0,
	0, 0, 0, 418, 0, 468, -2, 499, 500, 502,
	0, 498, 111, 868, 0, 0, 859, 0, 116, 1922,
	125, 0, 734, 0, 1602, 0, 0, 0, 0, 870,
	0, 1922, 144, 1922, 144, 127, 130, 0, 134, 132,
	0, 0, 725, 77, 868, 80, 84, 90, 0, 0,
	0, 96, 0, 0, 861, 0, 803, 806, 812, 59,
	0, 863, 857, 0, 856, 136, 82, 85, 91, 0,
	865, 79, 0, 177, 0, 1584, 0, 0, 0, 0,
	704, -2, 0, 0, 0, 0, 0, 0, 287, 283,
	0, 292, 298, 297, 819, -2, 822, 831, 0, 833,
	845, 0, 0, 0, 929, 933, 0, 932, 1006, 1033,
	1020, 1129, 934, 956, 0, 0, 0, 943, 940, 937,
	1131, 0, 0, 0, 0, 0, 249, 326, 329, 332,
	335, 338, 352, 153, 0, 0, 0, 0, 0, 177,
	0, 0, 0, 0, 0, 1639, 1639, 0, 1606, 0,
	0, 0, 150, 457, 0, 0, 618, 620, 633, 656,
	657, 720, 0, 720, 0, 0, 1024, 855, 0, 1250,
	1291, 0, 0, -2, 0, 0, 1295, 0, 0, 0,
	-2, 0, 0, 0, 1508, 1510, 0, 1563, 1391, 0,
	0, 0, 0, 1373, 1235, 1236, 1237, 1238, 1239, 1240,
	1241, 0, 1380, 1381, 1482, 1525, 1553, 1557, 0, 1619,
	1623, 1460, 1461, 1465, 1609, 0, 0, 0, 1218, 1222,
	1402, 0, 0, 0, 0, 0, 0, 0, 1526, 1536,
	1538, 1333, 1334, 1338, 1339, 1340, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, -2, -2, -2, 1351, 1352, 1353, -2,
	-2, -2, 0, 0, 0, 1539, 1541, 1542, 1546, 1547,
	0, 1443, 1444, 1445, 1548, 0, 1050, 0, 1054, 0,
	1050, 1050, 1015, 1095, 0, 0, 1118, 0, 1070, 1089,
	0, 1079, 1068, 0, 1069, 0, 1100, 0, 1076, 1081,
	0, 1084, 0, 1391, -2, 161, 416, 400, 0, 0,
	1140, 1150, 0, 1202, 1206, 420, 1104, 0, 0, 0,
	0, 145, 732, 756, 0, 0, 848, 855, 0, 0,
	118, 0, 0, 0, 126, 0, 123, 0, 129, 133,
	0, 0, 0, 0, 0, 93, 94, 95, 0, 99,
	101, 0, 0, 0, 0, 0, 0, 147, 0, 222,
	827, 228, 714, 0, 689, 0, 773, 797, 0, 279,
	0, 286, 0, 817, 832, 0, 0, 0, 0, 0,
	931, 933, 0, 924, 925, 956, 1032, 935, 954, -2,
	953, 0, 1021, 962, 959, 965, 966, 0, 174, 0,
	169, 171, 0, 156, 0, 0, 707, 712, 0, 0,
	0, 0, 0, 945, 947, 0, 573, 628, 658, 719,
	0, 0, 660, 1035, 1041, 1026, 855, 1293, 1297, 0,
	0, 0, 1299, -2, 0, 1321, -2, -2, 1511, 1562,
	1370, 1019, 1392, 1394, 1395, 1245, 1556, 0, 1467, 1464,
	0, 1451, 1174, 1412, 1413, 0, 0, 1416, 1418, 1419,
	1420, 1535, 0, 0, 0, 0, 1442, 1004, 1456, 0,
	0, 1058, 1456, 1456, 1096, 0, 1098, 1093, 1091, 1066,
	1059, 0, 1619, 1083, 0, 0, 1133, 1139, 0, 1201,
	112, 113, 115, 0, 733, 0, 736, 0, 0, 0,
	0, 743, 744, 0, 0, 0, 0, 0, 762, 771,
	0, 850, 0, 0, 0, 120, 139, 0, 0, 869,
	0, 144, 144, 0, 0, 860, 0, 0, 0, 0,
	862, 864, 858, 0, 0, 866, 167, 722, 0, 693,
	690, 705, 688, 794, 826, 0, 284, 0, 844, 0,
	0, 0, 921, 933, 0, 926, 927, 300, 0, 0,
	0, 942, 1033, 0, 176, 177, 0, 0, 0, 0,
	0, 0, 0, 459, 461, 0, 0, 467, 718, 0,
	0, 1027, 1301, -2, -2, 1322, 0, 1620, 1622, 1021,
	0, 1453, 0, 0, -2, 0, 0, 0, 990, 0,
	1049, 1047, 991, 992, 1117, 1103, 0, 1086, 0, 1141,
	117, 0, 737, 738, 1605, 740, 0, 742, 745, 0,
	747, 1641, 0, 751, 758, 763, 0, 714, 0, 768,
	769, 849, 760, 0, 119, 121, 138, 852, 122, 128,
	0, 0, 81, 0, 0, 1688, 103, 83, 0, 688,
	721, 0, 691, 0, 0, 0, 285, 288, 0, 291,
	0, 845, 0, 0, 0, 928, 929, 0, 0, 0,
	956, 967, 155, 0, 0, 771, 0, 0, 755, 0,
	0, 463, 0, 465, 0, 659, 661, 1393, 1471, 0,
	1414, 1415, -2, 0, 1359, 1455, 1457, 0, 1071, 1060,
	1134, 735, 739, 0, 0, 777, 0, 0, 0, 766,
	767, 722, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 686, 0, 694, 0, 714, 0, 289, 290,
	771, 0, 771, 0, 930, 931, 0, 949, 950, 952,
	957, 0, 0, 714, 771, 754, 0, 462, 0, 0,
	0, 0, 0, 0, 1466, 1360, 0, 0, 0, 746,
	782, 0, 0, 0, 764, 765, 762, 0, 773, 124,
	0, 851, 0, 726, 0, 0, 729, 0, 0, 104,
	1688, 102, 0, 0, 695, 722, 693, 714, 0, 714,
	0, 922, 0, 951, 177, 177, 722, 714, 177, 464,
	466, 1463, 1468, 1472, -2, 1885, 1691, 0, 1469, 1470,
	1458, 1459, 0, 748, 778, 779, 0, 774, 775, 776,
	1640, 749, 750, 759, 770, 777, 140, 723, 0, 0,
	724, 0, 0, 107, 0, 109, 0, 688, 692, 722,
	0, 722, 0, 1131, 157, 158, 752, 722, 159, 0,
	1474, 1475, 1476, 1477, 1478, 741, 780, 0, 781, 0,
	0, 0, 782, 727, 0, 730, 0, 105, 0, 687,
	842, 771, 842, 771, 948, 753, 0, 783, 0, 786,
	787, 0, 784, 762, 0, 0, 717, 837, 0, 714,
	839, 714, 1473, 785, 788, 789, 761, 0, 0, 713,
	715, 716, 843, 722, 722, 722, 0, 842, 842, 728,
	0, 838, 840, 0, 0, 722, 731,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 441, 3, 447, 442, 3,
	452, 453, 445, 443, 456, 444, 454, 446, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 460, 3,
	433, 435, 434, 437, 457, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 450, 3, 451, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 458, 440, 459, 438,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 436, 57776, 439, 57777, 449, 57778, 455, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1053
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1058
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1074
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1145
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1146
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1157
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1172
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1176
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1180
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1191
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1203
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1222
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1254
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1258
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1262
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1268
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1272
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1278
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1287
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1298
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1302
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1308
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1318
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1328
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1339
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1346
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1358
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1365
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1373
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1382
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1387
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1393
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1401
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1410
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1422
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1430
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1441
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1445
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1449
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1459
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1464
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1479
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1485
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1496
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1501
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1506
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1511
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1516
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1521
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1526
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1531
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1536
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1540
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1543
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1552
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1564
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1574
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1581
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1584
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1609
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1614
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1621
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1629
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1644
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1662
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1673
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1677
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1687
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1717
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1720
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1743
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1747
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1750
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1754
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1791
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1800
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1806
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1811
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1816
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1821
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1825
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1841
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1844
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1852
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1860
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1874
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1884
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1888
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1892
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1898
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1908
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1912
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1916
		{
			sqlVAL.union.val = nil
		}
	case 178:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1922
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1935
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1936
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1937
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1938
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1948
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1956
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1961
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1971
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1988
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1990
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1994
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1997
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2016
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2026
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2033
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2037
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2041
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2045
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2066
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2071
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2084
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2086
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2087
		{
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2088
		{
			return helpWith(sqllex, "CREATE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplemented(sqllex, "create cast")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2095
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2096
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2097
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2098
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2099
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2101
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2102
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2103
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2104
		{
			return unimplemented(sqllex, "create operator")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2105
		{
			return unimplemented(sqllex, "create publication")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2106
		{
			return unimplemented(sqllex, "create rule")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2107
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			return unimplemented(sqllex, "create server")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2109
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2110
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2111
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2114
		{
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2115
		{
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2118
		{
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2119
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2122
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2123
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2126
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2128
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2129
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2130
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2131
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2132
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2133
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2134
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2135
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2136
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2137
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2138
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2139
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2140
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2141
		{
			return unimplemented(sqllex, "drop server")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2142
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2143
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2144
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2145
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2149
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2150
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2151
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2152
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2154
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2155
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2156
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2157
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2175
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2179
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2183
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2189
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2193
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2202
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2209
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2215
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2221
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2225
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2236
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2248
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2256
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2264
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2274
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2278
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2284
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2295
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2299
		{

			sqlVAL.union.val = nil
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2313
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2323
		{
			return helpWith(sqllex, "DELETE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2330
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2333
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2334
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2335
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2336
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2337
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2346
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2347
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2348
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2349
		{
			return helpWith(sqllex, "DROP")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2352
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2353
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2354
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2355
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2356
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2364
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2368
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2371
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2379
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2383
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2386
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2394
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2398
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2401
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2409
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2417
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2424
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2432
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2440
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2447
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2455
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2459
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2462
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2470
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2474
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2481
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2486
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2509
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2512
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2514
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2518
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2522
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2529
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2533
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2536
		{
			return helpWith(sqllex, "DELETE")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2538
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2539
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2540
		{
			return helpWith(sqllex, "INSERT")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2541
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2543
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2544
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2547
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2552
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2553
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2554
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2559
		{
			return helpWith(sqllex, "DELETE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2560
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2561
		{
			return helpWith(sqllex, "INSERT")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2567
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2568
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2576
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2586
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2594
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2602
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2606
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2610
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2620
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2627
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2635
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2639
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2643
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2657
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2661
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2665
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2668
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2688
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2692
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2696
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2699
		{
			return helpWith(sqllex, "GRANT")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2719
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2723
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2727
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2730
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2735
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2739
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2749
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2767
		{
			return helpWith(sqllex, "RESET")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2768
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2776
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2780
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2783
		{
			return helpWith(sqllex, "RESET")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2791
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2794
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2805
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2808
		{
			return helpWith(sqllex, "USE")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2812
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2813
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2814
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2815
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2819
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2820
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2821
		{
			return helpWith(sqllex, "USE")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2837
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2852
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2855
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2873
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2881
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2889
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2895
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2899
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2905
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2909
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2917
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2921
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2932
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2935
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2961
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2965
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2970
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2987
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2990
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2992
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2995
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2999
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3018
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3025
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3031
		{
			return unimplemented(sqllex, "set from current")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3040
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3045
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3052
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3056
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3062
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3073
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3104
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3108
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3112
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3116
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3120
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3126
		{
			sqlVAL.union.val = tree.Low
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3130
		{
			sqlVAL.union.val = tree.Normal
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3134
		{
			sqlVAL.union.val = tree.High
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3149
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3153
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3158
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3162
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3175
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3176
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3177
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3178
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3179
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3180
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3182
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3183
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3184
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3185
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3186
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3187
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3188
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3189
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3190
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3191
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3192
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3193
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3194
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3195
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3196
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3197
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3200
		{
			return helpWith(sqllex, "SHOW")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3208
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3209
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3220
		{
			sqlVAL.str = "client_encoding"
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3223
		{
			sqlVAL.str = "timezone"
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3224
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3238
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3242
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3246
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3257
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3265
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3273
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3280
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3288
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3295
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3305
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3309
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3325
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3328
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3336
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3339
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3352
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3360
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3368
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3371
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3373
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3377
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3381
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3386
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3401
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3404
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3406
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3409
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3417
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3420
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3422
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3425
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3429
		{
			sqlVAL.union.val = true
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3431
		{
			sqlVAL.union.val = true
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.union.val = false
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3441
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3444
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3447
		{
			sqlVAL.union.val = true
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3448
		{
			sqlVAL.union.val = false
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3457
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3460
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3462
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3465
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3467
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3471
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3474
		{
			sqlVAL.union.val = true
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3475
		{
			sqlVAL.union.val = false
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3483
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3486
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3488
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3491
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3499
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3509
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3519
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3522
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3525
		{
			sqlVAL.union.val = true
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = false
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3540
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3547
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3551
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3554
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3565
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3573
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3578
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3583
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3587
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3595
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3599
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3603
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3616
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3619
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3627
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3630
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3634
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3642
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3650
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3658
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3665
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3672
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3676
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3687
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3692
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3695
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3703
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3710
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3715
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3835
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3839
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3843
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3882
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3886
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3891
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3895
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3904
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3911
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3915
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3927
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3936
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3939
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3975
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3988
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4002
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4003
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4004
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4008
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4020
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4033
		{
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4034
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4035
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4049
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4050
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4051
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4052
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4053
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4054
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4055
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4056
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4061
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4067
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4077
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4083
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4086
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4090
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4099
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4106
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4111
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4116
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4122
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4129
		{
			sqlVAL.str = ""
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4136
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4149
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4156
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4162
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4182
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4186
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4192
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4206
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4227
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4231
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4235
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4239
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4243
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4247
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4251
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4269
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4273
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4277
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4281
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4285
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4289
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4293
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4307
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4311
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 752:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4318
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4328
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4340
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4350
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4362
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4367
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4373
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4390
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4400
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4412
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4413
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4414
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4415
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4416
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4417
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4434
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4438
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4448
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4468
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4472
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4476
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4480
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4489
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4493
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4501
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4505
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4511
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4517
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4525
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4529
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4533
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4537
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4541
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4547
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4551
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4557
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4576
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4581
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4585
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4592
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4593
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4596
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4597
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4599
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4600
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4601
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4604
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4606
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4608
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4610
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4611
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4613
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4614
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4616
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4618
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4626
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4629
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4644
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4648
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4652
		{
			sqlVAL.union.val = nil
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4669
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4674
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4675
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4683
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4691
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4692
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4695
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4696
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4702
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4704
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4706
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4708
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4710
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4712
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4728
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4742
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4757
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4771
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4785
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4788
		{
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4789
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4793
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqlVAL.union.val = false
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4814
		{
			sqlVAL.union.val = true
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4818
		{
			sqlVAL.union.val = false
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4824
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4837
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4848
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4849
		{
			sqlVAL.str = ""
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4853
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4857
		{
			sqlVAL.union.val = tree.Descending
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4861
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 856:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4867
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4874
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4878
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4884
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4890
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4898
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4904
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4912
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4918
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4926
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4930
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4935
		{
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4936
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4939
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4940
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4948
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4951
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4961
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4970
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4973
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4981
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4984
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4988
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4989
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4990
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5006
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5009
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5011
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5014
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5024
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5027
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5029
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5032
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5036
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5041
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5042
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5043
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5051
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5058
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5061
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5062
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5066
		{
			sqlVAL.str = ""
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5070
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5078
		{
			sqlVAL.str = ""
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5084
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5088
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5094
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5104
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5108
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5121
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5123
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5127
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5132
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5136
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5140
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5146
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5152
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5158
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5162
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 921:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5172
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5182
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5192
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5196
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5200
		{
			sqlVAL.str = ""
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5206
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5210
		{
			sqlVAL.str = ""
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5216
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5220
		{
			sqlVAL.str = ""
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5226
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5230
		{
			sqlVAL.str = ""
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5235
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5236
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5248
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5262
		{
			return helpWith(sqllex, "INSERT")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5273
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5280
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5284
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5293
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5300
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5304
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5308
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5314
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5338
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 948:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5342
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5346
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5352
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5355
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5356
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5358
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5364
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5369
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5373
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 957:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5390
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5401
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5405
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 960:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5406
		{
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5410
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5427
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5430
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5477
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5483
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5487
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5502
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5506
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5510
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5514
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5518
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5527
		{
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5528
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5533
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5568
		{
			return helpWith(sqllex, "SELECT")
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5569
		{
			return helpWith(sqllex, "VALUES")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5570
		{
			return helpWith(sqllex, "TABLE")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5592
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5605
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5619
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5631
		{
			return helpWith(sqllex, "SELECT")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5635
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5644
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5653
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5668
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5675
		{
			return helpWith(sqllex, "TABLE")
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5687
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5691
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5695
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5699
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5709
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5717
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5718
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5722
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = nil
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5731
		{
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5732
		{
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5736
		{
			sqlVAL.union.val = true
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5740
		{
			sqlVAL.union.val = false
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5744
		{
			sqlVAL.union.val = false
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5750
		{
			sqlVAL.union.val = true
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5761
		{
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5762
		{
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5765
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5766
		{
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5770
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5774
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5780
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5796
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5800
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5805
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5820
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5829
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5840
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5844
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5853
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5859
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5866
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5873
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5882
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5886
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5890
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5896
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5897
		{
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5900
		{
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5901
		{
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5922
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5928
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5932
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5954
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5956
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5968
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5971
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5973
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5979
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5983
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5989
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5993
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5998
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6003
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6014
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6021
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6026
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6037
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6041
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6045
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6053
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6084
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6098
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6108
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6116
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6125
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6129
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6133
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6144
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6168
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6174
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6184
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6196
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6198
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6201
		{
			sqlVAL.union.val = nil
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6202
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6207
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6217
		{
			sqlVAL.union.val = true
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6221
		{
			sqlVAL.union.val = false
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6241
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6249
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6253
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6257
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6261
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6267
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6271
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6278
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6284
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6297
		{
			sqlVAL.str = tree.AstFull
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.str = tree.AstRight
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6309
		{
			sqlVAL.str = tree.AstInner
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6315
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6316
		{
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6337
		{
			sqlVAL.str = tree.AstHash
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6341
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6345
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6349
		{
			sqlVAL.str = ""
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6362
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6366
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6371
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6372
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6373
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6374
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6378
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6383
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6397
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6401
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6407
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6415
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6425
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6432
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6444
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6457
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6465
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6466
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6480
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6487
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6488
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6490
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6498
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6510
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6511
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6528
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6532
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6536
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6540
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6544
		{
			sqlVAL.union.val = types.String
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.union.val = types.Name
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6552
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6561
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6565
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6569
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6577
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6581
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6585
		{
			sqlVAL.union.val = types.INet
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6589
		{
			sqlVAL.union.val = types.Oid
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6593
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6597
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6601
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6632
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6640
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6648
		{
			sqlVAL.union.val = nil
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6655
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6659
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6663
		{
			sqlVAL.union.val = types.Int2
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6667
		{
			sqlVAL.union.val = types.Int2
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6671
		{
			sqlVAL.union.val = types.Int4
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = types.Int
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = types.Int
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.union.val = types.Int
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = types.Float4
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6691
		{
			sqlVAL.union.val = types.Float4
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6695
		{
			sqlVAL.union.val = types.Float
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6699
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6703
		{
			sqlVAL.union.val = types.Float
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6707
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6715
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6723
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6731
		{
			sqlVAL.union.val = types.Bool
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6735
		{
			sqlVAL.union.val = types.Bool
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6742
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6746
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6750
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.union.val = types.RegType
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6764
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6777
		{
			sqlVAL.union.val = types.Float
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6783
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6789
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6797
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6801
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6805
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6811
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6823
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6829
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6833
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6837
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6841
		{
			sqlVAL.union.val = types.String
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = true
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6851
		{
			sqlVAL.union.val = false
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6856
		{
			sqlVAL.union.val = types.Date
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6860
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6865
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6872
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6873
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6875
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6883
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6899
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6908
		{
			sqlVAL.union.val = true
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6909
		{
			sqlVAL.union.val = false
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = false
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = types.Interval
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6920
		{
			sqlVAL.union.val = tree.Year
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6924
		{
			sqlVAL.union.val = tree.Month
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6928
		{
			sqlVAL.union.val = tree.Day
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6932
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6946
		{
			sqlVAL.union.val = tree.Month
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6950
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6954
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6958
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6966
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6977
		{
			sqlVAL.union.val = nil
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6983
		{
			sqlVAL.union.val = tree.Second
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6986
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7010
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7014
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7021
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7030
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7035
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7047
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7051
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7055
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7067
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7071
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7075
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7083
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7167
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7227
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7274
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7284
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7288
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7292
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7340
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7362
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7374
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7386
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7390
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7394
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7398
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7414
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7418
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7422
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7426
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7430
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7434
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7438
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7442
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7446
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7450
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7454
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7458
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7462
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7466
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7470
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7474
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7478
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7482
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7540
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7544
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7548
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7552
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7556
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7561
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7563
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7567
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7570
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7588
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7597
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7604
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7612
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7621
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7636
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7647
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7648
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7650
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7661
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7672
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7689
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7693
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7705
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7709
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7713
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7717
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7739
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7767
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7771
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7778
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7781
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7783
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7786
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7791
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7793
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7796
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7798
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7801
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7803
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7806
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7811
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7813
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7816
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7825
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7826
		{
			return unimplemented(sqllex, "treat")
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7847
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7849
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7852
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7857
		{
			return unimplemented(sqllex, "within group")
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7858
		{
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7866
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7873
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7877
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7893
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7936
		{
			sqlVAL.str = ""
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7964
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7971
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7984
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7997
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8064
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8071
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8083
		{
			sqlVAL.union.val = tree.Any
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = tree.Some
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = tree.All
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8096
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8097
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = tree.Div
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8100
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8101
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8105
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8106
		{
			sqlVAL.union.val = tree.LT
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = tree.GT
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8108
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8109
		{
			sqlVAL.union.val = tree.LE
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8110
		{
			sqlVAL.union.val = tree.GE
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = tree.NE
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8115
		{
			sqlVAL.union.val = tree.Like
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8118
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8141
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8145
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8151
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8180
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8184
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8191
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8237
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8267
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8271
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8277
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8288
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8309
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8327
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8347
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8353
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8372
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8399
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8405
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8409
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8431
		{
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8432
		{
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8436
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8440
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8446
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8455
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8459
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8463
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8471
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8485
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8504
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8512
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8548
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8552
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8556
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8562
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8566
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8574
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8578
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8587
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8598
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8607
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8615
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8712
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8719
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8723
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8727
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8741
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8745
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8749
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8762
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8780
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8793
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8800
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8825
		{
			sqlVAL.str = ""
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8831
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8835
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
