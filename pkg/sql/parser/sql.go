// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24

import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:65

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:580
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9171

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 982,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	176, 821,
	193, 821,
	208, 231,
	284, 231,
	292, 677,
	319, 231,
	328, 677,
	365, 677,
	390, 231,
	413, 677,
	-2, 0,
	-1, 75,
	208, 235,
	-2, 0,
	-1, 76,
	105, 982,
	182, 982,
	399, 982,
	400, 982,
	-2, 0,
	-1, 87,
	118, 956,
	132, 956,
	190, 956,
	219, 956,
	250, 956,
	260, 956,
	395, 956,
	-2, 943,
	-1, 116,
	123, 598,
	207, 598,
	286, 586,
	337, 586,
	383, 598,
	-2, 0,
	-1, 117,
	4, 984,
	21, 984,
	22, 984,
	23, 984,
	24, 984,
	25, 984,
	27, 984,
	32, 984,
	37, 984,
	38, 984,
	39, 984,
	40, 984,
	41, 984,
	42, 984,
	43, 984,
	44, 984,
	45, 984,
	46, 984,
	48, 984,
	49, 984,
	50, 984,
	51, 984,
	52, 984,
	53, 984,
	56, 984,
	57, 984,
	58, 984,
	59, 984,
	61, 984,
	62, 984,
	66, 984,
	67, 984,
	68, 984,
	69, 984,
	70, 984,
	72, 984,
	73, 984,
	74, 984,
	75, 984,
	77, 984,
	79, 984,
	80, 984,
	81, 984,
	84, 984,
	85, 984,
	93, 984,
	94, 984,
	95, 984,
	96, 984,
	97, 984,
	98, 984,
	99, 984,
	100, 984,
	102, 984,
	104, 984,
	105, 984,
	107, 984,
	110, 984,
	111, 984,
	112, 984,
	114, 984,
	116, 984,
	117, 984,
	119, 984,
	120, 984,
	121, 984,
	122, 984,
	123, 984,
	124, 984,
	125, 984,
	126, 984,
	127, 984,
	128, 984,
	129, 984,
	131, 984,
	137, 984,
	138, 984,
	139, 984,
	140, 984,
	141, 984,
	142, 984,
	144, 984,
	146, 984,
	150, 984,
	151, 984,
	153, 984,
	154, 984,
	156, 984,
	157, 984,
	159, 984,
	160, 984,
	161, 984,
	162, 984,
	163, 984,
	164, 984,
	165, 984,
	167, 984,
	168, 984,
	170, 984,
	171, 984,
	172, 984,
	176, 984,
	177, 984,
	178, 984,
	179, 984,
	182, 984,
	183, 984,
	184, 984,
	185, 984,
	186, 984,
	187, 984,
	188, 984,
	189, 984,
	191, 984,
	193, 984,
	195, 984,
	197, 984,
	198, 984,
	199, 984,
	201, 984,
	202, 984,
	205, 984,
	206, 984,
	207, 984,
	208, 984,
	210, 984,
	211, 984,
	213, 984,
	214, 984,
	216, 984,
	217, 984,
	220, 984,
	221, 984,
	224, 984,
	225, 984,
	227, 984,
	228, 984,
	229, 984,
	230, 984,
	231, 984,
	232, 984,
	233, 984,
	234, 984,
	235, 984,
	236, 984,
	238, 984,
	239, 984,
	240, 984,
	241, 984,
	243, 984,
	246, 984,
	247, 984,
	248, 984,
	249, 984,
	251, 984,
	252, 984,
	253, 984,
	255, 984,
	256, 984,
	257, 984,
	258, 984,
	261, 984,
	262, 984,
	264, 984,
	266, 984,
	267, 984,
	268, 984,
	269, 984,
	270, 984,
	271, 984,
	272, 984,
	273, 984,
	274, 984,
	276, 984,
	277, 984,
	278, 984,
	279, 984,
	280, 984,
	281, 984,
	283, 984,
	285, 984,
	286, 984,
	287, 984,
	288, 984,
	289, 984,
	290, 984,
	291, 984,
	292, 984,
	293, 984,
	295, 984,
	296, 984,
	297, 984,
	298, 984,
	299, 984,
	301, 984,
	302, 984,
	303, 984,
	304, 984,
	305, 984,
	306, 984,
	307, 984,
	308, 984,
	310, 984,
	312, 984,
	313, 984,
	314, 984,
	315, 984,
	316, 984,
	317, 984,
	319, 984,
	320, 984,
	321, 984,
	322, 984,
	323, 984,
	324, 984,
	325, 984,
	326, 984,
	328, 984,
	329, 984,
	330, 984,
	331, 984,
	332, 984,
	333, 984,
	334, 984,
	335, 984,
	336, 984,
	337, 984,
	339, 984,
	340, 984,
	341, 984,
	342, 984,
	344, 984,
	345, 984,
	346, 984,
	347, 984,
	349, 984,
	350, 984,
	351, 984,
	352, 984,
	353, 984,
	354, 984,
	355, 984,
	356, 984,
	357, 984,
	358, 984,
	359, 984,
	360, 984,
	362, 984,
	363, 984,
	364, 984,
	366, 984,
	367, 984,
	368, 984,
	369, 984,
	370, 984,
	371, 984,
	372, 984,
	373, 984,
	374, 984,
	376, 984,
	377, 984,
	378, 984,
	379, 984,
	381, 984,
	383, 984,
	384, 984,
	385, 984,
	386, 984,
	387, 984,
	389, 984,
	390, 984,
	391, 984,
	393, 984,
	394, 984,
	397, 984,
	398, 984,
	399, 984,
	400, 984,
	401, 984,
	403, 984,
	405, 984,
	406, 984,
	407, 984,
	408, 984,
	409, 984,
	410, 984,
	411, 984,
	413, 984,
	414, 984,
	415, 984,
	420, 984,
	421, 984,
	422, 984,
	423, 984,
	424, 984,
	425, 984,
	-2, 0,
	-1, 118,
	1, 874,
	197, 874,
	283, 874,
	290, 874,
	428, 874,
	451, 874,
	-2, 0,
	-1, 120,
	1, 874,
	451, 874,
	-2, 0,
	-1, 121,
	1, 874,
	451, 874,
	-2, 0,
	-1, 122,
	1, 878,
	451, 878,
	-2, 0,
	-1, 146,
	118, 955,
	132, 955,
	190, 955,
	219, 955,
	250, 955,
	260, 955,
	395, 955,
	-2, 952,
	-1, 176,
	4, 991,
	5, 991,
	6, 991,
	7, 991,
	8, 991,
	9, 991,
	10, 991,
	21, 991,
	22, 991,
	23, 991,
	24, 991,
	25, 991,
	27, 991,
	32, 991,
	33, 991,
	37, 991,
	38, 991,
	39, 991,
	40, 991,
	41, 991,
	42, 991,
	43, 991,
	44, 991,
	45, 991,
	46, 991,
	48, 991,
	49, 991,
	50, 991,
	51, 991,
	52, 991,
	53, 991,
	54, 991,
	55, 991,
	56, 991,
	57, 991,
	58, 991,
	59, 991,
	61, 991,
	62, 991,
	64, 991,
	66, 991,
	67, 991,
	68, 991,
	69, 991,
	70, 991,
	72, 991,
	73, 991,
	74, 991,
	75, 991,
	77, 991,
	79, 991,
	80, 991,
	81, 991,
	83, 991,
	84, 991,
	85, 991,
	86, 991,
	87, 991,
	88, 991,
	89, 991,
	90, 991,
	91, 991,
	92, 991,
	93, 991,
	94, 991,
	95, 991,
	96, 991,
	97, 991,
	98, 991,
	99, 991,
	100, 991,
	101, 991,
	102, 991,
	104, 991,
	105, 991,
	107, 991,
	110, 991,
	111, 991,
	112, 991,
	114, 991,
	116, 991,
	117, 991,
	119, 991,
	120, 991,
	121, 991,
	122, 991,
	123, 991,
	124, 991,
	125, 991,
	126, 991,
	127, 991,
	128, 991,
	129, 991,
	130, 991,
	131, 991,
	137, 991,
	138, 991,
	139, 991,
	140, 991,
	141, 991,
	142, 991,
	144, 991,
	146, 991,
	149, 991,
	150, 991,
	151, 991,
	153, 991,
	154, 991,
	156, 991,
	157, 991,
	159, 991,
	160, 991,
	161, 991,
	162, 991,
	163, 991,
	164, 991,
	165, 991,
	166, 991,
	167, 991,
	168, 991,
	170, 991,
	171, 991,
	172, 991,
	176, 991,
	177, 991,
	178, 991,
	179, 991,
	181, 991,
	182, 991,
	183, 991,
	184, 991,
	185, 991,
	186, 991,
	187, 991,
	188, 991,
	189, 991,
	191, 991,
	193, 991,
	194, 991,
	195, 991,
	196, 991,
	197, 991,
	198, 991,
	199, 991,
	200, 991,
	201, 991,
	202, 991,
	205, 991,
	206, 991,
	207, 991,
	208, 991,
	210, 991,
	211, 991,
	213, 991,
	214, 991,
	215, 991,
	216, 991,
	217, 991,
	218, 991,
	220, 991,
	221, 991,
	224, 991,
	225, 991,
	227, 991,
	228, 991,
	229, 991,
	230, 991,
	231, 991,
	232, 991,
	233, 991,
	234, 991,
	235, 991,
	236, 991,
	237, 991,
	238, 991,
	239, 991,
	240, 991,
	241, 991,
	242, 991,
	243, 991,
	244, 991,
	245, 991,
	246, 991,
	247, 991,
	248, 991,
	249, 991,
	251, 991,
	252, 991,
	253, 991,
	256, 991,
	257, 991,
	258, 991,
	261, 991,
	262, 991,
	263, 991,
	264, 991,
	265, 991,
	266, 991,
	267, 991,
	268, 991,
	269, 991,
	270, 991,
	271, 991,
	272, 991,
	273, 991,
	274, 991,
	276, 991,
	277, 991,
	278, 991,
	279, 991,
	280, 991,
	281, 991,
	283, 991,
	285, 991,
	286, 991,
	287, 991,
	288, 991,
	289, 991,
	290, 991,
	291, 991,
	292, 991,
	293, 991,
	295, 991,
	296, 991,
	297, 991,
	298, 991,
	299, 991,
	301, 991,
	302, 991,
	303, 991,
	304, 991,
	305, 991,
	306, 991,
	307, 991,
	308, 991,
	310, 991,
	311, 991,
	312, 991,
	313, 991,
	314, 991,
	315, 991,
	316, 991,
	317, 991,
	319, 991,
	320, 991,
	321, 991,
	322, 991,
	323, 991,
	324, 991,
	325, 991,
	326, 991,
	328, 991,
	329, 991,
	330, 991,
	331, 991,
	332, 991,
	333, 991,
	334, 991,
	335, 991,
	336, 991,
	337, 991,
	338, 991,
	339, 991,
	340, 991,
	341, 991,
	342, 991,
	343, 991,
	344, 991,
	345, 991,
	346, 991,
	347, 991,
	349, 991,
	350, 991,
	351, 991,
	352, 991,
	353, 991,
	354, 991,
	355, 991,
	356, 991,
	357, 991,
	358, 991,
	359, 991,
	360, 991,
	362, 991,
	363, 991,
	364, 991,
	366, 991,
	367, 991,
	368, 991,
	369, 991,
	370, 991,
	371, 991,
	372, 991,
	373, 991,
	374, 991,
	376, 991,
	377, 991,
	378, 991,
	379, 991,
	381, 991,
	383, 991,
	384, 991,
	385, 991,
	386, 991,
	387, 991,
	388, 991,
	389, 991,
	390, 991,
	391, 991,
	393, 991,
	394, 991,
	396, 991,
	397, 991,
	398, 991,
	399, 991,
	400, 991,
	401, 991,
	402, 991,
	403, 991,
	405, 991,
	406, 991,
	407, 991,
	408, 991,
	409, 991,
	410, 991,
	411, 991,
	413, 991,
	414, 991,
	415, 991,
	420, 991,
	421, 991,
	422, 991,
	423, 991,
	424, 991,
	425, 991,
	426, 991,
	434, 991,
	439, 991,
	440, 991,
	441, 991,
	448, 991,
	453, 991,
	-2, 0,
	-1, 542,
	148, 1657,
	380, 1657,
	431, 1657,
	450, 1657,
	-2, 0,
	-1, 543,
	148, 1734,
	380, 1734,
	431, 1734,
	450, 1734,
	-2, 0,
	-1, 544,
	148, 1647,
	380, 1647,
	431, 1647,
	450, 1647,
	-2, 0,
	-1, 546,
	148, 1820,
	380, 1820,
	431, 1820,
	450, 1820,
	-2, 0,
	-1, 548,
	148, 1848,
	380, 1848,
	431, 1848,
	450, 1848,
	-2, 0,
	-1, 555,
	148, 1744,
	380, 1744,
	431, 1744,
	450, 1744,
	-2, 468,
	-1, 572,
	450, 1607,
	452, 1607,
	-2, 646,
	-1, 573,
	450, 1609,
	452, 1609,
	-2, 647,
	-1, 574,
	450, 1608,
	452, 1608,
	-2, 648,
	-1, 575,
	452, 1555,
	-2, 649,
	-1, 718,
	286, 587,
	337, 587,
	-2, 0,
	-1, 719,
	286, 586,
	337, 586,
	-2, 546,
	-1, 721,
	1, 568,
	447, 568,
	449, 568,
	451, 568,
	-2, 0,
	-1, 722,
	1, 645,
	145, 645,
	447, 645,
	449, 645,
	451, 645,
	-2, 0,
	-1, 729,
	1, 589,
	447, 589,
	449, 589,
	451, 589,
	-2, 0,
	-1, 731,
	1, 608,
	447, 608,
	449, 608,
	451, 608,
	-2, 0,
	-1, 732,
	1, 610,
	447, 610,
	449, 610,
	451, 610,
	-2, 0,
	-1, 733,
	1, 613,
	447, 613,
	449, 613,
	451, 613,
	-2, 0,
	-1, 737,
	1, 627,
	447, 627,
	449, 627,
	451, 627,
	-2, 0,
	-1, 738,
	1, 629,
	447, 629,
	449, 629,
	451, 629,
	-2, 0,
	-1, 782,
	132, 995,
	219, 995,
	250, 995,
	-2, 952,
	-1, 797,
	132, 994,
	219, 994,
	250, 994,
	-2, 952,
	-1, 821,
	450, 1606,
	-2, 476,
	-1, 850,
	448, 1598,
	-2, 1589,
	-1, 856,
	5, 1129,
	-2, 1638,
	-1, 857,
	5, 1130,
	-2, 1642,
	-1, 858,
	5, 1131,
	-2, 1641,
	-1, 859,
	5, 1132,
	-2, 1846,
	-1, 860,
	5, 1133,
	-2, 1746,
	-1, 861,
	5, 1134,
	-2, 1812,
	-1, 862,
	5, 1135,
	-2, 1814,
	-1, 863,
	5, 1136,
	-2, 1825,
	-1, 864,
	5, 1137,
	-2, 1815,
	-1, 865,
	5, 1138,
	-2, 1816,
	-1, 866,
	5, 1139,
	-2, 1637,
	-1, 867,
	5, 1140,
	-2, 1860,
	-1, 868,
	5, 1141,
	-2, 1709,
	-1, 869,
	5, 1142,
	-2, 1753,
	-1, 870,
	5, 1143,
	-2, 1755,
	-1, 871,
	5, 1144,
	-2, 1713,
	-1, 872,
	5, 1145,
	448, 1616,
	-2, 1607,
	-1, 873,
	5, 1201,
	448, 1201,
	-2, 1895,
	-1, 878,
	448, 1617,
	-2, 1608,
	-1, 880,
	5, 1149,
	-2, 1893,
	-1, 881,
	5, 1150,
	-2, 1894,
	-1, 882,
	5, 1151,
	-2, 1712,
	-1, 883,
	5, 1152,
	-2, 1906,
	-1, 884,
	5, 1153,
	-2, 1714,
	-1, 885,
	5, 1154,
	-2, 1715,
	-1, 886,
	5, 1155,
	-2, 1716,
	-1, 887,
	5, 1156,
	-2, 1875,
	-1, 888,
	5, 1157,
	-2, 1904,
	-1, 889,
	5, 1158,
	-2, 1692,
	-1, 890,
	5, 1159,
	-2, 1693,
	-1, 891,
	5, 1173,
	-2, 1887,
	-1, 893,
	5, 1148,
	-2, 1883,
	-1, 894,
	5, 1148,
	-2, 1882,
	-1, 895,
	5, 1148,
	-2, 1899,
	-1, 896,
	5, 1165,
	-2, 1877,
	-1, 897,
	5, 1166,
	-2, 1639,
	-1, 898,
	5, 1176,
	-2, 1876,
	-1, 899,
	5, 1178,
	-2, 1915,
	-1, 901,
	5, 1189,
	-2, 1667,
	-1, 902,
	5, 1200,
	-2, 1908,
	-1, 903,
	5, 1192,
	-2, 1909,
	-1, 904,
	5, 1200,
	-2, 1910,
	-1, 905,
	5, 1196,
	-2, 1911,
	-1, 906,
	5, 1116,
	-2, 1722,
	-1, 907,
	5, 1117,
	-2, 1723,
	-1, 908,
	450, 1604,
	-2, 1588,
	-1, 909,
	448, 1935,
	-2, 1605,
	-1, 929,
	5, 1184,
	-2, 1835,
	-1, 946,
	5, 1183,
	-2, 1916,
	-1, 956,
	5, 1185,
	414, 1185,
	-2, 1878,
	-1, 957,
	5, 1186,
	414, 1186,
	-2, 1879,
	-1, 993,
	448, 1616,
	-2, 1607,
	-1, 1022,
	148, 1848,
	380, 1848,
	431, 1848,
	450, 1848,
	-2, 0,
	-1, 1023,
	1, 456,
	451, 456,
	-2, 886,
	-1, 1143,
	301, 1585,
	441, 1585,
	-2, 1584,
	-1, 1166,
	453, 1585,
	-2, 1586,
	-1, 1201,
	292, 677,
	413, 677,
	-2, 230,
	-1, 1221,
	272, 980,
	-2, 794,
	-1, 1230,
	254, 1611,
	-2, 0,
	-1, 1294,
	1, 345,
	447, 345,
	449, 345,
	451, 345,
	-2, 954,
	-1, 1297,
	4, 1914,
	11, 1914,
	12, 1914,
	14, 1914,
	15, 1914,
	16, 1914,
	17, 1914,
	18, 1914,
	19, 1914,
	21, 1914,
	22, 1914,
	23, 1914,
	24, 1914,
	25, 1914,
	27, 1914,
	30, 1914,
	32, 1914,
	34, 1914,
	37, 1914,
	38, 1914,
	39, 1914,
	40, 1914,
	41, 1914,
	42, 1914,
	43, 1914,
	44, 1914,
	45, 1914,
	46, 1914,
	48, 1914,
	49, 1914,
	50, 1914,
	51, 1914,
	52, 1914,
	53, 1914,
	56, 1914,
	57, 1914,
	58, 1914,
	59, 1914,
	61, 1914,
	62, 1914,
	63, 1914,
	66, 1914,
	67, 1914,
	68, 1914,
	69, 1914,
	70, 1914,
	71, 1914,
	72, 1914,
	73, 1914,
	74, 1914,
	75, 1914,
	77, 1914,
	78, 1914,
	79, 1914,
	80, 1914,
	81, 1914,
	83, 1914,
	84, 1914,
	85, 1914,
	93, 1914,
	94, 1914,
	95, 1914,
	96, 1914,
	97, 1914,
	98, 1914,
	99, 1914,
	100, 1914,
	102, 1914,
	104, 1914,
	105, 1914,
	107, 1914,
	110, 1914,
	111, 1914,
	112, 1914,
	114, 1914,
	116, 1914,
	117, 1914,
	119, 1914,
	120, 1914,
	121, 1914,
	122, 1914,
	123, 1914,
	124, 1914,
	125, 1914,
	126, 1914,
	127, 1914,
	128, 1914,
	129, 1914,
	133, 1914,
	134, 1914,
	135, 1914,
	136, 1914,
	137, 1914,
	138, 1914,
	139, 1914,
	140, 1914,
	141, 1914,
	142, 1914,
	143, 1914,
	144, 1914,
	146, 1914,
	149, 1914,
	150, 1914,
	151, 1914,
	153, 1914,
	154, 1914,
	156, 1914,
	157, 1914,
	159, 1914,
	160, 1914,
	161, 1914,
	162, 1914,
	163, 1914,
	164, 1914,
	165, 1914,
	166, 1914,
	167, 1914,
	168, 1914,
	169, 1914,
	170, 1914,
	171, 1914,
	172, 1914,
	173, 1914,
	174, 1914,
	175, 1914,
	177, 1914,
	178, 1914,
	179, 1914,
	181, 1914,
	182, 1914,
	183, 1914,
	184, 1914,
	185, 1914,
	186, 1914,
	187, 1914,
	188, 1914,
	189, 1914,
	191, 1914,
	193, 1914,
	194, 1914,
	195, 1914,
	196, 1914,
	197, 1914,
	198, 1914,
	199, 1914,
	200, 1914,
	201, 1914,
	202, 1914,
	203, 1914,
	204, 1914,
	205, 1914,
	206, 1914,
	207, 1914,
	208, 1914,
	210, 1914,
	211, 1914,
	213, 1914,
	214, 1914,
	215, 1914,
	216, 1914,
	217, 1914,
	218, 1914,
	220, 1914,
	221, 1914,
	224, 1914,
	225, 1914,
	226, 1914,
	227, 1914,
	228, 1914,
	229, 1914,
	230, 1914,
	231, 1914,
	232, 1914,
	233, 1914,
	234, 1914,
	235, 1914,
	236, 1914,
	237, 1914,
	238, 1914,
	239, 1914,
	240, 1914,
	241, 1914,
	244, 1914,
	246, 1914,
	247, 1914,
	248, 1914,
	249, 1914,
	251, 1914,
	252, 1914,
	253, 1914,
	256, 1914,
	257, 1914,
	258, 1914,
	259, 1914,
	261, 1914,
	262, 1914,
	264, 1914,
	266, 1914,
	267, 1914,
	268, 1914,
	269, 1914,
	270, 1914,
	271, 1914,
	272, 1914,
	273, 1914,
	274, 1914,
	276, 1914,
	277, 1914,
	278, 1914,
	279, 1914,
	280, 1914,
	281, 1914,
	283, 1914,
	285, 1914,
	286, 1914,
	287, 1914,
	288, 1914,
	289, 1914,
	290, 1914,
	291, 1914,
	292, 1914,
	293, 1914,
	295, 1914,
	296, 1914,
	297, 1914,
	298, 1914,
	299, 1914,
	300, 1914,
	301, 1914,
	302, 1914,
	303, 1914,
	304, 1914,
	305, 1914,
	306, 1914,
	307, 1914,
	308, 1914,
	310, 1914,
	311, 1914,
	312, 1914,
	313, 1914,
	314, 1914,
	315, 1914,
	316, 1914,
	317, 1914,
	318, 1914,
	319, 1914,
	320, 1914,
	321, 1914,
	322, 1914,
	323, 1914,
	324, 1914,
	325, 1914,
	326, 1914,
	328, 1914,
	329, 1914,
	330, 1914,
	331, 1914,
	332, 1914,
	333, 1914,
	334, 1914,
	335, 1914,
	336, 1914,
	337, 1914,
	339, 1914,
	340, 1914,
	341, 1914,
	342, 1914,
	343, 1914,
	344, 1914,
	345, 1914,
	346, 1914,
	347, 1914,
	349, 1914,
	350, 1914,
	351, 1914,
	352, 1914,
	353, 1914,
	354, 1914,
	355, 1914,
	356, 1914,
	357, 1914,
	358, 1914,
	359, 1914,
	360, 1914,
	362, 1914,
	363, 1914,
	364, 1914,
	366, 1914,
	367, 1914,
	368, 1914,
	369, 1914,
	370, 1914,
	371, 1914,
	372, 1914,
	373, 1914,
	374, 1914,
	376, 1914,
	377, 1914,
	378, 1914,
	379, 1914,
	381, 1914,
	383, 1914,
	384, 1914,
	385, 1914,
	386, 1914,
	387, 1914,
	389, 1914,
	390, 1914,
	391, 1914,
	393, 1914,
	394, 1914,
	397, 1914,
	398, 1914,
	399, 1914,
	400, 1914,
	401, 1914,
	403, 1914,
	405, 1914,
	406, 1914,
	407, 1914,
	408, 1914,
	409, 1914,
	410, 1914,
	411, 1914,
	413, 1914,
	414, 1914,
	415, 1914,
	420, 1914,
	421, 1914,
	422, 1914,
	423, 1914,
	424, 1914,
	425, 1914,
	426, 1914,
	427, 1914,
	429, 1914,
	430, 1914,
	431, 1914,
	432, 1914,
	433, 1914,
	434, 1914,
	436, 1914,
	437, 1914,
	438, 1914,
	439, 1914,
	440, 1914,
	441, 1914,
	442, 1914,
	443, 1914,
	444, 1914,
	446, 1914,
	449, 1914,
	450, 1914,
	452, 1914,
	453, 1914,
	-2, 0,
	-1, 1300,
	148, 1820,
	380, 1820,
	431, 1820,
	450, 1820,
	-2, 0,
	-1, 1326,
	286, 587,
	337, 587,
	-2, 0,
	-1, 1345,
	1, 582,
	447, 582,
	449, 582,
	451, 582,
	-2, 0,
	-1, 1346,
	1, 599,
	447, 599,
	449, 599,
	451, 599,
	-2, 0,
	-1, 1369,
	1, 1867,
	447, 1867,
	449, 1867,
	450, 1867,
	451, 1867,
	-2, 625,
	-1, 1370,
	1, 1818,
	447, 1818,
	449, 1818,
	450, 1818,
	451, 1818,
	-2, 626,
	-1, 1383,
	1, 881,
	451, 881,
	-2, 886,
	-1, 1388,
	132, 994,
	219, 994,
	250, 994,
	-2, 952,
	-1, 1481,
	118, 956,
	132, 956,
	190, 956,
	219, 956,
	250, 956,
	260, 956,
	395, 956,
	-2, 1357,
	-1, 1534,
	449, 1490,
	-2, 0,
	-1, 1569,
	118, 956,
	132, 956,
	190, 956,
	219, 956,
	250, 956,
	260, 956,
	395, 956,
	-2, 1066,
	-1, 1624,
	448, 1188,
	-2, 1176,
	-1, 1663,
	1, 458,
	451, 458,
	-2, 886,
	-1, 1848,
	1, 584,
	447, 584,
	449, 584,
	451, 584,
	-2, 0,
	-1, 1849,
	1, 601,
	447, 601,
	449, 601,
	451, 601,
	-2, 0,
	-1, 1921,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1237,
	-1, 1922,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1238,
	-1, 1923,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1239,
	-1, 1924,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1240,
	-1, 1925,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1241,
	-1, 1926,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1242,
	-1, 1927,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1243,
	-1, 1928,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1244,
	-1, 1940,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1256,
	-1, 1941,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1257,
	-1, 1942,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	203, 0,
	204, 0,
	429, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1258,
	-1, 1945,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1263,
	-1, 1951,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1267,
	-1, 1953,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1275,
	-1, 1954,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1276,
	-1, 1955,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1277,
	-1, 1956,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1278,
	-1, 2049,
	5, 1145,
	148, 1501,
	448, 1616,
	-2, 1607,
	-1, 2050,
	148, 1502,
	-2, 1871,
	-1, 2051,
	148, 1503,
	-2, 1743,
	-1, 2052,
	148, 1504,
	-2, 1668,
	-1, 2053,
	148, 1505,
	-2, 1703,
	-1, 2054,
	148, 1506,
	-2, 1741,
	-1, 2055,
	148, 1507,
	-2, 1811,
	-1, 2126,
	1, 1067,
	83, 1067,
	118, 1067,
	132, 1067,
	145, 1067,
	149, 1067,
	155, 1067,
	158, 1067,
	181, 1067,
	190, 1067,
	200, 1067,
	215, 1067,
	219, 1067,
	237, 1067,
	250, 1067,
	254, 1067,
	260, 1067,
	309, 1067,
	311, 1067,
	395, 1067,
	404, 1067,
	417, 1067,
	418, 1067,
	419, 1067,
	428, 1067,
	447, 1067,
	449, 1067,
	451, 1067,
	452, 1067,
	-2, 1066,
	-1, 2131,
	448, 1590,
	-2, 1602,
	-1, 2153,
	448, 1187,
	-2, 1177,
	-1, 2368,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1265,
	-1, 2369,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1269,
	-1, 2375,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1271,
	-1, 2555,
	197, 886,
	283, 886,
	290, 886,
	428, 886,
	-2, 455,
	-1, 2627,
	449, 1560,
	452, 1560,
	-2, 1576,
	-1, 2641,
	272, 980,
	-2, 794,
	-1, 2718,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1273,
	-1, 2725,
	194, 0,
	196, 0,
	244, 0,
	-2, 1292,
	-1, 2788,
	14, 0,
	15, 0,
	16, 0,
	429, 0,
	430, 0,
	431, 0,
	-2, 1321,
	-1, 2789,
	14, 0,
	15, 0,
	16, 0,
	429, 0,
	430, 0,
	431, 0,
	-2, 1322,
	-1, 2790,
	14, 0,
	15, 0,
	16, 0,
	429, 0,
	430, 0,
	431, 0,
	-2, 1323,
	-1, 2794,
	14, 0,
	15, 0,
	16, 0,
	429, 0,
	430, 0,
	431, 0,
	-2, 1327,
	-1, 2795,
	14, 0,
	15, 0,
	16, 0,
	429, 0,
	430, 0,
	431, 0,
	-2, 1328,
	-1, 2796,
	14, 0,
	15, 0,
	16, 0,
	429, 0,
	430, 0,
	431, 0,
	-2, 1329,
	-1, 2839,
	448, 1591,
	-2, 1603,
	-1, 2921,
	450, 2017,
	-2, 929,
	-1, 2963,
	194, 0,
	196, 0,
	244, 0,
	-2, 1293,
	-1, 2966,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1296,
	-1, 2967,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1298,
	-1, 3111,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1297,
	-1, 3112,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	166, 0,
	169, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1299,
	-1, 3122,
	194, 0,
	-2, 1330,
	-1, 3216,
	194, 0,
	-2, 1331,
	-1, 3326,
	40, 0,
	166, 0,
	218, 0,
	343, 0,
	426, 0,
	434, 0,
	-2, 1874,
}

const sqlPrivate = 57344

const sqlLast = 69404

var sqlAct = [...]int{

	878, 3152, 3408, 3175, 3335, 2278, 3398, 3325, 2628, 3155,
	3297, 3065, 3299, 2080, 3283, 3336, 3141, 3337, 3296, 3178,
	2287, 2756, 2279, 3220, 1829, 1908, 3080, 3103, 3324, 1147,
	807, 2912, 3183, 2907, 3026, 1968, 1029, 2118, 2917, 208,
	900, 208, 208, 1286, 1396, 208, 208, 208, 208, 208,
	2572, 1594, 208, 2658, 2625, 553, 2650, 798, 2319, 2861,
	574, 3126, 1581, 994, 2252, 1048, 2361, 986, 2530, 2860,
	2394, 2663, 2517, 1564, 2396, 2652, 2255, 1787, 208, 2504,
	2275, 2477, 574, 200, 1562, 1352, 2310, 1790, 670, 2998,
	2312, 2493, 2318, 2288, 1543, 1780, 1779, 2119, 1716, 2184,
	2236, 1707, 2476, 3221, 1489, 2811, 1507, 1981, 2357, 32,
	1905, 835, 1282, 1159, 1999, 1734, 1901, 806, 139, 4,
	1383, 2253, 833, 2662, 874, 1036, 1695, 2182, 1740, 2011,
	2098, 1544, 2114, 1965, 86, 2077, 1140, 2535, 2214, 795,
	2626, 1149, 1808, 1295, 1269, 1279, 1776, 2281, 1215, 2121,
	2174, 202, 1693, 2322, 1502, 1156, 3176, 981, 521, 1993,
	201, 2106, 575, 960, 2213, 576, 1553, 1025, 2088, 978,
	2045, 208, 208, 1982, 1470, 1397, 146, 1395, 570, 547,
	537, 1775, 1293, 147, 1796, 646, 1169, 1245, 615, 834,
	505, 1706, 958, 524, 139, 529, 665, 983, 1382, 713,
	1401, 1227, 2392, 728, 1572, 532, 2828, 2117, 123, 2829,
	2284, 579, 1595, 1810, 58, 1830, 2280, 984, 1563, 1810,
	582, 2231, 797, 2201, 1033, 59, 118, 1810, 3436, 3427,
	802, 2097, 2097, 579, 1996, 3426, 2713, 3407, 2097, 63,
	1747, 3394, 582, 3392, 3040, 2670, 3040, 3357, 1822, 3355,
	2097, 2669, 2097, 2097, 39, 120, 199, 802, 3352, 3349,
	679, 3353, 3350, 3346, 1033, 3322, 1747, 38, 1747, 69,
	3321, 3318, 3317, 1747, 1822, 1822, 3278, 3269, 3268, 2146,
	3040, 3040, 3279, 803, 1409, 1410, 2553, 3262, 2814, 41,
	1747, 1409, 1410, 3256, 42, 2090, 3040, 3254, 1997, 75,
	3040, 3218, 121, 176, 2146, 2142, 3204, 40, 85, 1747,
	1412, 3201, 76, 43, 3040, 3169, 783, 1412, 1747, 3168,
	961, 961, 1747, 782, 3161, 3160, 3132, 1747, 3040, 1747,
	966, 1743, 3205, 2449, 2450, 176, 1411, 176, 1747, 44,
	1822, 178, 1012, 1411, 1431, 790, 3113, 3094, 3062, 2146,
	2682, 2097, 2814, 3056, 3039, 77, 2097, 3040, 2965, 2931,
	2923, 2146, 2924, 2924, 962, 1178, 1409, 1410, 1998, 1995,
	2089, 2834, 3057, 178, 2835, 178, 1190, 2824, 2817, 2749,
	2825, 2097, 1747, 975, 2689, 177, 2490, 2690, 2488, 2097,
	2959, 2097, 1412, 2487, 2441, 170, 2097, 2097, 1747, 2411,
	2690, 2449, 2450, 171, 2412, 1007, 1434, 1435, 1436, 1437,
	2424, 2413, 2308, 2425, 2097, 1826, 1417, 177, 1411, 177,
	964, 965, 2097, 1417, 148, 2228, 2173, 170, 2159, 170,
	2145, 2097, 1666, 2146, 2682, 171, 176, 171, 2262, 2139,
	2449, 2450, 2097, 2467, 2468, 2469, 1439, 1440, 1441, 2395,
	2360, 2449, 2450, 1439, 1440, 1441, 148, 1746, 148, 2961,
	78, 2464, 2000, 2133, 2171, 2455, 1747, 1811, 45, 2096,
	1409, 1410, 2097, 1811, 178, 1825, 1539, 1008, 1826, 1409,
	1410, 1811, 1168, 2671, 1354, 963, 789, 788, 787, 786,
	785, 48, 145, 81, 1686, 82, 1412, 46, 1417, 1432,
	2464, 122, 2672, 1480, 781, 1412, 1432, 47, 780, 779,
	208, 805, 778, 777, 176, 2342, 2036, 776, 177, 208,
	775, 774, 1411, 773, 772, 771, 51, 770, 170, 116,
	1431, 1411, 711, 2455, 710, 709, 171, 1189, 119, 708,
	208, 707, 706, 705, 704, 703, 702, 208, 2465, 2669,
	701, 700, 178, 699, 698, 697, 696, 2283, 695, 694,
	1994, 693, 692, 208, 1051, 208, 208, 1152, 208, 1051,
	208, 691, 2455, 1438, 690, 176, 117, 689, 208, 208,
	688, 687, 1035, 2455, 2151, 686, 1040, 3015, 149, 2977,
	1008, 1433, 1434, 1435, 1436, 1437, 177, 678, 1433, 2089,
	677, 637, 1417, 208, 636, 595, 170, 1005, 594, 2449,
	2450, 1417, 1818, 178, 171, 593, 2465, 208, 1809, 1152,
	1152, 208, 208, 2470, 208, 2925, 1881, 585, 584, 583,
	560, 559, 1439, 1440, 1441, 148, 208, 558, 3, 557,
	2466, 1172, 541, 198, 208, 2832, 1008, 197, 196, 1143,
	195, 194, 193, 1166, 192, 2465, 191, 177, 208, 208,
	208, 208, 208, 1152, 1152, 190, 2465, 189, 1152, 1023,
	208, 1152, 208, 2449, 2450, 850, 2467, 2468, 2469, 188,
	187, 186, 1162, 185, 184, 1432, 183, 182, 181, 180,
	176, 179, 2960, 2533, 2418, 2407, 148, 2240, 1177, 2134,
	1182, 176, 1188, 1565, 1228, 1228, 2125, 1290, 2466, 1422,
	1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419, 1152, 1413,
	1414, 1415, 1416, 1418, 1419, 1408, 1020, 2034, 178, 579,
	3342, 1184, 1044, 2464, 1137, 1142, 2268, 208, 582, 178,
	1171, 2455, 1510, 1170, 1166, 2032, 2030, 2466, 1509, 2028,
	1832, 1510, 208, 1691, 1579, 1496, 1174, 1509, 2466, 1438,
	2459, 2451, 2452, 2453, 2454, 2456, 2457, 208, 1042, 1513,
	996, 1049, 177, 3323, 1491, 3250, 1160, 1433, 1508, 1232,
	1046, 3211, 170, 177, 3208, 1305, 139, 1164, 1298, 3206,
	171, 3095, 1308, 170, 1413, 1414, 1415, 1416, 1418, 1419,
	3088, 171, 803, 1273, 1276, 2455, 2449, 2450, 3151, 1296,
	3019, 148, 2693, 2997, 2996, 2984, 1831, 1283, 2983, 2982,
	2981, 2975, 148, 1229, 2465, 2974, 2460, 2458, 2459, 2451,
	2452, 2453, 2454, 2456, 2457, 2973, 176, 2972, 2449, 2450,
	1389, 2894, 2849, 2848, 2846, 2838, 2808, 2449, 2450, 2807,
	2467, 2468, 2469, 1248, 992, 2806, 2470, 1388, 2461, 2462,
	2463, 2449, 2450, 2733, 2729, 2460, 2458, 2459, 2451, 2452,
	2453, 2454, 2456, 2457, 178, 1272, 1272, 1272, 1164, 2451,
	2452, 2453, 2454, 2456, 2457, 2528, 2484, 2475, 2465, 1303,
	2448, 2445, 1183, 2444, 2442, 1422, 1420, 1421, 1413, 1414,
	1415, 1416, 1418, 1419, 1492, 2431, 1490, 2464, 2269, 1415,
	1416, 1418, 1419, 2430, 1313, 2429, 2466, 1478, 177, 2426,
	2423, 1381, 1387, 1327, 2401, 1687, 2215, 2400, 170, 2393,
	2309, 2126, 2004, 1408, 2356, 974, 171, 1394, 2455, 1491,
	1407, 3434, 3406, 1784, 2510, 2449, 2450, 1386, 2467, 2468,
	2469, 3405, 1752, 1750, 1365, 3358, 1384, 148, 995, 2758,
	208, 3313, 2547, 2035, 2728, 3311, 3245, 3242, 3241, 3240,
	2455, 3236, 3230, 3200, 3199, 1971, 3147, 803, 3124, 2455,
	2466, 3100, 3099, 783, 3078, 3075, 208, 1550, 3069, 3014,
	782, 1390, 2995, 2455, 3087, 2945, 208, 1051, 208, 208,
	208, 1404, 1405, 2942, 2876, 2464, 1152, 574, 208, 208,
	2875, 1512, 574, 208, 2864, 2863, 1588, 2820, 208, 817,
	2724, 2465, 2683, 2644, 2615, 1541, 2596, 2575, 2574, 2549,
	2470, 2489, 2422, 1661, 2460, 2458, 2459, 2451, 2452, 2453,
	2454, 2456, 2457, 1051, 2421, 2406, 1686, 2384, 2249, 1504,
	1505, 1626, 1514, 1511, 1503, 1500, 176, 1573, 2155, 1409,
	1410, 2154, 2465, 1547, 1548, 2129, 2111, 1689, 2267, 2095,
	1591, 1977, 811, 1660, 2026, 1658, 1474, 2455, 1578, 1542,
	1538, 1537, 1536, 1535, 2575, 1412, 1479, 1534, 1533, 1532,
	1531, 2461, 2462, 2463, 178, 139, 1530, 1561, 2460, 2458,
	2459, 2451, 2452, 2453, 2454, 2456, 2457, 1528, 1527, 961,
	3223, 1411, 1526, 2466, 1525, 1524, 1833, 803, 1523, 1522,
	1521, 1520, 1601, 1519, 1585, 1518, 1517, 1516, 2470, 1493,
	1475, 1473, 1468, 1598, 1019, 1010, 1002, 3074, 177, 3016,
	1570, 2969, 2845, 1663, 2827, 2823, 1682, 2410, 170, 2148,
	2112, 3136, 1540, 1583, 2466, 3018, 171, 2844, 579, 1492,
	2465, 2545, 1471, 579, 1711, 2449, 2450, 582, 1152, 208,
	1686, 1574, 582, 1685, 2033, 1051, 2599, 148, 1567, 1039,
	3243, 1037, 2653, 3093, 1686, 1590, 3058, 2830, 2685, 2902,
	1657, 2684, 2031, 2029, 3184, 1033, 2027, 1379, 1033, 1510,
	1565, 1701, 1592, 1575, 1582, 1509, 3209, 2428, 2427, 1326,
	2217, 3207, 2366, 1664, 208, 208, 1584, 2203, 1677, 1676,
	2874, 208, 1686, 1683, 1678, 1030, 1034, 1672, 1498, 1024,
	1038, 208, 2458, 2459, 2451, 2452, 2453, 2454, 2456, 2457,
	208, 1033, 208, 2630, 208, 2629, 877, 768, 208, 1830,
	1692, 3179, 2466, 1353, 3150, 2012, 1354, 1781, 1731, 2699,
	208, 1733, 1715, 2610, 1737, 2461, 2462, 2463, 2453, 2454,
	2456, 2457, 2460, 2458, 2459, 2451, 2452, 2453, 2454, 2456,
	2457, 1523, 1523, 1996, 1729, 769, 3127, 3409, 2280, 2451,
	2452, 2453, 2454, 2456, 2457, 2760, 2416, 2153, 1771, 1529,
	1152, 208, 1152, 1506, 3343, 2623, 1772, 1152, 876, 1205,
	208, 1031, 208, 208, 3354, 1680, 3351, 2665, 1032, 1741,
	579, 2856, 1152, 1152, 3293, 208, 2908, 2316, 1793, 582,
	208, 1171, 1317, 1802, 1170, 574, 208, 3261, 208, 3382,
	208, 3381, 208, 2557, 208, 1193, 2186, 1997, 3050, 1203,
	1834, 1768, 208, 632, 1736, 1745, 208, 1785, 208, 762,
	1477, 3344, 2160, 2461, 2462, 2463, 3431, 208, 1350, 747,
	2460, 2458, 2459, 2451, 2452, 2453, 2454, 2456, 2457, 1869,
	1844, 973, 1748, 1696, 764, 2177, 208, 1697, 1762, 760,
	1761, 1867, 208, 3174, 801, 1673, 2175, 1800, 758, 1351,
	755, 2546, 3170, 2177, 2888, 1627, 2885, 2884, 1030, 2853,
	2559, 1708, 1051, 1039, 2175, 832, 1813, 1998, 1995, 1815,
	1204, 796, 1817, 2852, 1030, 989, 1820, 1795, 1798, 2405,
	633, 1766, 2404, 2189, 803, 1681, 2403, 801, 1778, 1705,
	2402, 1296, 1888, 2370, 2233, 1760, 627, 1885, 2227, 1039,
	1626, 1626, 1349, 2224, 2205, 2141, 1033, 1248, 1952, 1797,
	1385, 1797, 1709, 1710, 1038, 1167, 800, 1836, 2022, 2021,
	2276, 1910, 1698, 2598, 1238, 1315, 1237, 1687, 2215, 1236,
	1020, 1235, 1827, 2063, 1700, 1878, 579, 988, 1983, 1984,
	1216, 1835, 1419, 3260, 1031, 582, 3108, 1051, 2700, 2204,
	1038, 1032, 1879, 1840, 2167, 1257, 1983, 2009, 1199, 800,
	1031, 2000, 1963, 1856, 752, 2132, 626, 1032, 1967, 2196,
	1000, 1601, 1601, 1880, 2866, 3157, 1214, 1778, 1883, 3315,
	1838, 1574, 1598, 1598, 1961, 1886, 802, 1310, 1702, 3046,
	208, 1717, 2044, 1392, 2048, 2048, 2061, 1851, 1983, 2195,
	2000, 2081, 2083, 1857, 1799, 1858, 2087, 1859, 1721, 1860,
	1967, 1861, 2149, 1213, 1051, 208, 1882, 1884, 2188, 517,
	1975, 2702, 1887, 1328, 208, 1973, 1847, 208, 783, 802,
	1051, 783, 783, 999, 1875, 1897, 1848, 1696, 1898, 1899,
	2701, 1697, 2130, 512, 990, 2221, 2339, 2008, 2457, 2012,
	1718, 1687, 2215, 3373, 742, 1314, 2163, 742, 803, 1994,
	1949, 2127, 1364, 997, 2140, 1687, 2215, 1325, 2165, 1909,
	1378, 803, 1906, 1907, 2138, 803, 794, 1345, 1348, 794,
	1311, 1703, 2743, 3381, 2660, 1018, 2113, 1849, 1957, 1033,
	2123, 2124, 1201, 684, 1979, 1711, 1958, 635, 634, 1959,
	2166, 1703, 1964, 1687, 1684, 1033, 992, 3237, 992, 2607,
	208, 2593, 625, 2164, 624, 3421, 2006, 1552, 2556, 2381,
	1354, 799, 2358, 2359, 1877, 1586, 1698, 1722, 1346, 1810,
	3044, 2618, 2187, 1216, 2102, 2661, 2602, 1728, 1700, 961,
	1501, 2379, 1051, 628, 1713, 743, 2558, 208, 743, 664,
	2877, 2543, 2056, 2085, 2013, 208, 803, 3372, 2072, 2589,
	1703, 139, 561, 2143, 799, 208, 2093, 2094, 2176, 2108,
	2109, 2886, 2104, 2587, 3037, 2264, 2000, 2225, 208, 1570,
	3340, 1152, 2591, 1556, 1316, 3401, 1947, 1723, 1724, 1950,
	2660, 756, 1702, 208, 1051, 3388, 1719, 208, 208, 2951,
	3034, 2867, 3105, 3304, 3118, 2178, 1512, 3247, 1626, 2103,
	1868, 2150, 766, 3276, 2586, 1559, 765, 1699, 1467, 2003,
	1711, 756, 1866, 208, 1720, 208, 1256, 2590, 208, 1198,
	757, 2237, 756, 2420, 1554, 2107, 2158, 2131, 1946, 2122,
	802, 3035, 1960, 208, 2128, 2376, 3045, 1504, 1505, 1557,
	208, 1962, 208, 3158, 208, 567, 2377, 1361, 3073, 2382,
	208, 1143, 2946, 208, 2207, 208, 2200, 208, 2157, 208,
	208, 1555, 208, 1152, 1152, 1152, 1166, 1152, 2953, 1601,
	2250, 208, 208, 2161, 208, 1703, 744, 2259, 2506, 744,
	1598, 208, 3371, 2372, 513, 586, 2230, 2345, 2190, 2192,
	2181, 3341, 3104, 1696, 208, 2234, 208, 1697, 1725, 2328,
	2330, 2242, 1483, 2244, 2222, 2562, 1488, 2304, 2305, 2896,
	2273, 2329, 1732, 2237, 2198, 2237, 2235, 753, 208, 208,
	208, 1391, 208, 998, 2206, 1966, 569, 2216, 2218, 2219,
	2220, 2841, 1974, 1362, 3274, 1558, 514, 2223, 579, 2172,
	1312, 1013, 1166, 1166, 1333, 208, 2282, 582, 2282, 1171,
	2247, 685, 2238, 1948, 3338, 1846, 2337, 2740, 2338, 3422,
	2315, 3399, 1726, 3275, 2263, 3339, 3380, 2291, 2348, 3378,
	2208, 2300, 3030, 1811, 515, 3031, 516, 2331, 745, 2332,
	3189, 745, 1698, 139, 2797, 2306, 2286, 3077, 1556, 2378,
	3106, 2293, 2648, 2271, 1700, 1324, 2343, 2297, 2380, 2298,
	1164, 2299, 1166, 1363, 1400, 2301, 1774, 1703, 1296, 1549,
	2307, 1699, 3033, 1017, 2317, 1011, 746, 2302, 1006, 746,
	1559, 563, 504, 3416, 3036, 1399, 2373, 2741, 2505, 3400,
	2257, 2350, 2993, 2952, 1712, 1778, 1674, 1739, 568, 2105,
	1467, 2398, 2399, 2536, 208, 3163, 3162, 3145, 1702, 2519,
	3227, 3049, 2855, 2649, 1557, 2570, 2408, 1738, 3048, 2566,
	2272, 3402, 2254, 2347, 2353, 2251, 792, 2296, 742, 1794,
	1272, 2355, 1272, 1783, 1272, 1782, 1164, 1164, 565, 1756,
	2344, 587, 588, 3248, 1893, 1735, 2739, 3284, 1874, 1667,
	794, 2352, 1399, 1671, 2822, 2913, 3081, 2248, 2333, 1259,
	3146, 2209, 2577, 2099, 1560, 2576, 2409, 2364, 1709, 1710,
	1841, 2503, 1398, 2502, 2137, 562, 800, 2136, 2798, 2135,
	2520, 2000, 2261, 2371, 2799, 793, 3032, 1230, 3153, 1244,
	1242, 683, 1051, 2486, 2491, 2349, 1164, 2351, 3232, 2498,
	2499, 1703, 519, 1400, 1231, 3066, 803, 2694, 1792, 2500,
	1558, 208, 566, 2620, 208, 3385, 676, 2346, 1669, 743,
	2518, 208, 2365, 564, 208, 208, 1051, 3415, 2101, 590,
	589, 1694, 2994, 2100, 1670, 1051, 3177, 3143, 2999, 1398,
	2415, 2812, 208, 1894, 3287, 2017, 3233, 3387, 3356, 3244,
	1376, 2514, 1358, 3123, 1865, 1356, 1334, 208, 1344, 3047,
	1342, 2524, 2525, 2992, 2890, 3154, 2478, 2723, 1340, 3144,
	2540, 2443, 2479, 2383, 2258, 208, 208, 208, 2232, 591,
	592, 208, 2202, 2156, 208, 2523, 2513, 1626, 3249, 2554,
	796, 208, 208, 208, 208, 208, 1580, 2531, 2210, 2211,
	2527, 2532, 2560, 1577, 2541, 208, 208, 3288, 2509, 3234,
	2481, 2482, 2483, 208, 2521, 1377, 1306, 1338, 1336, 2552,
	2341, 2492, 1330, 1626, 1240, 208, 1152, 989, 208, 989,
	992, 2340, 2016, 3334, 1051, 2507, 2334, 1699, 1876, 2567,
	1853, 1051, 2579, 2537, 2583, 2584, 208, 992, 1659, 208,
	208, 1515, 1309, 1220, 754, 3281, 3023, 2911, 1601, 208,
	744, 2872, 1152, 208, 2870, 1152, 1152, 1152, 2854, 1598,
	2522, 3307, 208, 2647, 2538, 2539, 2632, 2751, 208, 1243,
	1241, 2555, 2601, 2631, 208, 2637, 208, 681, 682, 988,
	2277, 988, 518, 208, 1601, 2495, 1375, 1864, 1357, 2497,
	2561, 1355, 2563, 2564, 1343, 1598, 1341, 2266, 1771, 2594,
	2508, 2595, 674, 675, 1339, 2265, 1152, 1152, 2578, 2633,
	2581, 2245, 1824, 1823, 208, 208, 1821, 1819, 208, 2597,
	1701, 1816, 908, 2526, 2681, 2651, 2655, 2603, 1551, 2613,
	2667, 2614, 2534, 208, 2606, 1051, 208, 208, 1051, 208,
	2617, 2592, 2207, 2656, 2697, 1701, 1814, 2612, 1812, 2544,
	791, 2608, 745, 1337, 1335, 208, 2616, 1803, 1329, 1753,
	1239, 204, 1751, 507, 508, 759, 761, 525, 507, 525,
	535, 540, 2604, 2611, 556, 1741, 2605, 1742, 1730, 1727,
	1714, 1741, 204, 1704, 2565, 2571, 990, 3193, 990, 1587,
	746, 1402, 2692, 970, 3382, 3097, 3096, 2362, 1051, 1690,
	673, 2664, 1195, 2707, 204, 2696, 2673, 3195, 803, 1051,
	2664, 208, 2600, 2257, 2194, 1626, 139, 971, 2680, 2922,
	1711, 1850, 1166, 2654, 1871, 2666, 2726, 3213, 2177, 2177,
	2675, 2676, 2677, 2177, 2678, 2679, 1409, 1410, 2534, 2175,
	2193, 1373, 1374, 3239, 2191, 3000, 1409, 1410, 2704, 2212,
	2197, 2708, 1406, 2709, 2229, 520, 2199, 3280, 2735, 2736,
	2737, 3251, 1412, 1896, 1626, 1626, 2635, 2711, 2363, 3397,
	2639, 1552, 2900, 1403, 2895, 2837, 2285, 1976, 809, 2646,
	1626, 1626, 2086, 1662, 1593, 2542, 1601, 2761, 1411, 2809,
	2731, 2705, 3414, 507, 507, 3253, 1483, 1598, 1411, 972,
	1480, 204, 531, 2843, 208, 2449, 2450, 2750, 2742, 2744,
	2745, 1626, 1409, 1410, 2757, 2169, 2168, 2746, 208, 1319,
	2237, 2169, 2548, 2763, 1051, 1318, 2170, 2764, 2023, 2018,
	1991, 2691, 2970, 2842, 2766, 1601, 1601, 1556, 2738, 2774,
	1478, 2826, 1160, 2068, 208, 1049, 1598, 1598, 2801, 1476,
	2776, 1601, 1601, 3423, 2706, 1360, 1164, 3224, 1359, 3137,
	3135, 3091, 1598, 1598, 3068, 3017, 2941, 2930, 2906, 1559,
	2802, 2893, 2712, 2892, 2891, 2869, 2831, 2674, 2645, 2643,
	2019, 2336, 1601, 2335, 2813, 2020, 2295, 2270, 1554, 208,
	2024, 2025, 2246, 1598, 2815, 2816, 2064, 139, 1978, 2810,
	2878, 1863, 1862, 1557, 1806, 2748, 2850, 1805, 1804, 1786,
	1764, 1763, 1759, 1758, 1757, 2833, 2754, 1755, 1754, 2887,
	1393, 208, 208, 208, 1372, 1555, 1371, 1347, 1331, 1268,
	1267, 1266, 1265, 1264, 2889, 1263, 1906, 2767, 1051, 208,
	2840, 1262, 1261, 1152, 2882, 1260, 1258, 1253, 1252, 1251,
	1250, 1249, 1906, 2777, 1212, 1211, 1210, 1209, 1208, 1207,
	208, 2903, 2858, 1206, 2926, 1200, 1194, 1192, 1191, 1016,
	1015, 945, 2915, 208, 208, 1152, 1152, 1152, 855, 208,
	208, 208, 1665, 2805, 208, 208, 767, 619, 751, 3156,
	2918, 208, 2883, 1366, 74, 2207, 1202, 2818, 2819, 1558,
	606, 68, 2937, 2919, 1051, 2868, 1771, 2950, 3292, 740,
	2585, 1852, 1332, 1854, 2871, 2511, 2873, 2914, 2110, 3273,
	2978, 2419, 3219, 3117, 2015, 1497, 70, 843, 2905, 928,
	3024, 2839, 2857, 2321, 2968, 2320, 810, 1054, 1675, 849,
	2916, 1688, 2152, 2047, 1597, 2920, 852, 1599, 854, 208,
	853, 1600, 2928, 2927, 1499, 1626, 992, 851, 1596, 2899,
	2933, 2943, 2260, 2932, 2289, 1247, 2964, 2938, 2939, 2955,
	2909, 992, 2944, 2940, 730, 1679, 1972, 2010, 2414, 2948,
	1494, 823, 845, 2007, 1009, 822, 2516, 2291, 2659, 2836,
	3086, 989, 1892, 2354, 1889, 992, 622, 2446, 1992, 1001,
	2069, 2062, 2058, 1380, 1469, 2290, 1041, 826, 989, 1970,
	1485, 208, 2388, 2529, 2668, 2147, 1900, 1773, 969, 968,
	967, 1051, 3298, 1051, 3295, 2949, 1601, 1668, 2162, 1461,
	2634, 839, 1003, 1165, 2496, 2695, 2956, 1598, 1217, 2898,
	3238, 673, 1460, 208, 208, 208, 2991, 763, 3229, 1028,
	1027, 1026, 2569, 988, 3420, 208, 2910, 2865, 175, 172,
	174, 208, 1014, 208, 173, 2495, 208, 208, 208, 556,
	988, 2880, 2619, 3005, 90, 208, 208, 1152, 1586, 1051,
	809, 1152, 37, 36, 809, 204, 35, 204, 204, 3004,
	1157, 3009, 204, 2531, 3013, 3002, 3003, 17, 3007, 208,
	204, 1173, 1051, 3022, 115, 1152, 114, 113, 2947, 112,
	111, 110, 109, 3052, 108, 208, 1175, 3043, 1179, 3041,
	1185, 107, 106, 3042, 3064, 1197, 105, 104, 3053, 3054,
	103, 102, 101, 100, 3083, 99, 208, 98, 97, 1219,
	96, 95, 1051, 204, 204, 94, 1157, 93, 92, 91,
	34, 3059, 3070, 3010, 3071, 552, 549, 50, 204, 1771,
	990, 3085, 49, 89, 88, 16, 1255, 33, 1051, 14,
	3020, 3021, 54, 55, 3092, 2068, 2068, 990, 13, 3082,
	204, 204, 204, 204, 1157, 29, 3090, 3084, 3051, 30,
	80, 2656, 556, 79, 204, 3067, 28, 15, 3101, 27,
	3072, 25, 3098, 1304, 3129, 26, 1051, 3107, 11, 3001,
	1307, 3063, 3060, 3109, 208, 8, 208, 3006, 1051, 208,
	1289, 7, 10, 3089, 12, 24, 1626, 208, 2064, 2064,
	3012, 144, 3114, 143, 3079, 73, 142, 3125, 72, 141,
	140, 71, 2664, 3140, 23, 9, 22, 136, 208, 3182,
	2901, 67, 138, 137, 3130, 3131, 64, 135, 134, 204,
	208, 65, 133, 132, 66, 131, 3139, 21, 208, 3181,
	5, 3133, 3138, 1152, 204, 2068, 2068, 2068, 208, 3173,
	53, 1626, 6, 3102, 2698, 3055, 83, 84, 31, 540,
	3159, 62, 2257, 61, 60, 20, 52, 1601, 19, 208,
	3185, 166, 3191, 3171, 165, 164, 163, 159, 1598, 158,
	3198, 162, 160, 161, 3180, 157, 130, 168, 208, 3197,
	167, 3196, 155, 152, 208, 151, 154, 2918, 2064, 2064,
	2064, 3192, 156, 153, 208, 3186, 150, 169, 3188, 129,
	3194, 1462, 1463, 1464, 1465, 1466, 57, 3190, 128, 1049,
	3226, 127, 1601, 126, 125, 1626, 124, 3235, 56, 3202,
	3203, 3222, 18, 1598, 3225, 3212, 3217, 2, 992, 992,
	1, 1482, 0, 0, 3246, 3115, 0, 1495, 0, 0,
	208, 1152, 2656, 0, 3166, 3167, 208, 0, 2512, 0,
	1152, 1152, 2515, 0, 0, 0, 0, 0, 208, 0,
	208, 3267, 0, 0, 0, 3252, 0, 0, 0, 3185,
	3258, 3255, 0, 3115, 3259, 0, 0, 3277, 0, 0,
	0, 208, 0, 3270, 0, 1909, 1601, 208, 208, 3289,
	1051, 2550, 2551, 3265, 3266, 0, 3263, 1598, 208, 0,
	3264, 0, 3300, 0, 3149, 0, 3301, 0, 0, 3305,
	0, 0, 3308, 3165, 3310, 3294, 3312, 0, 0, 0,
	3271, 0, 3272, 0, 3302, 0, 0, 0, 3320, 3319,
	208, 0, 0, 0, 0, 3316, 3314, 0, 0, 0,
	0, 3345, 507, 0, 0, 3187, 0, 0, 0, 3290,
	0, 0, 3333, 3332, 3330, 3331, 1545, 1545, 1545, 0,
	0, 0, 3359, 204, 0, 204, 208, 0, 204, 0,
	0, 0, 3361, 3368, 3363, 0, 3210, 0, 1173, 3360,
	1157, 204, 3369, 0, 3370, 208, 3365, 989, 0, 204,
	1173, 525, 3366, 3367, 204, 1173, 992, 0, 0, 0,
	556, 3376, 989, 3379, 3377, 3347, 0, 0, 0, 208,
	0, 3309, 3383, 0, 3300, 3391, 3386, 3393, 3390, 3384,
	0, 3395, 0, 3396, 0, 809, 989, 0, 0, 0,
	0, 3362, 0, 3364, 0, 0, 0, 0, 3404, 3403,
	0, 2068, 2068, 0, 0, 0, 3411, 0, 0, 988,
	0, 0, 3410, 0, 3412, 3413, 3417, 3257, 0, 0,
	0, 0, 0, 0, 988, 0, 0, 0, 0, 3418,
	3419, 3389, 3424, 0, 3425, 0, 0, 0, 3428, 3429,
	3430, 3432, 3433, 0, 0, 0, 0, 0, 988, 0,
	3437, 0, 0, 2291, 2064, 2064, 0, 1909, 3435, 2385,
	2386, 0, 0, 0, 0, 3291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3306, 0, 0, 0, 0,
	0, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068,
	2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068,
	992, 2068, 0, 0, 0, 0, 1409, 1410, 992, 0,
	0, 204, 0, 0, 0, 0, 990, 0, 0, 0,
	0, 992, 2762, 0, 0, 0, 0, 0, 0, 0,
	0, 990, 1412, 0, 2064, 2064, 2064, 2064, 2064, 2064,
	2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064,
	2064, 2064, 2064, 0, 2064, 990, 204, 204, 1411, 2472,
	2473, 2474, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1791, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 204, 0, 204, 0, 0, 0,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1807, 0, 0, 0, 0, 1145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 556, 0, 3037, 2847, 0, 0, 0,
	0, 0, 204, 0, 1157, 204, 0, 0, 0, 1221,
	1224, 0, 0, 0, 0, 0, 0, 556, 1439, 1440,
	1441, 3034, 204, 0, 3027, 0, 0, 204, 204, 0,
	204, 0, 204, 0, 204, 0, 204, 3025, 0, 0,
	0, 0, 0, 3029, 1870, 0, 0, 0, 1872, 0,
	1873, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 1302, 3035, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 540, 0,
	0, 0, 0, 2904, 556, 0, 0, 0, 0, 0,
	0, 0, 3028, 0, 0, 0, 0, 1890, 0, 1895,
	0, 0, 0, 0, 0, 1902, 0, 0, 1320, 989,
	989, 0, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
	1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
	1939, 1940, 1941, 1942, 1943, 1944, 1945, 0, 1951, 0,
	1953, 1954, 1955, 1956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	1980, 988, 988, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 0, 0, 2005,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3030, 0, 0, 3031, 0, 0, 0,
	0, 1409, 1410, 0, 0, 2719, 2720, 1452, 1453, 1454,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 0, 0, 0,
	0, 2060, 507, 2071, 2073, 2078, 0, 1412, 0, 0,
	1458, 0, 0, 3033, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 3036, 0, 507, 0, 0,
	0, 0, 0, 1411, 204, 0, 507, 0, 0, 204,
	0, 1431, 3008, 0, 0, 0, 0, 989, 990, 990,
	0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419,
	0, 0, 0, 0, 0, 2778, 2779, 2780, 2781, 2782,
	2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792,
	2793, 2794, 2795, 2796, 0, 2800, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 1435, 1436, 1437, 0, 0, 988,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 0, 666, 0, 0, 3032, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 1459,
	0, 0, 2068, 1439, 1440, 1441, 0, 0, 0, 58,
	0, 668, 0, 0, 0, 0, 0, 0, 0, 2185,
	59, 0, 0, 0, 0, 0, 1589, 204, 0, 0,
	0, 0, 0, 0, 63, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 2068, 0, 0, 1447, 0,
	204, 989, 0, 0, 0, 2064, 1432, 0, 0, 989,
	0, 0, 0, 0, 69, 204, 0, 0, 0, 204,
	2239, 0, 989, 0, 0, 0, 990, 0, 0, 2241,
	0, 2243, 0, 0, 0, 0, 0, 0, 3134, 0,
	0, 0, 0, 0, 75, 204, 0, 1173, 2064, 0,
	204, 0, 0, 85, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 988, 0, 1791, 0, 0, 0, 0,
	0, 988, 2185, 0, 507, 0, 2294, 0, 0, 0,
	1438, 0, 204, 2068, 988, 204, 0, 204, 0, 204,
	0, 204, 204, 0, 1157, 0, 0, 0, 1433, 0,
	77, 0, 0, 2313, 673, 0, 2185, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 1173, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 2064, 0, 1744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 204, 204, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	990, 0, 0, 0, 0, 0, 0, 204, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 990, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 78, 1448, 0, 0, 0,
	0, 1480, 0, 0, 1451, 63, 1422, 1420, 1421, 1413,
	1414, 1415, 1416, 1418, 1419, 2368, 2369, 0, 0, 0,
	58, 2375, 0, 0, 0, 0, 0, 145, 81, 0,
	82, 59, 0, 0, 0, 69, 0, 0, 0, 0,
	2389, 2390, 0, 0, 0, 63, 2005, 0, 0, 176,
	0, 0, 0, 0, 0, 2397, 0, 0, 0, 0,
	0, 669, 1828, 0, 116, 75, 1173, 0, 2449, 2450,
	0, 2467, 2468, 2469, 85, 69, 0, 0, 76, 0,
	0, 2417, 1842, 1843, 0, 0, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 2432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 117, 0, 0, 85, 0, 0, 0, 76, 0,
	0, 77, 0, 149, 0, 0, 0, 0, 2464, 0,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 2078, 2078, 2078, 0, 0, 0, 171,
	0, 0, 909, 204, 0, 0, 0, 0, 1545, 0,
	0, 77, 0, 0, 0, 0, 2501, 0, 204, 0,
	667, 0, 0, 507, 0, 0, 507, 0, 0, 0,
	0, 0, 0, 507, 0, 0, 507, 507, 0, 0,
	0, 205, 204, 0, 0, 0, 0, 0, 0, 0,
	2455, 0, 0, 0, 1173, 0, 3122, 0, 0, 2144,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 1173,
	0, 0, 0, 0, 0, 0, 78, 809, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 2185, 2185, 204,
	809, 0, 0, 2185, 0, 0, 2573, 0, 0, 3148,
	0, 0, 656, 2185, 2573, 2185, 2573, 2573, 145, 81,
	0, 82, 0, 0, 0, 2588, 78, 204, 204, 0,
	0, 0, 0, 0, 0, 638, 0, 0, 0, 0,
	176, 0, 0, 2465, 0, 0, 0, 204, 0, 0,
	1157, 0, 669, 0, 0, 116, 0, 0, 145, 81,
	0, 82, 0, 0, 0, 639, 0, 0, 2622, 0,
	0, 2624, 2627, 0, 640, 0, 0, 0, 178, 0,
	176, 204, 0, 0, 0, 204, 0, 0, 0, 641,
	0, 0, 669, 0, 204, 116, 0, 3216, 0, 0,
	1157, 0, 117, 0, 0, 661, 2185, 0, 507, 2657,
	0, 0, 0, 0, 149, 2185, 0, 0, 178, 0,
	642, 0, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 0, 0, 2466, 0, 643, 0, 0,
	171, 0, 117, 0, 0, 0, 204, 1791, 0, 0,
	1791, 0, 0, 0, 149, 0, 0, 644, 0, 0,
	645, 148, 177, 0, 0, 2703, 0, 0, 1157, 204,
	0, 204, 170, 0, 0, 0, 0, 0, 1409, 1410,
	171, 0, 0, 0, 0, 2710, 660, 204, 0, 1902,
	0, 0, 0, 0, 0, 2714, 2715, 0, 0, 2718,
	0, 148, 0, 2721, 1412, 0, 0, 0, 0, 0,
	0, 0, 2725, 0, 0, 0, 0, 0, 0, 0,
	0, 2732, 0, 0, 2501, 0, 0, 0, 0, 0,
	1411, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 2759, 0, 2752, 2461, 2462, 2463, 0,
	0, 2226, 0, 2460, 2458, 2459, 2451, 2452, 2453, 2454,
	2456, 2457, 0, 0, 2768, 2769, 0, 2770, 2771, 2772,
	0, 0, 2773, 0, 0, 0, 2775, 0, 647, 0,
	0, 0, 0, 0, 2722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 664, 648, 0, 0, 0, 0,
	1434, 1435, 1436, 1437, 0, 0, 0, 2803, 2804, 0,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 663, 0, 0, 204, 204, 0, 0, 649,
	0, 0, 650, 0, 0, 2821, 507, 0, 658, 0,
	1439, 1440, 1441, 2303, 0, 651, 0, 0, 0, 0,
	507, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 659, 1173, 0, 63, 0,
	0, 0, 0, 0, 653, 0, 0, 0, 2851, 0,
	0, 0, 0, 1432, 0, 0, 655, 0, 0, 0,
	0, 654, 0, 2859, 2862, 0, 0, 0, 69, 0,
	0, 0, 662, 0, 0, 0, 0, 0, 0, 0,
	0, 556, 0, 657, 0, 0, 2879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 76, 0, 2897, 204, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 204, 0, 0, 0, 205, 1056, 205, 205, 1056,
	0, 1056, 205, 0, 0, 1433, 0, 0, 0, 1545,
	205, 0, 2185, 204, 77, 0, 0, 0, 0, 0,
	2929, 0, 844, 87, 0, 2313, 2313, 0, 0, 0,
	0, 673, 673, 2185, 0, 0, 1791, 1791, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	0, 1056, 1056, 205, 205, 0, 0, 0, 0, 0,
	0, 0, 1409, 1410, 0, 2957, 2958, 0, 205, 0,
	0, 2962, 2963, 0, 0, 0, 2966, 2967, 0, 0,
	0, 0, 0, 2971, 0, 0, 0, 0, 1412, 0,
	205, 205, 205, 205, 0, 1056, 1056, 0, 0, 87,
	1056, 2979, 2976, 1056, 205, 0, 0, 0, 0, 2980,
	0, 0, 0, 0, 1411, 0, 209, 0, 0, 78,
	0, 0, 0, 1422, 1420, 1421, 1413, 1414, 1415, 1416,
	1418, 1419, 0, 0, 0, 0, 0, 0, 0, 2449,
	2450, 0, 2467, 2468, 2469, 0, 0, 0, 0, 0,
	1056, 145, 81, 0, 82, 0, 0, 204, 2727, 0,
	0, 0, 784, 1173, 0, 204, 0, 0, 0, 205,
	0, 804, 0, 176, 0, 0, 573, 0, 204, 0,
	0, 0, 0, 0, 205, 669, 0, 0, 116, 0,
	0, 0, 0, 0, 1417, 2185, 2185, 2185, 573, 2464,
	0, 979, 0, 0, 0, 0, 0, 1173, 0, 0,
	0, 178, 2862, 2185, 0, 2573, 0, 0, 1173, 1173,
	204, 0, 0, 0, 1439, 1440, 1441, 204, 204, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 149, 0, 0,
	0, 3076, 0, 0, 0, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 2609, 2185, 0, 0,
	0, 2455, 0, 171, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1173, 0,
	0, 2862, 0, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 2638, 0, 0, 2640, 2641, 2642, 3110, 3111,
	3112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2470, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 3120, 3121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3128, 0,
	0, 0, 0, 0, 2465, 0, 2687, 2688, 0, 0,
	0, 0, 0, 0, 0, 0, 2185, 0, 2573, 1433,
	0, 3142, 0, 0, 0, 0, 0, 875, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2862,
	0, 0, 0, 0, 0, 0, 0, 3164, 0, 0,
	556, 0, 0, 58, 0, 0, 0, 809, 0, 0,
	0, 0, 2627, 0, 59, 0, 203, 0, 205, 0,
	204, 0, 0, 0, 2862, 0, 0, 2862, 63, 1056,
	1173, 205, 205, 0, 0, 0, 0, 580, 1056, 205,
	0, 0, 0, 0, 205, 0, 2466, 0, 2862, 2862,
	0, 204, 0, 0, 0, 0, 0, 0, 69, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2759, 0, 0, 0, 0, 1056, 507, 0, 0, 0,
	821, 0, 0, 0, 0, 0, 3142, 0, 75, 1421,
	1413, 1414, 1415, 1416, 1418, 1419, 3228, 85, 0, 3231,
	0, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 2573, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	1173, 0, 1173, 0, 0, 0, 991, 2461, 2462, 2463,
	0, 0, 0, 0, 2460, 2458, 2459, 2451, 2452, 2453,
	2454, 2456, 2457, 3285, 0, 0, 0, 0, 0, 1173,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 809, 0, 0, 0, 0, 0, 0, 0,
	1056, 205, 0, 0, 0, 0, 0, 1056, 0, 0,
	0, 87, 0, 87, 0, 87, 0, 0, 0, 0,
	0, 0, 2759, 3329, 3329, 3329, 0, 0, 2449, 2450,
	0, 2467, 2468, 2469, 0, 0, 0, 0, 0, 0,
	0, 0, 3348, 0, 0, 0, 205, 205, 0, 78,
	0, 0, 0, 205, 0, 0, 0, 0, 2185, 0,
	2862, 0, 2862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 205, 3329, 205, 3142, 0, 0,
	1052, 145, 81, 1153, 82, 1052, 0, 0, 2464, 0,
	804, 87, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 1173, 0, 176, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 669, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 2934, 2935, 2936, 0, 0,
	0, 0, 1056, 0, 1056, 1153, 1153, 0, 0, 1056,
	0, 178, 205, 0, 0, 205, 3329, 0, 0, 0,
	0, 0, 0, 0, 1056, 1056, 0, 0, 0, 0,
	2455, 0, 205, 0, 0, 117, 0, 205, 205, 0,
	205, 0, 205, 0, 205, 0, 205, 149, 0, 1153,
	1153, 0, 0, 0, 1153, 177, 2471, 1153, 0, 0,
	0, 0, 0, 0, 0, 170, 0, 0, 0, 205,
	0, 1409, 1410, 171, 1442, 1443, 1444, 1452, 1453, 1454,
	0, 2470, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 1299, 0, 0, 1412, 0, 784,
	1458, 0, 0, 0, 1153, 879, 0, 0, 0, 0,
	0, 0, 0, 2465, 1056, 0, 0, 1472, 0, 0,
	0, 0, 0, 1411, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 1481, 0, 0, 1428, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 821, 0, 0, 0,
	0, 0, 0, 0, 1135, 0, 0, 0, 0, 1135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 1435, 1436, 1437, 3061, 0, 1056,
	0, 0, 0, 1417, 0, 2466, 0, 0, 0, 0,
	203, 0, 203, 203, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 580, 1449, 0, 0, 1459,
	0, 0, 0, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1409, 1410, 0, 0, 1455, 0, 1456, 0, 0, 0,
	0, 0, 0, 1426, 1427, 0, 1056, 0, 203, 203,
	87, 0, 0, 1566, 0, 1569, 1412, 0, 1447, 205,
	0, 0, 1056, 203, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1411, 0, 1457, 203, 203, 203, 203, 0,
	1431, 0, 0, 0, 0, 0, 2461, 2462, 2463, 203,
	0, 0, 0, 2460, 2458, 2459, 2451, 2452, 2453, 2454,
	2456, 2457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2717, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 1435, 1436, 1437, 0, 0, 1433, 0,
	0, 0, 1417, 1052, 203, 0, 0, 0, 0, 0,
	0, 0, 1153, 573, 1056, 0, 0, 0, 573, 203,
	0, 0, 0, 1450, 0, 0, 0, 205, 0, 0,
	0, 0, 1439, 1440, 1441, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 1409, 1410, 0, 0, 0, 1052,
	205, 0, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 1056, 0, 0, 205,
	1412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 1411, 0, 0, 0,
	205, 0, 0, 0, 1431, 0, 1448, 0, 0, 1423,
	1424, 1430, 1429, 1425, 1451, 0, 1422, 1420, 1421, 1413,
	1414, 1415, 1416, 1418, 1419, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 205, 0, 205, 0, 205,
	0, 205, 205, 0, 0, 1056, 1056, 1056, 0, 1056,
	2716, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 205, 0, 0, 1434, 1435, 1436, 1437,
	0, 0, 0, 0, 1153, 0, 1417, 1433, 0, 0,
	0, 1052, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 205, 205, 0, 205, 0, 1439, 1440, 1441, 0,
	0, 0, 804, 0, 0, 0, 0, 1135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1568, 0,
	991, 0, 0, 203, 0, 0, 0, 821, 0, 1432,
	0, 0, 0, 1135, 0, 0, 203, 1568, 0, 0,
	0, 0, 0, 0, 580, 0, 0, 0, 0, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 1154, 0, 1053, 1422, 1420, 1421, 1413, 1414,
	1415, 1416, 1418, 1419, 0, 0, 1153, 0, 1153, 0,
	0, 0, 0, 1153, 784, 0, 0, 784, 784, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1153, 1153,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	0, 573, 0, 0, 1154, 1154, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1409, 1410, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1969, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 804, 1412, 1154, 1154,
	0, 0, 0, 1154, 0, 1135, 1154, 0, 0, 1481,
	0, 0, 0, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1056, 0, 0, 0, 1052, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 580, 0, 0, 0,
	0, 0, 0, 1154, 0, 0, 0, 0, 1056, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 979, 0, 1422,
	1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419, 0, 0,
	0, 203, 203, 0, 1569, 0, 0, 0, 203, 0,
	1409, 1410, 0, 1417, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 1052, 0, 0, 87, 203, 0, 203,
	0, 203, 0, 0, 0, 0, 1412, 0, 0, 1409,
	1410, 0, 0, 1439, 1440, 1441, 0, 205, 205, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 0, 1411, 0, 0, 1412, 0, 205, 1056, 0,
	1431, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 0, 0,
	1052, 1411, 0, 0, 0, 0, 1432, 203, 0, 1431,
	203, 205, 0, 0, 1056, 205, 1052, 1056, 1056, 1056,
	0, 0, 0, 0, 205, 0, 2374, 203, 0, 0,
	0, 0, 580, 203, 0, 203, 0, 203, 0, 203,
	0, 203, 1434, 1435, 1436, 1437, 0, 0, 0, 87,
	0, 0, 1417, 0, 0, 2367, 0, 0, 0, 0,
	0, 0, 1135, 0, 203, 0, 0, 0, 1056, 1056,
	0, 1434, 1435, 1436, 1437, 0, 205, 0, 0, 87,
	0, 1417, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 87, 1056, 1433, 205,
	1056, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1439, 1440, 1441, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 87,
	0, 87, 0, 0, 0, 0, 0, 1135, 0, 0,
	0, 0, 1053, 0, 0, 0, 0, 0, 0, 0,
	1056, 1154, 0, 0, 1432, 0, 0, 1153, 87, 0,
	0, 1056, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 1135, 0, 0, 1420, 1421, 1413,
	1414, 1415, 1416, 1418, 1419, 0, 0, 1433, 0, 0,
	1135, 0, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 1433, 0, 0, 1153,
	1153, 1153, 0, 1153, 0, 0, 0, 0, 0, 991,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 0, 1969, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	0, 0, 0, 1154, 0, 0, 0, 0, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1135, 0, 0, 1422, 1420, 1421, 1413, 1414,
	1415, 1416, 1418, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 1420, 1421, 1413, 1414, 1415,
	1416, 1418, 1419, 0, 205, 205, 0, 0, 0, 0,
	0, 0, 0, 0, 1135, 0, 0, 0, 0, 0,
	1056, 205, 203, 0, 0, 1056, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 1056, 1056, 1056,
	203, 0, 0, 0, 580, 0, 0, 0, 979, 0,
	0, 0, 0, 205, 0, 1154, 0, 1154, 0, 0,
	0, 0, 1154, 0, 0, 0, 1056, 0, 0, 0,
	203, 0, 0, 0, 0, 203, 0, 1154, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	203, 0, 203, 0, 203, 0, 203, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1052, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 87, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 1053, 0, 0,
	0, 1052, 87, 0, 87, 203, 203, 203, 0, 203,
	0, 0, 0, 1056, 0, 1056, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 804, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 205, 205, 1056,
	0, 1056, 0, 1056, 0, 0, 0, 0, 0, 0,
	0, 87, 1053, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1153, 0, 1056, 0, 0, 1056, 0, 0,
	1052, 0, 0, 0, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 1153, 742,
	0, 1153, 1153, 1153, 1056, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 0, 717, 0, 1053, 0, 0, 0, 0,
	0, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1153, 1153, 0, 0, 718, 0, 0, 0,
	0, 720, 0, 0, 0, 748, 0, 0, 1056, 0,
	0, 726, 727, 0, 0, 0, 1135, 736, 0, 0,
	1056, 1052, 0, 0, 1052, 1135, 0, 0, 991, 205,
	743, 721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 1568, 0, 0,
	205, 0, 87, 0, 0, 1056, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 979, 979, 1053, 722, 0,
	0, 0, 0, 0, 0, 1052, 716, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 723, 724, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 1135, 0, 1154, 0, 0, 0,
	0, 1135, 0, 0, 729, 0, 0, 0, 0, 1053,
	0, 725, 203, 203, 0, 0, 0, 0, 0, 0,
	1568, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 1056, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 1056, 0, 0, 203, 0, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	1052, 0, 0, 0, 0, 0, 0, 0, 1154, 1154,
	1154, 0, 1154, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 1056, 0, 0, 1135, 0, 0, 1135, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 732, 0,
	0, 203, 0, 0, 733, 0, 0, 0, 0, 0,
	0, 714, 0, 745, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 203, 715, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 1135, 0,
	0, 731, 203, 0, 0, 749, 750, 0, 0, 1135,
	0, 746, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 1153,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	739, 1153, 1153, 1153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1135, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1409, 1410, 0, 1442, 1443, 1444, 1452, 1453, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 1445,
	0, 0, 0, 87, 0, 0, 1412, 1053, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 1052, 0, 1052,
	0, 0, 1411, 0, 0, 0, 0, 0, 0, 0,
	1431, 1053, 0, 0, 0, 0, 0, 1428, 0, 0,
	1053, 0, 0, 0, 0, 0, 0, 0, 1135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1153, 0, 1052, 0, 1153, 0, 203,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 1435, 1436, 1437, 203, 0, 1052, 0,
	0, 1153, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1135, 0, 1409, 1410, 991, 1442,
	1443, 1444, 1452, 1453, 1454, 1449, 0, 0, 1459, 0,
	0, 1154, 1439, 1440, 1441, 1445, 0, 0, 1052, 1053,
	0, 0, 1412, 0, 0, 1458, 1053, 0, 203, 0,
	0, 0, 0, 1455, 0, 1456, 0, 0, 0, 0,
	0, 0, 1426, 1427, 1052, 0, 0, 1154, 1411, 0,
	1154, 1154, 1154, 0, 0, 0, 1431, 1447, 0, 0,
	0, 0, 0, 1428, 0, 1432, 1969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 0, 0, 0, 1446, 0,
	0, 1154, 1154, 0, 0, 0, 0, 0, 0, 0,
	0, 1135, 0, 1135, 0, 0, 0, 0, 1434, 1435,
	1436, 1437, 0, 0, 0, 0, 0, 0, 1417, 0,
	1053, 0, 0, 1053, 0, 0, 0, 0, 0, 1438,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 1153,
	991, 1449, 0, 0, 1459, 0, 0, 1433, 1439, 1440,
	1441, 0, 0, 1568, 0, 0, 0, 0, 0, 1135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 1456, 1450, 0, 0, 0, 0, 0, 1426, 1427,
	0, 0, 1135, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 1053, 203, 0, 0, 0, 0,
	0, 1432, 203, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 1457,
	0, 0, 1135, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1153, 1135, 0,
	0, 0, 0, 0, 0, 1448, 1153, 1153, 1423, 1424,
	1430, 1429, 1425, 1451, 0, 1422, 1420, 1421, 1413, 1414,
	1415, 1416, 1418, 1419, 0, 1438, 0, 0, 2987, 0,
	0, 2986, 0, 0, 0, 0, 1135, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 1052, 0, 1135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1053,
	0, 0, 0, 0, 0, 0, 1409, 1410, 1450, 1442,
	1443, 1444, 1452, 1453, 1454, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 1412, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1411, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 1448, 0, 0, 1423, 1424, 1430, 1429, 1425, 1451,
	0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419,
	0, 0, 0, 1053, 2437, 0, 203, 2438, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 1435,
	1436, 1437, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1154, 1154, 1154, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 1459, 0, 0, 0, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 1409, 1410, 1053,
	1442, 1443, 1444, 1452, 1453, 1454, 0, 0, 0, 1455,
	0, 1456, 0, 0, 0, 0, 0, 203, 1426, 1427,
	1135, 0, 0, 1412, 821, 0, 1458, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 1411,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 1457,
	0, 0, 0, 0, 1428, 203, 0, 0, 0, 0,
	0, 596, 0, 0, 1446, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 597, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1053, 0, 1053, 1434,
	1435, 1436, 1437, 0, 598, 617, 0, 0, 0, 1417,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 599, 0, 0, 600, 0,
	0, 0, 1449, 0, 0, 1459, 0, 0, 1450, 1439,
	1440, 1441, 0, 0, 623, 0, 0, 0, 0, 0,
	601, 0, 1154, 0, 1053, 0, 1154, 0, 0, 621,
	1455, 0, 1456, 0, 0, 0, 0, 0, 0, 1426,
	1427, 0, 0, 0, 0, 0, 602, 1053, 0, 0,
	1154, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 603, 0, 0, 604,
	627, 0, 0, 0, 630, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 1053, 0, 0,
	0, 1448, 0, 0, 1423, 1424, 1430, 1429, 1425, 1451,
	0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419,
	0, 0, 0, 1053, 2001, 0, 0, 2002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	626, 0, 0, 0, 0, 0, 0, 607, 0, 0,
	0, 1053, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 1450,
	0, 0, 0, 0, 0, 0, 0, 608, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 609, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 1423, 1424, 1430, 1429, 1425,
	1451, 616, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418,
	1419, 0, 0, 612, 0, 0, 625, 0, 624, 0,
	0, 0, 0, 613, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	620, 0, 0, 0, 0, 631, 0, 628, 0, 0,
	0, 618, 0, 0, 0, 0, 1154, 0, 0, 0,
	0, 0, 0, 0, 0, 1154, 1154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1053, 213, 214, 215, 216,
	217, 1057, 218, 1058, 1059, 1060, 1061, 458, 1062, 1063,
	1064, 1065, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 1066, 225, 226, 227, 228, 229, 230, 1067,
	1068, 231, 463, 464, 465, 1069, 232, 466, 1070, 1055,
	1071, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 1072, 242, 0, 243, 244, 245, 1073, 930, 246,
	247, 1074, 1075, 1077, 1076, 1078, 1079, 1080, 248, 249,
	250, 251, 252, 253, 467, 468, 1081, 254, 1082, 256,
	255, 1083, 257, 1084, 1085, 258, 259, 260, 1086, 261,
	1087, 262, 263, 1088, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 1089, 210, 1090, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	1091, 280, 1092, 1093, 931, 281, 282, 1094, 283, 473,
	1095, 474, 284, 1096, 285, 286, 287, 288, 475, 476,
	477, 933, 289, 290, 1097, 291, 292, 294, 0, 0,
	0, 211, 293, 295, 302, 1098, 932, 296, 478, 298,
	297, 299, 300, 301, 479, 1099, 480, 1100, 303, 934,
	481, 935, 304, 305, 306, 936, 307, 308, 0, 0,
	309, 310, 311, 312, 1101, 314, 313, 1102, 315, 482,
	937, 316, 317, 938, 1103, 318, 319, 1104, 1105, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 939, 332, 333, 335, 334, 1106, 212, 940,
	1107, 483, 484, 336, 337, 1108, 338, 339, 340, 1109,
	1110, 342, 343, 344, 1111, 1112, 345, 485, 941, 346,
	942, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	1113, 354, 355, 487, 356, 488, 357, 1114, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 1115,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 1116, 380, 943, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 1117, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 1118, 407, 387, 388, 408, 944, 409,
	491, 410, 411, 1119, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 1120, 423, 424, 422,
	1121, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	1122, 493, 494, 495, 496, 1123, 438, 1124, 432, 433,
	497, 434, 498, 1125, 435, 436, 437, 0, 439, 440,
	1126, 1127, 441, 442, 443, 444, 446, 1128, 447, 1129,
	445, 448, 449, 450, 499, 500, 501, 1130, 452, 451,
	502, 1131, 1132, 1133, 1134, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1050, 0, 0, 0, 0, 0, 0,
	0, 2115, 0, 0, 0, 0, 0, 0, 0, 2116,
	213, 214, 215, 216, 217, 1057, 218, 1058, 1059, 1060,
	1061, 458, 1062, 1063, 1064, 1065, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 1066, 225, 226, 227,
	228, 229, 230, 1067, 1068, 231, 463, 464, 465, 1069,
	232, 466, 1070, 1055, 1071, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 1072, 242, 0, 243, 244,
	245, 1073, 930, 246, 247, 1074, 1075, 1077, 1076, 1078,
	1079, 1080, 248, 249, 250, 251, 252, 253, 467, 468,
	1081, 254, 1082, 256, 255, 1083, 257, 1084, 1085, 258,
	259, 260, 1086, 261, 1087, 262, 263, 1088, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 1089,
	210, 1090, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 1091, 280, 1092, 1093, 931, 281,
	282, 1094, 283, 473, 1095, 474, 284, 1096, 285, 286,
	287, 288, 475, 476, 477, 933, 289, 290, 1097, 291,
	292, 294, 0, 0, 0, 211, 293, 295, 302, 1098,
	932, 296, 478, 298, 297, 299, 300, 301, 479, 1099,
	480, 1100, 303, 934, 481, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 1101, 314,
	313, 1102, 315, 482, 937, 316, 317, 938, 1103, 318,
	319, 1104, 1105, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 1106, 212, 940, 1107, 483, 484, 336, 337, 1108,
	338, 339, 340, 1109, 1110, 342, 343, 344, 1111, 1112,
	345, 485, 941, 346, 942, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 1113, 354, 355, 487, 356, 488,
	357, 1114, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 1115, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 1116, 380,
	943, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 1117, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 1118, 407, 387,
	388, 408, 944, 409, 491, 410, 411, 1119, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	1120, 423, 424, 422, 1121, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 1122, 493, 494, 495, 496, 1123,
	438, 1124, 432, 433, 497, 434, 498, 1125, 435, 436,
	437, 0, 439, 440, 1126, 1127, 441, 442, 443, 444,
	446, 1128, 447, 1129, 445, 448, 449, 450, 499, 500,
	501, 1130, 452, 451, 502, 1131, 1132, 1133, 1134, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 0, 1050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3011, 213, 214, 215, 216,
	217, 1057, 218, 1058, 1059, 1060, 1061, 458, 1062, 1063,
	1064, 1065, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 1066, 225, 226, 227, 228, 229, 230, 1067,
	1068, 231, 463, 464, 465, 1069, 232, 466, 1070, 1055,
	1071, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 1072, 242, 0, 243, 244, 245, 1073, 930, 246,
	247, 1074, 1075, 1077, 1076, 1078, 1079, 1080, 248, 249,
	250, 251, 252, 253, 467, 468, 1081, 254, 1082, 256,
	255, 1083, 257, 1084, 1085, 258, 259, 260, 1086, 261,
	1087, 262, 263, 1088, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 1089, 210, 1090, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	1091, 280, 1092, 1093, 931, 281, 282, 1094, 283, 473,
	1095, 474, 284, 1096, 285, 286, 287, 288, 475, 476,
	477, 933, 289, 290, 1097, 291, 292, 294, 0, 0,
	0, 211, 293, 295, 302, 1098, 932, 296, 478, 298,
	297, 299, 300, 301, 479, 1099, 480, 1100, 303, 934,
	481, 935, 304, 305, 306, 936, 307, 308, 0, 0,
	309, 310, 311, 312, 1101, 314, 313, 1102, 315, 482,
	937, 316, 317, 938, 1103, 318, 319, 1104, 1105, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 939, 332, 333, 335, 334, 1106, 212, 940,
	1107, 483, 484, 336, 337, 1108, 338, 339, 340, 1109,
	1110, 342, 343, 344, 1111, 1112, 345, 485, 941, 346,
	942, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	1113, 354, 355, 487, 356, 488, 357, 1114, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 1115,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 1116, 380, 943, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 1117, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 1118, 407, 387, 388, 408, 944, 409,
	491, 410, 411, 1119, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 1120, 423, 424, 422,
	1121, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	1122, 493, 494, 495, 496, 1123, 438, 1124, 432, 433,
	497, 434, 498, 1125, 435, 436, 437, 0, 439, 440,
	1126, 1127, 441, 442, 443, 444, 446, 1128, 447, 1129,
	445, 448, 449, 450, 499, 500, 501, 1130, 452, 451,
	502, 1131, 1132, 1133, 1134, 453, 454, 503, 455, 456,
	457, 1050, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3116, 0, 213, 214,
	215, 216, 217, 1057, 218, 1058, 1059, 1060, 1061, 458,
	1062, 1063, 1064, 1065, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 1066, 225, 226, 227, 228, 229,
	230, 1067, 1068, 231, 463, 464, 465, 1069, 232, 466,
	1070, 1055, 1071, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 1072, 242, 0, 243, 244, 245, 1073,
	930, 246, 247, 1074, 1075, 1077, 1076, 1078, 1079, 1080,
	248, 249, 250, 251, 252, 253, 467, 468, 1081, 254,
	1082, 256, 255, 1083, 257, 1084, 1085, 258, 259, 260,
	1086, 261, 1087, 262, 263, 1088, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 1089, 210, 1090,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 1091, 280, 1092, 1093, 931, 281, 282, 1094,
	283, 473, 1095, 474, 284, 1096, 285, 286, 287, 288,
	475, 476, 477, 933, 289, 290, 1097, 291, 292, 294,
	0, 0, 0, 211, 293, 295, 302, 1098, 932, 296,
	478, 298, 297, 299, 300, 301, 479, 1099, 480, 1100,
	303, 934, 481, 935, 304, 305, 306, 936, 307, 308,
	0, 0, 309, 310, 311, 312, 1101, 314, 313, 1102,
	315, 482, 937, 316, 317, 938, 1103, 318, 319, 1104,
	1105, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 939, 332, 333, 335, 334, 1106,
	212, 940, 1107, 483, 484, 336, 337, 1108, 338, 339,
	340, 1109, 1110, 342, 343, 344, 1111, 1112, 345, 485,
	941, 346, 942, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 1113, 354, 355, 487, 356, 488, 357, 1114,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 1115, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 1116, 380, 943, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 1117, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 1118, 407, 387, 388, 408,
	944, 409, 491, 410, 411, 1119, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 1120, 423,
	424, 422, 1121, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 1122, 493, 494, 495, 496, 1123, 438, 1124,
	432, 433, 497, 434, 498, 1125, 435, 436, 437, 0,
	439, 440, 1126, 1127, 441, 442, 443, 444, 446, 1128,
	447, 1129, 445, 448, 449, 450, 499, 500, 501, 1130,
	452, 451, 502, 1131, 1132, 1133, 1134, 453, 454, 503,
	455, 456, 457, 1050, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2755, 0,
	213, 214, 215, 216, 217, 1057, 218, 1058, 1059, 1060,
	1061, 458, 1062, 1063, 1064, 1065, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 1066, 225, 226, 227,
	228, 229, 230, 1067, 1068, 231, 463, 464, 465, 1069,
	232, 466, 1070, 1055, 1071, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 1072, 242, 0, 243, 244,
	245, 1073, 930, 246, 247, 1074, 1075, 1077, 1076, 1078,
	1079, 1080, 248, 249, 250, 251, 252, 253, 467, 468,
	1081, 254, 1082, 256, 255, 1083, 257, 1084, 1085, 258,
	259, 260, 1086, 261, 1087, 262, 263, 1088, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 1089,
	210, 1090, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 1091, 280, 1092, 1093, 931, 281,
	282, 1094, 283, 473, 1095, 474, 284, 1096, 285, 286,
	287, 288, 475, 476, 477, 933, 289, 290, 1097, 291,
	292, 294, 0, 0, 0, 211, 293, 295, 302, 1098,
	932, 296, 478, 298, 297, 299, 300, 301, 479, 1099,
	480, 1100, 303, 934, 481, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 1101, 314,
	313, 1102, 315, 482, 937, 316, 317, 938, 1103, 318,
	319, 1104, 1105, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 1106, 212, 940, 1107, 483, 484, 336, 337, 1108,
	338, 339, 340, 1109, 1110, 342, 343, 344, 1111, 1112,
	345, 485, 941, 346, 942, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 1113, 354, 355, 487, 356, 488,
	357, 1114, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 1115, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 1116, 380,
	943, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 1117, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 1118, 407, 387,
	388, 408, 944, 409, 491, 410, 411, 1119, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	1120, 423, 424, 422, 1121, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 1122, 493, 494, 495, 496, 1123,
	438, 1124, 432, 433, 497, 434, 498, 1125, 435, 436,
	437, 0, 439, 440, 1126, 1127, 441, 442, 443, 444,
	446, 1128, 447, 1129, 445, 448, 449, 450, 499, 500,
	501, 1130, 452, 451, 502, 1131, 1132, 1133, 1134, 453,
	454, 503, 455, 456, 457, 1050, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2747, 0, 213, 214, 215, 216, 217, 1057, 218, 1058,
	1059, 1060, 1061, 458, 1062, 1063, 1064, 1065, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 1066, 225,
	226, 227, 228, 229, 230, 1067, 1068, 231, 463, 464,
	465, 1069, 232, 466, 1070, 1055, 1071, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 1072, 242, 0,
	243, 244, 245, 1073, 930, 246, 247, 1074, 1075, 1077,
	1076, 1078, 1079, 1080, 248, 249, 250, 251, 252, 253,
	467, 468, 1081, 254, 1082, 256, 255, 1083, 257, 1084,
	1085, 258, 259, 260, 1086, 261, 1087, 262, 263, 1088,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 1089, 210, 1090, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 1091, 280, 1092, 1093,
	931, 281, 282, 1094, 283, 473, 1095, 474, 284, 1096,
	285, 286, 287, 288, 475, 476, 477, 933, 289, 290,
	1097, 291, 292, 294, 0, 0, 0, 211, 293, 295,
	302, 1098, 932, 296, 478, 298, 297, 299, 300, 301,
	479, 1099, 480, 1100, 303, 934, 481, 935, 304, 305,
	306, 936, 307, 308, 0, 0, 309, 310, 311, 312,
	1101, 314, 313, 1102, 315, 482, 937, 316, 317, 938,
	1103, 318, 319, 1104, 1105, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 939, 332,
	333, 335, 334, 1106, 212, 940, 1107, 483, 484, 336,
	337, 1108, 338, 339, 340, 1109, 1110, 342, 343, 344,
	1111, 1112, 345, 485, 941, 346, 942, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 1113, 354, 355, 487,
	356, 488, 357, 1114, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 1115, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	1116, 380, 943, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 1117, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 1118,
	407, 387, 388, 408, 944, 409, 491, 410, 411, 1119,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 1120, 423, 424, 422, 1121, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 1122, 493, 494, 495,
	496, 1123, 438, 1124, 432, 433, 497, 434, 498, 1125,
	435, 436, 437, 0, 439, 440, 1126, 1127, 441, 442,
	443, 444, 446, 1128, 447, 1129, 445, 448, 449, 450,
	499, 500, 501, 1130, 452, 451, 502, 1131, 1132, 1133,
	1134, 453, 454, 503, 455, 456, 457, 1050, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2621, 0, 213, 214, 215, 216, 217, 1057,
	218, 1058, 1059, 1060, 1061, 458, 1062, 1063, 1064, 1065,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	1066, 225, 226, 227, 228, 229, 230, 1067, 1068, 231,
	463, 464, 465, 1069, 232, 466, 1070, 1055, 1071, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 1072,
	242, 0, 243, 244, 245, 1073, 930, 246, 247, 1074,
	1075, 1077, 1076, 1078, 1079, 1080, 248, 249, 250, 251,
	252, 253, 467, 468, 1081, 254, 1082, 256, 255, 1083,
	257, 1084, 1085, 258, 259, 260, 1086, 261, 1087, 262,
	263, 1088, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 1089, 210, 1090, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 1091, 280,
	1092, 1093, 931, 281, 282, 1094, 283, 473, 1095, 474,
	284, 1096, 285, 286, 287, 288, 475, 476, 477, 933,
	289, 290, 1097, 291, 292, 294, 0, 0, 0, 211,
	293, 295, 302, 1098, 932, 296, 478, 298, 297, 299,
	300, 301, 479, 1099, 480, 1100, 303, 934, 481, 935,
	304, 305, 306, 936, 307, 308, 0, 0, 309, 310,
	311, 312, 1101, 314, 313, 1102, 315, 482, 937, 316,
	317, 938, 1103, 318, 319, 1104, 1105, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	939, 332, 333, 335, 334, 1106, 212, 940, 1107, 483,
	484, 336, 337, 1108, 338, 339, 340, 1109, 1110, 342,
	343, 344, 1111, 1112, 345, 485, 941, 346, 942, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 1113, 354,
	355, 487, 356, 488, 357, 1114, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 1115, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 1116, 380, 943, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	1117, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 1118, 407, 387, 388, 408, 944, 409, 491, 410,
	411, 1119, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 1120, 423, 424, 422, 1121, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 1122, 493,
	494, 495, 496, 1123, 438, 1124, 432, 433, 497, 434,
	498, 1125, 435, 436, 437, 0, 439, 440, 1126, 1127,
	441, 442, 443, 444, 446, 1128, 447, 1129, 445, 448,
	449, 450, 499, 500, 501, 1130, 452, 451, 502, 1131,
	1132, 1133, 1134, 453, 454, 503, 455, 456, 457, 1050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2014, 0, 213, 214, 215, 216,
	217, 1057, 218, 1058, 1059, 1060, 1061, 458, 1062, 1063,
	1064, 1065, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 1066, 225, 226, 227, 228, 229, 230, 1067,
	1068, 231, 463, 464, 465, 1069, 232, 466, 1070, 1055,
	1071, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 1072, 242, 0, 243, 244, 245, 1073, 930, 246,
	247, 1074, 1075, 1077, 1076, 1078, 1079, 1080, 248, 249,
	250, 251, 252, 253, 467, 468, 1081, 254, 1082, 256,
	255, 1083, 257, 1084, 1085, 258, 259, 260, 1086, 261,
	1087, 262, 263, 1088, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 1089, 210, 1090, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	1091, 280, 1092, 1093, 931, 281, 282, 1094, 283, 473,
	1095, 474, 284, 1096, 285, 286, 287, 288, 475, 476,
	477, 933, 289, 290, 1097, 291, 292, 294, 0, 0,
	0, 211, 293, 295, 302, 1098, 932, 296, 478, 298,
	297, 299, 300, 301, 479, 1099, 480, 1100, 303, 934,
	481, 935, 304, 305, 306, 936, 307, 308, 0, 0,
	309, 310, 311, 312, 1101, 314, 313, 1102, 315, 482,
	937, 316, 317, 938, 1103, 318, 319, 1104, 1105, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 939, 332, 333, 335, 334, 1106, 212, 940,
	1107, 483, 484, 336, 337, 1108, 338, 339, 340, 1109,
	1110, 342, 343, 344, 1111, 1112, 345, 485, 941, 346,
	942, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	1113, 354, 355, 487, 356, 488, 357, 1114, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 1115,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 1116, 380, 943, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 1117, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 1118, 407, 387, 388, 408, 944, 409,
	491, 410, 411, 1119, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 1120, 423, 424, 422,
	1121, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	1122, 493, 494, 495, 496, 1123, 438, 1124, 432, 433,
	497, 434, 498, 1125, 435, 436, 437, 0, 439, 440,
	1126, 1127, 441, 442, 443, 444, 446, 1128, 447, 1129,
	445, 448, 449, 450, 499, 500, 501, 1130, 452, 451,
	502, 1131, 1132, 1133, 1134, 453, 454, 503, 455, 456,
	457, 1158, 0, 1050, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1749, 0, 0, 0,
	213, 214, 215, 216, 217, 1057, 218, 1058, 1059, 1060,
	1061, 458, 1062, 1063, 1064, 1065, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 1066, 225, 226, 227,
	228, 229, 230, 1067, 1068, 231, 463, 464, 465, 1069,
	232, 466, 1070, 1055, 1071, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 1072, 242, 0, 243, 244,
	245, 1073, 930, 246, 247, 1074, 1075, 1077, 1076, 1078,
	1079, 1080, 248, 249, 250, 251, 252, 253, 467, 468,
	1081, 254, 1082, 256, 255, 1083, 257, 1084, 1085, 258,
	259, 260, 1086, 261, 1087, 262, 263, 1088, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 1089,
	210, 1090, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 1091, 280, 1092, 1093, 931, 281,
	282, 1094, 283, 473, 1095, 474, 284, 1096, 285, 286,
	287, 288, 475, 476, 477, 933, 289, 290, 1097, 291,
	292, 294, 0, 0, 0, 211, 293, 295, 302, 1098,
	932, 296, 478, 298, 297, 299, 300, 301, 479, 1099,
	480, 1100, 303, 934, 481, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 1101, 314,
	313, 1102, 315, 482, 937, 316, 317, 938, 1103, 318,
	319, 1104, 1105, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 1106, 212, 940, 1107, 483, 484, 336, 337, 1108,
	338, 339, 340, 1109, 1110, 342, 343, 344, 1111, 1112,
	345, 485, 941, 346, 942, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 1113, 354, 355, 487, 356, 488,
	357, 1114, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 1115, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 1116, 380,
	943, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 1117, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 1118, 407, 387,
	388, 408, 944, 409, 491, 410, 411, 1119, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	1120, 423, 424, 422, 1121, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 1122, 493, 494, 495, 496, 1123,
	438, 1124, 432, 433, 497, 434, 498, 1125, 435, 436,
	437, 0, 439, 440, 1126, 1127, 441, 442, 443, 444,
	446, 1128, 447, 1129, 445, 448, 449, 450, 499, 500,
	501, 1130, 452, 451, 502, 1131, 1132, 1133, 1134, 453,
	454, 503, 455, 456, 457, 1047, 0, 1050, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 1057,
	218, 1058, 1059, 1060, 1061, 458, 1062, 1063, 1064, 1065,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	1066, 225, 226, 227, 228, 229, 230, 1067, 1068, 231,
	463, 464, 465, 1069, 232, 466, 1070, 1055, 1071, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 1072,
	242, 0, 243, 244, 245, 1073, 930, 246, 247, 1074,
	1075, 1077, 1076, 1078, 1079, 1080, 248, 249, 250, 251,
	252, 253, 467, 468, 1081, 254, 1082, 256, 255, 1083,
	257, 1084, 1085, 258, 259, 260, 1086, 261, 1087, 262,
	263, 1088, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 1089, 210, 1090, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 1091, 280,
	1092, 1093, 931, 281, 282, 1094, 283, 473, 1095, 474,
	284, 1096, 285, 286, 287, 288, 475, 476, 477, 933,
	289, 290, 1097, 291, 292, 294, 0, 0, 0, 211,
	293, 295, 302, 1098, 932, 296, 478, 298, 297, 299,
	300, 301, 479, 1099, 480, 1100, 303, 934, 481, 935,
	304, 305, 306, 936, 307, 308, 0, 0, 309, 310,
	311, 312, 1101, 314, 313, 1102, 315, 482, 937, 316,
	317, 938, 1103, 318, 319, 1104, 1105, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	939, 332, 333, 335, 334, 1106, 212, 940, 1107, 483,
	484, 336, 337, 1108, 338, 339, 340, 1109, 1110, 342,
	343, 344, 1111, 1112, 345, 485, 941, 346, 942, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 1113, 354,
	355, 487, 356, 488, 357, 1114, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 1115, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 1116, 380, 943, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	1117, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 1118, 407, 387, 388, 408, 944, 409, 491, 410,
	411, 1119, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 1120, 423, 424, 422, 1121, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 1122, 493,
	494, 495, 496, 1123, 438, 1124, 432, 433, 497, 434,
	498, 1125, 435, 436, 437, 0, 439, 440, 1126, 1127,
	441, 442, 443, 444, 446, 1128, 447, 1129, 445, 448,
	449, 450, 499, 500, 501, 1130, 452, 451, 502, 1131,
	1132, 1133, 1134, 453, 454, 503, 455, 456, 457, 1050,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 1057, 218, 1058, 1059, 1060, 1061, 458, 1062, 1063,
	1064, 1065, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 1066, 225, 226, 227, 228, 229, 230, 1067,
	1068, 231, 463, 464, 465, 1069, 232, 466, 1070, 1055,
	1071, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 1072, 242, 0, 243, 244, 245, 1073, 930, 246,
	247, 1074, 1075, 1077, 1076, 1078, 1079, 1080, 248, 249,
	250, 251, 252, 253, 467, 468, 1081, 254, 1082, 256,
	255, 1083, 257, 1084, 1085, 258, 259, 260, 1086, 261,
	1087, 262, 263, 1088, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 1089, 210, 1090, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	1091, 280, 1092, 1093, 931, 281, 282, 1094, 283, 473,
	1095, 474, 284, 1096, 285, 286, 287, 288, 475, 476,
	477, 933, 289, 290, 1097, 291, 292, 294, 0, 0,
	0, 211, 293, 295, 302, 1098, 932, 296, 478, 298,
	297, 299, 300, 301, 479, 1099, 480, 1100, 303, 934,
	481, 935, 304, 305, 306, 936, 307, 308, 0, 0,
	309, 310, 311, 312, 1101, 314, 313, 1102, 315, 482,
	937, 316, 317, 938, 1103, 318, 319, 1104, 1105, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 939, 332, 333, 335, 334, 1106, 212, 940,
	1107, 483, 484, 336, 337, 1108, 338, 339, 340, 1109,
	1110, 342, 343, 344, 1111, 1112, 345, 485, 941, 346,
	942, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	1113, 354, 355, 487, 356, 488, 357, 1114, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 1115,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 1116, 380, 943, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 1117, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 1118, 407, 387, 388, 408, 944, 409,
	491, 410, 411, 1119, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 1120, 423, 424, 422,
	1121, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	1122, 493, 494, 495, 496, 1123, 438, 1124, 432, 433,
	497, 434, 498, 1125, 435, 436, 437, 0, 439, 440,
	1126, 1127, 441, 442, 443, 444, 446, 1128, 447, 1129,
	445, 448, 449, 450, 499, 500, 501, 1130, 452, 451,
	502, 1131, 1132, 1133, 1134, 453, 454, 503, 455, 456,
	457, 1990, 0, 872, 829, 830, 831, 827, 828, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 1987, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 459,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 253, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 1988, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 288, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	438, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 439, 440, 0, 819, 441, 442, 443, 444,
	446, 919, 447, 0, 867, 448, 449, 450, 499, 899,
	946, 1986, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	1989, 0, 0, 0, 0, 0, 0, 842, 1985, 0,
	0, 805, 840, 872, 829, 830, 831, 827, 828, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 459,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 253, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 288, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 176, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 178, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	438, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 439, 440, 0, 819, 441, 442, 443, 444,
	446, 919, 447, 0, 867, 448, 449, 450, 1297, 899,
	946, 0, 452, 451, 502, 0, 0, 0, 170, 453,
	454, 503, 455, 456, 457, 816, 171, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	872, 829, 830, 831, 827, 828, 841, 1486, 1484, 0,
	0, 0, 840, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 921, 846,
	0, 0, 0, 219, 220, 221, 459, 887, 866, 898,
	856, 897, 896, 0, 225, 858, 857, 228, 229, 230,
	848, 920, 231, 956, 957, 465, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 901, 253, 894, 893, 818, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 892, 260, 0,
	261, 0, 262, 263, 0, 824, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 837, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 891, 889, 890, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 847, 284, 0, 285, 286, 287, 288, 922,
	923, 926, 933, 289, 290, 0, 291, 292, 868, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 880,
	871, 882, 884, 885, 886, 881, 0, 873, 0, 303,
	934, 924, 935, 304, 305, 306, 936, 906, 907, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	955, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 860, 329, 939, 332, 333, 335, 334, 815, 212,
	940, 838, 925, 895, 336, 337, 0, 869, 339, 870,
	0, 0, 342, 343, 344, 0, 0, 345, 485, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 888, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 825, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 176, 403, 404, 861, 862, 864, 865,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 944,
	409, 883, 863, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 929, 416, 417, 418, 951, 0, 423, 424,
	422, 178, 425, 426, 427, 428, 429, 268, 430, 269,
	859, 0, 902, 903, 904, 905, 0, 438, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 439,
	440, 0, 819, 441, 442, 443, 444, 446, 919, 447,
	0, 867, 448, 449, 450, 1297, 899, 946, 0, 452,
	451, 502, 0, 0, 0, 170, 453, 454, 503, 455,
	456, 457, 816, 171, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 812, 813, 872, 829, 830,
	831, 827, 828, 841, 1486, 2387, 0, 0, 0, 840,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 921, 846, 0, 0, 0,
	219, 220, 221, 459, 887, 866, 898, 856, 897, 896,
	0, 225, 858, 857, 228, 229, 230, 848, 920, 231,
	956, 957, 465, 0, 232, 927, 0, 910, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 930, 246, 247, 913,
	911, 912, 917, 915, 914, 916, 248, 249, 250, 251,
	901, 253, 894, 893, 818, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 892, 260, 0, 261, 0, 262,
	263, 0, 824, 264, 265, 267, 270, 266, 271, 272,
	273, 947, 948, 837, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 891, 889, 890, 0, 279, 0, 280,
	0, 0, 931, 281, 282, 0, 283, 954, 0, 847,
	284, 0, 285, 286, 287, 288, 922, 923, 926, 933,
	289, 290, 0, 291, 292, 868, 0, 0, 0, 211,
	293, 295, 302, 0, 932, 296, 880, 871, 882, 884,
	885, 886, 881, 0, 873, 0, 303, 934, 924, 935,
	304, 305, 306, 936, 906, 907, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 955, 937, 316,
	317, 938, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 860, 329,
	939, 332, 333, 335, 334, 815, 212, 940, 838, 925,
	895, 336, 337, 0, 869, 339, 870, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 941, 346, 942, 949,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 950, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 888, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 943, 381, 382, 383, 384, 825,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	176, 403, 404, 861, 862, 864, 865, 398, 402, 405,
	406, 918, 407, 387, 388, 408, 944, 409, 883, 863,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 929,
	416, 417, 418, 951, 0, 423, 424, 422, 178, 425,
	426, 427, 428, 429, 268, 430, 269, 859, 0, 902,
	903, 904, 905, 0, 438, 0, 432, 433, 952, 434,
	953, 836, 435, 436, 437, 0, 439, 440, 0, 819,
	441, 442, 443, 444, 446, 919, 447, 0, 867, 448,
	449, 450, 1297, 899, 946, 0, 452, 451, 502, 0,
	0, 0, 170, 453, 454, 503, 455, 456, 457, 816,
	171, 0, 0, 0, 0, 0, 0, 814, 0, 0,
	0, 0, 812, 813, 872, 829, 830, 831, 827, 828,
	841, 1486, 1484, 0, 0, 0, 840, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 921, 846, 0, 0, 0, 219, 220, 221,
	459, 887, 866, 898, 856, 897, 896, 2074, 225, 858,
	857, 228, 229, 230, 848, 920, 231, 956, 957, 465,
	0, 232, 927, 0, 910, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 930, 246, 247, 913, 911, 912, 917,
	915, 914, 916, 248, 249, 250, 251, 901, 253, 894,
	893, 818, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 892, 260, 0, 261, 0, 262, 263, 0, 824,
	264, 265, 267, 270, 266, 271, 272, 273, 947, 948,
	837, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	891, 889, 890, 0, 279, 0, 280, 0, 2079, 931,
	281, 282, 0, 283, 954, 0, 847, 284, 0, 285,
	286, 287, 288, 922, 923, 926, 933, 289, 290, 0,
	291, 292, 868, 0, 0, 0, 211, 293, 295, 302,
	0, 932, 296, 880, 871, 882, 884, 885, 886, 881,
	0, 873, 0, 303, 934, 924, 935, 304, 305, 306,
	936, 906, 907, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 2075, 315, 955, 937, 316, 317, 938, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 860, 329, 939, 332, 333,
	335, 334, 815, 212, 940, 838, 925, 895, 336, 337,
	0, 869, 339, 870, 0, 0, 342, 343, 344, 0,
	0, 345, 485, 941, 346, 942, 949, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 950, 356,
	488, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 888, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 943, 381, 382, 383, 384, 825, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	861, 862, 864, 865, 398, 402, 405, 406, 918, 407,
	387, 388, 408, 944, 409, 883, 863, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 929, 416, 417, 418,
	951, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 859, 0, 902, 903, 904, 905,
	0, 438, 2076, 432, 433, 952, 434, 953, 836, 435,
	436, 437, 0, 439, 440, 0, 819, 441, 442, 443,
	444, 446, 919, 447, 0, 867, 448, 449, 450, 499,
	899, 946, 0, 452, 451, 502, 0, 0, 0, 0,
	453, 454, 503, 455, 456, 457, 816, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 0, 0, 812,
	813, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 808, 840, 872, 829, 830, 831, 827, 828,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 921, 846, 0, 0, 0, 219, 220, 221,
	459, 887, 866, 898, 856, 897, 896, 0, 225, 858,
	857, 228, 229, 230, 848, 920, 231, 956, 957, 465,
	0, 232, 927, 0, 910, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 930, 246, 247, 913, 911, 912, 917,
	915, 914, 916, 248, 249, 250, 251, 901, 253, 894,
	893, 818, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 892, 260, 0, 261, 0, 262, 263, 0, 824,
	264, 265, 267, 270, 266, 271, 272, 273, 947, 948,
	837, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	891, 889, 890, 0, 279, 0, 280, 0, 0, 931,
	281, 282, 0, 283, 954, 0, 847, 284, 0, 285,
	286, 287, 288, 922, 923, 926, 933, 289, 290, 0,
	291, 292, 868, 0, 0, 0, 211, 293, 295, 302,
	0, 932, 296, 880, 871, 882, 884, 885, 886, 881,
	0, 873, 0, 303, 934, 924, 935, 304, 305, 306,
	936, 906, 907, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 955, 937, 316, 317, 938, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 860, 329, 939, 332, 333,
	335, 334, 815, 212, 940, 838, 925, 895, 336, 337,
	0, 869, 339, 870, 820, 0, 342, 343, 344, 0,
	0, 345, 485, 941, 346, 942, 949, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 950, 356,
	488, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 888, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 943, 381, 382, 383, 384, 825, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	861, 862, 864, 865, 398, 402, 405, 406, 918, 407,
	387, 388, 408, 944, 409, 883, 863, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 929, 416, 417, 418,
	951, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 859, 0, 902, 903, 904, 905,
	0, 438, 0, 432, 433, 952, 434, 953, 836, 435,
	436, 437, 0, 439, 440, 0, 819, 441, 442, 443,
	444, 446, 919, 447, 0, 867, 448, 449, 450, 499,
	899, 946, 0, 452, 451, 502, 0, 0, 0, 0,
	453, 454, 503, 455, 456, 457, 816, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 0, 0, 812,
	813, 872, 829, 830, 831, 827, 828, 841, 842, 0,
	0, 0, 0, 840, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 921,
	846, 0, 0, 0, 219, 220, 221, 459, 887, 866,
	898, 856, 897, 896, 0, 225, 858, 857, 228, 229,
	230, 848, 920, 231, 956, 957, 465, 0, 232, 927,
	0, 910, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 3303, 245, 0,
	930, 246, 247, 913, 911, 912, 917, 915, 914, 916,
	248, 249, 250, 251, 901, 253, 894, 893, 818, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 892, 260,
	0, 261, 0, 262, 263, 0, 824, 264, 265, 267,
	270, 266, 271, 272, 273, 947, 948, 837, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 891, 889, 890,
	0, 279, 0, 280, 0, 0, 931, 281, 282, 0,
	283, 954, 0, 847, 284, 0, 285, 286, 287, 288,
	922, 923, 926, 933, 289, 290, 0, 291, 292, 868,
	0, 0, 0, 211, 293, 295, 302, 0, 932, 296,
	880, 871, 882, 884, 885, 886, 881, 0, 873, 0,
	303, 934, 924, 935, 304, 305, 306, 936, 906, 907,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 955, 937, 316, 317, 938, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 860, 329, 939, 332, 333, 335, 334, 815,
	212, 940, 838, 925, 895, 336, 337, 0, 869, 339,
	870, 820, 0, 342, 343, 344, 0, 0, 345, 485,
	941, 346, 942, 949, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 950, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 888, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 943, 381,
	382, 383, 384, 825, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 861, 862, 864,
	865, 398, 402, 405, 406, 918, 407, 387, 388, 408,
	944, 409, 883, 863, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 929, 416, 417, 418, 951, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 859, 0, 902, 903, 904, 905, 0, 438, 0,
	432, 433, 952, 434, 953, 836, 435, 436, 437, 0,
	439, 440, 0, 819, 441, 442, 443, 444, 446, 919,
	447, 0, 867, 448, 449, 450, 499, 899, 946, 0,
	452, 451, 502, 0, 0, 0, 0, 453, 454, 503,
	455, 456, 457, 816, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 0, 0, 812, 813, 872, 829,
	830, 831, 827, 828, 841, 842, 0, 0, 0, 0,
	840, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 921, 846, 0, 0,
	0, 219, 220, 221, 459, 887, 866, 898, 856, 897,
	896, 0, 225, 858, 857, 228, 229, 230, 848, 920,
	231, 956, 957, 465, 0, 232, 927, 0, 910, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 3172, 245, 0, 930, 246, 247,
	913, 911, 912, 917, 915, 914, 916, 248, 249, 250,
	251, 901, 253, 894, 893, 818, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 892, 260, 0, 261, 0,
	262, 263, 0, 824, 264, 265, 267, 270, 266, 271,
	272, 273, 947, 948, 837, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 891, 889, 890, 0, 279, 0,
	280, 0, 0, 931, 281, 282, 0, 283, 954, 0,
	847, 284, 0, 285, 286, 287, 288, 922, 923, 926,
	933, 289, 290, 0, 291, 292, 868, 0, 0, 0,
	211, 293, 295, 302, 0, 932, 296, 880, 871, 882,
	884, 885, 886, 881, 0, 873, 0, 303, 934, 924,
	935, 304, 305, 306, 936, 906, 907, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 955, 937,
	316, 317, 938, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 860,
	329, 939, 332, 333, 335, 334, 815, 212, 940, 838,
	925, 895, 336, 337, 0, 869, 339, 870, 820, 0,
	342, 343, 344, 0, 0, 345, 485, 941, 346, 942,
	949, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 950, 356, 488, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 888, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 943, 381, 382, 383, 384,
	825, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 861, 862, 864, 865, 398, 402,
	405, 406, 918, 407, 387, 388, 408, 944, 409, 883,
	863, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	929, 416, 417, 418, 951, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 859, 0,
	902, 903, 904, 905, 0, 438, 0, 432, 433, 952,
	434, 953, 836, 435, 436, 437, 0, 439, 440, 0,
	819, 441, 442, 443, 444, 446, 919, 447, 0, 867,
	448, 449, 450, 499, 899, 946, 0, 452, 451, 502,
	0, 0, 0, 0, 453, 454, 503, 455, 456, 457,
	816, 0, 0, 0, 0, 0, 0, 0, 814, 0,
	0, 0, 0, 812, 813, 872, 829, 830, 831, 827,
	828, 841, 842, 0, 0, 0, 0, 840, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 921, 846, 0, 0, 0, 219, 220,
	221, 459, 887, 866, 898, 856, 897, 896, 0, 225,
	858, 857, 228, 229, 230, 848, 920, 231, 956, 957,
	465, 0, 232, 927, 0, 910, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 930, 246, 247, 913, 911, 912,
	917, 915, 914, 916, 248, 249, 250, 251, 901, 253,
	894, 893, 818, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 892, 260, 0, 261, 0, 262, 263, 0,
	824, 264, 265, 267, 270, 266, 271, 272, 273, 947,
	948, 837, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 891, 889, 890, 0, 279, 0, 280, 0, 0,
	931, 281, 282, 0, 283, 954, 0, 847, 284, 0,
	285, 286, 287, 288, 922, 923, 926, 933, 289, 290,
	0, 291, 292, 868, 0, 0, 0, 211, 293, 295,
	302, 0, 932, 296, 880, 871, 882, 884, 885, 886,
	881, 0, 873, 0, 303, 934, 924, 935, 304, 305,
	306, 936, 906, 907, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 955, 937, 316, 317, 938,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 860, 329, 939, 332,
	333, 335, 334, 815, 2921, 940, 838, 925, 895, 336,
	337, 0, 869, 339, 870, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 941, 346, 942, 949, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 950,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 888, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 943, 381, 382, 383, 384, 825, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 861, 862, 864, 865, 398, 402, 405, 406, 918,
	407, 387, 388, 408, 944, 409, 883, 863, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 929, 416, 417,
	418, 951, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 859, 0, 902, 903, 904,
	905, 0, 438, 0, 432, 433, 952, 434, 953, 836,
	435, 436, 437, 0, 439, 440, 0, 819, 441, 442,
	443, 444, 446, 919, 447, 0, 867, 448, 449, 450,
	499, 899, 946, 0, 452, 451, 502, 0, 0, 0,
	0, 453, 454, 503, 455, 456, 457, 816, 0, 0,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 0,
	812, 813, 1546, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 840, 872, 829, 830, 831, 827,
	828, 841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 921, 846, 0, 0, 0, 219, 220,
	221, 459, 887, 866, 898, 856, 897, 896, 0, 225,
	858, 857, 228, 229, 230, 848, 920, 231, 956, 957,
	465, 0, 232, 927, 0, 910, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 930, 246, 247, 913, 911, 912,
	917, 915, 914, 916, 248, 249, 250, 251, 901, 253,
	894, 893, 818, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 892, 260, 0, 261, 0, 262, 263, 0,
	824, 264, 265, 267, 270, 266, 271, 272, 273, 947,
	948, 837, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 891, 889, 890, 0, 279, 0, 280, 0, 0,
	931, 281, 282, 0, 283, 954, 0, 847, 284, 0,
	285, 286, 287, 288, 922, 923, 926, 933, 289, 290,
	0, 291, 292, 868, 0, 0, 0, 211, 293, 295,
	302, 0, 932, 296, 880, 871, 882, 884, 885, 886,
	881, 0, 873, 0, 303, 934, 924, 935, 304, 305,
	306, 936, 906, 907, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 955, 937, 316, 317, 938,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 860, 329, 939, 332,
	333, 335, 334, 815, 212, 940, 838, 925, 895, 336,
	337, 0, 869, 339, 870, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 941, 346, 942, 949, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 950,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 888, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 943, 381, 382, 383, 384, 825, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 861, 862, 864, 865, 398, 402, 405, 406, 918,
	407, 387, 388, 408, 944, 409, 883, 863, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 929, 416, 417,
	418, 951, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 859, 0, 902, 903, 904,
	905, 0, 438, 0, 432, 433, 952, 434, 953, 836,
	435, 436, 437, 0, 439, 440, 0, 819, 441, 442,
	443, 444, 446, 919, 447, 0, 867, 448, 449, 450,
	499, 899, 946, 2734, 452, 451, 502, 0, 0, 0,
	0, 453, 454, 503, 455, 456, 457, 816, 0, 0,
	0, 0, 0, 0, 0, 814, 0, 0, 0, 0,
	812, 813, 872, 829, 830, 831, 827, 828, 841, 842,
	0, 0, 0, 0, 840, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	921, 846, 0, 0, 0, 219, 220, 221, 459, 887,
	866, 898, 856, 897, 896, 0, 225, 858, 857, 228,
	229, 230, 848, 920, 231, 956, 957, 465, 0, 232,
	927, 0, 910, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 930, 246, 247, 913, 911, 912, 917, 915, 914,
	916, 248, 249, 250, 251, 901, 253, 894, 893, 818,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 892,
	260, 0, 261, 0, 262, 263, 0, 824, 264, 265,
	267, 270, 266, 271, 272, 273, 947, 948, 837, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 891, 889,
	890, 0, 279, 0, 280, 0, 0, 931, 281, 282,
	0, 283, 954, 0, 847, 284, 0, 285, 286, 287,
	288, 922, 923, 926, 933, 289, 290, 0, 291, 292,
	868, 0, 0, 0, 1904, 293, 295, 302, 0, 932,
	296, 880, 871, 882, 884, 885, 886, 881, 0, 873,
	0, 303, 934, 924, 935, 304, 305, 306, 936, 906,
	907, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 955, 937, 316, 317, 938, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 860, 329, 939, 332, 333, 335, 334,
	815, 212, 940, 838, 925, 895, 336, 337, 0, 869,
	339, 870, 0, 0, 342, 343, 344, 0, 0, 345,
	485, 941, 346, 942, 949, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 950, 356, 488, 357,
	1903, 358, 0, 359, 360, 361, 362, 363, 364, 888,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 943,
	381, 382, 383, 384, 825, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 861, 862,
	864, 865, 398, 402, 405, 406, 918, 407, 387, 388,
	408, 944, 409, 883, 863, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 929, 416, 417, 418, 951, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 859, 0, 902, 903, 904, 905, 0, 438,
	0, 432, 433, 952, 434, 953, 836, 435, 436, 437,
	0, 439, 440, 0, 819, 441, 442, 443, 444, 446,
	919, 447, 0, 867, 448, 449, 450, 499, 899, 946,
	0, 452, 451, 502, 0, 0, 0, 0, 453, 454,
	503, 455, 456, 457, 816, 0, 0, 0, 0, 0,
	0, 0, 814, 0, 0, 0, 0, 812, 813, 872,
	829, 830, 831, 827, 828, 841, 842, 0, 0, 0,
	0, 840, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 921, 846, 0,
	0, 0, 219, 220, 221, 459, 887, 866, 898, 856,
	897, 896, 0, 225, 858, 857, 228, 229, 230, 848,
	920, 231, 956, 957, 465, 0, 232, 927, 0, 910,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 930, 246,
	247, 913, 911, 912, 917, 915, 914, 916, 248, 249,
	250, 251, 901, 253, 894, 893, 818, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 892, 260, 0, 261,
	0, 262, 263, 0, 824, 264, 265, 267, 270, 266,
	271, 272, 273, 947, 948, 837, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 891, 889, 890, 0, 279,
	0, 280, 0, 0, 931, 281, 282, 0, 283, 954,
	0, 847, 284, 0, 285, 286, 287, 288, 922, 923,
	926, 933, 289, 290, 0, 291, 292, 868, 0, 0,
	0, 211, 293, 295, 302, 0, 932, 296, 880, 871,
	882, 884, 885, 886, 881, 0, 873, 0, 303, 934,
	924, 935, 304, 305, 306, 936, 906, 907, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 955,
	937, 316, 317, 938, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	860, 329, 939, 332, 333, 335, 334, 815, 212, 940,
	838, 925, 895, 336, 337, 0, 869, 339, 870, 820,
	0, 342, 343, 344, 0, 0, 345, 485, 941, 346,
	942, 949, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 950, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 888, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 943, 381, 382, 383,
	384, 825, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 861, 862, 864, 865, 398,
	402, 405, 406, 918, 407, 387, 388, 408, 944, 409,
	883, 863, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 929, 416, 417, 418, 951, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 859,
	0, 902, 903, 904, 905, 0, 438, 0, 432, 433,
	952, 434, 953, 836, 435, 436, 437, 0, 439, 440,
	0, 819, 441, 442, 443, 444, 446, 919, 447, 0,
	867, 448, 449, 450, 499, 899, 946, 0, 452, 451,
	502, 0, 0, 0, 0, 453, 454, 503, 455, 456,
	457, 816, 0, 0, 0, 0, 0, 0, 0, 814,
	0, 0, 0, 0, 812, 813, 872, 829, 830, 831,
	827, 828, 841, 842, 0, 0, 0, 0, 840, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 921, 846, 0, 0, 0, 219,
	220, 221, 459, 887, 866, 898, 856, 897, 896, 0,
	225, 858, 857, 228, 229, 230, 848, 920, 231, 956,
	957, 465, 0, 232, 927, 0, 910, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 930, 246, 247, 913, 911,
	912, 917, 915, 914, 916, 248, 249, 250, 251, 901,
	253, 894, 893, 818, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 892, 260, 0, 261, 0, 262, 263,
	0, 824, 264, 265, 267, 270, 266, 271, 272, 273,
	947, 948, 837, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 891, 889, 890, 0, 279, 0, 280, 0,
	0, 931, 281, 282, 0, 283, 954, 0, 847, 284,
	0, 285, 286, 287, 288, 922, 923, 926, 933, 289,
	290, 0, 291, 292, 868, 0, 0, 0, 211, 293,
	295, 302, 0, 932, 296, 880, 871, 882, 884, 885,
	886, 881, 0, 873, 0, 303, 934, 924, 935, 304,
	305, 306, 936, 906, 907, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 955, 937, 316, 317,
	938, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 860, 329, 939,
	332, 333, 335, 334, 815, 212, 940, 838, 925, 895,
	336, 337, 0, 869, 339, 870, 0, 0, 342, 343,
	344, 0, 0, 345, 485, 941, 346, 942, 949, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	950, 356, 488, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 888, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 943, 381, 382, 383, 384, 825, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 861, 862, 864, 865, 398, 402, 405, 406,
	918, 407, 387, 388, 408, 944, 409, 883, 863, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 929, 416,
	417, 418, 951, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 859, 0, 902, 903,
	904, 905, 0, 438, 0, 432, 433, 952, 434, 953,
	836, 435, 436, 437, 0, 439, 440, 0, 819, 441,
	442, 443, 444, 446, 919, 447, 0, 867, 448, 449,
	450, 499, 899, 946, 0, 452, 451, 502, 0, 0,
	0, 0, 453, 454, 503, 455, 456, 457, 816, 0,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 0,
	0, 812, 813, 1546, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 840, 872, 829, 830, 831,
	827, 828, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 921, 846, 0, 0, 0, 219,
	220, 221, 459, 887, 866, 898, 856, 897, 896, 0,
	225, 858, 857, 228, 229, 230, 848, 920, 231, 956,
	957, 465, 0, 232, 927, 0, 910, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 930, 246, 247, 913, 911,
	912, 917, 915, 914, 916, 248, 249, 250, 251, 901,
	253, 894, 893, 818, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 892, 260, 0, 261, 0, 262, 263,
	0, 824, 264, 265, 267, 270, 266, 271, 272, 273,
	947, 948, 837, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 891, 889, 890, 0, 279, 0, 280, 0,
	2079, 931, 281, 282, 0, 283, 954, 0, 847, 284,
	0, 285, 286, 287, 288, 922, 923, 926, 933, 289,
	290, 0, 291, 292, 868, 0, 0, 0, 211, 293,
	295, 302, 0, 932, 296, 880, 871, 882, 884, 885,
	886, 881, 0, 873, 0, 303, 934, 924, 935, 304,
	305, 306, 936, 906, 907, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 955, 937, 316, 317,
	938, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 860, 329, 939,
	332, 333, 335, 334, 815, 212, 940, 838, 925, 895,
	336, 337, 0, 869, 339, 870, 0, 0, 342, 343,
	344, 0, 0, 345, 485, 941, 346, 942, 949, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	950, 356, 488, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 888, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 943, 381, 382, 383, 384, 825, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 0,
	403, 404, 861, 862, 864, 865, 398, 402, 405, 406,
	918, 407, 387, 388, 408, 944, 409, 883, 863, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 929, 416,
	417, 418, 951, 0, 423, 424, 422, 0, 425, 426,
	427, 428, 429, 268, 430, 269, 859, 0, 902, 903,
	904, 905, 0, 438, 0, 432, 433, 952, 434, 953,
	836, 435, 436, 437, 0, 439, 440, 0, 819, 441,
	442, 443, 444, 446, 919, 447, 0, 867, 448, 449,
	450, 499, 899, 946, 0, 452, 451, 502, 0, 0,
	0, 0, 453, 454, 503, 455, 456, 457, 816, 0,
	0, 0, 0, 0, 0, 0, 814, 0, 0, 0,
	0, 812, 813, 872, 829, 830, 831, 827, 828, 841,
	842, 0, 0, 0, 0, 840, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 459,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 253, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 288, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	438, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 439, 440, 0, 819, 441, 442, 443, 444,
	446, 919, 447, 0, 867, 448, 449, 450, 499, 899,
	946, 0, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	0, 0, 0, 0, 0, 0, 0, 842, 1484, 0,
	0, 2084, 840, 872, 829, 830, 831, 827, 828, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 459,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 253, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 288, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	438, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 439, 440, 0, 819, 441, 442, 443, 444,
	446, 919, 447, 0, 867, 448, 449, 450, 499, 899,
	946, 0, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 2082, 840, 872, 829, 830, 831, 827, 828, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 459,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 253, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 288, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	438, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 439, 440, 0, 819, 441, 442, 443, 444,
	446, 919, 447, 0, 867, 448, 449, 450, 499, 899,
	946, 0, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 2070, 840, 872, 829, 830, 831, 827, 828, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 459,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 253, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 288, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	438, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 439, 440, 0, 819, 441, 442, 443, 444,
	446, 919, 447, 0, 867, 448, 449, 450, 499, 899,
	946, 0, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 2059, 840, 872, 829, 830, 831, 827, 828, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 459,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 253, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 288, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	438, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 439, 440, 0, 819, 441, 442, 443, 444,
	446, 919, 447, 0, 867, 448, 449, 450, 499, 899,
	946, 0, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 2057, 840, 2049, 829, 830, 831, 827, 828, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 459,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 2052, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 2053, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 2054, 2051, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 2055, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	438, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 439, 440, 0, 819, 441, 442, 443, 444,
	446, 919, 447, 0, 867, 448, 449, 450, 499, 899,
	946, 0, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 2050, 457, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 2046, 840, 2049, 829, 830, 831, 827, 828, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 846, 0, 0, 0, 219, 220, 221, 459,
	887, 866, 898, 856, 897, 896, 0, 225, 858, 857,
	228, 229, 230, 848, 920, 231, 956, 957, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 901, 2052, 894, 893,
	818, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	892, 260, 0, 261, 0, 262, 263, 0, 824, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 837,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 891,
	889, 890, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 847, 284, 0, 285, 286,
	287, 2053, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 868, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 880, 871, 882, 884, 885, 886, 881, 0,
	873, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	906, 907, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 2054, 2051, 330, 860, 329, 939, 332, 333, 335,
	334, 815, 212, 940, 838, 925, 895, 336, 337, 0,
	869, 339, 870, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	888, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 825, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 2055, 0, 403, 404, 861,
	862, 864, 865, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 883, 863, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 929, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 859, 0, 902, 903, 904, 905, 0,
	438, 0, 432, 433, 952, 434, 953, 836, 435, 436,
	437, 0, 439, 440, 0, 819, 441, 442, 443, 444,
	446, 919, 447, 0, 867, 448, 449, 450, 499, 899,
	946, 0, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 2050, 457, 816, 0, 0, 0, 0,
	0, 0, 0, 814, 0, 0, 0, 0, 812, 813,
	872, 829, 830, 831, 827, 828, 841, 842, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 921, 846,
	0, 0, 0, 219, 220, 221, 459, 887, 866, 898,
	856, 897, 896, 0, 225, 858, 857, 228, 229, 230,
	848, 920, 231, 956, 957, 465, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 901, 253, 894, 893, 818, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 892, 260, 0,
	261, 0, 262, 263, 0, 824, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 837, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 891, 889, 890, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 847, 284, 0, 285, 286, 287, 288, 922,
	923, 926, 933, 289, 290, 0, 291, 292, 868, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 880,
	871, 882, 884, 885, 886, 881, 0, 873, 0, 303,
	934, 924, 935, 304, 305, 306, 936, 906, 907, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	955, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 860, 329, 939, 332, 333, 335, 334, 815, 212,
	940, 838, 925, 895, 336, 337, 0, 869, 339, 870,
	0, 0, 342, 343, 344, 0, 0, 345, 485, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 888, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 825, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 861, 862, 864, 865,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 944,
	409, 883, 863, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 929, 416, 417, 418, 951, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	859, 0, 902, 903, 904, 905, 0, 438, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 439,
	440, 0, 819, 441, 442, 443, 444, 446, 919, 447,
	0, 867, 448, 449, 450, 499, 899, 946, 0, 452,
	451, 502, 0, 0, 0, 0, 453, 454, 503, 455,
	456, 457, 816, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 812, 813, 0, 0, 0,
	0, 0, 1492, 0, 842, 0, 0, 0, 0, 840,
	872, 829, 830, 831, 827, 828, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 1891, 218, 0, 0, 0, 0, 921, 846,
	0, 0, 0, 219, 220, 221, 459, 887, 866, 898,
	856, 897, 896, 0, 225, 858, 857, 228, 229, 230,
	848, 920, 231, 956, 957, 465, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 901, 253, 894, 893, 818, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 892, 260, 0,
	261, 0, 262, 263, 0, 824, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 837, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 891, 889, 890, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 847, 284, 0, 285, 286, 287, 288, 922,
	923, 926, 933, 289, 290, 0, 291, 292, 868, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 880,
	871, 882, 884, 885, 886, 881, 0, 873, 0, 303,
	934, 924, 935, 304, 305, 306, 936, 906, 907, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	955, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 860, 329, 939, 332, 333, 335, 334, 815, 212,
	940, 838, 925, 895, 336, 337, 0, 869, 339, 870,
	0, 0, 342, 343, 344, 0, 0, 345, 485, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 888, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 825, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 861, 862, 864, 865,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 944,
	409, 883, 863, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 929, 416, 417, 418, 951, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	859, 0, 902, 903, 904, 905, 0, 438, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 439,
	440, 0, 819, 441, 442, 443, 444, 446, 919, 447,
	0, 867, 448, 449, 450, 499, 899, 946, 0, 452,
	451, 502, 0, 0, 0, 0, 453, 454, 503, 455,
	456, 457, 816, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 812, 813, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 1187, 840,
	872, 829, 830, 831, 827, 828, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 921, 846,
	0, 0, 0, 219, 220, 221, 459, 887, 866, 898,
	856, 897, 896, 0, 225, 858, 857, 228, 229, 230,
	848, 920, 231, 956, 957, 465, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 901, 253, 894, 893, 818, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 892, 260, 0,
	261, 0, 262, 263, 0, 824, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 837, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 891, 889, 890, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 847, 284, 0, 285, 286, 287, 288, 1186,
	923, 926, 933, 289, 290, 0, 291, 292, 868, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 880,
	871, 882, 884, 885, 886, 881, 0, 873, 0, 303,
	934, 924, 935, 304, 305, 306, 936, 906, 907, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	955, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 860, 329, 939, 332, 333, 335, 334, 815, 212,
	940, 838, 925, 895, 336, 337, 0, 869, 339, 870,
	0, 0, 342, 343, 344, 0, 0, 345, 485, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 888, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 825, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 861, 862, 864, 865,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 944,
	409, 883, 863, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 929, 416, 417, 418, 951, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	859, 0, 902, 903, 904, 905, 0, 438, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 439,
	440, 0, 819, 441, 442, 443, 444, 446, 919, 447,
	0, 867, 448, 449, 450, 499, 899, 946, 0, 452,
	451, 502, 0, 0, 0, 0, 453, 454, 503, 455,
	456, 457, 816, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 812, 813, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 1181, 840,
	872, 829, 830, 831, 827, 828, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 921, 846,
	0, 0, 0, 219, 220, 221, 459, 887, 866, 898,
	856, 897, 896, 0, 225, 858, 857, 228, 229, 230,
	848, 920, 231, 956, 957, 465, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 901, 253, 894, 893, 818, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 892, 260, 0,
	261, 0, 262, 263, 0, 824, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 837, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 891, 889, 890, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 847, 284, 0, 285, 286, 287, 288, 1180,
	923, 926, 933, 289, 290, 0, 291, 292, 868, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 880,
	871, 882, 884, 885, 886, 881, 0, 873, 0, 303,
	934, 924, 935, 304, 305, 306, 936, 906, 907, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	955, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 860, 329, 939, 332, 333, 335, 334, 815, 212,
	940, 838, 925, 895, 336, 337, 0, 869, 339, 870,
	0, 0, 342, 343, 344, 0, 0, 345, 485, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 888, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 825, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 861, 862, 864, 865,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 944,
	409, 883, 863, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 929, 416, 417, 418, 951, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	859, 0, 902, 903, 904, 905, 0, 438, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 439,
	440, 0, 819, 441, 442, 443, 444, 446, 919, 447,
	0, 867, 448, 449, 450, 499, 899, 946, 0, 452,
	451, 502, 0, 0, 0, 0, 453, 454, 503, 455,
	456, 457, 816, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 812, 813, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 1176, 840,
	872, 829, 830, 831, 827, 828, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 921, 846,
	0, 0, 0, 219, 220, 221, 459, 887, 866, 898,
	856, 897, 896, 0, 225, 858, 857, 228, 229, 230,
	848, 920, 231, 956, 957, 465, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 901, 253, 894, 893, 818, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 892, 260, 0,
	261, 0, 262, 263, 0, 824, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 837, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 891, 889, 890, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 847, 284, 0, 285, 286, 287, 288, 922,
	923, 926, 933, 289, 290, 0, 291, 292, 868, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 880,
	871, 882, 884, 885, 886, 881, 0, 873, 0, 303,
	934, 924, 935, 304, 305, 306, 936, 906, 907, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	955, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 860, 329, 939, 332, 333, 335, 334, 815, 212,
	940, 838, 925, 895, 336, 337, 0, 869, 339, 870,
	0, 0, 342, 343, 344, 0, 0, 345, 485, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 888, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 825, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 861, 862, 864, 865,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 944,
	409, 883, 863, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 929, 416, 417, 418, 951, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	859, 0, 902, 903, 904, 905, 0, 438, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 439,
	440, 0, 819, 441, 442, 443, 444, 446, 919, 447,
	0, 867, 448, 449, 450, 499, 899, 946, 0, 452,
	451, 502, 0, 0, 0, 0, 453, 454, 503, 455,
	456, 457, 816, 0, 0, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 812, 813, 872, 829, 830,
	831, 827, 828, 841, 842, 0, 0, 0, 0, 840,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 921, 846, 0, 0, 0,
	219, 220, 221, 459, 887, 866, 898, 856, 897, 896,
	0, 225, 858, 857, 228, 229, 230, 848, 920, 231,
	956, 957, 465, 0, 232, 927, 0, 910, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 930, 246, 247, 913,
	911, 912, 917, 915, 914, 916, 248, 249, 250, 251,
	901, 253, 894, 893, 818, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 892, 260, 0, 261, 0, 262,
	263, 0, 824, 264, 265, 267, 270, 266, 271, 272,
	273, 947, 948, 837, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 891, 889, 890, 0, 279, 0, 280,
	0, 0, 931, 281, 282, 0, 283, 954, 0, 847,
	284, 0, 285, 286, 287, 288, 922, 923, 926, 933,
	289, 290, 0, 291, 292, 868, 0, 0, 0, 211,
	293, 295, 302, 0, 932, 296, 880, 871, 882, 884,
	885, 886, 881, 0, 873, 0, 303, 934, 924, 935,
	304, 305, 306, 936, 906, 907, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 955, 937, 316,
	317, 938, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 860, 329,
	939, 332, 333, 335, 334, 815, 212, 940, 838, 925,
	895, 336, 337, 0, 869, 339, 870, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 941, 346, 942, 949,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 950, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 888, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 943, 381, 382, 383, 384, 825,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 861, 862, 864, 865, 398, 402, 405,
	406, 918, 407, 387, 388, 408, 944, 409, 883, 863,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 929,
	416, 417, 418, 951, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 859, 0, 902,
	903, 904, 905, 0, 438, 0, 432, 433, 952, 434,
	953, 836, 435, 436, 437, 0, 439, 440, 0, 819,
	441, 442, 443, 444, 446, 919, 447, 0, 867, 448,
	449, 450, 499, 899, 946, 0, 452, 451, 502, 0,
	0, 0, 0, 453, 454, 503, 455, 456, 457, 816,
	0, 0, 0, 0, 0, 0, 0, 814, 0, 0,
	0, 0, 812, 813, 872, 829, 830, 831, 827, 828,
	841, 842, 0, 0, 0, 0, 840, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 921, 846, 0, 0, 0, 219, 220, 221,
	459, 887, 866, 898, 856, 897, 896, 0, 225, 858,
	857, 228, 229, 230, 848, 920, 231, 956, 957, 465,
	0, 232, 927, 0, 910, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 930, 246, 3328, 913, 911, 912, 917,
	915, 914, 916, 248, 249, 250, 251, 901, 253, 894,
	893, 818, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 892, 260, 0, 261, 0, 262, 263, 0, 824,
	264, 265, 267, 270, 266, 271, 272, 273, 947, 948,
	837, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	891, 889, 890, 0, 279, 0, 280, 0, 0, 931,
	281, 282, 0, 283, 954, 0, 847, 284, 0, 285,
	286, 287, 288, 922, 923, 926, 933, 289, 290, 0,
	291, 292, 868, 0, 0, 0, 211, 293, 295, 302,
	0, 932, 296, 880, 871, 882, 884, 885, 886, 881,
	0, 873, 0, 303, 934, 924, 935, 304, 305, 306,
	936, 906, 907, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 955, 937, 316, 317, 938, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 860, 329, 939, 332, 333,
	335, 334, 815, 212, 940, 838, 925, 895, 336, 337,
	0, 869, 339, 870, 0, 0, 342, 343, 344, 0,
	0, 345, 485, 941, 346, 942, 949, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 950, 356,
	488, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 888, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 943, 381, 382, 383, 384, 825, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	861, 862, 864, 865, 398, 402, 405, 406, 918, 407,
	387, 388, 408, 944, 409, 883, 863, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 929, 416, 417, 418,
	951, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 859, 0, 902, 903, 904, 905,
	0, 438, 0, 432, 433, 952, 434, 953, 836, 435,
	436, 437, 0, 3327, 440, 0, 819, 441, 442, 443,
	444, 446, 919, 447, 0, 867, 448, 449, 450, 499,
	899, 946, 0, 452, 451, 502, 0, 0, 0, 0,
	453, 454, 503, 455, 456, 457, 816, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 0, 0, 812,
	813, 872, 829, 830, 831, 827, 828, 841, 842, 0,
	0, 0, 0, 840, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 921,
	846, 0, 0, 0, 219, 220, 221, 3326, 887, 866,
	898, 856, 897, 896, 0, 225, 858, 857, 228, 229,
	230, 848, 920, 231, 956, 957, 465, 0, 232, 927,
	0, 910, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	930, 246, 3328, 913, 911, 912, 917, 915, 914, 916,
	248, 249, 250, 251, 901, 253, 894, 893, 818, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 892, 260,
	0, 261, 0, 262, 263, 0, 824, 264, 265, 267,
	270, 266, 271, 272, 273, 947, 948, 837, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 891, 889, 890,
	0, 279, 0, 280, 0, 0, 931, 281, 282, 0,
	283, 954, 0, 847, 284, 0, 285, 286, 287, 288,
	922, 923, 926, 933, 289, 290, 0, 291, 292, 868,
	0, 0, 0, 211, 293, 295, 302, 0, 932, 296,
	880, 871, 882, 884, 885, 886, 881, 0, 873, 0,
	303, 934, 924, 935, 304, 305, 306, 936, 906, 907,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 955, 937, 316, 317, 938, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 860, 329, 939, 332, 333, 335, 334, 815,
	212, 940, 838, 925, 895, 336, 337, 0, 869, 339,
	870, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	941, 346, 942, 949, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 950, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 888, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 943, 381,
	382, 383, 384, 825, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 861, 862, 864,
	865, 398, 402, 405, 406, 918, 407, 387, 388, 408,
	944, 409, 883, 863, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 929, 416, 417, 418, 951, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 859, 0, 902, 903, 904, 905, 0, 438, 0,
	432, 433, 952, 434, 953, 836, 435, 436, 437, 0,
	3327, 440, 0, 819, 441, 442, 443, 444, 446, 919,
	447, 0, 867, 448, 449, 450, 499, 899, 946, 0,
	452, 451, 502, 0, 0, 0, 0, 453, 454, 503,
	455, 456, 457, 816, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 0, 0, 812, 813, 872, 829,
	830, 831, 827, 828, 841, 842, 0, 0, 0, 0,
	840, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 921, 846, 0, 0,
	0, 219, 220, 221, 459, 887, 866, 898, 856, 897,
	896, 0, 225, 858, 857, 228, 229, 230, 848, 920,
	231, 956, 957, 465, 0, 232, 927, 0, 910, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 930, 246, 247,
	913, 911, 912, 917, 915, 914, 916, 248, 249, 250,
	251, 901, 253, 894, 893, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 892, 260, 0, 261, 0,
	262, 263, 0, 824, 264, 265, 267, 270, 266, 271,
	272, 273, 947, 948, 837, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 891, 889, 890, 0, 279, 0,
	280, 0, 0, 931, 281, 282, 0, 283, 954, 0,
	847, 284, 0, 285, 286, 287, 288, 922, 923, 926,
	933, 289, 290, 0, 291, 292, 868, 0, 0, 0,
	211, 293, 295, 302, 0, 932, 296, 880, 871, 882,
	884, 885, 886, 881, 0, 873, 0, 303, 934, 924,
	935, 304, 305, 306, 936, 906, 907, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 955, 937,
	316, 317, 938, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 860,
	329, 939, 332, 333, 335, 334, 0, 212, 940, 838,
	925, 895, 336, 337, 0, 869, 339, 870, 0, 0,
	342, 343, 344, 0, 0, 345, 485, 941, 346, 942,
	949, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 950, 356, 488, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 888, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 943, 381, 382, 383, 384,
	825, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 861, 862, 864, 865, 398, 402,
	405, 406, 918, 407, 387, 388, 408, 944, 409, 883,
	863, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	929, 416, 417, 418, 951, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 859, 0,
	902, 903, 904, 905, 0, 438, 0, 432, 433, 952,
	434, 953, 836, 435, 436, 437, 0, 439, 440, 0,
	0, 441, 442, 443, 444, 446, 919, 447, 0, 867,
	448, 449, 450, 499, 899, 946, 0, 452, 451, 502,
	0, 0, 0, 0, 453, 454, 503, 455, 456, 457,
	872, 829, 830, 831, 827, 828, 841, 0, 2067, 0,
	0, 0, 0, 2065, 2066, 0, 0, 213, 214, 215,
	216, 217, 842, 218, 0, 0, 0, 840, 921, 846,
	0, 0, 0, 219, 220, 221, 0, 887, 866, 898,
	856, 897, 896, 0, 225, 858, 857, 228, 229, 230,
	848, 920, 231, 956, 957, 465, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 3328, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 901, 253, 894, 893, 818, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 892, 260, 0,
	261, 0, 262, 263, 0, 824, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 837, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 891, 889, 890, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 847, 284, 0, 285, 286, 287, 288, 922,
	923, 926, 0, 289, 290, 0, 291, 292, 868, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 880,
	871, 882, 884, 885, 886, 881, 0, 873, 0, 303,
	0, 924, 0, 304, 305, 306, 936, 906, 907, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	955, 937, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 860, 329, 939, 332, 333, 335, 334, 815, 212,
	0, 838, 925, 895, 336, 337, 0, 869, 339, 870,
	0, 0, 342, 343, 344, 0, 0, 345, 485, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 888, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 825, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 861, 862, 864, 865,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 0,
	409, 883, 863, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 929, 416, 417, 418, 951, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	859, 0, 902, 903, 904, 905, 0, 438, 0, 432,
	433, 952, 434, 953, 836, 435, 436, 437, 0, 3327,
	440, 0, 819, 441, 442, 443, 444, 446, 919, 447,
	0, 867, 448, 449, 450, 499, 899, 946, 0, 452,
	451, 502, 0, 0, 0, 0, 453, 454, 503, 455,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 993, 0, 812, 813, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 840,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 920, 231, 463, 464, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 474, 284, 0, 285, 286,
	287, 288, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 980, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 0, 212, 940, 0, 925, 484, 336, 337, 0,
	338, 339, 340, 0, 985, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 490, 987, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 176, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 951,
	0, 423, 424, 422, 178, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 952, 434, 953, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 919, 447, 0, 445, 448, 449, 450, 1297, 500,
	501, 0, 452, 451, 502, 993, 0, 0, 170, 453,
	454, 503, 455, 456, 457, 0, 171, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 921, 0, 977, 0, 1571, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 920, 231, 463, 464,
	465, 0, 232, 927, 0, 910, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 930, 246, 247, 913, 911, 912,
	917, 915, 914, 916, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 947,
	948, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	931, 281, 282, 0, 283, 954, 0, 474, 284, 0,
	285, 286, 287, 288, 922, 923, 926, 933, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 932, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 934, 924, 935, 304, 305,
	306, 936, 307, 308, 0, 0, 309, 310, 311, 312,
	980, 314, 313, 0, 315, 955, 937, 316, 317, 938,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 939, 332,
	333, 335, 334, 0, 212, 940, 0, 925, 484, 336,
	337, 0, 338, 339, 340, 0, 985, 342, 343, 344,
	0, 0, 345, 485, 941, 346, 942, 949, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 950,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 943, 381, 382, 383, 384, 490, 987, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 176, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 918,
	407, 387, 388, 408, 944, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 951, 0, 423, 424, 422, 178, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 952, 434, 953, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 919, 447, 0, 445, 448, 449, 450,
	1297, 500, 501, 0, 452, 451, 502, 0, 0, 0,
	170, 453, 454, 503, 455, 456, 457, 0, 171, 0,
	0, 2494, 0, 993, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 0, 1571,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 920, 231, 463, 464, 465, 0,
	232, 927, 0, 910, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 913, 911, 912, 917, 915,
	914, 916, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 947, 948, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 954, 0, 474, 284, 0, 285, 286,
	287, 288, 922, 923, 926, 933, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 211, 293, 295, 302, 0,
	932, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 934, 924, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 980, 314,
	313, 0, 315, 955, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 0, 212, 940, 0, 925, 484, 336, 337, 0,
	338, 339, 340, 0, 985, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 949, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 950, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 490, 987, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 918, 407, 387,
	388, 408, 944, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 951,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 952, 434, 953, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 919, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 0, 452, 451, 502, 0, 976, 0, 993, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 977, 921, 982, 0, 0,
	0, 219, 220, 221, 459, 460, 222, 461, 223, 224,
	462, 0, 225, 226, 227, 228, 229, 230, 0, 920,
	231, 463, 464, 465, 0, 232, 927, 0, 910, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 930, 246, 247,
	913, 911, 912, 917, 915, 914, 916, 248, 249, 250,
	251, 252, 253, 467, 468, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 469, 264, 265, 267, 270, 266, 271,
	272, 273, 947, 948, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 472, 277, 278, 0, 279, 0,
	280, 0, 0, 931, 281, 282, 0, 283, 954, 0,
	474, 284, 0, 285, 286, 287, 288, 922, 923, 926,
	933, 289, 290, 0, 291, 292, 294, 0, 0, 0,
	211, 293, 295, 302, 0, 932, 296, 478, 298, 297,
	299, 300, 301, 479, 0, 480, 0, 303, 934, 924,
	935, 304, 305, 306, 936, 307, 308, 0, 0, 309,
	310, 311, 312, 980, 314, 313, 0, 315, 955, 937,
	316, 317, 938, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 939, 332, 333, 335, 334, 0, 212, 940, 0,
	925, 484, 336, 337, 0, 338, 339, 340, 0, 985,
	342, 343, 344, 0, 0, 345, 485, 941, 346, 942,
	949, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 950, 356, 488, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 489, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 943, 381, 382, 383, 384,
	490, 987, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 918, 407, 387, 388, 408, 944, 409, 491,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 951, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	493, 494, 495, 496, 0, 438, 0, 432, 433, 952,
	434, 953, 0, 435, 436, 437, 0, 439, 440, 0,
	0, 441, 442, 443, 444, 446, 919, 447, 0, 445,
	448, 449, 450, 499, 500, 501, 0, 452, 451, 502,
	993, 0, 0, 0, 453, 454, 503, 455, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 921, 0,
	977, 0, 982, 219, 220, 221, 459, 460, 222, 461,
	223, 224, 462, 0, 225, 226, 227, 228, 229, 230,
	0, 920, 231, 463, 464, 465, 0, 232, 927, 0,
	910, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 913, 911, 912, 917, 915, 914, 916, 248,
	249, 250, 251, 252, 253, 467, 468, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 469, 264, 265, 267, 270,
	266, 271, 272, 273, 947, 948, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 472, 277, 278, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	954, 0, 474, 284, 0, 285, 286, 287, 288, 922,
	923, 926, 933, 289, 290, 0, 291, 292, 294, 0,
	0, 0, 211, 293, 295, 302, 0, 932, 296, 478,
	298, 297, 299, 300, 301, 479, 0, 480, 0, 303,
	934, 924, 935, 304, 305, 306, 936, 307, 308, 0,
	0, 309, 310, 311, 312, 980, 314, 313, 0, 315,
	955, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 939, 332, 333, 335, 334, 0, 212,
	940, 0, 925, 484, 336, 337, 0, 338, 339, 340,
	0, 985, 342, 343, 344, 0, 0, 345, 485, 941,
	346, 942, 949, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 950, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 489, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 490, 987, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 918, 407, 387, 388, 408, 944,
	409, 491, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 951, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 493, 494, 495, 496, 0, 438, 0, 432,
	433, 952, 434, 953, 0, 435, 436, 437, 0, 439,
	440, 0, 0, 441, 442, 443, 444, 446, 919, 447,
	0, 445, 448, 449, 450, 499, 500, 501, 0, 452,
	451, 502, 993, 0, 0, 0, 453, 454, 503, 455,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	921, 0, 977, 0, 982, 219, 220, 221, 459, 460,
	222, 461, 223, 224, 462, 0, 225, 226, 227, 228,
	229, 230, 0, 920, 231, 463, 464, 465, 0, 232,
	927, 0, 910, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 930, 246, 247, 913, 911, 912, 917, 915, 914,
	916, 248, 249, 250, 251, 252, 253, 467, 468, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 469, 264, 265,
	267, 270, 266, 271, 272, 273, 947, 948, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 472, 277,
	278, 0, 279, 0, 280, 0, 0, 931, 281, 282,
	0, 283, 954, 0, 474, 284, 0, 285, 286, 287,
	288, 922, 923, 926, 933, 289, 290, 0, 291, 292,
	294, 0, 0, 0, 211, 293, 295, 302, 0, 932,
	296, 478, 298, 297, 299, 300, 301, 479, 0, 480,
	0, 303, 934, 924, 935, 304, 305, 306, 936, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 955, 937, 316, 317, 938, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 939, 332, 333, 335, 334,
	0, 212, 940, 0, 925, 484, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	485, 941, 346, 942, 949, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 950, 356, 488, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 489,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 943,
	381, 382, 383, 384, 490, 987, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 918, 407, 387, 388,
	408, 944, 409, 491, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 951, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 493, 494, 495, 496, 0, 438,
	0, 432, 433, 952, 434, 953, 0, 435, 436, 437,
	0, 439, 440, 0, 0, 441, 442, 443, 444, 446,
	919, 447, 0, 445, 448, 449, 450, 499, 500, 501,
	0, 452, 451, 502, 805, 0, 1151, 0, 453, 454,
	503, 455, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 458, 0, 1473, 0, 0, 219,
	220, 221, 459, 460, 222, 461, 223, 224, 462, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 463,
	464, 465, 0, 232, 466, 0, 1055, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 930, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 467, 468, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 469, 264, 265, 267, 270, 266, 271, 272, 273,
	470, 471, 0, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 472, 277, 278, 0, 279, 0, 280, 0,
	0, 931, 281, 282, 0, 283, 473, 0, 474, 284,
	0, 285, 286, 287, 288, 475, 476, 477, 933, 289,
	290, 0, 291, 292, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 932, 296, 478, 298, 297, 299, 300,
	301, 479, 0, 480, 0, 303, 934, 481, 935, 304,
	305, 306, 936, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 482, 937, 316, 317,
	938, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 939,
	332, 333, 335, 334, 0, 0, 940, 0, 483, 484,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 485, 941, 346, 942, 486, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	487, 356, 488, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 489, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 943, 381, 382, 383, 384, 490, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 176,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 944, 409, 491, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 492, 0, 423, 424, 422, 178, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 493, 494,
	495, 496, 0, 438, 0, 432, 433, 497, 434, 498,
	0, 435, 436, 437, 0, 439, 440, 0, 0, 441,
	442, 443, 444, 446, 0, 447, 0, 445, 448, 449,
	450, 1297, 500, 501, 0, 452, 451, 502, 1294, 0,
	1151, 170, 453, 454, 503, 455, 456, 457, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 458, 0,
	148, 0, 0, 219, 220, 221, 459, 460, 222, 461,
	223, 224, 462, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 463, 464, 465, 0, 232, 466, 0,
	1055, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 467, 468, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 469, 264, 265, 267, 270,
	266, 271, 272, 273, 470, 471, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 472, 277, 278, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	473, 0, 474, 284, 0, 285, 286, 287, 288, 475,
	476, 477, 933, 289, 290, 0, 291, 292, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 932, 296, 478,
	298, 297, 299, 300, 301, 479, 0, 480, 0, 303,
	934, 481, 935, 304, 305, 306, 936, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	482, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 939, 332, 333, 335, 334, 0, 0,
	940, 0, 483, 484, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 485, 941,
	346, 942, 486, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 487, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 489, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 490, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 176, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 944,
	409, 491, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 492, 0, 423, 424,
	422, 178, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 493, 494, 495, 496, 0, 438, 0, 432,
	433, 497, 434, 498, 0, 435, 436, 437, 0, 439,
	440, 0, 0, 441, 442, 443, 444, 446, 0, 447,
	0, 445, 448, 449, 450, 1297, 500, 501, 0, 452,
	451, 502, 0, 0, 0, 170, 453, 454, 503, 455,
	456, 457, 0, 171, 0, 0, 0, 0, 1151, 1150,
	0, 0, 0, 0, 1148, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 458, 0, 0, 0,
	0, 219, 220, 221, 459, 460, 222, 461, 223, 224,
	462, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 463, 464, 465, 0, 232, 466, 0, 1055, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 930, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 467, 468, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 469, 264, 265, 267, 270, 266, 271,
	272, 273, 470, 471, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 472, 277, 278, 0, 279, 0,
	280, 0, 0, 931, 281, 282, 0, 283, 473, 0,
	474, 284, 0, 285, 286, 287, 288, 475, 476, 477,
	933, 289, 290, 0, 291, 292, 294, 0, 0, 0,
	0, 293, 295, 302, 0, 932, 296, 478, 298, 297,
	299, 300, 301, 479, 0, 480, 0, 303, 934, 481,
	935, 304, 305, 306, 936, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 482, 937,
	316, 317, 938, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 939, 332, 333, 335, 334, 0, 0, 940, 0,
	483, 484, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 485, 941, 346, 942,
	486, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 487, 356, 488, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 489, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 943, 381, 382, 383, 384,
	490, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 944, 409, 491,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 492, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	493, 494, 495, 496, 0, 438, 0, 432, 433, 497,
	434, 498, 0, 435, 436, 437, 0, 439, 440, 0,
	0, 441, 442, 443, 444, 446, 0, 447, 0, 445,
	448, 449, 450, 499, 500, 501, 0, 452, 451, 502,
	0, 0, 0, 0, 453, 454, 503, 455, 456, 457,
	1151, 1150, 0, 0, 0, 0, 1148, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 2686, 218, 0, 0, 0, 0, 458, 0,
	0, 0, 0, 219, 220, 221, 459, 460, 222, 461,
	223, 224, 462, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 463, 464, 465, 0, 232, 466, 0,
	1055, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 930,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 467, 468, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 469, 264, 265, 267, 270,
	266, 271, 272, 273, 470, 471, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 472, 277, 278, 0,
	279, 0, 280, 0, 0, 931, 281, 282, 0, 283,
	473, 0, 474, 284, 0, 285, 286, 287, 288, 475,
	476, 477, 933, 289, 290, 0, 291, 292, 294, 0,
	0, 0, 0, 293, 295, 302, 0, 932, 296, 478,
	298, 297, 299, 300, 301, 479, 0, 480, 0, 303,
	934, 481, 935, 304, 305, 306, 936, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	482, 937, 316, 317, 938, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 939, 332, 333, 335, 334, 0, 0,
	940, 0, 483, 484, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 485, 941,
	346, 942, 486, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 487, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 489, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 943, 381, 382,
	383, 384, 490, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 944,
	409, 491, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 492, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 493, 494, 495, 496, 0, 438, 0, 432,
	433, 497, 434, 498, 0, 435, 436, 437, 0, 439,
	440, 0, 0, 441, 442, 443, 444, 446, 0, 447,
	0, 445, 448, 449, 450, 499, 500, 501, 0, 452,
	451, 502, 993, 0, 0, 0, 453, 454, 503, 455,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	921, 0, 0, 0, 1301, 219, 220, 221, 459, 460,
	222, 461, 223, 224, 462, 0, 225, 226, 227, 228,
	229, 230, 0, 920, 231, 463, 464, 465, 0, 232,
	927, 0, 910, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 930, 246, 247, 913, 911, 912, 917, 915, 914,
	916, 248, 249, 250, 251, 252, 253, 467, 468, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 469, 264, 265,
	267, 270, 266, 271, 272, 273, 947, 948, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 472, 277,
	278, 0, 279, 0, 280, 0, 0, 931, 281, 282,
	0, 283, 954, 0, 474, 284, 0, 285, 286, 287,
	288, 922, 923, 926, 933, 289, 290, 0, 291, 292,
	294, 0, 0, 0, 211, 293, 295, 302, 0, 932,
	296, 478, 298, 297, 299, 300, 301, 479, 0, 480,
	0, 303, 934, 924, 935, 304, 305, 306, 936, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 955, 937, 316, 317, 938, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 939, 332, 333, 335, 334,
	0, 212, 940, 0, 925, 484, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	485, 941, 346, 942, 949, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 950, 356, 488, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 489,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 943,
	381, 382, 383, 384, 490, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 918, 407, 387, 388,
	408, 944, 409, 491, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 951, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 493, 494, 495, 496, 0, 438,
	0, 432, 433, 952, 434, 953, 0, 435, 436, 437,
	0, 439, 440, 0, 0, 441, 442, 443, 444, 446,
	919, 447, 0, 445, 448, 449, 450, 499, 500, 501,
	0, 452, 451, 502, 805, 0, 207, 0, 453, 454,
	503, 455, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 458, 0, 0, 0, 0, 219,
	220, 221, 459, 460, 222, 461, 223, 224, 462, 0,
	225, 226, 227, 228, 229, 230, 0, 0, 231, 463,
	464, 465, 0, 232, 466, 0, 0, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 0, 246, 247, 0, 0,
	0, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	253, 467, 468, 0, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 259, 260, 0, 261, 0, 262, 263,
	0, 469, 264, 265, 267, 270, 266, 271, 272, 273,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 274,
	275, 276, 472, 277, 278, 0, 279, 0, 280, 0,
	0, 0, 281, 282, 0, 283, 473, 0, 474, 284,
	0, 285, 286, 287, 288, 475, 476, 477, 0, 289,
	290, 0, 291, 292, 294, 0, 0, 0, 0, 293,
	295, 302, 0, 0, 296, 478, 298, 297, 299, 300,
	301, 479, 0, 480, 0, 303, 0, 481, 0, 304,
	305, 306, 0, 307, 308, 0, 0, 309, 310, 311,
	312, 0, 314, 313, 0, 315, 482, 0, 316, 317,
	0, 0, 318, 319, 0, 0, 320, 321, 0, 322,
	323, 325, 327, 324, 326, 328, 330, 331, 329, 0,
	332, 333, 335, 334, 0, 0, 0, 0, 483, 484,
	336, 337, 0, 338, 339, 340, 0, 0, 342, 343,
	344, 0, 0, 345, 485, 0, 346, 0, 486, 347,
	341, 348, 349, 350, 351, 352, 353, 0, 354, 355,
	487, 356, 488, 357, 0, 358, 0, 359, 360, 361,
	362, 363, 364, 489, 365, 366, 0, 367, 368, 369,
	370, 371, 0, 373, 374, 375, 372, 376, 377, 378,
	379, 0, 380, 0, 381, 382, 383, 384, 490, 385,
	0, 386, 390, 391, 392, 393, 394, 395, 396, 176,
	403, 404, 397, 399, 400, 401, 398, 402, 405, 406,
	0, 407, 387, 388, 408, 0, 409, 491, 410, 411,
	0, 421, 412, 413, 414, 389, 415, 419, 420, 416,
	417, 418, 492, 0, 423, 424, 422, 178, 425, 426,
	427, 428, 429, 268, 430, 269, 431, 0, 493, 494,
	495, 496, 0, 438, 0, 432, 433, 497, 434, 498,
	0, 435, 436, 437, 0, 439, 440, 0, 0, 441,
	442, 443, 444, 446, 0, 447, 0, 445, 448, 449,
	450, 1297, 500, 501, 0, 452, 451, 502, 207, 0,
	0, 170, 453, 454, 503, 455, 456, 457, 0, 171,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 458, 0, 0, 0,
	148, 219, 220, 221, 459, 460, 222, 461, 223, 224,
	462, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 463, 464, 465, 0, 232, 466, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 467, 468, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 469, 264, 265, 267, 270, 266, 271,
	272, 273, 470, 471, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 472, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 473, 0,
	474, 284, 0, 285, 286, 287, 288, 475, 476, 477,
	0, 289, 290, 0, 291, 292, 294, 0, 0, 0,
	211, 293, 295, 302, 0, 0, 296, 478, 298, 297,
	299, 300, 301, 479, 0, 480, 0, 303, 0, 481,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 482, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 0, 332, 333, 335, 334, 0, 212, 0, 0,
	483, 484, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 485, 0, 346, 0,
	486, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 487, 356, 488, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 489, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	490, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 0, 409, 491,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 492, 0, 423, 424, 422, 0,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	493, 494, 495, 496, 0, 438, 0, 432, 433, 497,
	434, 498, 0, 435, 436, 437, 0, 439, 440, 0,
	0, 441, 442, 443, 444, 446, 0, 447, 0, 445,
	448, 449, 450, 499, 500, 501, 0, 452, 451, 502,
	207, 0, 0, 0, 453, 454, 503, 455, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 458, 0,
	0, 0, 1576, 219, 220, 221, 459, 460, 222, 461,
	223, 224, 462, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 463, 464, 465, 0, 232, 466, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 467, 468, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 469, 264, 265, 267, 270,
	266, 271, 272, 273, 470, 471, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 472, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	473, 0, 474, 284, 0, 285, 286, 287, 288, 475,
	476, 477, 0, 289, 290, 0, 291, 292, 294, 0,
	0, 0, 211, 293, 295, 302, 0, 0, 296, 478,
	298, 297, 299, 300, 301, 479, 0, 480, 0, 303,
	0, 481, 0, 304, 305, 306, 0, 307, 308, 0,
	0, 309, 310, 311, 312, 0, 314, 313, 0, 315,
	482, 0, 316, 317, 0, 0, 318, 319, 0, 0,
	320, 321, 0, 322, 323, 325, 327, 324, 326, 328,
	330, 331, 329, 0, 332, 333, 335, 334, 0, 212,
	0, 0, 483, 484, 336, 337, 0, 338, 339, 340,
	0, 0, 342, 343, 344, 0, 0, 345, 485, 0,
	346, 0, 486, 347, 341, 348, 349, 350, 351, 352,
	353, 0, 354, 355, 487, 356, 488, 357, 0, 358,
	0, 359, 360, 361, 362, 363, 364, 489, 365, 366,
	0, 367, 368, 369, 370, 371, 0, 373, 374, 375,
	372, 376, 377, 378, 379, 0, 380, 0, 381, 382,
	383, 384, 490, 385, 0, 386, 390, 391, 392, 393,
	394, 395, 396, 0, 403, 404, 397, 399, 400, 401,
	398, 402, 405, 406, 0, 407, 387, 388, 408, 0,
	409, 491, 410, 411, 0, 421, 412, 413, 414, 389,
	415, 419, 420, 416, 417, 418, 492, 0, 423, 424,
	422, 0, 425, 426, 427, 428, 429, 268, 430, 269,
	431, 0, 493, 494, 495, 496, 0, 438, 0, 432,
	433, 497, 434, 498, 0, 435, 436, 437, 0, 439,
	440, 0, 0, 441, 442, 443, 444, 446, 0, 447,
	0, 445, 448, 449, 450, 499, 500, 501, 0, 452,
	451, 502, 207, 0, 0, 0, 453, 454, 503, 455,
	456, 457, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	458, 0, 2636, 0, 0, 219, 220, 221, 459, 460,
	222, 461, 223, 224, 462, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 463, 464, 465, 0, 232,
	466, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 467, 468, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 469, 264, 265,
	267, 270, 266, 271, 272, 273, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 472, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 473, 0, 474, 284, 0, 285, 286, 287,
	288, 475, 476, 477, 0, 289, 290, 0, 291, 292,
	294, 0, 0, 0, 0, 293, 295, 302, 0, 0,
	296, 478, 298, 297, 299, 300, 301, 479, 0, 480,
	0, 303, 0, 481, 0, 304, 305, 306, 0, 307,
	308, 0, 0, 309, 310, 311, 312, 0, 314, 313,
	0, 315, 482, 0, 316, 317, 0, 0, 318, 319,
	0, 0, 320, 321, 0, 322, 323, 325, 327, 324,
	326, 328, 330, 331, 329, 0, 332, 333, 335, 334,
	0, 0, 0, 0, 483, 484, 336, 337, 0, 338,
	339, 340, 0, 0, 342, 343, 344, 0, 0, 345,
	485, 0, 346, 0, 486, 347, 341, 348, 349, 350,
	351, 352, 353, 0, 354, 355, 487, 356, 488, 357,
	0, 358, 0, 359, 360, 361, 362, 363, 364, 489,
	365, 366, 0, 367, 368, 369, 370, 371, 0, 373,
	374, 375, 372, 376, 377, 378, 379, 0, 380, 0,
	381, 382, 383, 384, 490, 385, 0, 386, 390, 391,
	392, 393, 394, 395, 396, 0, 403, 404, 397, 399,
	400, 401, 398, 402, 405, 406, 0, 407, 387, 388,
	408, 0, 409, 491, 410, 411, 0, 421, 412, 413,
	414, 389, 415, 419, 420, 416, 417, 418, 492, 0,
	423, 424, 422, 0, 425, 426, 427, 428, 429, 268,
	430, 269, 431, 0, 493, 494, 495, 496, 0, 438,
	0, 432, 433, 497, 434, 498, 0, 435, 436, 437,
	0, 439, 440, 0, 0, 441, 442, 443, 444, 446,
	0, 447, 0, 445, 448, 449, 450, 499, 500, 501,
	0, 452, 451, 502, 207, 0, 0, 0, 453, 454,
	503, 455, 456, 457, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 458, 0, 0, 0, 2292, 219, 220, 221,
	459, 460, 222, 461, 223, 224, 462, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 463, 464, 465,
	0, 232, 466, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 467,
	468, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 469,
	264, 265, 267, 270, 266, 271, 272, 273, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	472, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 473, 0, 474, 284, 0, 285,
	286, 287, 288, 475, 476, 477, 0, 289, 290, 0,
	291, 292, 294, 0, 0, 0, 0, 293, 295, 302,
	0, 0, 296, 478, 298, 297, 299, 300, 301, 479,
	0, 480, 0, 303, 0, 481, 0, 304, 305, 306,
	0, 307, 308, 0, 0, 309, 310, 311, 312, 0,
	314, 313, 0, 315, 482, 0, 316, 317, 0, 0,
	318, 319, 0, 0, 320, 321, 0, 322, 323, 325,
	327, 324, 326, 328, 330, 331, 329, 0, 332, 333,
	335, 334, 0, 0, 0, 0, 483, 484, 336, 337,
	0, 338, 339, 340, 0, 0, 342, 343, 344, 0,
	0, 345, 485, 0, 346, 0, 486, 347, 341, 348,
	349, 350, 351, 352, 353, 0, 354, 355, 487, 356,
	488, 357, 0, 358, 0, 359, 360, 361, 362, 363,
	364, 489, 365, 366, 0, 367, 368, 369, 370, 371,
	0, 373, 374, 375, 372, 376, 377, 378, 379, 0,
	380, 0, 381, 382, 383, 384, 490, 385, 0, 386,
	390, 391, 392, 393, 394, 395, 396, 0, 403, 404,
	397, 399, 400, 401, 398, 402, 405, 406, 0, 407,
	387, 388, 408, 0, 409, 491, 410, 411, 0, 421,
	412, 413, 414, 389, 415, 419, 420, 416, 417, 418,
	492, 0, 423, 424, 422, 0, 425, 426, 427, 428,
	429, 268, 430, 269, 431, 0, 493, 494, 495, 496,
	0, 438, 0, 432, 433, 497, 434, 498, 0, 435,
	436, 437, 0, 439, 440, 0, 0, 441, 442, 443,
	444, 446, 0, 447, 0, 445, 448, 449, 450, 499,
	500, 501, 0, 452, 451, 502, 680, 0, 572, 0,
	453, 454, 503, 455, 456, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 458, 0, 2758, 0,
	0, 219, 220, 221, 459, 460, 222, 461, 223, 224,
	462, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 463, 464, 465, 0, 232, 466, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 578,
	251, 252, 253, 467, 468, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 469, 264, 265, 267, 270, 266, 271,
	272, 273, 470, 471, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 472, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 473, 0,
	474, 284, 0, 285, 286, 287, 288, 475, 476, 477,
	0, 289, 290, 0, 291, 292, 294, 0, 0, 0,
	211, 293, 295, 302, 0, 0, 296, 478, 298, 297,
	299, 300, 301, 479, 0, 480, 0, 303, 0, 481,
	0, 304, 305, 306, 0, 307, 308, 0, 0, 309,
	310, 311, 312, 0, 314, 313, 0, 315, 482, 0,
	316, 317, 0, 0, 318, 319, 0, 0, 320, 321,
	0, 322, 323, 325, 327, 324, 326, 328, 330, 331,
	329, 0, 332, 333, 335, 334, 0, 212, 0, 0,
	483, 484, 336, 337, 0, 338, 339, 340, 0, 0,
	342, 343, 344, 0, 0, 345, 485, 0, 346, 0,
	486, 347, 341, 348, 349, 350, 351, 352, 353, 0,
	354, 355, 487, 356, 488, 357, 0, 358, 0, 359,
	360, 361, 362, 363, 364, 489, 365, 366, 0, 367,
	368, 369, 370, 371, 0, 373, 374, 375, 372, 376,
	377, 378, 379, 0, 380, 0, 381, 382, 383, 384,
	490, 385, 0, 386, 390, 391, 392, 393, 394, 395,
	396, 0, 403, 404, 397, 399, 400, 401, 398, 402,
	405, 406, 0, 407, 387, 388, 408, 0, 409, 491,
	410, 411, 0, 421, 412, 413, 414, 389, 415, 419,
	420, 416, 417, 418, 492, 0, 423, 424, 422, 577,
	425, 426, 427, 428, 429, 268, 430, 269, 431, 0,
	493, 494, 495, 496, 0, 438, 0, 432, 433, 497,
	434, 498, 0, 435, 436, 437, 0, 439, 440, 0,
	0, 441, 442, 443, 444, 446, 0, 447, 0, 445,
	448, 449, 450, 499, 500, 501, 0, 452, 451, 502,
	0, 571, 0, 572, 453, 454, 503, 455, 456, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 581, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 578, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 211, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 212, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 577, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 572, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	581, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 578, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	475, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	212, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 1855,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 577, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 572,
	452, 451, 502, 0, 0, 0, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 581, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 232, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	578, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 475, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 211, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 212, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	577, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 207, 452, 451,
	502, 0, 0, 0, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 581, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 465, 0, 232, 466, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 475, 476, 477, 0,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 211,
	293, 295, 302, 0, 0, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 0, 481, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 212, 0, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 0, 346, 0, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 493,
	494, 495, 496, 0, 438, 0, 432, 433, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 0, 452, 451, 502, 0,
	0, 0, 0, 453, 454, 503, 455, 456, 457, 1323,
	0, 1151, 1150, 0, 0, 0, 0, 1148, 0, 0,
	0, 0, 0, 0, 581, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 1055, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	930, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 210, 0,
	0, 0, 0, 0, 1322, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 931, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	475, 476, 477, 933, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 932, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 934, 481, 935, 304, 305, 306, 936, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 937, 316, 317, 938, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 939, 332, 333, 335, 334, 0,
	0, 940, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	941, 346, 942, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 1321, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 943, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	944, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 0, 0, 0, 0, 453, 454, 503,
	455, 456, 457, 1292, 0, 1151, 1150, 0, 0, 0,
	0, 1148, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 1055, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 930, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	931, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 1291, 476, 477, 933, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 932, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 934, 481, 935, 304, 305,
	306, 936, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 937, 316, 317, 938,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 939, 332,
	333, 335, 334, 0, 0, 940, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 941, 346, 942, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 943, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 944, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 0, 452, 451, 502, 0, 0, 0,
	0, 453, 454, 503, 455, 456, 457, 1288, 0, 1151,
	1150, 0, 0, 0, 0, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 232, 466, 0, 1055,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 930, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 931, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 1287, 476,
	477, 933, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 932, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 934,
	481, 935, 304, 305, 306, 936, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	937, 316, 317, 938, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 939, 332, 333, 335, 334, 0, 0, 940,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 941, 346,
	942, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 943, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 944, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 0, 452, 451,
	502, 0, 0, 0, 0, 453, 454, 503, 455, 456,
	457, 1226, 0, 1151, 1150, 0, 0, 0, 0, 1148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 1055, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 1225, 476, 477, 933, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	932, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 934, 481, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 0, 0, 940, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 944, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 0, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 1223, 0, 1151, 1150, 0,
	0, 0, 0, 1148, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 0, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 465, 0, 232, 466, 0, 1055, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 930, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 931, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 1222, 476, 477, 933,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 932, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 934, 481, 935,
	304, 305, 306, 936, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 937, 316,
	317, 938, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	939, 332, 333, 335, 334, 0, 0, 940, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 941, 346, 942, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 943, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 944, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 493,
	494, 495, 496, 0, 438, 0, 432, 433, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 0, 452, 451, 502, 0,
	0, 0, 0, 453, 454, 503, 455, 456, 457, 1144,
	0, 1151, 1150, 0, 0, 0, 0, 1148, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 1055, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	930, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 931, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	1146, 476, 477, 933, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 932, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 934, 481, 935, 304, 305, 306, 936, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 937, 316, 317, 938, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 939, 332, 333, 335, 334, 0,
	0, 940, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	941, 346, 942, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 943, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	944, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 0, 0, 0, 0, 453, 454, 503,
	455, 456, 457, 1151, 1150, 0, 0, 0, 0, 1148,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 1055, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 933, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	932, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 934, 481, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 0, 0, 940, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 944, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 0, 452, 451, 502, 1151, 1150, 0, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 1055, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 930, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	931, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 475, 476, 477, 933, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 932, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 934, 481, 935, 304, 305,
	306, 936, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 937, 316, 317, 938,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 939, 332,
	333, 335, 334, 0, 0, 940, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 941, 346, 942, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 943, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 944, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 1151, 452, 451, 502, 0, 0, 0,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 1055, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 930, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 931, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 933, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	932, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 934, 481, 935, 304, 305, 306, 936,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 937, 316, 317, 938, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 939, 332, 333, 335,
	334, 0, 0, 940, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 941, 346, 942, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	943, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 944, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 207, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 2186, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 2183, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 2327, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 2189, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	475, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 2324, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	2326, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 2323, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 2188,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 2325, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 207,
	452, 451, 502, 0, 0, 0, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 2186, 232, 466, 0, 0,
	2180, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 2183, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 2189, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 2179, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 2188, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 2187, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 0, 452, 451,
	502, 1367, 0, 207, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 211, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 212, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 1370, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 1368, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 0, 1369, 451, 502, 1139, 0, 207, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 0, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 465, 0, 232, 466, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 1141, 476, 477, 0,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 211,
	293, 295, 302, 0, 0, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 0, 481, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 212, 0, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 985, 342,
	343, 344, 0, 0, 345, 485, 0, 346, 0, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 493,
	494, 495, 496, 0, 438, 0, 432, 433, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 0, 452, 451, 502, 1136,
	0, 207, 0, 453, 454, 503, 455, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	1138, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	212, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 985, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 1043, 0, 207, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 1045, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 212, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 985, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 0, 452, 451, 502, 534, 0, 207,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 533,
	217, 523, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 232, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 526, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 527, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 475, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 528, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 0, 452, 451,
	502, 522, 0, 207, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 523, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 526, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 527, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 528, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 207, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	475, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	212, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 985, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 2256, 0, 207, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 475, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 212, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 0, 452, 451, 502, 1839, 0, 207,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 232, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 475, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 211, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 212, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 207, 452, 451,
	502, 0, 0, 0, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 0, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 465, 0, 232, 466, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 475, 476, 477, 0,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 211,
	293, 295, 302, 0, 0, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 0, 481, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 212, 0, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 0, 346, 0, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 1777, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 493,
	494, 495, 496, 0, 438, 0, 432, 433, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 0, 452, 451, 502, 1770,
	0, 207, 0, 453, 454, 503, 455, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	1769, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	212, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 1765, 0, 207, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 1767, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 212, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 0, 452, 451, 502, 1281, 0, 207,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 232, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 1280, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 211, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 212, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 0, 452, 451,
	502, 1278, 0, 207, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 1277, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 211, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 212, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 0, 452, 451, 502, 1275, 0, 207, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 0, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 465, 0, 232, 466, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 1274, 476, 477, 0,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 211,
	293, 295, 302, 0, 0, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 0, 481, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 212, 0, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 0, 346, 0, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 493,
	494, 495, 496, 0, 438, 0, 432, 433, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 0, 452, 451, 502, 1271,
	0, 207, 0, 453, 454, 503, 455, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	1270, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 211, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	212, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 1246, 0, 207, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 475, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 211, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 212, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 0, 452, 451, 502, 1161, 0, 207,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 232, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 1163, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 211, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 212, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 207, 452, 451,
	502, 0, 0, 0, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 0, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 465, 0, 232, 466, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 475, 476, 477, 0,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 211,
	293, 295, 302, 0, 0, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 0, 481, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 212, 0, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 0, 346, 0, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 493,
	494, 495, 496, 0, 438, 0, 432, 433, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 207, 452, 451, 502, 0,
	0, 0, 0, 453, 454, 503, 455, 456, 457, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 526, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 527, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 475, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 528, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 0, 452, 451, 502, 672, 0, 207,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 232, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 475, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	671, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 0, 452, 451,
	502, 511, 0, 207, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 510, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	509, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 207, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 2120, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	475, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 207, 2314, 0, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 207, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 2881, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	475, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 207, 2314, 0, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 2311, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 207, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 213, 214,
	215, 216, 217, 1845, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	475, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 1837, 0, 207, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 475, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 0, 452, 451, 502, 554, 0, 207,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 1021, 0, 232, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 475, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 555, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 551, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 550, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 0, 452, 451,
	502, 1789, 0, 207, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 1788, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 0, 452, 451, 502, 554, 0, 207, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 0, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 465, 0, 544, 466, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 475, 476, 477, 0,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 0, 481, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 555,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 0, 346, 0, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 551, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 1300,
	406, 0, 407, 387, 388, 408, 0, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 550,
	494, 495, 496, 0, 438, 0, 432, 433, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 0, 452, 451, 502, 1285,
	0, 207, 0, 453, 454, 503, 455, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	1284, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 1234, 0, 207, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 1233, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 0, 452, 451, 502, 1218, 0, 207,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 232, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 475, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 0, 452, 451,
	502, 1155, 0, 207, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 0, 452, 451, 502, 554, 0, 207, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 0, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 1021, 0, 232, 466, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 475, 476, 477, 0,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 0, 481, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 555,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 0, 346, 0, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 551, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 550,
	494, 495, 496, 0, 438, 0, 432, 1022, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 207, 452, 451, 502, 0,
	0, 0, 0, 453, 454, 503, 455, 456, 457, 0,
	0, 0, 213, 214, 215, 216, 217, 1004, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 475, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 0, 452, 451, 502, 554, 0, 207,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 544, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 542, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 475, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 543, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 555, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 545, 385, 0, 386, 390, 391, 551, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 546, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 550, 494, 495, 496, 0, 438, 0, 432, 548,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 0, 452, 451,
	502, 538, 0, 207, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 539,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 0, 452, 451, 502, 536, 0, 207, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 0, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 465, 0, 232, 466, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 475, 476, 477, 0,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 0, 481, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 0, 346, 0, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 493,
	494, 495, 496, 0, 438, 0, 432, 433, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 0, 452, 451, 502, 530,
	0, 207, 0, 453, 454, 503, 455, 456, 457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	475, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 0,
	452, 451, 502, 506, 0, 207, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 475, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 207, 452, 451, 502, 0, 0, 0,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 207, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 0, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	2582, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 407, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 207,
	452, 451, 502, 0, 0, 0, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 232, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 2580, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 207, 452, 451,
	502, 0, 0, 0, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 0, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 465, 0, 232, 466, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 2568, 476, 477, 0,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 0, 481, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 0, 346, 0, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 493,
	494, 495, 496, 0, 438, 0, 432, 433, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 207, 452, 451, 502, 0,
	0, 0, 0, 453, 454, 503, 455, 456, 457, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 2274, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 365, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 207, 452, 451, 502, 0, 0, 0,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 284, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	350, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 362, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 385, 0, 386, 539,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 207, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 458,
	0, 1801, 0, 0, 219, 220, 221, 459, 460, 222,
	461, 223, 224, 462, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 463, 464, 465, 0, 232, 466,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 467, 468, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 469, 264, 265, 267,
	270, 266, 271, 272, 273, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 472, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 473, 0, 474, 284, 0, 285, 286, 287, 288,
	475, 476, 477, 0, 289, 290, 0, 291, 292, 294,
	0, 0, 0, 0, 293, 295, 302, 0, 0, 296,
	478, 298, 297, 299, 300, 301, 479, 0, 480, 0,
	303, 0, 481, 0, 304, 305, 306, 0, 307, 308,
	0, 0, 309, 310, 311, 312, 0, 314, 313, 0,
	315, 482, 0, 316, 317, 0, 0, 318, 319, 0,
	0, 320, 321, 0, 322, 323, 325, 327, 324, 326,
	328, 330, 331, 329, 0, 332, 333, 335, 334, 0,
	0, 0, 0, 483, 484, 336, 337, 0, 338, 339,
	340, 0, 0, 342, 343, 344, 0, 0, 345, 485,
	0, 346, 0, 486, 347, 341, 348, 349, 350, 351,
	352, 353, 0, 354, 355, 487, 356, 488, 357, 0,
	358, 0, 359, 360, 361, 362, 363, 364, 489, 365,
	366, 0, 367, 368, 369, 370, 371, 0, 373, 374,
	375, 372, 376, 377, 378, 379, 0, 380, 0, 381,
	382, 383, 384, 490, 385, 0, 386, 390, 391, 392,
	393, 394, 395, 396, 0, 403, 404, 397, 399, 400,
	401, 398, 402, 405, 406, 0, 0, 387, 388, 408,
	0, 409, 491, 410, 411, 0, 421, 412, 413, 414,
	389, 415, 419, 420, 416, 417, 418, 492, 0, 423,
	424, 422, 0, 425, 426, 427, 428, 429, 268, 430,
	269, 431, 0, 493, 494, 495, 496, 0, 438, 0,
	432, 433, 497, 434, 498, 0, 435, 436, 437, 0,
	439, 440, 0, 0, 441, 442, 443, 444, 446, 0,
	447, 0, 445, 448, 449, 450, 499, 500, 501, 207,
	452, 451, 502, 0, 0, 0, 0, 453, 454, 503,
	455, 456, 457, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 458, 0, 0,
	0, 0, 219, 220, 221, 459, 460, 222, 461, 223,
	224, 462, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 463, 464, 465, 0, 232, 466, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 467, 468, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 469, 264, 265, 267, 270, 266,
	271, 272, 273, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 472, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 473,
	0, 474, 284, 0, 285, 286, 287, 288, 1254, 476,
	477, 0, 289, 290, 0, 291, 292, 294, 0, 0,
	0, 0, 293, 295, 302, 0, 0, 296, 478, 298,
	297, 299, 300, 301, 479, 0, 480, 0, 303, 0,
	481, 0, 304, 305, 306, 0, 307, 308, 0, 0,
	309, 310, 311, 312, 0, 314, 313, 0, 315, 482,
	0, 316, 317, 0, 0, 318, 319, 0, 0, 320,
	321, 0, 322, 323, 325, 327, 324, 326, 328, 330,
	331, 329, 0, 332, 333, 335, 334, 0, 0, 0,
	0, 483, 484, 336, 337, 0, 338, 339, 340, 0,
	0, 342, 343, 344, 0, 0, 345, 485, 0, 346,
	0, 486, 347, 341, 348, 349, 350, 351, 352, 353,
	0, 354, 355, 487, 356, 488, 357, 0, 358, 0,
	359, 360, 361, 362, 363, 364, 489, 365, 366, 0,
	367, 368, 369, 370, 371, 0, 373, 374, 375, 372,
	376, 377, 378, 379, 0, 380, 0, 381, 382, 383,
	384, 490, 385, 0, 386, 390, 391, 392, 393, 394,
	395, 396, 0, 403, 404, 397, 399, 400, 401, 398,
	402, 405, 406, 0, 407, 387, 388, 408, 0, 409,
	491, 410, 411, 0, 421, 412, 413, 414, 389, 415,
	419, 420, 416, 417, 418, 492, 0, 423, 424, 422,
	0, 425, 426, 427, 428, 429, 268, 430, 269, 431,
	0, 493, 494, 495, 496, 0, 438, 0, 432, 433,
	497, 434, 498, 0, 435, 436, 437, 0, 439, 440,
	0, 0, 441, 442, 443, 444, 446, 0, 447, 0,
	445, 448, 449, 450, 499, 500, 501, 207, 452, 451,
	502, 0, 0, 0, 0, 453, 454, 503, 455, 456,
	457, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 458, 0, 0, 0, 0,
	219, 220, 221, 459, 460, 222, 461, 223, 224, 462,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	463, 464, 465, 0, 232, 466, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 467, 468, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 469, 264, 265, 267, 270, 266, 271, 272,
	273, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 472, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 473, 0, 474,
	284, 0, 285, 286, 287, 288, 1196, 476, 477, 0,
	289, 290, 0, 291, 292, 294, 0, 0, 0, 0,
	293, 295, 302, 0, 0, 296, 478, 298, 297, 299,
	300, 301, 479, 0, 480, 0, 303, 0, 481, 0,
	304, 305, 306, 0, 307, 308, 0, 0, 309, 310,
	311, 312, 0, 314, 313, 0, 315, 482, 0, 316,
	317, 0, 0, 318, 319, 0, 0, 320, 321, 0,
	322, 323, 325, 327, 324, 326, 328, 330, 331, 329,
	0, 332, 333, 335, 334, 0, 0, 0, 0, 483,
	484, 336, 337, 0, 338, 339, 340, 0, 0, 342,
	343, 344, 0, 0, 345, 485, 0, 346, 0, 486,
	347, 341, 348, 349, 350, 351, 352, 353, 0, 354,
	355, 487, 356, 488, 357, 0, 358, 0, 359, 360,
	361, 362, 363, 364, 489, 365, 366, 0, 367, 368,
	369, 370, 371, 0, 373, 374, 375, 372, 376, 377,
	378, 379, 0, 380, 0, 381, 382, 383, 384, 490,
	385, 0, 386, 390, 391, 392, 393, 394, 395, 396,
	0, 403, 404, 397, 399, 400, 401, 398, 402, 405,
	406, 0, 407, 387, 388, 408, 0, 409, 491, 410,
	411, 0, 421, 412, 413, 414, 389, 415, 419, 420,
	416, 417, 418, 492, 0, 423, 424, 422, 0, 425,
	426, 427, 428, 429, 268, 430, 269, 431, 0, 493,
	494, 495, 496, 0, 438, 0, 432, 433, 497, 434,
	498, 0, 435, 436, 437, 0, 439, 440, 0, 0,
	441, 442, 443, 444, 446, 0, 447, 0, 445, 448,
	449, 450, 499, 500, 501, 207, 452, 451, 502, 0,
	0, 0, 0, 453, 454, 503, 455, 456, 457, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 219, 220,
	221, 459, 460, 222, 461, 223, 224, 462, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 463, 464,
	465, 0, 232, 466, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	467, 468, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	469, 264, 265, 267, 270, 266, 271, 272, 273, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 472, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 473, 0, 474, 284, 0,
	285, 286, 287, 288, 475, 476, 477, 0, 289, 290,
	0, 291, 292, 294, 0, 0, 0, 0, 293, 295,
	302, 0, 0, 296, 478, 298, 297, 299, 300, 301,
	479, 0, 480, 0, 303, 0, 481, 0, 304, 305,
	306, 0, 307, 308, 0, 0, 309, 310, 311, 312,
	0, 314, 313, 0, 315, 482, 0, 316, 317, 0,
	0, 318, 319, 0, 0, 320, 321, 0, 322, 323,
	325, 327, 324, 326, 328, 330, 331, 329, 0, 332,
	333, 335, 334, 0, 0, 0, 0, 483, 484, 336,
	337, 0, 338, 339, 340, 0, 0, 342, 343, 344,
	0, 0, 345, 485, 0, 346, 0, 486, 347, 341,
	348, 349, 350, 351, 352, 353, 0, 354, 355, 487,
	356, 488, 357, 0, 358, 0, 359, 360, 361, 362,
	363, 364, 489, 959, 366, 0, 367, 368, 369, 370,
	371, 0, 373, 374, 375, 372, 376, 377, 378, 379,
	0, 380, 0, 381, 382, 383, 384, 490, 385, 0,
	386, 390, 391, 392, 393, 394, 395, 396, 0, 403,
	404, 397, 399, 400, 401, 398, 402, 405, 406, 0,
	407, 387, 388, 408, 0, 409, 491, 410, 411, 0,
	421, 412, 413, 414, 389, 415, 419, 420, 416, 417,
	418, 492, 0, 423, 424, 422, 0, 425, 426, 427,
	428, 429, 268, 430, 269, 431, 0, 493, 494, 495,
	496, 0, 438, 0, 432, 433, 497, 434, 498, 0,
	435, 436, 437, 0, 439, 440, 0, 0, 441, 442,
	443, 444, 446, 0, 447, 0, 445, 448, 449, 450,
	499, 500, 501, 207, 452, 451, 502, 0, 0, 0,
	0, 453, 454, 503, 455, 456, 457, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 458, 0, 0, 0, 0, 219, 220, 221, 459,
	460, 222, 461, 223, 224, 462, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 463, 464, 465, 0,
	232, 466, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 467, 468,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 469, 264,
	265, 267, 270, 266, 271, 272, 273, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 472,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 473, 0, 474, 0, 0, 285, 286,
	287, 288, 475, 476, 477, 0, 289, 290, 0, 291,
	292, 294, 0, 0, 0, 0, 293, 295, 302, 0,
	0, 296, 478, 298, 297, 299, 300, 301, 479, 0,
	480, 0, 303, 0, 481, 0, 304, 305, 306, 0,
	307, 308, 0, 0, 309, 310, 311, 312, 0, 314,
	313, 0, 315, 482, 0, 316, 317, 0, 0, 318,
	319, 0, 0, 320, 321, 0, 322, 323, 325, 327,
	324, 326, 328, 330, 331, 329, 0, 332, 333, 335,
	334, 0, 0, 0, 0, 483, 484, 336, 337, 0,
	338, 339, 340, 0, 0, 342, 343, 344, 0, 0,
	345, 485, 0, 346, 0, 486, 347, 341, 348, 349,
	0, 351, 352, 353, 0, 354, 355, 487, 356, 488,
	357, 0, 358, 0, 359, 360, 361, 0, 363, 364,
	489, 365, 366, 0, 367, 368, 369, 370, 371, 0,
	373, 374, 375, 372, 376, 377, 378, 379, 0, 380,
	0, 381, 382, 383, 384, 490, 0, 0, 386, 390,
	391, 392, 393, 394, 395, 396, 0, 403, 404, 397,
	399, 400, 401, 398, 402, 405, 406, 0, 407, 387,
	388, 408, 0, 409, 491, 410, 411, 0, 421, 412,
	413, 414, 389, 415, 419, 420, 416, 417, 418, 492,
	0, 423, 424, 422, 0, 425, 426, 427, 428, 429,
	268, 430, 269, 431, 0, 493, 494, 495, 496, 0,
	438, 0, 432, 433, 497, 434, 498, 0, 435, 436,
	437, 0, 439, 440, 0, 0, 441, 442, 443, 444,
	446, 0, 447, 0, 445, 448, 449, 450, 499, 500,
	501, 0, 452, 451, 502, 0, 0, 0, 0, 453,
	454, 503, 455, 456, 457, 1409, 1410, 0, 1442, 1443,
	1444, 1452, 1453, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 1412, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1411, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 1409, 1410, 0, 1442, 1443, 1444, 1452, 1453, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 1412, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 1435, 1436,
	1437, 0, 0, 1411, 0, 0, 0, 1417, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 1459, 0, 0, 0, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	1456, 0, 0, 0, 0, 0, 0, 1426, 1427, 0,
	0, 0, 0, 1434, 1435, 1436, 1437, 0, 0, 0,
	0, 0, 1447, 1417, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 1457, 1459,
	0, 0, 0, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 1456, 0, 0, 0,
	0, 0, 0, 1426, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 0, 1438, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 1409, 1410, 0, 1442, 1443, 1444, 1452,
	1453, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 1450, 0, 0, 0, 0, 0, 1412,
	1448, 0, 1458, 1423, 1424, 1430, 1429, 1425, 1451, 0,
	1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419, 0,
	0, 0, 0, 0, 0, 1411, 2985, 0, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 1409,
	1410, 0, 1442, 1443, 1444, 1452, 1453, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 1412, 1448, 0, 1458, 1423,
	1424, 1430, 1429, 1425, 1451, 0, 1422, 1420, 1421, 1413,
	1414, 1415, 1416, 1418, 1419, 1434, 1435, 1436, 1437, 0,
	0, 1411, 2730, 0, 0, 1417, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 1459, 0, 0, 0, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 1456, 0,
	0, 0, 0, 0, 0, 1426, 1427, 0, 0, 0,
	0, 1434, 1435, 1436, 1437, 0, 0, 0, 0, 0,
	1447, 1417, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 1457, 1459, 0, 0,
	0, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 1456, 0, 0, 0, 0, 0,
	0, 1426, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 1438, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 1457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 1409, 1410, 0, 1442, 1443, 1444, 1452, 1453, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 1450, 0, 0, 0, 0, 0, 1412, 1448, 0,
	1458, 1423, 1424, 1430, 1429, 1425, 1451, 0, 1422, 1420,
	1421, 1413, 1414, 1415, 1416, 1418, 1419, 0, 0, 0,
	0, 0, 0, 1411, 2440, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 1409, 1410, 0,
	1442, 1443, 1444, 1452, 1453, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 1412, 1448, 0, 1458, 1423, 1424, 1430,
	1429, 1425, 1451, 0, 1422, 1420, 1421, 1413, 1414, 1415,
	1416, 1418, 1419, 1434, 1435, 1436, 1437, 0, 0, 1411,
	2439, 0, 0, 1417, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 1459,
	0, 0, 0, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 1456, 0, 0, 0,
	0, 0, 0, 1426, 1427, 0, 0, 0, 0, 1434,
	1435, 1436, 1437, 0, 0, 0, 0, 0, 1447, 1417,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 1457, 1459, 0, 0, 0, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 1456, 0, 0, 0, 0, 0, 0, 1426,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	1438, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 1409,
	1410, 0, 1442, 1443, 1444, 1452, 1453, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 1450,
	0, 0, 0, 0, 0, 1412, 1448, 0, 1458, 1423,
	1424, 1430, 1429, 1425, 1451, 0, 1422, 1420, 1421, 1413,
	1414, 1415, 1416, 1418, 1419, 0, 0, 0, 0, 0,
	0, 1411, 2436, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 1409, 1410, 0, 1442, 1443,
	1444, 1452, 1453, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 1412, 1448, 0, 1458, 1423, 1424, 1430, 1429, 1425,
	1451, 0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418,
	1419, 1434, 1435, 1436, 1437, 0, 0, 1411, 2435, 0,
	0, 1417, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 1459, 0, 0,
	0, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 1456, 0, 0, 0, 0, 0,
	0, 1426, 1427, 0, 0, 0, 0, 1434, 1435, 1436,
	1437, 0, 0, 0, 0, 0, 1447, 1417, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 1457, 1459, 0, 0, 0, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	1456, 0, 0, 0, 0, 0, 0, 1426, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 1438, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 1409, 1410, 0,
	1442, 1443, 1444, 1452, 1453, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 1450, 0, 0,
	0, 0, 0, 1412, 1448, 0, 1458, 1423, 1424, 1430,
	1429, 1425, 1451, 0, 1422, 1420, 1421, 1413, 1414, 1415,
	1416, 1418, 1419, 0, 0, 0, 0, 0, 0, 1411,
	2434, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 1409, 1410, 0, 1442, 1443, 1444, 1452,
	1453, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 1412,
	1448, 0, 1458, 1423, 1424, 1430, 1429, 1425, 1451, 0,
	1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419, 1434,
	1435, 1436, 1437, 0, 0, 1411, 2002, 0, 0, 1417,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 1459, 0, 0, 0, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 1456, 0, 0, 0, 0, 0, 0, 1426,
	1427, 0, 0, 0, 0, 1434, 1435, 1436, 1437, 0,
	0, 0, 0, 0, 1447, 1417, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	1457, 1459, 0, 0, 0, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 1456, 0,
	0, 0, 0, 0, 0, 1426, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 1438, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 1409, 1410, 0, 1442, 1443,
	1444, 1452, 1453, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 1450, 0, 0, 0, 0,
	0, 1412, 1448, 0, 1458, 1423, 1424, 1430, 1429, 1425,
	1451, 0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418,
	1419, 0, 0, 0, 0, 3286, 0, 1411, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 1409, 1410, 0, 1442, 1443, 1444, 1452, 1453, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 1412, 1448, 0,
	1458, 1423, 1424, 1430, 1429, 1425, 1451, 0, 1422, 1420,
	1421, 1413, 1414, 1415, 1416, 1418, 1419, 1434, 1435, 1436,
	1437, 3282, 0, 1411, 0, 0, 0, 1417, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 1459, 0, 0, 0, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	1456, 0, 0, 0, 0, 0, 0, 1426, 1427, 0,
	0, 0, 0, 1434, 1435, 1436, 1437, 0, 0, 0,
	0, 0, 1447, 1417, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 1457, 1459,
	0, 0, 0, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 1456, 0, 0, 0,
	0, 0, 0, 1426, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 0, 1438, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 1409, 1410, 0, 1442, 1443, 1444, 1452,
	1453, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 1450, 0, 0, 0, 0, 0, 1412,
	1448, 0, 1458, 1423, 1424, 1430, 1429, 1425, 1451, 0,
	1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419, 0,
	0, 0, 0, 3215, 0, 1411, 0, 0, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 1409,
	1410, 0, 1442, 1443, 1444, 1452, 1453, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 1412, 1448, 0, 1458, 1423,
	1424, 1430, 1429, 1425, 1451, 0, 1422, 1420, 1421, 1413,
	1414, 1415, 1416, 1418, 1419, 1434, 1435, 1436, 1437, 3214,
	0, 1411, 0, 0, 0, 1417, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 1459, 0, 0, 0, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 1456, 0,
	0, 0, 0, 0, 0, 1426, 1427, 0, 0, 0,
	0, 1434, 1435, 1436, 1437, 0, 0, 0, 0, 0,
	1447, 1417, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 1457, 1459, 0, 0,
	0, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 1456, 0, 0, 0, 0, 0,
	0, 1426, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 1438, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 1457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 1409, 1410, 0, 1442, 1443, 1444, 1452, 1453, 1454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 1450, 0, 0, 0, 0, 0, 1412, 1448, 0,
	1458, 1423, 1424, 1430, 1429, 1425, 1451, 0, 1422, 1420,
	1421, 1413, 1414, 1415, 1416, 1418, 1419, 0, 0, 0,
	0, 3119, 0, 1411, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 1428, 0,
	0, 0, 0, 0, 0, 0, 0, 1409, 1410, 0,
	1442, 1443, 1444, 1452, 1453, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 1412, 1448, 0, 1458, 1423, 1424, 1430,
	1429, 1425, 1451, 0, 1422, 1420, 1421, 1413, 1414, 1415,
	1416, 1418, 1419, 1434, 1435, 1436, 1437, 3038, 0, 1411,
	0, 0, 0, 1417, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 1459,
	0, 0, 0, 1439, 1440, 1441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 1456, 0, 0, 0,
	0, 0, 0, 1426, 1427, 0, 0, 0, 0, 1434,
	1435, 1436, 1437, 0, 0, 0, 0, 0, 1447, 1417,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 1457, 1459, 0, 0, 0, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 1456, 0, 0, 0, 0, 0, 0, 1426,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	1438, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 1409,
	1410, 0, 1442, 1443, 1444, 1452, 1453, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 1450,
	0, 0, 0, 0, 0, 1412, 1448, 0, 1458, 1423,
	1424, 1430, 1429, 1425, 1451, 0, 1422, 1420, 1421, 1413,
	1414, 1415, 1416, 1418, 1419, 0, 0, 0, 0, 2990,
	0, 1411, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 1409, 1410, 0, 1442, 1443,
	1444, 1452, 1453, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 1412, 1448, 0, 1458, 1423, 1424, 1430, 1429, 1425,
	1451, 0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418,
	1419, 1434, 1435, 1436, 1437, 2989, 0, 1411, 0, 0,
	0, 1417, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 1459, 0, 0,
	0, 1439, 1440, 1441, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 1456, 0, 0, 0, 0, 0,
	0, 1426, 1427, 0, 0, 0, 0, 1434, 1435, 1436,
	1437, 0, 0, 0, 0, 0, 1447, 1417, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 1457, 1459, 0, 0, 0, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	1456, 0, 0, 0, 0, 0, 0, 1426, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 1438, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 1457, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 1409, 1410, 0,
	1442, 1443, 1444, 1452, 1453, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 1450, 0, 0,
	0, 0, 0, 1412, 1448, 0, 1458, 1423, 1424, 1430,
	1429, 1425, 1451, 0, 1422, 1420, 1421, 1413, 1414, 1415,
	1416, 1418, 1419, 0, 0, 0, 0, 2988, 0, 1411,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 1409, 1410, 0, 1442, 1443, 1444, 1452,
	1453, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 1412,
	1448, 0, 1458, 1423, 1424, 1430, 1429, 1425, 1451, 0,
	1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419, 1434,
	1435, 1436, 1437, 2954, 0, 1411, 0, 0, 0, 1417,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 1459, 0, 0, 0, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 1456, 0, 0, 0, 0, 0, 0, 1426,
	1427, 0, 0, 0, 0, 1434, 1435, 1436, 1437, 0,
	0, 0, 0, 0, 1447, 1417, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	1457, 1459, 0, 0, 0, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 1456, 0,
	0, 0, 0, 0, 0, 1426, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 1438, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 1423, 1424, 1430, 1429, 1425,
	1451, 0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418,
	1419, 0, 0, 0, 0, 2765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1409, 1410, 0, 1442, 1443,
	1444, 1452, 1453, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 1412, 0, 0, 1458, 0, 0, 0, 1448, 0,
	0, 1423, 1424, 1430, 1429, 1425, 1451, 0, 1422, 1420,
	1421, 1413, 1414, 1415, 1416, 1418, 1419, 1411, 0, 2391,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1409, 1410, 0, 1442, 1443, 1444, 1452, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 2362, 0, 1412, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 1435, 1436,
	1437, 0, 0, 0, 1411, 0, 0, 1417, 3375, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 1459, 0, 0, 0, 1439, 1440, 1441,
	0, 0, 0, 0, 0, 0, 0, 2363, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	1456, 0, 0, 0, 0, 0, 0, 1426, 1427, 0,
	0, 0, 0, 0, 1434, 1435, 1436, 1437, 0, 0,
	0, 0, 1447, 0, 1417, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 1457, 0,
	1459, 0, 0, 0, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1455, 0, 1456, 0, 0,
	0, 0, 0, 3374, 1426, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 1438, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	1448, 0, 0, 1423, 1424, 1430, 1429, 1425, 1451, 0,
	1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419, 1409,
	1410, 0, 1442, 1443, 1444, 1452, 1453, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 1412, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1411, 0, 0, 0, 0, 0, 1448, 0, 1431,
	1423, 1424, 1430, 1429, 1425, 1451, 1428, 1422, 1420, 1421,
	1413, 1414, 1415, 1416, 1418, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2092,
	0, 0, 0, 0, 0, 0, 1409, 1410, 0, 1442,
	1443, 1444, 1452, 1453, 1454, 0, 0, 0, 0, 0,
	0, 1434, 1435, 1436, 1437, 1445, 0, 0, 0, 2091,
	0, 1417, 1412, 2479, 0, 1458, 2478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 1459, 1411, 0,
	0, 1439, 1440, 1441, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 1455, 0, 1456, 0, 0, 0, 0, 0,
	0, 1426, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1434, 1435,
	1436, 1437, 1457, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 1459, 0, 0, 0, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1438, 1455,
	0, 1456, 0, 0, 0, 0, 0, 0, 1426, 1427,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 1448, 0, 0, 1423, 1424, 1430,
	1429, 1425, 1451, 0, 1422, 1420, 1421, 1413, 1414, 1415,
	1416, 1418, 1419, 0, 0, 0, 1409, 1410, 1450, 1442,
	1443, 1444, 1452, 1453, 1454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 0, 0, 0,
	0, 0, 1412, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1411, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 1428, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 0, 0, 1423, 1424, 1430, 1429, 1425, 1451,
	0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419,
	0, 0, 0, 1409, 1410, 0, 1442, 1443, 1444, 1452,
	1453, 1454, 0, 0, 0, 0, 0, 0, 1434, 1435,
	1436, 1437, 1445, 0, 0, 0, 0, 0, 1417, 1412,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 1459, 1411, 0, 0, 1439, 1440,
	1441, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 1456, 0, 0, 0, 0, 0, 0, 1426, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 1435, 1436, 1437, 1457,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 802, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 1459, 0, 0, 0, 1439, 1440, 1441, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1438, 1455, 0, 1456, 0,
	0, 0, 0, 0, 0, 1426, 1427, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 1448, 0, 0, 1423, 1424, 1430, 1429, 1425, 1451,
	0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418, 1419,
	0, 0, 0, 1409, 1410, 1450, 1442, 1443, 1444, 1452,
	1453, 1454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 1412,
	0, 0, 1458, 0, 0, 0, 0, 2753, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1411, 0, 0, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 1423, 1424, 1430, 1429, 1425, 1451, 0, 1422, 1420,
	1421, 1413, 1414, 1415, 1416, 1418, 1419, 0, 0, 0,
	1409, 1410, 0, 1442, 1443, 1444, 1452, 1453, 1454, 0,
	0, 0, 0, 0, 0, 1434, 1435, 1436, 1437, 1445,
	0, 0, 0, 2480, 0, 1417, 1412, 0, 0, 1458,
	2485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 1459, 1411, 0, 0, 1439, 1440, 1441, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 1456, 0,
	0, 0, 0, 0, 0, 1426, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 1435, 1436, 1437, 1457, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 1459, 0,
	0, 0, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 1455, 0, 1456, 0, 0, 0, 0,
	0, 0, 1426, 1427, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 1448, 0,
	0, 1423, 1424, 1430, 1429, 1425, 1451, 0, 1422, 1420,
	1421, 1413, 1414, 1415, 1416, 1418, 1419, 0, 0, 0,
	1409, 1410, 1450, 1442, 1443, 1444, 1452, 1453, 1454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 1412, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1411, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 0, 0, 1423, 1424,
	1430, 1429, 1425, 1451, 0, 1422, 1420, 1421, 1413, 1414,
	1415, 1416, 1418, 1419, 0, 0, 0, 1409, 1410, 0,
	1442, 1443, 1444, 1452, 1453, 1454, 0, 0, 0, 0,
	0, 0, 1434, 1435, 1436, 1437, 1445, 0, 0, 0,
	2433, 0, 1417, 1412, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 1459, 1411,
	0, 0, 1439, 1440, 1441, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 1455, 0, 1456, 0, 0, 0, 0,
	0, 0, 1426, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	1435, 1436, 1437, 1457, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 2447, 1459, 0, 0, 0, 1439,
	1440, 1441, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1438,
	1455, 0, 1456, 0, 0, 0, 0, 0, 0, 1426,
	1427, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 1448, 0, 0, 1423, 1424,
	1430, 1429, 1425, 1451, 0, 1422, 1420, 1421, 1413, 1414,
	1415, 1416, 1418, 1419, 0, 0, 0, 1409, 1410, 1450,
	1442, 1443, 1444, 1452, 1453, 1454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 1412, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1411,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 1423, 1424, 1430, 1429, 1425,
	1451, 0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418,
	1419, 0, 1409, 1410, 0, 1442, 1443, 1444, 1452, 1453,
	1454, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	1435, 1436, 1437, 0, 0, 0, 0, 0, 1412, 1417,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 1411, 1459, 0, 0, 0, 1439,
	1440, 1441, 1431, 0, 0, 0, 0, 0, 0, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 1456, 0, 0, 0, 0, 0, 0, 1426,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 1435, 1436, 1437, 0, 0,
	1457, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	1459, 0, 0, 0, 1439, 1440, 1441, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 0, 0, 0,
	0, 0, 0, 0, 1426, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 1623, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1635, 1617, 1624, 1607, 1645, 1644, 0,
	0, 1609, 1608, 0, 0, 0, 0, 0, 0, 1655,
	1656, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 1646,
	0, 1642, 1641, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 1448, 1640, 0, 1423, 1424, 1430, 1429, 1425,
	1451, 0, 1422, 1420, 1421, 1413, 1414, 1415, 1416, 1418,
	1419, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 1639, 1637, 1638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1619, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1628, 1622, 1630, 1632, 1633,
	1634, 1629, 0, 1627, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1651, 1652, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	1423, 1424, 1430, 1429, 1425, 1451, 0, 1422, 1420, 1421,
	1413, 1414, 1415, 1416, 1418, 1419, 0, 1611, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1643,
	0, 0, 0, 1620, 0, 1621, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1636, 0, 0, 0, 1604, 1602, 1603,
	1606, 1605, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1612, 1613, 1615, 1616, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1631, 1614, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1654, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1610, 0, 1647, 1648,
	1649, 1650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1618, 0, 0,
	0, 0, 1625, 1653,
}
var sqlPact = [...]int{

	187, -1000, -1000, -1000, -1000, -1000, -1000, 240, 238, 237,
	236, 235, 233, 232, 230, 229, -1000, -1000, -1000, 228,
	-1000, -1000, 216, -1000, 214, 205, 203, 201, -1000, 200,
	199, -1000, -1000, -1000, -1000, 197, 196, 192, 48153, 1728,
	57641, 49389, 1567, 2100, 42789, 57227, 42375, 56813, 56399, 191,
	-1000, 55985, 188, 186, 180, -1000, -1000, 179, 1710, 34479,
	178, 177, 176, 1843, 164, 157, -1000, 154, -1000, 8609,
	1248, -1000, 153, 150, -1000, 4520, 3992, 48975, 2114, 149,
	146, 34064, 2089, -1000, -1000, 1587, -1000, -1000, 134, 130,
	129, 126, 123, 120, 111, 110, 108, -1000, 107, 105,
	104, 103, 102, 100, 99, 95, 94, 93, 92, 91,
	90, 88, 84, 83, 81, -1000, 7365, 1512, 1398, 1396,
	1387, 1357, 1382, 863, 76, 74, 73, 72, 70, 69,
	-1000, -1000, 66, 62, 61, 58, -1000, 57, 53, 248,
	39, 38, 37, 36, 35, 2024, 2045, 1319, 509, 15920,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	61721, 58049, 34, -31, -121, -1000, 2401, 933, 28674, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 510,
	-1000, -1000, -1000, 320, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1518, 688, -1000, -1000, -1000, 55571,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 58049, -1000,
	1724, 25, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 687,
	-1000, 1721, 194, 1644, -1000, -1000, -1000, -1000, -1000, 58049,
	-1000, -1000, 2678, 2677, 1633, 686, 55163, -1000, 1227, -1000,
	801, 18555, -1000, 1033, -1000, 18555, 318, -1000, -1000, -1000,
	-1000, -1000, 41961, 12863, 41547, 41133, 38247, 54749, 12439, 47745,
	1085, -1000, -1000, -1000, -1000, -1000, 30, 35703, 58049, -1000,
	306, -1000, -1000, -1000, -1000, -1000, -1000, 24816, 363, 24366,
	729, 23916, 374, -1000, -1000, -1000, -1000, 2676, 2675, 959,
	2674, 2333, 61313, 1414, 2673, 1339, 1030, 896, 2671, 2667,
	2666, 2665, 2664, 2663, 2662, 1198, 54335, 2108, 37823, 37399,
	48153, 48153, 1911, 53921, -1000, -1000, 1112, 1107, -1000, -1000,
	-1000, -1000, 2222, 2088, 2087, 47331, -1000, -1000, 2659, 2658,
	2657, 2656, 2655, 60905, 1411, 2654, 1851, 2653, 2650, 2649,
	2643, 2641, 2640, 2639, 2638, 2637, -1000, 46917, 46503, 46089,
	45675, 53507, 36975, 36551, -1000, -1000, -1000, 30326, 5366, 53093,
	31176, 48153, -1000, -1000, 25253, -24, -1000, -1000, -1000, 2068,
	-1000, 25253, -24, -1000, 2107, 1535, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1603, 1330, 2527, 36127, 1615, 1148,
	2220, 2636, 1902, 2216, 2215, 2166, 2158, 2156, 1341, 2635,
	1245, 1251, 2153, 2150, 2563, 1610, 40719, 2634, 2632, 2379,
	2148, 2067, -1000, -1000, -1000, -1000, 1195, -1000, -1000, -1000,
	-1000, 43197, -1000, -1000, 1028, -1000, -1000, 1028, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1080, 60089, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1276, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1600, -1000, 1541, -1000, -1000, 2628, 2045, 1853, 2375,
	2375, 2375, 2414, 491, 484, -1000, 248, -1000, -1000, 68676,
	-1000, -1000, 25253, 25253, 25253, 25253, 25253, 1503, -1000, 684,
	-1000, -1000, 716, -1000, 683, 628, -1000, -1000, -1000, -1000,
	-1000, -1000, 682, 2554, -1000, 912, -1000, -1000, -1000, -1000,
	2502, -1000, 15033, -1000, -1000, -1000, 458, 681, 25253, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 305, 808, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 607, 1410, 606, 606, 606, -1000, -1000, 889, -1000,
	-1000, -1000, 330, 605, 321, 604, -1000, -1000, -1000, -1000,
	2106, 679, 678, -1000, 677, 675, 673, -1000, -1000, -1000,
	672, 671, 670, 667, 666, 664, 660, 659, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 885, -1000, 648, 642, 641,
	640, 639, 635, 634, 633, 632, -1000, -1000, 24, 58049,
	-1000, 510, 24, -1000, -1000, 631, -1000, 18992, 18992, 18992,
	-1000, -1000, 1715, 25253, -1000, 2398, -1000, 4263, -235, 773,
	29498, -1000, 27831, 773, 730, 32414, -1000, 2055, -1000, -1000,
	630, 304, -1000, -1000, 2048, 58049, 13285, 58049, 48153, 48153,
	-1000, 2292, 25253, -1000, -1000, 38669, 35295, 58049, 48561, 2460,
	68992, 35295, 58049, 2103, -1000, -1000, -1000, 58049, -1000, 25253,
	-1000, 2459, 1211, -20, -1000, -1000, -1000, -1000, -1000, -1000,
	1832, 1893, 972, 1748, 1214, -1000, 18555, 2324, -1000, -1000,
	-1000, 303, 13285, -1000, 1830, 2274, 1090, -1000, 1746, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1393, 2271, -1000,
	1507, 2270, 1386, -1000, -1000, 865, 2269, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1571, -1000, -1000, 2356,
	-1000, -1000, 1696, 2268, -122, -1000, -1000, 38669, 35703, 5,
	-1000, -1000, -54, -1000, 12015, 68676, -1000, -1000, -1000, 68676,
	834, -1000, -1000, 2253, -1000, 68676, 833, -1000, -1000, 2250,
	-1000, -1000, -1000, 2626, -1000, 2625, 1797, 2622, 2621, 2620,
	-1000, 1295, 1415, 2619, -1000, 2618, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45261, 44847, 893, -1000, 1712, -1000, -1000,
	44433, 838, 1793, -1000, -1000, 1791, -1000, 909, -1000, 2617,
	52679, 1932, 838, 1787, -1000, -1000, -1000, -1000, -1000, 48153,
	-1000, 48153, -1000, 48153, -1000, 1215, -1000, 60497, -235, -1000,
	-1000, -1000, -1000, -1000, 2248, 2616, 2615, 2612, -1000, 58049,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 166,
	2239, -1000, -1000, 166, 2237, -1000, 166, 2212, -1000, 160,
	2208, -1000, -1000, 1626, 2207, -1000, -112, 2204, -1000, -1000,
	-112, 2203, -1000, 26, -1000, -1000, -1000, 933, -1000, 29912,
	52265, 38669, 830, 668, 68676, -1000, 38669, 68676, -1000, 44433,
	-1000, 51851, 44025, -1000, -1000, 1138, 1869, -1000, -1000, -1000,
	-1000, 38669, 38669, -1000, 51437, -1000, 1574, 1300, 2358, 48153,
	-1000, -1000, 2095, -1000, 34887, 48153, -1000, 48153, -1000, 48153,
	-1000, 48153, -1000, 48153, -1000, 2610, 2609, -1000, 2152, 1389,
	1377, 58049, -1000, -1000, 2367, 58049, -1000, 58049, -1000, -1000,
	-1000, 1831, -1000, -1000, -1000, -1000, 48153, -1000, -1000, -1000,
	-1000, -1000, -1000, 2093, -1000, 1309, -1000, 1137, -1000, -1000,
	174, -1000, -1000, -20, -1000, 60089, -1000, -1000, 2045, 1853,
	-1000, 58049, -1000, -1000, -1000, 2045, 1714, 1920, 23466, 1905,
	25253, 248, -1000, -1000, 248, 248, 18118, -1000, -1000, 68992,
	68992, 13285, 1095, 25253, 25253, 25253, 25253, 25253, 25253, 25253,
	25253, 25253, 25253, 25253, 25253, 25253, 25253, 25253, 25253, 25253,
	25253, 25253, 25253, 25253, 25253, 25253, 25253, 25253, 25253, 25253,
	25253, 25253, 25253, 25253, 25253, 25253, 25253, 25253, 1570, 25253,
	1078, 25253, 25253, 25253, 25253, 1404, -1000, -1000, 1524, 527,
	1544, -1000, 2511, 2511, 2511, 8526, 8526, 623, 2606, 716,
	-1000, 25253, -1000, -24, 25253, 13709, -1000, 2532, 1185, -1000,
	-1000, 484, 8355, 1735, -1000, 483, 14159, -1000, -1000, -1000,
	15033, 628, 23016, 25253, 839, 68676, 11593, 2094, 1990, -1000,
	2531, -1000, -1000, 2502, -1000, -1000, -1000, -1000, 2502, 1093,
	1092, 2530, -1000, 2502, 2502, 626, 747, 744, 743, 725,
	514, 25253, 25253, 25253, 25253, 25253, 25253, 25253, 25253, -1000,
	22579, 22129, 21679, 26564, 21229, 25253, 15470, 20779, 20329, 58049,
	24, 2458, 25253, 147, -1000, 67035, -1000, 147, 147, 621,
	20, 68676, 1904, 1904, 29086, 1799, 1522, 1522, 1522, -1000,
	618, 703, 773, 9045, 49797, 1528, 773, 773, 256, 276,
	482, 27419, 2398, 49797, -1000, -1000, 48153, 617, 13709, 13285,
	1161, 14, 249, 1885, 1883, 1880, -1000, 1307, -10, 830,
	1075, -114, -1000, 4223, -19, -1000, 1116, -1000, -1000, -1000,
	-1000, 136, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 883, 613, 610, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 607,
	1410, 606, 606, 606, -1000, -1000, -1000, 330, 605, 321,
	604, -1000, -1000, -1000, -1000, -1000, -1000, 2035, -54, 48561,
	799, -21, 978, -20, -1000, 1028, -1000, 1316, -1000, -1000,
	-1000, -1000, -1000, -1000, 1141, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2545, -1000, 2517, -1000, -1000, 2528, 12, -1000,
	-1000, 13285, -1000, -26, 1338, -1000, 40305, 2378, 2374, 2348,
	1210, -1000, 1167, 2412, 43197, 2429, 10, -1000, 2034, -1000,
	-1000, 792, 1134, 1074, 43197, 1507, -1000, 68992, -1000, 1968,
	2411, 1038, 1162, 1038, 1038, 1176, -1000, 43197, 1073, 1455,
	38669, -1000, 1068, -1000, -27, 2427, 8, -1000, 2030, 1064,
	-1000, -1000, 48153, 13285, 767, 5, 35703, 58049, 247, -1000,
	25253, -24, 25253, -24, -1000, -1000, 2202, -1000, -1000, -1000,
	2600, 1391, 1849, -1000, -1000, -1000, 600, 1783, 1507, 1780,
	-1000, -1000, 43611, 2026, 58049, 1890, -14, 48153, -1000, -1000,
	1453, -1000, 2196, 2188, 620, 2595, -1000, 1699, 1778, -1000,
	-1000, -1000, 59681, 1102, 2171, 871, 109, 2452, 109, 33238,
	-1000, 58049, -1000, 58049, -1000, -1000, -1000, 2594, -1000, 48153,
	-1000, -1000, 48153, -1000, 48153, -1000, 48153, -1000, 48153, 48153,
	-1000, 58049, 38669, 38669, 38669, 4836, 39489, -37, 481, -1000,
	51029, 58049, 923, 39897, -204, 830, 767, -1000, 767, -1000,
	48153, 2091, -1000, -1000, -1000, -1000, -1000, -1000, 2591, 2589,
	-1000, -1000, -1000, 58049, -1000, 58049, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1260, -1000, 2086, -1000, 2075, -1000,
	65, -1000, -1000, -1000, -1000, -1000, 1752, 48153, 48153, 48153,
	-1000, 43197, -1000, -1000, 2045, -1000, -1000, -1000, -1000, -1000,
	68676, -1000, 486, -1000, -1000, 68676, 1356, 1886, -1000, 1886,
	-2, -1000, 66571, 1862, 48153, -1000, -1000, -1000, -1000, -1000,
	787, 468, 468, 1048, 1048, 1048, 1048, 2435, 5041, 280,
	6450, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3840, 3485,
	355, 355, 3485, 3485, 3485, 3485, 3485, 355, 355, 355,
	3840, 3840, 3840, 8526, 5780, 6608, 25253, 25253, 1063, 1482,
	527, 6579, 25253, 459, 459, 459, 459, -1000, 1561, -1000,
	-1000, -1000, -1000, 2025, 599, 26564, 26564, -1000, -1000, -1000,
	-1000, 14596, 25253, -1000, -1000, -1000, -1000, 19879, -1000, -1000,
	66112, -254, 480, -199, -3, -1000, 25253, 25253, 25253, 478,
	-1000, 475, -1000, -1000, 1060, -1000, 1056, 1052, 1049, -1000,
	597, 245, 25253, 58049, -1000, 63784, 700, -48, -1000, -38,
	1183, -1000, 25253, 244, -1000, 1519, 596, 584, 471, -39,
	470, 783, 782, 466, 464, 456, 25253, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 68346, 63708, 63396,
	63320, 8025, 63008, 62932, -55, 445, -1000, 2023, -199, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 444, -1000, 442, -1000,
	68239, -199, 441, 5607, -1000, 26564, 26564, 26564, -1000, 438,
	-1000, 66928, -1000, 67909, 19442, 19442, 19442, 437, 67802, 25253,
	-199, -56, -1000, -61, -1000, -1000, 583, -63, 871, 18992,
	28259, 13285, -1000, 871, 871, 25253, -1000, 25253, 1873, -1000,
	-1000, -1000, 1871, 1584, 1904, 29086, -1000, -1000, -1000, -1000,
	49797, 495, 773, 49797, -1000, 2502, 1974, -1000, -1000, -1000,
	58049, 510, -1000, 49797, 49797, 13285, 773, -1000, 436, 31588,
	-3, 243, -1000, -1000, 13285, 1998, 1998, 1998, -1000, -1000,
	2022, 58049, 2471, -1000, 1425, -1000, 68992, -1000, 715, 954,
	-1000, 2524, 581, -1000, 2502, 2502, 58049, 138, 18555, -1000,
	1028, -1000, -1000, 1274, -1000, 1406, -1000, 1034, -1000, -1000,
	-1000, 18555, -1000, 1564, 58049, 58049, 48153, -1000, -1000, 1777,
	59273, 1773, 68992, 58049, -1000, -1000, 580, 579, 1860, 1857,
	58049, 58049, 58865, 58457, 58049, 1474, 25253, 1489, 1360, -24,
	-1000, -24, 578, 1069, 48153, 48153, 1385, -1000, -1000, -1000,
	-1000, -1000, 48153, -1000, -1000, 2523, -1000, 1038, -1000, -1000,
	-1000, 1038, 1507, 1358, 48153, 38669, 844, 58049, 1439, -24,
	-1000, -24, 576, 13285, 1380, -1000, 1942, -1000, -1000, -1000,
	11171, 68676, -1000, 68676, -1000, 58049, -1000, 892, 58049, 39897,
	824, 2164, -1000, 1507, 2157, 510, -1000, -1000, 32826, -54,
	830, 38669, 48153, -14, 38669, 38669, 38669, 2587, 575, 2586,
	-1000, 48153, 2154, 1698, 1771, 2221, 751, 58049, 1530, -1000,
	25253, 1431, -1000, 32002, 908, 58049, 1325, 97, -1000, -1000,
	-1000, 52, 58049, -1000, 2585, -1000, -1000, 166, 166, 166,
	-1000, 160, 1626, -1000, -112, -112, -1000, -1000, 4836, 830,
	-18, 574, -1000, 760, 757, 30754, 38669, -65, -1000, -1000,
	-1000, -1000, -1000, 48153, 58049, 636, 1931, 58049, -1000, 830,
	-1000, -1000, 840, -1000, 1133, -1000, -1000, -54, -54, -1000,
	1254, 1235, 58049, -1000, 13285, 58049, 48153, 13285, 48153, -1000,
	-1000, -1000, -1000, -1000, 1356, -1000, 25253, -1000, -1000, -1000,
	18118, -1000, -1000, -1000, 48153, -217, 25253, 25253, 6133, 5959,
	25253, 26564, 26564, -1000, 25253, 4677, -1000, -1000, -1000, -1000,
	-1000, 2019, 572, 25253, 68992, 5118, 934, -1000, 415, 62620,
	3485, -1000, 25253, -1000, 414, 17681, -1000, 67365, -30, -30,
	-1000, 2543, 1813, 1755, 1400, 1224, 2519, 10749, -199, -70,
	-1000, -1000, 713, -1000, 2162, -1000, 25253, 67472, 10327, -1000,
	33650, 878, 1530, -1000, -1000, 2502, 778, -1000, -1000, -1000,
	778, -1000, 66036, 68992, 68992, 25253, 25253, -1000, 25253, 25253,
	25253, -1000, -1000, 25253, -1000, -1000, 2018, 25253, -1000, 68992,
	68992, 26564, 26564, 26564, 26564, 26564, 26564, 26564, 26564, 26564,
	26564, 26564, 26564, 26564, 26564, 26564, 26564, 26564, 26564, 26564,
	1836, 26564, 2504, 2504, 2504, -1000, 2027, 2018, 25253, 25253,
	68992, 406, 400, 397, -1000, 25253, -199, -1000, -1000, 4836,
	-1000, 1986, -1000, -164, -1000, 2398, -1000, -1000, 1986, 1986,
	-71, 68676, 29086, 29086, -1000, 569, 25253, 1854, -1000, 698,
	-1000, -72, -1000, 49797, -1000, 697, -246, -1000, 756, -1000,
	-1000, -1000, 510, -1000, -1000, -1000, 195, 49797, -1000, -78,
	-1000, 2451, 396, 13285, -1000, -1000, -1000, -1000, -1000, -1000,
	-24, -54, 1634, 2538, -1000, 2505, 711, 695, 395, 2502,
	394, 393, -54, 58049, -1000, -20, -1000, -1000, -1000, 25253,
	-1000, -1000, 2373, 1043, 1029, -1000, 2149, -1000, 1770, -1000,
	915, -1000, 1286, -1000, 25253, 25253, 567, 566, 1412, 2583,
	2145, 1626, 2142, 1626, -1000, -1000, 797, -1000, 68676, 562,
	556, -1000, -26, 1320, -1000, -1000, 25253, 25253, 50617, -1000,
	2356, -1000, 1027, -1000, -1000, -1000, 1507, 1026, -1000, -1000,
	1449, -1000, -1000, -1000, -1000, 25253, -1000, -27, 1024, 830,
	2016, -1000, 2582, 2581, 2579, 392, -52, -1000, 2450, 1617,
	58049, 48153, 48153, 2448, 770, -1000, 2502, -1000, -1000, -1000,
	-1000, 838, -1000, -1000, 2576, -1000, 922, 13285, 48153, 2138,
	1844, 751, 39081, -1000, 838, 1920, -1000, 68676, -1000, 1325,
	17231, 2354, -89, -1000, 175, -1000, -1000, -1000, 871, 33238,
	29086, 25253, 2575, -90, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 50209, 50209, 38669, 38669, 38669, 830, 58049, 58049,
	39897, 2574, 555, 58049, 58049, 547, -1000, -1000, -1000, 1554,
	48153, -1000, -1000, 837, -1000, -1000, 1478, 1745, -1000, 1573,
	65724, -1000, 2372, 13285, 2445, 459, 25253, 25253, 273, 662,
	429, 459, 25253, 25253, 68992, 68781, -91, 25253, 25253, -1000,
	25253, 694, 68676, 2537, 25253, 388, 386, 376, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 372, -1000, -1000, -1000,
	-1000, -1000, 68676, 25253, 139, -1000, -1000, -1000, 62129, -1000,
	25253, 371, 370, -1000, -1000, -1000, 369, 366, 62544, 7879,
	65648, 65336, 65260, 68676, 2027, 68676, -1000, -1000, 827, 827,
	1154, 1154, 1154, 1154, 2504, 322, 440, 795, 390, 390,
	390, 598, 850, 850, 390, 390, 390, 2015, 1884, 544,
	836, -1000, -1000, 68676, 68676, 365, -1000, -1000, -1000, -199,
	364, 1980, 2407, -1000, 29086, 1980, 1980, -1000, -1000, 1584,
	58049, 68676, 29086, -235, -1000, 2502, -1000, -1000, 1974, -1000,
	9479, -1000, 13285, -1000, -1000, 31588, -1000, 541, -1000, 137,
	-1000, -1000, -1000, 692, 2573, 709, -1000, 361, -1000, -1000,
	-54, 68676, 58049, 58049, 58049, 2137, -1000, 3601, -1000, 64948,
	-95, -1000, 66571, 25253, 58049, -1000, 1438, 1917, 957, -1000,
	58049, -1000, 58049, -1000, -1000, 58049, 58049, 48153, -96, 68676,
	-80, -1000, 755, -1000, 48153, 48153, 38669, -101, 13285, -1000,
	38669, -1000, -1000, -1000, 1926, -24, -1000, 2572, 540, 1507,
	-24, -1000, 1550, -1000, 690, -1000, -1000, 537, 58049, 1693,
	536, 13285, 1846, 751, 39081, -1000, 1102, 1325, -1000, -1000,
	-82, -1000, 546, -24, 58049, 2569, 1530, -1000, -100, 68676,
	-1000, 752, -1000, -102, -1000, -1000, 342, -1000, 2312, 2311,
	-1000, -1000, 25253, 534, 533, 58049, 1676, -1000, -1000, -1000,
	-1000, 13285, 1131, -1000, -1000, -1000, 2372, 459, 459, 25253,
	25253, 25253, 459, 68781, -103, -1000, 459, 459, -199, -1000,
	-1000, 67365, -1000, -1000, -1000, -1000, 68676, 9905, 1483, -1000,
	64872, -1000, -1000, -1000, -1000, 25253, 25253, -1000, -1000, -1000,
	-1000, -1000, 26564, 2005, 530, 68992, -1000, -1000, 868, 25253,
	25253, 2398, 868, 868, -1000, -123, -1000, 773, -1000, -1000,
	-1000, 2502, 137, -1000, 2568, 13285, 705, -1000, 2567, -1000,
	-1000, -1000, -1000, 58049, -1000, 58049, -1000, 13285, 58049, 2006,
	1762, -1000, -1000, 1855, 528, 26564, 48153, 806, 1985, 1444,
	25253, -1000, -124, -125, 1761, -1000, -1000, 1760, 25253, -1000,
	68992, 1626, 1626, -130, -134, -1000, 1022, 58049, 16794, -1000,
	-1000, -1000, 1013, -1000, -112, 1439, 1967, 832, -1000, 39897,
	824, -1000, -1000, 813, -1000, 25253, -1000, 48153, 25253, 1686,
	-1000, 751, 39081, -1000, 2221, -1000, 2288, 58049, 2341, -1000,
	-1000, -1000, 1920, 527, -1000, 830, 526, 525, -138, 25253,
	25253, -143, -120, -1000, 763, 758, -1000, -1000, 48153, -1000,
	459, 459, 459, -1000, 332, -1000, -1000, 1530, 2389, -1000,
	64560, 64484, 4327, 26564, 68992, -148, -1000, 58049, 68676, -199,
	-1000, -1000, -1000, 49797, 663, -1000, 2565, -1000, -1000, 1690,
	-1000, -1000, -1000, 58049, 1768, -1000, -1000, 25253, 836, 524,
	25253, -1000, -1000, 1918, 2042, 1926, 523, -1000, -1000, -1000,
	-1000, 1363, -1000, -1000, 68676, 2390, -1000, -1000, 521, 520,
	519, 749, 2001, -1000, 518, 824, -1000, 1488, -1000, 1949,
	326, 2437, 813, -1000, 2496, -1000, -152, 922, -156, 48153,
	39081, -1000, 1844, 1094, -162, 58049, 1325, -1000, -1000, 38669,
	38669, 1444, -171, -172, -1000, 1676, -1000, 58049, -1000, 58049,
	-1000, -1000, 1606, 25253, -1000, -1000, 4327, -173, -1000, -170,
	-1000, 2433, -1000, -1000, -1000, -1000, -1000, 2136, 64172, 1820,
	58049, 64096, 2040, -1000, -1000, 1439, 58049, 48153, 920, 13285,
	1478, 1478, 25253, 16357, 1484, 25253, -1000, 48153, -1000, 2177,
	1926, -24, -1000, -1000, 1444, 517, 1444, 513, -1000, 1846,
	1190, -1000, 871, -1000, -1000, -177, -178, 1926, 1444, -1000,
	-1000, -179, -184, 324, 26127, 26127, 26127, -199, -1000, 58049,
	511, 2102, -1000, 1660, 1581, 281, 946, -1000, -1000, 1985,
	-186, 510, -1000, 25253, -1000, -190, -1000, 907, -191, -1000,
	905, -200, -1000, 2000, -1000, -202, 507, -1000, 1439, 832,
	1926, 25253, 1926, 25253, -1000, 33238, -1000, 830, 830, 1439,
	1926, -1000, -1000, -1000, -1000, -1000, 26986, 1563, 1287, 66494,
	-1000, -1000, -1000, -1000, 58049, -1000, 1675, 1672, 1234, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1820, 68676, -1000,
	1478, 1946, -1000, 1478, 1999, -1000, 1476, -1000, 58049, 824,
	-1000, 1439, -206, 1439, -208, -201, -1000, -1000, -1000, 1439,
	2449, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2299, -1000,
	942, 1682, 1682, 1660, -1000, 503, -1000, 494, -1000, -212,
	-1000, 870, 1444, 870, 1444, -1000, -1000, 25690, -1000, 2480,
	-1000, -1000, 1882, -1000, 1985, 25253, 25253, 1612, -1000, 2561,
	1926, -1000, 1926, -1000, -1000, -1000, -1000, -1000, -214, -220,
	-1000, -1000, -1000, -1000, 1439, 1439, 1439, 986, 870, 870,
	-1000, 493, -1000, -1000, 25253, -221, 1439, -1000,
}
var sqlPgo = [...]int{

	0, 3180, 3177, 3172, 3168, 3166, 3164, 3163, 3161, 3158,
	3156, 3149, 3147, 3146, 3143, 3142, 3136, 3135, 3133, 3132,
	3130, 3127, 3126, 3125, 3123, 3122, 3121, 3119, 3117, 3116,
	3115, 3114, 3111, 3108, 3106, 3105, 3104, 3103, 3101, 3098,
	3097, 3096, 3094, 3093, 27, 3092, 3090, 3080, 3077, 3075,
	3074, 3073, 3072, 3071, 3068, 3067, 3066, 3063, 3062, 3061,
	3060, 3059, 32, 3057, 3056, 3055, 3054, 3051, 3050, 3049,
	3048, 3046, 3045, 3043, 3041, 3035, 3034, 119, 3032, 3031,
	3025, 3018, 3015, 3011, 3009, 3007, 3006, 3003, 3000, 2999,
	2995, 2988, 109, 2983, 2982, 2979, 2977, 2975, 2974, 2973,
	2972, 2967, 2966, 179, 2965, 2960, 2959, 2958, 2957, 2955,
	2951, 2950, 2948, 2947, 2945, 2943, 2942, 2941, 2940, 2937,
	2936, 2932, 2931, 2924, 2922, 2921, 2920, 2919, 2917, 2916,
	2914, 199, 137, 2907, 2896, 2893, 2892, 2884, 2882, 90,
	86, 24, 2881, 88, 134, 183, 5012, 176, 2874, 2870,
	2869, 2868, 2867, 66, 126, 152, 128, 115, 142, 2864,
	2862, 80, 56, 31, 26, 96, 2861, 2860, 2859, 2332,
	87, 2858, 2857, 193, 180, 2852, 1415, 2850, 155, 132,
	77, 127, 71, 2848, 103, 16, 2845, 149, 50, 2844,
	113, 65, 25, 5367, 217, 2843, 136, 201, 76, 83,
	160, 151, 165, 162, 124, 675, 2841, 184, 2840, 112,
	145, 2839, 2838, 2837, 54, 140, 11, 3, 156, 10,
	2835, 18, 2834, 12, 2832, 2830, 2829, 2828, 63, 123,
	2827, 74, 57, 2826, 69, 62, 158, 2825, 168, 2824,
	91, 2823, 186, 146, 144, 13, 173, 2822, 2820, 2819,
	2817, 2816, 94, 20, 93, 2815, 2814, 105, 177, 2813,
	53, 121, 64, 98, 200, 85, 161, 79, 166, 130,
	170, 2812, 2811, 2810, 135, 2809, 2808, 114, 159, 2807,
	2806, 203, 33, 44, 175, 38, 2804, 2803, 108, 2802,
	147, 2800, 2799, 2798, 198, 120, 167, 9, 58, 92,
	22, 5, 174, 107, 84, 72, 2796, 2338, 1483, 1072,
	2795, 102, 81, 35, 89, 104, 189, 51, 2794, 2793,
	1019, 2792, 2791, 2790, 2788, 129, 2787, 2786, 2785, 97,
	37, 73, 2784, 116, 59, 204, 197, 68, 157, 169,
	187, 2775, 131, 2774, 36, 100, 2772, 143, 182, 212,
	2768, 122, 106, 2767, 154, 2764, 2761, 2760, 2758, 111,
	2757, 2756, 40, 2754, 110, 2753, 2752, 138, 164, 1086,
	30, 2751, 55, 207, 2749, 141, 29, 2748, 3030, 43,
	0, 5825, 4422, 5106, 2747, 5320, 2746, 153, 99, 2745,
	2743, 2742, 2740, 34, 14, 4, 6, 17, 15, 1308,
	1246, 2739, 2737, 67, 95, 117, 2736, 192, 163, 2735,
	2734, 2733, 61, 2732, 23, 2731, 21, 2730, 2729, 28,
	7, 2728, 2725, 178, 2723, 181, 2722, 2721, 2465, 2720,
	191, 2719, 101, 2718, 125, 150, 2715, 2711, 2710, 2706,
	185, 2704, 188, 2703, 8, 19, 1, 2699, 2698, 2697,
	148, 2, 2254, 2696, 2692, 75, 139, 70, 2688, 2681,
	133,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	430, 430, 17, 27, 18, 28, 12, 432, 432, 432,
	432, 21, 19, 19, 29, 142, 142, 142, 142, 16,
	16, 24, 24, 155, 155, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 429, 429, 157, 157,
	156, 152, 152, 433, 433, 158, 158, 158, 160, 160,
	33, 33, 90, 90, 90, 143, 83, 83, 83, 83,
	83, 83, 83, 78, 78, 378, 378, 379, 379, 138,
	138, 139, 139, 139, 139, 140, 140, 141, 141, 141,
	47, 35, 35, 35, 35, 35, 35, 35, 36, 36,
	36, 36, 37, 37, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 45, 45, 45, 45, 132, 132,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 437, 437, 437,
	438, 438, 439, 439, 440, 440, 441, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 441, 441, 441, 441,
	441, 441, 441, 441, 441, 441, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 59, 59, 230, 230, 208, 208, 60, 60, 60,
	61, 61, 62, 62, 49, 49, 425, 425, 243, 243,
	346, 346, 64, 64, 65, 65, 65, 65, 65, 65,
	66, 66, 66, 66, 66, 66, 66, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 73, 73, 73,
	74, 74, 74, 71, 71, 71, 69, 69, 69, 68,
	68, 68, 72, 72, 72, 70, 70, 70, 244, 244,
	75, 75, 75, 75, 75, 75, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 348, 348, 76,
	76, 76, 318, 318, 79, 79, 79, 275, 275, 80,
	80, 80, 80, 80, 81, 81, 81, 81, 91, 91,
	91, 91, 428, 428, 236, 236, 173, 173, 173, 173,
	86, 86, 86, 86, 87, 87, 87, 88, 88, 137,
	137, 97, 97, 97, 97, 97, 96, 96, 96, 96,
	96, 96, 39, 39, 39, 40, 40, 41, 41, 42,
	42, 43, 43, 44, 44, 44, 44, 44, 99, 99,
	434, 434, 101, 98, 98, 98, 100, 100, 100, 100,
	102, 103, 103, 103, 103, 103, 103, 104, 104, 372,
	372, 251, 251, 370, 370, 386, 386, 371, 371, 212,
	212, 212, 212, 212, 213, 213, 213, 377, 377, 377,
	377, 377, 377, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 122, 122, 122, 131, 131, 131, 131, 131,
	131, 131, 124, 124, 124, 114, 114, 106, 106, 106,
	106, 110, 110, 110, 110, 110, 107, 107, 111, 111,
	113, 113, 115, 115, 115, 115, 115, 115, 108, 108,
	108, 108, 117, 117, 117, 117, 281, 281, 281, 116,
	116, 127, 127, 127, 127, 127, 127, 332, 332, 123,
	123, 123, 123, 126, 126, 126, 126, 265, 265, 120,
	120, 120, 121, 121, 121, 125, 125, 128, 128, 128,
	128, 109, 109, 109, 443, 443, 443, 129, 129, 119,
	119, 130, 130, 130, 130, 130, 130, 130, 118, 118,
	118, 431, 431, 112, 426, 426, 423, 423, 423, 423,
	423, 423, 423, 424, 424, 427, 427, 84, 84, 84,
	54, 54, 444, 444, 444, 55, 55, 445, 445, 445,
	442, 442, 442, 442, 442, 442, 442, 442, 214, 214,
	215, 215, 299, 299, 299, 299, 299, 216, 216, 159,
	159, 159, 219, 220, 220, 217, 217, 218, 218, 218,
	222, 222, 221, 224, 224, 223, 298, 391, 391, 392,
	392, 392, 392, 392, 392, 392, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 389, 389, 389, 390,
	387, 387, 388, 388, 388, 388, 446, 446, 446, 446,
	446, 446, 447, 447, 297, 297, 228, 228, 394, 394,
	394, 394, 395, 395, 395, 395, 395, 398, 397, 396,
	396, 396, 396, 396, 328, 328, 328, 58, 58, 58,
	262, 262, 261, 261, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 134, 134,
	56, 56, 56, 165, 165, 53, 53, 53, 449, 449,
	57, 57, 57, 450, 450, 63, 63, 63, 63, 63,
	63, 52, 52, 52, 52, 52, 451, 451, 282, 282,
	280, 280, 234, 234, 334, 177, 177, 153, 153, 153,
	20, 22, 22, 15, 15, 30, 30, 31, 31, 26,
	26, 435, 435, 436, 436, 85, 85, 89, 89, 89,
	95, 95, 133, 133, 133, 133, 133, 133, 133, 34,
	34, 34, 34, 46, 46, 46, 46, 93, 453, 453,
	453, 94, 94, 452, 452, 172, 172, 172, 172, 174,
	174, 294, 294, 295, 295, 454, 454, 296, 296, 296,
	296, 167, 166, 168, 168, 51, 51, 51, 161, 161,
	162, 162, 163, 163, 164, 164, 455, 455, 82, 82,
	82, 136, 136, 207, 207, 290, 290, 290, 229, 229,
	182, 182, 293, 293, 291, 291, 291, 291, 260, 260,
	260, 135, 135, 239, 239, 253, 253, 254, 254, 343,
	343, 255, 92, 92, 146, 146, 144, 144, 144, 144,
	144, 144, 456, 456, 145, 145, 145, 147, 147, 147,
	147, 147, 147, 147, 150, 150, 150, 150, 151, 151,
	151, 149, 149, 405, 405, 405, 407, 407, 408, 404,
	404, 406, 406, 448, 448, 264, 264, 264, 226, 227,
	225, 225, 457, 457, 232, 232, 231, 233, 233, 333,
	333, 333, 258, 258, 258, 258, 285, 285, 283, 283,
	284, 284, 286, 286, 287, 287, 287, 288, 288, 289,
	289, 257, 257, 314, 314, 148, 148, 148, 238, 238,
	238, 240, 240, 305, 305, 305, 305, 305, 306, 306,
	304, 304, 304, 304, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 336, 336, 241, 241, 337, 292, 292,
	421, 421, 421, 422, 422, 331, 331, 338, 338, 338,
	338, 338, 338, 329, 329, 330, 330, 344, 345, 345,
	268, 268, 268, 268, 266, 266, 269, 269, 269, 269,
	267, 267, 339, 339, 339, 339, 259, 259, 340, 340,
	340, 341, 300, 301, 301, 349, 349, 349, 349, 349,
	364, 237, 237, 237, 237, 237, 458, 458, 350, 350,
	350, 350, 350, 350, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 354, 354, 354, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 363, 363, 363,
	363, 363, 355, 355, 360, 360, 361, 361, 361, 356,
	357, 362, 362, 362, 362, 459, 459, 366, 366, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 352, 352,
	352, 359, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 276, 276, 277, 277, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 309, 309, 309, 309, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 399, 399, 399, 399, 399, 399, 399,
	399, 402, 402, 403, 403, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
	400, 400, 400, 400, 400, 400, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 409, 409, 410, 410, 412, 412,
	413, 413, 414, 415, 415, 415, 416, 417, 417, 411,
	411, 418, 418, 418, 418, 419, 419, 420, 420, 420,
	420, 420, 320, 320, 321, 321, 327, 327, 327, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 175, 175, 175, 175, 175,
	249, 249, 247, 247, 247, 250, 250, 248, 248, 246,
	246, 245, 245, 317, 317, 315, 315, 319, 319, 270,
	270, 365, 365, 365, 365, 365, 365, 365, 271, 271,
	271, 279, 272, 272, 273, 273, 273, 273, 273, 311,
	312, 274, 274, 274, 313, 313, 322, 326, 326, 325,
	324, 324, 323, 323, 302, 302, 303, 303, 256, 256,
	460, 460, 252, 252, 342, 342, 342, 342, 210, 210,
	242, 242, 209, 209, 202, 202, 203, 203, 203, 203,
	235, 235, 367, 367, 367, 368, 369, 316, 192, 191,
	179, 180, 190, 189, 188, 178, 181, 185, 186, 187,
	183, 184, 198, 197, 196, 194, 195, 347, 204, 204,
	205, 205, 205, 206, 206, 206, 206, 176, 176, 199,
	199, 200, 201, 201, 193, 193, 193, 169, 169, 169,
	170, 170, 171, 171, 376, 376, 374, 374, 374, 375,
	375, 375, 375, 373, 373, 373, 373, 373, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 382, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 385, 385,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 5, 3, 5, 7, 4,
	12, 4, 12, 1, 3, 5, 5, 2, 5, 3,
	6, 4, 6, 5, 6, 6, 4, 8, 3, 4,
	3, 6, 4, 3, 1, 3, 2, 1, 1, 3,
	1, 3, 2, 2, 0, 1, 1, 0, 2, 0,
	7, 2, 5, 6, 2, 1, 6, 4, 9, 7,
	12, 12, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 3, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 3,
	3, 4, 3, 4, 7, 4, 4, 4, 3, 5,
	7, 4, 3, 3, 4, 3, 3, 3, 3, 3,
	2, 0, 1, 0, 1, 0, 3, 3, 3, 3,
	3, 6, 4, 4, 4, 3, 5, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 1, 1, 2, 1,
	2, 7, 3, 2, 0, 1, 3, 3, 1, 0,
	1, 2, 2, 1, 6, 5, 1, 2, 1, 3,
	2, 0, 8, 3, 2, 2, 2, 2, 2, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 3, 5, 3, 3, 5, 3, 1, 3,
	2, 2, 5, 3, 6, 3, 1, 1, 2, 1,
	1, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 3, 5,
	7, 2, 3, 0, 3, 5, 2, 3, 0, 2,
	3, 2, 3, 2, 6, 4, 7, 2, 6, 4,
	7, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 2, 4, 3, 2,
	2, 1, 2, 1, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 5, 4, 6, 4, 3,
	0, 1, 3, 2, 4, 2, 4, 1, 6, 3,
	1, 1, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 1, 3, 2, 1, 3, 1, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 5, 7, 3, 3, 3, 3, 4, 4,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 3, 4, 4, 5, 0, 1, 1, 2,
	3, 5, 4, 6, 4, 6, 4, 1, 0, 3,
	4, 4, 5, 7, 5, 3, 3, 2, 0, 4,
	2, 3, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 6, 6, 7, 9, 6, 3, 4, 5, 5,
	3, 1, 1, 5, 2, 0, 1, 1, 1, 1,
	3, 2, 2, 2, 1, 2, 0, 3, 3, 2,
	10, 13, 0, 2, 3, 9, 12, 0, 2, 3,
	1, 1, 2, 2, 2, 2, 1, 0, 1, 0,
	1, 3, 1, 1, 1, 1, 3, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 5, 8, 5, 11, 0, 1, 3, 3,
	2, 2, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 5, 8, 4,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 1, 1,
	8, 7, 5, 0, 1, 6, 7, 6, 5, 3,
	4, 14, 17, 14, 17, 4, 0, 2, 2, 0,
	1, 0, 1, 3, 2, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 3, 4, 3, 0, 2, 2,
	0, 10, 3, 2, 0, 1, 3, 1, 1, 3,
	3, 5, 1, 1, 3, 3, 2, 3, 4, 3,
	4, 5, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 5,
	1, 0, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 2, 2, 1, 1, 1, 0, 2, 5,
	2, 3, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 3, 4, 1, 5,
	3, 4, 5, 1, 5, 1, 3, 2, 0, 3,
	0, 2, 3, 1, 3, 2, 0, 3, 5, 6,
	4, 6, 4, 3, 2, 1, 0, 5, 1, 0,
	2, 2, 2, 1, 1, 0, 1, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 2, 1, 0, 2, 5, 7, 2, 1,
	1, 2, 4, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 5, 4, 1, 2, 1, 4,
	1, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	2, 5, 1, 4, 2, 5, 1, 4, 3, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 3, 3, 3, 3,
	4, 3, 2, 4, 2, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 1, 5, 5, 3, 1, 1, 1, 2,
	2, 2, 4, 3, 5, 6, 8, 6, 6, 4,
	3, 4, 1, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 8, 8, 6,
	4, 6, 6, 6, 4, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	4, 3, 4, 3, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 1, 1, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 1, 2, 3, 2, 3, 2, 3, 1,
	0, 1, 3, 1, 3, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	1, 2, 3, 0, 3, 3, 2, 2, 1, 2,
	2, 3, 2, 1, 1, 1, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 1, 2,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 3, 1, 1, 1, 1, 5, 3, 1,
	1, 3, 1, 2, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 451, -77, -47, -45, -79, -80, -65,
	-78, -81, -76, -91, -95, -85, -97, -133, -3, -33,
	-35, -48, -64, -66, -75, -83, -82, -84, -86, -90,
	-89, -39, -92, -96, -105, -134, -135, -136, 80, 67,
	120, 102, 107, 126, 152, 281, 310, 320, 304, -100,
	-101, 339, -34, -46, -94, -93, -4, -10, 27, 38,
	-36, -37, -38, 52, -56, -53, -50, -59, -437, 82,
	-406, -67, -70, -72, -441, 112, 125, 168, 273, -87,
	-88, 306, 308, -41, -40, 121, -144, -146, -98, -99,
	-137, -106, -107, -108, -109, -110, -111, -112, -113, -114,
	-115, -116, -117, -118, -119, -120, -121, -122, -123, -124,
	-125, -126, -127, -128, -129, -130, 342, 389, 39, 351,
	68, 115, 314, 21, -5, -6, -7, -8, -9, -11,
	-22, -49, -51, -52, -54, -55, -63, -57, -58, -405,
	-68, -69, -71, -73, -74, 305, -147, -145, 448, 401,
	-13, -17, -18, -14, -16, -19, -15, -23, -27, -28,
	-25, -24, -26, -29, -30, -31, -32, -20, -21, -12,
	419, 427, -150, -148, -149, -151, 327, 409, 365, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, -194,
	-199, -200, -201, -193, -169, -382, -385, 4, -380, -383,
	131, 176, 243, 21, 22, 23, 24, 25, 27, 37,
	38, 39, 42, 44, 45, 48, 49, 50, 51, 52,
	53, 56, 61, 66, 67, 68, 69, 70, 75, 72,
	73, 74, 77, 79, 80, 81, 84, 85, 93, 94,
	95, 96, 97, 98, 102, 105, 104, 107, 110, 111,
	112, 114, 116, 117, 120, 121, 124, 122, 371, 373,
	123, 125, 126, 127, 137, 138, 139, 141, 142, 144,
	146, 150, 151, 153, 157, 159, 160, 161, 162, 167,
	168, 170, 171, 177, 172, 178, 182, 185, 184, 186,
	187, 188, 179, 193, 197, 198, 199, 201, 202, 205,
	206, 207, 208, 211, 210, 213, 216, 217, 220, 221,
	224, 225, 227, 228, 231, 229, 232, 230, 233, 236,
	234, 235, 238, 239, 241, 240, 248, 249, 251, 252,
	253, 268, 256, 257, 258, 261, 264, 267, 269, 270,
	271, 272, 273, 274, 276, 277, 279, 281, 283, 285,
	286, 287, 288, 289, 290, 292, 293, 295, 296, 297,
	298, 299, 304, 301, 302, 303, 305, 306, 307, 308,
	310, 312, 313, 314, 315, 317, 319, 340, 341, 353,
	320, 321, 322, 323, 324, 325, 326, 330, 334, 331,
	332, 333, 335, 328, 329, 336, 337, 339, 342, 344,
	346, 347, 350, 351, 352, 354, 357, 358, 359, 355,
	356, 349, 364, 362, 363, 366, 367, 368, 369, 370,
	372, 374, 383, 384, 386, 389, 390, 391, 381, 393,
	394, 397, 398, 399, 400, 405, 401, 403, 406, 407,
	408, 414, 413, 420, 421, 423, 424, 425, 32, 40,
	41, 43, 46, 57, 58, 59, 62, 99, 100, 119,
	128, 129, 140, 154, 156, 163, 164, 165, 183, 189,
	191, 195, 214, 246, 247, 262, 266, 278, 280, 291,
	316, 345, 360, 376, 377, 378, 379, 385, 387, 409,
	410, 411, 415, 422, 254, -187, 2, -169, -169, 281,
	26, 2, 26, 277, 329, 367, 369, 2, 192, 2,
	-428, -236, 2, 26, -173, -169, 82, 152, 327, -187,
	2, -428, -236, 24, 2, -169, 2, -174, 2, 320,
	-169, 451, 77, 221, 61, 316, 336, -103, 384, -102,
	376, 322, -104, -372, 2, 236, -169, 451, 451, 451,
	451, 2, 365, 271, 413, 328, 402, 95, 288, 176,
	-423, 2, 4, -383, -380, -203, -202, 365, 95, -201,
	-193, 441, -200, 451, 451, 451, 2, 198, 199, 287,
	286, 336, 337, 451, 451, 451, 2, 25, 55, 76,
	79, 101, 127, 147, 150, 259, -438, 228, 268, 285,
	322, 335, 364, 374, 386, -442, 352, 56, 402, -449,
	391, 110, -280, 95, 369, 367, 221, 151, 398, 312,
	155, 396, 105, 182, 400, 399, 451, 451, 25, 55,
	64, 79, 110, 127, 147, 150, -440, 268, 285, 319,
	322, 335, 364, 374, 391, 386, 2, 413, 328, 365,
	176, 95, 402, 312, 284, -77, 2, 448, 29, 339,
	-143, 365, 2, -169, 198, 199, 2, 451, 451, -423,
	2, 198, 199, 2, 56, 324, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 2, -131, 336, 352, 161, 38, 61, 26,
	66, 96, 153, 176, 177, 206, 76, 77, -281, 199,
	-332, 366, 323, 329, 362, 384, 82, 403, 313, 425,
	-431, 122, 4, 95, 236, 338, 376, 221, 70, 370,
	371, -448, 2, 365, -452, 2, 384, 384, 2, -452,
	2, -452, 2, -172, 2, 384, 380, -453, 384, 422,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, -145, -147, -146, 451, 451, 451, 451, 451,
	-131, 336, 2, 61, 26, -456, 145, -231, -232, 395,
	190, 118, 260, -144, -146, 2, -405, -370, 2, -307,
	-386, -309, 439, 440, 434, 242, 426, -320, 101, 396,
	254, -385, -310, -322, 119, 316, -250, 8, 9, 5,
	6, 7, -176, -351, -316, -359, 388, 130, 245, -206,
	453, 10, 448, -402, -146, -321, 33, 156, 54, -374,
	-205, -353, -361, -357, -358, -458, 44, 50, 49, 374,
	235, 330, 331, 346, 332, 333, 42, 405, 172, 251,
	253, 184, 4, 191, -204, -193, -399, -400, -380, -381,
	183, 189, 185, 345, 186, 187, 188, 41, 291, 141,
	142, 140, 111, 100, 99, 247, 46, 45, 43, 410,
	-362, 97, 376, 377, 378, 379, 201, 202, -169, -382,
	64, 87, 88, 86, 91, 90, 92, 89, 338, 402,
	55, 32, 163, 164, 195, 246, 165, 62, -401, 356,
	83, 149, 181, 166, 194, 196, 200, 215, 218, 237,
	244, 263, 265, 311, 343, -459, 411, 128, 129, 266,
	278, 360, 385, 387, 154, 214, 57, 58, -407, 292,
	-408, -187, -407, 451, 451, 452, 451, -225, -226, -227,
	2, 26, 108, 448, 2, -335, 2, 446, -339, -146,
	209, -338, 448, -336, -194, 255, -403, 317, -399, -400,
	-176, -193, -205, 4, -228, 448, 450, 95, 365, 65,
	2, -275, 448, -169, 26, -143, 254, 380, 452, -318,
	448, 254, 148, 257, -169, 2, 2, 340, 2, 448,
	-103, 59, 384, -295, 2, -296, -166, -167, -168, -344,
	197, 283, 290, 428, 425, -370, -434, 148, 431, 380,
	-370, -251, 450, 2, -339, 163, -194, 2, -191, -373,
	4, -380, -383, -381, -384, 64, -382, 26, 28, 29,
	30, 31, 33, 34, 35, 36, 47, 54, 55, 60,
	63, 65, 76, 82, 86, 87, 89, 88, 90, 91,
	92, 101, 103, 106, 108, 109, 113, 115, 118, 130,
	132, 145, 147, 148, 152, 155, 158, 169, 180, 190,
	192, 209, 212, 219, 222, 223, 242, 245, 250, 254,
	255, 259, 260, 275, 282, 294, 309, 327, 338, 348,
	361, 365, 375, 380, 382, 388, 395, 396, 402, 404,
	412, 416, 417, 418, 419, -385, 2, -339, 163, 2,
	-196, 163, -339, -199, 2, -378, 163, -376, 10, -375,
	5, 4, -380, -383, -381, 2, -178, -169, 2, -190,
	-373, 2, -209, 163, -194, -195, -199, 380, 452, -242,
	-202, -203, -235, -169, 450, -307, 2, -92, 2, -307,
	163, 2, -92, 163, 2, -307, 163, 2, -92, 163,
	2, 2, 2, 386, 2, 79, 163, -169, 365, 94,
	2, 303, -439, 319, 390, 413, 2, 2, 2, 2,
	2, 2, 2, 365, 328, -450, 292, -183, 2, -169,
	145, -378, 163, 2, -378, 163, 2, -197, -199, -197,
	176, 193, -178, 163, 2, 369, 367, 369, 367, 148,
	2, 192, 2, 192, 2, -340, 2, -341, -194, 2,
	2, 2, 2, 2, 163, -169, 365, 94, 2, 208,
	2, 2, 2, 2, 2, 2, 2, 2, 2, -244,
	163, 2, -194, -244, 163, 2, -244, 163, 2, -210,
	163, 2, -209, -178, 163, 2, -379, 163, 2, -378,
	-379, 163, 2, -348, 2, -347, -375, 409, -77, 448,
	336, 448, -378, -194, -307, -92, 148, -307, -92, 145,
	2, 95, 365, -131, 2, 145, 404, 2, 8, 2,
	-378, 289, 137, 2, 340, 2, 61, -281, 425, 148,
	2, 2, -426, 2, 254, 148, 2, 148, 2, 148,
	2, 148, 2, 148, 2, 286, 337, 2, 383, 207,
	123, 148, -265, 2, 419, 148, 2, 148, 2, 5,
	2, 197, 283, 353, 2, -194, -443, 2, 365, 413,
	328, 2, 2, 72, 73, 148, 2, 148, 425, 2,
	-259, -339, -294, -295, -294, 380, -174, -456, -231, -232,
	-131, 340, 2, 2, -456, -258, -283, -284, 219, 132,
	250, -264, 26, 108, -264, -264, 48, 449, 449, 11,
	12, 63, 37, 439, 440, 441, 442, 143, 443, 444,
	437, 438, 436, 429, 430, 433, 203, 204, 78, 432,
	431, 71, 226, 318, 133, 134, 135, 136, 300, 173,
	174, 175, 14, 15, 16, 30, 259, 218, 426, 166,
	343, 434, 17, 18, 19, 194, 196, 244, 40, 169,
	-175, -211, -307, -307, -307, -307, -307, 265, 448, -256,
	-302, 446, -146, 448, 448, 448, 5, 448, 5, -369,
	8, -146, -307, -320, 449, -248, 448, -146, -320, -315,
	448, 316, 446, 448, -323, -307, 450, -409, 420, -355,
	448, 280, -354, 448, -354, -354, 414, -352, 448, 427,
	421, 448, -352, 448, 448, 145, 448, 448, 448, 448,
	448, 448, 448, 448, 448, 448, 448, 448, 448, 414,
	448, 448, 448, 448, 448, 448, 448, 448, 448, 452,
	-407, -228, 448, -252, -342, -307, 441, -252, -252, 254,
	-245, -307, 83, -268, 200, 237, 149, 215, 311, 181,
	-369, -77, -304, 453, -331, 427, -146, -336, -193, -146,
	-338, 448, -335, -331, 441, -194, 448, 148, 448, 450,
	148, -235, -373, -178, -194, -204, -205, 107, -245, -378,
	-423, -235, -173, 34, -317, -349, -350, -363, -351, -360,
	-356, -359, 296, 297, 295, 299, 298, 44, 50, 49,
	374, 235, 330, 331, 346, 332, 333, 42, 405, 172,
	251, 253, 184, 4, 43, 410, -362, 191, 183, 189,
	185, 345, 186, 187, 188, 41, 291, 141, 142, 140,
	111, 100, 99, 247, 46, 45, 97, 376, 377, 378,
	379, 201, 202, 411, 356, 57, 58, -423, -235, 145,
	-372, -245, 34, -295, 2, -454, 452, 217, -213, 225,
	241, 160, 255, 423, 248, -377, 5, 4, -316, -328,
	101, 221, -359, 9, 440, -367, 8, 439, -371, -370,
	85, 450, -373, -155, 301, -154, 23, 27, 112, 407,
	124, -218, 178, 271, 119, 349, -430, -432, 321, 372,
	373, 74, 248, 301, 119, -261, -263, 34, 93, 239,
	267, 51, 170, 230, 231, 351, 415, 119, 301, 419,
	119, -432, 301, -432, -157, 349, -430, -432, 321, 301,
	-156, -218, 119, 453, -378, -242, 452, 452, -373, 441,
	119, 119, 119, 119, 2, 2, 242, 2, 2, 2,
	150, -442, -440, 2, 2, 2, -194, 163, -196, 163,
	2, -199, 413, -230, 254, -425, -243, 365, -194, -165,
	-404, 419, 242, 242, 34, 448, 2, -180, 163, 2,
	-170, -169, 176, -404, 242, -340, -207, -194, -207, 339,
	-187, 34, -304, 119, 2, 2, 2, -169, -158, 452,
	53, 307, 119, -158, 119, -158, 119, -158, 452, 119,
	-158, 119, 452, 119, 119, 449, 452, -348, -378, -141,
	419, 148, 82, 448, -379, -425, -178, 2, -194, 2,
	365, 201, -378, -378, -372, 26, 341, 2, 286, 337,
	73, -194, -427, 145, -424, 312, -423, -194, -194, -194,
	-194, -194, 2, 2, 145, 2, 383, 2, 383, 2,
	-169, 67, -169, -169, 217, -194, 145, 365, 176, 365,
	-158, 452, -174, -456, -258, -372, -456, -284, -283, -286,
	-307, 26, -289, 139, 238, -307, -309, -145, -145, -145,
	-233, -333, -307, 282, 176, -364, -349, -349, -192, -373,
	376, -307, -307, -307, -307, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, -307, 218, 166, 343, 40,
	169, -307, 380, -307, -307, -307, -307, 234, 242, 245,
	388, 130, 397, 108, 248, -460, 361, 36, -313, -146,
	-249, 448, -327, 31, 348, 26, -320, 448, 2, -302,
	-307, -303, -246, -245, -245, 449, 412, 26, 108, 441,
	2, 8, -276, -278, 424, 233, 98, 162, 232, -277,
	326, 449, 452, 34, 449, -307, -246, -319, -315, -245,
	-326, -325, 416, -373, 441, -410, 138, 155, 8, -369,
	-369, 376, 376, 8, -369, -369, 448, 449, 2, 449,
	2, 449, 2, 449, 2, 449, 2, -307, -307, -307,
	-307, -307, -307, -307, -245, -270, 2, -365, -245, 4,
	424, 233, 98, 162, 232, 326, -270, 2, -271, 2,
	-307, -245, -272, -308, -309, 439, 440, 434, -320, -273,
	2, -307, -246, -307, 47, 212, 382, -274, -307, 148,
	-245, -245, 2, -245, 2, -408, 34, -245, -238, 452,
	148, 34, 4, -238, -238, 448, 449, 452, -269, 159,
	229, 224, -269, -335, -268, 200, -266, 263, -266, -266,
	-421, 448, 447, -331, -179, 446, 454, -373, -330, -329,
	34, -187, 261, -331, -331, 450, 449, -330, -194, 448,
	-245, -373, 354, 449, 450, 194, 194, 194, 317, 449,
	-141, 380, 419, -77, 256, 449, 452, -237, 33, 446,
	-278, 448, -366, 414, 448, 448, 148, -236, -434, 449,
	384, -296, -212, 290, 347, 302, 334, 363, 9, 8,
	8, 452, -373, 452, -435, 76, 380, 65, -298, 163,
	65, -387, -181, 76, -388, -169, 60, 396, 282, 147,
	-435, 76, -435, 76, 76, 339, 352, 48, -339, 37,
	-92, 213, 148, 425, 365, 380, -339, -263, -349, 93,
	230, 231, 48, -368, -367, 440, -368, 48, -368, -368,
	-368, 419, -196, -339, 380, 272, -378, 380, 452, 37,
	-92, 213, 148, 380, -209, -179, -345, -344, -202, -169,
	450, -307, -92, -307, -92, 119, 2, -450, 208, 448,
	-228, 242, -262, -261, 242, -198, 2, -194, 148, -235,
	-346, 192, 452, -243, 272, 119, 119, 448, 116, 288,
	2, 254, 242, -180, 163, -161, 368, 119, -301, -300,
	417, -290, -92, 448, 101, 34, -290, -253, -254, -343,
	-255, -181, 448, -187, -169, 2, -194, -244, -244, -244,
	-209, -210, -178, -378, -379, -379, -77, -347, 449, 449,
	-140, 258, -139, -169, 5, -143, 404, -215, -299, -298,
	-389, -390, -387, 218, 176, 396, 193, 131, -141, -344,
	-141, -345, -345, -194, 145, 2, 2, -235, -235, 336,
	145, 145, 450, -265, 288, 95, 365, 271, 176, -194,
	-209, -194, -339, -456, -287, -367, 448, -288, 316, 317,
	452, -153, 35, 106, 205, -194, 425, 117, -307, -307,
	380, -460, 361, -313, 117, -307, 234, 245, 388, 130,
	397, 108, 248, 148, 448, -308, -308, 449, -247, -307,
	-307, 447, 456, 449, -457, 452, -231, -307, -245, -245,
	449, 449, 380, 380, 380, 380, 448, 450, -245, -235,
	447, 447, 452, 449, -324, -325, 113, -307, 450, -415,
	264, 448, 448, 449, 449, 452, 449, 425, 425, 449,
	449, 449, -307, 34, 452, 452, 452, 449, 452, 452,
	452, 449, 449, 148, 449, 449, -279, 275, 449, 11,
	12, 439, 440, 441, 442, 143, 443, 444, 437, 438,
	436, 429, 430, 431, 71, 226, 318, 14, 15, 16,
	194, 169, -308, -308, -308, 449, -311, -312, 148, 145,
	34, -274, -274, -274, 449, 148, -245, 449, 449, 448,
	449, -301, -342, -240, 2, -335, -189, -373, -301, -301,
	-245, -307, 200, 200, -267, 404, 254, -269, -335, -329,
	449, -422, -369, -331, -330, -369, -306, -305, 146, 35,
	106, 240, -187, -228, -330, -330, -373, -331, 449, -241,
	-337, -403, -457, 450, -373, -132, 5, 245, -132, -132,
	148, -235, 24, 276, -349, 446, 447, 8, 8, 448,
	-369, -369, -235, 148, -370, -295, 394, 69, 290, 376,
	-370, -154, 301, -181, -181, -194, 242, -298, 163, -160,
	242, -349, -188, -169, 448, 448, 205, 205, -181, -188,
	163, -181, 163, -188, -188, -429, 290, 249, -307, 220,
	288, 243, -155, 301, -92, -92, 448, -434, 404, 107,
	-194, -198, 301, -204, -368, -368, -261, 301, -196, -378,
	419, -178, -156, -92, -92, 448, -179, -157, 301, -138,
	171, 441, -169, 413, -169, -214, -215, -169, -444, 421,
	419, 119, 119, -228, -208, -194, 446, -141, -378, -194,
	-378, -378, -378, 2, 448, 2, -194, 119, 254, 242,
	-162, 114, -455, 431, -178, -232, -231, -307, -260, -293,
	309, 254, -229, -182, -181, 409, -187, -260, -239, 452,
	148, 431, 450, -229, 2, -158, -158, -158, -158, -158,
	-77, -141, 452, 448, 431, 431, 448, -378, -378, 449,
	452, -194, -180, 176, 176, -186, -170, -141, -42, 419,
	365, 336, 336, -169, -190, -178, -194, -191, -209, -288,
	-307, -333, -194, 453, -307, -307, 117, 117, -307, -308,
	-308, -307, 117, 148, 448, -307, -317, 30, 30, 449,
	452, -303, -307, 449, 412, -457, -457, -457, 5, 233,
	162, 232, -277, 232, -277, -277, 8, 441, -373, 449,
	-315, 115, -307, 375, -373, 441, -416, -184, 448, -169,
	417, -231, -369, -352, -352, 449, -364, -349, -307, -307,
	-307, -307, -307, -307, -311, -307, -364, -349, -308, -308,
	-308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
	-308, -308, -308, -308, -308, -308, -308, 108, 242, 248,
	-308, -312, -311, -307, -307, -349, 449, 449, 449, -245,
	-77, -257, 155, -345, 452, -257, -257, 449, -335, -335,
	448, -307, 200, 447, 449, 452, -330, 447, 452, 455,
	431, -228, 450, -329, 449, 452, -292, 34, 449, -373,
	-92, 257, 5, 8, 446, 447, 449, -369, 449, 449,
	-235, -307, 380, 380, 119, 242, 406, -391, -388, -307,
	-234, -334, -307, 448, 448, -152, 112, 339, -436, 2,
	119, -158, 119, -158, 423, 448, 448, 380, -245, -307,
	-142, 101, -372, -432, 380, 380, 272, -245, 380, -141,
	148, 2, 2, 2, 449, 34, 252, -169, -194, -196,
	34, -60, 419, -344, -369, -165, 2, -282, 404, -179,
	-194, 119, -163, 211, -455, -376, -404, -285, -283, -260,
	-252, 243, 75, 449, 452, 450, -301, -254, -240, -307,
	2, 449, -139, -140, -378, -378, -378, -141, -143, -143,
	-299, 2, 448, -180, -170, 448, 258, -194, -265, -220,
	-219, 271, 248, 255, 449, -153, -179, -307, -307, 117,
	30, 30, -307, -307, -317, 449, -307, -307, -245, 447,
	5, -307, 449, 449, 449, 449, -307, 450, -417, -169,
	-307, 449, 449, 449, 449, 452, 452, 449, 449, 449,
	449, -312, 148, 108, 248, 448, 449, 449, -314, 158,
	48, -335, -314, -314, -267, -235, -335, -304, -369, -305,
	-179, 446, -373, -337, 448, 450, 447, 2, 446, 449,
	-181, -181, -298, 119, -392, 76, -393, 63, 131, 82,
	242, 245, 396, 282, 60, 101, 294, 34, 449, 449,
	452, -153, -234, -235, 242, 358, 101, 242, 101, 94,
	391, -181, -188, -235, -235, -194, 449, 452, 431, -198,
	-196, -378, 449, -179, -379, -216, 179, -92, 2, 448,
	-228, -262, -92, 258, 447, 448, -169, 254, 448, -179,
	-164, 210, -455, -376, -161, -260, -291, 448, 254, -92,
	-182, 2, -232, 431, 449, 449, 94, 94, -234, 448,
	448, -235, -43, -44, 176, 76, 274, -191, 365, -153,
	-307, -307, -307, 449, -457, -373, 441, -411, 271, 449,
	-307, -307, -308, 148, 448, -317, -412, 418, -307, -245,
	-412, -412, 449, -331, -369, 2, 446, 2, -298, -188,
	-192, -185, -169, 131, 163, 245, 205, 448, -308, -194,
	448, 2, -446, 103, 180, -297, -447, 81, 359, -334,
	449, 449, 245, 245, -307, -349, -158, -158, 449, 449,
	380, -372, 80, -370, 380, -217, -218, 169, -445, 419,
	-214, -444, -61, -62, 381, -344, -234, -194, -234, 254,
	-455, -376, -162, 109, -235, 76, -285, -313, -141, 448,
	448, 449, -234, -234, 449, 452, 26, 448, 26, 448,
	-194, 449, -232, 48, 449, 449, -308, -317, 449, -413,
	-414, -184, -330, 447, 2, -393, -185, 242, -307, -171,
	448, -307, 180, 104, 167, -216, 448, 294, -177, 63,
	448, 448, 448, 431, 148, 448, -444, 269, 94, 239,
	449, 34, -62, 9, 449, -282, 449, -194, -376, -163,
	399, 243, 449, -188, -260, -379, -379, -297, 449, 449,
	-44, -235, -235, -418, 288, 317, 157, -245, 449, 452,
	34, 119, 449, -394, 227, -169, 449, 104, 167, -217,
	-235, -194, -433, 404, -192, -222, -221, -219, -224, -223,
	-219, -245, -370, 80, 269, -245, -194, 94, -216, -92,
	-297, 448, -297, 448, -164, 339, -300, 449, 449, -216,
	-297, 449, 449, 449, -419, -420, 40, 393, 85, -307,
	-419, -419, -414, -416, 131, -395, -398, -397, 254, 344,
	149, 270, 449, 358, 415, -446, 449, -228, -307, 449,
	452, 409, 449, 452, 409, 449, 148, 449, 448, -217,
	-445, -216, -234, -216, -234, -253, -141, -141, -217, -216,
	-420, 279, 144, 316, 279, 144, -185, -397, 254, -398,
	254, 399, 105, -394, -221, 169, -223, 148, 269, -235,
	-444, -217, 449, -217, 449, -301, -217, 30, -396, 239,
	307, 53, 339, -396, -395, 448, 448, 449, -451, 417,
	-297, -451, -297, -420, 22, 245, 101, -446, -245, -245,
	-159, 53, 307, 2, -216, -216, 449, 449, -217, -217,
	-217, 380, -451, -451, 448, -245, 449, -217,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 346, 347,
	349, 350, 351, 353, 354, 356, 358, 360, 362, 363,
	365, 367, 368, 369, 370, 371, 373, 375, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 421,
	423, 0, 852, 854, 856, 858, 27, 28, 0, 0,
	171, 173, 175, 0, 200, 202, 204, 205, 207, -2,
	0, 300, 301, 303, 305, -2, -2, 0, 0, 410,
	412, 0, 0, 432, 433, 0, 942, -2, 426, 428,
	430, 493, 495, 497, 499, 501, 503, 505, 506, 508,
	510, 512, 514, 516, 518, 520, 522, 524, 526, 528,
	530, 532, 534, 536, 538, 540, -2, -2, -2, 0,
	-2, -2, -2, 870, 31, 33, 35, 37, 39, 41,
	59, 256, 257, 259, 261, 263, 266, 267, 269, 981,
	307, 309, 311, 313, 315, 0, -2, 995, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 66, 67, 68,
	69, 70, 71, 72, 52, 54, 55, 61, 62, 64,
	0, 0, 957, 959, 961, 963, -2, 0, 0, 7,
	9, 11, 13, 15, 17, 19, 21, 23, 348, 352,
	355, 357, 359, 361, 364, 366, 372, 374, 376, 747,
	1585, 1599, 1600, 1601, 1604, 1605, 1606, 1607, 1608, 1609,
	1936, 2016, 2017, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 0, 388, 386, 1579, 389, 1772,
	391, 393, 294, 295, 296, 297, 298, 299, 0, 154,
	0, 403, 397, 402, 404, 406, 407, 408, 409, 383,
	381, 0, 403, 1631, 401, 850, 851, 845, 846, 1805,
	880, 422, -2, -2, -2, 1905, -2, 454, -2, 461,
	1908, 1807, 464, 0, 466, -2, 469, 853, 855, 857,
	29, 30, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, -2, -2, -2, -2, 0, 0, 1665, 1556,
	1601, 1559, 1554, 172, 174, 176, 177, 0, 0, 0,
	0, 0, 0, 201, 203, 206, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 803, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 671, 0, 0, 676, 798,
	799, 820, 0, 0, 0, 0, 302, 304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 234, 340, 341, 0, 982, 0,
	0, 0, 152, 145, 0, 0, 659, 411, 413, 0,
	144, 0, 0, 849, 0, 0, 427, 429, 431, 494,
	496, 498, 500, 502, 504, 507, 509, 511, 513, 515,
	517, 519, 521, 523, 525, 527, 529, 531, 533, 535,
	537, 539, 541, 542, 0, 0, 0, 0, -2, -2,
	0, -2, -2, 0, 0, 0, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 0, 545, 547, 548, 549, 0, 588, 597, 641,
	642, 0, 789, 983, 882, 860, 873, 882, 862, 863,
	864, 865, 866, 871, 872, 875, 0, 867, 868, 869,
	32, 34, 36, 38, 40, 42, 258, 260, 262, 264,
	268, 270, -2, 955, 956, 308, 310, 312, 314, 316,
	414, 0, 416, 0, 546, 946, 0, -2, 0, 987,
	987, 987, 0, 0, 956, 954, 0, 419, 420, 473,
	474, 1219, 0, 0, 0, 0, 0, 1454, 1303, 0,
	475, -2, 1334, 1336, 1884, 1905, 1453, 1338, 1339, 1340,
	1341, 1342, 0, 0, 1345, 0, 1347, 1348, 1349, 1350,
	0, 1352, 0, 1356, 1357, 1358, 0, 1889, 1533, 1597,
	-2, 1124, 1125, 1126, 1127, 1128, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1593, 0, 1425, 1372, -2, 1618,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1674, -2, -2, -2, -2, -2, -2, -2,
	1180, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1919, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	0, 1873, 1890, 1891, 1896, 1898, 1892, 1881, 1395, -2,
	1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1181, -2, 1885, 1886, 1901,
	1902, 1907, 1912, 1913, 1888, 1897, -2, -2, 973, 1780,
	976, 747, 974, 958, 960, 0, 962, 0, 0, 0,
	967, 990, 988, 0, 1026, 971, 972, 982, 1043, 1066,
	0, 1048, 0, 1066, 1092, 0, 1053, 1800, 1373, 1374,
	0, 1601, 1598, -2, 0, 0, 0, 0, 0, 0,
	197, 384, 0, 390, 392, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 424, 425, 0, 449, 0,
	453, 1880, -2, -2, 457, 883, 887, 888, 889, 890,
	0, 0, 0, 0, 0, 463, 0, 0, 450, 451,
	467, 470, 0, 50, 0, 1890, 1092, 51, 0, 1569,
	1623, 1624, 1625, 1626, 1627, 1919, 1935, 1937, 1938, 1939,
	1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 53, 0, 1890, 56,
	0, 1890, 0, -2, 60, 0, 1890, 155, 156, 1614,
	1615, 1619, 1620, 1621, 1622, 63, 0, 1575, 65, 0,
	1572, 73, 0, 1890, 0, 1553, -2, 0, 0, 651,
	1550, 1555, 652, 1560, 0, 178, 179, 180, 181, 182,
	1890, 184, 185, 0, 187, 188, 1890, 190, 191, 0,
	193, 209, 210, 0, 212, 0, 1890, 0, 0, 0,
	218, -2, 235, 0, 232, 0, 222, 223, 225, 226,
	227, 228, 229, 0, 0, 0, 804, 274, 272, 1580,
	0, -2, 1890, 792, 795, 1890, 797, 809, 1583, 0,
	-2, 0, 980, 1890, 897, 672, 673, 674, 675, 0,
	293, 0, 910, 0, 912, 0, 932, 1098, 1043, 236,
	237, 238, 239, 240, 1890, 0, 0, 0, 245, 0,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 137,
	1890, 319, 338, 137, 1890, 322, 137, 1890, 325, 137,
	1890, 328, 1548, 137, 1890, 331, 332, 1890, 334, 157,
	335, 1890, 337, 0, -2, 377, 1587, -2, 343, 0,
	-2, 0, 169, 0, 657, 658, 0, 847, 848, 0,
	434, 0, 0, 543, 544, 0, 0, 554, 555, 556,
	557, 1778, 1689, 560, 0, 563, -2, 0, 0, 0,
	567, 569, 656, 571, 0, 0, 573, 0, 575, 0,
	577, 0, 579, 0, 581, -2, -2, 590, 0, 0,
	0, 0, 605, 606, 0, 0, 611, 0, 614, 615,
	616, 0, 618, 619, 620, 621, 0, 623, 624, -2,
	-2, 628, 630, 0, 636, 0, 640, 0, 550, 551,
	137, 1096, 859, -2, 861, 0, 877, 949, -2, 0,
	415, 0, 418, 953, 947, 952, 1004, 1005, 0, 0,
	0, 0, 985, 986, 0, 0, 0, 944, 945, 0,
	0, 0, 0, 1459, 1460, 1461, 1462, 1463, 1464, 1467,
	1468, 1465, 1466, 1469, 1470, 0, 0, 0, 0, 0,
	1471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 1473, 1474, 0, 0, 1476, 0, 1478,
	0, 0, 0, 0, 0, 0, 1282, 1284, 1541, 0,
	0, 1475, 1224, 1225, 1226, 1261, 1262, 0, 0, 1335,
	1538, 1537, 1337, 0, 1490, 0, 1344, 0, 1216, 1351,
	1566, -2, 0, 1454, 1485, 0, 0, 1359, 1360, 1361,
	0, 0, 1490, 0, 0, 1532, 0, 1427, 0, 1160,
	0, 1161, 1162, 0, 1163, 1164, 1177, 1190, 0, 0,
	0, 0, 1194, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1182,
	0, 0, 0, 1513, -2, 0, 0, 0, 0, 0,
	975, 0, 0, 1030, 1542, 1546, 1547, 1030, 1030, 0,
	0, 1491, 1089, 1089, 0, 0, 1085, 1085, 1085, 1083,
	1060, 0, 1066, 0, 1076, 0, 1066, 1066, 0, -2,
	1048, 0, 0, 1076, 1093, 1094, 0, 0, 0, 0,
	0, 0, 1602, 0, 0, 0, 1589, 0, 0, 169,
	0, 395, 405, 982, 0, 1493, 1115, 1109, 1118, 1119,
	1120, 1121, 1167, 1168, 1169, 1170, 1171, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, -2, 1178, 1180, 1201, 1149, 1150,
	1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1173,
	0, 1148, 1148, 1148, 1165, 1166, 1189, 1200, 1192, 1200,
	1196, 1116, 1117, 1183, 1184, 1185, 1186, 0, 399, 0,
	0, 0, 0, -2, 459, 0, 885, 0, 891, 484,
	485, 486, 893, 894, 0, 462, 487, 488, 489, 490,
	491, 492, 0, 764, 0, 766, 1562, 0, 460, 477,
	465, 0, 471, 74, 842, 103, 0, 842, 842, 0,
	0, 124, 0, 0, 0, 0, 0, 92, 99, 80,
	81, 0, 0, 0, 0, 57, 772, 0, 775, 0,
	0, 0, 0, 0, 0, 0, 787, 0, 0, 0,
	0, 91, 0, 86, 76, 0, 0, 94, 101, 0,
	128, 130, 0, 0, 1079, 650, 0, 0, 1602, 1558,
	0, 0, 0, 0, 211, 213, 0, 215, 216, 217,
	0, 803, 0, 224, 221, 265, 747, 1890, 771, 1890,
	769, 1584, 0, 0, 0, 291, 286, 0, 288, 790,
	0, 979, 0, 0, 0, 0, 810, 0, 1890, 815,
	1571, 1610, 1611, 899, 0, 1104, 0, 913, 0, 0,
	1099, 0, 1101, 0, 242, 243, 244, 0, 317, 0,
	135, 136, 0, 320, 0, 323, 0, 326, 0, 0,
	329, 0, 0, 0, 0, 982, 0, 0, 0, 147,
	0, 0, 0, 0, 169, 169, 1079, 436, 1079, 438,
	0, 0, 558, 559, 561, 562, 564, 565, -2, -2,
	637, 566, 570, 0, 644, 1796, 654, 572, 574, 576,
	578, 580, 583, 600, 0, 592, 0, 594, 0, 596,
	608, 607, 609, 612, 617, 622, 0, 0, 0, 0,
	788, 0, 876, 950, 952, 417, 948, 1002, 1003, 1008,
	1012, 1013, 1016, 1019, 1020, 1010, 1219, 968, 969, 970,
	996, 997, 829, 0, 2016, 1220, 1110, 1221, 1222, 1568,
	0, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, -2, -2, -2, -2, -2, -2, -2, -2, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	-2, -2, -2, 1259, 1260, -2, 1477, 1479, 0, 1541,
	0, -2, 0, -2, -2, -2, -2, 1279, 0, 1281,
	1286, 1288, 1290, 0, 0, 0, 0, 1540, 1300, 1524,
	1525, 0, 0, 1456, 1457, 1458, 1285, 0, 1304, 1539,
	1536, 0, 0, 1489, 993, 1363, 0, 0, 0, 0,
	1370, 0, 1567, 1215, 1202, 1203, 1204, 1205, 1206, 1207,
	1217, 1355, 1487, 0, 1486, 0, 0, 0, 1497, 0,
	1531, 1527, 0, 1590, 1596, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1407, 0, 1500, -2,
	-2, -2, -2, -2, -2, -2, 0, 1409, 0, 1411,
	1491, 1510, 0, 0, 1305, 0, 0, 0, 1454, 0,
	1414, 1491, 1518, 0, 0, 0, 0, 0, 1491, 0,
	1523, 0, 1421, 0, 1423, 977, 0, 0, 1104, 0,
	0, 0, 1545, 1104, 1104, 0, 1025, 0, 0, 1086,
	1087, 1088, 0, 0, 1089, 0, 1080, 1084, 1081, 1082,
	0, 0, 1066, 1076, 1040, 0, 0, 1570, 1046, 1075,
	0, 747, 1065, 1076, 1076, 0, -2, 1050, 0, 0,
	993, -2, 170, 746, 0, 0, 0, 0, 385, 387,
	0, 0, 0, 379, 0, 382, 0, 1105, 1108, 0,
	1122, 0, 0, -2, 0, 0, 0, 0, 0, 452,
	0, 884, 892, 0, 481, 0, 483, 0, 765, 1564,
	1563, 0, 472, 0, 0, 0, 0, 841, 107, 1890,
	0, 139, 0, 0, 731, 1576, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 773, 774, 776,
	782, 784, 0, 778, 1565, 0, 779, 0, 781, 783,
	785, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 1552, 160, 1078, 1551, 1561,
	0, 183, 186, 189, 192, 0, 219, 0, 0, 679,
	662, 0, 767, 770, 0, 747, 802, 1582, 0, 273,
	169, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	808, 0, 0, 0, 1890, 901, 907, 0, 995, 1103,
	0, 930, 915, 0, 0, 0, 930, 934, 935, 937,
	938, 0, 0, 1100, 0, 246, 339, 137, 137, 137,
	1549, 137, 137, 158, 333, 336, 342, 378, 982, 169,
	167, 1759, 165, 162, 164, 0, 0, 0, 680, 682,
	683, 684, 685, 0, 1611, 0, 1718, 1611, 142, 169,
	285, 435, 440, 552, 0, 585, 602, 655, 653, 591,
	0, 0, 0, 604, 0, 0, 0, 0, 0, 638,
	639, 643, 1097, 951, 0, 1014, 0, 1011, 1017, 1018,
	0, 999, 827, 828, 0, 0, 0, 0, -2, -2,
	0, 0, 0, 1301, 0, -2, 1280, 1283, 1287, 1289,
	1291, 0, 0, 0, 0, 0, 0, 1480, 0, 1482,
	1302, 1534, 1537, 1452, 0, 0, 992, 993, 993, 993,
	1369, 0, 0, 0, 0, 0, 0, 0, 1488, 0,
	1495, 1496, 0, 1362, 0, 1528, 0, 0, 0, 1371,
	0, 0, 0, 1172, 1146, 0, 1200, 1198, 1199, 1193,
	1200, 1197, 0, 0, 0, 0, 0, 1390, 0, 0,
	0, 1394, 1406, 0, 1408, 1410, 0, 0, 1412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 1309, 1310, 1413, 1516, 1517, 0, 0,
	0, 0, 0, 0, 1419, 0, 1522, 1420, 1422, 982,
	1027, 1022, 1543, 1079, 1029, 1031, 1544, 1573, 1022, 1022,
	0, 1492, 0, 0, 1070, 0, 0, 0, 1072, 0,
	1061, 0, 1063, 1076, 1045, 0, 0, 1038, 0, 1035,
	1036, 1037, 747, 1074, 1047, 1051, 1590, 0, 1095, 0,
	1055, 1058, 0, 0, 1603, 194, 198, 199, 195, 196,
	0, 394, 0, 0, 1494, 0, 1111, 0, 0, 0,
	0, 0, 398, 0, 448, -2, 479, 480, 482, 0,
	478, 104, 842, 0, 0, 833, 0, 109, 1890, 118,
	0, 708, 0, 1574, 0, 0, 0, 0, 844, 0,
	1890, 137, 1890, 137, 120, 123, 0, 127, 125, 0,
	0, 699, 75, 842, 78, 84, 0, 0, 0, 90,
	0, 835, 0, 777, 780, 786, 58, 0, 837, 831,
	0, 830, 129, 79, 85, 0, 839, 77, 0, 169,
	0, 1557, 0, 0, 0, 0, 678, -2, 0, 0,
	0, 0, 0, 0, 279, 275, 0, 284, 290, 289,
	793, -2, 796, 805, 0, 807, 819, 0, 0, 0,
	903, 907, 0, 906, 980, 1007, 994, 1102, 908, 930,
	0, 0, 0, 918, 920, 917, 914, 911, 1104, 0,
	0, 0, 0, 0, 241, 318, 321, 324, 327, 330,
	344, 146, 0, 0, 0, 0, 0, 169, 0, 0,
	0, 0, 0, 1611, 1611, 0, 1578, 143, 437, 0,
	0, 593, 595, 608, 631, 632, 694, 0, 635, 0,
	0, 998, 829, 0, 1223, 1264, 0, 0, -2, 0,
	0, 1268, 0, 0, 0, -2, 0, 0, 0, 1481,
	1483, 0, 1536, 1364, 0, 0, 0, 0, 1346, 1208,
	1209, 1210, 1211, 1212, 1213, 1214, 0, 1353, 1354, 1455,
	1498, 1526, 1530, 0, 1591, 1595, 1433, 1434, 1438, 1581,
	0, 0, 0, 1191, 1195, 1375, 0, 0, 0, 0,
	0, 0, 0, 1499, 1509, 1511, 1306, 1307, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, -2, -2,
	-2, 1324, 1325, 1326, -2, -2, -2, 0, 0, 0,
	1512, 1514, 1515, 1519, 1520, 0, 1416, 1417, 1418, 1521,
	0, 1024, 0, 1028, 0, 1024, 1024, 989, 1068, 0,
	0, 1091, 0, 1043, 1062, 0, 1052, 1041, 0, 1042,
	0, 1073, 0, 1049, 1054, 0, 1057, 0, 1364, -2,
	153, 396, 380, 0, 0, 1113, 1123, 0, 1175, 1179,
	400, 1077, 0, 0, 0, 0, 138, 706, 730, 0,
	0, 822, 829, 0, 0, 111, 0, 0, 0, 119,
	0, 116, 0, 122, 126, 0, 0, 0, 0, 87,
	88, 89, 0, 93, 0, 0, 0, 0, 0, 140,
	0, 214, 801, 220, 688, 0, 663, 0, 747, 771,
	0, 271, 0, 278, 0, 791, 806, 0, 0, 0,
	0, 0, 905, 907, 0, 898, 899, 930, 1006, 909,
	928, -2, 927, 0, 0, 0, 995, 936, 933, 939,
	940, 0, 166, 0, 161, 163, 0, 149, 0, 0,
	681, 686, 0, 0, 0, 0, 0, 553, 603, 633,
	693, 0, 0, 1009, 1015, 1000, 829, 1266, 1270, 0,
	0, 0, 1272, -2, 0, 1294, -2, -2, 1484, 1535,
	1343, 993, 1365, 1367, 1368, 1218, 1529, 0, 1440, 1437,
	0, 1424, 1147, 1385, 1386, 0, 0, 1389, 1391, 1392,
	1393, 1508, 0, 0, 0, 0, 1415, 978, 1429, 0,
	0, 1032, 1429, 1429, 1069, 0, 1071, 1066, 1064, 1039,
	1033, 0, 1591, 1056, 0, 0, 1106, 1112, 0, 1174,
	105, 106, 108, 0, 707, 0, 710, 0, 0, 0,
	0, 717, 718, 0, 0, 0, 0, 0, 736, 745,
	0, 824, 0, 0, 0, 113, 132, 0, 0, 843,
	0, 137, 137, 0, 0, 834, 0, 0, 0, 836,
	838, 832, 0, 840, 159, 696, 0, 667, 664, 679,
	662, 768, 800, 0, 276, 0, 818, 0, 0, 0,
	895, 907, 0, 900, 901, 292, 0, 0, 0, 916,
	919, 921, 1007, 0, 168, 169, 0, 0, 0, 0,
	0, 0, 439, 441, 0, 0, 447, 692, 0, 1001,
	1274, -2, -2, 1295, 0, 1592, 1594, 995, 0, 1426,
	0, 0, -2, 0, 0, 0, 964, 0, 1023, 1021,
	965, 966, 1090, 1076, 0, 1059, 0, 1114, 110, 0,
	711, 712, 1577, 714, 0, 716, 719, 0, 721, 1613,
	0, 725, 732, 737, 0, 688, 0, 742, 743, 823,
	734, 0, 112, 114, 131, 826, 115, 121, 0, 0,
	0, 0, 1659, 96, 0, 662, 695, 0, 665, 0,
	0, 0, 277, 280, 0, 283, 0, 819, 0, 0,
	0, 902, 903, 0, 0, 0, 930, 941, 148, 0,
	0, 745, 0, 0, 729, 0, 443, 0, 445, 0,
	634, 1366, 1444, 0, 1387, 1388, -2, 0, 1332, 1428,
	1430, 0, 1044, 1034, 1107, 709, 713, 0, 0, 751,
	0, 0, 0, 740, 741, 696, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 660, 0, 668, 0,
	688, 0, 281, 282, 745, 0, 745, 0, 904, 905,
	0, 923, 924, 926, 931, 0, 0, 688, 745, 728,
	442, 0, 0, 0, 0, 0, 0, 1439, 1333, 0,
	0, 0, 720, 756, 0, 0, 0, 738, 739, 736,
	0, 747, 117, 0, 825, 0, 700, 0, 0, 703,
	0, 0, 97, 1659, 95, 0, 0, 669, 696, 667,
	688, 0, 688, 0, 896, 0, 925, 169, 169, 696,
	688, 444, 446, 1436, 1441, 1445, -2, 1854, 1662, 0,
	1442, 1443, 1431, 1432, 0, 722, 752, 753, 0, 748,
	749, 750, 1612, 723, 724, 733, 744, 751, 133, 697,
	0, 0, 698, 0, 0, 100, 0, 102, 0, 662,
	666, 696, 0, 696, 0, 1104, 150, 151, 726, 696,
	0, 1447, 1448, 1449, 1450, 1451, 715, 754, 0, 755,
	0, 0, 0, 756, 701, 0, 704, 0, 98, 0,
	661, 816, 745, 816, 745, 922, 727, 0, 757, 0,
	760, 761, 0, 758, 736, 0, 0, 691, 811, 0,
	688, 813, 688, 1446, 759, 762, 763, 735, 0, 0,
	687, 689, 690, 817, 696, 696, 696, 0, 816, 816,
	702, 0, 812, 814, 0, 0, 696, 705,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 437, 3, 443, 438, 3,
	448, 449, 441, 439, 452, 440, 450, 442, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 456, 3,
	429, 431, 430, 433, 453, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 446, 3, 447, 444, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 454, 436, 455, 434,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 432, 57772, 435, 57773, 445, 57774, 451,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1050
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1055
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1059
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1061
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1071
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1141
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1152
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1167
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1171
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1176
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1219
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1242
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1246
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1251
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1258
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1262
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1268
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1275
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1285
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1293
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1300
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1308
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1315
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1323
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1328
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1332
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1337
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1343
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1351
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1360
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1372
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1382
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1386
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 98:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1400
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1405
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1412
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1416
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1422
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1433
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1438
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1443
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1453
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1458
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1463
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1468
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1473
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1477
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1480
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1501
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1511
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1518
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1521
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1528
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1537
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1546
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1558
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1566
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1567
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1571
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1581
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1589
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1593
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = nil
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1614
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1624
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 140:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1654
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1657
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1680
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1684
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1687
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1728
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1733
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1737
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1743
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1748
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1753
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1757
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1773
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1776
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1780
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1784
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1792
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1802
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1806
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1812
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1816
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1830
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1834
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = nil
		}
	case 170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1854
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1867
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1868
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1869
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1870
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1888
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1890
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1893
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1903
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1912
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1920
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1922
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1926
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1929
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1939
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1948
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1956
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1962
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1965
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1969
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1973
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1978
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1993
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1999
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2004
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2016
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2017
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2019
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2020
		{
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2021
		{
			return helpWith(sqllex, "CREATE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2025
		{
			return unimplemented(sqllex, "create cast")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2026
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2027
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2028
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2029
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2030
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2031
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2032
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2033
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2034
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2035
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2036
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2037
		{
			return unimplemented(sqllex, "create operator")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2038
		{
			return unimplemented(sqllex, "create publication")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2039
		{
			return unimplemented(sqllex, "create rule")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "create server")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2042
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2043
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2044
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2047
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2048
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2051
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2052
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2055
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2056
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2062
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2063
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2064
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2065
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2066
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2067
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2069
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2070
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2072
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2073
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return unimplemented(sqllex, "drop server")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2075
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2082
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2084
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2085
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2087
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2088
		{
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2089
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2090
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2100
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2112
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2116
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2122
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2136
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2143
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2149
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2155
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2159
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2170
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2190
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2198
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2208
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2212
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2218
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2229
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2233
		{

			sqlVAL.union.val = nil
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2247
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2257
		{
			return helpWith(sqllex, "DELETE")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2264
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2269
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2270
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2271
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2280
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2281
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2282
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2283
		{
			return helpWith(sqllex, "DROP")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2288
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2289
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2290
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2298
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2305
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2313
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2317
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2320
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2332
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2335
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2343
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2351
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2358
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2366
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2381
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2389
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2393
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2396
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2404
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2408
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2411
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2415
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2420
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2443
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2446
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2448
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2452
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2456
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2463
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			return helpWith(sqllex, "DELETE")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2472
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2473
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "INSERT")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2478
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2481
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2486
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2487
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2488
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2492
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2496
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2514
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2522
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2526
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2530
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2547
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2555
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2559
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2563
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2573
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2581
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2585
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2588
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2608
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2612
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2616
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			return helpWith(sqllex, "GRANT")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2639
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2643
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2647
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2650
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2655
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2659
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2669
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2673
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2687
		{
			return helpWith(sqllex, "RESET")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2688
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "RESET")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2711
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2714
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2725
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2728
		{
			return helpWith(sqllex, "USE")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2732
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2733
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2734
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2735
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2739
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2740
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2741
		{
			return helpWith(sqllex, "USE")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2757
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2772
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2793
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2802
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2806
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2810
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2826
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2830
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2834
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2853
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2856
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2882
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2886
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2911
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2916
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2920
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2939
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2946
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2952
		{
			return unimplemented(sqllex, "set from current")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2953
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2961
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2966
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2973
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2977
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2983
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2994
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3015
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3025
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3029
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3033
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3037
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3047
		{
			sqlVAL.union.val = tree.Low
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3051
		{
			sqlVAL.union.val = tree.Normal
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3055
		{
			sqlVAL.union.val = tree.High
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3066
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3070
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3074
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3096
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3097
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3098
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3099
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3100
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3101
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3103
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3104
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3105
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3106
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3107
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3108
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3109
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3110
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3111
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3112
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3113
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3114
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3115
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3116
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3117
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3118
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3119
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3121
		{
			return helpWith(sqllex, "SHOW")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3128
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3129
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3130
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3141
		{
			sqlVAL.str = "client_encoding"
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3144
		{
			sqlVAL.str = "timezone"
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3145
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3159
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3164
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3169
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3180
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3188
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3196
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3203
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3211
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3218
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3228
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3232
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3235
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3237
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3240
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3248
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3260
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3263
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3276
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3284
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3292
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3296
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3298
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3302
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3304
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3308
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3316
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3320
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3322
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3326
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3334
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3339
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3346
		{
			sqlVAL.union.val = true
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3348
		{
			sqlVAL.union.val = true
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3350
		{
			sqlVAL.union.val = false
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3358
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3370
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3373
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3375
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3378
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3380
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3384
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3387
		{
			sqlVAL.union.val = true
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3388
		{
			sqlVAL.union.val = false
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3396
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3399
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3401
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3404
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3412
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3422
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3432
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3435
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3438
		{
			sqlVAL.union.val = true
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3439
		{
			sqlVAL.union.val = false
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3446
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3450
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3453
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3464
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3467
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3474
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3478
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3486
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3491
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3496
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3500
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3508
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3513
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3518
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3531
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3534
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3542
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3545
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3549
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3557
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3564
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3572
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
			}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3578
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3582
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3593
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3598
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3601
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3609
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3617
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3742
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3746
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3750
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3789
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3793
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3798
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3802
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3811
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3822
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3834
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3843
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3846
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3882
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3895
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3909
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3910
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3911
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3915
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3927
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3940
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3941
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3942
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3956
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3957
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3958
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3959
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3960
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3961
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3962
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3963
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3968
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3974
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3984
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3990
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3993
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:3997
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4006
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4013
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4018
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4023
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4029
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4036
		{
			sqlVAL.str = ""
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4043
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4049
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4056
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4063
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4069
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4079
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4089
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4093
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4099
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4110
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4124
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4130
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4134
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4138
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4142
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4146
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4150
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4154
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4172
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4176
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4180
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4184
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4188
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4192
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4196
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4206
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4210
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4214
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 726:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4231
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4243
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4253
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4265
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4270
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4276
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4282
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4293
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4303
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4315
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4316
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4317
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4318
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4319
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4320
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4337
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4341
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4347
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4351
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4371
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4379
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4383
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4392
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4396
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4400
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4404
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4408
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4414
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4420
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4428
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4432
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4436
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4440
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4444
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4450
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4454
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4460
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4479
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4484
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4488
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4492
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4495
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4496
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4499
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4500
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4502
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4503
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4504
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4507
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4509
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4511
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4513
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4514
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4516
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4517
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4519
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4521
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4529
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4532
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4540
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4547
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4551
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4555
		{
			sqlVAL.union.val = nil
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4565
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4569
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4572
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4577
		{
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4578
		{
		}
	case 800:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4586
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4594
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4595
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4598
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4599
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 805:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4605
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4607
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4609
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 808:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4611
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4613
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4615
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4631
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4645
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4660
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4674
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4688
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4691
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4692
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4696
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4711
		{
			sqlVAL.union.val = false
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4717
		{
			sqlVAL.union.val = true
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4721
		{
			sqlVAL.union.val = false
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4727
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4731
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4740
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4751
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4752
		{
			sqlVAL.str = ""
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4756
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4760
		{
			sqlVAL.union.val = tree.Descending
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 830:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4770
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4787
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4793
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4801
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4807
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4815
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4821
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4829
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4833
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4838
		{
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4839
		{
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4842
		{
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4843
		{
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4851
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4854
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4864
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4873
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4876
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4887
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4891
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4892
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4893
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4909
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4912
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4914
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4917
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4927
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4930
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4932
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4935
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4939
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4944
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4945
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4946
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4954
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4961
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4964
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4965
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4969
		{
			sqlVAL.str = ""
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4973
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4977
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4981
		{
			sqlVAL.str = ""
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4987
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4991
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4997
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5001
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5007
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5011
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5024
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5026
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5030
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5035
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5039
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5043
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5049
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5055
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5061
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5065
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 895:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5075
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5085
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5095
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5099
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5103
		{
			sqlVAL.str = ""
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5109
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5113
		{
			sqlVAL.str = ""
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5119
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5123
		{
			sqlVAL.str = ""
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5129
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.str = ""
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5138
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5139
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5151
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5158
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5165
		{
			return helpWith(sqllex, "INSERT")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5176
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5183
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5187
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5196
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5217
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5241
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 922:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5245
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5249
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5255
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5258
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5259
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5267
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5272
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 930:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5276
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 931:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5293
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5304
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5308
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5309
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5313
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5317
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5330
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5333
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5337
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5380
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5386
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5390
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5405
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5409
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5421
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5425
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5430
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5431
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5436
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5471
		{
			return helpWith(sqllex, "SELECT")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5472
		{
			return helpWith(sqllex, "VALUES")
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5473
		{
			return helpWith(sqllex, "TABLE")
		}
	case 964:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5495
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5508
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5522
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5534
		{
			return helpWith(sqllex, "SELECT")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5538
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5547
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5556
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5571
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5578
		{
			return helpWith(sqllex, "TABLE")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5590
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5594
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5598
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5602
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5606
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 978:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5612
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5620
		{
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5621
		{
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5625
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5629
		{
			sqlVAL.union.val = nil
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5634
		{
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5635
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5639
		{
			sqlVAL.union.val = true
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5643
		{
			sqlVAL.union.val = false
		}
	case 987:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5647
		{
			sqlVAL.union.val = false
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5653
		{
			sqlVAL.union.val = true
		}
	case 989:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5659
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5664
		{
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5665
		{
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5668
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5669
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5673
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5677
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5683
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5689
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5699
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5703
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5708
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5723
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5732
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5743
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5747
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5756
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5762
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5769
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5785
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5793
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5799
		{
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5800
		{
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5803
		{
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5804
		{
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5821
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5831
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5835
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5854
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5857
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5859
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5871
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5874
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5882
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5892
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5896
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5901
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5906
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5912
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5923
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5934
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5938
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5942
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5950
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5980
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5994
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6004
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6011
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6013
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6017
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6021
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6025
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6041
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6051
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6057
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6063
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6069
		{
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6071
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6074
		{
			sqlVAL.union.val = nil
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6075
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6076
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6080
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6090
		{
			sqlVAL.union.val = true
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6094
		{
			sqlVAL.union.val = false
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6114
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6118
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6122
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6134
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6140
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6144
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6151
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6157
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6164
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6170
		{
			sqlVAL.str = tree.AstFull
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6174
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.str = tree.AstRight
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6182
		{
			sqlVAL.str = tree.AstInner
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6188
		{
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6189
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6210
		{
			sqlVAL.str = tree.AstHash
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6214
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6218
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6222
		{
			sqlVAL.str = ""
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6235
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6239
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6244
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6246
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6247
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6251
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6256
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6270
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6274
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6280
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6288
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6298
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6317
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6330
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6338
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6339
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6347
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6353
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6360
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6361
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6363
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6371
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6372
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6383
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6384
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6401
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6405
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6409
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6413
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6417
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6425
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6429
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6433
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6437
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6441
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6445
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6449
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6453
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6457
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6465
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6469
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = nil
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6515
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6519
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6523
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6527
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6531
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6535
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6539
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6543
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6547
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6555
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6559
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6563
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6574
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6581
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6588
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6592
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6599
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6603
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6607
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6611
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6621
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6640
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6646
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6658
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6662
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6668
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6691
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6695
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6699
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6708
		{
			sqlVAL.union.val = true
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6709
		{
			sqlVAL.union.val = false
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6714
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6718
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6723
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = &coltypes.TTime{PrecisionSet: true, Precision: int(prec)}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6730
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6731
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6733
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6741
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
			} else {
				sqlVAL.union.val = &coltypes.TTimestamp{PrecisionSet: true, Precision: int(prec)}
			}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6753
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6757
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = true
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6767
		{
			sqlVAL.union.val = false
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6768
		{
			sqlVAL.union.val = false
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6772
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = tree.Year
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = tree.Month
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6786
		{
			sqlVAL.union.val = tree.Day
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6790
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6794
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6798
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = tree.Month
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6816
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6820
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6828
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6835
		{
			sqlVAL.union.val = nil
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6841
		{
			sqlVAL.union.val = tree.Second
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6844
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6872
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6876
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6879
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6888
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6893
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6897
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6901
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6905
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6909
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6913
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6921
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6929
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6933
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6945
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6949
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6953
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6957
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7001
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7013
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7132
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7134
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7138
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7142
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7146
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7150
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7154
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7158
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7166
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7170
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7174
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7178
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7182
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7186
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7194
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7198
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7220
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7232
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7236
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7240
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7244
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7248
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7252
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7256
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7268
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7284
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7288
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7292
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7296
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7304
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7308
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7312
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7332
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7354
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7398
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7414
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7419
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7421
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7425
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7428
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7430
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7434
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7438
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7442
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7446
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7455
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7462
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7466
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7470
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7475
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7479
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7483
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7487
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7491
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7494
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7498
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7502
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7505
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7506
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7516
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7519
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7530
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7547
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7551
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7563
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7567
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7571
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7575
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7609
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7621
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7639
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7644
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7649
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7651
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7654
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7659
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7664
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7669
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7671
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7674
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7683
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7684
		{
			return unimplemented(sqllex, "treat")
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7705
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7710
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7715
		{
			return unimplemented(sqllex, "within group")
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7716
		{
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7731
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7741
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7745
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7751
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7759
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7767
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.str = ""
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7815
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7842
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7855
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7883
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7895
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7918
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7922
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7929
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7941
		{
			sqlVAL.union.val = tree.Any
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7945
		{
			sqlVAL.union.val = tree.Some
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7949
		{
			sqlVAL.union.val = tree.All
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7955
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7956
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = tree.Div
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7959
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7960
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7963
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7964
		{
			sqlVAL.union.val = tree.LT
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = tree.GT
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = tree.LE
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7968
		{
			sqlVAL.union.val = tree.GE
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7969
		{
			sqlVAL.union.val = tree.NE
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = tree.Like
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7976
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7999
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8003
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8013
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8017
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8065
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8079
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8095
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8125
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8129
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8135
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8167
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8171
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8175
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8185
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8191
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8201
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8211
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8230
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8234
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8240
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8267
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8274
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8280
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8289
		{
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8290
		{
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8313
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8339
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8343
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8362
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8370
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8402
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8410
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8424
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8432
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8436
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8447
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8456
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8464
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8568
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8572
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8576
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8590
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8598
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8629
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8641
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8647
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8671
		{
			sqlVAL.str = ""
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8677
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8681
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
