// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:566
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8430

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	426, 57,
	-2, 897,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	168, 732,
	-2, 0,
	-1, 60,
	102, 897,
	174, 897,
	374, 897,
	375, 897,
	-2, 0,
	-1, 74,
	114, 871,
	127, 871,
	182, 871,
	209, 871,
	238, 871,
	246, 871,
	371, 871,
	-2, 860,
	-1, 108,
	119, 548,
	198, 548,
	361, 548,
	-2, 0,
	-1, 113,
	4, 899,
	20, 899,
	21, 899,
	22, 899,
	23, 899,
	25, 899,
	30, 899,
	35, 899,
	36, 899,
	37, 899,
	38, 899,
	39, 899,
	40, 899,
	41, 899,
	42, 899,
	43, 899,
	44, 899,
	46, 899,
	47, 899,
	48, 899,
	49, 899,
	50, 899,
	51, 899,
	52, 899,
	55, 899,
	56, 899,
	57, 899,
	58, 899,
	60, 899,
	61, 899,
	65, 899,
	66, 899,
	67, 899,
	68, 899,
	69, 899,
	71, 899,
	72, 899,
	73, 899,
	74, 899,
	76, 899,
	78, 899,
	79, 899,
	82, 899,
	83, 899,
	91, 899,
	92, 899,
	93, 899,
	94, 899,
	95, 899,
	96, 899,
	97, 899,
	98, 899,
	100, 899,
	102, 899,
	104, 899,
	107, 899,
	108, 899,
	110, 899,
	111, 899,
	113, 899,
	115, 899,
	116, 899,
	117, 899,
	118, 899,
	119, 899,
	120, 899,
	121, 899,
	122, 899,
	123, 899,
	124, 899,
	132, 899,
	133, 899,
	134, 899,
	135, 899,
	136, 899,
	137, 899,
	139, 899,
	141, 899,
	145, 899,
	147, 899,
	148, 899,
	150, 899,
	152, 899,
	153, 899,
	154, 899,
	155, 899,
	156, 899,
	157, 899,
	158, 899,
	159, 899,
	160, 899,
	163, 899,
	164, 899,
	169, 899,
	170, 899,
	171, 899,
	174, 899,
	175, 899,
	176, 899,
	177, 899,
	178, 899,
	179, 899,
	180, 899,
	181, 899,
	183, 899,
	185, 899,
	188, 899,
	189, 899,
	190, 899,
	192, 899,
	193, 899,
	196, 899,
	197, 899,
	198, 899,
	200, 899,
	201, 899,
	203, 899,
	204, 899,
	206, 899,
	207, 899,
	210, 899,
	211, 899,
	214, 899,
	216, 899,
	219, 899,
	220, 899,
	221, 899,
	222, 899,
	223, 899,
	225, 899,
	226, 899,
	227, 899,
	228, 899,
	233, 899,
	234, 899,
	235, 899,
	236, 899,
	237, 899,
	239, 899,
	240, 899,
	242, 899,
	243, 899,
	244, 899,
	247, 899,
	248, 899,
	250, 899,
	252, 899,
	253, 899,
	254, 899,
	255, 899,
	256, 899,
	257, 899,
	258, 899,
	259, 899,
	261, 899,
	262, 899,
	263, 899,
	264, 899,
	265, 899,
	267, 899,
	268, 899,
	269, 899,
	270, 899,
	271, 899,
	272, 899,
	273, 899,
	274, 899,
	275, 899,
	277, 899,
	278, 899,
	279, 899,
	280, 899,
	281, 899,
	283, 899,
	284, 899,
	285, 899,
	286, 899,
	287, 899,
	288, 899,
	289, 899,
	291, 899,
	293, 899,
	294, 899,
	295, 899,
	296, 899,
	297, 899,
	298, 899,
	300, 899,
	301, 899,
	302, 899,
	303, 899,
	304, 899,
	305, 899,
	306, 899,
	308, 899,
	309, 899,
	310, 899,
	311, 899,
	312, 899,
	313, 899,
	314, 899,
	315, 899,
	316, 899,
	318, 899,
	319, 899,
	320, 899,
	321, 899,
	323, 899,
	324, 899,
	325, 899,
	326, 899,
	328, 899,
	329, 899,
	330, 899,
	331, 899,
	332, 899,
	333, 899,
	334, 899,
	335, 899,
	336, 899,
	337, 899,
	338, 899,
	339, 899,
	341, 899,
	342, 899,
	344, 899,
	345, 899,
	346, 899,
	347, 899,
	348, 899,
	349, 899,
	350, 899,
	351, 899,
	352, 899,
	353, 899,
	355, 899,
	356, 899,
	357, 899,
	358, 899,
	361, 899,
	362, 899,
	363, 899,
	364, 899,
	366, 899,
	367, 899,
	369, 899,
	370, 899,
	373, 899,
	374, 899,
	375, 899,
	376, 899,
	378, 899,
	380, 899,
	381, 899,
	382, 899,
	383, 899,
	384, 899,
	385, 899,
	387, 899,
	388, 899,
	389, 899,
	394, 899,
	395, 899,
	396, 899,
	397, 899,
	398, 899,
	399, 899,
	-2, 0,
	-1, 134,
	114, 870,
	127, 870,
	182, 870,
	209, 870,
	238, 870,
	246, 870,
	371, 870,
	-2, 863,
	-1, 139,
	1, 793,
	188, 793,
	267, 793,
	272, 793,
	425, 793,
	426, 793,
	-2, 0,
	-1, 141,
	1, 793,
	425, 793,
	426, 793,
	-2, 0,
	-1, 142,
	1, 793,
	425, 793,
	426, 793,
	-2, 0,
	-1, 143,
	1, 797,
	425, 797,
	426, 797,
	-2, 0,
	-1, 171,
	4, 906,
	5, 906,
	6, 906,
	7, 906,
	8, 906,
	9, 906,
	20, 906,
	21, 906,
	22, 906,
	23, 906,
	25, 906,
	30, 906,
	31, 906,
	35, 906,
	36, 906,
	37, 906,
	38, 906,
	39, 906,
	40, 906,
	41, 906,
	42, 906,
	43, 906,
	44, 906,
	46, 906,
	47, 906,
	48, 906,
	49, 906,
	50, 906,
	51, 906,
	52, 906,
	53, 906,
	54, 906,
	55, 906,
	56, 906,
	57, 906,
	58, 906,
	60, 906,
	61, 906,
	63, 906,
	65, 906,
	66, 906,
	67, 906,
	68, 906,
	69, 906,
	71, 906,
	72, 906,
	73, 906,
	74, 906,
	76, 906,
	78, 906,
	79, 906,
	81, 906,
	82, 906,
	83, 906,
	84, 906,
	85, 906,
	86, 906,
	87, 906,
	88, 906,
	89, 906,
	90, 906,
	91, 906,
	92, 906,
	93, 906,
	94, 906,
	95, 906,
	96, 906,
	97, 906,
	98, 906,
	99, 906,
	100, 906,
	102, 906,
	104, 906,
	107, 906,
	108, 906,
	110, 906,
	111, 906,
	113, 906,
	115, 906,
	116, 906,
	117, 906,
	118, 906,
	119, 906,
	120, 906,
	121, 906,
	122, 906,
	123, 906,
	124, 906,
	125, 906,
	126, 906,
	132, 906,
	133, 906,
	134, 906,
	135, 906,
	136, 906,
	137, 906,
	139, 906,
	141, 906,
	144, 906,
	145, 906,
	147, 906,
	148, 906,
	150, 906,
	152, 906,
	153, 906,
	154, 906,
	155, 906,
	156, 906,
	157, 906,
	158, 906,
	159, 906,
	160, 906,
	161, 906,
	163, 906,
	164, 906,
	169, 906,
	170, 906,
	171, 906,
	173, 906,
	174, 906,
	175, 906,
	176, 906,
	177, 906,
	178, 906,
	179, 906,
	180, 906,
	181, 906,
	183, 906,
	185, 906,
	186, 906,
	187, 906,
	188, 906,
	189, 906,
	190, 906,
	191, 906,
	192, 906,
	193, 906,
	196, 906,
	197, 906,
	198, 906,
	200, 906,
	201, 906,
	203, 906,
	204, 906,
	205, 906,
	206, 906,
	207, 906,
	208, 906,
	210, 906,
	211, 906,
	214, 906,
	216, 906,
	217, 906,
	218, 906,
	219, 906,
	220, 906,
	221, 906,
	222, 906,
	223, 906,
	224, 906,
	225, 906,
	226, 906,
	227, 906,
	228, 906,
	229, 906,
	231, 906,
	232, 906,
	233, 906,
	234, 906,
	235, 906,
	236, 906,
	237, 906,
	239, 906,
	240, 906,
	243, 906,
	244, 906,
	247, 906,
	248, 906,
	249, 906,
	250, 906,
	251, 906,
	252, 906,
	253, 906,
	254, 906,
	255, 906,
	256, 906,
	257, 906,
	258, 906,
	259, 906,
	261, 906,
	262, 906,
	263, 906,
	264, 906,
	265, 906,
	267, 906,
	268, 906,
	269, 906,
	270, 906,
	271, 906,
	272, 906,
	273, 906,
	274, 906,
	275, 906,
	277, 906,
	278, 906,
	279, 906,
	280, 906,
	281, 906,
	283, 906,
	284, 906,
	285, 906,
	286, 906,
	287, 906,
	288, 906,
	289, 906,
	291, 906,
	292, 906,
	293, 906,
	294, 906,
	295, 906,
	296, 906,
	297, 906,
	298, 906,
	300, 906,
	301, 906,
	302, 906,
	303, 906,
	304, 906,
	305, 906,
	306, 906,
	308, 906,
	309, 906,
	310, 906,
	311, 906,
	312, 906,
	313, 906,
	314, 906,
	315, 906,
	316, 906,
	317, 906,
	318, 906,
	319, 906,
	320, 906,
	321, 906,
	322, 906,
	323, 906,
	324, 906,
	325, 906,
	326, 906,
	328, 906,
	329, 906,
	330, 906,
	331, 906,
	332, 906,
	333, 906,
	334, 906,
	335, 906,
	336, 906,
	337, 906,
	338, 906,
	339, 906,
	341, 906,
	342, 906,
	344, 906,
	345, 906,
	346, 906,
	347, 906,
	348, 906,
	349, 906,
	350, 906,
	351, 906,
	352, 906,
	353, 906,
	355, 906,
	356, 906,
	357, 906,
	358, 906,
	361, 906,
	362, 906,
	363, 906,
	364, 906,
	365, 906,
	366, 906,
	367, 906,
	369, 906,
	370, 906,
	373, 906,
	374, 906,
	375, 906,
	376, 906,
	377, 906,
	378, 906,
	380, 906,
	381, 906,
	382, 906,
	383, 906,
	384, 906,
	385, 906,
	387, 906,
	388, 906,
	389, 906,
	394, 906,
	395, 906,
	396, 906,
	397, 906,
	398, 906,
	399, 906,
	400, 906,
	408, 906,
	413, 906,
	414, 906,
	415, 906,
	422, 906,
	428, 906,
	-2, 0,
	-1, 174,
	1, 57,
	426, 57,
	-2, 897,
	-1, 207,
	424, 1483,
	427, 1483,
	-2, 591,
	-1, 208,
	424, 1485,
	427, 1485,
	-2, 592,
	-1, 209,
	424, 1484,
	427, 1484,
	-2, 593,
	-1, 210,
	427, 1436,
	-2, 594,
	-1, 623,
	143, 1601,
	359, 1601,
	405, 1601,
	424, 1601,
	-2, 0,
	-1, 624,
	143, 1523,
	359, 1523,
	405, 1523,
	424, 1523,
	-2, 0,
	-1, 626,
	143, 1675,
	359, 1675,
	405, 1675,
	424, 1675,
	-2, 0,
	-1, 628,
	143, 1704,
	359, 1704,
	405, 1704,
	424, 1704,
	-2, 0,
	-1, 635,
	143, 1606,
	359, 1606,
	405, 1606,
	424, 1606,
	-2, 425,
	-1, 668,
	1, 521,
	421, 521,
	423, 521,
	425, 521,
	426, 521,
	-2, 0,
	-1, 669,
	1, 590,
	140, 590,
	421, 590,
	423, 590,
	425, 590,
	426, 590,
	-2, 0,
	-1, 675,
	1, 535,
	421, 535,
	423, 535,
	425, 535,
	426, 535,
	-2, 0,
	-1, 677,
	1, 539,
	421, 539,
	423, 539,
	425, 539,
	426, 539,
	-2, 0,
	-1, 679,
	1, 549,
	421, 549,
	423, 549,
	425, 549,
	426, 549,
	-2, 0,
	-1, 680,
	1, 555,
	421, 555,
	423, 555,
	425, 555,
	426, 555,
	-2, 0,
	-1, 681,
	1, 558,
	421, 558,
	423, 558,
	425, 558,
	426, 558,
	-2, 0,
	-1, 685,
	1, 572,
	421, 572,
	423, 572,
	425, 572,
	426, 572,
	-2, 0,
	-1, 686,
	1, 574,
	421, 574,
	423, 574,
	425, 574,
	426, 574,
	-2, 0,
	-1, 714,
	127, 910,
	209, 910,
	238, 910,
	-2, 866,
	-1, 722,
	127, 909,
	209, 909,
	238, 909,
	-2, 864,
	-1, 749,
	422, 1780,
	-2, 1198,
	-1, 750,
	422, 1781,
	-2, 1199,
	-1, 775,
	422, 1477,
	-2, 1468,
	-1, 781,
	5, 1032,
	-2, 1513,
	-1, 782,
	5, 1033,
	-2, 1518,
	-1, 783,
	5, 1034,
	-2, 1517,
	-1, 784,
	5, 1035,
	-2, 1700,
	-1, 785,
	5, 1036,
	-2, 1608,
	-1, 786,
	5, 1037,
	-2, 1668,
	-1, 787,
	5, 1038,
	-2, 1670,
	-1, 788,
	5, 1039,
	-2, 1671,
	-1, 789,
	5, 1040,
	-2, 1672,
	-1, 790,
	5, 1041,
	-2, 1680,
	-1, 791,
	5, 1042,
	-2, 1712,
	-1, 792,
	5, 1043,
	-2, 1577,
	-1, 793,
	5, 1044,
	-2, 1512,
	-1, 794,
	5, 1045,
	-2, 1616,
	-1, 795,
	5, 1046,
	-2, 1617,
	-1, 796,
	5, 1047,
	-2, 1581,
	-1, 797,
	5, 1048,
	422, 1492,
	-2, 1483,
	-1, 798,
	5, 1096,
	422, 1096,
	-2, 1747,
	-1, 803,
	422, 1493,
	-2, 1484,
	-1, 805,
	5, 1052,
	-2, 1745,
	-1, 806,
	5, 1053,
	-2, 1580,
	-1, 807,
	5, 1054,
	-2, 1582,
	-1, 808,
	5, 1055,
	-2, 1583,
	-1, 809,
	5, 1056,
	-2, 1584,
	-1, 810,
	5, 1057,
	-2, 1746,
	-1, 811,
	5, 1058,
	-2, 1758,
	-1, 812,
	5, 1059,
	-2, 1727,
	-1, 813,
	5, 1060,
	-2, 1756,
	-1, 814,
	5, 1061,
	-2, 1564,
	-1, 815,
	5, 1062,
	-2, 1565,
	-1, 816,
	5, 1076,
	-2, 1739,
	-1, 818,
	5, 1051,
	-2, 1735,
	-1, 819,
	5, 1051,
	-2, 1734,
	-1, 820,
	5, 1051,
	-2, 1751,
	-1, 821,
	5, 1068,
	-2, 1729,
	-1, 822,
	5, 1069,
	-2, 1514,
	-1, 823,
	5, 1086,
	-2, 1728,
	-1, 825,
	5, 1087,
	-2, 1542,
	-1, 826,
	5, 1088,
	-2, 1760,
	-1, 827,
	5, 1090,
	-2, 1761,
	-1, 828,
	5, 1092,
	-2, 1762,
	-1, 829,
	5, 1094,
	-2, 1702,
	-1, 830,
	5, 1020,
	-2, 1590,
	-1, 831,
	5, 1021,
	-2, 1591,
	-1, 851,
	5, 1084,
	-2, 1690,
	-1, 868,
	5, 1086,
	-2, 1731,
	-1, 869,
	5, 1086,
	-2, 1730,
	-1, 870,
	5, 1083,
	-2, 1766,
	-1, 931,
	422, 1492,
	-2, 1483,
	-1, 946,
	283, 1465,
	415, 1465,
	-2, 1464,
	-1, 1095,
	257, 895,
	-2, 717,
	-1, 1104,
	241, 1487,
	-2, 0,
	-1, 1147,
	1, 292,
	421, 292,
	425, 292,
	426, 292,
	-2, 869,
	-1, 1150,
	4, 1765,
	10, 1765,
	11, 1765,
	13, 1765,
	14, 1765,
	15, 1765,
	16, 1765,
	17, 1765,
	18, 1765,
	20, 1765,
	21, 1765,
	22, 1765,
	23, 1765,
	25, 1765,
	28, 1765,
	30, 1765,
	32, 1765,
	35, 1765,
	36, 1765,
	37, 1765,
	38, 1765,
	39, 1765,
	40, 1765,
	41, 1765,
	42, 1765,
	43, 1765,
	44, 1765,
	46, 1765,
	47, 1765,
	48, 1765,
	49, 1765,
	50, 1765,
	51, 1765,
	52, 1765,
	55, 1765,
	56, 1765,
	57, 1765,
	58, 1765,
	60, 1765,
	61, 1765,
	62, 1765,
	65, 1765,
	66, 1765,
	67, 1765,
	68, 1765,
	69, 1765,
	70, 1765,
	71, 1765,
	72, 1765,
	73, 1765,
	74, 1765,
	76, 1765,
	77, 1765,
	78, 1765,
	79, 1765,
	81, 1765,
	82, 1765,
	83, 1765,
	91, 1765,
	92, 1765,
	93, 1765,
	94, 1765,
	95, 1765,
	96, 1765,
	97, 1765,
	98, 1765,
	100, 1765,
	102, 1765,
	104, 1765,
	107, 1765,
	108, 1765,
	110, 1765,
	111, 1765,
	113, 1765,
	115, 1765,
	116, 1765,
	117, 1765,
	118, 1765,
	119, 1765,
	120, 1765,
	121, 1765,
	122, 1765,
	123, 1765,
	124, 1765,
	128, 1765,
	129, 1765,
	130, 1765,
	131, 1765,
	132, 1765,
	133, 1765,
	134, 1765,
	135, 1765,
	136, 1765,
	137, 1765,
	138, 1765,
	139, 1765,
	141, 1765,
	144, 1765,
	145, 1765,
	147, 1765,
	148, 1765,
	150, 1765,
	152, 1765,
	153, 1765,
	154, 1765,
	155, 1765,
	156, 1765,
	157, 1765,
	158, 1765,
	159, 1765,
	160, 1765,
	161, 1765,
	162, 1765,
	163, 1765,
	164, 1765,
	165, 1765,
	166, 1765,
	167, 1765,
	169, 1765,
	170, 1765,
	171, 1765,
	173, 1765,
	174, 1765,
	175, 1765,
	176, 1765,
	177, 1765,
	178, 1765,
	179, 1765,
	180, 1765,
	181, 1765,
	183, 1765,
	185, 1765,
	186, 1765,
	187, 1765,
	188, 1765,
	189, 1765,
	190, 1765,
	191, 1765,
	192, 1765,
	193, 1765,
	194, 1765,
	195, 1765,
	196, 1765,
	197, 1765,
	198, 1765,
	200, 1765,
	201, 1765,
	203, 1765,
	204, 1765,
	205, 1765,
	206, 1765,
	207, 1765,
	208, 1765,
	210, 1765,
	211, 1765,
	214, 1765,
	215, 1765,
	216, 1765,
	219, 1765,
	220, 1765,
	221, 1765,
	222, 1765,
	223, 1765,
	224, 1765,
	225, 1765,
	226, 1765,
	227, 1765,
	228, 1765,
	231, 1765,
	233, 1765,
	234, 1765,
	235, 1765,
	236, 1765,
	237, 1765,
	239, 1765,
	240, 1765,
	243, 1765,
	244, 1765,
	245, 1765,
	247, 1765,
	248, 1765,
	250, 1765,
	252, 1765,
	253, 1765,
	254, 1765,
	255, 1765,
	256, 1765,
	257, 1765,
	258, 1765,
	259, 1765,
	261, 1765,
	262, 1765,
	263, 1765,
	264, 1765,
	265, 1765,
	267, 1765,
	268, 1765,
	269, 1765,
	270, 1765,
	271, 1765,
	272, 1765,
	273, 1765,
	274, 1765,
	275, 1765,
	277, 1765,
	278, 1765,
	279, 1765,
	280, 1765,
	281, 1765,
	282, 1765,
	283, 1765,
	284, 1765,
	285, 1765,
	286, 1765,
	287, 1765,
	288, 1765,
	289, 1765,
	291, 1765,
	292, 1765,
	293, 1765,
	294, 1765,
	295, 1765,
	296, 1765,
	297, 1765,
	298, 1765,
	299, 1765,
	300, 1765,
	301, 1765,
	302, 1765,
	303, 1765,
	304, 1765,
	305, 1765,
	306, 1765,
	308, 1765,
	309, 1765,
	310, 1765,
	311, 1765,
	312, 1765,
	313, 1765,
	314, 1765,
	315, 1765,
	316, 1765,
	318, 1765,
	319, 1765,
	320, 1765,
	321, 1765,
	322, 1765,
	323, 1765,
	324, 1765,
	325, 1765,
	326, 1765,
	328, 1765,
	329, 1765,
	330, 1765,
	331, 1765,
	332, 1765,
	333, 1765,
	334, 1765,
	335, 1765,
	336, 1765,
	337, 1765,
	338, 1765,
	339, 1765,
	341, 1765,
	342, 1765,
	344, 1765,
	345, 1765,
	346, 1765,
	347, 1765,
	348, 1765,
	349, 1765,
	350, 1765,
	351, 1765,
	352, 1765,
	353, 1765,
	355, 1765,
	356, 1765,
	357, 1765,
	358, 1765,
	361, 1765,
	362, 1765,
	363, 1765,
	364, 1765,
	366, 1765,
	367, 1765,
	369, 1765,
	370, 1765,
	373, 1765,
	374, 1765,
	375, 1765,
	376, 1765,
	378, 1765,
	380, 1765,
	381, 1765,
	382, 1765,
	383, 1765,
	384, 1765,
	385, 1765,
	387, 1765,
	388, 1765,
	389, 1765,
	394, 1765,
	395, 1765,
	396, 1765,
	397, 1765,
	398, 1765,
	399, 1765,
	400, 1765,
	401, 1765,
	403, 1765,
	404, 1765,
	405, 1765,
	406, 1765,
	407, 1765,
	408, 1765,
	410, 1765,
	411, 1765,
	412, 1765,
	413, 1765,
	414, 1765,
	415, 1765,
	416, 1765,
	417, 1765,
	418, 1765,
	420, 1765,
	423, 1765,
	424, 1765,
	427, 1765,
	428, 1765,
	-2, 0,
	-1, 1169,
	143, 1675,
	359, 1675,
	405, 1675,
	424, 1675,
	-2, 0,
	-1, 1198,
	143, 1704,
	359, 1704,
	405, 1704,
	424, 1704,
	-2, 0,
	-1, 1199,
	188, 805,
	267, 805,
	272, 805,
	-2, 412,
	-1, 1270,
	1, 1719,
	421, 1719,
	423, 1719,
	424, 1719,
	425, 1719,
	426, 1719,
	-2, 570,
	-1, 1271,
	1, 1673,
	421, 1673,
	423, 1673,
	424, 1673,
	425, 1673,
	426, 1673,
	-2, 571,
	-1, 1281,
	127, 909,
	209, 909,
	238, 909,
	-2, 867,
	-1, 1365,
	114, 871,
	127, 871,
	182, 871,
	209, 871,
	238, 871,
	246, 871,
	371, 871,
	-2, 1251,
	-1, 1419,
	423, 1371,
	-2, 0,
	-1, 1423,
	188, 805,
	267, 805,
	272, 805,
	-2, 800,
	-1, 1457,
	114, 871,
	127, 871,
	182, 871,
	209, 871,
	238, 871,
	246, 871,
	371, 871,
	-2, 979,
	-1, 1664,
	188, 805,
	267, 805,
	272, 805,
	-2, 414,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1131,
	-1, 1771,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1132,
	-1, 1772,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1133,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1134,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1135,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1136,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1137,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1138,
	-1, 1789,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1150,
	-1, 1790,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1151,
	-1, 1791,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	407, 0,
	-2, 1152,
	-1, 1794,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1157,
	-1, 1800,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1161,
	-1, 1802,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1169,
	-1, 1803,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1170,
	-1, 1804,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1171,
	-1, 1805,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1172,
	-1, 1891,
	5, 1048,
	143, 1382,
	422, 1492,
	-2, 1483,
	-1, 1892,
	143, 1383,
	-2, 1723,
	-1, 1893,
	143, 1384,
	-2, 1605,
	-1, 1894,
	143, 1385,
	-2, 1543,
	-1, 1895,
	143, 1386,
	-2, 1572,
	-1, 1896,
	143, 1387,
	-2, 1604,
	-1, 1897,
	143, 1388,
	-2, 1667,
	-1, 1966,
	1, 980,
	81, 980,
	114, 980,
	127, 980,
	144, 980,
	149, 980,
	151, 980,
	173, 980,
	182, 980,
	191, 980,
	205, 980,
	209, 980,
	224, 980,
	238, 980,
	241, 980,
	246, 980,
	290, 980,
	292, 980,
	371, 980,
	379, 980,
	391, 980,
	392, 980,
	402, 980,
	421, 980,
	423, 980,
	425, 980,
	426, 980,
	427, 980,
	-2, 979,
	-1, 1971,
	422, 1469,
	-2, 1481,
	-1, 2055,
	423, 1441,
	427, 1441,
	-2, 1457,
	-1, 2181,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1159,
	-1, 2182,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1163,
	-1, 2188,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1165,
	-1, 2421,
	257, 895,
	-2, 717,
	-1, 2489,
	188, 805,
	267, 805,
	272, 805,
	-2, 411,
	-1, 2507,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1167,
	-1, 2514,
	186, 0,
	187, 0,
	231, 0,
	-2, 1186,
	-1, 2575,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1216,
	-1, 2576,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1217,
	-1, 2577,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1218,
	-1, 2581,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1222,
	-1, 2582,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1223,
	-1, 2583,
	13, 0,
	14, 0,
	15, 0,
	403, 0,
	404, 0,
	405, 0,
	-2, 1224,
	-1, 2625,
	422, 1470,
	-2, 1482,
	-1, 2739,
	186, 0,
	187, 0,
	231, 0,
	-2, 1187,
	-1, 2742,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1190,
	-1, 2743,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1192,
	-1, 2888,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1191,
	-1, 2889,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1193,
	-1, 2899,
	186, 0,
	-2, 1225,
	-1, 2987,
	186, 0,
	-2, 1226,
	-1, 3081,
	38, 0,
	161, 0,
	208, 0,
	322, 0,
	400, 0,
	408, 0,
	-2, 1726,
}

const sqlPrivate = 57344

const sqlLast = 58085

var sqlAct = [...]int{

	803, 2670, 3080, 2927, 1926, 3089, 2839, 3143, 2082, 3060,
	3058, 3057, 3090, 3045, 3091, 2111, 2545, 2916, 2991, 2090,
	2854, 1757, 1079, 3079, 1137, 2436, 2878, 950, 2174, 2682,
	2687, 2795, 2810, 1053, 1452, 2428, 723, 2210, 2635, 1594,
	1817, 209, 2430, 1958, 2903, 1284, 498, 2459, 2692, 2208,
	824, 2461, 2441, 498, 1450, 2079, 2057, 2634, 2336, 1595,
	498, 2287, 2053, 498, 498, 2301, 498, 209, 2773, 498,
	498, 1101, 2325, 1133, 493, 966, 498, 943, 1431, 775,
	1543, 2091, 591, 1542, 498, 960, 1539, 2056, 1983, 2312,
	1551, 1959, 1564, 1748, 1374, 1548, 1489, 2038, 548, 1954,
	2598, 2992, 731, 128, 1829, 2286, 1849, 1377, 1743, 1974,
	2170, 2440, 73, 1423, 544, 1505, 1961, 2403, 1511, 799,
	1540, 1470, 1432, 1468, 1855, 1814, 2012, 2011, 924, 1201,
	1689, 2840, 916, 2039, 1411, 1843, 2054, 583, 1923, 1387,
	1130, 1120, 2084, 952, 2060, 210, 1148, 2636, 919, 1460,
	211, 1946, 1441, 1887, 1285, 495, 1360, 1283, 1931, 633,
	898, 205, 763, 128, 1688, 1146, 498, 498, 762, 586,
	1830, 627, 1558, 722, 613, 1117, 541, 1057, 494, 1481,
	134, 921, 598, 660, 1289, 2614, 1422, 896, 2615, 2083,
	2203, 3170, 1566, 1566, 1566, 1940, 478, 1451, 498, 498,
	498, 955, 498, 498, 969, 969, 606, 2112, 135, 2502,
	1514, 3164, 2040, 498, 498, 1940, 2040, 3163, 802, 481,
	727, 1940, 478, 3140, 1528, 2447, 3137, 2809, 600, 3115,
	1520, 3109, 761, 2809, 801, 1940, 3108, 2601, 3105, 3102,
	1940, 1578, 3106, 3103, 3099, 481, 3077, 3076, 1520, 728,
	1520, 1520, 3075, 930, 3074, 3040, 1578, 3027, 1578, 2124,
	3020, 1520, 3018, 3016, 2809, 727, 2809, 2809, 2989, 737,
	2479, 2971, 2124, 2448, 946, 2708, 963, 128, 2416, 1940,
	2961, 2956, 899, 899, 2809, 1520, 2343, 2954, 2945, 2944,
	2937, 2809, 1520, 1520, 1520, 2936, 2909, 2890, 2834, 2809,
	1520, 2124, 1940, 2830, 2808, 1933, 2741, 1940, 2809, 715,
	2124, 2706, 2698, 1078, 1072, 2699, 2699, 3041, 2620, 1300,
	1301, 732, 2621, 913, 2610, 2604, 1172, 2222, 2611, 1940,
	936, 940, 945, 2223, 2523, 2518, 2469, 714, 1520, 1940,
	2408, 2298, 2254, 2253, 1303, 1940, 1940, 1940, 2249, 2234,
	2114, 2142, 1940, 2235, 900, 1940, 2123, 2110, 1059, 1184,
	2124, 1583, 2107, 1058, 2975, 545, 1940, 1578, 478, 2049,
	1939, 1302, 1520, 1520, 1940, 1300, 1301, 2601, 1333, 1334,
	1335, 1343, 1344, 1345, 1520, 1582, 1932, 1667, 576, 1583,
	547, 481, 927, 1336, 1173, 902, 2708, 903, 2027, 40,
	1303, 1940, 1972, 1349, 2408, 171, 2173, 2153, 926, 1519,
	1427, 1834, 1056, 174, 44, 2449, 1168, 1167, 1166, 1165,
	1164, 2259, 2260, 1163, 2277, 2278, 2279, 1302, 1567, 1567,
	1567, 1162, 1161, 1160, 2450, 1322, 1159, 1158, 1060, 2737,
	1157, 173, 1319, 575, 3096, 1156, 2209, 1308, 2259, 2260,
	1155, 171, 1154, 1153, 1152, 904, 901, 2259, 2260, 721,
	720, 719, 718, 717, 713, 712, 711, 710, 709, 1077,
	1071, 577, 708, 707, 1330, 1331, 1332, 1300, 1301, 59,
	579, 2274, 172, 706, 60, 1686, 705, 173, 704, 703,
	699, 165, 698, 1325, 1326, 1327, 1328, 697, 658, 166,
	657, 656, 1303, 1308, 655, 1846, 654, 498, 498, 653,
	498, 955, 955, 498, 652, 651, 498, 650, 63, 498,
	136, 649, 648, 2788, 1323, 498, 1340, 1350, 172, 1302,
	1330, 1331, 1332, 647, 646, 498, 498, 498, 498, 498,
	955, 955, 645, 2259, 2260, 644, 643, 955, 642, 2265,
	641, 1346, 1347, 640, 1173, 1965, 760, 2447, 639, 1317,
	1318, 638, 1520, 1847, 637, 1141, 136, 1574, 1565, 1727,
	1300, 1301, 622, 1338, 621, 620, 2265, 576, 619, 498,
	1323, 498, 618, 617, 1094, 2265, 532, 1091, 40, 1932,
	531, 504, 503, 498, 502, 1303, 1348, 2280, 484, 483,
	482, 1106, 195, 44, 194, 1308, 193, 1375, 1324, 192,
	1337, 191, 190, 189, 188, 187, 498, 186, 171, 171,
	185, 64, 1302, 184, 1134, 576, 2275, 498, 1848, 1845,
	183, 182, 575, 181, 180, 179, 40, 178, 177, 2259,
	2260, 1878, 176, 1173, 175, 2752, 2700, 1329, 2618, 137,
	66, 44, 67, 2275, 173, 173, 2339, 1119, 1375, 728,
	577, 2228, 2275, 1170, 1324, 955, 2205, 2162, 59, 579,
	171, 2265, 2050, 60, 2043, 1876, 1874, 1124, 1127, 1692,
	575, 578, 1872, 1870, 108, 498, 2087, 1341, 1467, 1381,
	1149, 1215, 1453, 1081, 1062, 172, 172, 1957, 1308, 2274,
	3078, 498, 2982, 2978, 165, 165, 173, 63, 577, 2957,
	2276, 1066, 166, 166, 1296, 1850, 59, 579, 2926, 2976,
	2876, 60, 1304, 1305, 1306, 1307, 1309, 1310, 2872, 2772,
	928, 730, 2862, 136, 136, 2411, 1591, 2276, 2771, 2759,
	2758, 2757, 1199, 2756, 2750, 2749, 2276, 172, 2748, 2747,
	2720, 1282, 1281, 2718, 2624, 63, 165, 2595, 2594, 2593,
	1368, 2525, 1209, 2407, 166, 1339, 1213, 2265, 1314, 1315,
	1321, 1320, 1316, 1342, 2334, 1313, 1311, 1312, 1304, 1305,
	1306, 1307, 1309, 1310, 2294, 546, 912, 2285, 2762, 2258,
	2255, 2252, 2761, 2250, 2233, 2215, 2214, 2204, 1196, 1590,
	2115, 2030, 1966, 2259, 2260, 1296, 1295, 1844, 1825, 3168,
	64, 1525, 1523, 3151, 2271, 2272, 2273, 1378, 3150, 1363,
	1373, 2270, 2268, 2269, 2261, 2262, 2263, 2264, 2266, 2267,
	1080, 2129, 2547, 1280, 3069, 3064, 3022, 3013, 137, 66,
	3012, 67, 3009, 3008, 2275, 1216, 3003, 3000, 2270, 2268,
	2269, 2261, 2262, 2263, 2264, 2266, 2267, 2974, 64, 171,
	2261, 2262, 2263, 2264, 2266, 2267, 2973, 1819, 728, 2994,
	578, 2922, 2901, 108, 2848, 2259, 2260, 2844, 2842, 2787,
	1304, 1305, 1306, 1307, 1309, 1310, 137, 66, 2770, 67,
	2709, 1687, 2013, 498, 171, 173, 2685, 2677, 498, 2676,
	2169, 967, 1054, 2674, 2652, 171, 2651, 171, 2641, 2000,
	1292, 1293, 715, 2861, 2640, 2606, 1438, 1297, 578, 2513,
	2475, 108, 1429, 2473, 498, 2467, 2392, 2375, 2276, 2353,
	173, 2265, 2352, 1826, 2297, 2232, 172, 2231, 2220, 1364,
	714, 173, 2197, 173, 1388, 165, 2261, 2262, 2263, 2264,
	2266, 2267, 1385, 166, 2131, 2875, 1461, 1969, 1391, 1389,
	1390, 1951, 1938, 1868, 1534, 1300, 1301, 1466, 1430, 1421,
	1420, 172, 1419, 1418, 136, 1306, 1307, 1309, 1310, 1417,
	165, 1416, 172, 1415, 172, 1435, 1436, 1414, 166, 2353,
	1303, 165, 1413, 165, 1410, 1409, 1408, 1407, 930, 166,
	930, 166, 1406, 2265, 1412, 1405, 1404, 1403, 1402, 2086,
	1448, 1401, 1400, 171, 899, 1399, 171, 1302, 128, 1398,
	136, 1370, 136, 1363, 1195, 1179, 1174, 1151, 1145, 2744,
	1449, 2717, 2613, 728, 2609, 2221, 171, 1952, 2126, 2270,
	2268, 2269, 2261, 2262, 2263, 2264, 2266, 2267, 1378, 173,
	2471, 1361, 173, 2259, 2260, 1462, 955, 498, 2431, 2867,
	2711, 2040, 1877, 969, 1488, 2710, 2616, 1426, 1476, 1458,
	1424, 1453, 173, 1395, 2318, 1190, 1212, 2141, 1592, 1396,
	2275, 498, 969, 498, 498, 1428, 1686, 1278, 1393, 1686,
	172, 209, 1383, 172, 1394, 1512, 1875, 1873, 1846, 165,
	1455, 2979, 165, 1871, 1869, 498, 498, 166, 1535, 2950,
	166, 1686, 498, 172, 498, 1673, 498, 2977, 1405, 1405,
	498, 2396, 165, 2140, 1547, 1482, 2015, 2391, 136, 2386,
	166, 136, 2374, 2239, 2238, 2237, 2236, 927, 2925, 927,
	2179, 1660, 1208, 1507, 2650, 894, 2112, 1544, 2481, 2385,
	1581, 136, 955, 926, 1501, 926, 1847, 2904, 2083, 2549,
	1856, 2226, 3097, 1533, 2276, 1392, 3107, 2630, 1220, 3104,
	498, 955, 209, 498, 498, 955, 2443, 3054, 2683, 895,
	2117, 955, 200, 540, 209, 498, 3026, 1555, 498, 498,
	511, 3130, 726, 2822, 498, 890, 1254, 2491, 888, 2143,
	1662, 1553, 1059, 1531, 3167, 1650, 911, 1058, 2263, 2264,
	2266, 2267, 478, 2949, 3098, 3131, 969, 1569, 2948, 2947,
	1571, 1848, 1845, 1573, 1985, 955, 955, 1576, 498, 2946,
	1619, 2664, 2838, 498, 1518, 481, 1562, 1372, 209, 498,
	2659, 498, 886, 498, 1119, 498, 478, 498, 1718, 884,
	881, 2658, 1538, 1976, 521, 2627, 1716, 498, 2626, 498,
	725, 1976, 1677, 1676, 2655, 1686, 1683, 539, 498, 481,
	1674, 2219, 1975, 1654, 510, 1253, 2268, 2269, 2261, 2262,
	2263, 2264, 2266, 2267, 2218, 2217, 2216, 1557, 1560, 2183,
	2113, 2033, 1210, 2026, 2022, 1149, 741, 2003, 1471, 498,
	1801, 1472, 1425, 969, 1055, 1867, 1218, 1988, 1850, 1483,
	2080, 1186, 1664, 1866, 1865, 1864, 1759, 1584, 701, 569,
	28, 2981, 2494, 2037, 727, 747, 522, 478, 1725, 1694,
	3025, 1730, 1724, 1586, 1083, 1685, 1480, 2472, 1211, 478,
	2669, 1196, 1600, 1588, 1816, 1651, 2048, 1995, 611, 612,
	481, 1619, 1619, 1661, 3072, 1994, 2146, 1680, 1484, 1485,
	1749, 1756, 481, 196, 1561, 612, 1249, 2532, 2148, 1831,
	1816, 1682, 1726, 1310, 1368, 1835, 1690, 1678, 2496, 2495,
	2929, 1265, 969, 1831, 1473, 2159, 1823, 1698, 1140, 1299,
	1701, 1821, 1850, 478, 2535, 2439, 1475, 1587, 2149, 1707,
	1844, 1228, 1187, 1194, 3122, 3037, 2171, 2172, 2643, 1652,
	2147, 2438, 1597, 2382, 1250, 1886, 481, 2377, 1890, 1890,
	1900, 1902, 1907, 1462, 1831, 1500, 498, 2127, 498, 1486,
	2818, 1987, 2533, 3038, 1217, 1930, 689, 1503, 1252, 1729,
	1728, 1620, 1856, 3093, 2438, 3153, 1477, 3005, 2492, 724,
	1189, 505, 969, 498, 201, 1386, 736, 2660, 1747, 2071,
	2880, 2267, 498, 1600, 1600, 498, 2023, 1909, 969, 1681,
	715, 1970, 498, 715, 715, 928, 728, 928, 2259, 2260,
	498, 1850, 728, 1863, 1277, 1953, 1853, 3130, 498, 1963,
	1964, 1478, 1687, 2013, 28, 1687, 2013, 2019, 1739, 2490,
	498, 1740, 1741, 955, 508, 1967, 3121, 1723, 2884, 530,
	1358, 2483, 2895, 508, 498, 969, 1827, 1687, 2013, 1850,
	498, 498, 930, 1566, 201, 690, 524, 523, 1977, 202,
	1478, 525, 1478, 1597, 1597, 498, 533, 1986, 498, 930,
	2952, 1619, 515, 1471, 899, 1219, 1472, 1665, 2653, 1851,
	2006, 515, 892, 2879, 3094, 891, 1973, 2395, 882, 2371,
	2816, 1205, 498, 538, 498, 2230, 498, 1262, 1898, 498,
	1947, 498, 728, 498, 946, 498, 498, 2020, 498, 955,
	955, 955, 1989, 1991, 955, 2005, 2486, 2034, 1928, 948,
	1918, 498, 1943, 498, 1936, 1937, 1944, 1948, 1949, 202,
	1927, 1833, 882, 1504, 2105, 2106, 2265, 1717, 1458, 883,
	882, 1962, 1997, 1082, 2035, 1715, 1980, 204, 2644, 1981,
	2004, 1440, 3095, 2014, 2016, 2017, 2018, 538, 3146, 1473,
	3120, 203, 2021, 2712, 514, 727, 1200, 2005, 537, 2930,
	1206, 1475, 2194, 514, 2881, 1207, 1263, 2722, 2101, 1185,
	2185, 2365, 1188, 1600, 498, 691, 1236, 1471, 1474, 702,
	1472, 927, 2192, 2103, 2729, 1059, 2132, 1229, 2817, 199,
	2041, 1687, 1684, 2116, 2485, 478, 1815, 926, 927, 1812,
	2096, 3154, 1981, 2275, 1444, 128, 2364, 204, 2482, 1822,
	1288, 1477, 2119, 969, 926, 498, 128, 2108, 481, 1810,
	3092, 203, 537, 2089, 197, 498, 1298, 498, 1700, 2094,
	2098, 1264, 2099, 1447, 2100, 1230, 2102, 3129, 1227, 3127,
	1193, 2853, 2851, 1597, 498, 498, 498, 1149, 498, 2118,
	2109, 1442, 2077, 1205, 2075, 1537, 2128, 1437, 200, 199,
	1981, 1183, 511, 1473, 1798, 1445, 1171, 498, 198, 692,
	501, 511, 2136, 2130, 2137, 1475, 2768, 509, 2189, 1567,
	1521, 2484, 2067, 540, 1443, 2367, 509, 2276, 526, 2190,
	2939, 2885, 2400, 2195, 197, 1389, 1390, 1478, 535, 1529,
	507, 2314, 1412, 1516, 2133, 2369, 2938, 693, 2404, 507,
	1444, 2135, 506, 1287, 2584, 1806, 2144, 2920, 2164, 2997,
	3159, 506, 3144, 1807, 1469, 1477, 1808, 1065, 200, 1070,
	1813, 1076, 1206, 536, 1300, 1301, 527, 1207, 198, 1447,
	1358, 516, 1205, 2629, 2200, 2368, 510, 540, 2349, 2345,
	516, 1368, 1446, 2078, 498, 510, 512, 1945, 2076, 1303,
	2186, 2821, 535, 2212, 2213, 512, 1556, 539, 2820, 1546,
	1672, 1445, 528, 1545, 529, 1541, 1536, 534, 2326, 1735,
	2166, 2168, 2531, 3046, 3145, 1721, 1302, 1796, 1799, 1668,
	1287, 2688, 2855, 2921, 2355, 1286, 2007, 536, 2354, 2177,
	2269, 2261, 2262, 2263, 2264, 2266, 2267, 2769, 689, 1695,
	2315, 1478, 2069, 1942, 3147, 1237, 1941, 2052, 2051, 1095,
	1098, 1206, 2191, 1474, 1288, 725, 1207, 2671, 736, 2409,
	2193, 539, 1670, 1693, 1795, 1105, 1177, 1116, 2585, 2313,
	1104, 534, 604, 1182, 2184, 2586, 1671, 3134, 2806, 2157,
	2296, 2158, 728, 3158, 1114, 969, 597, 2841, 1446, 1809,
	2299, 2918, 1308, 2308, 2327, 2306, 2307, 1811, 2399, 2774,
	1736, 498, 1286, 2850, 498, 2803, 581, 574, 36, 573,
	35, 498, 2599, 1861, 498, 498, 969, 572, 32, 1330,
	1331, 1332, 3136, 2919, 498, 498, 498, 690, 2819, 2225,
	498, 571, 79, 498, 2329, 1275, 2900, 2321, 2767, 2668,
	498, 498, 498, 498, 498, 2804, 3, 2322, 2288, 928,
	1758, 2333, 2008, 2009, 498, 2512, 2458, 2330, 2331, 2251,
	2196, 498, 2134, 930, 2032, 2405, 928, 1474, 2002, 1323,
	2338, 930, 930, 498, 955, 930, 1527, 498, 1797, 1465,
	1276, 1180, 1619, 1259, 969, 2289, 2346, 2161, 498, 2160,
	1257, 2350, 2317, 2156, 969, 1247, 2320, 1714, 2138, 930,
	2323, 969, 2849, 1223, 1704, 2300, 1245, 1243, 2206, 2291,
	2292, 2293, 1653, 498, 1397, 498, 1090, 498, 1860, 3088,
	955, 498, 955, 955, 955, 2376, 498, 2328, 498, 1857,
	2666, 1367, 498, 2303, 2417, 570, 78, 498, 1515, 498,
	1533, 2310, 2311, 3043, 2340, 2316, 498, 1094, 2337, 1115,
	2383, 2792, 485, 1324, 1476, 2648, 2646, 691, 2628, 602,
	603, 2427, 2387, 498, 498, 2445, 1113, 2425, 955, 2433,
	2434, 2370, 2342, 595, 596, 2799, 1274, 1981, 2800, 1476,
	2378, 2466, 36, 2393, 35, 498, 2081, 2356, 580, 2359,
	1241, 2381, 32, 2379, 1600, 1094, 2388, 2380, 2419, 2477,
	2394, 1490, 927, 567, 23, 2413, 79, 1239, 2410, 1512,
	927, 927, 2802, 498, 927, 1971, 1512, 2432, 926, 1494,
	2406, 934, 2805, 880, 1258, 1619, 926, 926, 498, 2073,
	926, 1256, 1233, 2072, 2470, 1713, 1246, 2070, 927, 800,
	2066, 2452, 2453, 2454, 1580, 2455, 2456, 1244, 1242, 728,
	1579, 692, 568, 24, 926, 2444, 969, 2451, 566, 30,
	1491, 565, 21, 128, 1597, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 1112, 1577, 2457, 2476, 1575, 1572, 969,
	479, 498, 1570, 1568, 2442, 496, 1526, 2515, 1524, 693,
	1513, 1502, 517, 2442, 563, 20, 564, 19, 1619, 543,
	1499, 1440, 587, 594, 1487, 543, 479, 2489, 587, 609,
	78, 2527, 2528, 2529, 1479, 616, 553, 15, 2801, 2351,
	2550, 2487, 2488, 636, 2540, 1495, 2429, 2357, 2498, 2361,
	2362, 1240, 2500, 2966, 2493, 554, 16, 1600, 2175, 486,
	487, 3131, 1619, 1619, 2874, 2873, 562, 57, 1238, 1691,
	2596, 1749, 2554, 1290, 2968, 1993, 2697, 1508, 2519, 2836,
	1619, 1619, 2036, 2031, 1444, 885, 887, 908, 1976, 1749,
	2564, 2025, 498, 1232, 2534, 2536, 2537, 3007, 23, 1992,
	2551, 2539, 2546, 1976, 498, 2553, 1496, 1497, 2464, 909,
	969, 1619, 2139, 1447, 1990, 1492, 561, 56, 2588, 2001,
	2592, 2617, 2811, 2563, 1231, 543, 543, 1597, 2176, 2478,
	1600, 1442, 2561, 929, 1111, 2612, 1658, 1659, 489, 488,
	552, 55, 1493, 582, 2984, 1445, 734, 24, 689, 2775,
	2657, 2010, 1996, 30, 1291, 1294, 21, 496, 496, 496,
	2154, 961, 496, 2589, 1443, 930, 2597, 2663, 736, 2600,
	128, 2605, 479, 1061, 1600, 1600, 2028, 2602, 2603, 498,
	498, 1998, 498, 3042, 2667, 490, 491, 498, 2847, 20,
	910, 19, 1600, 1600, 2623, 2619, 969, 2088, 969, 2074,
	1597, 955, 2065, 930, 735, 560, 12, 1929, 2678, 1663,
	2632, 15, 605, 1593, 1517, 3142, 1478, 2465, 498, 1498,
	551, 50, 2647, 1600, 2649, 2701, 558, 47, 2690, 3157,
	16, 1222, 1446, 2694, 1375, 2608, 1221, 690, 955, 498,
	498, 57, 2689, 1510, 1597, 1597, 559, 48, 2005, 2693,
	498, 2654, 2637, 969, 498, 498, 969, 498, 2259, 2260,
	928, 1509, 1597, 1597, 2716, 498, 2672, 2538, 928, 928,
	2673, 2474, 928, 969, 2151, 2681, 2680, 2675, 2152, 1300,
	1301, 550, 49, 2691, 2703, 1300, 1301, 2695, 1506, 2726,
	1862, 56, 1842, 1597, 2745, 2684, 928, 2686, 930, 2702,
	2731, 2530, 557, 7, 927, 2151, 2150, 1373, 556, 6,
	1484, 1485, 1371, 2912, 2865, 55, 555, 38, 498, 2705,
	926, 2714, 2715, 2740, 1300, 1301, 1981, 1273, 2723, 1585,
	2727, 1302, 1261, 1589, 1619, 1260, 1272, 549, 37, 2724,
	2719, 1255, 927, 1251, 1248, 1234, 1192, 1666, 893, 1303,
	700, 2928, 1267, 2645, 3053, 1738, 687, 2363, 926, 1703,
	1235, 1705, 2319, 1950, 3036, 2094, 2753, 691, 2303, 2229,
	2990, 2894, 2732, 1859, 1382, 53, 1302, 498, 770, 850,
	12, 2793, 2631, 1696, 1697, 2059, 2058, 969, 972, 969,
	1675, 774, 1889, 2766, 1750, 50, 777, 498, 498, 498,
	1598, 47, 2305, 780, 779, 778, 1599, 1384, 776, 1596,
	2068, 2092, 498, 678, 1679, 1820, 1854, 498, 2224, 498,
	1379, 48, 498, 498, 498, 498, 498, 752, 1852, 498,
	498, 955, 1178, 2332, 2780, 969, 751, 927, 2324, 955,
	2812, 2777, 2778, 2437, 2622, 2860, 1600, 498, 498, 1734,
	2786, 930, 2167, 926, 1824, 2791, 49, 2782, 1731, 733,
	955, 692, 513, 2837, 2256, 1367, 496, 1089, 2814, 496,
	498, 930, 496, 1144, 2721, 961, 2781, 7, 1109, 498,
	498, 955, 955, 6, 496, 1910, 2783, 2857, 2859, 1915,
	930, 38, 1908, 1904, 496, 496, 496, 496, 961, 693,
	2831, 2856, 2843, 1279, 1094, 1359, 2883, 2832, 2866, 2434,
	2846, 2402, 37, 2852, 1914, 2093, 1597, 2858, 2402, 1214,
	2337, 2776, 2864, 969, 930, 2335, 2446, 2869, 2125, 1742,
	2868, 2886, 907, 906, 2835, 930, 905, 3059, 636, 2637,
	594, 3056, 2882, 1669, 2789, 2145, 1981, 1352, 767, 2304,
	2906, 2412, 496, 1087, 3006, 1351, 889, 2999, 1204, 969,
	1203, 1202, 2348, 498, 2823, 498, 2891, 969, 498, 3152,
	2642, 1999, 2828, 2637, 170, 1191, 498, 167, 169, 168,
	2902, 2398, 969, 82, 2637, 2910, 636, 34, 2915, 33,
	927, 1619, 2907, 2908, 107, 1981, 106, 2029, 105, 104,
	103, 2779, 102, 2933, 101, 100, 926, 99, 98, 2932,
	927, 2934, 97, 96, 2045, 95, 2047, 2442, 2931, 2913,
	94, 93, 498, 92, 498, 91, 926, 955, 90, 927,
	89, 88, 498, 87, 86, 85, 2815, 84, 632, 629,
	81, 80, 928, 1619, 496, 926, 2825, 2826, 2085, 2911,
	2085, 31, 2941, 26, 2964, 969, 111, 112, 2972, 930,
	496, 2024, 25, 927, 2965, 77, 76, 29, 2963, 18,
	2953, 2845, 2955, 2522, 927, 498, 2959, 11, 2970, 926,
	928, 498, 2693, 17, 2790, 2969, 2942, 2943, 2980, 498,
	926, 22, 930, 133, 930, 132, 2543, 131, 930, 3002,
	130, 2983, 2434, 1600, 129, 2824, 2996, 14, 2637, 13,
	1981, 2988, 2829, 126, 127, 125, 2995, 498, 498, 124,
	123, 122, 1619, 498, 2993, 121, 10, 8, 3017, 3019,
	110, 9, 2877, 2480, 955, 70, 71, 2104, 3004, 498,
	27, 2637, 43, 2637, 955, 955, 42, 2637, 498, 41,
	498, 109, 498, 161, 160, 1600, 159, 158, 154, 3039,
	3021, 3023, 153, 157, 155, 3029, 3024, 156, 3030, 3031,
	152, 498, 3032, 1597, 498, 928, 498, 120, 969, 3049,
	163, 162, 150, 147, 146, 149, 151, 3062, 3063, 3065,
	3061, 148, 3066, 145, 3068, 164, 3067, 119, 927, 3055,
	118, 117, 116, 3051, 115, 114, 3073, 2625, 5, 2,
	1, 0, 498, 0, 926, 3071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1597, 0, 0, 0, 3087,
	3086, 927, 3085, 927, 1600, 498, 0, 927, 3112, 0,
	3113, 0, 3111, 498, 0, 3100, 0, 926, 0, 926,
	3070, 2914, 616, 926, 3119, 0, 2967, 543, 0, 498,
	3117, 3118, 3116, 0, 3010, 0, 0, 0, 0, 2806,
	0, 0, 930, 0, 3128, 3126, 3125, 0, 1456, 0,
	929, 1910, 1910, 496, 3132, 3133, 3135, 3061, 0, 3138,
	3139, 0, 0, 0, 0, 3141, 2803, 3114, 0, 2796,
	0, 0, 2259, 2260, 1597, 2277, 2278, 2279, 3149, 3148,
	1914, 1914, 2794, 0, 3155, 3156, 0, 2798, 0, 930,
	2736, 2637, 0, 0, 1439, 3160, 3161, 3162, 928, 0,
	0, 0, 0, 0, 0, 0, 2804, 0, 0, 3165,
	3166, 0, 0, 3169, 0, 0, 0, 3171, 928, 0,
	967, 0, 0, 1054, 0, 0, 0, 0, 0, 0,
	0, 0, 2274, 2797, 0, 0, 0, 928, 2637, 0,
	0, 0, 3033, 0, 3034, 0, 0, 0, 1910, 1910,
	1910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2094, 0, 0, 0, 0, 0, 0, 0, 3050, 0,
	0, 928, 0, 0, 3011, 0, 0, 1914, 1914, 1914,
	0, 927, 928, 0, 0, 0, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 3028, 0, 926, 0, 0,
	2265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1061, 0, 496, 1532, 0, 0, 0, 0, 0, 0,
	479, 0, 2198, 2199, 0, 0, 0, 0, 927, 3110,
	0, 0, 0, 739, 1552, 1552, 2799, 0, 0, 2800,
	0, 496, 0, 496, 926, 496, 0, 0, 2280, 543,
	0, 0, 0, 0, 0, 0, 2785, 0, 2372, 0,
	2373, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2802, 0, 0, 0, 2275, 0, 0,
	0, 0, 0, 2805, 0, 0, 0, 0, 2389, 0,
	2390, 0, 0, 0, 0, 0, 0, 0, 0, 636,
	0, 479, 1061, 587, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 479, 1061, 0, 0, 961, 496, 2282,
	2283, 2284, 0, 636, 0, 2414, 0, 0, 0, 0,
	0, 0, 0, 0, 2423, 0, 0, 0, 0, 928,
	0, 928, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 2384, 0, 0, 0, 0, 636, 0, 0,
	0, 2276, 496, 0, 0, 0, 0, 479, 496, 0,
	496, 0, 496, 0, 496, 0, 496, 0, 0, 2801,
	0, 0, 0, 0, 0, 0, 1719, 0, 1720, 0,
	2892, 0, 0, 0, 0, 0, 0, 496, 2418, 0,
	2420, 2421, 2422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1910, 1910, 0, 0, 0, 2892, 0, 636, 0,
	0, 0, 0, 0, 1758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2468, 0, 0, 1758,
	1914, 1914, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2271, 2272, 2273, 0, 0,
	0, 0, 2270, 2268, 2269, 2261, 2262, 2263, 2264, 2266,
	2267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1910, 1910,
	1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910, 1910,
	1910, 1910, 1910, 1910, 1910, 1910, 1910, 0, 1910, 928,
	0, 0, 1054, 0, 0, 0, 0, 1914, 1914, 1914,
	1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914, 1914,
	1914, 1914, 1914, 1914, 1914, 1914, 0, 1914, 0, 0,
	0, 0, 0, 0, 0, 616, 0, 543, 0, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 543, 1067, 0, 1073, 0, 0, 0, 929,
	0, 543, 2508, 2509, 496, 0, 0, 0, 0, 0,
	0, 1984, 0, 0, 0, 0, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 496, 0, 1758, 0, 0, 0, 479,
	2042, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2055, 0, 0, 1061, 0, 2565,
	2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575,
	2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2120, 2587,
	1176, 1984, 0, 543, 0, 496, 0, 1181, 496, 40,
	496, 0, 496, 0, 496, 496, 0, 961, 0, 0,
	0, 0, 0, 0, 44, 0, 0, 0, 2707, 0,
	594, 0, 1984, 0, 0, 0, 739, 0, 0, 0,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1300, 1301, 2121, 0, 0, 0, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 1349,
	0, 2122, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 0, 0, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1302, 0, 0, 2713, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 0, 496, 0, 0, 2259, 2260, 0,
	2277, 2278, 2279, 0, 1061, 0, 1061, 1353, 1354, 1355,
	1356, 1357, 0, 0, 0, 2517, 0, 0, 0, 0,
	1366, 0, 0, 496, 496, 496, 0, 496, 0, 1325,
	1326, 1327, 1328, 0, 1300, 1301, 0, 0, 1380, 1308,
	0, 0, 0, 0, 0, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2274, 0, 1303,
	0, 0, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	2259, 2260, 0, 2277, 2278, 2279, 0, 0, 0, 1338,
	0, 0, 0, 0, 0, 0, 1323, 0, 2516, 137,
	66, 0, 67, 0, 0, 2265, 0, 0, 2863, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 2259, 2260,
	171, 2277, 2278, 2279, 0, 0, 0, 0, 0, 0,
	0, 578, 499, 0, 108, 0, 0, 0, 0, 2833,
	2274, 0, 1308, 0, 0, 0, 0, 0, 0, 0,
	1433, 1433, 1433, 2280, 1910, 0, 173, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 1330,
	1331, 1332, 0, 208, 0, 0, 0, 0, 2274, 0,
	1324, 0, 2275, 1914, 0, 0, 0, 0, 0, 2870,
	2871, 1910, 0, 0, 0, 0, 0, 172, 0, 208,
	0, 0, 0, 1341, 0, 0, 165, 0, 2265, 0,
	0, 0, 0, 929, 166, 0, 0, 0, 0, 1323,
	1914, 929, 929, 0, 0, 929, 0, 0, 0, 0,
	543, 0, 0, 543, 0, 136, 0, 0, 0, 0,
	543, 0, 0, 543, 543, 0, 2265, 0, 0, 1456,
	0, 0, 0, 496, 1984, 2344, 2280, 2958, 0, 1984,
	0, 0, 2344, 0, 0, 0, 2276, 0, 922, 1984,
	2344, 1984, 2344, 2344, 0, 0, 0, 0, 0, 0,
	0, 1339, 0, 496, 0, 2275, 0, 1910, 0, 1342,
	1532, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	0, 0, 496, 1324, 1300, 1301, 961, 0, 0, 0,
	0, 0, 0, 0, 492, 0, 1914, 496, 0, 0,
	0, 0, 0, 2275, 0, 2899, 0, 0, 0, 1303,
	0, 0, 0, 956, 0, 0, 970, 970, 0, 0,
	0, 0, 1552, 0, 1552, 0, 496, 0, 0, 0,
	496, 0, 0, 0, 0, 496, 1302, 496, 0, 0,
	0, 961, 2923, 0, 0, 0, 1984, 0, 543, 2276,
	2271, 2272, 2273, 0, 0, 1984, 0, 2270, 2268, 2269,
	2261, 2262, 2263, 2264, 2266, 2267, 1300, 1301, 0, 0,
	0, 0, 2462, 1061, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 804, 0, 0, 2276, 0, 0,
	0, 1303, 0, 0, 1061, 0, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1308, 0, 0, 0, 0, 0, 1302, 0,
	0, 0, 2497, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 739, 496, 2987, 1330,
	1331, 1332, 0, 0, 0, 0, 938, 0, 0, 0,
	0, 965, 0, 2271, 2272, 2273, 0, 0, 0, 0,
	2270, 2268, 2269, 2261, 2262, 2263, 2264, 2266, 2267, 2735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 1326, 1327, 1328, 0, 1323,
	2548, 2271, 2272, 2273, 1308, 0, 0, 0, 2270, 2268,
	2269, 2261, 2262, 2263, 2264, 2266, 2267, 0, 0, 0,
	0, 1732, 0, 1737, 0, 0, 0, 0, 0, 1744,
	0, 1330, 1331, 1332, 0, 0, 0, 0, 0, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 0, 1800, 0, 1802, 1803, 1804,
	1805, 1323, 0, 1324, 0, 929, 0, 0, 0, 0,
	0, 543, 0, 0, 0, 957, 1828, 0, 971, 971,
	0, 0, 0, 543, 1366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 956, 956, 0, 0, 0, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 0, 0, 0, 1329, 0,
	0, 0, 1906, 0, 1917, 1919, 1924, 0, 0, 0,
	0, 0, 956, 956, 0, 1324, 0, 0, 0, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 1984, 1552,
	0, 1552, 0, 0, 0, 0, 496, 0, 0, 0,
	0, 0, 0, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1984, 929, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 144, 0,
	0, 0, 0, 39, 0, 0, 0, 0, 594, 594,
	0, 0, 0, 0, 40, 139, 0, 0, 0, 1061,
	0, 0, 0, 961, 496, 0, 496, 0, 2044, 44,
	2046, 0, 0, 0, 496, 1085, 0, 0, 0, 0,
	0, 1103, 0, 0, 46, 141, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 0, 45, 956, 51, 0,
	0, 0, 0, 1123, 1123, 1123, 965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 0, 54, 0, 0, 0, 58, 2754, 0, 0,
	142, 0, 0, 0, 59, 72, 0, 0, 0, 60,
	61, 0, 0, 0, 0, 0, 0, 0, 771, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1175, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	0, 929, 0, 0, 0, 0, 1061, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 1984, 2344, 1984, 74,
	0, 0, 0, 0, 0, 957, 957, 0, 0, 0,
	2639, 1061, 0, 0, 0, 0, 1984, 0, 2344, 0,
	0, 1061, 1061, 496, 1984, 2344, 0, 0, 496, 496,
	0, 0, 0, 0, 957, 957, 0, 0, 0, 0,
	0, 957, 0, 1266, 2639, 0, 1061, 2055, 0, 0,
	0, 0, 0, 0, 0, 2639, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 64, 716, 0, 1984,
	0, 0, 0, 65, 0, 729, 0, 0, 2462, 2462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 137, 66, 0, 67, 0, 68,
	0, 0, 0, 143, 0, 0, 0, 0, 69, 0,
	0, 0, 917, 74, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 0, 108,
	2181, 2182, 0, 0, 0, 0, 2188, 0, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 173, 0, 0, 0, 2201, 0, 0, 0, 957,
	0, 0, 1984, 0, 2344, 0, 0, 2917, 0, 2207,
	0, 0, 2211, 0, 113, 496, 0, 0, 0, 2639,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 2227, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 2240, 0, 0, 0, 0, 0, 166,
	0, 0, 2639, 0, 2639, 0, 0, 0, 2639, 0,
	0, 496, 0, 496, 0, 0, 0, 0, 0, 0,
	136, 1061, 0, 4, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1924, 1924, 1924, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 0, 2548, 2309, 0, 0, 956, 0,
	543, 0, 1463, 0, 0, 970, 0, 0, 2917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 1984, 2344, 0, 0,
	0, 0, 496, 0, 0, 0, 0, 0, 0, 0,
	2366, 0, 0, 0, 0, 0, 0, 0, 2344, 0,
	2259, 2260, 0, 2277, 2278, 2279, 0, 1061, 0, 1061,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3047, 0, 0, 1061, 956, 496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2639, 956, 208, 0, 0, 956, 0, 0,
	2274, 0, 0, 956, 0, 0, 208, 0, 0, 0,
	0, 2548, 0, 0, 0, 0, 0, 0, 2435, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 74, 0,
	74, 0, 0, 0, 1061, 0, 0, 0, 970, 2639,
	0, 1530, 1984, 0, 0, 0, 0, 956, 956, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2917, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 2265, 0,
	0, 0, 1559, 0, 1559, 739, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 739, 0,
	0, 0, 2281, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2499, 0, 0, 0, 1744, 0,
	0, 0, 0, 0, 2503, 2504, 2280, 0, 2507, 0,
	0, 0, 2510, 0, 0, 970, 0, 0, 0, 0,
	0, 2514, 0, 0, 0, 74, 0, 0, 2520, 0,
	0, 0, 74, 0, 2309, 2275, 0, 1656, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 2541, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 2555, 2556,
	0, 2557, 2558, 2559, 0, 0, 2560, 0, 0, 0,
	0, 1702, 2562, 0, 0, 0, 0, 1708, 0, 1709,
	0, 1710, 0, 1711, 970, 1712, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2590, 2591, 0, 1722, 0, 0, 2276,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 2607,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 1349,
	0, 0, 0, 0, 0, 957, 0, 0, 0, 957,
	716, 0, 0, 0, 970, 957, 0, 0, 0, 0,
	0, 0, 0, 1302, 0, 0, 0, 2633, 0, 0,
	970, 1322, 1362, 0, 1365, 0, 0, 0, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2656,
	971, 1376, 0, 0, 1300, 1301, 0, 0, 0, 957,
	957, 2661, 0, 0, 0, 956, 2662, 0, 0, 0,
	0, 2665, 0, 2271, 2272, 2273, 0, 970, 0, 1303,
	2270, 2268, 2269, 2261, 2262, 2263, 2264, 2266, 2267, 1325,
	1326, 1327, 1328, 0, 0, 0, 0, 0, 0, 1308,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 0,
	0, 0, 0, 1433, 1322, 0, 0, 0, 0, 0,
	0, 0, 1340, 1350, 2704, 0, 1330, 1331, 1332, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 956, 956, 956, 0, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 1317, 1318, 2511, 0, 0,
	0, 0, 0, 1968, 0, 0, 0, 0, 0, 1338,
	0, 0, 1325, 1326, 1327, 1328, 1323, 0, 0, 0,
	2733, 2734, 1308, 0, 0, 0, 2738, 2739, 0, 0,
	0, 2742, 2743, 0, 74, 0, 0, 1454, 0, 1457,
	0, 2746, 0, 0, 0, 0, 0, 0, 0, 1330,
	1331, 1332, 965, 0, 0, 0, 971, 2751, 0, 0,
	0, 0, 0, 0, 2755, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 1323,
	1324, 0, 0, 0, 2097, 0, 0, 1123, 0, 1123,
	0, 1123, 0, 965, 965, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2813, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2155, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2887, 2888, 2889, 957, 957, 957, 0, 0, 957, 0,
	0, 0, 2163, 965, 2165, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 2897, 2898, 0, 0, 0,
	0, 0, 0, 1336, 0, 2178, 0, 0, 0, 2905,
	1303, 0, 0, 1349, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 2940, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2951, 0, 0, 0, 0, 0, 2259,
	2260, 0, 2277, 2278, 2279, 0, 0, 971, 970, 0,
	0, 0, 0, 0, 0, 1300, 1301, 0, 0, 0,
	0, 0, 0, 1325, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 0, 0, 0, 0,
	1303, 0, 0, 0, 0, 0, 0, 0, 716, 0,
	0, 716, 716, 0, 0, 0, 1340, 1350, 0, 2274,
	1330, 1331, 1332, 0, 0, 0, 956, 1302, 0, 0,
	0, 0, 0, 0, 0, 1322, 970, 2998, 0, 0,
	3001, 1346, 1347, 0, 0, 0, 970, 0, 0, 1317,
	1318, 0, 0, 970, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 3014, 0, 0, 0, 1818,
	1323, 0, 956, 0, 956, 956, 956, 0, 2506, 0,
	0, 0, 729, 0, 0, 0, 1348, 2265, 1365, 0,
	0, 0, 0, 1325, 1326, 1327, 1328, 0, 0, 0,
	1337, 0, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 2341, 0, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1330, 1331, 1332, 0, 0, 2280, 0, 1329, 0, 0,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3084, 3084, 1324, 0, 0, 0, 0, 0,
	0, 917, 0, 0, 2275, 0, 0, 0, 0, 3101,
	0, 0, 0, 0, 0, 0, 2397, 1341, 1457, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3084, 0, 0, 0,
	74, 0, 0, 0, 0, 2415, 0, 0, 970, 971,
	0, 0, 0, 0, 2424, 0, 2426, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 74, 0, 74, 0, 1329, 2276, 0,
	0, 0, 0, 0, 0, 1339, 0, 3084, 1314, 1315,
	1321, 1320, 1316, 1342, 1324, 1313, 1311, 1312, 1304, 1305,
	1306, 1307, 1309, 1310, 0, 0, 0, 74, 2245, 74,
	0, 0, 2246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 74, 0, 0, 0, 2501, 0, 971, 0,
	0, 0, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 0, 957, 0, 957, 957, 957, 0,
	0, 0, 2271, 2272, 2273, 0, 0, 0, 0, 2270,
	2268, 2269, 2261, 2262, 2263, 2264, 2266, 2267, 0, 0,
	0, 0, 0, 0, 0, 1313, 1311, 1312, 1304, 1305,
	1306, 1307, 1309, 1310, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 0,
	970, 0, 0, 956, 0, 0, 0, 0, 1300, 1301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1303, 0, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 970, 0, 0, 970, 0,
	1302, 0, 0, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 0, 971, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1818, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1365, 0,
	0, 2505, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2679, 1325, 1326, 1327, 1328,
	0, 0, 0, 0, 0, 0, 1308, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 1331, 1332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 970,
	0, 970, 0, 2725, 0, 965, 0, 0, 0, 0,
	0, 0, 0, 2728, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 0,
	917, 917, 0, 956, 917, 0, 0, 970, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 971, 0, 0, 957, 0, 0, 0, 0,
	1329, 0, 0, 956, 956, 0, 0, 74, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 957, 0, 0, 0, 0, 74, 0, 74,
	0, 0, 0, 0, 0, 970, 0, 971, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 970, 2827, 74, 0, 0, 0, 1103, 0, 970,
	0, 0, 0, 1300, 1301, 729, 1333, 1334, 1335, 1343,
	1344, 1345, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1303, 74,
	0, 1349, 0, 0, 0, 0, 0, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 0, 0, 0, 0, 1302, 0, 0, 0, 956,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 971, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 1326, 1327, 1328, 0, 0, 0, 0, 0,
	0, 1308, 0, 0, 0, 957, 0, 0, 0, 971,
	0, 0, 0, 957, 2924, 0, 1300, 1301, 0, 0,
	0, 0, 0, 0, 1340, 1350, 0, 0, 1330, 1331,
	1332, 0, 0, 0, 957, 0, 956, 0, 0, 0,
	0, 1303, 0, 0, 0, 0, 956, 956, 0, 1346,
	1347, 0, 0, 0, 0, 957, 957, 1317, 1318, 0,
	2960, 0, 2962, 0, 0, 0, 0, 0, 1302, 0,
	0, 1338, 0, 0, 0, 0, 1322, 0, 1323, 0,
	970, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 1348, 0, 0, 971, 0, 1300,
	1301, 0, 0, 0, 917, 0, 0, 0, 1337, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2187,
	0, 0, 0, 0, 1303, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 1325, 1326, 1327, 1328, 0, 0,
	0, 971, 0, 0, 1308, 1329, 0, 0, 0, 0,
	0, 1302, 0, 0, 0, 0, 971, 0, 0, 1322,
	0, 3015, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 1330, 1331, 1332, 1300, 1301, 0, 1333, 1334, 1335,
	1343, 1344, 1345, 0, 0, 1341, 0, 0, 0, 0,
	3035, 0, 1336, 0, 0, 0, 0, 0, 0, 1303,
	0, 957, 1349, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3052, 0, 0, 1325, 1326, 1327,
	1328, 1323, 0, 0, 0, 0, 1302, 1308, 0, 971,
	0, 0, 0, 0, 1322, 0, 0, 917, 0, 0,
	0, 1319, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 1339, 0, 0, 1314, 1315, 1321, 1320,
	1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307,
	1309, 1310, 0, 0, 0, 0, 0, 0, 1329, 0,
	2760, 0, 1325, 1326, 1327, 1328, 0, 0, 0, 0,
	0, 0, 1308, 0, 1323, 1324, 0, 0, 957, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 957, 957,
	0, 0, 0, 0, 0, 1340, 1350, 0, 0, 1330,
	1331, 1332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1346, 1347, 971, 0, 0, 0, 0, 0, 1317, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1329, 1338, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	917, 0, 0, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 0, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1313,
	1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1339, 0, 0, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 0, 0, 0, 0, 0,
	0, 2248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1818, 258, 259, 260,
	261, 973, 262, 974, 975, 976, 977, 214, 978, 979,
	980, 981, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 982, 269, 270, 271, 272, 273, 274, 275,
	983, 984, 276, 219, 220, 221, 985, 277, 222, 986,
	958, 987, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 988, 287, 0, 288, 289, 989, 852, 290,
	291, 990, 991, 993, 992, 994, 995, 996, 292, 293,
	500, 294, 295, 296, 223, 224, 997, 297, 998, 298,
	999, 299, 1000, 1001, 300, 301, 1002, 302, 303, 1003,
	304, 1004, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 1005, 853, 1006, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 1007, 320, 1008,
	1009, 854, 321, 1010, 322, 229, 1011, 230, 1012, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 856, 1013,
	237, 330, 0, 0, 0, 1014, 329, 331, 338, 1015,
	855, 332, 234, 334, 333, 335, 336, 337, 235, 1016,
	236, 1017, 339, 857, 858, 340, 341, 342, 859, 343,
	344, 0, 0, 345, 346, 347, 1018, 349, 348, 1019,
	350, 238, 860, 351, 352, 861, 1020, 353, 354, 1021,
	1022, 355, 0, 356, 933, 932, 357, 358, 360, 361,
	359, 862, 362, 363, 365, 364, 1023, 1024, 863, 1025,
	239, 366, 240, 367, 368, 1026, 369, 370, 1027, 1028,
	371, 372, 1029, 1030, 373, 241, 864, 374, 865, 242,
	375, 376, 377, 378, 379, 380, 381, 1031, 382, 243,
	383, 244, 384, 1032, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 1033, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 1034, 405, 866,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 1035, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 1036, 430, 411, 412, 431, 867,
	432, 247, 433, 434, 1037, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 1038, 445, 446,
	1039, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 1040, 249, 250, 251, 455, 1041, 1042, 456, 457,
	252, 253, 1043, 458, 459, 0, 460, 461, 1044, 1045,
	462, 463, 464, 466, 1046, 467, 1047, 465, 468, 469,
	470, 254, 255, 1048, 472, 471, 256, 1049, 1050, 1051,
	1052, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 1955, 0, 0,
	0, 0, 0, 0, 0, 0, 1956, 258, 259, 260,
	261, 973, 262, 974, 975, 976, 977, 214, 978, 979,
	980, 981, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 982, 269, 270, 271, 272, 273, 274, 275,
	983, 984, 276, 219, 220, 221, 985, 277, 222, 986,
	958, 987, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 988, 287, 0, 288, 289, 989, 852, 290,
	291, 990, 991, 993, 992, 994, 995, 996, 292, 293,
	500, 294, 295, 296, 223, 224, 997, 297, 998, 298,
	999, 299, 1000, 1001, 300, 301, 1002, 302, 303, 1003,
	304, 1004, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 1005, 853, 1006, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 1007, 320, 1008,
	1009, 854, 321, 1010, 322, 229, 1011, 230, 1012, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 856, 1013,
	237, 330, 0, 0, 0, 1014, 329, 331, 338, 1015,
	855, 332, 234, 334, 333, 335, 336, 337, 235, 1016,
	236, 1017, 339, 857, 858, 340, 341, 342, 859, 343,
	344, 0, 0, 345, 346, 347, 1018, 349, 348, 1019,
	350, 238, 860, 351, 352, 861, 1020, 353, 354, 1021,
	1022, 355, 0, 356, 933, 932, 357, 358, 360, 361,
	359, 862, 362, 363, 365, 364, 1023, 1024, 863, 1025,
	239, 366, 240, 367, 368, 1026, 369, 370, 1027, 1028,
	371, 372, 1029, 1030, 373, 241, 864, 374, 865, 242,
	375, 376, 377, 378, 379, 380, 381, 1031, 382, 243,
	383, 244, 384, 1032, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 1033, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 1034, 405, 866,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 1035, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 1036, 430, 411, 412, 431, 867,
	432, 247, 433, 434, 1037, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 1038, 445, 446,
	1039, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 1040, 249, 250, 251, 455, 1041, 1042, 456, 457,
	252, 253, 1043, 458, 459, 0, 460, 461, 1044, 1045,
	462, 463, 464, 466, 1046, 467, 1047, 465, 468, 469,
	470, 254, 255, 1048, 472, 471, 256, 1049, 1050, 1051,
	1052, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2784, 258, 259,
	260, 261, 973, 262, 974, 975, 976, 977, 214, 978,
	979, 980, 981, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 982, 269, 270, 271, 272, 273, 274,
	275, 983, 984, 276, 219, 220, 221, 985, 277, 222,
	986, 958, 987, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 988, 287, 0, 288, 289, 989, 852,
	290, 291, 990, 991, 993, 992, 994, 995, 996, 292,
	293, 500, 294, 295, 296, 223, 224, 997, 297, 998,
	298, 999, 299, 1000, 1001, 300, 301, 1002, 302, 303,
	1003, 304, 1004, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 1005, 853, 1006, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 1007, 320,
	1008, 1009, 854, 321, 1010, 322, 229, 1011, 230, 1012,
	323, 324, 325, 326, 327, 328, 231, 232, 233, 856,
	1013, 237, 330, 0, 0, 0, 1014, 329, 331, 338,
	1015, 855, 332, 234, 334, 333, 335, 336, 337, 235,
	1016, 236, 1017, 339, 857, 858, 340, 341, 342, 859,
	343, 344, 0, 0, 345, 346, 347, 1018, 349, 348,
	1019, 350, 238, 860, 351, 352, 861, 1020, 353, 354,
	1021, 1022, 355, 0, 356, 933, 932, 357, 358, 360,
	361, 359, 862, 362, 363, 365, 364, 1023, 1024, 863,
	1025, 239, 366, 240, 367, 368, 1026, 369, 370, 1027,
	1028, 371, 372, 1029, 1030, 373, 241, 864, 374, 865,
	242, 375, 376, 377, 378, 379, 380, 381, 1031, 382,
	243, 383, 244, 384, 1032, 385, 386, 387, 388, 389,
	390, 245, 391, 392, 1033, 393, 394, 395, 396, 397,
	0, 399, 400, 398, 401, 402, 403, 404, 1034, 405,
	866, 406, 407, 408, 409, 246, 410, 0, 414, 415,
	416, 417, 418, 419, 420, 1035, 426, 427, 421, 423,
	424, 425, 422, 428, 429, 1036, 430, 411, 412, 431,
	867, 432, 247, 433, 434, 1037, 444, 435, 436, 437,
	413, 438, 442, 443, 439, 440, 441, 248, 1038, 445,
	446, 1039, 447, 448, 449, 450, 451, 309, 452, 310,
	453, 454, 1040, 249, 250, 251, 455, 1041, 1042, 456,
	457, 252, 253, 1043, 458, 459, 0, 460, 461, 1044,
	1045, 462, 463, 464, 466, 1046, 467, 1047, 465, 468,
	469, 470, 254, 255, 1048, 472, 471, 256, 1049, 1050,
	1051, 1052, 473, 474, 257, 475, 476, 477, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2893, 258, 259, 260, 261, 973, 262,
	974, 975, 976, 977, 214, 978, 979, 980, 981, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 982,
	269, 270, 271, 272, 273, 274, 275, 983, 984, 276,
	219, 220, 221, 985, 277, 222, 986, 958, 987, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 988,
	287, 0, 288, 289, 989, 852, 290, 291, 990, 991,
	993, 992, 994, 995, 996, 292, 293, 500, 294, 295,
	296, 223, 224, 997, 297, 998, 298, 999, 299, 1000,
	1001, 300, 301, 1002, 302, 303, 1003, 304, 1004, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 1005,
	853, 1006, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 1007, 320, 1008, 1009, 854, 321,
	1010, 322, 229, 1011, 230, 1012, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 856, 1013, 237, 330, 0,
	0, 0, 1014, 329, 331, 338, 1015, 855, 332, 234,
	334, 333, 335, 336, 337, 235, 1016, 236, 1017, 339,
	857, 858, 340, 341, 342, 859, 343, 344, 0, 0,
	345, 346, 347, 1018, 349, 348, 1019, 350, 238, 860,
	351, 352, 861, 1020, 353, 354, 1021, 1022, 355, 0,
	356, 933, 932, 357, 358, 360, 361, 359, 862, 362,
	363, 365, 364, 1023, 1024, 863, 1025, 239, 366, 240,
	367, 368, 1026, 369, 370, 1027, 1028, 371, 372, 1029,
	1030, 373, 241, 864, 374, 865, 242, 375, 376, 377,
	378, 379, 380, 381, 1031, 382, 243, 383, 244, 384,
	1032, 385, 386, 387, 388, 389, 390, 245, 391, 392,
	1033, 393, 394, 395, 396, 397, 0, 399, 400, 398,
	401, 402, 403, 404, 1034, 405, 866, 406, 407, 408,
	409, 246, 410, 0, 414, 415, 416, 417, 418, 419,
	420, 1035, 426, 427, 421, 423, 424, 425, 422, 428,
	429, 1036, 430, 411, 412, 431, 867, 432, 247, 433,
	434, 1037, 444, 435, 436, 437, 413, 438, 442, 443,
	439, 440, 441, 248, 1038, 445, 446, 1039, 447, 448,
	449, 450, 451, 309, 452, 310, 453, 454, 1040, 249,
	250, 251, 455, 1041, 1042, 456, 457, 252, 253, 1043,
	458, 459, 0, 460, 461, 1044, 1045, 462, 463, 464,
	466, 1046, 467, 1047, 465, 468, 469, 470, 254, 255,
	1048, 472, 471, 256, 1049, 1050, 1051, 1052, 473, 474,
	257, 475, 476, 477, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2544,
	258, 259, 260, 261, 973, 262, 974, 975, 976, 977,
	214, 978, 979, 980, 981, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 982, 269, 270, 271, 272,
	273, 274, 275, 983, 984, 276, 219, 220, 221, 985,
	277, 222, 986, 958, 987, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 988, 287, 0, 288, 289,
	989, 852, 290, 291, 990, 991, 993, 992, 994, 995,
	996, 292, 293, 500, 294, 295, 296, 223, 224, 997,
	297, 998, 298, 999, 299, 1000, 1001, 300, 301, 1002,
	302, 303, 1003, 304, 1004, 225, 305, 306, 308, 311,
	307, 312, 313, 226, 227, 1005, 853, 1006, 0, 0,
	0, 0, 314, 315, 316, 228, 317, 318, 0, 319,
	1007, 320, 1008, 1009, 854, 321, 1010, 322, 229, 1011,
	230, 1012, 323, 324, 325, 326, 327, 328, 231, 232,
	233, 856, 1013, 237, 330, 0, 0, 0, 1014, 329,
	331, 338, 1015, 855, 332, 234, 334, 333, 335, 336,
	337, 235, 1016, 236, 1017, 339, 857, 858, 340, 341,
	342, 859, 343, 344, 0, 0, 345, 346, 347, 1018,
	349, 348, 1019, 350, 238, 860, 351, 352, 861, 1020,
	353, 354, 1021, 1022, 355, 0, 356, 933, 932, 357,
	358, 360, 361, 359, 862, 362, 363, 365, 364, 1023,
	1024, 863, 1025, 239, 366, 240, 367, 368, 1026, 369,
	370, 1027, 1028, 371, 372, 1029, 1030, 373, 241, 864,
	374, 865, 242, 375, 376, 377, 378, 379, 380, 381,
	1031, 382, 243, 383, 244, 384, 1032, 385, 386, 387,
	388, 389, 390, 245, 391, 392, 1033, 393, 394, 395,
	396, 397, 0, 399, 400, 398, 401, 402, 403, 404,
	1034, 405, 866, 406, 407, 408, 409, 246, 410, 0,
	414, 415, 416, 417, 418, 419, 420, 1035, 426, 427,
	421, 423, 424, 425, 422, 428, 429, 1036, 430, 411,
	412, 431, 867, 432, 247, 433, 434, 1037, 444, 435,
	436, 437, 413, 438, 442, 443, 439, 440, 441, 248,
	1038, 445, 446, 1039, 447, 448, 449, 450, 451, 309,
	452, 310, 453, 454, 1040, 249, 250, 251, 455, 1041,
	1042, 456, 457, 252, 253, 1043, 458, 459, 0, 460,
	461, 1044, 1045, 462, 463, 464, 466, 1046, 467, 1047,
	465, 468, 469, 470, 254, 255, 1048, 472, 471, 256,
	1049, 1050, 1051, 1052, 473, 474, 257, 475, 476, 477,
	968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2521, 258, 259, 260, 261,
	973, 262, 974, 975, 976, 977, 214, 978, 979, 980,
	981, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 982, 269, 270, 271, 272, 273, 274, 275, 983,
	984, 276, 219, 220, 221, 985, 277, 222, 986, 958,
	987, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 988, 287, 0, 288, 289, 989, 852, 290, 291,
	990, 991, 993, 992, 994, 995, 996, 292, 293, 500,
	294, 295, 296, 223, 224, 997, 297, 998, 298, 999,
	299, 1000, 1001, 300, 301, 1002, 302, 303, 1003, 304,
	1004, 225, 305, 306, 308, 311, 307, 312, 313, 226,
	227, 1005, 853, 1006, 0, 0, 0, 0, 314, 315,
	316, 228, 317, 318, 0, 319, 1007, 320, 1008, 1009,
	854, 321, 1010, 322, 229, 1011, 230, 1012, 323, 324,
	325, 326, 327, 328, 231, 232, 233, 856, 1013, 237,
	330, 0, 0, 0, 1014, 329, 331, 338, 1015, 855,
	332, 234, 334, 333, 335, 336, 337, 235, 1016, 236,
	1017, 339, 857, 858, 340, 341, 342, 859, 343, 344,
	0, 0, 345, 346, 347, 1018, 349, 348, 1019, 350,
	238, 860, 351, 352, 861, 1020, 353, 354, 1021, 1022,
	355, 0, 356, 933, 932, 357, 358, 360, 361, 359,
	862, 362, 363, 365, 364, 1023, 1024, 863, 1025, 239,
	366, 240, 367, 368, 1026, 369, 370, 1027, 1028, 371,
	372, 1029, 1030, 373, 241, 864, 374, 865, 242, 375,
	376, 377, 378, 379, 380, 381, 1031, 382, 243, 383,
	244, 384, 1032, 385, 386, 387, 388, 389, 390, 245,
	391, 392, 1033, 393, 394, 395, 396, 397, 0, 399,
	400, 398, 401, 402, 403, 404, 1034, 405, 866, 406,
	407, 408, 409, 246, 410, 0, 414, 415, 416, 417,
	418, 419, 420, 1035, 426, 427, 421, 423, 424, 425,
	422, 428, 429, 1036, 430, 411, 412, 431, 867, 432,
	247, 433, 434, 1037, 444, 435, 436, 437, 413, 438,
	442, 443, 439, 440, 441, 248, 1038, 445, 446, 1039,
	447, 448, 449, 450, 451, 309, 452, 310, 453, 454,
	1040, 249, 250, 251, 455, 1041, 1042, 456, 457, 252,
	253, 1043, 458, 459, 0, 460, 461, 1044, 1045, 462,
	463, 464, 466, 1046, 467, 1047, 465, 468, 469, 470,
	254, 255, 1048, 472, 471, 256, 1049, 1050, 1051, 1052,
	473, 474, 257, 475, 476, 477, 968, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2401, 258, 259, 260, 261, 973, 262, 974, 975,
	976, 977, 214, 978, 979, 980, 981, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 982, 269, 270,
	271, 272, 273, 274, 275, 983, 984, 276, 219, 220,
	221, 985, 277, 222, 986, 958, 987, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 988, 287, 0,
	288, 289, 989, 852, 290, 291, 990, 991, 993, 992,
	994, 995, 996, 292, 293, 500, 294, 295, 296, 223,
	224, 997, 297, 998, 298, 999, 299, 1000, 1001, 300,
	301, 1002, 302, 303, 1003, 304, 1004, 225, 305, 306,
	308, 311, 307, 312, 313, 226, 227, 1005, 853, 1006,
	0, 0, 0, 0, 314, 315, 316, 228, 317, 318,
	0, 319, 1007, 320, 1008, 1009, 854, 321, 1010, 322,
	229, 1011, 230, 1012, 323, 324, 325, 326, 327, 328,
	231, 232, 233, 856, 1013, 237, 330, 0, 0, 0,
	1014, 329, 331, 338, 1015, 855, 332, 234, 334, 333,
	335, 336, 337, 235, 1016, 236, 1017, 339, 857, 858,
	340, 341, 342, 859, 343, 344, 0, 0, 345, 346,
	347, 1018, 349, 348, 1019, 350, 238, 860, 351, 352,
	861, 1020, 353, 354, 1021, 1022, 355, 0, 356, 933,
	932, 357, 358, 360, 361, 359, 862, 362, 363, 365,
	364, 1023, 1024, 863, 1025, 239, 366, 240, 367, 368,
	1026, 369, 370, 1027, 1028, 371, 372, 1029, 1030, 373,
	241, 864, 374, 865, 242, 375, 376, 377, 378, 379,
	380, 381, 1031, 382, 243, 383, 244, 384, 1032, 385,
	386, 387, 388, 389, 390, 245, 391, 392, 1033, 393,
	394, 395, 396, 397, 0, 399, 400, 398, 401, 402,
	403, 404, 1034, 405, 866, 406, 407, 408, 409, 246,
	410, 0, 414, 415, 416, 417, 418, 419, 420, 1035,
	426, 427, 421, 423, 424, 425, 422, 428, 429, 1036,
	430, 411, 412, 431, 867, 432, 247, 433, 434, 1037,
	444, 435, 436, 437, 413, 438, 442, 443, 439, 440,
	441, 248, 1038, 445, 446, 1039, 447, 448, 449, 450,
	451, 309, 452, 310, 453, 454, 1040, 249, 250, 251,
	455, 1041, 1042, 456, 457, 252, 253, 1043, 458, 459,
	0, 460, 461, 1044, 1045, 462, 463, 464, 466, 1046,
	467, 1047, 465, 468, 469, 470, 254, 255, 1048, 472,
	471, 256, 1049, 1050, 1051, 1052, 473, 474, 257, 475,
	476, 477, 968, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1858, 258, 259,
	260, 261, 973, 262, 974, 975, 976, 977, 214, 978,
	979, 980, 981, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 982, 269, 270, 271, 272, 273, 274,
	275, 983, 984, 276, 219, 220, 221, 985, 277, 222,
	986, 958, 987, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 988, 287, 0, 288, 289, 989, 852,
	290, 291, 990, 991, 993, 992, 994, 995, 996, 292,
	293, 500, 294, 295, 296, 223, 224, 997, 297, 998,
	298, 999, 299, 1000, 1001, 300, 301, 1002, 302, 303,
	1003, 304, 1004, 225, 305, 306, 308, 311, 307, 312,
	313, 226, 227, 1005, 853, 1006, 0, 0, 0, 0,
	314, 315, 316, 228, 317, 318, 0, 319, 1007, 320,
	1008, 1009, 854, 321, 1010, 322, 229, 1011, 230, 1012,
	323, 324, 325, 326, 327, 328, 231, 232, 233, 856,
	1013, 237, 330, 0, 0, 0, 1014, 329, 331, 338,
	1015, 855, 332, 234, 334, 333, 335, 336, 337, 235,
	1016, 236, 1017, 339, 857, 858, 340, 341, 342, 859,
	343, 344, 0, 0, 345, 346, 347, 1018, 349, 348,
	1019, 350, 238, 860, 351, 352, 861, 1020, 353, 354,
	1021, 1022, 355, 0, 356, 933, 932, 357, 358, 360,
	361, 359, 862, 362, 363, 365, 364, 1023, 1024, 863,
	1025, 239, 366, 240, 367, 368, 1026, 369, 370, 1027,
	1028, 371, 372, 1029, 1030, 373, 241, 864, 374, 865,
	242, 375, 376, 377, 378, 379, 380, 381, 1031, 382,
	243, 383, 244, 384, 1032, 385, 386, 387, 388, 389,
	390, 245, 391, 392, 1033, 393, 394, 395, 396, 397,
	0, 399, 400, 398, 401, 402, 403, 404, 1034, 405,
	866, 406, 407, 408, 409, 246, 410, 0, 414, 415,
	416, 417, 418, 419, 420, 1035, 426, 427, 421, 423,
	424, 425, 422, 428, 429, 1036, 430, 411, 412, 431,
	867, 432, 247, 433, 434, 1037, 444, 435, 436, 437,
	413, 438, 442, 443, 439, 440, 441, 248, 1038, 445,
	446, 1039, 447, 448, 449, 450, 451, 309, 452, 310,
	453, 454, 1040, 249, 250, 251, 455, 1041, 1042, 456,
	457, 252, 253, 1043, 458, 459, 0, 460, 461, 1044,
	1045, 462, 463, 464, 466, 1046, 467, 1047, 465, 468,
	469, 470, 254, 255, 1048, 472, 471, 256, 1049, 1050,
	1051, 1052, 473, 474, 257, 475, 476, 477, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1522, 258, 259, 260, 261, 973, 262,
	974, 975, 976, 977, 214, 978, 979, 980, 981, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 982,
	269, 270, 271, 272, 273, 274, 275, 983, 984, 276,
	219, 220, 221, 985, 277, 222, 986, 958, 987, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 988,
	287, 0, 288, 289, 989, 852, 290, 291, 990, 991,
	993, 992, 994, 995, 996, 292, 293, 500, 294, 295,
	296, 223, 224, 997, 297, 998, 298, 999, 299, 1000,
	1001, 300, 301, 1002, 302, 303, 1003, 304, 1004, 225,
	305, 306, 308, 311, 307, 312, 313, 226, 227, 1005,
	853, 1006, 0, 0, 0, 0, 314, 315, 316, 228,
	317, 318, 0, 319, 1007, 320, 1008, 1009, 854, 321,
	1010, 322, 229, 1011, 230, 1012, 323, 324, 325, 326,
	327, 328, 231, 232, 233, 856, 1013, 237, 330, 0,
	0, 0, 1014, 329, 331, 338, 1015, 855, 332, 234,
	334, 333, 335, 336, 337, 235, 1016, 236, 1017, 339,
	857, 858, 340, 341, 342, 859, 343, 344, 0, 0,
	345, 346, 347, 1018, 349, 348, 1019, 350, 238, 860,
	351, 352, 861, 1020, 353, 354, 1021, 1022, 355, 0,
	356, 933, 932, 357, 358, 360, 361, 359, 862, 362,
	363, 365, 364, 1023, 1024, 863, 1025, 239, 366, 240,
	367, 368, 1026, 369, 370, 1027, 1028, 371, 372, 1029,
	1030, 373, 241, 864, 374, 865, 242, 375, 376, 377,
	378, 379, 380, 381, 1031, 382, 243, 383, 244, 384,
	1032, 385, 386, 387, 388, 389, 390, 245, 391, 392,
	1033, 393, 394, 395, 396, 397, 0, 399, 400, 398,
	401, 402, 403, 404, 1034, 405, 866, 406, 407, 408,
	409, 246, 410, 0, 414, 415, 416, 417, 418, 419,
	420, 1035, 426, 427, 421, 423, 424, 425, 422, 428,
	429, 1036, 430, 411, 412, 431, 867, 432, 247, 433,
	434, 1037, 444, 435, 436, 437, 413, 438, 442, 443,
	439, 440, 441, 248, 1038, 445, 446, 1039, 447, 448,
	449, 450, 451, 309, 452, 310, 453, 454, 1040, 249,
	250, 251, 455, 1041, 1042, 456, 457, 252, 253, 1043,
	458, 459, 0, 460, 461, 1044, 1045, 462, 463, 464,
	466, 1046, 467, 1047, 465, 468, 469, 470, 254, 255,
	1048, 472, 471, 256, 1049, 1050, 1051, 1052, 473, 474,
	257, 475, 476, 477, 1841, 0, 797, 758, 759, 756,
	757, 769, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 1838, 262, 0, 0,
	0, 0, 843, 772, 0, 0, 0, 263, 264, 265,
	215, 812, 793, 823, 781, 822, 821, 0, 269, 270,
	783, 782, 273, 274, 275, 773, 842, 276, 869, 868,
	221, 0, 277, 849, 0, 832, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 852, 290, 291, 835, 833, 834, 839,
	837, 836, 838, 292, 293, 500, 294, 825, 296, 819,
	818, 748, 297, 0, 298, 0, 299, 1839, 0, 817,
	301, 0, 302, 303, 0, 304, 0, 753, 305, 306,
	308, 311, 307, 312, 313, 871, 872, 765, 853, 0,
	0, 0, 0, 0, 314, 315, 316, 816, 814, 815,
	0, 319, 0, 320, 0, 0, 854, 321, 0, 322,
	873, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	844, 845, 848, 856, 0, 846, 792, 0, 0, 0,
	0, 329, 331, 338, 0, 855, 332, 805, 796, 806,
	807, 808, 809, 810, 0, 798, 0, 339, 857, 858,
	340, 341, 342, 859, 830, 831, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 350, 874, 860, 351, 352,
	861, 0, 353, 354, 0, 0, 355, 0, 356, 750,
	749, 357, 358, 360, 785, 359, 862, 362, 363, 365,
	364, 745, 0, 863, 766, 847, 366, 820, 367, 368,
	0, 794, 795, 0, 0, 371, 372, 0, 0, 373,
	241, 864, 374, 865, 875, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 876, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 390, 813, 391, 392, 0, 393,
	394, 395, 396, 397, 0, 399, 400, 398, 401, 402,
	403, 404, 0, 405, 866, 406, 407, 408, 409, 754,
	410, 0, 414, 415, 416, 417, 418, 419, 420, 0,
	426, 427, 786, 787, 788, 789, 422, 428, 429, 840,
	430, 411, 412, 431, 867, 432, 811, 790, 434, 0,
	444, 435, 436, 437, 413, 438, 442, 851, 439, 440,
	441, 877, 0, 445, 446, 0, 447, 448, 449, 450,
	451, 309, 452, 310, 784, 454, 0, 826, 827, 828,
	829, 0, 0, 456, 457, 878, 879, 764, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 841,
	467, 0, 791, 468, 469, 470, 254, 870, 1837, 472,
	471, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 746, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 742, 743, 1840, 0, 0,
	0, 0, 0, 0, 755, 1836, 0, 0, 0, 730,
	768, 797, 758, 759, 756, 757, 769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 843, 772, 0,
	0, 0, 263, 264, 265, 215, 812, 793, 823, 781,
	822, 821, 0, 269, 270, 783, 782, 273, 274, 275,
	773, 842, 276, 869, 868, 221, 0, 277, 849, 0,
	832, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 852, 290,
	291, 835, 833, 834, 839, 837, 836, 838, 292, 293,
	500, 294, 825, 296, 819, 818, 748, 297, 0, 298,
	0, 299, 0, 0, 817, 301, 0, 302, 303, 0,
	304, 0, 753, 305, 306, 308, 311, 307, 312, 313,
	871, 872, 765, 853, 0, 0, 0, 0, 0, 314,
	315, 316, 816, 814, 815, 0, 319, 0, 320, 0,
	0, 854, 321, 0, 322, 873, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 844, 845, 848, 856, 0,
	846, 792, 0, 0, 0, 0, 329, 331, 338, 0,
	855, 332, 805, 796, 806, 807, 808, 809, 810, 0,
	798, 0, 339, 857, 858, 340, 341, 342, 859, 830,
	831, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 874, 860, 351, 352, 861, 0, 353, 354, 0,
	0, 355, 0, 356, 750, 749, 357, 358, 360, 785,
	359, 862, 362, 363, 365, 364, 745, 0, 863, 766,
	847, 366, 820, 367, 368, 0, 794, 795, 0, 0,
	371, 372, 0, 0, 373, 241, 864, 374, 865, 875,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 876,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	813, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 866,
	406, 407, 408, 409, 754, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 171, 426, 427, 786, 787, 788,
	789, 422, 428, 429, 840, 430, 411, 412, 431, 867,
	432, 811, 790, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 851, 439, 440, 441, 877, 0, 445, 446,
	173, 447, 448, 449, 450, 451, 309, 452, 310, 784,
	454, 0, 826, 827, 828, 829, 0, 0, 456, 457,
	878, 879, 764, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 841, 467, 0, 791, 468, 469,
	470, 1150, 870, 0, 472, 471, 256, 0, 0, 0,
	165, 473, 474, 257, 475, 476, 477, 746, 166, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	742, 743, 797, 758, 759, 756, 757, 769, 0, 1369,
	0, 0, 0, 0, 0, 768, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 843, 772,
	0, 0, 0, 263, 264, 265, 215, 812, 793, 823,
	781, 822, 821, 0, 269, 270, 783, 782, 273, 274,
	275, 773, 842, 276, 869, 868, 221, 0, 277, 849,
	0, 832, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 852,
	290, 291, 835, 833, 834, 839, 837, 836, 838, 292,
	293, 500, 294, 825, 296, 819, 818, 748, 297, 0,
	298, 0, 299, 0, 0, 817, 301, 0, 302, 303,
	0, 304, 0, 753, 305, 306, 308, 311, 307, 312,
	313, 871, 872, 765, 853, 0, 0, 0, 0, 0,
	314, 315, 316, 816, 814, 815, 0, 319, 0, 320,
	0, 0, 854, 321, 0, 322, 873, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 844, 845, 848, 856,
	0, 846, 792, 0, 0, 0, 0, 329, 331, 338,
	0, 855, 332, 805, 796, 806, 807, 808, 809, 810,
	0, 798, 0, 339, 857, 858, 340, 341, 342, 859,
	830, 831, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 350, 874, 860, 351, 352, 861, 0, 353, 354,
	0, 0, 355, 0, 356, 750, 749, 357, 358, 360,
	785, 359, 862, 362, 363, 365, 364, 745, 0, 863,
	766, 847, 366, 820, 367, 368, 0, 794, 795, 0,
	0, 371, 372, 0, 0, 373, 241, 864, 374, 865,
	875, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	876, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	390, 813, 391, 392, 0, 393, 394, 395, 396, 397,
	0, 399, 400, 398, 401, 402, 403, 404, 0, 405,
	866, 406, 407, 408, 409, 754, 410, 0, 414, 415,
	416, 417, 418, 419, 420, 171, 426, 427, 786, 787,
	788, 789, 422, 428, 429, 840, 430, 411, 412, 431,
	867, 432, 811, 790, 434, 0, 444, 435, 436, 437,
	413, 438, 442, 851, 439, 440, 441, 877, 0, 445,
	446, 173, 447, 448, 449, 450, 451, 309, 452, 310,
	784, 454, 0, 826, 827, 828, 829, 0, 0, 456,
	457, 878, 879, 764, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 841, 467, 0, 791, 468,
	469, 470, 1150, 870, 0, 472, 471, 256, 0, 0,
	0, 165, 473, 474, 257, 475, 476, 477, 746, 166,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 742, 743, 797, 758, 759, 756, 757, 769, 0,
	1369, 0, 0, 0, 0, 0, 768, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 843,
	772, 0, 0, 0, 263, 264, 265, 215, 812, 793,
	823, 781, 822, 821, 1920, 269, 270, 783, 782, 273,
	274, 275, 773, 842, 276, 869, 868, 221, 0, 277,
	849, 0, 832, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	852, 290, 291, 835, 833, 834, 839, 837, 836, 838,
	292, 293, 500, 294, 825, 296, 819, 818, 748, 297,
	0, 298, 0, 299, 0, 0, 817, 301, 0, 302,
	303, 0, 304, 0, 753, 305, 306, 308, 311, 307,
	312, 313, 871, 872, 765, 853, 0, 0, 0, 0,
	0, 314, 315, 316, 816, 814, 815, 0, 319, 0,
	320, 0, 1925, 854, 321, 0, 322, 873, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 844, 845, 848,
	856, 0, 846, 792, 0, 0, 0, 0, 329, 331,
	338, 0, 855, 332, 805, 796, 806, 807, 808, 809,
	810, 0, 798, 0, 339, 857, 858, 340, 341, 342,
	859, 830, 831, 0, 0, 345, 346, 347, 0, 349,
	348, 1921, 350, 874, 860, 351, 352, 861, 0, 353,
	354, 0, 0, 355, 0, 356, 750, 749, 357, 358,
	360, 785, 359, 862, 362, 363, 365, 364, 745, 0,
	863, 766, 847, 366, 820, 367, 368, 0, 794, 795,
	0, 0, 371, 372, 0, 0, 373, 241, 864, 374,
	865, 875, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 876, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 813, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 866, 406, 407, 408, 409, 754, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 786,
	787, 788, 789, 422, 428, 429, 840, 430, 411, 412,
	431, 867, 432, 811, 790, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 851, 439, 440, 441, 877, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 784, 454, 0, 826, 827, 828, 829, 0, 1922,
	456, 457, 878, 879, 764, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 841, 467, 0, 791,
	468, 469, 470, 254, 870, 0, 472, 471, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 746,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 742, 743, 797, 758, 759, 756, 757, 769,
	0, 755, 0, 0, 0, 0, 0, 768, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	843, 772, 0, 0, 0, 263, 264, 265, 215, 812,
	793, 823, 781, 822, 821, 0, 269, 270, 783, 782,
	273, 274, 275, 773, 842, 276, 869, 868, 221, 0,
	277, 849, 0, 832, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 852, 290, 291, 835, 833, 834, 839, 837, 836,
	838, 292, 293, 500, 294, 825, 296, 819, 818, 748,
	297, 0, 298, 0, 299, 0, 0, 817, 301, 0,
	302, 303, 0, 304, 0, 753, 305, 306, 308, 311,
	307, 312, 313, 871, 872, 765, 853, 0, 0, 0,
	0, 0, 314, 315, 316, 816, 814, 815, 0, 319,
	0, 320, 0, 0, 854, 321, 0, 322, 873, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 844, 845,
	848, 856, 0, 846, 792, 0, 0, 0, 0, 329,
	331, 338, 0, 855, 332, 805, 796, 806, 807, 808,
	809, 810, 0, 798, 0, 339, 857, 858, 340, 341,
	342, 859, 830, 831, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 350, 874, 860, 351, 352, 861, 0,
	353, 354, 0, 0, 355, 0, 356, 750, 749, 357,
	358, 360, 785, 359, 862, 362, 363, 365, 364, 745,
	2696, 863, 766, 847, 366, 820, 367, 368, 0, 794,
	795, 0, 0, 371, 372, 0, 0, 373, 241, 864,
	374, 865, 875, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 876, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 390, 813, 391, 392, 0, 393, 394, 395,
	396, 397, 0, 399, 400, 398, 401, 402, 403, 404,
	0, 405, 866, 406, 407, 408, 409, 754, 410, 0,
	414, 415, 416, 417, 418, 419, 420, 0, 426, 427,
	786, 787, 788, 789, 422, 428, 429, 840, 430, 411,
	412, 431, 867, 432, 811, 790, 434, 0, 444, 435,
	436, 437, 413, 438, 442, 851, 439, 440, 441, 877,
	0, 445, 446, 0, 447, 448, 449, 450, 451, 309,
	452, 310, 784, 454, 0, 826, 827, 828, 829, 0,
	0, 456, 457, 878, 879, 764, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 841, 467, 0,
	791, 468, 469, 470, 254, 870, 0, 472, 471, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	746, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 742, 743, 1434, 797, 758, 759, 756,
	757, 769, 755, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 843, 772, 0, 0, 0, 263, 264, 265,
	215, 812, 793, 823, 781, 822, 821, 0, 269, 270,
	783, 782, 273, 274, 275, 773, 842, 276, 869, 868,
	221, 0, 277, 849, 0, 832, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 852, 290, 291, 835, 833, 834, 839,
	837, 836, 838, 292, 293, 500, 294, 825, 296, 819,
	818, 748, 297, 0, 298, 0, 299, 0, 0, 817,
	301, 0, 302, 303, 0, 304, 0, 753, 305, 306,
	308, 311, 307, 312, 313, 871, 872, 765, 853, 0,
	0, 0, 0, 0, 314, 315, 316, 816, 814, 815,
	0, 319, 0, 320, 0, 0, 854, 321, 0, 322,
	873, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	844, 845, 848, 856, 0, 846, 792, 0, 0, 0,
	1746, 329, 331, 338, 0, 855, 332, 805, 796, 806,
	807, 808, 809, 810, 0, 798, 0, 339, 857, 858,
	340, 341, 342, 859, 830, 831, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 350, 874, 860, 351, 352,
	861, 0, 353, 354, 0, 0, 355, 0, 356, 750,
	749, 357, 358, 360, 785, 359, 862, 362, 363, 365,
	364, 745, 0, 863, 766, 847, 366, 820, 367, 368,
	0, 794, 795, 0, 0, 371, 372, 0, 0, 373,
	241, 864, 374, 865, 875, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 876, 383, 244, 384, 1745, 385,
	386, 387, 388, 389, 390, 813, 391, 392, 0, 393,
	394, 395, 396, 397, 0, 399, 400, 398, 401, 402,
	403, 404, 0, 405, 866, 406, 407, 408, 409, 754,
	410, 0, 414, 415, 416, 417, 418, 419, 420, 0,
	426, 427, 786, 787, 788, 789, 422, 428, 429, 840,
	430, 411, 412, 431, 867, 432, 811, 790, 434, 0,
	444, 435, 436, 437, 413, 438, 442, 851, 439, 440,
	441, 877, 0, 445, 446, 0, 447, 448, 449, 450,
	451, 309, 452, 310, 784, 454, 0, 826, 827, 828,
	829, 0, 0, 456, 457, 878, 879, 764, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 841,
	467, 0, 791, 468, 469, 470, 254, 870, 0, 472,
	471, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 746, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 742, 743, 0, 0, 0,
	0, 0, 0, 0, 755, 0, 0, 0, 0, 738,
	768, 797, 758, 759, 756, 757, 769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 843, 772, 0,
	0, 0, 263, 264, 265, 215, 812, 793, 823, 781,
	822, 821, 0, 269, 270, 783, 782, 273, 274, 275,
	773, 842, 276, 869, 868, 221, 0, 277, 849, 0,
	832, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 852, 290,
	291, 835, 833, 834, 839, 837, 836, 838, 292, 293,
	500, 294, 825, 296, 819, 818, 748, 297, 0, 298,
	0, 299, 0, 0, 817, 301, 0, 302, 303, 0,
	304, 0, 753, 305, 306, 308, 311, 307, 312, 313,
	871, 872, 765, 853, 0, 0, 0, 0, 0, 314,
	315, 316, 816, 814, 815, 0, 319, 0, 320, 0,
	0, 854, 321, 0, 322, 873, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 844, 845, 848, 856, 0,
	846, 792, 0, 0, 0, 0, 329, 331, 338, 0,
	855, 332, 805, 796, 806, 807, 808, 809, 810, 0,
	798, 0, 339, 857, 858, 340, 341, 342, 859, 830,
	831, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 874, 860, 351, 352, 861, 0, 353, 354, 0,
	0, 355, 0, 356, 750, 749, 357, 358, 360, 785,
	359, 862, 362, 363, 365, 364, 745, 0, 863, 766,
	847, 366, 820, 367, 368, 0, 794, 795, 740, 0,
	371, 372, 0, 0, 373, 241, 864, 374, 865, 875,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 876,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	813, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 866,
	406, 407, 408, 409, 754, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 786, 787, 788,
	789, 422, 428, 429, 840, 430, 411, 412, 431, 867,
	432, 811, 790, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 851, 439, 440, 441, 877, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 784,
	454, 0, 826, 827, 828, 829, 0, 0, 456, 457,
	878, 879, 764, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 841, 467, 0, 791, 468, 469,
	470, 254, 870, 0, 472, 471, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 746, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	742, 743, 797, 758, 759, 756, 757, 769, 0, 755,
	0, 0, 0, 0, 0, 768, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 843, 772,
	0, 0, 0, 263, 264, 265, 215, 812, 793, 823,
	781, 822, 821, 0, 269, 270, 783, 782, 273, 274,
	275, 773, 842, 276, 869, 868, 221, 0, 277, 849,
	0, 832, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 852,
	290, 291, 835, 833, 834, 839, 837, 836, 838, 292,
	293, 500, 294, 825, 296, 819, 818, 748, 297, 0,
	298, 0, 299, 0, 0, 817, 301, 0, 302, 303,
	0, 304, 0, 753, 305, 306, 308, 311, 307, 312,
	313, 871, 872, 765, 853, 0, 0, 0, 0, 0,
	314, 315, 316, 816, 814, 815, 0, 319, 0, 320,
	0, 0, 854, 321, 0, 322, 873, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 844, 845, 848, 856,
	0, 846, 792, 0, 0, 0, 0, 329, 331, 338,
	0, 855, 332, 805, 796, 806, 807, 808, 809, 810,
	0, 798, 0, 339, 857, 858, 340, 341, 342, 859,
	830, 831, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 350, 874, 860, 351, 352, 861, 0, 353, 354,
	0, 0, 355, 0, 356, 750, 749, 357, 358, 360,
	785, 359, 862, 362, 363, 365, 364, 745, 0, 863,
	766, 847, 366, 820, 367, 368, 0, 794, 795, 0,
	0, 371, 372, 0, 0, 373, 241, 864, 374, 865,
	875, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	876, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	390, 813, 391, 392, 0, 393, 394, 395, 396, 397,
	0, 399, 400, 398, 401, 402, 403, 404, 0, 405,
	866, 406, 407, 408, 409, 754, 410, 0, 414, 415,
	416, 417, 418, 419, 420, 0, 426, 427, 786, 787,
	788, 789, 422, 428, 429, 840, 430, 411, 412, 431,
	867, 432, 811, 790, 434, 0, 444, 435, 436, 437,
	413, 438, 442, 851, 439, 440, 441, 877, 0, 445,
	446, 0, 447, 448, 449, 450, 451, 309, 452, 310,
	784, 454, 0, 826, 827, 828, 829, 0, 0, 456,
	457, 878, 879, 764, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 841, 467, 0, 791, 468,
	469, 470, 254, 870, 2526, 472, 471, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 746, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 742, 743, 797, 758, 759, 756, 757, 769, 0,
	755, 0, 0, 0, 0, 0, 768, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 843,
	772, 0, 0, 0, 263, 264, 265, 215, 812, 793,
	823, 781, 822, 821, 0, 269, 270, 783, 782, 273,
	274, 275, 773, 842, 276, 869, 868, 221, 0, 277,
	849, 0, 832, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	852, 290, 291, 835, 833, 834, 839, 837, 836, 838,
	292, 293, 500, 294, 825, 296, 819, 818, 748, 297,
	0, 298, 0, 299, 0, 0, 817, 301, 0, 302,
	303, 0, 304, 0, 753, 305, 306, 308, 311, 307,
	312, 313, 871, 872, 765, 853, 0, 0, 0, 0,
	0, 314, 315, 316, 816, 814, 815, 0, 319, 0,
	320, 0, 0, 854, 321, 0, 322, 873, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 844, 845, 848,
	856, 0, 846, 792, 0, 0, 0, 0, 329, 331,
	338, 0, 855, 332, 805, 796, 806, 807, 808, 809,
	810, 0, 798, 0, 339, 857, 858, 340, 341, 342,
	859, 830, 831, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 874, 860, 351, 352, 861, 0, 353,
	354, 0, 0, 355, 0, 356, 750, 749, 357, 358,
	360, 785, 359, 862, 362, 363, 365, 364, 745, 0,
	863, 766, 847, 366, 820, 367, 368, 0, 794, 795,
	740, 0, 371, 372, 0, 0, 373, 241, 864, 374,
	865, 875, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 876, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 813, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 866, 406, 407, 408, 409, 754, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 786,
	787, 788, 789, 422, 428, 429, 840, 430, 411, 412,
	431, 867, 432, 811, 790, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 851, 439, 440, 441, 877, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 784, 454, 0, 826, 827, 828, 829, 0, 0,
	456, 457, 878, 879, 764, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 841, 467, 0, 791,
	468, 469, 470, 254, 870, 0, 472, 471, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 746,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 742, 743, 797, 758, 759, 756, 757, 769,
	0, 755, 0, 0, 0, 0, 0, 768, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	843, 772, 0, 0, 0, 263, 264, 265, 215, 812,
	793, 823, 781, 822, 821, 0, 269, 270, 783, 782,
	273, 274, 275, 773, 842, 276, 869, 868, 221, 0,
	277, 849, 0, 832, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 852, 290, 291, 835, 833, 834, 839, 837, 836,
	838, 292, 293, 500, 294, 825, 296, 819, 818, 748,
	297, 0, 298, 0, 299, 0, 0, 817, 301, 0,
	302, 303, 0, 304, 0, 753, 305, 306, 308, 311,
	307, 312, 313, 871, 872, 765, 853, 0, 0, 0,
	0, 0, 314, 315, 316, 816, 814, 815, 0, 319,
	0, 320, 0, 0, 854, 321, 0, 322, 873, 0,
	230, 0, 323, 324, 325, 326, 327, 328, 844, 845,
	848, 856, 0, 846, 792, 0, 0, 0, 0, 329,
	331, 338, 0, 855, 332, 805, 796, 806, 807, 808,
	809, 810, 0, 798, 0, 339, 857, 858, 340, 341,
	342, 859, 830, 831, 0, 0, 345, 346, 347, 0,
	349, 348, 0, 350, 874, 860, 351, 352, 861, 0,
	353, 354, 0, 0, 355, 0, 356, 750, 749, 357,
	358, 360, 785, 359, 862, 362, 363, 365, 364, 745,
	0, 863, 766, 847, 366, 820, 367, 368, 0, 794,
	795, 0, 0, 371, 372, 0, 0, 373, 241, 864,
	374, 865, 875, 375, 376, 377, 378, 379, 380, 381,
	0, 382, 876, 383, 244, 384, 0, 385, 386, 387,
	388, 389, 390, 813, 391, 392, 0, 393, 394, 395,
	396, 397, 0, 399, 400, 398, 401, 402, 403, 404,
	0, 405, 866, 406, 407, 408, 409, 754, 410, 0,
	414, 415, 416, 417, 418, 419, 420, 0, 426, 427,
	786, 787, 788, 789, 422, 428, 429, 840, 430, 411,
	412, 431, 867, 432, 811, 790, 434, 0, 444, 435,
	436, 437, 413, 438, 442, 851, 439, 440, 441, 877,
	0, 445, 446, 0, 447, 448, 449, 450, 451, 309,
	452, 310, 784, 454, 0, 826, 827, 828, 829, 0,
	0, 456, 457, 878, 879, 764, 458, 459, 0, 460,
	461, 0, 0, 462, 463, 464, 466, 841, 467, 0,
	791, 468, 469, 470, 254, 870, 0, 472, 471, 256,
	0, 0, 0, 0, 473, 474, 257, 475, 476, 477,
	746, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 742, 743, 1434, 797, 758, 759, 756,
	757, 769, 755, 0, 0, 0, 0, 0, 768, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 843, 772, 0, 0, 0, 263, 264, 265,
	215, 812, 793, 823, 781, 822, 821, 0, 269, 270,
	783, 782, 273, 274, 275, 773, 842, 276, 869, 868,
	221, 0, 277, 849, 0, 832, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 852, 290, 291, 835, 833, 834, 839,
	837, 836, 838, 292, 293, 500, 294, 825, 296, 819,
	818, 748, 297, 0, 298, 0, 299, 0, 0, 817,
	301, 0, 302, 303, 0, 304, 0, 753, 305, 306,
	308, 311, 307, 312, 313, 871, 872, 765, 853, 0,
	0, 0, 0, 0, 314, 315, 316, 816, 814, 815,
	0, 319, 0, 320, 0, 1925, 854, 321, 0, 322,
	873, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	844, 845, 848, 856, 0, 846, 792, 0, 0, 0,
	0, 329, 331, 338, 0, 855, 332, 805, 796, 806,
	807, 808, 809, 810, 0, 798, 0, 339, 857, 858,
	340, 341, 342, 859, 830, 831, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 350, 874, 860, 351, 352,
	861, 0, 353, 354, 0, 0, 355, 0, 356, 750,
	749, 357, 358, 360, 785, 359, 862, 362, 363, 365,
	364, 745, 0, 863, 766, 847, 366, 820, 367, 368,
	0, 794, 795, 0, 0, 371, 372, 0, 0, 373,
	241, 864, 374, 865, 875, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 876, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 390, 813, 391, 392, 0, 393,
	394, 395, 396, 397, 0, 399, 400, 398, 401, 402,
	403, 404, 0, 405, 866, 406, 407, 408, 409, 754,
	410, 0, 414, 415, 416, 417, 418, 419, 420, 0,
	426, 427, 786, 787, 788, 789, 422, 428, 429, 840,
	430, 411, 412, 431, 867, 432, 811, 790, 434, 0,
	444, 435, 436, 437, 413, 438, 442, 851, 439, 440,
	441, 877, 0, 445, 446, 0, 447, 448, 449, 450,
	451, 309, 452, 310, 784, 454, 0, 826, 827, 828,
	829, 0, 0, 456, 457, 878, 879, 764, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 841,
	467, 0, 791, 468, 469, 470, 254, 870, 0, 472,
	471, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 746, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 742, 743, 0, 0, 0,
	0, 0, 0, 0, 755, 0, 0, 0, 0, 1916,
	768, 797, 758, 759, 756, 757, 769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 843, 772, 0,
	0, 0, 263, 264, 265, 215, 812, 793, 823, 781,
	822, 821, 0, 269, 270, 783, 782, 273, 274, 275,
	773, 842, 276, 869, 868, 221, 0, 277, 849, 0,
	832, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 852, 290,
	291, 835, 833, 834, 839, 837, 836, 838, 292, 293,
	500, 294, 825, 296, 819, 818, 748, 297, 0, 298,
	0, 299, 0, 0, 817, 301, 0, 302, 303, 0,
	304, 0, 753, 305, 306, 308, 311, 307, 312, 313,
	871, 872, 765, 853, 0, 0, 0, 0, 0, 314,
	315, 316, 816, 814, 815, 0, 319, 0, 320, 0,
	0, 854, 321, 0, 322, 873, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 844, 845, 848, 856, 0,
	846, 792, 0, 0, 0, 0, 329, 331, 338, 0,
	855, 332, 805, 796, 806, 807, 808, 809, 810, 0,
	798, 0, 339, 857, 858, 340, 341, 342, 859, 830,
	831, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 874, 860, 351, 352, 861, 0, 353, 354, 0,
	0, 355, 0, 356, 750, 749, 357, 358, 360, 785,
	359, 862, 362, 363, 365, 364, 745, 0, 863, 766,
	847, 366, 820, 367, 368, 0, 794, 795, 0, 0,
	371, 372, 0, 0, 373, 241, 864, 374, 865, 875,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 876,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	813, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 866,
	406, 407, 408, 409, 754, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 786, 787, 788,
	789, 422, 428, 429, 840, 430, 411, 412, 431, 867,
	432, 811, 790, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 851, 439, 440, 441, 877, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 784,
	454, 0, 826, 827, 828, 829, 0, 0, 456, 457,
	878, 879, 764, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 841, 467, 0, 791, 468, 469,
	470, 254, 870, 0, 472, 471, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 746, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	742, 743, 0, 0, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 1905, 768, 797, 758, 759, 756,
	757, 769, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 843, 772, 0, 0, 0, 263, 264, 265,
	215, 812, 793, 823, 781, 822, 821, 0, 269, 270,
	783, 782, 273, 274, 275, 773, 842, 276, 869, 868,
	221, 0, 277, 849, 0, 832, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 852, 290, 291, 835, 833, 834, 839,
	837, 836, 838, 292, 293, 500, 294, 825, 296, 819,
	818, 748, 297, 0, 298, 0, 299, 0, 0, 817,
	301, 0, 302, 303, 0, 304, 0, 753, 305, 306,
	308, 311, 307, 312, 313, 871, 872, 765, 853, 0,
	0, 0, 0, 0, 314, 315, 316, 816, 814, 815,
	0, 319, 0, 320, 0, 0, 854, 321, 0, 322,
	873, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	844, 845, 848, 856, 0, 846, 792, 0, 0, 0,
	0, 329, 331, 338, 0, 855, 332, 805, 796, 806,
	807, 808, 809, 810, 0, 798, 0, 339, 857, 858,
	340, 341, 342, 859, 830, 831, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 350, 874, 860, 351, 352,
	861, 0, 353, 354, 0, 0, 355, 0, 356, 750,
	749, 357, 358, 360, 785, 359, 862, 362, 363, 365,
	364, 745, 0, 863, 766, 847, 366, 820, 367, 368,
	0, 794, 795, 0, 0, 371, 372, 0, 0, 373,
	241, 864, 374, 865, 875, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 876, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 390, 813, 391, 392, 0, 393,
	394, 395, 396, 397, 0, 399, 400, 398, 401, 402,
	403, 404, 0, 405, 866, 406, 407, 408, 409, 754,
	410, 0, 414, 415, 416, 417, 418, 419, 420, 0,
	426, 427, 786, 787, 788, 789, 422, 428, 429, 840,
	430, 411, 412, 431, 867, 432, 811, 790, 434, 0,
	444, 435, 436, 437, 413, 438, 442, 851, 439, 440,
	441, 877, 0, 445, 446, 0, 447, 448, 449, 450,
	451, 309, 452, 310, 784, 454, 0, 826, 827, 828,
	829, 0, 0, 456, 457, 878, 879, 764, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 841,
	467, 0, 791, 468, 469, 470, 254, 870, 0, 472,
	471, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 746, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 742, 743, 0, 0, 0,
	0, 0, 0, 0, 755, 0, 0, 0, 0, 1903,
	768, 797, 758, 759, 756, 757, 769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 843, 772, 0,
	0, 0, 263, 264, 265, 215, 812, 793, 823, 781,
	822, 821, 0, 269, 270, 783, 782, 273, 274, 275,
	773, 842, 276, 869, 868, 221, 0, 277, 849, 0,
	832, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 852, 290,
	291, 835, 833, 834, 839, 837, 836, 838, 292, 293,
	500, 294, 825, 296, 819, 818, 748, 297, 0, 298,
	0, 299, 0, 0, 817, 301, 0, 302, 303, 0,
	304, 0, 753, 305, 306, 308, 311, 307, 312, 313,
	871, 872, 765, 853, 0, 0, 0, 0, 0, 314,
	315, 316, 816, 814, 815, 0, 319, 0, 320, 0,
	0, 854, 321, 0, 322, 873, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 844, 845, 848, 856, 0,
	846, 792, 0, 0, 0, 0, 329, 331, 338, 0,
	855, 332, 805, 796, 806, 807, 808, 809, 810, 0,
	798, 0, 339, 857, 858, 340, 341, 342, 859, 830,
	831, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 874, 860, 351, 352, 861, 0, 353, 354, 0,
	0, 355, 0, 356, 750, 749, 357, 358, 360, 785,
	359, 862, 362, 363, 365, 364, 745, 0, 863, 766,
	847, 366, 820, 367, 368, 0, 794, 795, 0, 0,
	371, 372, 0, 0, 373, 241, 864, 374, 865, 875,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 876,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	813, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 866,
	406, 407, 408, 409, 754, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 786, 787, 788,
	789, 422, 428, 429, 840, 430, 411, 412, 431, 867,
	432, 811, 790, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 851, 439, 440, 441, 877, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 784,
	454, 0, 826, 827, 828, 829, 0, 0, 456, 457,
	878, 879, 764, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 841, 467, 0, 791, 468, 469,
	470, 254, 870, 0, 472, 471, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 746, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	742, 743, 0, 0, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 1901, 768, 797, 758, 759, 756,
	757, 769, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 843, 772, 0, 0, 0, 263, 264, 265,
	215, 812, 793, 823, 781, 822, 821, 0, 269, 270,
	783, 782, 273, 274, 275, 773, 842, 276, 869, 868,
	221, 0, 277, 849, 0, 832, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 852, 290, 291, 835, 833, 834, 839,
	837, 836, 838, 292, 293, 500, 294, 825, 296, 819,
	818, 748, 297, 0, 298, 0, 299, 0, 0, 817,
	301, 0, 302, 303, 0, 304, 0, 753, 305, 306,
	308, 311, 307, 312, 313, 871, 872, 765, 853, 0,
	0, 0, 0, 0, 314, 315, 316, 816, 814, 815,
	0, 319, 0, 320, 0, 0, 854, 321, 0, 322,
	873, 0, 230, 0, 323, 324, 325, 326, 327, 328,
	844, 845, 848, 856, 0, 846, 792, 0, 0, 0,
	0, 329, 331, 338, 0, 855, 332, 805, 796, 806,
	807, 808, 809, 810, 0, 798, 0, 339, 857, 858,
	340, 341, 342, 859, 830, 831, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 350, 874, 860, 351, 352,
	861, 0, 353, 354, 0, 0, 355, 0, 356, 750,
	749, 357, 358, 360, 785, 359, 862, 362, 363, 365,
	364, 745, 0, 863, 766, 847, 366, 820, 367, 368,
	0, 794, 795, 0, 0, 371, 372, 0, 0, 373,
	241, 864, 374, 865, 875, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 876, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 390, 813, 391, 392, 0, 393,
	394, 395, 396, 397, 0, 399, 400, 398, 401, 402,
	403, 404, 0, 405, 866, 406, 407, 408, 409, 754,
	410, 0, 414, 415, 416, 417, 418, 419, 420, 0,
	426, 427, 786, 787, 788, 789, 422, 428, 429, 840,
	430, 411, 412, 431, 867, 432, 811, 790, 434, 0,
	444, 435, 436, 437, 413, 438, 442, 851, 439, 440,
	441, 877, 0, 445, 446, 0, 447, 448, 449, 450,
	451, 309, 452, 310, 784, 454, 0, 826, 827, 828,
	829, 0, 0, 456, 457, 878, 879, 764, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 841,
	467, 0, 791, 468, 469, 470, 254, 870, 0, 472,
	471, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	476, 477, 746, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 742, 743, 0, 0, 0,
	0, 0, 0, 0, 755, 0, 0, 0, 0, 1899,
	768, 1891, 758, 759, 756, 757, 769, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 843, 772, 0,
	0, 0, 263, 264, 265, 215, 812, 793, 823, 781,
	822, 821, 0, 269, 270, 783, 782, 273, 274, 275,
	773, 842, 276, 869, 868, 221, 0, 277, 849, 0,
	832, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 852, 290,
	291, 835, 833, 834, 839, 837, 836, 838, 292, 293,
	500, 294, 825, 1894, 819, 818, 748, 297, 0, 298,
	0, 299, 0, 0, 817, 301, 0, 302, 303, 0,
	304, 0, 753, 305, 306, 308, 311, 307, 312, 313,
	871, 872, 765, 853, 0, 0, 0, 0, 0, 314,
	315, 316, 816, 814, 815, 0, 319, 0, 320, 0,
	0, 854, 321, 0, 322, 873, 0, 230, 0, 323,
	324, 1895, 326, 327, 328, 844, 845, 848, 856, 0,
	846, 792, 0, 0, 0, 0, 329, 331, 338, 0,
	855, 332, 805, 796, 806, 807, 808, 809, 810, 0,
	798, 0, 339, 857, 858, 340, 341, 342, 859, 830,
	831, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 874, 860, 351, 352, 861, 0, 353, 354, 0,
	0, 355, 0, 356, 750, 749, 1896, 1893, 360, 785,
	359, 862, 362, 363, 365, 364, 745, 0, 863, 766,
	847, 366, 820, 367, 368, 0, 794, 795, 0, 0,
	371, 372, 0, 0, 373, 241, 864, 374, 865, 875,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 876,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	813, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 866,
	406, 407, 408, 409, 754, 410, 0, 414, 415, 416,
	417, 418, 419, 1897, 0, 426, 427, 786, 787, 788,
	789, 422, 428, 429, 840, 430, 411, 412, 431, 867,
	432, 811, 790, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 851, 439, 440, 441, 877, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 784,
	454, 0, 826, 827, 828, 829, 0, 0, 456, 457,
	878, 879, 764, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 841, 467, 0, 791, 468, 469,
	470, 254, 870, 0, 472, 471, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 1892, 477, 746, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	742, 743, 0, 0, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 1888, 768, 1891, 758, 759, 756,
	757, 769, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 843, 772, 0, 0, 0, 263, 264, 265,
	215, 812, 793, 823, 781, 822, 821, 0, 269, 270,
	783, 782, 273, 274, 275, 773, 842, 276, 869, 868,
	221, 0, 277, 849, 0, 832, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 852, 290, 291, 835, 833, 834, 839,
	837, 836, 838, 292, 293, 500, 294, 825, 1894, 819,
	818, 748, 297, 0, 298, 0, 299, 0, 0, 817,
	301, 0, 302, 303, 0, 304, 0, 753, 305, 306,
	308, 311, 307, 312, 313, 871, 872, 765, 853, 0,
	0, 0, 0, 0, 314, 315, 316, 816, 814, 815,
	0, 319, 0, 320, 0, 0, 854, 321, 0, 322,
	873, 0, 230, 0, 323, 324, 1895, 326, 327, 328,
	844, 845, 848, 856, 0, 846, 792, 0, 0, 0,
	0, 329, 331, 338, 0, 855, 332, 805, 796, 806,
	807, 808, 809, 810, 0, 798, 0, 339, 857, 858,
	340, 341, 342, 859, 830, 831, 0, 0, 345, 346,
	347, 0, 349, 348, 0, 350, 874, 860, 351, 352,
	861, 0, 353, 354, 0, 0, 355, 0, 356, 750,
	749, 1896, 1893, 360, 785, 359, 862, 362, 363, 365,
	364, 745, 0, 863, 766, 847, 366, 820, 367, 368,
	0, 794, 795, 0, 0, 371, 372, 0, 0, 373,
	241, 864, 374, 865, 875, 375, 376, 377, 378, 379,
	380, 381, 0, 382, 876, 383, 244, 384, 0, 385,
	386, 387, 388, 389, 390, 813, 391, 392, 0, 393,
	394, 395, 396, 397, 0, 399, 400, 398, 401, 402,
	403, 404, 0, 405, 866, 406, 407, 408, 409, 754,
	410, 0, 414, 415, 416, 417, 418, 419, 1897, 0,
	426, 427, 786, 787, 788, 789, 422, 428, 429, 840,
	430, 411, 412, 431, 867, 432, 811, 790, 434, 0,
	444, 435, 436, 437, 413, 438, 442, 851, 439, 440,
	441, 877, 0, 445, 446, 0, 447, 448, 449, 450,
	451, 309, 452, 310, 784, 454, 0, 826, 827, 828,
	829, 0, 0, 456, 457, 878, 879, 764, 458, 459,
	0, 460, 461, 0, 0, 462, 463, 464, 466, 841,
	467, 0, 791, 468, 469, 470, 254, 870, 0, 472,
	471, 256, 0, 0, 0, 0, 473, 474, 257, 475,
	1892, 477, 746, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 0, 742, 743, 797, 758, 759,
	756, 757, 769, 0, 755, 0, 0, 0, 0, 0,
	768, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 843, 772, 0, 0, 0, 263, 264,
	265, 215, 812, 793, 823, 781, 822, 821, 0, 269,
	270, 783, 782, 273, 274, 275, 773, 842, 276, 869,
	868, 221, 0, 277, 849, 0, 832, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 852, 290, 291, 835, 833, 834,
	839, 837, 836, 838, 292, 293, 500, 294, 825, 296,
	819, 818, 748, 297, 0, 298, 0, 299, 0, 0,
	817, 301, 0, 302, 303, 0, 304, 0, 753, 305,
	306, 308, 311, 307, 312, 313, 871, 872, 765, 853,
	0, 0, 0, 0, 0, 314, 315, 316, 816, 814,
	815, 0, 319, 0, 320, 0, 0, 854, 321, 0,
	322, 873, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 844, 845, 848, 856, 0, 846, 792, 0, 0,
	0, 0, 329, 331, 338, 0, 855, 332, 805, 796,
	806, 807, 808, 809, 810, 0, 798, 0, 339, 857,
	858, 340, 341, 342, 859, 830, 831, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 874, 860, 351,
	352, 861, 0, 353, 354, 0, 0, 355, 0, 356,
	750, 749, 357, 358, 360, 785, 359, 862, 362, 363,
	365, 364, 745, 0, 863, 766, 847, 366, 820, 367,
	368, 0, 794, 795, 0, 0, 371, 372, 0, 0,
	373, 241, 864, 374, 865, 875, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 876, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 813, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 866, 406, 407, 408, 409,
	754, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 786, 787, 788, 789, 422, 428, 429,
	840, 430, 411, 412, 431, 867, 432, 811, 790, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 851, 439,
	440, 441, 877, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 784, 454, 0, 826, 827,
	828, 829, 0, 0, 456, 457, 878, 879, 764, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	841, 467, 0, 791, 468, 469, 470, 254, 870, 0,
	472, 471, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 746, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 742, 743, 0, 0,
	0, 0, 0, 1378, 0, 755, 0, 0, 0, 0,
	0, 768, 797, 758, 759, 756, 757, 769, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 1733, 262, 0, 0, 0, 0, 843, 772,
	0, 0, 0, 263, 264, 265, 215, 812, 793, 823,
	781, 822, 821, 0, 269, 270, 783, 782, 273, 274,
	275, 773, 842, 276, 869, 868, 221, 0, 277, 849,
	0, 832, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 852,
	290, 291, 835, 833, 834, 839, 837, 836, 838, 292,
	293, 500, 294, 825, 296, 819, 818, 748, 297, 0,
	298, 0, 299, 0, 0, 817, 301, 0, 302, 303,
	0, 304, 0, 753, 305, 306, 308, 311, 307, 312,
	313, 871, 872, 765, 853, 0, 0, 0, 0, 0,
	314, 315, 316, 816, 814, 815, 0, 319, 0, 320,
	0, 0, 854, 321, 0, 322, 873, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 844, 845, 848, 856,
	0, 846, 792, 0, 0, 0, 0, 329, 331, 338,
	0, 855, 332, 805, 796, 806, 807, 808, 809, 810,
	0, 798, 0, 339, 857, 858, 340, 341, 342, 859,
	830, 831, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 350, 874, 860, 351, 352, 861, 0, 353, 354,
	0, 0, 355, 0, 356, 750, 749, 357, 358, 360,
	785, 359, 862, 362, 363, 365, 364, 745, 0, 863,
	766, 847, 366, 820, 367, 368, 0, 794, 795, 0,
	0, 371, 372, 0, 0, 373, 241, 864, 374, 865,
	875, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	876, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	390, 813, 391, 392, 0, 393, 394, 395, 396, 397,
	0, 399, 400, 398, 401, 402, 403, 404, 0, 405,
	866, 406, 407, 408, 409, 754, 410, 0, 414, 415,
	416, 417, 418, 419, 420, 0, 426, 427, 786, 787,
	788, 789, 422, 428, 429, 840, 430, 411, 412, 431,
	867, 432, 811, 790, 434, 0, 444, 435, 436, 437,
	413, 438, 442, 851, 439, 440, 441, 877, 0, 445,
	446, 0, 447, 448, 449, 450, 451, 309, 452, 310,
	784, 454, 0, 826, 827, 828, 829, 0, 0, 456,
	457, 878, 879, 764, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 841, 467, 0, 791, 468,
	469, 470, 254, 870, 0, 472, 471, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 746, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 742, 743, 0, 0, 0, 0, 0, 0, 0,
	755, 0, 0, 0, 0, 1075, 768, 797, 758, 759,
	756, 757, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 843, 772, 0, 0, 0, 263, 264,
	265, 215, 812, 793, 823, 781, 822, 821, 0, 269,
	270, 783, 782, 273, 274, 275, 773, 842, 276, 869,
	868, 221, 0, 277, 849, 0, 832, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 852, 290, 291, 835, 833, 834,
	839, 837, 836, 838, 292, 293, 500, 294, 825, 296,
	819, 818, 748, 297, 0, 298, 0, 299, 0, 0,
	817, 301, 0, 302, 303, 0, 304, 0, 753, 305,
	306, 308, 311, 307, 312, 313, 871, 872, 765, 853,
	0, 0, 0, 0, 0, 314, 315, 316, 816, 814,
	815, 0, 319, 0, 320, 0, 0, 854, 321, 0,
	322, 873, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 1074, 845, 848, 856, 0, 846, 792, 0, 0,
	0, 0, 329, 331, 338, 0, 855, 332, 805, 796,
	806, 807, 808, 809, 810, 0, 798, 0, 339, 857,
	858, 340, 341, 342, 859, 830, 831, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 874, 860, 351,
	352, 861, 0, 353, 354, 0, 0, 355, 0, 356,
	750, 749, 357, 358, 360, 785, 359, 862, 362, 363,
	365, 364, 745, 0, 863, 766, 847, 366, 820, 367,
	368, 0, 794, 795, 0, 0, 371, 372, 0, 0,
	373, 241, 864, 374, 865, 875, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 876, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 813, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 866, 406, 407, 408, 409,
	754, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 786, 787, 788, 789, 422, 428, 429,
	840, 430, 411, 412, 431, 867, 432, 811, 790, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 851, 439,
	440, 441, 877, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 784, 454, 0, 826, 827,
	828, 829, 0, 0, 456, 457, 878, 879, 764, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	841, 467, 0, 791, 468, 469, 470, 254, 870, 0,
	472, 471, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 746, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 742, 743, 0, 0,
	0, 0, 0, 0, 0, 755, 0, 0, 0, 0,
	1069, 768, 797, 758, 759, 756, 757, 769, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 843, 772,
	0, 0, 0, 263, 264, 265, 215, 812, 793, 823,
	781, 822, 821, 0, 269, 270, 783, 782, 273, 274,
	275, 773, 842, 276, 869, 868, 221, 0, 277, 849,
	0, 832, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 852,
	290, 291, 835, 833, 834, 839, 837, 836, 838, 292,
	293, 500, 294, 825, 296, 819, 818, 748, 297, 0,
	298, 0, 299, 0, 0, 817, 301, 0, 302, 303,
	0, 304, 0, 753, 305, 306, 308, 311, 307, 312,
	313, 871, 872, 765, 853, 0, 0, 0, 0, 0,
	314, 315, 316, 816, 814, 815, 0, 319, 0, 320,
	0, 0, 854, 321, 0, 322, 873, 0, 230, 0,
	323, 324, 325, 326, 327, 328, 1068, 845, 848, 856,
	0, 846, 792, 0, 0, 0, 0, 329, 331, 338,
	0, 855, 332, 805, 796, 806, 807, 808, 809, 810,
	0, 798, 0, 339, 857, 858, 340, 341, 342, 859,
	830, 831, 0, 0, 345, 346, 347, 0, 349, 348,
	0, 350, 874, 860, 351, 352, 861, 0, 353, 354,
	0, 0, 355, 0, 356, 750, 749, 357, 358, 360,
	785, 359, 862, 362, 363, 365, 364, 745, 0, 863,
	766, 847, 366, 820, 367, 368, 0, 794, 795, 0,
	0, 371, 372, 0, 0, 373, 241, 864, 374, 865,
	875, 375, 376, 377, 378, 379, 380, 381, 0, 382,
	876, 383, 244, 384, 0, 385, 386, 387, 388, 389,
	390, 813, 391, 392, 0, 393, 394, 395, 396, 397,
	0, 399, 400, 398, 401, 402, 403, 404, 0, 405,
	866, 406, 407, 408, 409, 754, 410, 0, 414, 415,
	416, 417, 418, 419, 420, 0, 426, 427, 786, 787,
	788, 789, 422, 428, 429, 840, 430, 411, 412, 431,
	867, 432, 811, 790, 434, 0, 444, 435, 436, 437,
	413, 438, 442, 851, 439, 440, 441, 877, 0, 445,
	446, 0, 447, 448, 449, 450, 451, 309, 452, 310,
	784, 454, 0, 826, 827, 828, 829, 0, 0, 456,
	457, 878, 879, 764, 458, 459, 0, 460, 461, 0,
	0, 462, 463, 464, 466, 841, 467, 0, 791, 468,
	469, 470, 254, 870, 0, 472, 471, 256, 0, 0,
	0, 0, 473, 474, 257, 475, 476, 477, 746, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	0, 742, 743, 0, 0, 0, 0, 0, 0, 0,
	755, 0, 0, 0, 0, 1064, 768, 797, 758, 759,
	756, 757, 769, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 843, 772, 0, 0, 0, 263, 264,
	265, 215, 812, 793, 823, 781, 822, 821, 0, 269,
	270, 783, 782, 273, 274, 275, 773, 842, 276, 869,
	868, 221, 0, 277, 849, 0, 832, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 852, 290, 291, 835, 833, 834,
	839, 837, 836, 838, 292, 293, 500, 294, 825, 296,
	819, 818, 748, 297, 0, 298, 0, 299, 0, 0,
	817, 301, 0, 302, 303, 0, 304, 0, 753, 305,
	306, 308, 311, 307, 312, 313, 871, 872, 765, 853,
	0, 0, 0, 0, 0, 314, 315, 316, 816, 814,
	815, 0, 319, 0, 320, 0, 0, 854, 321, 0,
	322, 873, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 844, 845, 848, 856, 0, 846, 792, 0, 0,
	0, 0, 329, 331, 338, 0, 855, 332, 805, 796,
	806, 807, 808, 809, 810, 0, 798, 0, 339, 857,
	858, 340, 341, 342, 859, 830, 831, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 874, 860, 351,
	352, 861, 0, 353, 354, 0, 0, 355, 0, 356,
	750, 749, 357, 358, 360, 785, 359, 862, 362, 363,
	365, 364, 745, 0, 863, 766, 847, 366, 820, 367,
	368, 0, 794, 795, 0, 0, 371, 372, 0, 0,
	373, 241, 864, 374, 865, 875, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 876, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 813, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 866, 406, 407, 408, 409,
	754, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 786, 787, 788, 789, 422, 428, 429,
	840, 430, 411, 412, 431, 867, 432, 811, 790, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 851, 439,
	440, 441, 877, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 784, 454, 0, 826, 827,
	828, 829, 0, 0, 456, 457, 878, 879, 764, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	841, 467, 0, 791, 468, 469, 470, 254, 870, 0,
	472, 471, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 746, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 742, 743, 797, 758,
	759, 756, 757, 769, 0, 755, 0, 0, 0, 0,
	0, 768, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 843, 772, 0, 0, 0, 263,
	264, 265, 215, 812, 793, 823, 781, 822, 821, 0,
	269, 270, 783, 782, 273, 274, 275, 773, 842, 276,
	869, 868, 221, 0, 277, 849, 0, 832, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 852, 290, 291, 835, 833,
	834, 839, 837, 836, 838, 292, 293, 500, 294, 825,
	296, 819, 818, 748, 297, 0, 298, 0, 299, 0,
	0, 817, 301, 0, 302, 303, 0, 304, 0, 753,
	305, 306, 308, 311, 307, 312, 313, 871, 872, 765,
	853, 0, 0, 0, 0, 0, 314, 315, 316, 816,
	814, 815, 0, 319, 0, 320, 0, 0, 854, 321,
	0, 322, 873, 0, 230, 0, 323, 324, 325, 326,
	327, 328, 844, 845, 848, 856, 0, 846, 792, 0,
	0, 0, 0, 329, 331, 338, 0, 855, 332, 805,
	796, 806, 807, 808, 809, 810, 0, 798, 0, 339,
	857, 858, 340, 341, 342, 859, 830, 831, 0, 0,
	345, 346, 347, 0, 349, 348, 0, 350, 874, 860,
	351, 352, 861, 0, 353, 354, 0, 0, 355, 0,
	356, 750, 749, 357, 358, 360, 785, 359, 862, 362,
	363, 365, 364, 745, 0, 863, 766, 847, 366, 820,
	367, 368, 0, 794, 795, 0, 0, 371, 372, 0,
	0, 373, 241, 864, 374, 865, 875, 375, 376, 377,
	378, 379, 380, 381, 0, 382, 876, 383, 244, 384,
	0, 385, 386, 387, 388, 389, 390, 813, 391, 392,
	0, 393, 394, 395, 396, 397, 0, 399, 400, 398,
	401, 402, 403, 404, 0, 405, 866, 406, 407, 408,
	409, 754, 410, 0, 414, 415, 416, 417, 418, 419,
	420, 0, 426, 427, 786, 787, 788, 789, 422, 428,
	429, 840, 430, 411, 412, 431, 867, 432, 811, 790,
	434, 0, 444, 435, 436, 437, 413, 438, 442, 851,
	439, 440, 441, 877, 0, 445, 446, 0, 447, 448,
	449, 450, 451, 309, 452, 310, 784, 454, 0, 826,
	827, 828, 829, 0, 0, 456, 457, 878, 879, 764,
	458, 459, 0, 460, 461, 0, 0, 462, 463, 464,
	466, 841, 467, 0, 791, 468, 469, 470, 254, 870,
	0, 472, 471, 256, 0, 0, 0, 0, 473, 474,
	257, 475, 476, 477, 746, 0, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 0, 742, 743, 797,
	758, 759, 756, 757, 769, 0, 755, 0, 0, 0,
	0, 0, 768, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 843, 772, 0, 0, 0,
	263, 264, 265, 215, 812, 793, 823, 781, 822, 821,
	0, 269, 270, 783, 782, 273, 274, 275, 773, 842,
	276, 869, 868, 221, 0, 277, 849, 0, 832, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 852, 290, 3083, 835,
	833, 834, 839, 837, 836, 838, 292, 293, 500, 294,
	825, 296, 819, 818, 748, 297, 0, 298, 0, 299,
	0, 0, 817, 301, 0, 302, 303, 0, 304, 0,
	753, 305, 306, 308, 311, 307, 312, 313, 871, 872,
	765, 853, 0, 0, 0, 0, 0, 314, 315, 316,
	816, 814, 815, 0, 319, 0, 320, 0, 0, 854,
	321, 0, 322, 873, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 844, 845, 848, 856, 0, 846, 792,
	0, 0, 0, 0, 329, 331, 338, 0, 855, 332,
	805, 796, 806, 807, 808, 809, 810, 0, 798, 0,
	339, 857, 858, 340, 341, 342, 859, 830, 831, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 874,
	860, 351, 352, 861, 0, 353, 354, 0, 0, 355,
	0, 356, 750, 749, 357, 358, 360, 785, 359, 862,
	362, 363, 365, 364, 745, 0, 863, 766, 847, 366,
	820, 367, 368, 0, 794, 795, 0, 0, 371, 372,
	0, 0, 373, 241, 864, 374, 865, 875, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 876, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 813, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 866, 406, 407,
	408, 409, 754, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 786, 787, 788, 789, 422,
	428, 429, 840, 430, 411, 412, 431, 867, 432, 811,
	790, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	851, 439, 440, 441, 877, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 784, 454, 0,
	826, 827, 828, 829, 0, 0, 456, 457, 878, 879,
	764, 458, 459, 0, 3082, 461, 0, 0, 462, 463,
	464, 466, 841, 467, 0, 791, 468, 469, 470, 254,
	870, 0, 472, 471, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 746, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 742, 743,
	797, 758, 759, 756, 757, 769, 0, 755, 0, 0,
	0, 0, 0, 768, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 843, 772, 0, 0,
	0, 263, 264, 265, 3081, 812, 793, 823, 781, 822,
	821, 0, 269, 270, 783, 782, 273, 274, 275, 773,
	842, 276, 869, 868, 221, 0, 277, 849, 0, 832,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 852, 290, 3083,
	835, 833, 834, 839, 837, 836, 838, 292, 293, 500,
	294, 825, 296, 819, 818, 748, 297, 0, 298, 0,
	299, 0, 0, 817, 301, 0, 302, 303, 0, 304,
	0, 753, 305, 306, 308, 311, 307, 312, 313, 871,
	872, 765, 853, 0, 0, 0, 0, 0, 314, 315,
	316, 816, 814, 815, 0, 319, 0, 320, 0, 0,
	854, 321, 0, 322, 873, 0, 230, 0, 323, 324,
	325, 326, 327, 328, 844, 845, 848, 856, 0, 846,
	792, 0, 0, 0, 0, 329, 331, 338, 0, 855,
	332, 805, 796, 806, 807, 808, 809, 810, 0, 798,
	0, 339, 857, 858, 340, 341, 342, 859, 830, 831,
	0, 0, 345, 346, 347, 0, 349, 348, 0, 350,
	874, 860, 351, 352, 861, 0, 353, 354, 0, 0,
	355, 0, 356, 750, 749, 357, 358, 360, 785, 359,
	862, 362, 363, 365, 364, 745, 0, 863, 766, 847,
	366, 820, 367, 368, 0, 794, 795, 0, 0, 371,
	372, 0, 0, 373, 241, 864, 374, 865, 875, 375,
	376, 377, 378, 379, 380, 381, 0, 382, 876, 383,
	244, 384, 0, 385, 386, 387, 388, 389, 390, 813,
	391, 392, 0, 393, 394, 395, 396, 397, 0, 399,
	400, 398, 401, 402, 403, 404, 0, 405, 866, 406,
	407, 408, 409, 754, 410, 0, 414, 415, 416, 417,
	418, 419, 420, 0, 426, 427, 786, 787, 788, 789,
	422, 428, 429, 840, 430, 411, 412, 431, 867, 432,
	811, 790, 434, 0, 444, 435, 436, 437, 413, 438,
	442, 851, 439, 440, 441, 877, 0, 445, 446, 0,
	447, 448, 449, 450, 451, 309, 452, 310, 784, 454,
	0, 826, 827, 828, 829, 0, 0, 456, 457, 878,
	879, 764, 458, 459, 0, 3082, 461, 0, 0, 462,
	463, 464, 466, 841, 467, 0, 791, 468, 469, 470,
	254, 870, 0, 472, 471, 256, 0, 0, 0, 0,
	473, 474, 257, 475, 476, 477, 746, 0, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 0, 0, 742,
	743, 797, 758, 759, 756, 757, 769, 0, 755, 0,
	0, 0, 0, 0, 768, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 843, 772, 0,
	0, 0, 263, 264, 265, 215, 812, 793, 823, 781,
	822, 821, 0, 269, 270, 783, 782, 273, 274, 275,
	773, 842, 276, 869, 868, 221, 0, 277, 849, 0,
	832, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 852, 290,
	291, 835, 833, 834, 839, 837, 836, 838, 292, 293,
	500, 294, 825, 296, 819, 818, 0, 297, 0, 298,
	0, 299, 0, 0, 817, 301, 0, 302, 303, 0,
	304, 0, 753, 305, 306, 308, 311, 307, 312, 313,
	871, 872, 765, 853, 0, 0, 0, 0, 0, 314,
	315, 316, 816, 814, 815, 0, 319, 0, 320, 0,
	0, 854, 321, 0, 322, 873, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 844, 845, 848, 856, 0,
	846, 792, 0, 0, 0, 0, 329, 331, 338, 0,
	855, 332, 805, 796, 806, 807, 808, 809, 810, 0,
	798, 0, 339, 857, 858, 340, 341, 342, 859, 830,
	831, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 874, 860, 351, 352, 861, 0, 353, 354, 0,
	0, 355, 0, 356, 933, 932, 357, 358, 360, 785,
	359, 862, 362, 363, 365, 364, 0, 0, 863, 766,
	847, 366, 820, 367, 368, 0, 794, 795, 0, 0,
	371, 372, 0, 0, 373, 241, 864, 374, 865, 875,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 876,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	813, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 866,
	406, 407, 408, 409, 754, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 786, 787, 788,
	789, 422, 428, 429, 840, 430, 411, 412, 431, 867,
	432, 811, 790, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 851, 439, 440, 441, 877, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 784,
	454, 0, 826, 827, 828, 829, 0, 0, 456, 457,
	878, 879, 764, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 841, 467, 0, 791, 468, 469,
	470, 254, 870, 0, 472, 471, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 797, 758, 759,
	756, 757, 769, 0, 0, 1913, 0, 0, 0, 0,
	1911, 1912, 0, 258, 259, 260, 261, 0, 262, 755,
	0, 0, 0, 843, 772, 768, 0, 0, 263, 264,
	265, 0, 812, 793, 823, 781, 822, 821, 0, 269,
	270, 783, 782, 273, 274, 275, 773, 842, 276, 869,
	868, 221, 0, 277, 849, 0, 832, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 852, 290, 3083, 835, 833, 834,
	839, 837, 836, 838, 292, 293, 500, 294, 825, 296,
	819, 818, 748, 297, 0, 298, 0, 299, 0, 0,
	817, 301, 0, 302, 303, 0, 304, 0, 753, 305,
	306, 308, 311, 307, 312, 313, 871, 872, 765, 853,
	0, 0, 0, 0, 0, 314, 315, 316, 816, 814,
	815, 0, 319, 0, 320, 0, 0, 854, 321, 0,
	322, 873, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 844, 845, 848, 0, 0, 846, 792, 0, 0,
	0, 0, 329, 331, 338, 0, 855, 332, 805, 796,
	806, 807, 808, 809, 810, 0, 798, 0, 339, 0,
	0, 340, 341, 342, 859, 830, 831, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 874, 860, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	750, 749, 357, 358, 360, 785, 359, 862, 362, 363,
	365, 364, 745, 0, 0, 766, 847, 366, 820, 367,
	368, 0, 794, 795, 0, 0, 371, 372, 0, 0,
	373, 241, 864, 374, 865, 875, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 876, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 813, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 866, 406, 407, 408, 409,
	754, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 786, 787, 788, 789, 422, 428, 429,
	840, 430, 411, 412, 431, 0, 432, 811, 790, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 851, 439,
	440, 441, 877, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 784, 454, 0, 826, 827,
	828, 829, 0, 0, 456, 457, 878, 879, 764, 458,
	459, 0, 3082, 461, 0, 0, 462, 463, 464, 466,
	841, 467, 0, 791, 468, 469, 470, 254, 870, 0,
	472, 471, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 730,
	0, 931, 0, 0, 0, 0, 742, 743, 0, 0,
	0, 0, 0, 0, 0, 755, 0, 258, 259, 260,
	261, 768, 262, 0, 0, 0, 0, 843, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 842, 276, 219, 220, 221, 0, 277, 849, 0,
	832, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 852, 290,
	291, 835, 833, 834, 839, 837, 836, 838, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	871, 872, 0, 853, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 854, 321, 0, 322, 873, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 844, 845, 848, 856, 0,
	846, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	855, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 857, 858, 340, 341, 342, 859, 343,
	344, 0, 0, 345, 346, 347, 918, 349, 348, 0,
	350, 874, 860, 351, 352, 861, 0, 353, 354, 0,
	0, 355, 0, 356, 933, 932, 357, 358, 360, 361,
	359, 862, 362, 363, 365, 364, 0, 0, 863, 0,
	847, 366, 240, 367, 368, 0, 369, 370, 0, 923,
	371, 372, 0, 0, 373, 241, 864, 374, 865, 875,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 876,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 866,
	406, 407, 408, 409, 246, 925, 0, 414, 415, 416,
	417, 418, 419, 420, 171, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 840, 430, 411, 412, 431, 867,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 877, 0, 445, 446,
	173, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	878, 879, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 841, 467, 0, 465, 468, 469,
	470, 1150, 255, 0, 472, 471, 256, 0, 0, 931,
	165, 473, 474, 257, 475, 476, 477, 0, 166, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 843, 0, 915, 0, 1459,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 842,
	276, 219, 220, 221, 0, 277, 849, 0, 832, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 852, 290, 291, 835,
	833, 834, 839, 837, 836, 838, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 871, 872,
	0, 853, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 854,
	321, 0, 322, 873, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 844, 845, 848, 856, 0, 846, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 855, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 857, 858, 340, 341, 342, 859, 343, 344, 0,
	0, 345, 346, 347, 918, 349, 348, 0, 350, 874,
	860, 351, 352, 861, 0, 353, 354, 0, 0, 355,
	0, 356, 933, 932, 357, 358, 360, 361, 359, 862,
	362, 363, 365, 364, 0, 0, 863, 0, 847, 366,
	240, 367, 368, 0, 369, 370, 0, 923, 371, 372,
	0, 0, 373, 241, 864, 374, 865, 875, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 876, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 866, 406, 407,
	408, 409, 246, 925, 0, 414, 415, 416, 417, 418,
	419, 420, 171, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 840, 430, 411, 412, 431, 867, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 877, 0, 445, 446, 173, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 878, 879,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 841, 467, 0, 465, 468, 469, 470, 1150,
	255, 0, 472, 471, 256, 2302, 0, 931, 165, 473,
	474, 257, 475, 476, 477, 0, 166, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 843, 0, 915, 0, 1459, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 842, 276, 219,
	220, 221, 0, 277, 849, 0, 832, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 852, 290, 291, 835, 833, 834,
	839, 837, 836, 838, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 871, 872, 0, 853,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 854, 321, 0,
	322, 873, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 844, 845, 848, 856, 0, 846, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 855, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 857,
	858, 340, 341, 342, 859, 343, 344, 0, 0, 345,
	346, 347, 918, 349, 348, 0, 350, 874, 860, 351,
	352, 861, 0, 353, 354, 0, 0, 355, 0, 356,
	933, 932, 357, 358, 360, 361, 359, 862, 362, 363,
	365, 364, 0, 0, 863, 0, 847, 366, 240, 367,
	368, 0, 369, 370, 0, 923, 371, 372, 0, 0,
	373, 241, 864, 374, 865, 875, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 876, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 866, 406, 407, 408, 409,
	246, 925, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	840, 430, 411, 412, 431, 867, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 877, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 878, 879, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	841, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 914, 0, 931, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 843, 0, 915, 0, 920, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 842, 276, 219, 220, 221,
	0, 277, 849, 0, 832, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 852, 290, 291, 835, 833, 834, 839, 837,
	836, 838, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 871, 872, 0, 853, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 854, 321, 0, 322, 873,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 844,
	845, 848, 856, 0, 846, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 855, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 857, 858, 340,
	341, 342, 859, 343, 344, 0, 0, 345, 346, 347,
	918, 349, 348, 0, 350, 874, 860, 351, 352, 861,
	0, 353, 354, 0, 0, 355, 0, 356, 933, 932,
	357, 358, 360, 361, 359, 862, 362, 363, 365, 364,
	0, 0, 863, 0, 847, 366, 240, 367, 368, 0,
	369, 370, 0, 923, 371, 372, 0, 0, 373, 241,
	864, 374, 865, 875, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 876, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 866, 406, 407, 408, 409, 246, 925,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 840, 430,
	411, 412, 431, 867, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	877, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 878, 879, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 841, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 0, 0, 931, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 843,
	0, 915, 0, 920, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 842, 276, 219, 220, 221, 0, 277,
	849, 0, 832, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	852, 290, 291, 835, 833, 834, 839, 837, 836, 838,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 871, 872, 0, 853, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 854, 321, 0, 322, 873, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 844, 845, 848,
	856, 0, 846, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 855, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 857, 858, 340, 341, 342,
	859, 343, 344, 0, 0, 345, 346, 347, 918, 349,
	348, 0, 350, 874, 860, 351, 352, 861, 0, 353,
	354, 0, 0, 355, 0, 356, 933, 932, 357, 358,
	360, 361, 359, 862, 362, 363, 365, 364, 0, 0,
	863, 0, 847, 366, 240, 367, 368, 0, 369, 370,
	0, 923, 371, 372, 0, 0, 373, 241, 864, 374,
	865, 875, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 876, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 866, 406, 407, 408, 409, 246, 925, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 840, 430, 411, 412,
	431, 867, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 877, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 878, 879, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 841, 467, 0, 465,
	468, 469, 470, 254, 255, 0, 472, 471, 256, 0,
	0, 931, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 843, 0, 915,
	0, 920, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 842, 276, 219, 220, 221, 0, 277, 849, 0,
	832, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 852, 290,
	291, 835, 833, 834, 839, 837, 836, 838, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	871, 872, 0, 853, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 854, 321, 0, 322, 873, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 844, 845, 848, 856, 0,
	846, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	855, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 857, 858, 340, 341, 342, 859, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 874, 860, 351, 352, 861, 0, 353, 354, 0,
	0, 355, 0, 356, 933, 932, 357, 358, 360, 361,
	359, 862, 362, 363, 365, 364, 0, 0, 863, 0,
	847, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 864, 374, 865, 875,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 876,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 866,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 840, 430, 411, 412, 431, 867,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 877, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	878, 879, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 841, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 0, 0, 931,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 843, 0, 0, 0, 2638,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 842,
	276, 219, 220, 221, 0, 277, 849, 0, 832, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 852, 290, 291, 835,
	833, 834, 839, 837, 836, 838, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 871, 872,
	0, 853, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 854,
	321, 0, 322, 873, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 844, 845, 848, 856, 0, 846, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 855, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 857, 858, 340, 341, 342, 859, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 874,
	860, 351, 352, 861, 0, 353, 354, 0, 0, 355,
	0, 356, 933, 932, 357, 358, 360, 361, 359, 862,
	362, 363, 365, 364, 0, 0, 863, 0, 847, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 864, 374, 865, 875, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 876, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 866, 406, 407,
	408, 409, 246, 925, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 840, 430, 411, 412, 431, 867, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 877, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 878, 879,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 841, 467, 0, 465, 468, 469, 470, 254,
	255, 0, 472, 471, 256, 1147, 0, 954, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 1363, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 958, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 852, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 853,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 854, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 856, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 855, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 857,
	858, 340, 341, 342, 859, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 860, 351,
	352, 861, 0, 353, 354, 0, 0, 355, 0, 356,
	933, 932, 357, 358, 360, 361, 359, 862, 362, 363,
	365, 364, 0, 0, 863, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 864, 374, 865, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 866, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	171, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 867, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 173, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 1150, 255, 0,
	472, 471, 256, 0, 0, 931, 165, 473, 474, 257,
	475, 476, 477, 0, 166, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 843, 0, 0, 0, 136, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 842, 276, 219, 220, 221,
	0, 277, 849, 0, 832, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 852, 290, 291, 835, 833, 834, 839, 837,
	836, 838, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 871, 872, 0, 853, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 854, 321, 0, 322, 873,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 844,
	845, 848, 856, 0, 846, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 855, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 857, 858, 340,
	341, 342, 859, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 874, 860, 351, 352, 861,
	0, 353, 354, 0, 0, 355, 0, 356, 933, 932,
	357, 358, 360, 361, 359, 862, 362, 363, 365, 364,
	0, 0, 863, 0, 847, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	864, 374, 865, 875, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 876, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 866, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 840, 430,
	411, 412, 431, 867, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	877, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 878, 879, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 841, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 730, 0, 497, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 171, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 173, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 1150, 255, 0, 472, 471, 256, 0,
	0, 497, 165, 473, 474, 257, 475, 476, 477, 0,
	166, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 136, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 0, 0, 497,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 2095,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	0, 351, 352, 0, 0, 353, 354, 0, 0, 355,
	0, 356, 0, 0, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 0, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 0, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 0, 472, 471, 256, 0, 0, 497, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 2547, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 1226, 0, 954, 953, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 1464, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 958, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 852, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 853, 0, 0,
	0, 0, 0, 1225, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 854, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 856, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 855, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 857, 858, 340,
	341, 342, 859, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 860, 351, 352, 861,
	0, 353, 354, 0, 0, 355, 0, 356, 933, 932,
	357, 358, 360, 361, 359, 862, 362, 363, 365, 364,
	0, 0, 863, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	864, 374, 865, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 1224, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 866, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 867, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 1143, 0, 954, 953, 0, 0, 0, 951, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 958, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	852, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 853, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 854, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 1142, 232, 233,
	856, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 855, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 857, 858, 340, 341, 342,
	859, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 860, 351, 352, 861, 0, 353,
	354, 0, 0, 355, 0, 356, 933, 932, 357, 358,
	360, 361, 359, 862, 362, 363, 365, 364, 0, 0,
	863, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 864, 374,
	865, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 866, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 867, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 0, 472, 471, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 1139,
	0, 954, 953, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	958, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 852, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 853, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 854, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 1138, 232, 233, 856, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	855, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 857, 858, 340, 341, 342, 859, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 860, 351, 352, 861, 0, 353, 354, 0,
	0, 355, 0, 356, 933, 932, 357, 358, 360, 361,
	359, 862, 362, 363, 365, 364, 0, 0, 863, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 864, 374, 865, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 866,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 867,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 1100, 0, 954,
	953, 0, 0, 0, 951, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 958, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 852, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 853, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 854,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 1099, 232, 233, 856, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 855, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 857, 858, 340, 341, 342, 859, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	860, 351, 352, 861, 0, 353, 354, 0, 0, 355,
	0, 356, 933, 932, 357, 358, 360, 361, 359, 862,
	362, 363, 365, 364, 0, 0, 863, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 864, 374, 865, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 866, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 867, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 0, 472, 471, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 1097, 0, 954, 953, 0,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 958, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 852, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 853,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 854, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 1096, 232, 233, 856, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 855, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 857,
	858, 340, 341, 342, 859, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 860, 351,
	352, 861, 0, 353, 354, 0, 0, 355, 0, 356,
	933, 932, 357, 358, 360, 361, 359, 862, 362, 363,
	365, 364, 0, 0, 863, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 864, 374, 865, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 866, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 867, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 947, 0, 954, 953, 0, 0, 0,
	951, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 958, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 852, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 853, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 854, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 949,
	232, 233, 856, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 855, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 857, 858, 340,
	341, 342, 859, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 860, 351, 352, 861,
	0, 353, 354, 0, 0, 355, 0, 356, 933, 932,
	357, 358, 360, 361, 359, 862, 362, 363, 365, 364,
	0, 0, 863, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	864, 374, 865, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 866, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 867, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 954, 953, 0, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	958, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 852, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 853, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 854, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 856, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	855, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 857, 858, 340, 341, 342, 859, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 860, 351, 352, 861, 0, 353, 354, 0,
	0, 355, 0, 356, 933, 932, 357, 358, 360, 361,
	359, 862, 362, 363, 365, 364, 0, 0, 863, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 864, 374, 865, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 866,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 867,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 954, 953, 0,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 958, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 852, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 853,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 854, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 856, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 855, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 857,
	858, 340, 341, 342, 859, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 860, 351,
	352, 861, 0, 353, 354, 0, 0, 355, 0, 356,
	933, 932, 357, 358, 360, 361, 359, 862, 362, 363,
	365, 364, 0, 0, 863, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 864, 374, 865, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 866, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 867, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 954,
	472, 471, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 958, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 852, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 853, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 854,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 856, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 855, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 857, 858, 340, 341, 342, 859, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	860, 351, 352, 861, 0, 353, 354, 0, 0, 355,
	0, 356, 933, 932, 357, 358, 360, 361, 359, 862,
	362, 363, 365, 364, 0, 0, 863, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 864, 374, 865, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 866, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 867, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 0, 472, 471, 256, 601, 0, 207, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 213, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 212, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 206, 0, 207, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 480, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 213, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 212, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 207, 472, 471,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 480, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 213, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 1706, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 212, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 207,
	472, 471, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 480, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 213, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	0, 351, 352, 0, 0, 353, 354, 0, 0, 355,
	0, 356, 0, 0, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 0, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 0, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 212, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 497, 472, 471, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	480, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 497, 472, 471, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 480, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 1985, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 1982, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 2064, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 1988, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 2062, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 2061, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 1987, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 2063, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 497, 472, 471, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	1985, 277, 222, 0, 0, 1979, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 1982, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 1988, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 1978,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 1987, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 1986, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 608, 0, 497, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 607, 585, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 588,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 589, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 590, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 0, 472, 471, 256, 584,
	0, 497, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 585, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 588, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 589, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 590, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 497, 472, 471, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 588,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 589, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 590, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 0, 472, 471, 256, 1268,
	0, 497, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 1271, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	1269, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 1270, 471, 256, 1118, 0, 497,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	0, 351, 352, 0, 0, 353, 354, 0, 0, 355,
	0, 356, 0, 0, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 923, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 0, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 0, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 0, 472, 471, 256, 942, 0, 497, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 944, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 923, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 939, 0, 497, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 941,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 923, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 935, 0, 497, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 937, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 923, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 0, 472, 471, 256, 593,
	0, 497, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	592, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 520, 0, 497,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 519,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	0, 351, 352, 0, 0, 353, 354, 0, 0, 355,
	0, 356, 0, 0, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	518, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 0, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 0, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 497, 472, 471, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 1960,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 497, 2463, 0,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 497, 2463, 0, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 2460, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 497, 472, 471, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 923, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 497, 472, 471,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 258, 259, 260, 261, 1699, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 1657, 0, 497, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 1655, 0, 497, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 0, 472, 471, 256, 634,
	0, 497, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 1197, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	635, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 631,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 630, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 1550, 0, 497,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 1549, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	0, 351, 352, 0, 0, 353, 354, 0, 0, 355,
	0, 356, 0, 0, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 0, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 0, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 0, 472, 471, 256, 634, 0, 497, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 1197, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 635, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 631, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 630, 250,
	251, 455, 0, 0, 456, 1198, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 634, 0, 497, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 624, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 635, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 631, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 1169, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 630, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 1136, 0, 497, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 1135, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 0, 472, 471, 256, 1132,
	0, 497, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 1131, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 1129, 0, 497,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 1128, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	0, 351, 352, 0, 0, 353, 354, 0, 0, 355,
	0, 356, 0, 0, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 0, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 0, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 0, 472, 471, 256, 1126, 0, 497, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 1125, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 1122, 0, 497, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 1121,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 497, 472, 471,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 258, 259, 260, 261, 1110, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 1108, 0, 497, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 1107,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 1102, 0, 497, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 0, 472, 471, 256, 1093,
	0, 497, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 1092, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 1088, 0, 497,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	0, 351, 352, 0, 0, 353, 354, 0, 0, 355,
	0, 356, 0, 0, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 0, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 0, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 0, 472, 471, 256, 1084, 0, 497, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 1086, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 962, 0, 497, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 964,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 959, 0, 497, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 0, 472, 471, 256, 634,
	0, 497, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 624, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 623, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	635, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 625, 410, 0, 414, 415, 631,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 626, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 630, 250, 251, 455, 0, 0, 456, 628,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 614, 0, 497,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	0, 351, 352, 0, 0, 353, 354, 0, 0, 355,
	0, 356, 0, 0, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 0, 406, 407,
	408, 409, 246, 410, 0, 615, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 0, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 0, 472, 471, 256, 610, 0, 497, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 231, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 0,
	472, 471, 256, 599, 0, 497, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 0, 472, 471,
	256, 542, 0, 497, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 414,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 497, 472, 471, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 430,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 497, 472, 471,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 2360, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 497,
	472, 471, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 2358, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	0, 351, 352, 0, 0, 353, 354, 0, 0, 355,
	0, 356, 0, 0, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 391,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 0, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 0, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 497, 472, 471, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 2347, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 378, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 388, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 410, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 497, 472, 471, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 500, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 304, 0, 225, 305, 306, 308, 311, 307,
	312, 313, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 314, 315, 316, 228, 317, 318, 0, 319, 0,
	320, 0, 0, 0, 321, 0, 322, 229, 0, 230,
	0, 323, 324, 325, 326, 327, 328, 231, 232, 233,
	0, 0, 237, 330, 0, 0, 0, 0, 329, 331,
	338, 0, 0, 332, 234, 334, 333, 335, 336, 337,
	235, 0, 236, 0, 339, 0, 0, 340, 341, 342,
	0, 343, 344, 0, 0, 345, 346, 347, 0, 349,
	348, 0, 350, 238, 0, 351, 352, 0, 0, 353,
	354, 0, 0, 355, 0, 356, 0, 0, 357, 358,
	360, 361, 359, 0, 362, 363, 365, 364, 0, 0,
	0, 0, 239, 366, 240, 367, 368, 0, 369, 370,
	0, 0, 371, 372, 0, 0, 373, 241, 0, 374,
	0, 242, 375, 376, 377, 378, 379, 380, 381, 0,
	382, 243, 383, 244, 384, 0, 385, 386, 387, 388,
	389, 390, 245, 391, 392, 0, 393, 394, 395, 396,
	397, 0, 399, 400, 398, 401, 402, 403, 404, 0,
	405, 0, 406, 407, 408, 409, 246, 410, 0, 615,
	415, 416, 417, 418, 419, 420, 0, 426, 427, 421,
	423, 424, 425, 422, 428, 429, 0, 430, 411, 412,
	431, 0, 432, 247, 433, 434, 0, 444, 435, 436,
	437, 413, 438, 442, 443, 439, 440, 441, 248, 0,
	445, 446, 0, 447, 448, 449, 450, 451, 309, 452,
	310, 453, 454, 0, 249, 250, 251, 455, 0, 0,
	456, 457, 252, 253, 0, 458, 459, 0, 460, 461,
	0, 0, 462, 463, 464, 466, 0, 467, 0, 465,
	468, 469, 470, 254, 255, 497, 472, 471, 256, 0,
	0, 0, 0, 473, 474, 257, 475, 476, 477, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 1563, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 500, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 304, 0, 225, 305, 306, 308,
	311, 307, 312, 313, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 314, 315, 316, 228, 317, 318, 0,
	319, 0, 320, 0, 0, 0, 321, 0, 322, 229,
	0, 230, 0, 323, 324, 325, 326, 327, 328, 231,
	232, 233, 0, 0, 237, 330, 0, 0, 0, 0,
	329, 331, 338, 0, 0, 332, 234, 334, 333, 335,
	336, 337, 235, 0, 236, 0, 339, 0, 0, 340,
	341, 342, 0, 343, 344, 0, 0, 345, 346, 347,
	0, 349, 348, 0, 350, 238, 0, 351, 352, 0,
	0, 353, 354, 0, 0, 355, 0, 356, 0, 0,
	357, 358, 360, 361, 359, 0, 362, 363, 365, 364,
	0, 0, 0, 0, 239, 366, 240, 367, 368, 0,
	369, 370, 0, 0, 371, 372, 0, 0, 373, 241,
	0, 374, 0, 242, 375, 376, 377, 378, 379, 380,
	381, 0, 382, 243, 383, 244, 384, 0, 385, 386,
	387, 388, 389, 390, 245, 391, 392, 0, 393, 394,
	395, 396, 397, 0, 399, 400, 398, 401, 402, 403,
	404, 0, 405, 0, 406, 407, 408, 409, 246, 410,
	0, 414, 415, 416, 417, 418, 419, 420, 0, 426,
	427, 421, 423, 424, 425, 422, 428, 429, 0, 0,
	411, 412, 431, 0, 432, 247, 433, 434, 0, 444,
	435, 436, 437, 413, 438, 442, 443, 439, 440, 441,
	248, 0, 445, 446, 0, 447, 448, 449, 450, 451,
	309, 452, 310, 453, 454, 0, 249, 250, 251, 455,
	0, 0, 456, 457, 252, 253, 0, 458, 459, 0,
	460, 461, 0, 0, 462, 463, 464, 466, 0, 467,
	0, 465, 468, 469, 470, 254, 255, 497, 472, 471,
	256, 0, 0, 0, 0, 473, 474, 257, 475, 476,
	477, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 500, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 304, 0, 225, 305,
	306, 308, 311, 307, 312, 313, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 314, 315, 316, 228, 317,
	318, 0, 319, 0, 320, 0, 0, 0, 321, 0,
	322, 229, 0, 230, 0, 323, 324, 325, 326, 327,
	328, 1554, 232, 233, 0, 0, 237, 330, 0, 0,
	0, 0, 329, 331, 338, 0, 0, 332, 234, 334,
	333, 335, 336, 337, 235, 0, 236, 0, 339, 0,
	0, 340, 341, 342, 0, 343, 344, 0, 0, 345,
	346, 347, 0, 349, 348, 0, 350, 238, 0, 351,
	352, 0, 0, 353, 354, 0, 0, 355, 0, 356,
	0, 0, 357, 358, 360, 361, 359, 0, 362, 363,
	365, 364, 0, 0, 0, 0, 239, 366, 240, 367,
	368, 0, 369, 370, 0, 0, 371, 372, 0, 0,
	373, 241, 0, 374, 0, 242, 375, 376, 377, 378,
	379, 380, 381, 0, 382, 243, 383, 244, 384, 0,
	385, 386, 387, 388, 389, 390, 245, 391, 392, 0,
	393, 394, 395, 396, 397, 0, 399, 400, 398, 401,
	402, 403, 404, 0, 405, 0, 406, 407, 408, 409,
	246, 410, 0, 414, 415, 416, 417, 418, 419, 420,
	0, 426, 427, 421, 423, 424, 425, 422, 428, 429,
	0, 430, 411, 412, 431, 0, 432, 247, 433, 434,
	0, 444, 435, 436, 437, 413, 438, 442, 443, 439,
	440, 441, 248, 0, 445, 446, 0, 447, 448, 449,
	450, 451, 309, 452, 310, 453, 454, 0, 249, 250,
	251, 455, 0, 0, 456, 457, 252, 253, 0, 458,
	459, 0, 460, 461, 0, 0, 462, 463, 464, 466,
	0, 467, 0, 465, 468, 469, 470, 254, 255, 497,
	472, 471, 256, 0, 0, 0, 0, 473, 474, 257,
	475, 476, 477, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 500, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 304, 0,
	225, 305, 306, 308, 311, 307, 312, 313, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 314, 315, 316,
	228, 317, 318, 0, 319, 0, 320, 0, 0, 0,
	321, 0, 322, 229, 0, 230, 0, 323, 324, 325,
	326, 327, 328, 231, 232, 233, 0, 0, 237, 330,
	0, 0, 0, 0, 329, 331, 338, 0, 0, 332,
	234, 334, 333, 335, 336, 337, 235, 0, 236, 0,
	339, 0, 0, 340, 341, 342, 0, 343, 344, 0,
	0, 345, 346, 347, 0, 349, 348, 0, 350, 238,
	0, 351, 352, 0, 0, 353, 354, 0, 0, 355,
	0, 356, 0, 0, 357, 358, 360, 361, 359, 0,
	362, 363, 365, 364, 0, 0, 0, 0, 239, 366,
	240, 367, 368, 0, 369, 370, 0, 0, 371, 372,
	0, 0, 373, 241, 0, 374, 0, 242, 375, 376,
	377, 378, 379, 380, 381, 0, 382, 243, 383, 244,
	384, 0, 385, 386, 387, 388, 389, 390, 245, 897,
	392, 0, 393, 394, 395, 396, 397, 0, 399, 400,
	398, 401, 402, 403, 404, 0, 405, 0, 406, 407,
	408, 409, 246, 410, 0, 414, 415, 416, 417, 418,
	419, 420, 0, 426, 427, 421, 423, 424, 425, 422,
	428, 429, 0, 430, 411, 412, 431, 0, 432, 247,
	433, 434, 0, 444, 435, 436, 437, 413, 438, 442,
	443, 439, 440, 441, 248, 0, 445, 446, 0, 447,
	448, 449, 450, 451, 309, 452, 310, 453, 454, 0,
	249, 250, 251, 455, 0, 0, 456, 457, 252, 253,
	0, 458, 459, 0, 460, 461, 0, 0, 462, 463,
	464, 466, 0, 467, 0, 465, 468, 469, 470, 254,
	255, 497, 472, 471, 256, 0, 0, 0, 0, 473,
	474, 257, 475, 476, 477, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	500, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	304, 0, 225, 305, 306, 308, 311, 307, 312, 313,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 314,
	315, 316, 228, 317, 318, 0, 319, 0, 320, 0,
	0, 0, 321, 0, 322, 229, 0, 230, 0, 323,
	324, 325, 326, 327, 328, 231, 232, 233, 0, 0,
	237, 330, 0, 0, 0, 0, 329, 331, 338, 0,
	0, 332, 234, 334, 333, 335, 336, 337, 235, 0,
	236, 0, 339, 0, 0, 340, 341, 342, 0, 343,
	344, 0, 0, 345, 346, 347, 0, 349, 348, 0,
	350, 238, 0, 351, 352, 0, 0, 353, 354, 0,
	0, 355, 0, 356, 0, 0, 357, 358, 360, 361,
	359, 0, 362, 363, 365, 364, 0, 0, 0, 0,
	239, 366, 240, 367, 368, 0, 369, 370, 0, 0,
	371, 372, 0, 0, 373, 241, 0, 374, 0, 242,
	375, 376, 377, 0, 379, 380, 381, 0, 382, 243,
	383, 244, 384, 0, 385, 386, 387, 0, 389, 390,
	245, 391, 392, 0, 393, 394, 395, 396, 397, 0,
	399, 400, 398, 401, 402, 403, 404, 0, 405, 0,
	406, 407, 408, 409, 246, 0, 0, 414, 415, 416,
	417, 418, 419, 420, 0, 426, 427, 421, 423, 424,
	425, 422, 428, 429, 0, 430, 411, 412, 431, 0,
	432, 247, 433, 434, 0, 444, 435, 436, 437, 413,
	438, 442, 443, 439, 440, 441, 248, 0, 445, 446,
	0, 447, 448, 449, 450, 451, 309, 452, 310, 453,
	454, 0, 249, 250, 251, 455, 0, 0, 456, 457,
	252, 253, 0, 458, 459, 0, 460, 461, 0, 0,
	462, 463, 464, 466, 0, 467, 0, 465, 468, 469,
	470, 254, 255, 0, 472, 471, 256, 0, 0, 0,
	0, 473, 474, 257, 475, 476, 477, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 0, 1300, 1301,
	0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 1303, 0, 0, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 0,
	1302, 0, 0, 0, 0, 1308, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 1349, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 0, 1325, 1326, 1327, 1328,
	0, 1302, 0, 0, 0, 1338, 1308, 0, 0, 1322,
	0, 0, 1323, 0, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1340,
	1350, 0, 0, 1330, 1331, 1332, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 1347, 0, 0, 0, 0,
	0, 0, 1317, 1318, 0, 0, 0, 1325, 1326, 1327,
	1328, 0, 0, 0, 0, 0, 1338, 1308, 0, 1329,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 1348,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	1329, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0, 0,
	0, 1329, 0, 0, 2247, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 1341, 0, 0, 0, 0, 1303, 0, 1339, 1349,
	0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 0, 0, 1302, 0, 2244, 0, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 1303, 0, 1339,
	1349, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313,
	1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 1325,
	1326, 1327, 1328, 0, 1302, 0, 2243, 0, 0, 1308,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343,
	1344, 1345, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1303, 0,
	0, 1349, 0, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 0,
	1325, 1326, 1327, 1328, 0, 1302, 0, 0, 0, 1338,
	1308, 0, 0, 1322, 0, 0, 1323, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331, 1332,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 1347,
	0, 0, 0, 0, 0, 0, 1317, 1318, 0, 0,
	0, 1325, 1326, 1327, 1328, 0, 0, 0, 0, 0,
	1338, 1308, 0, 1329, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331,
	1332, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 1329, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	0, 0, 0, 0, 0, 1329, 0, 0, 2242, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1341, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316,
	1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 0, 0, 0, 0, 3048, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 1303, 0, 0, 1349, 0,
	0, 0, 0, 1339, 0, 0, 1314, 1315, 1321, 1320,
	1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307,
	1309, 1310, 1302, 0, 0, 0, 3044, 0, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 1319, 0, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 1349,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 1326,
	1327, 1328, 0, 1302, 0, 0, 0, 0, 1308, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344,
	1345, 1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 1303, 0, 0,
	1349, 0, 0, 0, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 1325,
	1326, 1327, 1328, 0, 1302, 0, 0, 0, 1338, 1308,
	0, 0, 1322, 0, 0, 1323, 0, 0, 0, 1319,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1348, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 0,
	1325, 1326, 1327, 1328, 0, 0, 0, 0, 0, 1338,
	1308, 0, 1329, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331, 1332,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 1346, 1347,
	0, 0, 0, 0, 0, 0, 1317, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 1329, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0,
	0, 0, 0, 2986, 1329, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	0, 0, 0, 0, 2985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 1349, 0, 0,
	0, 0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316,
	1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 1302, 0, 0, 0, 2935, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 1303, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1325, 1326, 1327,
	1328, 0, 1302, 0, 0, 0, 0, 1308, 0, 0,
	1322, 0, 0, 0, 0, 0, 0, 1319, 0, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1303, 0, 0, 1349,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 1325, 1326,
	1327, 1328, 0, 1302, 0, 0, 0, 1338, 1308, 0,
	0, 1322, 0, 0, 1323, 0, 0, 0, 1319, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 1325,
	1326, 1327, 1328, 0, 0, 0, 0, 0, 1338, 1308,
	0, 1329, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 1348, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	0, 0, 1329, 0, 0, 0, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 1339,
	0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313,
	1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0,
	0, 0, 2896, 1329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 0,
	1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0,
	0, 0, 0, 2807, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 1301,
	0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 1303, 0, 0, 1349, 0, 0, 0,
	0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	1302, 0, 0, 0, 2765, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 1326, 1327, 1328,
	0, 1302, 0, 0, 0, 0, 1308, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 1340,
	1350, 0, 0, 1330, 1331, 1332, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 1303, 0, 0, 1349, 0,
	0, 0, 0, 0, 1346, 1347, 0, 0, 0, 0,
	0, 0, 1317, 1318, 0, 0, 0, 1325, 1326, 1327,
	1328, 0, 1302, 0, 0, 0, 1338, 1308, 0, 0,
	1322, 0, 0, 1323, 0, 0, 0, 1319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 1325, 1326,
	1327, 1328, 0, 0, 0, 0, 0, 1338, 1308, 0,
	1329, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	1348, 1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 1329, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 1339, 0,
	0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 2764, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1341, 0, 0, 0, 0, 0, 0, 1339,
	0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313,
	1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0,
	0, 0, 2763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 1349, 0, 0, 0, 0,
	1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 1302,
	0, 0, 0, 2730, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 0, 1300, 1301,
	0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 0, 1303, 0, 0, 1349, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1325, 1326, 1327, 1328, 0,
	1302, 0, 0, 0, 0, 1308, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 1349, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 0, 1325, 1326, 1327, 1328,
	0, 1302, 0, 0, 0, 1338, 1308, 0, 0, 1322,
	0, 0, 1323, 0, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1340,
	1350, 0, 0, 1330, 1331, 1332, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 1347, 0, 0, 0, 0,
	0, 0, 1317, 1318, 0, 0, 0, 1325, 1326, 1327,
	1328, 0, 0, 0, 0, 0, 1338, 1308, 0, 1329,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 1348,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	1329, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 1339, 0, 0,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0, 0,
	2552, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 1339, 0,
	0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 2524, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1300, 1301, 0, 1333,
	1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 1303, 0, 0, 1349, 0, 0, 0, 0, 1339,
	0, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313,
	1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 1302, 0,
	0, 0, 1832, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1303, 0, 0, 1349, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 1326, 1327, 1328, 0, 1302,
	0, 0, 0, 0, 1308, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 1350, 0,
	0, 1330, 1331, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1346, 1347, 0, 0, 0, 0, 0, 0,
	1317, 1318, 0, 0, 0, 1325, 1326, 1327, 1328, 0,
	0, 0, 0, 0, 1338, 1308, 3124, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 0, 0, 1329, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 1341, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 1341,
	0, 0, 0, 0, 1303, 0, 1339, 1349, 0, 1314,
	1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304,
	1305, 1306, 1307, 1309, 1310, 0, 0, 2202, 0, 0,
	0, 1302, 0, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 1319, 0, 0, 0,
	1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1336, 0,
	0, 0, 0, 2175, 0, 1303, 0, 1339, 1349, 0,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 0, 1325, 1326, 1327,
	1328, 0, 1302, 0, 0, 0, 0, 1308, 0, 2289,
	1322, 0, 2288, 0, 0, 0, 0, 1319, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 2176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 1325, 1326,
	1327, 1328, 0, 0, 0, 0, 0, 1338, 1308, 0,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1346, 1347, 0, 0,
	0, 0, 0, 0, 1317, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 1329, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1935, 0, 0, 1324,
	0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 1341, 0, 1934, 0, 0, 1303, 0, 1339,
	1349, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313,
	1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 0, 0, 0,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343,
	1344, 1345, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1303, 0,
	1339, 1349, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0,
	1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0,
	1325, 1326, 1327, 1328, 0, 1302, 0, 0, 0, 0,
	1308, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	1319, 0, 0, 0, 1300, 1301, 0, 1333, 1334, 1335,
	1343, 1344, 1345, 1340, 1350, 0, 0, 1330, 1331, 1332,
	0, 0, 1336, 0, 0, 0, 0, 0, 0, 1303,
	0, 0, 1349, 0, 0, 0, 0, 0, 1346, 1347,
	0, 0, 0, 0, 0, 0, 1317, 1318, 0, 0,
	0, 1325, 1326, 1327, 1328, 0, 1302, 0, 0, 0,
	1338, 1308, 0, 0, 1322, 0, 0, 1323, 0, 0,
	0, 1319, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331,
	1332, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 0, 1325, 1326, 1327, 1328, 0, 0, 0, 0,
	0, 1338, 1308, 0, 1329, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 1348, 1340, 1350, 0, 0, 1330,
	1331, 1332, 0, 0, 0, 0, 0, 0, 1337, 727,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	1346, 1347, 0, 0, 0, 0, 0, 0, 1317, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 1329, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 0, 0, 1341, 0, 0, 0, 0,
	0, 0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316,
	1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 0, 1300, 1301, 0,
	1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 1341, 0, 0, 0,
	0, 0, 1303, 1339, 0, 1349, 1314, 1315, 1321, 1320,
	1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307,
	1309, 1310, 0, 0, 0, 0, 0, 0, 2542, 1302,
	0, 0, 0, 0, 0, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 1319, 0, 0, 0, 1300, 1301,
	0, 1333, 1334, 1335, 1343, 1344, 1345, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	2290, 0, 0, 1303, 1339, 0, 1349, 1314, 1315, 1321,
	1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305, 1306,
	1307, 1309, 1310, 0, 0, 1325, 1326, 1327, 1328, 0,
	1302, 0, 0, 0, 0, 1308, 0, 0, 1322, 0,
	2295, 0, 0, 0, 0, 1319, 0, 0, 0, 1300,
	1301, 0, 1333, 1334, 1335, 1343, 1344, 1345, 1340, 1350,
	0, 0, 1330, 1331, 1332, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 1349, 0, 0,
	0, 0, 0, 1346, 1347, 0, 0, 0, 0, 0,
	0, 1317, 1318, 0, 0, 0, 1325, 1326, 1327, 1328,
	0, 1302, 0, 0, 0, 1338, 1308, 0, 0, 1322,
	0, 0, 1323, 0, 0, 0, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1340,
	1350, 0, 0, 1330, 1331, 1332, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1346, 1347, 0, 0, 0, 0,
	0, 0, 1317, 1318, 0, 0, 0, 1325, 1326, 1327,
	1328, 0, 0, 0, 0, 0, 1338, 1308, 0, 1329,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 1348,
	1340, 1350, 0, 0, 1330, 1331, 1332, 0, 0, 0,
	0, 0, 0, 1337, 0, 0, 0, 0, 0, 1341,
	0, 0, 0, 0, 0, 1346, 1347, 0, 0, 0,
	0, 0, 0, 1317, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	1329, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 0, 0, 1339, 0, 2257,
	1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311, 1312,
	1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0, 0,
	0, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1324, 0,
	0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344, 1345,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 1341, 0, 2241, 0, 0, 1303, 0, 1339, 1349,
	0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313, 1311,
	1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 0, 0,
	0, 0, 0, 1302, 0, 0, 0, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 1319, 0,
	0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343, 1344,
	1345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1336, 0, 0, 0, 0, 0, 0, 1303, 0, 1339,
	1349, 0, 1314, 1315, 1321, 1320, 1316, 1342, 0, 1313,
	1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310, 0, 1325,
	1326, 1327, 1328, 0, 1302, 0, 0, 0, 0, 1308,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 1319,
	0, 0, 0, 1300, 1301, 0, 1333, 1334, 1335, 1343,
	1344, 1345, 1340, 1350, 0, 0, 1330, 1331, 1332, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1303, 0,
	0, 1349, 0, 0, 0, 0, 0, 1346, 1347, 0,
	0, 0, 0, 0, 0, 1317, 1318, 0, 0, 0,
	1325, 1326, 1327, 1328, 0, 1302, 0, 0, 0, 1338,
	1308, 0, 0, 1322, 0, 0, 1323, 0, 0, 0,
	1319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331, 1332,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1346, 1347,
	0, 0, 0, 0, 0, 0, 1317, 1318, 0, 0,
	0, 1325, 1326, 1327, 1328, 0, 0, 0, 0, 0,
	1338, 1308, 0, 1329, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1324, 0, 0, 1348, 1340, 1350, 0, 0, 1330, 1331,
	1332, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 1341, 0, 0, 0, 0, 0, 1346,
	1347, 0, 0, 0, 0, 0, 0, 1317, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 1329, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 1339, 0, 0, 1314, 1315, 1321, 1320, 1316, 1342,
	0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309, 1310,
	0, 0, 0, 0, 0, 1329, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 0, 0, 1300, 1301, 0, 1333, 1334,
	1335, 1343, 1344, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1341, 0, 0, 0, 0,
	1303, 0, 1339, 1349, 0, 1314, 1315, 1321, 1320, 1316,
	1342, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 0, 1300, 1301, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 1319, 0, 0, 0, 0, 1303, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 1302, 0, 1314, 1315, 1321, 1320,
	1316, 1342, 1322, 1313, 1311, 1312, 1304, 1305, 1306, 1307,
	1309, 1310, 0, 1325, 1326, 1327, 1328, 0, 0, 0,
	0, 0, 0, 1308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2180, 1340, 1350, 0, 0,
	1330, 1331, 1332, 0, 0, 0, 0, 0, 0, 0,
	1325, 1326, 1327, 1328, 0, 0, 0, 0, 0, 0,
	1308, 1346, 1347, 0, 0, 0, 0, 0, 0, 1317,
	1318, 0, 0, 0, 0, 0, 1617, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 0, 1330, 1331, 1332,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	0, 1628, 1613, 1618, 1601, 1638, 1637, 0, 0, 0,
	1603, 1602, 0, 0, 0, 0, 0, 0, 1647, 1646,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1329, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1639, 0, 1635,
	1634, 0, 0, 0, 1324, 0, 0, 0, 0, 1633,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1341, 0, 0,
	0, 0, 0, 0, 1329, 0, 0, 1632, 1630, 1631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1612, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1621, 1616, 1622,
	1623, 1624, 1625, 1626, 0, 1620, 0, 0, 0, 0,
	0, 0, 0, 0, 1644, 1645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 0, 1314, 1315,
	1321, 1320, 1316, 1342, 0, 1313, 1311, 1312, 1304, 1305,
	1306, 1307, 1309, 1310, 1605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1636, 0, 0,
	0, 1614, 1615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1617, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1313, 1311, 1312, 1304, 1305, 1306, 1307, 1309,
	1310, 0, 0, 0, 0, 1629, 0, 0, 0, 1753,
	1751, 1752, 1755, 1754, 0, 0, 0, 1628, 1613, 1618,
	1601, 1638, 1637, 0, 0, 0, 1603, 1602, 659, 0,
	689, 0, 0, 0, 1647, 1646, 0, 0, 0, 0,
	0, 0, 1606, 1607, 1608, 1609, 0, 0, 0, 0,
	666, 0, 0, 0, 0, 0, 1627, 1610, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 1649, 0, 0,
	0, 0, 0, 1639, 0, 1635, 1634, 0, 0, 0,
	0, 0, 0, 0, 1604, 1633, 665, 1640, 1641, 1642,
	1643, 667, 0, 0, 0, 694, 0, 0, 0, 0,
	0, 673, 674, 0, 0, 0, 684, 0, 0, 0,
	0, 0, 1611, 1632, 1630, 1631, 0, 1648, 0, 690,
	668, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1612, 0, 688, 0, 0, 0, 0, 0,
	0, 0, 0, 1621, 1616, 1622, 1623, 1624, 1625, 1626,
	0, 1620, 0, 0, 0, 0, 0, 0, 0, 0,
	1644, 1645, 0, 669, 0, 0, 0, 0, 0, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 671, 0, 0, 0, 0,
	1605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1636, 0, 0, 677, 1614, 1615, 0,
	0, 0, 0, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 676, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 691,
	0, 1629, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1606, 1607,
	1608, 1609, 0, 0, 675, 0, 0, 0, 0, 0,
	0, 0, 1627, 1610, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1649, 0, 0, 0, 0, 0, 0,
	686, 0, 0, 0, 0, 0, 0, 0, 0, 681,
	1604, 0, 0, 1640, 1641, 1642, 1643, 0, 0, 0,
	0, 661, 679, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 662, 1611, 0,
	0, 0, 0, 1648, 0, 0, 0, 682, 0, 0,
	680, 0, 0, 0, 695, 696, 0, 0, 0, 0,
	0, 693, 0, 0, 0, 0, 0, 0, 683, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 685,
}
var sqlPact = [...]int{

	4628, -1000, -13, -1000, -1000, -1000, 219, -1000, -1000, -1000,
	-1000, 217, 213, 212, -1000, 210, 209, 208, 206, 205,
	198, 195, 192, 190, 189, 188, 187, -1000, -1000, 186,
	-1000, -1000, -1000, -1000, 184, 181, 179, -1000, 177, 1361,
	31421, 175, 174, 173, 2100, 48811, 1509, 169, 167, -1000,
	166, 1449, 37205, 1152, 1507, -1000, 165, 161, 1534, 48429,
	363, 1954, 34107, 36817, 1934, 48041, 31033, 1920, 33719, 47653,
	-1000, -1000, 1044, -1000, -1000, 47265, 158, 157, 153, 150,
	149, -1000, 147, 46877, 139, 136, 133, 128, 125, 123,
	-1000, 121, 120, 117, 109, 108, 97, 96, 92, 90,
	89, 84, 81, 79, 76, 75, 73, -1000, 57706, 72,
	67, 65, -1000, 1316, 64, 63, 61, 58, 48, -1000,
	-1000, 47, 43, 42, 41, 40, 39, -1000, 144, 38,
	37, 36, 35, 34, -1000, 1078, 729, 2374, 13687, 1248,
	1247, 1240, 1196, 1193, 783, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 51485, 48811, 31, -30, 30,
	-1000, 2315, 784, 23601, 4628, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36429, 36041, 35653,
	29481, 46489, 46101, 10794, 10794, 945, -1000, -1000, -1000, -1000,
	-1000, -15, 32567, 48811, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 270,
	-1000, -1000, -1000, -1000, -1000, -1000, 19993, 709, 19568, 312,
	19143, 311, 408, -1000, -1000, -1000, 269, -1000, -1000, -1000,
	-1000, 1270, -1000, -1000, -1000, -1000, 45713, 45325, 1926, 44937,
	29083, 28685, 44549, 1752, 1747, 44161, -1000, -1000, 43773, -1000,
	-1000, 2221, 1932, 1915, 35265, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 43391, 43003, 42615, 42227, 41839, 28287,
	27889, 606, -1000, -1000, -1000, -1000, 25153, 605, -1000, -1000,
	-1000, -1000, -1000, 29, -1000, 28, 27, -1000, 25, 20,
	15, 12, 11, 8, 7, 6, -1000, -2, -5, -1000,
	-6, -7, -1000, -8, -9, 1458, 1431, 1470, 41451, 1028,
	48811, -1000, 1505, -33, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 604, 48811, -1000, -1000, 20404, 98, -1000, 603, -1000,
	1888, -1000, 20404, 98, -1000, 1500, 216, 1406, -1000, -1000,
	-1000, 1309, 1051, -1000, -1000, 48811, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2574, 1401, 602, 41063, -1000, 1634, -1000,
	743, 14509, -1000, 933, -1000, 14509, 267, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1432, 1166, 2459, 27491, 1399, 2294, 2180, 2573, 1654,
	2155, 2138, 2055, 2054, 2043, 2572, 1098, 2571, 1077, 2569,
	2038, 2031, 2560, 1379, 34877, 2564, 2555, 1983, 1887, -1000,
	-1000, -1000, -1000, 1085, -1000, -1000, -1000, -1000, -1000, -1000,
	38741, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1078, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1666, 2279, 2279, 2279, 2338, 383, 382,
	-1000, 144, -1000, 1884, -1000, 1387, -1000, -1000, -1000, 56852,
	-1000, -1000, 20404, 20404, 20404, 20404, 20404, 1259, -1000, -1000,
	-1000, 631, -1000, 601, 517, 12028, -1000, -1000, -1000, -1000,
	599, 2537, -1000, 815, -1000, -1000, -1000, -1000, 2457, -1000,
	-1000, -1000, 397, 20404, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	265, 698, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 530, 1191, 522, 522,
	522, -1000, -1000, 777, -1000, -1000, 693, -1000, 678, -1000,
	-1000, -1000, 1924, 597, 593, -1000, 590, 589, 586, -1000,
	-1000, -1000, 585, 584, 583, 580, 575, 574, 573, 572,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 777, 777,
	-1000, 570, 565, 561, 559, 557, 551, 550, 548, 547,
	1373, -1000, -1000, 1373, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 943, 50339, -1000, -1000, -1000, -17, 48811, -1000, 408,
	-17, -1000, -1000, 546, -1000, 14920, 14920, 14920, -1000, -1000,
	1496, 20404, -1000, 2170, -1000, 600, -231, 670, 24765, -1000,
	22825, 670, 640, 27093, -1000, 1886, -1000, -1000, 545, 264,
	-1000, -1000, -1000, -1000, -1000, -1000, 1521, 2149, 1008, -1000,
	1146, 2139, -1000, 2119, 2135, 1142, -1000, -1000, 761, 2126,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1320, -1000, -1000, 2190, 2125, -218, 1971, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1547, -1000, 29877, 32567, -18, -1000, -1000,
	-55, -1000, 10398, 56852, -1000, -1000, -1000, 56852, 697, -1000,
	-1000, 2123, -1000, 56852, 696, -1000, -1000, 2121, -1000, 1883,
	48811, 10794, 48811, 48811, -1000, 542, 1627, 1494, -1000, -1000,
	32185, 2119, 1626, -1000, -1000, 754, 1624, -1000, -1000, 1620,
	-1000, 408, -1000, -1000, 40675, 51103, 754, 1617, -1000, -1000,
	-1000, 38741, -1000, 48811, -1000, 48811, -1000, 1046, -1000, 50721,
	141, 2118, -1000, -1000, 141, 2117, -1000, 141, 2113, -1000,
	140, 2112, -1000, -1000, 1471, 2109, -1000, -60, 2085, -1000,
	-1000, -60, 2079, -1000, -1000, 20404, -38, -1000, -1000, -1000,
	784, 30645, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 40287,
	29877, 32185, 48811, 34489, 29877, 656, 56852, -1000, 2411, 57658,
	29877, 56852, -1000, 32185, 48811, 1922, -1000, 39899, 39511, 2295,
	742, -1000, -1000, 48811, -1000, 20404, -1000, 2407, 1545, -40,
	-1000, -1000, -1000, -1000, -1000, 1662, 1698, 873, 1258, -1000,
	14509, 14509, 2216, -1000, 255, 10794, -1000, -1000, 986, 1697,
	-1000, -1000, -1000, -1000, 29877, 29877, -1000, 39123, -1000, -1000,
	-1000, 1388, 48811, -1000, -1000, 1914, -1000, 31803, 48811, -1000,
	48811, -1000, 48811, -1000, 48811, -1000, 48811, -1000, -1000, -1000,
	-1000, -1000, 2045, 1254, 1246, -1000, 48811, -1000, 48811, -1000,
	-1000, -1000, 1658, -1000, -1000, -1000, -1000, 48811, -1000, -1000,
	-1000, -1000, -1000, -1000, 1164, -1000, 985, -1000, -1000, 142,
	-1000, -1000, 1666, -1000, 1452, 1743, 18718, 1725, 20404, 144,
	-1000, -1000, 144, 144, 13262, -1000, -1000, -1000, 48811, -1000,
	57412, 57658, 10794, 961, 20404, 20404, 20404, 20404, 20404, 20404,
	20404, 20404, 20404, 20404, 20404, 20404, 20404, 20404, 20404, 20404,
	20404, 20404, 20404, 20404, 20404, 20404, 20404, 20404, 20404, 20404,
	20404, 20404, 20404, 20404, 20404, 20404, 20404, 20404, 20404, 1706,
	20404, 941, 20404, 20404, 20404, 20404, 1574, -1000, -1000, 1336,
	445, 1362, -1000, 2505, 2505, 2505, 57215, 57215, 511, 631,
	-1000, 20404, -1000, 98, 20404, 382, 54829, 1569, -16, 11617,
	11192, -1000, 2515, 1002, -1000, -1000, -1000, -1000, 18293, 770,
	56852, 10002, 1935, 1814, -1000, 2513, -1000, -1000, 2457, -1000,
	-1000, -1000, -1000, 960, 959, 958, 950, 541, 681, 680,
	674, 673, 639, 20404, 20404, 20404, 20404, 20404, 20404, 20404,
	20404, -1000, -1000, 17882, 17457, 17032, 16607, 16182, 21637, 15757,
	20404, 12439, -1000, -40, -1000, 50339, -1000, 48811, -17, 2405,
	20404, 162, -1000, 55912, -1000, 162, 162, 540, -53, 56852,
	1705, 1702, 23989, 1646, 1321, 1321, 1321, -1000, 539, 616,
	670, 7607, 37587, 1364, 670, 670, 131, 291, 379, 22437,
	2170, 37587, -1000, -1000, 48811, 535, 11192, 10794, -25, 1197,
	-1000, 33331, 2269, 2254, 2230, 1037, -1000, 1016, 2335, 38741,
	2376, 706, 2276, 1875, -1000, -1000, 938, 38741, 2119, -1000,
	57658, -1000, 1785, 2334, 1082, 1079, 1082, 1082, 1104, 38741,
	935, 1209, 29877, 2248, 934, -29, 2371, 598, 2240, 1871,
	932, -1000, -1000, 48811, 10794, 2239, 980, 659, -18, 32567,
	48811, 250, -1000, 20404, 98, 20404, 98, 1013, -54, 248,
	1712, 1711, 131, -1000, 32949, 2400, 2075, 48811, 1708, -1000,
	2119, 2072, -1000, 1202, -1000, 2068, 2064, 2397, 1493, 1609,
	-1000, -1000, -1000, 1491, 1604, 964, 2021, 767, 587, 2395,
	587, 26317, -1000, 48811, -1000, 48811, -1000, -1000, 48811, -1000,
	48811, -1000, 48811, -1000, 48811, 48811, -1000, 48811, 29877, 29877,
	29877, -61, 552, 30645, -66, 753, 931, -43, -1000, 377,
	48811, 801, 32949, 3723, -67, -1000, 1007, -1000, -1000, -1000,
	409, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 777, 532,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 530, 1191, 522, 522, 522, -1000, -1000, -1000,
	693, -1000, 678, -1000, -1000, -1000, 777, 777, -1000, -1000,
	-186, 1869, -55, 34489, 659, -1000, 659, -1000, 1908, -1000,
	2270, 718, -72, 837, -40, -1000, 1373, -1000, 1084, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2532, -1000, 2528, -1000, -1000, 2501, -20, -1000,
	-20, -1000, 10794, -1000, 48811, 1903, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 48811, -1000, 48811, -1000, -1000, -1000,
	-1000, -1000, -1000, 1070, -1000, 1899, -1000, 1897, -1000, 243,
	-1000, -1000, -1000, 48811, 48811, 48811, -1000, 38741, -1000, -1000,
	-1000, -1000, 56852, -1000, 478, -1000, -1000, 56852, 1109, 1723,
	-1000, 1723, -21, -1000, 55620, 1683, 48811, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 741,
	560, 560, 955, 955, 955, 955, 2544, 3914, 309, 1804,
	3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 4204, 467,
	467, 4204, 4204, 4204, 4204, 4204, 467, 467, 467, 3791,
	3791, 3791, 57215, 56923, 57262, 20404, 20404, 930, 1310, 445,
	6976, 20404, 7059, 7059, 7059, 7059, -1000, 1537, -1000, -1000,
	-1000, -1000, 1867, 520, 21637, 21637, -1000, -1000, -1000, 12028,
	20404, -1000, -1000, -1000, -1000, 517, 20404, -1000, 55186, -241,
	374, -148, 242, 48811, 20404, 19, -1000, 20404, 20404, 20404,
	373, -1000, 372, -1000, 927, -1000, 926, 925, 912, -1000,
	516, 614, -94, -1000, 1052, -1000, 20404, 237, -1000, 1315,
	515, 513, 371, -74, 737, 736, 735, 734, 20404, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56781,
	52691, 52399, 52328, 5895, 52257, 7134, -75, 370, -1000, 1866,
	-148, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 368, -1000,
	-80, -1000, -81, -1000, 367, -1000, 56489, -148, 366, 5150,
	-1000, 21637, 21637, 21637, -1000, 364, -1000, 55549, -1000, 56418,
	15332, 15332, 15332, 361, 56347, 20404, -148, -1000, -1000, 512,
	-82, 767, 14920, 23213, 10794, -1000, 767, 767, 20404, -1000,
	20404, 23989, 23989, 1540, 1699, 23989, -1000, -1000, -1000, -1000,
	37587, 651, 670, 37587, -1000, 2457, 1717, -1000, -1000, -1000,
	48811, 408, -1000, 37587, 37587, 10794, 670, -1000, 351, 25541,
	19, 232, 1635, 48811, 48811, 48811, -1000, -1000, 1600, 49957,
	1599, 57658, 48811, -1000, -1000, 510, 507, 1682, 1678, 48811,
	48811, 49575, 49193, 48811, 1414, 20404, 1555, 1276, 98, -1000,
	98, 733, 505, 48811, 1134, -1000, -1000, -1000, -1000, -1000,
	48811, -1000, -1000, 2497, -1000, 1082, -1000, -1000, -1000, 1082,
	2119, 1130, 48811, 29877, 756, 730, 48811, 1235, 98, -1000,
	98, 728, 504, 10794, 1274, -1000, 722, 48811, 1791, -1000,
	1536, -1000, -1000, 9606, 56852, -1000, 56852, -1000, -1000, -1000,
	10794, 1783, 1783, 340, -23, -1000, -1000, -1000, -1000, -1000,
	-1000, 1741, 48811, 567, 48811, 98, 48811, 135, 753, 29877,
	48811, 29877, 29877, 29877, 98, 48811, 2002, 48811, 1996, 2165,
	653, 48811, 1389, 20404, 1154, -1000, 25929, 792, 48811, 1121,
	130, -1000, -1000, -1000, 10, 48811, -1000, -1000, 141, 141,
	141, -1000, 140, 1471, -1000, -60, -60, -1000, -1000, -1000,
	552, 1863, 38359, 48811, 2424, 753, 503, 29877, -87, -1000,
	805, 897, 890, -1000, 57658, -1000, 630, 916, -1000, 2494,
	498, 2457, -1000, 753, 48811, 127, -1000, 755, 1418, -1000,
	14509, 14509, -1000, 1373, -1000, -1000, 1129, -1000, 1176, -1000,
	-1000, -1000, -1000, 14509, -1000, -1000, 979, -55, -55, -1000,
	1064, 1063, 48811, -1000, -1000, -1000, -1000, 1109, -1000, 20404,
	-1000, -1000, -1000, 13262, -1000, -1000, -1000, 48811, -219, 20404,
	20404, 6468, 6005, 20404, 21637, 21637, -1000, 20404, 5524, -1000,
	-1000, -1000, -1000, -1000, 1862, 497, 20404, 57658, 3980, 3877,
	-88, 4204, -1000, 20404, -1000, 9210, -89, 54758, 338, 14098,
	-1000, 55983, -26, -26, -1000, 2526, 1642, 1213, 1175, 1086,
	2490, -1000, -1000, 628, 2162, -1000, 20404, 56054, 8814, -1000,
	26705, 768, 1389, -1000, -1000, 2457, -1000, -1000, -1000, -1000,
	54687, 57412, 57658, 20404, 20404, -1000, 20404, 20404, 20404, -1000,
	-1000, 20404, -1000, -1000, -1000, -1000, 1855, 20404, -1000, 57412,
	57658, 21637, 21637, 21637, 21637, 21637, 21637, 21637, 21637, 21637,
	21637, 21637, 21637, 21637, 21637, 21637, 21637, 21637, 21637, 21637,
	1689, 21637, 2478, 2478, 2478, -1000, 1895, 1855, 20404, 20404,
	57658, 336, 335, 334, -1000, 20404, -148, 3723, -1000, 1813,
	-1000, -190, -1000, 2170, -1000, -1000, 1813, 1813, -98, 56852,
	-1000, 1540, -1000, 493, 20404, 23989, -1000, 613, -1000, -99,
	-1000, 37587, -1000, 611, -242, -1000, 661, -1000, 408, -1000,
	-1000, -1000, 224, 37587, -1000, -105, -1000, 2392, 331, 10794,
	-1000, -1000, 899, 896, -1000, 1993, -1000, 1594, -1000, 786,
	-1000, 1165, 20404, 24377, 492, 486, 1300, -1000, 1991, 1471,
	1990, 1471, -1000, -1000, 747, -1000, 56852, 484, 482, -1000,
	-25, 1189, -1000, -1000, 20404, 20404, -1000, 892, -1000, -1000,
	-1000, 2119, 881, -1000, -1000, 1200, 20404, -1000, -1000, -1000,
	-1000, 20404, 20404, -1000, -29, 872, 20404, 1963, 753, 1846,
	998, -1000, -1000, -1000, -1000, -1000, -1000, 1736, 32949, 48811,
	481, 48811, 477, -1000, -1000, 475, 48811, -1000, -1000, 2119,
	-1000, 754, -1000, -1000, 799, 10794, 474, 10794, 1670, 653,
	30263, -1000, 754, 1743, -1000, 56852, -1000, 1121, 12850, 2232,
	-111, -1000, 222, -1000, -1000, -1000, 767, 26317, 23989, 20404,
	2547, -112, -1000, -1000, -1000, -1000, -1000, -1000, 98, -31,
	468, -1000, 660, 655, -55, 1390, -1000, 29877, 48811, 48811,
	-1000, 2487, -1000, 610, 330, 2457, 327, -1000, -55, 48811,
	-1000, 1403, 10794, 48811, 48811, 10794, 48811, -1000, -1000, -40,
	-1000, -1000, -1000, -1000, 48811, -1000, -1000, -1000, 1422, 54330,
	-1000, 2255, 10794, 2499, 7059, 20404, 20404, 4286, 3122, 411,
	7059, 20404, 20404, 57658, 5441, -117, 20404, 20404, -1000, 608,
	56852, -1000, -1000, -1000, -1000, 2519, 20404, 326, 325, 322,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 321, -1000,
	-1000, 56852, 20404, 221, -1000, -1000, -1000, 51867, -1000, 20404,
	320, 318, -1000, 317, 316, 6833, 365, 54259, 54188, 53831,
	56852, 1895, 56852, -1000, -1000, 793, 793, 1043, 1043, 1043,
	1043, 2478, 1468, 447, 865, 629, 629, 629, 438, 533,
	533, 629, 629, 629, 1845, 1651, 466, 5989, -1000, -1000,
	56852, 56852, 315, -1000, -1000, -1000, -148, 306, 1798, 2332,
	-1000, 23989, 1798, 1798, -1000, -1000, 48811, 56852, -1000, -231,
	-1000, 2457, -1000, -1000, 1717, -1000, 8017, -1000, 10794, -1000,
	-1000, 25541, -1000, 457, -1000, 99, 48811, 48811, 48811, 1986,
	-1000, 3067, -1000, 53760, -119, -1000, 2290, 2290, 20404, 131,
	24377, 48811, -1000, 1331, 1749, 826, 48811, -1000, 48811, -1000,
	-1000, 48811, 48811, 48811, 48811, 48811, 56852, -120, 48811, 48811,
	29877, 56852, 56852, -125, 10794, 56852, 2236, -1000, 29877, 877,
	1235, 1775, -1000, 456, 24377, 455, 48811, 32949, 2386, -1000,
	-1000, -1000, 452, 1907, 1481, 24377, 1480, 1672, 653, 30263,
	-1000, 964, 1121, -1000, -1000, -41, -1000, 491, 98, 48811,
	2542, 1389, -1000, -50, 56852, -1000, 654, -1000, 37973, 37973,
	29877, 29877, -1000, 305, 2203, 2202, 534, -1000, -1000, 297,
	-1000, -55, 1385, -1000, -1000, 1252, 1535, -1000, -1000, -1000,
	-1000, -1000, 2255, 7059, 7059, 20404, 20404, 20404, 7059, 5441,
	-126, -1000, 7059, 7059, -1000, -1000, 55983, -1000, -1000, -1000,
	-1000, 56852, 8418, 1256, -1000, 53689, -1000, -1000, -1000, -1000,
	20404, 20404, -1000, -1000, -1000, -1000, -1000, 21637, 1843, 450,
	57658, -1000, -1000, 765, 20404, 20404, 2170, 765, 765, -127,
	670, -1000, -1000, -1000, 2457, 99, -1000, 2541, 10794, -1000,
	-1000, -1000, 48811, -1000, 48811, -1000, 10794, 48811, 1815, 1565,
	-1000, -1000, 1677, 449, 21637, 48811, 716, -1000, 1301, 24377,
	2255, 10794, 2255, 53332, -128, -133, 1554, -1000, -1000, 1538,
	20404, -1000, 57658, 1471, 1471, -134, -135, -1000, 870, 860,
	859, -1000, -1000, -1000, 854, -1000, 710, -60, 20404, -1000,
	-1000, 1286, 24377, -136, 24377, -142, 286, 98, 24377, -1000,
	-1000, 48811, -143, 48811, -1000, 653, 30263, -1000, 2165, -1000,
	2177, 48811, 2229, -1000, -1000, -1000, 1743, 445, -1000, -152,
	-1000, -1000, 753, 444, 435, -1000, -1000, -63, -1000, 695,
	679, -1000, -1000, -1000, 10794, 978, -1000, 7059, 7059, 7059,
	-1000, 279, -1000, -1000, 1389, 2327, -1000, 53261, 53190, 4018,
	21637, 57658, -155, -1000, 48811, 56852, -148, -1000, -1000, -1000,
	37587, 448, -1000, -1000, 1896, -1000, -1000, -1000, 48811, 1570,
	-1000, -1000, 20404, 5989, 425, 20404, -1000, 1736, 424, -1000,
	-1000, -1000, -1000, -1000, -1000, 2290, -1000, 1171, -1000, -1000,
	56852, 2265, -1000, -1000, 421, 420, 48811, 48811, 418, 415,
	20404, 56852, 48811, -160, 1301, -161, -1000, 1736, -1000, -163,
	799, -1000, 414, 30263, -1000, 1670, 956, -166, 48811, 1121,
	-1000, -1000, -1000, 29877, 29877, 1385, -1000, 48811, -1000, 48811,
	-1000, 48811, -1000, 1135, 20404, -1000, -1000, 4018, -168, -1000,
	-110, -1000, 2381, -1000, -1000, -1000, -1000, 1978, 52833, 1647,
	48811, 52762, 1235, 48811, 2255, 48811, 798, 10794, 1252, 1252,
	-1000, -1000, 20404, 20404, 56852, 413, -1000, 1736, 1301, 1235,
	1301, 412, 24377, -1000, 1672, 1036, -1000, 767, -1000, -1000,
	-169, -171, -1000, -176, -177, -1000, 277, 21226, 21226, -148,
	-1000, 48811, 410, 1943, -1000, 1459, 1299, 21, 825, -1000,
	-179, -1000, 408, -1000, 20404, -1000, -184, -1000, 785, -185,
	-1000, 782, -187, -192, 48811, 1235, 1736, -1000, 1736, 24377,
	-194, -1000, 26317, -1000, 753, 753, -1000, -1000, -1000, -1000,
	-1000, 22033, 1367, 1107, 55257, -1000, -1000, -1000, 48811, -1000,
	1478, 1476, 1113, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1647, 56852, -1000, 1252, 1765, -1000, 1252, 1829, -1000, -1000,
	-197, -1000, 1235, 1235, -200, -1000, -202, -1000, -1000, 2417,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2189, -1000, 817,
	1576, 1576, 1459, -1000, 396, -1000, 391, 1393, -1000, -1000,
	1301, -1000, 20815, -1000, 2438, -1000, -1000, 1701, -1000, -1000,
	20404, 20404, -1000, -1000, -1000, 1736, -1000, -1000, -1000, -1000,
	-206, -212, 1235, 1235, 845, -1000, -1000, 387, 20404, -232,
	1235, -1000,
}
var sqlPgo = [...]int{

	0, 3040, 3039, 1996, 3038, 2567, 3035, 3034, 3032, 3031,
	3030, 2546, 3027, 3025, 3023, 3021, 3016, 3015, 3014, 3013,
	3012, 3011, 3010, 3007, 3000, 2997, 2994, 2993, 2992, 2988,
	2987, 2986, 2984, 2983, 2538, 2981, 2532, 2979, 2976, 2972,
	2970, 2966, 2965, 2963, 2962, 26, 2961, 2960, 2957, 2956,
	2511, 2955, 2951, 2476, 2950, 2949, 2456, 2945, 2944, 2943,
	2450, 2435, 2939, 2937, 2370, 2934, 2930, 2346, 2927, 2296,
	2925, 2923, 2285, 2921, 98, 114, 2913, 2266, 2907, 2899,
	2246, 2244, 2211, 2897, 2208, 2896, 2895, 2202, 2153, 2892,
	1319, 2887, 2886, 2883, 2881, 2085, 1981, 2871, 2870, 2869,
	171, 2868, 1967, 2867, 2865, 2864, 2863, 2861, 2860, 2858,
	2855, 2853, 2851, 2850, 2845, 2843, 2842, 2838, 2837, 2835,
	2834, 2832, 2830, 2829, 2828, 2826, 2824, 183, 117, 2819,
	2817, 1959, 1957, 2813, 2811, 51, 47, 15, 82, 112,
	208, 4758, 180, 2809, 2808, 2807, 2804, 2800, 28, 121,
	123, 118, 115, 92, 2799, 2792, 55, 35, 30, 20,
	83, 2791, 2790, 2788, 2189, 90, 2787, 2786, 169, 174,
	2785, 556, 2784, 32, 85, 99, 95, 147, 52, 2783,
	101, 17, 2781, 116, 286, 2779, 75, 33, 21, 4178,
	77, 71, 74, 178, 155, 150, 145, 119, 79, 2778,
	172, 73, 140, 2777, 2775, 2773, 62, 136, 1, 6,
	131, 10, 2772, 11, 2771, 9, 2767, 2766, 2763, 2762,
	22, 111, 37, 36, 2759, 57, 224, 137, 2758, 158,
	2756, 65, 2755, 177, 141, 4, 170, 2749, 78, 19,
	81, 2745, 2735, 100, 157, 2733, 25, 120, 86, 96,
	184, 151, 89, 152, 153, 2723, 2722, 2719, 138, 2703,
	135, 106, 2694, 2692, 29, 45, 154, 48, 2688, 2682,
	110, 2679, 142, 2675, 2674, 2673, 186, 113, 129, 3,
	56, 87, 8, 156, 104, 54, 72, 2668, 3154, 1467,
	1296, 2666, 105, 61, 40, 68, 107, 168, 39, 2662,
	2658, 1325, 2657, 2650, 2648, 124, 2646, 2645, 2644, 91,
	43, 34, 2643, 108, 38, 149, 181, 58, 148, 132,
	175, 122, 2641, 133, 97, 2640, 146, 165, 59, 2639,
	232, 2638, 139, 2637, 2636, 2635, 2634, 162, 2633, 2630,
	2626, 50, 2624, 93, 2622, 134, 126, 127, 94, 130,
	164, 159, 697, 2621, 143, 27, 2620, 1388, 24, 0,
	4314, 4042, 2618, 144, 88, 2616, 2615, 2612, 2611, 31,
	13, 5, 7, 14, 12, 234, 218, 2609, 2608, 128,
	80, 102, 2605, 187, 160, 2604, 2603, 2601, 44, 2600,
	18, 2599, 16, 2596, 2594, 23, 2, 2593, 2592, 161,
	2591, 2590, 2589, 2373, 2587, 179, 2586, 2584, 109, 2583,
	2582, 2581, 2580, 2173, 2578, 2577, 42, 49, 125,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 8, 8, 9, 9, 9, 33, 33, 11, 11,
	10, 10, 10, 12, 7, 7, 7, 7, 7, 7,
	7, 7, 14, 14, 24, 24, 15, 26, 405, 405,
	18, 28, 19, 29, 13, 22, 20, 20, 30, 17,
	17, 25, 25, 150, 150, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 404, 404, 152, 152, 151, 147,
	147, 407, 407, 153, 153, 153, 155, 155, 34, 34,
	88, 88, 88, 138, 81, 81, 81, 81, 81, 76,
	76, 357, 357, 358, 358, 134, 134, 135, 135, 135,
	135, 136, 136, 137, 137, 137, 48, 36, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 38, 38,
	38, 38, 38, 38, 39, 39, 39, 39, 39, 39,
	46, 46, 128, 128, 49, 49, 49, 49, 49, 49,
	49, 49, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 60, 60, 58, 325,
	325, 61, 61, 62, 62, 62, 62, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 70, 70, 70, 71, 71,
	71, 68, 68, 68, 66, 66, 66, 65, 65, 65,
	69, 69, 69, 67, 67, 67, 234, 234, 72, 72,
	72, 72, 72, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 75,
	75, 75, 75, 75, 75, 75, 75, 327, 327, 73,
	73, 299, 299, 77, 77, 259, 259, 78, 78, 78,
	78, 78, 79, 79, 79, 79, 89, 89, 89, 89,
	403, 403, 227, 227, 168, 168, 168, 168, 84, 84,
	84, 84, 85, 85, 85, 86, 86, 133, 133, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 40,
	40, 40, 41, 41, 42, 42, 43, 43, 44, 44,
	45, 45, 45, 45, 45, 96, 96, 96, 98, 95,
	95, 95, 97, 97, 97, 97, 99, 99, 100, 100,
	100, 100, 100, 100, 101, 101, 351, 351, 237, 237,
	349, 349, 350, 350, 204, 204, 204, 204, 204, 205,
	205, 205, 356, 356, 356, 356, 356, 356, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 118, 118, 118, 127, 127,
	127, 127, 127, 127, 127, 120, 120, 120, 111, 111,
	103, 103, 103, 103, 107, 107, 107, 107, 107, 104,
	104, 108, 108, 110, 110, 112, 112, 112, 112, 112,
	112, 105, 105, 105, 105, 114, 114, 114, 114, 113,
	113, 123, 123, 123, 123, 123, 123, 312, 312, 119,
	119, 119, 119, 122, 122, 122, 122, 117, 117, 117,
	121, 121, 124, 124, 124, 124, 106, 106, 106, 410,
	410, 410, 125, 125, 116, 116, 126, 126, 126, 126,
	126, 126, 126, 115, 115, 115, 406, 406, 109, 401,
	401, 399, 399, 399, 399, 399, 399, 399, 400, 400,
	402, 402, 82, 82, 82, 54, 54, 55, 55, 206,
	206, 207, 207, 281, 281, 281, 281, 208, 208, 154,
	154, 154, 211, 212, 212, 209, 209, 210, 210, 210,
	214, 214, 213, 216, 216, 215, 280, 367, 367, 368,
	368, 368, 368, 368, 368, 368, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 365, 365, 365, 366,
	363, 363, 364, 364, 364, 364, 411, 411, 279, 279,
	220, 220, 370, 370, 370, 370, 371, 371, 371, 371,
	371, 374, 373, 372, 372, 372, 372, 372, 308, 308,
	308, 59, 59, 59, 248, 248, 247, 247, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 130, 130, 56, 56, 56, 160, 160, 53, 53,
	53, 57, 57, 52, 52, 52, 52, 52, 264, 264,
	264, 263, 263, 225, 225, 314, 314, 314, 172, 172,
	173, 173, 148, 148, 148, 21, 23, 23, 16, 16,
	16, 16, 16, 16, 31, 31, 32, 32, 27, 27,
	408, 408, 409, 409, 83, 83, 87, 87, 87, 93,
	93, 129, 129, 129, 129, 129, 129, 129, 35, 35,
	35, 35, 47, 47, 47, 47, 91, 414, 414, 414,
	92, 92, 413, 413, 167, 167, 167, 167, 169, 169,
	276, 276, 277, 277, 415, 415, 278, 278, 278, 162,
	161, 163, 163, 51, 51, 51, 156, 156, 157, 157,
	158, 158, 159, 159, 416, 416, 80, 80, 80, 132,
	132, 200, 200, 272, 272, 272, 221, 221, 178, 178,
	275, 275, 273, 273, 273, 246, 246, 246, 131, 131,
	230, 230, 239, 239, 240, 240, 322, 322, 241, 90,
	90, 141, 141, 139, 139, 139, 139, 139, 139, 140,
	140, 140, 142, 142, 142, 142, 142, 142, 142, 145,
	145, 145, 145, 146, 146, 146, 144, 144, 381, 381,
	381, 383, 383, 384, 380, 380, 382, 382, 412, 412,
	250, 250, 250, 218, 219, 217, 217, 417, 417, 223,
	223, 222, 224, 224, 313, 313, 313, 244, 244, 244,
	244, 267, 267, 265, 265, 266, 266, 268, 268, 269,
	269, 269, 270, 270, 271, 271, 243, 243, 295, 295,
	143, 143, 143, 229, 229, 229, 231, 231, 286, 286,
	286, 287, 287, 285, 285, 285, 285, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 316, 316, 232, 232,
	317, 274, 274, 397, 397, 397, 398, 398, 311, 311,
	318, 318, 318, 318, 318, 318, 309, 309, 310, 310,
	323, 324, 324, 253, 253, 253, 253, 251, 251, 252,
	252, 319, 319, 319, 319, 245, 245, 320, 320, 320,
	282, 282, 328, 328, 328, 343, 343, 228, 228, 228,
	338, 338, 329, 329, 329, 329, 329, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 332,
	332, 332, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	342, 342, 342, 342, 342, 333, 333, 339, 340, 334,
	335, 341, 341, 341, 341, 345, 345, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 337, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 261, 261, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 290,
	290, 290, 290, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 375, 375, 375, 375,
	375, 375, 375, 375, 378, 378, 379, 379, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 385, 385, 386,
	386, 388, 388, 389, 389, 390, 391, 391, 391, 392,
	393, 393, 387, 387, 394, 394, 394, 395, 395, 396,
	396, 396, 396, 396, 301, 301, 307, 307, 307, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 170, 170, 170, 170, 170,
	236, 236, 235, 235, 298, 298, 296, 296, 300, 300,
	254, 254, 344, 344, 344, 344, 344, 344, 344, 255,
	255, 255, 262, 256, 256, 257, 257, 257, 257, 257,
	292, 293, 258, 258, 258, 294, 294, 302, 306, 306,
	305, 304, 304, 303, 303, 283, 283, 284, 284, 242,
	242, 418, 418, 238, 238, 321, 321, 321, 321, 202,
	202, 233, 233, 201, 201, 195, 195, 196, 196, 196,
	196, 226, 226, 346, 346, 346, 347, 348, 297, 188,
	187, 175, 176, 186, 185, 184, 174, 177, 181, 182,
	183, 179, 180, 191, 190, 189, 326, 197, 197, 198,
	198, 198, 199, 199, 199, 199, 171, 171, 192, 192,
	193, 194, 194, 164, 164, 164, 165, 165, 166, 166,
	355, 355, 353, 353, 353, 354, 354, 354, 354, 352,
	352, 352, 352, 352, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 3, 4, 6, 1, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 6, 4, 6, 6, 6, 1, 1,
	5, 5, 6, 6, 7, 7, 7, 10, 7, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 9, 12, 12, 2, 7,
	2, 1, 1, 1, 3, 3, 0, 3, 1, 3,
	1, 1, 3, 2, 5, 0, 5, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 3, 3, 3, 5,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	6, 6, 1, 1, 1, 2, 1, 2, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	3, 1, 2, 1, 2, 1, 7, 3, 6, 2,
	0, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	3, 5, 3, 3, 5, 3, 1, 3, 2, 2,
	5, 6, 3, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 3, 5,
	2, 3, 0, 3, 2, 3, 0, 2, 3, 2,
	3, 2, 6, 4, 7, 2, 6, 4, 7, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 3, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 6, 3, 5, 3,
	2, 6, 3, 3, 4, 4, 3, 3, 1, 3,
	2, 1, 3, 1, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 5, 4, 6, 4, 6, 4, 1, 0, 2,
	3, 3, 3, 6, 4, 2, 3, 4, 2, 3,
	3, 3, 4, 3, 3, 3, 3, 4, 3, 1,
	1, 1, 2, 3, 2, 3, 7, 7, 8, 10,
	7, 4, 5, 5, 5, 3, 1, 1, 5, 2,
	0, 1, 1, 1, 1, 3, 2, 2, 2, 1,
	2, 0, 3, 3, 2, 8, 11, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 2, 1, 0, 1, 0, 9, 9, 3,
	1, 3, 7, 1, 3, 11, 3, 2, 0, 3,
	1, 2, 2, 3, 2, 6, 2, 1, 1, 2,
	4, 2, 5, 5, 5, 2, 8, 9, 6, 5,
	3, 1, 4, 7, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 7, 3, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 6, 3, 13, 16, 9, 12, 4, 2, 2,
	0, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 0,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 1, 3, 1, 3,
	8, 5, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 5, 1, 0, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 3, 2, 4, 4, 0, 8, 4, 3,
	4, 1, 5, 3, 4, 5, 1, 5, 1, 3,
	2, 0, 3, 0, 2, 3, 1, 3, 2, 0,
	3, 4, 5, 4, 5, 4, 3, 2, 1, 0,
	5, 1, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 5, 2, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 2, 2, 1, 5, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	8, 8, 6, 4, 6, 6, 6, 4, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 2, 2, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 425, -4, -34, -36, -48, -46,
	-49, -78, -61, -62, -63, -77, -72, -76, -79, -80,
	-81, -82, -73, -88, -87, -89, -93, -40, -90, -83,
	-84, -94, -102, -129, -130, -131, -132, -5, -11, 25,
	36, -37, -38, -39, 51, 78, 66, -56, -53, -50,
	-60, 80, 100, -382, 104, -64, -67, -69, 108, 116,
	121, 122, 146, 155, 258, 265, 287, 289, 291, 300,
	-42, -41, 117, -139, -141, 285, -85, -86, -95, -96,
	-97, -98, -133, 318, -103, -104, -105, -106, -107, -108,
	-109, -110, -111, -112, -113, -114, -115, -116, -117, -118,
	-119, -120, -121, -122, -123, -124, -125, -126, 321, -35,
	-47, -92, -91, 366, -6, -7, -8, -9, -10, -12,
	-23, -51, -52, -54, -55, -57, -59, -58, -381, -65,
	-66, -68, -70, -71, -142, -140, 422, 286, 376, 37,
	330, 67, 112, 295, 20, -14, -18, -19, -15, -17,
	-20, -16, -24, -28, -29, -26, -25, -27, -30, -31,
	-32, -33, -21, -22, -13, 393, 401, -145, -143, -144,
	-146, 307, 384, 343, 426, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 2, 343, 387, 308,
	377, 93, 168, 270, 256, -399, 2, 4, -361, -359,
	-196, -195, 343, 93, 30, 38, 39, 41, 44, 56,
	57, 58, 61, 97, 98, 115, 123, 124, 135, 148,
	150, 158, 159, 160, 175, 181, 183, 163, 204, 233,
	235, 248, 252, 262, 264, 273, 297, 324, 339, 355,
	356, 357, 363, 364, 384, 385, 389, 396, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 52, 55, 60, 65, 66,
	67, 68, 69, 74, 71, 72, 73, 76, 78, 79,
	82, 83, 91, 92, 94, 95, 96, 100, 102, 104,
	107, 108, 110, 111, 113, 116, 117, 120, 118, 349,
	351, 119, 121, 122, 132, 133, 134, 136, 137, 139,
	141, 145, 147, 152, 153, 154, 155, 156, 157, 169,
	164, 170, 174, 177, 176, 178, 179, 180, 171, 185,
	188, 189, 190, 192, 193, 196, 197, 198, 201, 200,
	203, 206, 207, 210, 211, 214, 216, 219, 220, 223,
	221, 222, 225, 226, 228, 227, 234, 236, 237, 239,
	240, 243, 244, 247, 250, 253, 254, 255, 256, 257,
	258, 259, 261, 263, 265, 267, 268, 269, 270, 271,
	272, 274, 275, 277, 278, 279, 280, 281, 285, 283,
	284, 286, 287, 288, 289, 291, 293, 294, 295, 296,
	298, 319, 320, 332, 300, 301, 302, 303, 304, 305,
	306, 310, 314, 311, 312, 313, 308, 309, 315, 316,
	318, 321, 323, 325, 326, 329, 330, 331, 333, 336,
	337, 338, 334, 335, 328, 341, 342, 344, 345, 346,
	347, 348, 350, 352, 353, 358, 361, 362, 366, 367,
	369, 370, 373, 374, 375, 380, 376, 378, 381, 382,
	383, 388, 387, 394, 395, 397, 398, 399, -194, -164,
	415, -193, 425, 425, 425, 2, 189, 190, 269, 268,
	315, 316, -189, -192, -193, -194, -164, 4, -359, -361,
	93, 241, 425, 425, 425, 2, 343, 331, 55, 308,
	377, 293, 387, -263, 185, 93, 372, -164, 265, 24,
	2, 102, 174, 375, 374, 24, 261, 309, 345, 347,
	2, 425, 425, 2, 387, 308, 343, 168, 93, 377,
	293, -183, 2, -164, -75, 2, 422, 27, -74, -5,
	-50, -60, -64, -77, -72, -11, -34, -36, -56, -53,
	-61, -67, -69, -81, -80, -82, -84, -88, -87, -90,
	-95, -96, -102, -131, -132, 80, 25, 108, 318, 117,
	184, 2, -403, -227, 2, 24, -168, -164, 80, 146,
	307, -138, 343, 2, -164, 189, 190, 2, -183, 2,
	-399, 2, 189, 190, 2, -403, -227, 23, 2, -164,
	2, 304, 321, -169, 2, 300, -164, 425, 425, 425,
	425, 425, 425, 211, 60, 297, 315, -100, 362, -99,
	355, 302, -101, -351, 2, 223, -164, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 2,
	-127, 315, 331, 153, 36, 60, 24, 65, 94, 147,
	168, 169, 197, 75, 76, 268, 211, 190, -312, 316,
	344, 303, 341, 362, 80, 378, 294, -406, 118, 4,
	93, 223, 317, 355, 69, 348, 349, 425, 425, 425,
	-412, 2, 343, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, -140, -142, -141, 425, 425, 425,
	425, 425, -222, -223, 371, 182, 114, 246, -139, -141,
	2, -381, -127, 315, 2, 60, 24, -349, 2, -288,
	241, -290, 413, 414, 408, 229, 400, -301, 99, 218,
	217, -291, -302, 115, 297, 422, 7, 8, 5, 6,
	-171, -330, -297, -337, 365, 125, 232, -199, 428, 9,
	-378, -141, 31, 53, -353, -198, -331, -340, -335, -336,
	-338, 42, 49, 48, 352, 222, 310, 311, 312, 313,
	325, 380, 164, 40, 239, 240, 176, 4, 183, -197,
	-164, -375, -376, -359, -360, 175, 177, 178, 179, 180,
	181, 324, 39, 273, 136, 137, 135, 107, 98, 97,
	235, 44, 43, 41, -341, 95, 355, 356, 357, 358,
	192, 193, 63, 85, 86, 84, 89, 88, 90, 87,
	317, 377, 54, 30, 158, 159, 163, 233, 160, 61,
	-377, 335, 81, 126, 144, 173, 161, 186, 187, 191,
	205, 208, 224, 231, 249, 251, 292, 322, 57, 56,
	385, 123, 124, 148, 204, 252, 262, 339, 363, 364,
	-413, 2, 362, 362, 2, -413, 2, -413, 2, -167,
	2, 362, 359, -414, 362, 396, -383, 274, -384, -183,
	-383, 425, 425, 427, 425, -217, -218, -219, 2, 24,
	105, 422, 2, -315, 2, 420, -319, -141, 199, -318,
	422, -316, -189, 242, -379, 298, -375, -376, -171, -164,
	-198, 4, 218, 217, -3, 2, -319, 158, -189, 2,
	-319, 158, 2, -190, 158, -319, -192, 2, -357, 158,
	-355, 9, -354, 5, 4, -359, -361, -360, 63, 2,
	-174, -164, 2, -201, 158, -189, -186, -352, 4, -359,
	-361, -360, -362, 24, 26, 27, 28, 29, 31, 32,
	33, 34, 45, 53, 54, 59, 62, 64, 75, 80,
	84, 85, 87, 86, 88, 89, 90, 99, 101, 103,
	105, 106, 109, 112, 114, 125, 127, 140, 142, 143,
	146, 149, 151, 162, 168, 172, 182, 184, 199, 202,
	209, 212, 213, 229, 230, 232, 238, 241, 242, 245,
	246, 260, 266, 276, 290, 307, 317, 327, 340, 343,
	354, 359, 360, 365, 371, 372, 377, 379, 386, 390,
	391, 392, 393, -187, -352, 359, 427, -233, -195, -196,
	-226, -164, 424, -288, 2, -90, 2, -288, 158, 2,
	-90, 158, 2, -288, 158, 2, -90, 158, 2, -220,
	422, 424, 343, 64, 2, -189, 158, -179, 2, -164,
	140, -190, 158, 2, -192, -357, 158, 2, -357, 158,
	2, -191, 2, -189, 168, 168, -174, 158, 2, -164,
	24, 143, 2, 184, 2, 184, 2, -320, 2, -319,
	-234, 158, 2, -189, -234, 158, 2, -234, 158, 2,
	-202, 158, 2, -201, -174, 158, 2, -358, 158, 2,
	-357, -358, 158, 2, -259, 422, -327, 2, -326, -354,
	384, 422, 425, 425, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 425, 425, 425, 425, 315,
	-138, 241, 359, 427, 422, -189, -288, -90, -299, 422,
	143, -288, -90, 241, 143, 243, 2, 93, 343, 399,
	24, -164, 2, 319, 2, 422, -100, 58, 362, -277,
	2, -278, -161, -162, -163, 188, 267, 272, 399, -349,
	359, 405, 143, -349, -237, 424, -127, 2, 140, 379,
	2, 7, 2, -357, 271, 132, 2, 319, 2, 268,
	316, 60, 143, 2, 2, -401, 2, 241, 143, 2,
	143, 2, 143, 2, 143, 2, 143, 2, 2, 268,
	316, 2, 361, 198, 119, 2, 143, 2, 143, 2,
	5, 2, 188, 267, 332, 2, -189, -410, 2, 343,
	387, 308, 2, 2, 143, 2, 143, 399, 2, -245,
	-319, -222, -223, -244, -265, -266, 209, 127, 238, -250,
	24, 105, -250, -250, 47, 423, 423, -127, 319, 2,
	10, 11, 62, 35, 413, 414, 415, 416, 138, 417,
	418, 411, 412, 410, 403, 404, 407, 194, 195, 77,
	406, 405, 70, 215, 299, 128, 129, 130, 131, 282,
	165, 166, 167, 13, 14, 15, 28, 245, 208, 400,
	161, 322, 408, 16, 17, 18, 186, 187, 231, 38,
	162, -170, -203, -288, -288, -288, -288, -288, 251, -242,
	-283, 420, -141, 422, 422, -141, -288, -301, -235, 422,
	422, 5, 422, 5, -348, 7, -141, -296, 420, -303,
	-288, 424, -385, 394, -333, 422, 264, -332, 422, -332,
	-332, -345, 388, 395, 401, 395, 401, 140, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 422,
	422, -345, -345, 422, 422, 422, 422, 422, 422, 422,
	422, 422, -276, -277, -276, 359, -169, 427, -383, -220,
	422, -238, -321, -288, 415, -238, -238, 241, -235, -288,
	81, -253, 191, 224, 144, 205, 292, 173, -348, -75,
	-285, 428, -311, 401, -141, -316, -164, -141, -318, 422,
	-315, -311, 415, -189, 422, 143, 422, 424, -150, 283,
	-149, 22, 25, 108, 382, 120, -210, 170, 256, 115,
	328, -405, 117, 301, 350, 351, 283, 115, -247, -249,
	32, 91, 226, 253, 50, 156, 217, 218, 330, 115,
	283, 393, 115, 117, 283, -152, 328, -405, 117, 301,
	283, -151, -210, 115, 428, 117, 236, -357, -233, 427,
	427, -352, 415, 115, 115, 115, 115, 143, -226, -352,
	-189, -197, -164, -198, 422, -220, 229, 241, -399, -248,
	-247, 229, -160, -380, 393, 229, 229, -220, -176, 158,
	2, -165, -164, -176, 158, -380, 229, -320, -200, -189,
	-200, 318, -183, 32, -153, 427, 52, 288, 115, -153,
	115, -153, 115, -153, 427, 115, -153, 115, 427, 115,
	115, -235, 423, 427, -327, -357, -399, -226, -168, -357,
	143, 80, 422, 32, -298, -328, -329, -330, -339, -334,
	-337, 42, 49, 48, 352, 222, 310, 311, 312, 313,
	325, 380, 164, 40, 239, 240, 176, 4, 41, -341,
	183, 175, 177, 178, 179, 180, 181, 324, 39, 273,
	136, 137, 135, 107, 98, 97, 235, 44, 43, 95,
	355, 356, 357, 358, 192, 193, 57, 56, 385, 335,
	-358, -399, -226, 140, -174, 2, -189, 2, 71, 72,
	399, -351, -235, 32, -277, 2, -415, 427, 207, -205,
	214, 228, 152, 242, 397, -356, 5, 4, -297, -308,
	99, 211, -337, 8, 414, -346, 7, 413, -350, -349,
	-350, 83, 424, -352, 343, 192, -357, -357, -351, 24,
	320, 2, -189, -402, 140, -400, 293, -399, -189, -189,
	-189, -189, -189, 140, 2, 361, 2, 361, 2, -164,
	-164, 207, -189, 343, 168, 343, -153, 427, -244, -266,
	-265, -268, -288, 24, -271, 134, 225, -288, -290, -140,
	-140, -140, -224, -313, -288, 266, 168, -351, -343, -328,
	-342, 278, 279, 277, 281, 280, -328, -188, -352, 355,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, 208, 161, 322, 38, 162,
	-288, 359, -288, -288, -288, -288, 221, 229, 232, 365,
	125, 373, 105, 236, -418, 340, 34, -294, -141, 422,
	-307, 29, 327, 24, -301, 297, 422, -283, -288, -284,
	-236, -235, 423, 32, 427, -235, 423, 386, 24, 105,
	415, 2, 7, -260, 398, 220, 96, 154, 219, -261,
	306, -236, -300, -296, -306, -305, 390, -352, 415, -386,
	133, 149, 7, -348, 355, 355, 355, 355, 422, 423,
	2, 423, 2, 423, 2, 423, 2, 423, 2, -288,
	-288, -288, -288, -288, -288, -288, -235, -254, 2, -344,
	-235, 4, 398, 220, 96, 154, 219, 306, -254, 2,
	-235, 2, -235, 2, -255, 2, -288, -235, -256, -289,
	-290, 413, 414, 408, -301, -257, 2, -288, -236, -288,
	45, 202, 360, -258, -288, 143, -235, -169, -384, 32,
	-235, -229, 427, 143, 32, 4, -229, -229, 422, 423,
	427, 191, 191, -315, -253, 191, -251, 249, -251, -251,
	-397, 422, 421, -311, -175, 420, 429, -352, -310, -309,
	32, -183, 247, -311, -311, 424, 423, -310, -189, 422,
	-235, -352, 427, 359, -408, 75, 64, -280, 158, 64,
	-363, -177, 75, -364, -164, 59, 372, 266, 142, -408,
	75, -408, 75, 75, 318, 331, 47, -319, 35, -90,
	203, 73, 143, 359, -319, -249, -328, 91, 217, 218,
	47, -347, -346, 414, -347, 47, -347, -347, -347, 393,
	-190, -319, 359, 257, -357, 73, 359, 427, 35, -90,
	203, 73, 143, 359, -201, -175, 73, 343, -324, -323,
	402, -195, -164, 424, -288, -90, -288, -90, 333, 423,
	424, 186, 186, -206, -207, -164, -281, -280, -365, -366,
	-363, 185, 168, 372, 126, 32, 115, -226, -325, 184,
	115, 257, 115, 115, 32, 241, 229, 241, 229, -156,
	346, 115, -282, 391, -272, -90, 422, 99, 32, -272,
	-239, -240, -322, -241, -177, 422, -183, -189, -234, -234,
	-234, -201, -202, -174, -357, -358, -358, 423, -75, -326,
	423, -137, 393, 359, 393, 423, -138, 379, -207, -74,
	25, 80, 108, 423, 427, -228, 31, 420, -260, 422,
	-345, 422, -137, -323, 143, -227, -324, -324, 140, 72,
	405, 359, 423, 362, -278, -204, 272, 326, 284, 314,
	8, 7, 7, 427, -352, -189, 140, -226, -226, 315,
	140, 140, 424, -189, -201, -189, -319, -269, -346, 422,
	-270, 297, 298, 427, -148, 33, 103, 196, -189, 399,
	113, -288, -288, 359, -418, 340, -294, 113, -288, 221,
	232, 365, 125, 373, 105, 236, 143, 422, -289, -289,
	-235, -288, 421, 431, 423, 424, -226, -288, -417, 427,
	-222, -288, -235, -235, 423, 423, 359, 359, 359, 359,
	422, 421, 421, 427, -304, -305, 109, -288, 424, -391,
	250, 422, 422, 423, 423, 427, 399, 399, 399, 399,
	-288, 32, 427, 427, 427, 423, 427, 427, 427, 423,
	423, 143, 423, 423, 423, 423, -262, 260, 423, 10,
	11, 413, 414, 415, 416, 138, 417, 418, 411, 412,
	410, 403, 404, 405, 70, 215, 299, 13, 14, 15,
	186, 162, -289, -289, -289, 423, -292, -293, 143, 140,
	32, -258, -258, -258, 423, 143, -235, 422, 423, -282,
	-321, -231, 2, -315, -185, -352, -282, -282, -235, -288,
	-315, -315, -252, 379, 241, 191, -315, -309, 423, -398,
	-348, -311, -310, -348, -287, -286, 141, 227, -183, -220,
	-310, -310, -352, -311, 423, -232, -317, -379, -417, 424,
	-149, -189, -177, -184, -164, 229, -280, 158, -155, 229,
	-328, -184, 422, 422, 196, 196, -177, -184, 158, -177,
	158, -184, -184, -404, 272, 237, -288, 210, 270, 230,
	-150, 283, -90, -90, 399, 422, -191, 283, -197, -347,
	-347, -247, 283, -190, -357, 393, 399, -174, -151, -90,
	-90, 399, 422, -175, -152, 283, 399, -189, -134, 157,
	236, 415, -352, -128, 5, 232, -128, 423, 427, 168,
	-176, 168, -182, -165, -90, -189, 143, -137, -357, -190,
	-357, -357, -357, -90, -189, 115, -189, 115, -157, 111,
	-416, 405, -174, -223, -222, -288, -246, -275, 290, 241,
	-221, -178, -177, 384, -183, -246, -230, 427, 143, 405,
	424, -221, -153, -153, -153, -153, -153, -75, 143, -136,
	244, -135, -164, 5, -226, 23, -137, 422, -357, 423,
	-328, 420, 421, 7, 7, 422, -348, -137, -226, 143,
	-43, 393, 270, 93, 343, 256, 168, -349, -349, -277,
	370, 68, 272, -349, 343, 315, 315, -164, -270, -288,
	-313, -189, 428, -288, -288, 113, 113, -288, -289, -289,
	-288, 113, 143, 422, -288, -298, 28, 28, 423, -284,
	-288, 415, -352, 423, 423, 423, 386, -417, -417, -417,
	5, 220, 154, 219, -261, 219, -261, -261, 7, -296,
	112, -288, 354, -352, 415, -392, -180, 422, -164, 391,
	-222, -348, 423, -343, -328, -288, -288, -288, -288, -288,
	-288, -292, -288, -343, -328, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
	-289, -289, -289, -289, 105, 229, 236, -289, -293, -292,
	-288, -288, -328, 423, 423, 423, -235, -74, -243, 149,
	-324, 427, -243, -243, 423, -252, 422, -288, -315, 421,
	423, 427, -310, 421, 427, 430, 405, -220, 424, -309,
	423, 427, -274, 32, 423, -352, 359, 359, 115, 229,
	381, -367, -364, -288, -225, -314, -177, -379, 422, -164,
	422, 422, -147, 108, 318, -409, 115, -153, 115, -153,
	397, 422, 422, 359, -408, 75, -288, -235, 359, 359,
	257, -288, -288, -235, 359, -288, 117, -137, 143, 342,
	-208, 171, -281, -165, 422, -176, 422, 422, -220, -189,
	-248, -160, -264, 379, -175, 422, -175, -158, 201, -416,
	-355, -380, -267, -265, -246, -238, 230, 74, 423, 427,
	424, -282, -240, -231, -288, 2, 423, -90, 427, 422,
	405, 405, 243, -357, -138, -138, 7, 421, 423, -348,
	423, -226, 244, -186, -174, -189, -187, -201, -189, 242,
	423, -148, -175, -288, -288, 113, 28, 28, -288, -288,
	-298, 423, -288, -288, 421, 5, -288, 423, 423, 423,
	423, -288, 424, -393, -164, -288, 423, 423, 423, 423,
	427, 427, 423, 423, 423, 423, -293, 143, 105, 236,
	422, 423, 423, -295, 151, 47, -315, -295, -295, -226,
	-285, -348, -286, -175, 420, -352, -317, 422, 424, -177,
	-184, -280, 115, -368, 75, -369, 62, 126, 80, 229,
	232, 372, 266, 59, 99, 276, 32, 423, 423, 427,
	-173, 62, -173, -288, -225, -226, 229, 337, 99, 229,
	99, 92, 367, -177, -184, -226, -226, -189, -177, -184,
	423, -191, -190, -357, 423, -175, 73, -358, 355, -209,
	-210, 162, 422, -225, 422, -226, -206, 32, 422, 145,
	46, 241, -225, 241, -159, 200, -416, -355, -156, -246,
	-273, 422, 241, -90, -178, 2, -223, 405, -135, -136,
	-357, -357, 423, 92, 92, 421, 423, -44, -45, 168,
	75, 259, -212, -211, 256, 236, -148, -288, -288, -288,
	423, -417, -352, 415, -387, 256, 423, -288, -288, -289,
	143, 422, -298, -388, 392, -288, -235, -388, -388, 423,
	-311, -348, 2, -280, -184, -188, -181, -164, 126, 158,
	232, 196, 422, -289, -189, 422, 2, -279, -411, 79,
	338, -314, -148, -188, -148, 423, 423, 423, 232, 232,
	-288, -328, -153, -153, 423, 423, 359, 359, 359, 359,
	399, -288, 254, -225, 423, -225, 423, 423, -90, -225,
	-189, 423, -189, -416, -355, -157, 106, -226, 75, -267,
	-294, 423, -137, 422, 422, 427, 24, 422, 24, 422,
	-187, 343, 423, -223, 47, 423, 423, -289, -298, 423,
	-389, -390, -180, -310, 421, -369, -181, 229, -288, -166,
	422, -288, -208, 422, -173, 276, -172, 62, 422, 422,
	-177, -184, 422, 422, -288, -189, 423, -279, 423, -208,
	423, -264, 422, -355, -158, 374, 230, 423, -184, -246,
	-358, -358, -45, -226, -226, -189, -394, 270, 298, -235,
	423, 427, 32, 115, 423, -370, 216, -164, 423, -209,
	-226, -148, -189, -407, 379, -188, -214, -213, -211, -216,
	-215, -211, -235, -235, 422, -208, -279, -209, -279, 422,
	-225, -159, 318, -282, 423, 423, 423, 423, 423, -395,
	-396, 38, 369, 83, -288, -395, -390, -392, 126, -371,
	-374, -373, 241, 144, 255, 323, 423, 337, 389, 423,
	-220, -288, 423, 427, 384, 423, 427, 384, 423, 423,
	-226, -209, -208, -208, -225, 423, -239, -137, -137, -396,
	263, 139, 297, 263, 139, -181, -373, 241, -374, 241,
	374, 102, -370, -213, 162, -215, 143, 423, -209, -209,
	423, -282, 28, -372, 226, 288, 52, 318, -372, -371,
	422, 422, -154, 52, 288, -279, -396, 21, 232, 99,
	-235, -235, -208, 423, 423, -209, -209, 359, 422, -235,
	423, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 187, 189, 191, 0, 0, 0, 214, 216, 218,
	219, -2, 0, 0, 0, 249, 250, 252, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	389, 390, 0, 859, -2, 0, 368, 370, 379, 381,
	383, 385, 386, 0, 448, 450, 452, 454, 456, 458,
	460, 461, 463, 465, 467, 469, 471, 473, 475, 477,
	479, 481, 483, 485, 487, 489, 491, 493, -2, 771,
	773, 775, 777, -2, 62, 64, 66, 68, 70, 72,
	88, 222, 224, 226, 228, 231, 233, 235, 896, 255,
	257, 259, 261, 263, -2, 910, 0, 0, 0, -2,
	0, -2, -2, -2, 789, 73, 74, 75, 76, 77,
	78, 79, 94, 95, 96, 97, 98, 99, 100, 81,
	83, 84, 90, 91, 93, 0, 0, 872, 874, 876,
	878, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 159, -2, -2, -2,
	-2, 0, 0, 1540, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
	1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
	1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
	1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
	1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
	1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
	1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
	1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
	1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
	1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
	1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676,
	1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706,
	1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1437, 1480,
	1440, 1435, 188, 190, 192, 193, 0, 0, 0, 0,
	0, 0, 671, 1465, 1478, 1479, 1480, 1483, 1484, 1485,
	1540, 0, 215, 217, 220, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 347, 1631, 349,
	351, 0, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 251, 253, 254, 0, 0, 0, 0, 0, 0,
	0, 346, 344, 1460, 288, 289, 0, 0, 329, 330,
	331, 332, 333, 334, 336, 293, 295, 297, 298, 300,
	302, 304, 306, 308, 310, 312, 314, 315, 317, 319,
	320, 322, 324, 325, 327, 732, 0, 0, 0, 0,
	0, 170, 0, 361, 355, 360, 362, 364, 365, 366,
	367, 0, 0, 168, 163, 0, 0, 604, 342, 340,
	0, 162, 0, 0, 768, 0, 361, 1507, 359, 769,
	770, 0, 0, 764, 765, 1661, 799, 369, 371, 380,
	382, 384, 387, -2, -2, 1757, -2, 410, -2, 418,
	1760, 1663, 421, 0, 423, -2, 426, 449, 451, 453,
	455, 457, 459, 462, 464, 466, 468, 470, 472, 474,
	476, 478, 480, 482, 484, 486, 488, 490, 492, 494,
	495, 0, 0, 0, 0, 0, 499, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, -2,
	-2, -2, 0, 0, 0, -2, -2, 0, 0, 498,
	500, 501, 502, 0, 547, 586, 587, 772, 774, 776,
	0, 712, 898, 63, 65, 67, 69, 71, 223, 225,
	227, 229, 232, 234, -2, 870, 871, 256, 258, 260,
	262, 264, -2, 0, 902, 902, 902, 0, 0, 871,
	869, 0, 372, 0, 374, 0, 499, 377, 378, 430,
	431, 1113, 0, 0, 0, 0, 0, 1254, 1197, -2,
	-2, 1229, 1231, 1736, 1757, 0, 1233, 1234, 1235, 1236,
	0, 0, 1239, 0, 1241, 1242, 1243, 1244, 0, 1246,
	1250, 1251, 0, 1414, 1476, -2, 1027, 1028, 1029, 1030,
	1031, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1472,
	1467, 1318, 1265, -2, 1494, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1547, -2, -2,
	-2, -2, -2, -2, 1080, -2, -2, -2, -2, -2,
	-2, -2, 1769, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 0, 1725, 1742, 1743, 1748, 1750, 1744, 1733,
	1288, -2, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1782, 1783, 1784, 1785, 1786, 1787, -2, -2,
	-2, 1737, 1738, 1740, 1749, 1753, 1754, 1759, 1763, 1764,
	801, 779, 792, 801, 781, 782, 783, 784, 785, 790,
	791, 794, 0, 786, 787, 788, 888, 1638, 891, 671,
	889, 873, 875, 0, 877, 0, 0, 0, 882, 905,
	903, 0, 941, 886, 887, 897, 956, 979, 0, 961,
	0, 979, 1001, 0, 966, 1657, 1266, 1267, 0, 1480,
	1477, -2, 1780, 1781, 2, 80, 0, 1742, 1001, 82,
	0, 1742, 85, 0, 1742, 0, -2, 89, 0, 1742,
	171, 172, 1490, 1491, 1495, 1496, 1497, 1498, 1769, 92,
	0, 1456, 101, 0, 1742, 1434, 0, 1453, 1499, 1500,
	1501, 1502, 1503, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 0, 1450, 0, 0, 596, 1431, 1436,
	597, 1441, 0, 194, 195, 196, 197, 198, 1742, 200,
	201, 0, 203, 204, 1742, 206, 207, 0, 209, 0,
	0, 0, 0, 0, 230, 671, 1742, 0, 237, 1461,
	0, 695, 1742, 693, 1464, -2, 1742, 715, 718, 1742,
	720, 671, 722, 1463, -2, 1487, 895, 1742, 815, 348,
	350, 0, 242, 0, 828, 0, 830, 0, 849, 1007,
	155, 1742, 267, 286, 155, 1742, 270, 155, 1742, 273,
	155, 1742, 276, 1429, 155, 1742, 279, 280, 1742, 282,
	173, 283, 1742, 285, 343, 0, 0, -2, 337, 1466,
	-2, 0, 335, 294, 296, 299, 301, 303, 305, 307,
	309, 311, 313, 316, 318, 321, 323, 326, 328, -2,
	0, 0, 0, 0, 0, 0, 602, 603, 0, 0,
	0, 766, 767, 0, 0, 0, 391, 0, 0, 0,
	0, 798, 388, 0, 407, 0, 409, 1732, -2, -2,
	413, 802, 806, 807, 808, 0, 0, 0, 0, 420,
	0, 0, 0, 424, 427, 0, 496, 497, 0, 0,
	507, 508, 509, 510, 1636, 1561, 513, 0, 516, 537,
	551, 0, 0, 520, 522, 601, 524, 0, 0, 526,
	0, 528, 0, 530, 0, 532, 0, 534, 536, 538,
	552, 540, 0, 0, 0, 550, 0, 556, 0, 559,
	560, 561, 0, 563, 564, 565, 566, 0, 568, 569,
	-2, -2, 573, 575, 0, 585, 0, 503, 504, 155,
	1005, -2, 0, 865, 919, 920, 0, 0, 0, 0,
	900, 901, 0, 0, 0, 861, 862, 373, 0, 376,
	0, 0, 0, 0, 1349, 1350, 1351, 1352, 1353, 1354,
	1357, 1358, 1355, 1356, 1359, 1360, 0, 0, 0, 0,
	0, 1361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 1363, 1364, 0, 0, 1366, 0,
	1368, 0, 0, 0, 0, 0, 0, 1176, 1178, 1422,
	0, 0, 1365, 1118, 1119, 1120, 1155, 1156, 0, 1230,
	1419, 1418, 1232, 0, 1371, -2, 1372, 1254, 0, 0,
	0, 1238, 0, 1110, 1245, 1447, 1252, 1253, 1371, 0,
	1413, 0, 1320, 0, 1063, 0, 1064, 1065, 0, 1066,
	1067, 1078, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 0, 0, 0, 0, 0, 1394, -2,
	0, 0, 778, -2, 780, 0, 796, 0, 890, 0,
	0, 945, 1423, 1427, 1428, 945, 945, 0, 0, 1372,
	0, 0, 0, 0, 998, 998, 998, 996, 973, 0,
	979, 0, 989, 0, 979, 979, 0, -2, 961, 0,
	0, 989, 1002, 1003, 0, 0, 0, 0, 102, 761,
	123, 0, 761, 761, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 119, 108, 109, 0, 0, 86, 696,
	0, 699, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 121,
	0, 146, 148, 0, 0, 0, 0, 992, 595, 0,
	0, 1481, 1439, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 1467, 1468, 610, 0, 0, 0, 240, 691,
	694, 0, 713, 0, 894, 0, 0, 0, 0, 1742,
	727, 1452, 1486, 0, 1742, 817, 0, 1011, 0, 831,
	0, 0, 1008, 0, 265, 0, 153, 154, 0, 268,
	0, 271, 0, 274, 0, 0, 277, 0, 0, 0,
	0, 0, 897, 0, 0, 185, 0, 353, 363, 0,
	0, 0, 0, 897, 0, 1374, 1019, 1022, 1023, 1024,
	1110, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1086, 1080,
	1096, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1076, 0, 1051, 1051, 1051, 1068, 1069, 1087,
	1088, 1090, 1092, 1094, 1020, 1021, 1086, 1086, 1083, 1084,
	185, 0, 357, 0, 992, 393, 992, 395, 0, 581,
	0, 0, 0, 0, -2, 415, 0, 804, 0, 809,
	439, 440, 441, 811, 812, 419, 442, 443, 444, 445,
	446, 447, 0, 688, 0, 690, 1443, 0, 416, 432,
	417, 422, 0, 428, 0, 0, 511, 512, 514, 515,
	517, 518, 519, 523, 0, 589, 1653, 599, 525, 527,
	529, 531, 533, 0, 542, 0, 544, 0, 546, 554,
	557, 562, 567, 0, 0, 0, 711, 0, 868, 917,
	918, 923, 927, 928, 931, 934, 935, 925, 1113, 883,
	884, 885, 911, 912, 744, 0, 0, 375, 1114, 1015,
	1016, 1070, 1071, 1072, 1073, 1074, 1115, 1116, 1449, 0,
	1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
	-2, -2, -2, -2, -2, -2, -2, -2, 1139, 1140,
	1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, -2,
	-2, -2, 1153, 1154, -2, 1367, 1369, 0, 1422, 0,
	-2, 0, -2, -2, -2, -2, 1173, 0, 1175, 1180,
	1182, 1184, 0, 0, 0, 0, 1421, 1194, 1405, 0,
	0, 1346, 1347, 1348, 1179, 0, 0, 1420, 1417, 0,
	0, 1370, 1249, 0, 0, 908, 1256, 0, 0, 0,
	0, 1263, 0, 1448, 1097, 1098, 1099, 1100, 1101, 1102,
	1111, 0, 0, 1378, 1412, 1408, 0, 1469, 1475, 1328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1300, 0,
	1381, -2, -2, -2, -2, -2, -2, -2, 0, 1302,
	0, 1314, 0, 1316, 0, 1304, 1372, 1391, 0, 0,
	1200, 0, 0, 0, 1254, 0, 1307, 1372, 1399, 0,
	0, 0, 0, 0, 1372, 0, 1404, 795, 892, 0,
	0, 1011, 0, 0, 0, 1426, 1011, 1011, 0, 940,
	0, 0, 0, 0, 0, 0, 993, 997, 994, 995,
	0, 0, 979, 989, 953, 0, 0, 1451, 959, 988,
	0, 671, 978, 989, 989, 0, -2, 963, 0, 0,
	908, -2, 0, 0, 0, 0, 760, 125, 1742, 0,
	157, 0, 0, 661, 1457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 0, 0, 697, 698, 700, 706, 708,
	0, 702, 1446, 0, 703, 0, 705, 707, 709, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 1433, 0, 0, 176, 991,
	0, 1432, 1442, 0, 199, 202, 205, 208, 186, 670,
	0, 0, 0, 0, 609, -2, 611, 613, 614, 615,
	616, 1586, 1487, 0, 1487, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 819,
	825, 0, 910, 0, 847, 833, 0, 0, 0, 847,
	851, 852, 854, 855, 0, 0, 1009, 287, 155, 155,
	155, 1430, 155, 155, 174, 281, 284, 345, 290, 338,
	897, 0, 0, 0, 0, 185, 0, 0, 0, 339,
	0, 0, 0, 341, 0, 1012, 1014, 0, 1025, 0,
	1078, 0, 160, 185, 0, 0, 392, 397, 0, 582,
	0, 0, 408, 0, 803, 810, 0, 436, 0, 438,
	689, 1445, 1444, 0, 429, 505, 0, 600, 598, 541,
	0, 0, 0, 583, 584, 588, 1006, 0, 929, 0,
	926, 932, 933, 0, 914, 742, 743, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 1195, 0, -2, 1174,
	1177, 1181, 1183, 1185, 0, 0, 0, 0, 0, 0,
	0, 1196, 1415, 1418, 1344, 0, 0, 1373, 0, 0,
	907, 908, 908, 908, 1262, 0, 0, 0, 0, 0,
	0, 1376, 1377, 0, 0, 1409, 0, 0, 0, 1264,
	0, 0, 0, 1075, 1049, 0, 1089, 1091, 1093, 1095,
	0, 0, 0, 0, 0, 1283, 0, 0, 0, 1287,
	1299, 0, 1301, 1313, 1315, 1303, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1203, 1204, 1205, 1306, 1397, 1398, 0, 0,
	0, 0, 0, 0, 1312, 0, 1403, 897, 942, 937,
	1424, 992, 944, 946, 1425, 1454, 937, 937, 0, 1373,
	981, 0, 983, 0, 0, 0, 985, 0, 974, 0,
	976, 989, 958, 0, 0, 951, 0, 950, 671, 987,
	960, 964, 1469, 0, 1004, 0, 968, 971, 0, 0,
	124, 748, 0, 0, 1455, 0, 127, 1742, 136, 0,
	638, 0, 0, 0, 0, 0, 763, 137, 1742, 155,
	1742, 155, 138, 141, 0, 145, 143, 0, 0, 629,
	103, 761, 106, 112, 0, 0, 754, 0, 701, 704,
	710, 87, 0, 756, 746, 0, 0, 745, 147, 107,
	113, 0, 0, 758, 105, 0, 0, 0, 185, 0,
	0, 1438, 1482, 210, 212, 213, 211, 618, 0, 1487,
	0, 1487, 0, 1459, 607, 671, 0, 238, 239, 695,
	716, -2, 719, 721, 730, 0, 0, 0, 821, 825,
	0, 824, 895, 922, 909, 1010, 826, 847, 0, 0,
	0, 836, 838, 835, 832, 829, 1011, 0, 0, 0,
	0, 0, 266, 269, 272, 275, 278, 291, 0, 183,
	1619, 181, 178, 180, 352, 0, 164, 0, 0, 0,
	1375, 0, 1017, 0, 0, 0, 0, 161, 356, 0,
	394, 0, 0, 0, 0, 0, 0, 405, 406, -2,
	434, 435, 437, 433, 0, 543, 545, 553, 0, 0,
	913, 744, 0, 1117, 1158, 0, 0, -2, 0, 0,
	1162, 0, 0, 0, -2, 0, 0, 0, 1406, 0,
	1417, 1247, 1248, 1255, 1345, 1257, 0, 0, 0, 0,
	1240, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 0, 1379,
	1407, 1411, 0, 1470, 1474, 1326, 1327, 1331, 1462, 0,
	0, 0, 1268, 0, 0, 0, 0, 0, 0, 0,
	1380, 1390, 1392, 1201, 1202, 1206, 1207, 1208, 1209, 1210,
	1211, 1212, 1213, 1214, 1215, -2, -2, -2, 1219, 1220,
	1221, -2, -2, -2, 0, 0, 0, 1393, 1395, 1396,
	1400, 1401, 0, 1309, 1310, 1311, 1402, 0, 939, 0,
	943, 0, 939, 939, 904, 982, 0, 1000, 984, 956,
	975, 0, 965, 954, 0, 955, 0, 986, 0, 962,
	967, 0, 970, 0, 1257, -2, 0, 0, 0, 0,
	156, 636, 660, 0, 0, 733, 741, 741, 0, 1457,
	0, 0, 129, 0, 0, 0, 0, 134, 0, 140,
	144, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 115, 118, 0, 0, 114, 0, 158, 0, 0,
	626, 0, 612, 0, 0, 0, 0, 610, 0, 236,
	692, 714, 0, 0, 0, 0, 0, 823, 825, 0,
	816, 817, 847, 921, 827, 845, 846, 844, 0, 0,
	0, 910, 853, 850, 856, 857, 0, 169, 0, 0,
	0, 0, 354, 0, 0, 0, 0, 1018, 1026, 0,
	1079, 358, 0, 576, 577, 624, 0, 580, 506, 924,
	930, 915, 744, 1160, 1164, 0, 0, 0, 1166, -2,
	0, 1188, -2, -2, 1416, 1237, 908, 1258, 1260, 1261,
	1112, 1410, 0, 1333, 1330, 0, 1317, 1050, 1278, 1279,
	0, 0, 1282, 1284, 1285, 1286, 1389, 0, 0, 0,
	0, 1308, 893, 1322, 0, 0, 947, 1322, 1322, 0,
	979, 977, 952, 948, 0, 1470, 969, 0, 0, 750,
	752, 126, 0, 637, 0, 640, 0, 0, 0, 0,
	647, 648, 0, 0, 0, 0, 0, 662, 669, 0,
	744, 0, 744, 0, 0, 0, 0, 131, 150, 0,
	0, 762, 0, 155, 155, 0, 0, 749, 0, 0,
	0, 755, 757, 747, 0, 759, 0, 175, 0, 605,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 728,
	729, 0, 0, 0, 813, 825, 0, 818, 819, 241,
	0, 0, 0, 834, 837, 839, 922, 0, 182, 0,
	177, 179, 185, 0, 0, 1013, 1077, 396, 398, 0,
	0, 404, 578, 623, 0, 0, 916, 1168, -2, -2,
	1189, 0, 1471, 1473, 910, 0, 1319, 0, 0, -2,
	0, 0, 0, 879, 0, 938, 936, 880, 881, 999,
	989, 0, 972, 128, 0, 641, 642, 1458, 644, 0,
	646, 649, 0, 651, 1489, 0, 655, 618, 0, 666,
	667, 734, 735, 740, 736, 741, 664, 0, 130, 132,
	149, 739, 133, 139, 0, 0, 0, 0, 0, 0,
	0, 990, 0, 0, 669, 0, 659, 618, 608, 0,
	730, 725, 0, 0, 820, 821, 0, 0, 0, 847,
	858, 184, 165, 0, 0, 0, 400, 0, 402, 0,
	622, 0, 1259, 1336, 0, 1280, 1281, -2, 0, 1227,
	1321, 1323, 0, 957, 949, 639, 643, 0, 0, 675,
	0, 0, 626, 0, 744, 0, 152, 0, 0, 0,
	751, 753, 0, 0, 117, 0, 658, 618, 669, 626,
	669, 0, 0, 822, 823, 0, 841, 1011, 843, 848,
	0, 0, 399, 0, 0, 579, 0, 0, 0, 1332,
	1228, 0, 0, 0, 650, 680, 0, 0, 0, 663,
	0, 737, 671, 135, 0, 738, 0, 630, 0, 0,
	633, 0, 0, 0, 0, 626, 618, 606, 618, 0,
	0, 814, 0, 842, 185, 185, 401, 403, 1329, 1334,
	1337, -2, 1707, 1537, 0, 1335, 1324, 1325, 0, 652,
	676, 677, 0, 672, 673, 674, 1488, 653, 654, 668,
	675, 151, 627, 0, 0, 628, 0, 0, 120, 122,
	0, 656, 626, 626, 0, 726, 1011, 166, 167, 0,
	1339, 1340, 1341, 1342, 1343, 645, 678, 0, 679, 0,
	0, 0, 680, 631, 0, 634, 0, 621, 657, 723,
	669, 840, 0, 681, 0, 684, 685, 0, 682, 665,
	0, 0, 617, 619, 620, 618, 1338, 683, 686, 687,
	0, 0, 626, 626, 0, 724, 632, 0, 0, 0,
	626, 635,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 411, 3, 417, 412, 3,
	422, 423, 415, 413, 427, 414, 424, 416, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 431, 426,
	403, 405, 404, 407, 428, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 420, 3, 421, 418, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 429, 410, 430, 408,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 406, 57746, 409, 57747, 419, 57748, 425, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1025
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1031
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1040
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1067
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1068
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1069
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1070
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1074
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1077
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1086
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1099
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1100
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1101
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1143
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1154
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1169
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1173
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1177
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1226
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1230
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1234
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1240
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1244
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1250
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1256
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1266
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1273
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1280
		{

			sqlVAL.union.val = &tree.Relocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1287
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1294
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1304
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1314
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1324
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1337
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1349
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1359
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1369
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1380
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1385
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1395
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1410
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1414
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1417
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1438
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1455
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1458
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1474
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1483
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1503
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1507
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1525
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1529
		{
			sqlVAL.union.val = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1539
		{
			sqlVAL.union.val = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1546
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1550
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1554
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1560
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1564
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1590
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1593
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1616
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1623
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1627
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1658
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1662
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1670
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1673
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1690
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1693
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1697
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1701
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1707
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1717
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1721
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1727
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1731
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1735
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1739
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1745
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1755
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1759
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1762
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1766
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1778
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1779
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1780
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1781
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1791
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1799
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1801
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1804
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1814
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1823
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1831
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1833
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1837
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1840
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1850
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1859
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1867
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1869
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1873
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1876
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1880
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1885
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1891
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1892
		{
			sqlVAL.str = ""
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1901
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1902
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1904
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1905
		{
			return helpWith(sqllex, "CREATE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1908
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1909
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1911
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1913
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1914
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1915
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1926
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1933
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1937
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1947
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1951
		{
			sqlVAL.union.val = nil
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1964
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return helpWith(sqllex, "DELETE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1981
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1984
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1985
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1986
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1987
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1988
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1997
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1998
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1999
		{
			return helpWith(sqllex, "DROP")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2002
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2003
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2004
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2006
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2014
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2018
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2021
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2029
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2033
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2036
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2044
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2048
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2051
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2059
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2067
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2074
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2082
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2090
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2097
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2105
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2109
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2112
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2120
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2124
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2127
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2131
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2135
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2156
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2159
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2161
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2165
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2172
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2175
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2176
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2178
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2179
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2180
		{
			return helpWith(sqllex, "DELETE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2181
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2182
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2183
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2184
		{
			return helpWith(sqllex, "INSERT")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2185
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2187
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2188
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2190
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2193
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2194
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2196
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2197
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2205
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2206
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2210
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2224
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2231
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2235
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2239
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2249
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2255
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2261
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2265
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2275
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2279
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2283
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2287
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2290
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2310
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2314
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2318
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2321
		{
			return helpWith(sqllex, "GRANT")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2341
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2345
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2349
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2352
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2357
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2361
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2372
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2390
		{
			return helpWith(sqllex, "RESET")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2391
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2399
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2403
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2406
		{
			return helpWith(sqllex, "RESET")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2414
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2417
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2428
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2431
		{
			return helpWith(sqllex, "USE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2435
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2436
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2437
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2438
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2439
		{
			return helpWith(sqllex, "USE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2440
		{
			return unimplemented(sqllex, "set local")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2456
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2471
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2474
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2492
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2500
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2504
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2508
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2514
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2524
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2528
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2532
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2536
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2540
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2551
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2555
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2558
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2564
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2580
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2584
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2589
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2606
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2609
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2611
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2614
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2618
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2629
		{
			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2646
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2653
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2659
		{
			return unimplemented(sqllex, "set from current")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2660
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2668
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2673
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2680
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2684
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2690
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2701
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2707
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2717
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2721
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2725
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2729
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2733
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2739
		{
			sqlVAL.union.val = tree.Low
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2743
		{
			sqlVAL.union.val = tree.Normal
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2747
		{
			sqlVAL.union.val = tree.High
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2758
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2762
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2766
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2771
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2775
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2787
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2788
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2790
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2792
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2794
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2795
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2796
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2797
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2798
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2799
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2800
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2801
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2802
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2803
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2804
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2805
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2806
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2807
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2808
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2809
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2811
		{
			return helpWith(sqllex, "SHOW")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2818
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2819
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2820
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2831
		{
			sqlVAL.str = "client_encoding"
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2834
		{
			sqlVAL.str = "timezone"
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2835
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2849
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2853
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2856
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2867
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2875
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2883
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2890
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2897
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2903
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2917
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2920
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2922
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2925
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2933
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2936
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2944
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2947
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2960
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2968
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2976
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2979
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2981
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2984
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2986
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2989
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2997
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3000
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3002
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3005
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3013
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3016
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3018
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3022
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3032
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3035
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3044
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3047
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3049
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3052
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3054
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3058
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3061
		{
			sqlVAL.union.val = true
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3062
		{
			sqlVAL.union.val = false
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3070
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3075
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3079
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3089
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3098
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3107
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3110
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3117
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3121
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3124
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3131
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3135
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3143
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3148
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3153
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3157
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3165
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3169
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3173
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3186
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3189
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3197
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3200
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3204
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3209
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3214
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3221
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3229
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3236
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3241
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3253
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3257
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3260
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3268
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3275
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3280
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3400
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3404
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3408
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3447
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3451
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3456
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3460
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3469
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3476
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3480
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3492
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3501
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3504
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3540
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3552
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3566
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3577
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3591
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3597
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3601
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3607
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3613
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3619
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3627
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3634
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3639
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3644
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3650
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3657
		{
			sqlVAL.str = ""
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3664
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 627:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3670
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3684
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3690
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 632:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3700
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3710
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3720
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3731
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3746
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3752
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3756
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3760
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3764
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3768
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3772
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3776
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3794
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3798
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3802
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3806
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3810
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3814
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3818
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3826
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3830
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3834
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 656:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3841
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3851
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3863
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3873
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3885
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3890
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3896
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3902
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3913
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3923
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3947
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3951
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3957
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3961
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3966
		{
			return unimplemented(sqllex, "match full")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3967
		{
			return unimplemented(sqllex, "match partial")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3968
		{
			return unimplemented(sqllex, "match simple")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3969
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3976
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3980
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3984
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3988
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3992
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3998
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4004
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4012
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4016
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4020
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4024
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4028
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4034
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4038
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4042
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4060
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 692:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4068
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4076
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4080
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4083
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4084
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4087
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4088
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4090
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4091
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4092
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4095
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4097
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4099
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4101
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4102
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4104
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4105
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4107
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4116
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4119
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4127
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4131
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4134
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4138
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4142
		{
			sqlVAL.union.val = nil
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4152
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4156
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4159
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4167
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4174
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4192
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4205
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4219
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4228
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4237
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4242
		{
			sqlVAL.union.val = true
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4246
		{
			sqlVAL.union.val = false
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4250
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4256
		{
			sqlVAL.union.val = true
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4260
		{
			sqlVAL.union.val = false
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4266
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4279
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4282
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4283
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4286
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4287
		{
			sqlVAL.str = ""
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4290
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4291
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4295
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4299
		{
			sqlVAL.union.val = tree.Descending
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4303
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4309
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4320
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4326
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4330
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4334
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4342
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4344
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4348
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4358
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4362
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4368
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4372
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4377
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4378
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4381
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4382
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4390
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4393
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4403
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4412
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4415
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4423
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4426
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4430
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4431
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4432
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4448
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4451
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4453
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4456
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4466
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4469
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4471
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4474
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4478
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4483
		{
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4484
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4485
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4493
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4500
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4503
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4504
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4508
		{
			sqlVAL.str = ""
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4512
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4516
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4520
		{
			sqlVAL.str = ""
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4526
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4530
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4536
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4540
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4546
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4550
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4563
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4565
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4573
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4577
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4583
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4589
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4595
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4599
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4609
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4619
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4629
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4633
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4637
		{
			sqlVAL.str = ""
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4643
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4647
		{
			sqlVAL.str = ""
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4653
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4657
		{
			sqlVAL.str = ""
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4663
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4667
		{
			sqlVAL.str = ""
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4672
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4673
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4685
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4692
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4699
		{
			return helpWith(sqllex, "INSERT")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4710
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4717
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4721
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4729
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4735
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4739
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4743
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4749
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4773
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4777
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4781
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4787
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4791
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4793
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4799
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4804
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4808
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 848:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4825
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4836
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4840
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4841
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4845
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4862
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4865
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4869
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4912
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4918
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4922
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4937
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4941
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4945
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4949
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4953
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4957
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4964
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4999
		{
			return helpWith(sqllex, "SELECT")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5000
		{
			return helpWith(sqllex, "VALUES")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5001
		{
			return helpWith(sqllex, "TABLE")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5023
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5036
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5050
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5062
		{
			return helpWith(sqllex, "SELECT")
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5066
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5075
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5084
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5099
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5106
		{
			return helpWith(sqllex, "TABLE")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5118
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5121
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5122
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5126
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 893:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5136
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5144
		{
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5145
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5149
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5152
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5155
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5156
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5160
		{
			sqlVAL.union.val = true
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = false
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5168
		{
			sqlVAL.union.val = false
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5174
		{
			sqlVAL.union.val = true
		}
	case 904:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5180
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5185
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5186
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5189
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5190
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5194
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5198
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5204
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5210
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5220
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5224
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5228
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5237
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5246
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5257
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5261
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5270
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5276
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5283
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5290
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5299
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5303
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5307
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5313
		{
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5314
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5317
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5318
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5335
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 937:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5339
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5345
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5349
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5368
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5371
		{
			return helpWith(sqllex, "VALUES")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5373
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5385
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5388
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5390
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5396
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5400
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5406
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5410
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5416
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5422
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5427
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5450
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5454
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5458
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5462
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 957:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5489
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5503
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5507
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5510
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5512
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5516
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5520
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5525
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 965:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5541
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5547
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5551
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5557
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5559
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5563
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5569
		{
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5571
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5574
		{
			sqlVAL.union.val = nil
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5575
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5576
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5580
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5584
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = true
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5594
		{
			sqlVAL.union.val = false
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5614
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5618
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5622
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5626
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5630
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5634
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5640
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5644
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5651
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5657
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5664
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5670
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5674
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5678
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5682
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5688
		{
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5689
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5700
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5704
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5709
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5710
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5711
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5712
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5716
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5733
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5737
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5741
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5747
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5751
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5763
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5777
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5786
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5797
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5801
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5808
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5810
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5819
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5823
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5827
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5836
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5854
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5858
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5862
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5866
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5870
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5874
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5878
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5882
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5886
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5890
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5894
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5898
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5902
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5906
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5910
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5914
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5918
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5938
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5942
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5946
		{
			sqlVAL.union.val = nil
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5953
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5961
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5965
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5969
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5973
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5977
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5981
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5985
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5989
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5993
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5997
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6007
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6011
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6020
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6029
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6038
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6042
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6049
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6053
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6057
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6061
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6065
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6071
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6075
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6081
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6092
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6098
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6110
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6116
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6120
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6124
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6128
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6133
		{
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6134
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6139
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6143
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6147
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6151
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6155
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6159
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6163
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6167
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6171
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6176
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = tree.Year
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = tree.Month
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6190
		{
			sqlVAL.union.val = tree.Day
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6194
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6198
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6202
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6208
		{
			sqlVAL.union.val = tree.Month
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6220
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6224
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6228
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6232
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6236
		{
			sqlVAL.union.val = nil
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.union.val = tree.Second
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6245
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6269
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6273
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6277
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6280
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6289
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6293
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6297
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6301
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6305
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6309
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6313
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6317
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6321
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6325
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6329
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6333
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6337
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6341
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6345
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6349
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6353
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6357
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6361
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6365
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6369
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6373
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6377
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6381
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6389
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6393
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6397
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6405
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6409
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6429
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6437
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6441
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6445
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6449
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6453
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6457
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6461
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6465
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6469
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6473
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6477
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6481
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6485
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6489
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6493
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6497
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6501
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6505
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6509
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6513
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6517
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6521
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6525
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6529
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6532
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6534
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6538
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6542
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6546
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6554
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6558
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6562
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6566
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6570
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6574
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6578
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6582
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6586
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6590
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6594
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6598
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6615
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6619
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6623
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6642
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6650
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6654
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6658
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6662
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6666
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6670
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6674
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6678
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6682
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6686
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6690
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6694
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6698
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6702
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6706
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6710
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6714
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6718
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6722
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6726
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6730
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6734
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6738
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6742
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6746
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6760
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6768
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6804
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6808
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6812
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6816
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6819
		{
			return unimplemented(sqllex, "func const")
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6821
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6825
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6828
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6830
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6834
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6838
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6842
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6846
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6855
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6860
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6864
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6868
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6873
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6877
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6881
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6885
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6890
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6905
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6909
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6912
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6913
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6915
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6919
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6923
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6926
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6937
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6944
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6953
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6954
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6958
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6960
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6964
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6974
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6982
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7016
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7020
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7046
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7051
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7056
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7058
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7061
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7066
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7071
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7076
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7078
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7081
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7083
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7087
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7090
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7091
		{
			return unimplemented(sqllex, "treat")
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7112
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7114
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7117
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7122
		{
			return unimplemented(sqllex, "within group")
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7123
		{
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7127
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7131
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7138
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7142
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7148
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7158
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7166
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7170
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7174
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7181
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7201
		{
			sqlVAL.str = ""
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7207
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7211
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7222
		{
			bounds := sqlDollar[2].union.windowFrameBounds()
			startBound := bounds.StartBound
			endBound := bounds.EndBound
			switch {
			case startBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("RANGE PRECEDING is only supported with UNBOUNDED")
				return 1
			case endBound != nil && endBound.BoundType == tree.ValueFollowing:
				sqllex.Error("RANGE FOLLOWING is only supported with UNBOUNDED")
				return 1
			}
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: bounds,
			}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7246
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7253
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7259
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.ValueFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7272
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.ValuePreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.ValueFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7300
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7304
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7308
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7312
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValuePreceding,
			}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.ValueFollowing,
			}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7335
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7339
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7345
		{
			sqlVAL.union.val = tree.Any
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7349
		{
			sqlVAL.union.val = tree.Some
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7353
		{
			sqlVAL.union.val = tree.All
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7358
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7359
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7360
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7361
		{
			sqlVAL.union.val = tree.Div
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7362
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7363
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7364
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7365
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7366
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7367
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7368
		{
			sqlVAL.union.val = tree.LT
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7369
		{
			sqlVAL.union.val = tree.GT
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7370
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7371
		{
			sqlVAL.union.val = tree.LE
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7372
		{
			sqlVAL.union.val = tree.GE
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7373
		{
			sqlVAL.union.val = tree.NE
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7377
		{
			sqlVAL.union.val = tree.Like
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7378
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7379
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7380
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7392
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7398
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7402
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7408
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7412
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7418
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7422
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7428
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7432
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7438
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7442
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7464
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7468
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7472
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7478
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7485
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7489
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7506
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7514
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7518
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7522
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7528
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7534
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7540
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7544
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7548
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7576
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7592
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7596
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7603
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7609
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7613
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7620
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7626
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7630
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7635
		{
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7636
		{
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7640
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7650
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7659
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7663
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7667
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7675
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7685
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7689
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7695
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7702
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7744
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7756
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7760
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7769
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7780
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7790
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7886
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7893
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7897
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7915
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7919
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7923
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7936
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7954
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7964
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7968
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7982
		{
			sqlVAL.str = ""
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7988
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7992
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
