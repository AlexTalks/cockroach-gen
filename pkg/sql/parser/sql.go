// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql-gen.y:56

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() tree.Tuple {
	return u.val.(tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:558
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BTREE = lex.BTREE
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BTREE",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:8315

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 57,
	425, 57,
	-2, 898,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	168, 733,
	-2, 0,
	-1, 60,
	102, 898,
	174, 898,
	373, 898,
	374, 898,
	-2, 0,
	-1, 74,
	114, 872,
	127, 872,
	182, 872,
	208, 872,
	237, 872,
	245, 872,
	370, 872,
	-2, 861,
	-1, 110,
	198, 549,
	360, 549,
	-2, 0,
	-1, 115,
	4, 900,
	20, 900,
	21, 900,
	22, 900,
	23, 900,
	25, 900,
	30, 900,
	35, 900,
	36, 900,
	37, 900,
	38, 900,
	39, 900,
	40, 900,
	41, 900,
	42, 900,
	43, 900,
	44, 900,
	46, 900,
	47, 900,
	48, 900,
	49, 900,
	50, 900,
	51, 900,
	52, 900,
	55, 900,
	56, 900,
	57, 900,
	58, 900,
	60, 900,
	61, 900,
	65, 900,
	66, 900,
	67, 900,
	68, 900,
	69, 900,
	71, 900,
	72, 900,
	73, 900,
	74, 900,
	76, 900,
	78, 900,
	79, 900,
	82, 900,
	83, 900,
	91, 900,
	92, 900,
	93, 900,
	94, 900,
	95, 900,
	96, 900,
	97, 900,
	98, 900,
	100, 900,
	102, 900,
	104, 900,
	107, 900,
	108, 900,
	110, 900,
	111, 900,
	115, 900,
	116, 900,
	117, 900,
	118, 900,
	119, 900,
	120, 900,
	121, 900,
	122, 900,
	123, 900,
	124, 900,
	132, 900,
	133, 900,
	134, 900,
	135, 900,
	136, 900,
	137, 900,
	139, 900,
	141, 900,
	145, 900,
	147, 900,
	148, 900,
	150, 900,
	152, 900,
	153, 900,
	154, 900,
	155, 900,
	156, 900,
	157, 900,
	158, 900,
	159, 900,
	160, 900,
	163, 900,
	164, 900,
	169, 900,
	170, 900,
	171, 900,
	174, 900,
	175, 900,
	176, 900,
	177, 900,
	178, 900,
	179, 900,
	180, 900,
	181, 900,
	183, 900,
	185, 900,
	188, 900,
	189, 900,
	190, 900,
	192, 900,
	193, 900,
	196, 900,
	197, 900,
	198, 900,
	200, 900,
	201, 900,
	203, 900,
	205, 900,
	206, 900,
	209, 900,
	210, 900,
	213, 900,
	215, 900,
	218, 900,
	219, 900,
	220, 900,
	221, 900,
	222, 900,
	224, 900,
	225, 900,
	226, 900,
	227, 900,
	232, 900,
	233, 900,
	234, 900,
	235, 900,
	236, 900,
	238, 900,
	239, 900,
	241, 900,
	242, 900,
	243, 900,
	246, 900,
	247, 900,
	249, 900,
	251, 900,
	252, 900,
	253, 900,
	254, 900,
	255, 900,
	256, 900,
	257, 900,
	258, 900,
	260, 900,
	261, 900,
	262, 900,
	263, 900,
	264, 900,
	266, 900,
	267, 900,
	268, 900,
	269, 900,
	270, 900,
	271, 900,
	272, 900,
	273, 900,
	274, 900,
	276, 900,
	277, 900,
	278, 900,
	279, 900,
	280, 900,
	282, 900,
	283, 900,
	284, 900,
	285, 900,
	286, 900,
	287, 900,
	288, 900,
	290, 900,
	292, 900,
	293, 900,
	294, 900,
	295, 900,
	296, 900,
	297, 900,
	299, 900,
	300, 900,
	301, 900,
	302, 900,
	303, 900,
	304, 900,
	305, 900,
	307, 900,
	308, 900,
	309, 900,
	310, 900,
	311, 900,
	312, 900,
	313, 900,
	314, 900,
	315, 900,
	317, 900,
	318, 900,
	319, 900,
	320, 900,
	322, 900,
	323, 900,
	324, 900,
	325, 900,
	327, 900,
	328, 900,
	329, 900,
	330, 900,
	331, 900,
	332, 900,
	333, 900,
	334, 900,
	335, 900,
	336, 900,
	337, 900,
	338, 900,
	340, 900,
	341, 900,
	343, 900,
	344, 900,
	345, 900,
	346, 900,
	347, 900,
	348, 900,
	349, 900,
	350, 900,
	351, 900,
	352, 900,
	354, 900,
	355, 900,
	356, 900,
	357, 900,
	360, 900,
	361, 900,
	362, 900,
	363, 900,
	365, 900,
	366, 900,
	368, 900,
	369, 900,
	372, 900,
	373, 900,
	374, 900,
	375, 900,
	377, 900,
	379, 900,
	380, 900,
	381, 900,
	382, 900,
	383, 900,
	384, 900,
	387, 900,
	388, 900,
	393, 900,
	394, 900,
	395, 900,
	396, 900,
	397, 900,
	398, 900,
	-2, 0,
	-1, 136,
	114, 871,
	127, 871,
	182, 871,
	208, 871,
	237, 871,
	245, 871,
	370, 871,
	-2, 864,
	-1, 141,
	1, 794,
	188, 794,
	266, 794,
	271, 794,
	424, 794,
	425, 794,
	-2, 0,
	-1, 143,
	1, 794,
	424, 794,
	425, 794,
	-2, 0,
	-1, 144,
	1, 794,
	424, 794,
	425, 794,
	-2, 0,
	-1, 145,
	1, 798,
	424, 798,
	425, 798,
	-2, 0,
	-1, 171,
	4, 907,
	5, 907,
	6, 907,
	7, 907,
	8, 907,
	9, 907,
	20, 907,
	21, 907,
	22, 907,
	23, 907,
	25, 907,
	30, 907,
	31, 907,
	35, 907,
	36, 907,
	37, 907,
	38, 907,
	39, 907,
	40, 907,
	41, 907,
	42, 907,
	43, 907,
	44, 907,
	46, 907,
	47, 907,
	48, 907,
	49, 907,
	50, 907,
	51, 907,
	52, 907,
	53, 907,
	54, 907,
	55, 907,
	56, 907,
	57, 907,
	58, 907,
	60, 907,
	61, 907,
	63, 907,
	65, 907,
	66, 907,
	67, 907,
	68, 907,
	69, 907,
	71, 907,
	72, 907,
	73, 907,
	74, 907,
	76, 907,
	78, 907,
	79, 907,
	81, 907,
	82, 907,
	83, 907,
	84, 907,
	85, 907,
	86, 907,
	87, 907,
	88, 907,
	89, 907,
	90, 907,
	91, 907,
	92, 907,
	93, 907,
	94, 907,
	95, 907,
	96, 907,
	97, 907,
	98, 907,
	99, 907,
	100, 907,
	102, 907,
	104, 907,
	107, 907,
	108, 907,
	110, 907,
	111, 907,
	115, 907,
	116, 907,
	117, 907,
	118, 907,
	119, 907,
	120, 907,
	121, 907,
	122, 907,
	123, 907,
	124, 907,
	125, 907,
	126, 907,
	132, 907,
	133, 907,
	134, 907,
	135, 907,
	136, 907,
	137, 907,
	139, 907,
	141, 907,
	144, 907,
	145, 907,
	147, 907,
	148, 907,
	150, 907,
	152, 907,
	153, 907,
	154, 907,
	155, 907,
	156, 907,
	157, 907,
	158, 907,
	159, 907,
	160, 907,
	161, 907,
	163, 907,
	164, 907,
	169, 907,
	170, 907,
	171, 907,
	173, 907,
	174, 907,
	175, 907,
	176, 907,
	177, 907,
	178, 907,
	179, 907,
	180, 907,
	181, 907,
	183, 907,
	185, 907,
	186, 907,
	187, 907,
	188, 907,
	189, 907,
	190, 907,
	191, 907,
	192, 907,
	193, 907,
	196, 907,
	197, 907,
	198, 907,
	200, 907,
	201, 907,
	203, 907,
	204, 907,
	205, 907,
	206, 907,
	207, 907,
	209, 907,
	210, 907,
	213, 907,
	215, 907,
	216, 907,
	217, 907,
	218, 907,
	219, 907,
	220, 907,
	221, 907,
	222, 907,
	223, 907,
	224, 907,
	225, 907,
	226, 907,
	227, 907,
	228, 907,
	230, 907,
	231, 907,
	232, 907,
	233, 907,
	234, 907,
	235, 907,
	236, 907,
	238, 907,
	239, 907,
	242, 907,
	243, 907,
	246, 907,
	247, 907,
	248, 907,
	249, 907,
	250, 907,
	251, 907,
	252, 907,
	253, 907,
	254, 907,
	255, 907,
	256, 907,
	257, 907,
	258, 907,
	260, 907,
	261, 907,
	262, 907,
	263, 907,
	264, 907,
	266, 907,
	267, 907,
	268, 907,
	269, 907,
	270, 907,
	271, 907,
	272, 907,
	273, 907,
	274, 907,
	276, 907,
	277, 907,
	278, 907,
	279, 907,
	280, 907,
	282, 907,
	283, 907,
	284, 907,
	285, 907,
	286, 907,
	287, 907,
	288, 907,
	290, 907,
	291, 907,
	292, 907,
	293, 907,
	294, 907,
	295, 907,
	296, 907,
	297, 907,
	299, 907,
	300, 907,
	301, 907,
	302, 907,
	303, 907,
	304, 907,
	305, 907,
	307, 907,
	308, 907,
	309, 907,
	310, 907,
	311, 907,
	312, 907,
	313, 907,
	314, 907,
	315, 907,
	316, 907,
	317, 907,
	318, 907,
	319, 907,
	320, 907,
	321, 907,
	322, 907,
	323, 907,
	324, 907,
	325, 907,
	327, 907,
	328, 907,
	329, 907,
	330, 907,
	331, 907,
	332, 907,
	333, 907,
	334, 907,
	335, 907,
	336, 907,
	337, 907,
	338, 907,
	340, 907,
	341, 907,
	343, 907,
	344, 907,
	345, 907,
	346, 907,
	347, 907,
	348, 907,
	349, 907,
	350, 907,
	351, 907,
	352, 907,
	354, 907,
	355, 907,
	356, 907,
	357, 907,
	360, 907,
	361, 907,
	362, 907,
	363, 907,
	364, 907,
	365, 907,
	366, 907,
	368, 907,
	369, 907,
	372, 907,
	373, 907,
	374, 907,
	375, 907,
	376, 907,
	377, 907,
	379, 907,
	380, 907,
	381, 907,
	382, 907,
	383, 907,
	384, 907,
	387, 907,
	388, 907,
	393, 907,
	394, 907,
	395, 907,
	396, 907,
	397, 907,
	398, 907,
	399, 907,
	407, 907,
	412, 907,
	413, 907,
	414, 907,
	421, 907,
	427, 907,
	-2, 0,
	-1, 174,
	1, 57,
	425, 57,
	-2, 898,
	-1, 207,
	423, 1479,
	426, 1479,
	-2, 592,
	-1, 208,
	423, 1481,
	426, 1481,
	-2, 593,
	-1, 209,
	423, 1480,
	426, 1480,
	-2, 594,
	-1, 210,
	426, 1421,
	-2, 595,
	-1, 620,
	143, 1595,
	358, 1595,
	404, 1595,
	423, 1595,
	-2, 0,
	-1, 621,
	143, 1519,
	358, 1519,
	404, 1519,
	423, 1519,
	-2, 0,
	-1, 623,
	143, 1669,
	358, 1669,
	404, 1669,
	423, 1669,
	-2, 0,
	-1, 625,
	143, 1698,
	358, 1698,
	404, 1698,
	423, 1698,
	-2, 0,
	-1, 632,
	143, 1600,
	358, 1600,
	404, 1600,
	423, 1600,
	-2, 421,
	-1, 667,
	1, 521,
	420, 521,
	422, 521,
	424, 521,
	425, 521,
	-2, 0,
	-1, 668,
	1, 591,
	140, 591,
	420, 591,
	422, 591,
	424, 591,
	425, 591,
	-2, 0,
	-1, 674,
	1, 535,
	420, 535,
	422, 535,
	424, 535,
	425, 535,
	-2, 0,
	-1, 676,
	1, 539,
	420, 539,
	422, 539,
	424, 539,
	425, 539,
	-2, 0,
	-1, 679,
	1, 550,
	420, 550,
	422, 550,
	424, 550,
	425, 550,
	-2, 0,
	-1, 680,
	1, 556,
	420, 556,
	422, 556,
	424, 556,
	425, 556,
	-2, 0,
	-1, 681,
	1, 559,
	420, 559,
	422, 559,
	424, 559,
	425, 559,
	-2, 0,
	-1, 685,
	1, 573,
	420, 573,
	422, 573,
	424, 573,
	425, 573,
	-2, 0,
	-1, 686,
	1, 575,
	420, 575,
	422, 575,
	424, 575,
	425, 575,
	-2, 0,
	-1, 714,
	127, 911,
	208, 911,
	237, 911,
	-2, 867,
	-1, 722,
	127, 910,
	208, 910,
	237, 910,
	-2, 865,
	-1, 749,
	421, 1773,
	-2, 1193,
	-1, 750,
	421, 1774,
	-2, 1194,
	-1, 779,
	421, 1473,
	-2, 1464,
	-1, 780,
	5, 1049,
	421, 1488,
	-2, 1479,
	-1, 781,
	421, 1489,
	-2, 1480,
	-1, 788,
	5, 1033,
	-2, 1509,
	-1, 789,
	5, 1034,
	-2, 1514,
	-1, 790,
	5, 1035,
	-2, 1513,
	-1, 791,
	5, 1036,
	-2, 1694,
	-1, 792,
	5, 1037,
	-2, 1602,
	-1, 793,
	5, 1038,
	-2, 1662,
	-1, 794,
	5, 1039,
	-2, 1664,
	-1, 795,
	5, 1040,
	-2, 1665,
	-1, 796,
	5, 1041,
	-2, 1666,
	-1, 797,
	5, 1042,
	-2, 1674,
	-1, 798,
	5, 1043,
	-2, 1706,
	-1, 799,
	5, 1044,
	-2, 1572,
	-1, 800,
	5, 1045,
	-2, 1508,
	-1, 801,
	5, 1046,
	-2, 1610,
	-1, 802,
	5, 1047,
	-2, 1611,
	-1, 803,
	5, 1048,
	-2, 1576,
	-1, 804,
	5, 1097,
	421, 1097,
	-2, 1740,
	-1, 824,
	5, 1070,
	-2, 1510,
	-1, 825,
	5, 1088,
	-2, 1538,
	-1, 827,
	5, 1062,
	-2, 1559,
	-1, 828,
	5, 1063,
	-2, 1560,
	-1, 829,
	5, 1054,
	-2, 1575,
	-1, 830,
	5, 1055,
	-2, 1577,
	-1, 831,
	5, 1056,
	-2, 1578,
	-1, 832,
	5, 1057,
	-2, 1579,
	-1, 833,
	5, 1021,
	-2, 1585,
	-1, 834,
	5, 1022,
	-2, 1586,
	-1, 835,
	5, 1085,
	-2, 1684,
	-1, 836,
	5, 1095,
	-2, 1696,
	-1, 837,
	5, 1060,
	-2, 1720,
	-1, 838,
	5, 1087,
	-2, 1721,
	-1, 839,
	5, 1069,
	-2, 1722,
	-1, 840,
	5, 1087,
	-2, 1723,
	-1, 841,
	5, 1087,
	-2, 1724,
	-1, 842,
	5, 1052,
	-2, 1727,
	-1, 843,
	5, 1052,
	-2, 1728,
	-1, 846,
	5, 1077,
	-2, 1732,
	-1, 848,
	5, 1053,
	-2, 1738,
	-1, 849,
	5, 1058,
	-2, 1739,
	-1, 851,
	5, 1052,
	-2, 1744,
	-1, 854,
	5, 1061,
	-2, 1749,
	-1, 855,
	5, 1059,
	-2, 1751,
	-1, 857,
	5, 1089,
	-2, 1753,
	-1, 858,
	5, 1091,
	-2, 1754,
	-1, 859,
	5, 1093,
	-2, 1755,
	-1, 862,
	5, 1084,
	-2, 1759,
	-1, 932,
	421, 1488,
	-2, 1479,
	-1, 947,
	282, 1461,
	414, 1461,
	-2, 1460,
	-1, 1097,
	256, 896,
	-2, 718,
	-1, 1106,
	240, 1483,
	-2, 0,
	-1, 1149,
	1, 288,
	420, 288,
	422, 288,
	424, 288,
	425, 288,
	-2, 870,
	-1, 1152,
	4, 1758,
	10, 1758,
	11, 1758,
	13, 1758,
	14, 1758,
	15, 1758,
	16, 1758,
	17, 1758,
	18, 1758,
	20, 1758,
	21, 1758,
	22, 1758,
	23, 1758,
	25, 1758,
	28, 1758,
	30, 1758,
	32, 1758,
	35, 1758,
	36, 1758,
	37, 1758,
	38, 1758,
	39, 1758,
	40, 1758,
	41, 1758,
	42, 1758,
	43, 1758,
	44, 1758,
	46, 1758,
	47, 1758,
	48, 1758,
	49, 1758,
	50, 1758,
	51, 1758,
	52, 1758,
	55, 1758,
	56, 1758,
	57, 1758,
	58, 1758,
	60, 1758,
	61, 1758,
	62, 1758,
	65, 1758,
	66, 1758,
	67, 1758,
	68, 1758,
	69, 1758,
	70, 1758,
	71, 1758,
	72, 1758,
	73, 1758,
	74, 1758,
	76, 1758,
	77, 1758,
	78, 1758,
	79, 1758,
	81, 1758,
	82, 1758,
	83, 1758,
	91, 1758,
	92, 1758,
	93, 1758,
	94, 1758,
	95, 1758,
	96, 1758,
	97, 1758,
	98, 1758,
	100, 1758,
	102, 1758,
	104, 1758,
	107, 1758,
	108, 1758,
	110, 1758,
	111, 1758,
	115, 1758,
	116, 1758,
	117, 1758,
	118, 1758,
	119, 1758,
	120, 1758,
	121, 1758,
	122, 1758,
	123, 1758,
	124, 1758,
	128, 1758,
	129, 1758,
	130, 1758,
	131, 1758,
	132, 1758,
	133, 1758,
	134, 1758,
	135, 1758,
	136, 1758,
	137, 1758,
	138, 1758,
	139, 1758,
	141, 1758,
	144, 1758,
	145, 1758,
	147, 1758,
	148, 1758,
	150, 1758,
	152, 1758,
	153, 1758,
	154, 1758,
	155, 1758,
	156, 1758,
	157, 1758,
	158, 1758,
	159, 1758,
	160, 1758,
	161, 1758,
	162, 1758,
	163, 1758,
	164, 1758,
	165, 1758,
	166, 1758,
	167, 1758,
	169, 1758,
	170, 1758,
	171, 1758,
	173, 1758,
	174, 1758,
	175, 1758,
	176, 1758,
	177, 1758,
	178, 1758,
	179, 1758,
	180, 1758,
	181, 1758,
	183, 1758,
	185, 1758,
	186, 1758,
	187, 1758,
	188, 1758,
	189, 1758,
	190, 1758,
	191, 1758,
	192, 1758,
	193, 1758,
	194, 1758,
	195, 1758,
	196, 1758,
	197, 1758,
	198, 1758,
	200, 1758,
	201, 1758,
	203, 1758,
	204, 1758,
	205, 1758,
	206, 1758,
	207, 1758,
	209, 1758,
	210, 1758,
	213, 1758,
	214, 1758,
	215, 1758,
	218, 1758,
	219, 1758,
	220, 1758,
	221, 1758,
	222, 1758,
	223, 1758,
	224, 1758,
	225, 1758,
	226, 1758,
	227, 1758,
	230, 1758,
	232, 1758,
	233, 1758,
	234, 1758,
	235, 1758,
	236, 1758,
	238, 1758,
	239, 1758,
	242, 1758,
	243, 1758,
	244, 1758,
	246, 1758,
	247, 1758,
	249, 1758,
	251, 1758,
	252, 1758,
	253, 1758,
	254, 1758,
	255, 1758,
	256, 1758,
	257, 1758,
	258, 1758,
	260, 1758,
	261, 1758,
	262, 1758,
	263, 1758,
	264, 1758,
	266, 1758,
	267, 1758,
	268, 1758,
	269, 1758,
	270, 1758,
	271, 1758,
	272, 1758,
	273, 1758,
	274, 1758,
	276, 1758,
	277, 1758,
	278, 1758,
	279, 1758,
	280, 1758,
	281, 1758,
	282, 1758,
	283, 1758,
	284, 1758,
	285, 1758,
	286, 1758,
	287, 1758,
	288, 1758,
	290, 1758,
	291, 1758,
	292, 1758,
	293, 1758,
	294, 1758,
	295, 1758,
	296, 1758,
	297, 1758,
	298, 1758,
	299, 1758,
	300, 1758,
	301, 1758,
	302, 1758,
	303, 1758,
	304, 1758,
	305, 1758,
	307, 1758,
	308, 1758,
	309, 1758,
	310, 1758,
	311, 1758,
	312, 1758,
	313, 1758,
	314, 1758,
	315, 1758,
	317, 1758,
	318, 1758,
	319, 1758,
	320, 1758,
	321, 1758,
	322, 1758,
	323, 1758,
	324, 1758,
	325, 1758,
	327, 1758,
	328, 1758,
	329, 1758,
	330, 1758,
	331, 1758,
	332, 1758,
	333, 1758,
	334, 1758,
	335, 1758,
	336, 1758,
	337, 1758,
	338, 1758,
	340, 1758,
	341, 1758,
	343, 1758,
	344, 1758,
	345, 1758,
	346, 1758,
	347, 1758,
	348, 1758,
	349, 1758,
	350, 1758,
	351, 1758,
	352, 1758,
	354, 1758,
	355, 1758,
	356, 1758,
	357, 1758,
	360, 1758,
	361, 1758,
	362, 1758,
	363, 1758,
	365, 1758,
	366, 1758,
	368, 1758,
	369, 1758,
	372, 1758,
	373, 1758,
	374, 1758,
	375, 1758,
	377, 1758,
	379, 1758,
	380, 1758,
	381, 1758,
	382, 1758,
	383, 1758,
	384, 1758,
	387, 1758,
	388, 1758,
	393, 1758,
	394, 1758,
	395, 1758,
	396, 1758,
	397, 1758,
	398, 1758,
	399, 1758,
	400, 1758,
	402, 1758,
	403, 1758,
	404, 1758,
	405, 1758,
	406, 1758,
	407, 1758,
	409, 1758,
	410, 1758,
	411, 1758,
	412, 1758,
	413, 1758,
	414, 1758,
	415, 1758,
	416, 1758,
	417, 1758,
	419, 1758,
	422, 1758,
	423, 1758,
	426, 1758,
	427, 1758,
	-2, 0,
	-1, 1171,
	143, 1669,
	358, 1669,
	404, 1669,
	423, 1669,
	-2, 0,
	-1, 1200,
	143, 1698,
	358, 1698,
	404, 1698,
	423, 1698,
	-2, 0,
	-1, 1201,
	188, 806,
	266, 806,
	271, 806,
	-2, 408,
	-1, 1280,
	127, 910,
	208, 910,
	237, 910,
	-2, 868,
	-1, 1364,
	114, 872,
	127, 872,
	182, 872,
	208, 872,
	237, 872,
	245, 872,
	370, 872,
	-2, 1236,
	-1, 1414,
	422, 1356,
	-2, 0,
	-1, 1422,
	188, 806,
	266, 806,
	271, 806,
	-2, 801,
	-1, 1456,
	114, 872,
	127, 872,
	182, 872,
	208, 872,
	237, 872,
	245, 872,
	370, 872,
	-2, 980,
	-1, 1663,
	188, 806,
	266, 806,
	271, 806,
	-2, 410,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1132,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1133,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1134,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1135,
	-1, 1777,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1136,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1137,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1138,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1139,
	-1, 1792,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1151,
	-1, 1793,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1152,
	-1, 1794,
	13, 0,
	14, 0,
	15, 0,
	77, 0,
	194, 0,
	195, 0,
	402, 0,
	403, 0,
	404, 0,
	405, 0,
	406, 0,
	-2, 1153,
	-1, 1797,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1158,
	-1, 1803,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1160,
	-1, 1805,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1164,
	-1, 1806,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1165,
	-1, 1807,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1166,
	-1, 1808,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1167,
	-1, 1889,
	5, 1049,
	143, 1367,
	421, 1488,
	-2, 1479,
	-1, 1890,
	143, 1368,
	-2, 1716,
	-1, 1891,
	143, 1369,
	-2, 1599,
	-1, 1892,
	143, 1370,
	-2, 1539,
	-1, 1893,
	143, 1371,
	-2, 1567,
	-1, 1894,
	143, 1372,
	-2, 1598,
	-1, 1895,
	143, 1373,
	-2, 1661,
	-1, 1969,
	1, 981,
	81, 981,
	114, 981,
	127, 981,
	144, 981,
	149, 981,
	151, 981,
	173, 981,
	182, 981,
	191, 981,
	204, 981,
	208, 981,
	223, 981,
	237, 981,
	240, 981,
	245, 981,
	289, 981,
	291, 981,
	370, 981,
	378, 981,
	390, 981,
	391, 981,
	401, 981,
	420, 981,
	422, 981,
	424, 981,
	425, 981,
	426, 981,
	-2, 980,
	-1, 1974,
	421, 1465,
	-2, 1477,
	-1, 2056,
	422, 1426,
	426, 1426,
	-2, 1453,
	-1, 2182,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1159,
	-1, 2183,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1161,
	-1, 2188,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1162,
	-1, 2419,
	256, 896,
	-2, 718,
	-1, 2486,
	188, 806,
	266, 806,
	271, 806,
	-2, 407,
	-1, 2501,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1163,
	-1, 2506,
	186, 0,
	187, 0,
	230, 0,
	-2, 1181,
	-1, 2567,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1211,
	-1, 2568,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1212,
	-1, 2569,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1213,
	-1, 2573,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1217,
	-1, 2574,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1218,
	-1, 2575,
	13, 0,
	14, 0,
	15, 0,
	402, 0,
	403, 0,
	404, 0,
	-2, 1219,
	-1, 2617,
	421, 1466,
	-2, 1478,
	-1, 2728,
	186, 0,
	187, 0,
	230, 0,
	-2, 1182,
	-1, 2731,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1185,
	-1, 2732,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1187,
	-1, 2877,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1186,
	-1, 2878,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	161, 0,
	162, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1188,
	-1, 2888,
	186, 0,
	-2, 1220,
	-1, 2976,
	186, 0,
	-2, 1221,
	-1, 3072,
	38, 0,
	161, 0,
	207, 0,
	321, 0,
	399, 0,
	407, 0,
	-2, 1719,
}

const sqlPrivate = 57344

const sqlLast = 59072

var sqlAct = [...]int{

	781, 2663, 1929, 3071, 3080, 2083, 2829, 3134, 2916, 3048,
	3050, 3035, 3081, 2905, 3082, 2112, 770, 3047, 2537, 3070,
	2091, 2980, 2844, 1081, 2868, 1760, 2434, 2176, 2675, 723,
	951, 2799, 2680, 1961, 2784, 1820, 1139, 2216, 1283, 2218,
	1593, 209, 1055, 2426, 2685, 2428, 495, 2627, 2457, 2439,
	2459, 2892, 2080, 495, 2058, 2054, 490, 773, 2336, 2325,
	495, 757, 1449, 495, 495, 1369, 495, 209, 1594, 495,
	495, 1957, 967, 1135, 2283, 2301, 495, 1527, 1451, 1430,
	1103, 588, 2092, 961, 495, 1538, 2762, 2057, 1542, 1541,
	1550, 1986, 2312, 1488, 1547, 1832, 1962, 2039, 545, 1746,
	541, 2282, 944, 2172, 1751, 2981, 2590, 731, 130, 1372,
	864, 2626, 1964, 2343, 2438, 1977, 1860, 1422, 2401, 1504,
	764, 1510, 1539, 1688, 2013, 1467, 1469, 1431, 1842, 2014,
	1926, 1817, 73, 1203, 2040, 1854, 1400, 580, 2055, 1402,
	953, 1150, 2085, 1132, 210, 1122, 2061, 920, 211, 917,
	1949, 492, 925, 1885, 136, 1459, 1440, 899, 1934, 2830,
	1284, 1833, 1359, 1282, 137, 630, 495, 495, 130, 1687,
	772, 583, 538, 624, 491, 1148, 1119, 722, 595, 610,
	1480, 205, 1557, 1059, 922, 1421, 2628, 659, 897, 2203,
	929, 1288, 475, 2606, 1565, 779, 2607, 727, 495, 495,
	495, 956, 495, 495, 970, 970, 603, 1565, 3161, 1565,
	2113, 1450, 1943, 495, 495, 478, 3155, 3154, 475, 2041,
	1943, 1943, 2084, 3131, 3128, 3106, 1563, 2798, 1519, 2798,
	727, 3100, 3099, 566, 28, 1943, 1943, 2476, 2499, 1513,
	1943, 478, 2255, 2256, 1577, 2273, 2274, 2275, 597, 3096,
	3093, 3090, 2115, 3097, 3094, 1519, 947, 3068, 2445, 3067,
	2727, 1519, 3066, 1519, 737, 3065, 1577, 2446, 3030, 1577,
	3017, 728, 2125, 3010, 1519, 2414, 964, 2798, 900, 900,
	3008, 2041, 130, 3006, 2798, 715, 1519, 2798, 2978, 2255,
	2256, 1062, 2125, 2961, 2951, 714, 2946, 2701, 2798, 2944,
	1519, 3031, 2270, 2798, 2934, 146, 2593, 2933, 1519, 2926,
	39, 1519, 2925, 1519, 2898, 2879, 2798, 2209, 1519, 2125,
	2824, 40, 141, 2210, 1943, 1936, 771, 732, 2820, 914,
	2797, 2730, 1943, 2699, 2798, 2125, 44, 2692, 2691, 2612,
	2602, 2596, 2692, 2613, 2603, 1943, 2515, 937, 941, 946,
	1519, 46, 143, 1174, 2510, 901, 2466, 1061, 1943, 2964,
	2406, 1060, 2298, 45, 475, 51, 1943, 2250, 2249, 931,
	2261, 1943, 1943, 2243, 1186, 2242, 2143, 2244, 1943, 1943,
	1943, 903, 2124, 904, 2111, 52, 2125, 478, 1582, 54,
	2108, 2050, 1942, 58, 1943, 1519, 1943, 144, 1577, 2255,
	2256, 59, 72, 171, 1519, 1581, 60, 61, 28, 1582,
	2593, 2217, 1935, 1299, 1300, 1666, 2701, 2261, 2276, 778,
	2029, 1175, 1975, 2406, 2175, 2154, 1518, 1426, 1837, 1566,
	1058, 62, 174, 542, 2447, 1170, 1169, 1168, 1302, 173,
	63, 1167, 1566, 1080, 1566, 1166, 2271, 1165, 1164, 1163,
	1162, 1161, 1160, 2448, 2255, 2256, 573, 1159, 544, 2270,
	1158, 1157, 1960, 1156, 1155, 1301, 1857, 40, 573, 1154,
	1685, 905, 902, 721, 720, 719, 718, 717, 713, 40,
	172, 712, 44, 711, 710, 171, 709, 708, 707, 165,
	706, 705, 704, 2271, 44, 703, 699, 166, 698, 697,
	657, 656, 655, 654, 495, 495, 653, 495, 956, 956,
	495, 572, 652, 495, 651, 650, 495, 649, 138, 648,
	1175, 173, 495, 572, 1858, 647, 646, 2261, 1299, 1300,
	2272, 645, 495, 495, 495, 495, 495, 956, 956, 574,
	644, 1307, 64, 643, 956, 2255, 2256, 59, 576, 65,
	2445, 574, 60, 1302, 642, 641, 777, 640, 1519, 59,
	576, 639, 172, 1096, 60, 638, 1875, 637, 1573, 75,
	139, 66, 636, 67, 1143, 68, 495, 2272, 495, 145,
	1301, 1564, 2261, 1730, 69, 635, 63, 1068, 1859, 1856,
	495, 171, 634, 928, 619, 618, 1108, 617, 63, 1079,
	138, 616, 83, 2271, 615, 110, 573, 614, 1935, 1093,
	529, 528, 501, 495, 142, 1074, 500, 40, 499, 1136,
	481, 480, 730, 479, 495, 2255, 2256, 173, 195, 194,
	193, 192, 44, 191, 2267, 2268, 2269, 190, 2088, 189,
	188, 2266, 2264, 2265, 2257, 2258, 2259, 2260, 2262, 2263,
	115, 187, 186, 185, 184, 1873, 1307, 1175, 2271, 1172,
	140, 572, 183, 182, 956, 181, 968, 1056, 172, 180,
	179, 1121, 178, 2261, 177, 1861, 728, 165, 1126, 1129,
	176, 175, 2777, 1968, 1151, 166, 2735, 2272, 64, 574,
	2265, 2257, 2258, 2259, 2260, 2262, 2263, 59, 576, 2693,
	64, 495, 60, 2610, 2339, 1370, 138, 2215, 1871, 4,
	2205, 2164, 2051, 2044, 1869, 1867, 139, 66, 1067, 67,
	1072, 1691, 1078, 1452, 1466, 1590, 1376, 1217, 139, 66,
	927, 67, 1083, 1064, 3087, 3069, 63, 171, 3052, 2971,
	2967, 2965, 2272, 1201, 1281, 1295, 2947, 171, 575, 171,
	2915, 110, 1211, 2261, 1280, 2866, 1215, 2492, 1367, 2862,
	575, 2255, 2256, 110, 1370, 2852, 2761, 1855, 2760, 2754,
	2747, 1073, 2746, 173, 2745, 2255, 2256, 2741, 2740, 2739,
	2738, 2713, 573, 173, 2711, 173, 2616, 2587, 1589, 2586,
	2585, 2130, 913, 40, 2523, 2409, 2405, 1198, 2266, 2264,
	2265, 2257, 2258, 2259, 2260, 2262, 2263, 2334, 44, 2294,
	2281, 2470, 2254, 2251, 172, 1303, 1304, 1305, 1306, 1308,
	1309, 2248, 2247, 165, 172, 1524, 172, 1179, 2245, 2271,
	2223, 166, 2222, 165, 1184, 165, 2204, 572, 64, 2116,
	1969, 166, 1295, 166, 1828, 171, 1522, 1294, 1218, 1380,
	1279, 3159, 543, 2266, 2264, 2265, 2257, 2258, 2259, 2260,
	2262, 2263, 138, 3142, 138, 574, 139, 66, 1373, 67,
	1362, 3141, 1082, 59, 576, 1686, 2015, 2539, 60, 3060,
	3055, 173, 3012, 3003, 2171, 3002, 715, 171, 728, 2261,
	2998, 171, 2997, 2992, 495, 2160, 714, 2989, 575, 495,
	2963, 110, 2962, 2261, 1822, 1299, 1300, 2911, 2890, 2838,
	2834, 2832, 63, 2272, 2819, 1437, 2776, 1291, 1292, 171,
	2759, 1296, 172, 173, 1428, 495, 171, 173, 2702, 2678,
	1302, 165, 1305, 1306, 1308, 1309, 929, 2670, 929, 166,
	2669, 2667, 2644, 2643, 2633, 2632, 2851, 2257, 2258, 2259,
	2260, 2262, 2263, 2598, 2505, 173, 2983, 1301, 2472, 2464,
	2087, 2390, 173, 2374, 172, 2271, 2353, 2352, 172, 1829,
	2297, 2232, 2231, 165, 2228, 1398, 1363, 165, 1401, 2197,
	1403, 166, 1447, 1404, 1408, 166, 1874, 1434, 1435, 2132,
	1972, 1411, 1954, 1941, 1299, 1300, 172, 1865, 1533, 1465,
	1429, 1460, 138, 172, 1420, 165, 138, 1419, 1414, 1413,
	1412, 900, 165, 166, 64, 1410, 1409, 1448, 1406, 1302,
	166, 1405, 1396, 1395, 130, 2264, 2265, 2257, 2258, 2259,
	2260, 2262, 2263, 1307, 138, 1394, 2127, 1393, 1392, 1391,
	1390, 138, 139, 66, 1389, 67, 1301, 1388, 2353, 2272,
	1387, 1386, 1385, 1384, 728, 1377, 1362, 1197, 956, 495,
	1329, 1330, 1331, 171, 1181, 970, 1591, 1487, 1176, 1457,
	1423, 1153, 1147, 1425, 575, 1872, 2865, 110, 2733, 2710,
	2605, 2601, 2208, 495, 970, 495, 495, 1427, 1955, 2255,
	2256, 1373, 2468, 209, 1360, 1461, 2142, 1475, 1685, 173,
	2429, 1214, 1277, 1481, 1454, 2857, 2704, 495, 495, 1322,
	1192, 1534, 2703, 2608, 495, 931, 495, 931, 495, 2041,
	2318, 1452, 495, 1417, 1511, 2940, 1415, 1546, 1870, 1418,
	1672, 1391, 1416, 2394, 1868, 1866, 2642, 2968, 2966, 1685,
	172, 2389, 2141, 1676, 1675, 1506, 1685, 1682, 1685, 165,
	1580, 2385, 1391, 2373, 956, 895, 2289, 166, 2288, 2287,
	2286, 2181, 1659, 2257, 2258, 2259, 2260, 2262, 2263, 2914,
	1210, 1382, 495, 956, 209, 495, 495, 956, 138, 2259,
	2260, 2262, 2263, 956, 2113, 1543, 209, 495, 2017, 896,
	495, 495, 2478, 1323, 2384, 1500, 495, 1554, 2893, 2084,
	1661, 2541, 1552, 1061, 3088, 2213, 1530, 1060, 1843, 1399,
	475, 912, 3098, 3095, 2441, 2622, 1270, 3044, 970, 1649,
	2676, 1857, 200, 2118, 2469, 3121, 1222, 956, 956, 2488,
	495, 3016, 2811, 478, 1561, 495, 537, 508, 1679, 1599,
	209, 495, 1517, 495, 475, 495, 889, 495, 887, 495,
	1256, 1268, 1586, 885, 2144, 3122, 3089, 1255, 3158, 495,
	2939, 495, 2938, 1121, 1651, 1379, 882, 478, 1681, 495,
	495, 495, 2936, 1653, 1537, 2935, 2657, 2652, 2651, 1858,
	2619, 1532, 2618, 2227, 891, 1673, 1482, 2226, 1715, 2225,
	1556, 1988, 1618, 2224, 1151, 1269, 2184, 2114, 495, 2034,
	1559, 2028, 970, 2828, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 1479, 2024, 201, 1212, 726, 1663, 2005,
	536, 507, 1619, 1733, 1804, 475, 1424, 1096, 1057, 1583,
	1921, 1920, 1919, 1918, 1762, 1483, 1484, 475, 2081, 928,
	1684, 928, 1727, 1859, 1856, 1198, 2970, 1587, 478, 1680,
	1722, 2491, 2038, 1568, 1728, 1585, 1570, 1599, 1599, 1572,
	478, 1660, 1213, 1575, 1220, 701, 1834, 1650, 1752, 1759,
	518, 1367, 1085, 1724, 1991, 3015, 1834, 970, 1693, 1188,
	1847, 1677, 196, 1689, 2662, 725, 2918, 1979, 2049, 609,
	202, 475, 1979, 1998, 1819, 1697, 2436, 3063, 2647, 1883,
	1461, 1309, 1819, 1978, 1997, 608, 1560, 1251, 1888, 1888,
	1618, 1618, 1899, 1901, 478, 1906, 1298, 1834, 1196, 1254,
	1861, 1706, 609, 1826, 2128, 495, 1700, 495, 1824, 3113,
	1861, 3027, 1933, 2795, 2173, 2174, 2381, 2437, 2147, 1477,
	2376, 1499, 519, 715, 1732, 1731, 715, 715, 727, 2635,
	2149, 970, 495, 1742, 2533, 1252, 1743, 1744, 929, 3028,
	2792, 495, 3144, 1750, 495, 1485, 2393, 970, 1973, 1884,
	1189, 495, 2489, 201, 1502, 929, 927, 204, 927, 495,
	2150, 1565, 1267, 1840, 1191, 1843, 2436, 495, 2994, 1397,
	2653, 203, 2148, 2072, 1970, 728, 2263, 1990, 1276, 495,
	2793, 728, 956, 1686, 2015, 1729, 2255, 2256, 1596, 2273,
	2274, 2275, 2025, 495, 970, 2365, 1726, 1299, 1300, 495,
	495, 1830, 1855, 1908, 2021, 1980, 3121, 1520, 1956, 199,
	2487, 1477, 1966, 1967, 495, 1838, 2480, 495, 535, 900,
	2874, 1861, 1302, 2884, 1686, 2015, 1528, 1599, 202, 1230,
	2364, 1686, 1683, 1686, 2015, 947, 3112, 2942, 2008, 1357,
	1896, 495, 1836, 495, 197, 495, 2270, 1439, 495, 1301,
	495, 505, 495, 724, 495, 495, 1917, 495, 956, 956,
	956, 2007, 2807, 956, 1931, 2036, 2035, 1992, 1994, 2230,
	495, 728, 495, 1939, 1940, 1951, 1952, 1946, 200, 1947,
	1618, 2022, 1221, 1989, 1930, 883, 1457, 883, 198, 512,
	1950, 2483, 884, 534, 2068, 2106, 2107, 1983, 1815, 2016,
	2018, 2019, 2020, 1507, 3137, 883, 1596, 1596, 2000, 2788,
	1443, 1965, 2789, 2007, 2261, 204, 2006, 931, 1813, 1503,
	893, 521, 520, 892, 2919, 1307, 1714, 2102, 2023, 203,
	1084, 727, 3084, 495, 931, 2715, 2722, 1984, 2636, 1446,
	2104, 1664, 2705, 1061, 1187, 2133, 2791, 2042, 1264, 1287,
	475, 2117, 1329, 1330, 1331, 2097, 2794, 1441, 747, 3111,
	1692, 2645, 2109, 1202, 3083, 2530, 1976, 199, 1238, 130,
	1444, 2120, 970, 478, 495, 3120, 3118, 3145, 2482, 2186,
	130, 511, 2090, 2843, 495, 702, 495, 1818, 2841, 1442,
	2271, 2805, 2479, 2099, 2002, 2100, 1566, 2101, 2103, 1190,
	1984, 1322, 197, 1151, 2110, 1825, 2314, 495, 495, 495,
	2119, 495, 1297, 1809, 1195, 2129, 2757, 537, 2078, 2076,
	2031, 1810, 1536, 1699, 1811, 2194, 1265, 2095, 1816, 2531,
	495, 2137, 532, 2138, 2131, 1436, 200, 2046, 1801, 2048,
	1185, 1477, 3085, 1173, 1761, 2192, 198, 1207, 498, 2367,
	2875, 2398, 2790, 1404, 527, 1411, 1286, 1445, 1984, 741,
	1357, 2158, 1401, 2159, 2134, 2481, 1515, 533, 1509, 2369,
	2136, 2086, 2402, 2086, 2272, 2928, 522, 3135, 2927, 2145,
	3150, 2166, 2870, 2986, 2909, 1323, 1508, 1738, 508, 1671,
	2621, 1266, 2576, 2161, 1231, 2810, 1596, 2163, 2349, 2806,
	130, 536, 2809, 506, 130, 2200, 2345, 2079, 2077, 2368,
	3086, 531, 1367, 1505, 1555, 1545, 1861, 495, 2187, 1844,
	1544, 1540, 1535, 2326, 1443, 1208, 504, 1207, 502, 2529,
	1209, 1470, 2220, 2221, 1471, 1483, 1484, 1285, 503, 3136,
	2189, 928, 1232, 3036, 2313, 1229, 2758, 2170, 1719, 1207,
	1669, 2190, 1667, 1446, 2845, 2195, 2681, 1812, 928, 2910,
	2168, 1799, 1802, 2009, 1670, 1814, 1287, 513, 2355, 3138,
	1286, 1948, 507, 2354, 2179, 2869, 1694, 1739, 2267, 2268,
	2269, 505, 509, 2315, 1444, 2266, 2264, 2265, 2257, 2258,
	2259, 2260, 2262, 2263, 2206, 1945, 1944, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 1208, 1239, 1798, 2327, 1974,
	1209, 2296, 3149, 2185, 601, 2577, 2053, 1472, 970, 512,
	2299, 2052, 2578, 594, 2308, 2306, 2307, 1208, 2070, 1474,
	725, 2808, 1209, 929, 495, 728, 2664, 495, 2407, 3,
	1470, 929, 929, 1471, 495, 929, 1118, 495, 495, 970,
	2212, 1285, 571, 36, 482, 1116, 1107, 495, 495, 495,
	1106, 578, 3125, 495, 2831, 2871, 495, 2907, 2329, 929,
	2322, 1445, 2397, 495, 495, 495, 495, 495, 927, 1476,
	2330, 2331, 570, 35, 2191, 2763, 495, 530, 2010, 2011,
	3127, 2338, 2193, 495, 2591, 927, 569, 32, 2403, 2908,
	2320, 568, 79, 1864, 2323, 495, 956, 2889, 2756, 495,
	2840, 511, 523, 2661, 2321, 970, 2284, 2346, 2504, 495,
	2456, 1800, 1599, 567, 78, 970, 1472, 2246, 2333, 1274,
	2317, 2196, 970, 2350, 2291, 2292, 2293, 2135, 1474, 564,
	23, 2033, 2004, 2300, 495, 1526, 495, 1464, 495, 1275,
	881, 956, 495, 956, 956, 956, 2328, 495, 1182, 495,
	524, 1096, 1261, 495, 1477, 2415, 2375, 2285, 495, 1713,
	495, 2162, 2303, 2157, 2139, 1618, 1716, 495, 535, 2351,
	2310, 2311, 2340, 1703, 2316, 1652, 2391, 2357, 1476, 2361,
	2362, 2371, 2386, 2431, 495, 495, 525, 2443, 526, 956,
	1259, 599, 600, 2432, 1863, 2337, 2370, 2382, 1096, 2839,
	592, 593, 931, 2377, 935, 1475, 495, 1383, 508, 1092,
	931, 931, 2378, 1249, 931, 2380, 2379, 36, 1117, 3079,
	2474, 2387, 2659, 506, 2155, 2392, 2411, 1115, 2408, 1514,
	1475, 483, 484, 577, 2342, 495, 2430, 3033, 931, 1984,
	2781, 2640, 2404, 534, 2417, 2638, 504, 35, 2620, 2356,
	495, 2359, 1247, 1599, 765, 2425, 565, 24, 503, 1511,
	1273, 32, 2462, 1477, 2467, 1511, 79, 1245, 2473, 1219,
	1243, 689, 2442, 563, 30, 2423, 970, 2082, 1532, 2074,
	1473, 2449, 2455, 2475, 886, 888, 970, 513, 78, 130,
	728, 736, 507, 1260, 2073, 476, 2071, 1712, 562, 21,
	493, 495, 509, 1241, 23, 2372, 1618, 514, 2507, 486,
	485, 560, 20, 2067, 540, 561, 19, 584, 591, 1579,
	540, 476, 1578, 584, 606, 1599, 2518, 2525, 2526, 2527,
	613, 1258, 2486, 2493, 2388, 2484, 2485, 1576, 633, 1574,
	130, 1571, 2542, 2495, 2440, 2497, 1569, 1470, 2490, 1567,
	1471, 1525, 1523, 2440, 1248, 1512, 487, 488, 1501, 1498,
	690, 1235, 1599, 1599, 550, 15, 1486, 537, 2588, 2511,
	2412, 551, 16, 1752, 2545, 1478, 2956, 1114, 1618, 2421,
	2551, 1596, 532, 1599, 1599, 2427, 559, 57, 2177, 1473,
	2517, 3122, 495, 1246, 1752, 2556, 2450, 2451, 2452, 2864,
	2453, 2454, 929, 2863, 495, 1690, 2538, 2958, 1244, 2544,
	970, 1242, 2532, 2534, 2535, 1618, 1618, 533, 1599, 1996,
	540, 540, 2609, 2690, 2553, 2604, 928, 2580, 930, 2584,
	2555, 24, 1979, 1472, 928, 928, 1618, 1618, 928, 2826,
	929, 2140, 909, 1995, 1240, 1474, 1289, 2650, 30, 2037,
	2032, 536, 493, 493, 493, 2581, 962, 493, 2178, 689,
	2649, 531, 928, 2656, 910, 2027, 2589, 476, 1063, 2592,
	2305, 1618, 2649, 21, 2597, 130, 2649, 495, 495, 736,
	495, 2649, 2660, 2594, 2595, 495, 20, 558, 56, 691,
	19, 2003, 549, 55, 970, 1476, 970, 1657, 1658, 956,
	2611, 2332, 1234, 1979, 1366, 2648, 2996, 2671, 557, 12,
	548, 50, 2800, 2624, 1993, 2973, 495, 2654, 1113, 1439,
	2694, 2655, 1596, 1233, 555, 47, 2658, 1290, 579, 2683,
	556, 48, 2687, 929, 2764, 956, 495, 495, 2012, 15,
	2686, 2600, 1489, 2682, 2007, 911, 16, 495, 690, 1999,
	970, 495, 495, 970, 495, 547, 49, 2646, 554, 7,
	1493, 57, 495, 927, 2665, 2677, 1293, 2679, 2666, 2030,
	970, 927, 927, 2673, 2668, 927, 2629, 2400, 2001, 2674,
	1477, 931, 1443, 692, 2400, 3032, 2688, 2837, 2615, 2684,
	2089, 2075, 2696, 2066, 1596, 2719, 2724, 602, 2695, 927,
	1932, 1490, 553, 6, 1662, 552, 38, 1468, 2712, 1592,
	495, 1446, 1299, 1300, 3133, 2463, 2729, 2707, 2708, 931,
	3148, 693, 2716, 1224, 2714, 546, 37, 2720, 1223, 1441,
	1370, 1596, 1596, 1599, 2717, 2255, 2256, 1302, 2709, 931,
	2901, 2725, 1444, 1299, 1300, 1299, 1300, 2152, 2151, 2536,
	2471, 931, 1596, 1596, 2152, 931, 2639, 2153, 2641, 1898,
	931, 1442, 56, 1984, 1301, 1853, 1494, 55, 1263, 495,
	2736, 1262, 2303, 2528, 1380, 1378, 2855, 691, 2698, 970,
	929, 970, 1272, 12, 1271, 50, 1618, 1596, 1257, 495,
	495, 495, 1253, 1250, 1236, 1301, 1194, 1665, 2755, 47,
	929, 894, 2095, 700, 495, 48, 1473, 2917, 3043, 495,
	687, 495, 931, 2363, 495, 495, 495, 495, 495, 929,
	1702, 1237, 495, 495, 956, 1704, 1495, 1496, 970, 1445,
	49, 2801, 956, 7, 2769, 1491, 2771, 1142, 2514, 2770,
	495, 495, 2775, 2319, 1953, 2780, 2768, 3026, 2521, 2742,
	2772, 2766, 2767, 956, 929, 2229, 2979, 2883, 493, 1091,
	2700, 493, 1492, 495, 493, 929, 1862, 962, 2827, 1381,
	1111, 692, 495, 495, 956, 956, 493, 6, 53, 1096,
	38, 2804, 2849, 2847, 760, 823, 493, 493, 493, 493,
	962, 2814, 2815, 2782, 2856, 2623, 2836, 2846, 2873, 2825,
	37, 2060, 2821, 2779, 2432, 928, 970, 2848, 2059, 693,
	973, 1674, 2854, 782, 2803, 1887, 1753, 2835, 784, 2765,
	1597, 2859, 2858, 2876, 2813, 2822, 787, 786, 785, 1598,
	633, 2818, 591, 1407, 783, 1595, 2337, 2895, 2069, 1497,
	2093, 677, 1678, 928, 493, 2882, 1823, 1841, 970, 2833,
	2211, 1374, 495, 752, 495, 2629, 970, 495, 1839, 931,
	2842, 1180, 751, 2324, 2435, 495, 2614, 1193, 2850, 1737,
	2891, 970, 2617, 2169, 1734, 2778, 2637, 1984, 633, 931,
	510, 2904, 2252, 1146, 1914, 929, 1907, 1599, 2896, 2897,
	2629, 1903, 2937, 1278, 1358, 2812, 2922, 2921, 931, 2923,
	2094, 2629, 1596, 2817, 1216, 2335, 2902, 2444, 2126, 2900,
	1745, 908, 495, 907, 495, 2649, 2920, 956, 2899, 929,
	906, 929, 495, 3049, 3046, 929, 2872, 1984, 1668, 2146,
	1351, 756, 2304, 931, 2410, 1089, 928, 2995, 949, 1599,
	1618, 1350, 927, 890, 931, 970, 2988, 2954, 1206, 2440,
	2930, 1205, 1204, 2348, 3143, 493, 2634, 170, 167, 169,
	2941, 2953, 2955, 2960, 495, 2686, 168, 2903, 2396, 82,
	495, 2959, 34, 33, 109, 108, 107, 106, 495, 105,
	927, 104, 103, 2972, 102, 101, 100, 2969, 2991, 99,
	98, 2985, 1618, 2432, 97, 2853, 96, 95, 94, 2957,
	93, 2977, 92, 2982, 91, 90, 495, 495, 2984, 89,
	88, 87, 968, 495, 2943, 1056, 2945, 86, 1599, 3009,
	2949, 2629, 85, 3007, 956, 84, 2993, 2649, 629, 495,
	626, 81, 80, 956, 956, 31, 26, 495, 1984, 495,
	113, 495, 114, 25, 77, 3001, 3029, 76, 29, 3011,
	18, 11, 17, 22, 3013, 2629, 3019, 2629, 3014, 3022,
	495, 2629, 135, 495, 931, 495, 134, 970, 3039, 3020,
	3021, 1618, 3004, 927, 133, 3053, 3054, 132, 3051, 3056,
	131, 14, 13, 928, 128, 129, 3058, 3057, 127, 3059,
	126, 3041, 3045, 3064, 931, 125, 124, 123, 931, 929,
	931, 10, 495, 928, 931, 8, 1827, 3062, 112, 2931,
	2932, 9, 2867, 2477, 3023, 70, 3024, 1366, 3076, 71,
	3000, 3078, 928, 3077, 27, 43, 495, 42, 41, 3103,
	111, 3104, 161, 3102, 495, 1438, 3091, 1741, 160, 159,
	3040, 2948, 3018, 2774, 158, 154, 3110, 929, 613, 157,
	495, 3108, 3109, 540, 3107, 155, 1596, 928, 156, 153,
	122, 573, 1913, 3116, 163, 3119, 3117, 162, 928, 151,
	148, 150, 40, 3123, 1455, 152, 930, 3051, 3126, 493,
	3129, 3130, 3124, 3132, 149, 147, 164, 44, 121, 120,
	119, 118, 2999, 117, 3061, 116, 5, 2, 3140, 1,
	3139, 0, 0, 3101, 0, 0, 931, 3147, 1596, 0,
	3146, 0, 0, 0, 3151, 3152, 572, 0, 3153, 0,
	927, 0, 0, 1299, 1300, 0, 0, 0, 0, 0,
	3156, 3157, 3160, 0, 734, 2629, 689, 0, 3162, 0,
	927, 0, 3105, 0, 574, 1097, 1100, 0, 1302, 0,
	2795, 0, 59, 576, 0, 0, 736, 60, 0, 927,
	0, 0, 0, 1909, 0, 0, 0, 0, 2880, 0,
	0, 0, 0, 0, 0, 1301, 739, 2792, 931, 0,
	2785, 0, 0, 2629, 0, 0, 0, 1596, 928, 0,
	0, 63, 735, 2783, 927, 0, 0, 0, 2787, 0,
	0, 0, 0, 0, 0, 927, 0, 0, 0, 0,
	2880, 0, 0, 476, 0, 0, 0, 2793, 1761, 0,
	2095, 0, 928, 0, 928, 690, 931, 0, 928, 0,
	0, 0, 0, 1761, 0, 0, 0, 1063, 0, 493,
	1531, 0, 0, 0, 2786, 0, 0, 476, 0, 0,
	0, 1307, 1299, 1300, 0, 0, 0, 0, 0, 0,
	0, 1551, 1551, 0, 0, 0, 0, 0, 493, 0,
	493, 0, 493, 0, 0, 0, 540, 1302, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 1225, 0, 0, 1301, 0, 0, 1056, 0, 0,
	0, 2198, 2199, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 66, 0, 67, 927, 633, 1322, 476, 1063,
	584, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 1063, 171, 0, 962, 493, 2788, 0, 0, 2789,
	633, 0, 0, 575, 691, 0, 110, 0, 0, 927,
	0, 927, 0, 0, 0, 927, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 173, 0,
	1307, 0, 0, 2791, 633, 0, 0, 0, 0, 493,
	0, 0, 0, 2794, 476, 493, 0, 493, 0, 493,
	0, 493, 928, 493, 2278, 2279, 2280, 1329, 1330, 1331,
	0, 1323, 0, 1717, 0, 1718, 1299, 1300, 0, 172,
	0, 0, 0, 493, 493, 493, 0, 0, 165, 1761,
	0, 0, 0, 0, 0, 0, 166, 0, 0, 0,
	0, 1302, 496, 0, 0, 0, 733, 0, 692, 0,
	928, 0, 633, 0, 0, 0, 1322, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 1913, 1913, 1301, 0,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 693, 0, 0, 2790,
	0, 0, 0, 0, 0, 2255, 2256, 0, 2273, 2274,
	2275, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 2726, 0, 0, 0, 0, 0, 1065,
	0, 1069, 0, 1075, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 0, 0, 1324, 1325, 1326, 1327, 0, 927,
	1323, 0, 0, 0, 1307, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2270, 0, 0, 0, 1913,
	1913, 1913, 0, 0, 0, 0, 0, 1909, 1909, 0,
	0, 1329, 1330, 1331, 0, 0, 0, 0, 0, 613,
	0, 540, 0, 0, 0, 0, 0, 927, 0, 0,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 0, 0, 0,
	0, 0, 0, 930, 0, 540, 0, 0, 493, 0,
	1322, 0, 0, 2261, 0, 1987, 0, 0, 1178, 0,
	0, 0, 0, 493, 0, 1183, 0, 0, 0, 0,
	0, 493, 0, 957, 0, 0, 971, 971, 0, 0,
	0, 0, 0, 493, 1303, 1304, 1305, 1306, 1308, 1309,
	1909, 1909, 1909, 0, 739, 0, 0, 493, 739, 0,
	0, 2276, 0, 476, 2043, 0, 0, 0, 0, 2502,
	2503, 0, 0, 0, 0, 0, 0, 1328, 2056, 0,
	0, 1063, 0, 0, 0, 1516, 0, 0, 0, 2271,
	0, 0, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1987, 0, 540, 0, 493,
	0, 0, 493, 0, 493, 0, 493, 0, 493, 493,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 1987, 0, 0, 0,
	0, 2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565,
	2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575,
	0, 2579, 0, 0, 0, 0, 0, 0, 1352, 1353,
	1354, 1355, 1356, 2272, 0, 0, 0, 0, 0, 0,
	0, 1365, 0, 0, 0, 0, 0, 2255, 2256, 1375,
	2273, 2274, 2275, 0, 0, 0, 0, 584, 0, 0,
	1584, 0, 0, 0, 1588, 1312, 1310, 1311, 1303, 1304,
	1305, 1306, 1308, 1309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1913, 1913, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 2270, 1063, 0,
	1063, 0, 0, 0, 1695, 1696, 0, 0, 0, 0,
	0, 2255, 2256, 0, 2273, 2274, 2275, 0, 0, 0,
	0, 493, 493, 493, 0, 493, 0, 2267, 2268, 2269,
	0, 0, 0, 0, 2266, 2264, 2265, 2257, 2258, 2259,
	2260, 2262, 2263, 0, 493, 0, 1913, 1913, 1913, 1913,
	1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913,
	1913, 1913, 1913, 1913, 1913, 2261, 1913, 0, 0, 0,
	0, 2270, 0, 0, 0, 1909, 1909, 0, 0, 0,
	0, 0, 1432, 1432, 1432, 0, 0, 0, 0, 2277,
	957, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2276, 0, 0, 0, 0, 0, 957,
	957, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 0, 0, 2261,
	0, 2271, 0, 0, 0, 0, 0, 1909, 1909, 1909,
	1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909, 1909,
	1909, 1909, 1909, 1909, 1909, 1909, 0, 1909, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2271, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2272, 0, 0, 0, 0,
	0, 930, 0, 0, 0, 0, 0, 0, 0, 930,
	930, 0, 0, 930, 0, 0, 957, 0, 540, 0,
	0, 540, 0, 0, 0, 0, 0, 0, 540, 0,
	0, 540, 540, 0, 0, 0, 0, 1455, 0, 0,
	0, 493, 1987, 2344, 0, 0, 0, 1987, 0, 2026,
	2344, 0, 0, 0, 0, 0, 0, 1987, 2344, 1987,
	2344, 2344, 0, 0, 0, 0, 0, 0, 0, 2272,
	493, 0, 0, 0, 0, 0, 0, 1531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 493,
	0, 0, 0, 962, 0, 0, 0, 0, 0, 2267,
	2268, 2269, 0, 493, 0, 0, 2266, 2264, 2265, 2257,
	2258, 2259, 2260, 2262, 2263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2105, 0, 0, 1551, 0,
	1551, 0, 493, 0, 0, 0, 493, 0, 0, 0,
	0, 493, 863, 493, 0, 0, 0, 962, 0, 0,
	0, 0, 1987, 0, 540, 0, 0, 0, 739, 739,
	2888, 1987, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2267, 2268, 2269, 0, 0, 2460, 1063,
	2266, 2264, 2265, 2257, 2258, 2259, 2260, 2262, 2263, 923,
	0, 0, 0, 0, 0, 0, 0, 2912, 0, 0,
	1063, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2494,
	0, 1735, 0, 1740, 0, 489, 0, 0, 0, 1747,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 0, 1803, 0, 1805, 1806, 1807,
	1808, 0, 0, 2976, 0, 2540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1831, 0, 0, 0,
	0, 0, 0, 0, 1365, 1913, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 0, 958, 0, 0, 972, 972, 0, 0,
	0, 0, 1913, 0, 0, 0, 0, 0, 1905, 0,
	1916, 0, 0, 0, 0, 1922, 1927, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	930, 0, 0, 0, 0, 0, 540, 939, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 1909, 971, 2631, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 1455, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 1913, 0,
	1455, 0, 0, 1909, 1455, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 0, 0, 2045, 0,
	2047, 1987, 1551, 0, 1551, 0, 0, 0, 0, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	1987, 930, 0, 0, 0, 0, 0, 2121, 0, 0,
	0, 0, 0, 0, 0, 957, 208, 0, 40, 957,
	591, 591, 0, 0, 0, 957, 0, 0, 208, 0,
	0, 1063, 0, 44, 0, 962, 493, 0, 493, 1909,
	0, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 2122, 2383, 0, 0, 0, 0, 0, 957,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	2123, 0, 0, 0, 2743, 0, 0, 0, 0, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 2416, 0,
	2418, 2419, 2420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 0,
	958, 958, 0, 0, 971, 0, 0, 0, 930, 0,
	0, 0, 0, 1063, 0, 0, 2465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 958,
	958, 0, 0, 1987, 2344, 1987, 958, 0, 0, 0,
	0, 0, 0, 1087, 0, 0, 0, 2631, 1063, 1105,
	0, 0, 0, 1987, 0, 2344, 0, 0, 1063, 1063,
	493, 1987, 2344, 0, 0, 0, 493, 493, 0, 0,
	0, 1125, 1125, 1125, 966, 0, 0, 0, 0, 971,
	0, 0, 2631, 0, 1063, 2056, 0, 0, 0, 0,
	0, 0, 0, 2631, 2182, 2183, 0, 0, 0, 64,
	2188, 0, 0, 0, 0, 0, 0, 1987, 0, 0,
	0, 0, 0, 0, 0, 0, 2460, 2460, 0, 2201,
	0, 0, 0, 0, 0, 0, 0, 139, 66, 1177,
	67, 0, 0, 2207, 0, 0, 0, 0, 0, 2214,
	0, 0, 0, 0, 2219, 0, 0, 0, 171, 0,
	0, 0, 0, 971, 0, 0, 958, 0, 0, 575,
	0, 2233, 110, 0, 0, 0, 0, 761, 74, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1987, 0, 2344, 0,
	0, 2906, 0, 0, 957, 0, 0, 0, 0, 493,
	0, 0, 0, 2631, 0, 0, 971, 0, 0, 1927,
	1927, 1927, 0, 0, 0, 172, 0, 0, 74, 0,
	0, 1432, 0, 0, 165, 0, 0, 0, 0, 2309,
	0, 0, 166, 1455, 0, 0, 0, 2631, 0, 2631,
	0, 0, 0, 2631, 0, 0, 493, 0, 493, 0,
	0, 0, 0, 138, 0, 0, 1063, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 957, 957, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 2366, 0, 1299, 1300, 716, 0,
	0, 0, 1342, 1343, 1344, 0, 729, 0, 2540, 0,
	0, 0, 0, 0, 540, 0, 0, 0, 0, 0,
	0, 1302, 2906, 0, 1348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 74, 0, 0, 0, 0, 0, 1301, 0,
	1987, 2344, 0, 0, 0, 1455, 1321, 493, 0, 0,
	0, 0, 2706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2344, 0, 0, 0, 0, 0, 0,
	2433, 1063, 0, 1063, 0, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3037, 0, 0, 1063, 0, 493,
	0, 0, 0, 0, 1324, 1325, 1326, 1327, 0, 0,
	0, 0, 0, 0, 1307, 0, 0, 2631, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 739, 739, 0,
	0, 0, 0, 0, 0, 0, 2540, 1339, 1349, 0,
	739, 1329, 1330, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 2496, 0, 0,
	1063, 1747, 0, 0, 0, 2631, 0, 2500, 1987, 0,
	2501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2506, 1337, 2906, 0, 0, 0, 0, 2512,
	1322, 0, 0, 0, 0, 0, 0, 0, 0, 2519,
	0, 0, 0, 2309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2546, 2547, 0, 2548, 2549, 2550, 0, 0,
	0, 0, 2552, 0, 0, 0, 0, 0, 0, 2554,
	958, 2823, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	2582, 2583, 0, 0, 1323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2860, 2861, 0, 0, 0, 0, 1340, 0, 0,
	2599, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1529, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 958, 0, 2625, 0,
	0, 0, 74, 0, 74, 1558, 74, 1558, 0, 0,
	0, 0, 0, 0, 0, 958, 0, 0, 0, 958,
	0, 971, 0, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1338, 0, 0, 0, 0,
	0, 0, 0, 1341, 0, 1312, 1310, 1311, 1303, 1304,
	1305, 1306, 1308, 1309, 0, 0, 0, 0, 0, 0,
	972, 729, 0, 0, 0, 0, 0, 0, 0, 958,
	958, 0, 0, 0, 0, 0, 0, 0, 957, 0,
	1655, 0, 1432, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 2697, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 957, 1701, 957, 957, 957, 0, 0,
	1707, 0, 1708, 0, 1709, 0, 1710, 0, 1711, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	2728, 0, 0, 0, 2731, 2732, 0, 0, 1720, 1105,
	0, 0, 0, 0, 0, 0, 2734, 0, 0, 0,
	2737, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 1300, 2744, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1301, 0, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 716,
	0, 0, 1318, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 1361, 0, 1364, 0, 0, 2802, 0, 0, 0,
	1371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 1325, 1326, 1327, 0, 0, 972,
	0, 0, 0, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 958, 0, 2255, 2256, 0, 2273,
	2274, 2275, 0, 1971, 0, 0, 972, 0, 0, 0,
	0, 1345, 1346, 0, 2509, 0, 0, 0, 0, 1316,
	1317, 0, 2877, 2878, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 0, 0, 0, 1322,
	0, 0, 971, 0, 2886, 2887, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 1347, 2270, 0, 0, 2894,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	958, 958, 958, 0, 0, 958, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 1453, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2098, 2929, 1328, 1125, 0, 1125,
	0, 1125, 0, 966, 966, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 2261, 0, 971, 0, 971, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 2276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 972, 971, 0, 0, 0, 0,
	2255, 2256, 0, 2273, 2274, 2275, 0, 0, 0, 0,
	2271, 0, 971, 0, 0, 0, 0, 2987, 2508, 0,
	2990, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 2156, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 2750, 0, 0,
	2270, 2749, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2165, 966, 2167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2272, 0, 0, 0, 0, 2180,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 971, 0, 971, 0, 0, 0, 0, 2261, 0,
	0, 0, 0, 3075, 3075, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3092, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 957, 0, 0, 0,
	971, 0, 0, 0, 957, 0, 2276, 0, 3075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 957, 0, 0, 2267, 2268,
	2269, 0, 0, 0, 2271, 2266, 2264, 2265, 2257, 2258,
	2259, 2260, 2262, 2263, 0, 0, 957, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3075,
	972, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 716,
	716, 972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2272, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2341, 1821, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	729, 0, 0, 0, 0, 0, 1364, 972, 0, 0,
	0, 0, 0, 0, 972, 1105, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 958, 958, 958, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 2395, 0,
	0, 0, 2267, 2268, 2269, 0, 0, 0, 0, 2266,
	2264, 2265, 2257, 2258, 2259, 2260, 2262, 2263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2413, 0, 918,
	0, 958, 0, 0, 0, 0, 2422, 0, 2424, 0,
	0, 0, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 1299, 1300, 957, 1332, 1333, 1334,
	1342, 1343, 1344, 0, 0, 957, 957, 0, 0, 0,
	0, 0, 1335, 0, 74, 0, 0, 0, 0, 1302,
	0, 0, 1348, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 74, 0, 0, 0, 0, 972, 971,
	0, 0, 0, 0, 0, 0, 1301, 0, 972, 0,
	0, 0, 0, 0, 1321, 0, 0, 0, 0, 2498,
	0, 1318, 0, 0, 0, 74, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1324, 1325, 1326, 1327, 0, 0, 0, 0,
	0, 0, 1307, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 1349, 0, 0, 1329,
	1330, 1331, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1345, 1346, 972, 0, 0, 0, 0, 0, 1316, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1337, 0, 0, 0, 0, 0, 0, 1322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1347, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 74, 0, 0, 0, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 972, 0,
	0, 958, 0, 0, 0, 1328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1323, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2672, 0, 0, 958, 0, 0,
	0, 0, 0, 0, 0, 1340, 0, 0, 0, 0,
	1821, 0, 972, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1364, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2718, 0, 966, 0, 0, 0, 0, 0, 0,
	0, 2721, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319,
	1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306,
	1308, 1309, 0, 0, 0, 0, 2238, 0, 0, 0,
	2239, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 972, 0, 972, 918, 0, 0, 0, 0, 0,
	0, 0, 918, 918, 0, 0, 918, 0, 0, 0,
	1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1335, 0,
	0, 0, 0, 0, 0, 1302, 958, 0, 1348, 0,
	972, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 1301, 0, 0, 958, 0, 0, 0, 0,
	1321, 0, 0, 0, 0, 2816, 0, 1318, 0, 0,
	0, 1105, 0, 0, 0, 0, 958, 958, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 1324, 1325,
	1326, 1327, 0, 74, 0, 0, 0, 0, 1307, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	972, 1339, 1349, 0, 0, 1329, 1330, 1331, 972, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 972, 0, 0, 1345, 1346, 0, 0,
	0, 0, 0, 0, 1316, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 2913, 0, 0, 0, 0, 958,
	1347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2950, 0, 2952, 0, 0, 0, 0, 0, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1340, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 958, 958, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3005, 918, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1338,
	3025, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312,
	1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0,
	0, 0, 0, 0, 3042, 0, 2748, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	0, 0, 0, 932, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 815, 276, 219, 220, 221, 0, 277,
	822, 0, 805, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	865, 290, 291, 808, 806, 807, 812, 810, 809, 811,
	292, 293, 497, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 0, 0, 225, 304, 305, 307, 310, 306,
	311, 312, 844, 845, 0, 866, 0, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 0,
	319, 918, 0, 867, 320, 0, 321, 847, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 817, 818, 821,
	869, 0, 819, 329, 0, 0, 0, 0, 328, 330,
	337, 0, 868, 331, 234, 333, 332, 334, 335, 336,
	235, 0, 236, 0, 338, 870, 871, 339, 340, 341,
	872, 342, 343, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 850, 873, 349, 350, 874, 0, 351, 352,
	0, 0, 353, 0, 354, 934, 933, 355, 356, 358,
	359, 357, 875, 360, 361, 363, 362, 0, 0, 876,
	0, 820, 364, 240, 365, 366, 0, 367, 368, 74,
	0, 369, 370, 0, 0, 371, 241, 877, 372, 878,
	852, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	853, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	879, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 813, 428, 409, 410, 429,
	880, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 856, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 860, 861, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 814, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 74, 469, 256, 0, 0,
	969, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 1821, 258, 259, 260, 261,
	974, 262, 975, 976, 977, 978, 214, 979, 980, 981,
	982, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 983, 269, 270, 271, 272, 273, 274, 275, 984,
	985, 276, 219, 220, 221, 986, 277, 222, 987, 959,
	988, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 989, 287, 0, 288, 289, 990, 865, 290, 291,
	991, 992, 994, 993, 995, 996, 997, 292, 293, 497,
	294, 295, 296, 223, 224, 998, 297, 999, 298, 1000,
	299, 1001, 1002, 300, 301, 1003, 302, 303, 1004, 0,
	1005, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 1006, 866, 1007, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 1008, 319, 1009, 1010,
	867, 320, 1011, 321, 229, 1012, 230, 1013, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 869, 1014, 237,
	329, 0, 0, 0, 1015, 328, 330, 337, 1016, 868,
	331, 234, 333, 332, 334, 335, 336, 235, 1017, 236,
	1018, 338, 870, 871, 339, 340, 341, 872, 342, 343,
	0, 0, 344, 345, 346, 1019, 348, 347, 1020, 238,
	873, 349, 350, 874, 1021, 351, 352, 1022, 1023, 353,
	0, 354, 934, 933, 355, 356, 358, 359, 357, 875,
	360, 361, 363, 362, 1024, 1025, 876, 1026, 239, 364,
	240, 365, 366, 1027, 367, 368, 1028, 1029, 369, 370,
	1030, 1031, 371, 241, 877, 372, 878, 242, 373, 374,
	375, 376, 377, 378, 379, 1032, 380, 243, 381, 244,
	382, 1033, 383, 384, 385, 386, 387, 388, 245, 389,
	390, 1034, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 1035, 403, 879, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 1036, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 1037, 428, 409, 410, 429, 880, 430, 247,
	431, 432, 1038, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 1039, 443, 444, 1040, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 1041,
	249, 250, 251, 453, 1042, 1043, 454, 455, 252, 253,
	1044, 456, 457, 0, 458, 459, 1045, 1046, 460, 461,
	462, 464, 1047, 465, 1048, 463, 466, 467, 468, 254,
	255, 1049, 1050, 469, 256, 1051, 1052, 1053, 1054, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 1958, 0, 0, 0, 0,
	0, 0, 0, 0, 1959, 258, 259, 260, 261, 974,
	262, 975, 976, 977, 978, 214, 979, 980, 981, 982,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	983, 269, 270, 271, 272, 273, 274, 275, 984, 985,
	276, 219, 220, 221, 986, 277, 222, 987, 959, 988,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	989, 287, 0, 288, 289, 990, 865, 290, 291, 991,
	992, 994, 993, 995, 996, 997, 292, 293, 497, 294,
	295, 296, 223, 224, 998, 297, 999, 298, 1000, 299,
	1001, 1002, 300, 301, 1003, 302, 303, 1004, 0, 1005,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	1006, 866, 1007, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 1008, 319, 1009, 1010, 867,
	320, 1011, 321, 229, 1012, 230, 1013, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 869, 1014, 237, 329,
	0, 0, 0, 1015, 328, 330, 337, 1016, 868, 331,
	234, 333, 332, 334, 335, 336, 235, 1017, 236, 1018,
	338, 870, 871, 339, 340, 341, 872, 342, 343, 0,
	0, 344, 345, 346, 1019, 348, 347, 1020, 238, 873,
	349, 350, 874, 1021, 351, 352, 1022, 1023, 353, 0,
	354, 934, 933, 355, 356, 358, 359, 357, 875, 360,
	361, 363, 362, 1024, 1025, 876, 1026, 239, 364, 240,
	365, 366, 1027, 367, 368, 1028, 1029, 369, 370, 1030,
	1031, 371, 241, 877, 372, 878, 242, 373, 374, 375,
	376, 377, 378, 379, 1032, 380, 243, 381, 244, 382,
	1033, 383, 384, 385, 386, 387, 388, 245, 389, 390,
	1034, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 1035, 403, 879, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 1036, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 1037, 428, 409, 410, 429, 880, 430, 247, 431,
	432, 1038, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 1039, 443, 444, 1040, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 1041, 249,
	250, 251, 453, 1042, 1043, 454, 455, 252, 253, 1044,
	456, 457, 0, 458, 459, 1045, 1046, 460, 461, 462,
	464, 1047, 465, 1048, 463, 466, 467, 468, 254, 255,
	1049, 1050, 469, 256, 1051, 1052, 1053, 1054, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2773, 258, 259, 260, 261, 974,
	262, 975, 976, 977, 978, 214, 979, 980, 981, 982,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	983, 269, 270, 271, 272, 273, 274, 275, 984, 985,
	276, 219, 220, 221, 986, 277, 222, 987, 959, 988,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	989, 287, 0, 288, 289, 990, 865, 290, 291, 991,
	992, 994, 993, 995, 996, 997, 292, 293, 497, 294,
	295, 296, 223, 224, 998, 297, 999, 298, 1000, 299,
	1001, 1002, 300, 301, 1003, 302, 303, 1004, 0, 1005,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	1006, 866, 1007, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 1008, 319, 1009, 1010, 867,
	320, 1011, 321, 229, 1012, 230, 1013, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 869, 1014, 237, 329,
	0, 0, 0, 1015, 328, 330, 337, 1016, 868, 331,
	234, 333, 332, 334, 335, 336, 235, 1017, 236, 1018,
	338, 870, 871, 339, 340, 341, 872, 342, 343, 0,
	0, 344, 345, 346, 1019, 348, 347, 1020, 238, 873,
	349, 350, 874, 1021, 351, 352, 1022, 1023, 353, 0,
	354, 934, 933, 355, 356, 358, 359, 357, 875, 360,
	361, 363, 362, 1024, 1025, 876, 1026, 239, 364, 240,
	365, 366, 1027, 367, 368, 1028, 1029, 369, 370, 1030,
	1031, 371, 241, 877, 372, 878, 242, 373, 374, 375,
	376, 377, 378, 379, 1032, 380, 243, 381, 244, 382,
	1033, 383, 384, 385, 386, 387, 388, 245, 389, 390,
	1034, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 1035, 403, 879, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 1036, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 1037, 428, 409, 410, 429, 880, 430, 247, 431,
	432, 1038, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 1039, 443, 444, 1040, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 1041, 249,
	250, 251, 453, 1042, 1043, 454, 455, 252, 253, 1044,
	456, 457, 0, 458, 459, 1045, 1046, 460, 461, 462,
	464, 1047, 465, 1048, 463, 466, 467, 468, 254, 255,
	1049, 1050, 469, 256, 1051, 1052, 1053, 1054, 470, 471,
	257, 472, 473, 474, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2881,
	258, 259, 260, 261, 974, 262, 975, 976, 977, 978,
	214, 979, 980, 981, 982, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 983, 269, 270, 271, 272,
	273, 274, 275, 984, 985, 276, 219, 220, 221, 986,
	277, 222, 987, 959, 988, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 989, 287, 0, 288, 289,
	990, 865, 290, 291, 991, 992, 994, 993, 995, 996,
	997, 292, 293, 497, 294, 295, 296, 223, 224, 998,
	297, 999, 298, 1000, 299, 1001, 1002, 300, 301, 1003,
	302, 303, 1004, 0, 1005, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 1006, 866, 1007, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	1008, 319, 1009, 1010, 867, 320, 1011, 321, 229, 1012,
	230, 1013, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 869, 1014, 237, 329, 0, 0, 0, 1015, 328,
	330, 337, 1016, 868, 331, 234, 333, 332, 334, 335,
	336, 235, 1017, 236, 1018, 338, 870, 871, 339, 340,
	341, 872, 342, 343, 0, 0, 344, 345, 346, 1019,
	348, 347, 1020, 238, 873, 349, 350, 874, 1021, 351,
	352, 1022, 1023, 353, 0, 354, 934, 933, 355, 356,
	358, 359, 357, 875, 360, 361, 363, 362, 1024, 1025,
	876, 1026, 239, 364, 240, 365, 366, 1027, 367, 368,
	1028, 1029, 369, 370, 1030, 1031, 371, 241, 877, 372,
	878, 242, 373, 374, 375, 376, 377, 378, 379, 1032,
	380, 243, 381, 244, 382, 1033, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 1034, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 1035,
	403, 879, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 1036, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 1037, 428, 409, 410,
	429, 880, 430, 247, 431, 432, 1038, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 1039,
	443, 444, 1040, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 1041, 249, 250, 251, 453, 1042, 1043,
	454, 455, 252, 253, 1044, 456, 457, 0, 458, 459,
	1045, 1046, 460, 461, 462, 464, 1047, 465, 1048, 463,
	466, 467, 468, 254, 255, 1049, 1050, 469, 256, 1051,
	1052, 1053, 1054, 470, 471, 257, 472, 473, 474, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2522, 258, 259, 260, 261, 974,
	262, 975, 976, 977, 978, 214, 979, 980, 981, 982,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	983, 269, 270, 271, 272, 273, 274, 275, 984, 985,
	276, 219, 220, 221, 986, 277, 222, 987, 959, 988,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	989, 287, 0, 288, 289, 990, 865, 290, 291, 991,
	992, 994, 993, 995, 996, 997, 292, 293, 497, 294,
	295, 296, 223, 224, 998, 297, 999, 298, 1000, 299,
	1001, 1002, 300, 301, 1003, 302, 303, 1004, 0, 1005,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	1006, 866, 1007, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 1008, 319, 1009, 1010, 867,
	320, 1011, 321, 229, 1012, 230, 1013, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 869, 1014, 237, 329,
	0, 0, 0, 1015, 328, 330, 337, 1016, 868, 331,
	234, 333, 332, 334, 335, 336, 235, 1017, 236, 1018,
	338, 870, 871, 339, 340, 341, 872, 342, 343, 0,
	0, 344, 345, 346, 1019, 348, 347, 1020, 238, 873,
	349, 350, 874, 1021, 351, 352, 1022, 1023, 353, 0,
	354, 934, 933, 355, 356, 358, 359, 357, 875, 360,
	361, 363, 362, 1024, 1025, 876, 1026, 239, 364, 240,
	365, 366, 1027, 367, 368, 1028, 1029, 369, 370, 1030,
	1031, 371, 241, 877, 372, 878, 242, 373, 374, 375,
	376, 377, 378, 379, 1032, 380, 243, 381, 244, 382,
	1033, 383, 384, 385, 386, 387, 388, 245, 389, 390,
	1034, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 1035, 403, 879, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 1036, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 1037, 428, 409, 410, 429, 880, 430, 247, 431,
	432, 1038, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 1039, 443, 444, 1040, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 1041, 249,
	250, 251, 453, 1042, 1043, 454, 455, 252, 253, 1044,
	456, 457, 0, 458, 459, 1045, 1046, 460, 461, 462,
	464, 1047, 465, 1048, 463, 466, 467, 468, 254, 255,
	1049, 1050, 469, 256, 1051, 1052, 1053, 1054, 470, 471,
	257, 472, 473, 474, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2513,
	258, 259, 260, 261, 974, 262, 975, 976, 977, 978,
	214, 979, 980, 981, 982, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 983, 269, 270, 271, 272,
	273, 274, 275, 984, 985, 276, 219, 220, 221, 986,
	277, 222, 987, 959, 988, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 989, 287, 0, 288, 289,
	990, 865, 290, 291, 991, 992, 994, 993, 995, 996,
	997, 292, 293, 497, 294, 295, 296, 223, 224, 998,
	297, 999, 298, 1000, 299, 1001, 1002, 300, 301, 1003,
	302, 303, 1004, 0, 1005, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 1006, 866, 1007, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	1008, 319, 1009, 1010, 867, 320, 1011, 321, 229, 1012,
	230, 1013, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 869, 1014, 237, 329, 0, 0, 0, 1015, 328,
	330, 337, 1016, 868, 331, 234, 333, 332, 334, 335,
	336, 235, 1017, 236, 1018, 338, 870, 871, 339, 340,
	341, 872, 342, 343, 0, 0, 344, 345, 346, 1019,
	348, 347, 1020, 238, 873, 349, 350, 874, 1021, 351,
	352, 1022, 1023, 353, 0, 354, 934, 933, 355, 356,
	358, 359, 357, 875, 360, 361, 363, 362, 1024, 1025,
	876, 1026, 239, 364, 240, 365, 366, 1027, 367, 368,
	1028, 1029, 369, 370, 1030, 1031, 371, 241, 877, 372,
	878, 242, 373, 374, 375, 376, 377, 378, 379, 1032,
	380, 243, 381, 244, 382, 1033, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 1034, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 1035,
	403, 879, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 1036, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 1037, 428, 409, 410,
	429, 880, 430, 247, 431, 432, 1038, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 1039,
	443, 444, 1040, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 1041, 249, 250, 251, 453, 1042, 1043,
	454, 455, 252, 253, 1044, 456, 457, 0, 458, 459,
	1045, 1046, 460, 461, 462, 464, 1047, 465, 1048, 463,
	466, 467, 468, 254, 255, 1049, 1050, 469, 256, 1051,
	1052, 1053, 1054, 470, 471, 257, 472, 473, 474, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2399, 258, 259, 260, 261, 974,
	262, 975, 976, 977, 978, 214, 979, 980, 981, 982,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	983, 269, 270, 271, 272, 273, 274, 275, 984, 985,
	276, 219, 220, 221, 986, 277, 222, 987, 959, 988,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	989, 287, 0, 288, 289, 990, 865, 290, 291, 991,
	992, 994, 993, 995, 996, 997, 292, 293, 497, 294,
	295, 296, 223, 224, 998, 297, 999, 298, 1000, 299,
	1001, 1002, 300, 301, 1003, 302, 303, 1004, 0, 1005,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	1006, 866, 1007, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 1008, 319, 1009, 1010, 867,
	320, 1011, 321, 229, 1012, 230, 1013, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 869, 1014, 237, 329,
	0, 0, 0, 1015, 328, 330, 337, 1016, 868, 331,
	234, 333, 332, 334, 335, 336, 235, 1017, 236, 1018,
	338, 870, 871, 339, 340, 341, 872, 342, 343, 0,
	0, 344, 345, 346, 1019, 348, 347, 1020, 238, 873,
	349, 350, 874, 1021, 351, 352, 1022, 1023, 353, 0,
	354, 934, 933, 355, 356, 358, 359, 357, 875, 360,
	361, 363, 362, 1024, 1025, 876, 1026, 239, 364, 240,
	365, 366, 1027, 367, 368, 1028, 1029, 369, 370, 1030,
	1031, 371, 241, 877, 372, 878, 242, 373, 374, 375,
	376, 377, 378, 379, 1032, 380, 243, 381, 244, 382,
	1033, 383, 384, 385, 386, 387, 388, 245, 389, 390,
	1034, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 1035, 403, 879, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 1036, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 1037, 428, 409, 410, 429, 880, 430, 247, 431,
	432, 1038, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 1039, 443, 444, 1040, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 1041, 249,
	250, 251, 453, 1042, 1043, 454, 455, 252, 253, 1044,
	456, 457, 0, 458, 459, 1045, 1046, 460, 461, 462,
	464, 1047, 465, 1048, 463, 466, 467, 468, 254, 255,
	1049, 1050, 469, 256, 1051, 1052, 1053, 1054, 470, 471,
	257, 472, 473, 474, 969, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1845,
	258, 259, 260, 261, 974, 262, 975, 976, 977, 978,
	214, 979, 980, 981, 982, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 983, 269, 270, 271, 272,
	273, 274, 275, 984, 985, 276, 219, 220, 221, 986,
	277, 222, 987, 959, 988, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 989, 287, 0, 288, 289,
	990, 865, 290, 291, 991, 992, 994, 993, 995, 996,
	997, 292, 293, 497, 294, 295, 296, 223, 224, 998,
	297, 999, 298, 1000, 299, 1001, 1002, 300, 301, 1003,
	302, 303, 1004, 0, 1005, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 1006, 866, 1007, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	1008, 319, 1009, 1010, 867, 320, 1011, 321, 229, 1012,
	230, 1013, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 869, 1014, 237, 329, 0, 0, 0, 1015, 328,
	330, 337, 1016, 868, 331, 234, 333, 332, 334, 335,
	336, 235, 1017, 236, 1018, 338, 870, 871, 339, 340,
	341, 872, 342, 343, 0, 0, 344, 345, 346, 1019,
	348, 347, 1020, 238, 873, 349, 350, 874, 1021, 351,
	352, 1022, 1023, 353, 0, 354, 934, 933, 355, 356,
	358, 359, 357, 875, 360, 361, 363, 362, 1024, 1025,
	876, 1026, 239, 364, 240, 365, 366, 1027, 367, 368,
	1028, 1029, 369, 370, 1030, 1031, 371, 241, 877, 372,
	878, 242, 373, 374, 375, 376, 377, 378, 379, 1032,
	380, 243, 381, 244, 382, 1033, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 1034, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 1035,
	403, 879, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 1036, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 1037, 428, 409, 410,
	429, 880, 430, 247, 431, 432, 1038, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 1039,
	443, 444, 1040, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 1041, 249, 250, 251, 453, 1042, 1043,
	454, 455, 252, 253, 1044, 456, 457, 0, 458, 459,
	1045, 1046, 460, 461, 462, 464, 1047, 465, 1048, 463,
	466, 467, 468, 254, 255, 1049, 1050, 469, 256, 1051,
	1052, 1053, 1054, 470, 471, 257, 472, 473, 474, 969,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1521, 258, 259, 260, 261, 974,
	262, 975, 976, 977, 978, 214, 979, 980, 981, 982,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	983, 269, 270, 271, 272, 273, 274, 275, 984, 985,
	276, 219, 220, 221, 986, 277, 222, 987, 959, 988,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	989, 287, 0, 288, 289, 990, 865, 290, 291, 991,
	992, 994, 993, 995, 996, 997, 292, 293, 497, 294,
	295, 296, 223, 224, 998, 297, 999, 298, 1000, 299,
	1001, 1002, 300, 301, 1003, 302, 303, 1004, 0, 1005,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	1006, 866, 1007, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 1008, 319, 1009, 1010, 867,
	320, 1011, 321, 229, 1012, 230, 1013, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 869, 1014, 237, 329,
	0, 0, 0, 1015, 328, 330, 337, 1016, 868, 331,
	234, 333, 332, 334, 335, 336, 235, 1017, 236, 1018,
	338, 870, 871, 339, 340, 341, 872, 342, 343, 0,
	0, 344, 345, 346, 1019, 348, 347, 1020, 238, 873,
	349, 350, 874, 1021, 351, 352, 1022, 1023, 353, 0,
	354, 934, 933, 355, 356, 358, 359, 357, 875, 360,
	361, 363, 362, 1024, 1025, 876, 1026, 239, 364, 240,
	365, 366, 1027, 367, 368, 1028, 1029, 369, 370, 1030,
	1031, 371, 241, 877, 372, 878, 242, 373, 374, 375,
	376, 377, 378, 379, 1032, 380, 243, 381, 244, 382,
	1033, 383, 384, 385, 386, 387, 388, 245, 389, 390,
	1034, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 1035, 403, 879, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 1036, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 1037, 428, 409, 410, 429, 880, 430, 247, 431,
	432, 1038, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 1039, 443, 444, 1040, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 1041, 249,
	250, 251, 453, 1042, 1043, 454, 455, 252, 253, 1044,
	456, 457, 0, 458, 459, 1045, 1046, 460, 461, 462,
	464, 1047, 465, 1048, 463, 466, 467, 468, 254, 255,
	1049, 1050, 469, 256, 1051, 1052, 1053, 1054, 470, 471,
	257, 472, 473, 474, 1852, 0, 780, 768, 769, 766,
	767, 759, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 1849, 262, 0, 0,
	0, 0, 816, 762, 0, 0, 0, 263, 264, 265,
	215, 837, 800, 838, 788, 824, 839, 0, 269, 270,
	790, 789, 273, 274, 275, 763, 815, 276, 840, 841,
	221, 0, 277, 822, 0, 805, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 291, 808, 806, 807, 812,
	810, 809, 811, 292, 293, 497, 294, 825, 296, 842,
	843, 748, 297, 0, 298, 0, 299, 1850, 0, 826,
	301, 0, 302, 303, 0, 0, 0, 753, 304, 305,
	307, 310, 306, 311, 312, 844, 845, 775, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 846, 827, 828,
	0, 318, 0, 319, 0, 0, 867, 320, 0, 321,
	847, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	817, 818, 821, 869, 0, 819, 799, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 848, 803, 829,
	830, 831, 832, 849, 0, 804, 0, 338, 870, 871,
	339, 340, 341, 872, 833, 834, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 850, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 750, 749,
	355, 356, 358, 792, 357, 875, 360, 361, 363, 362,
	745, 0, 876, 776, 820, 364, 851, 365, 366, 0,
	801, 802, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 852, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 853, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 854, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 754, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 793, 794, 795, 796, 420, 426, 427, 813, 428,
	409, 410, 429, 880, 430, 855, 797, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 835, 437, 438, 439,
	856, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 791, 452, 0, 857, 858, 859, 836,
	0, 0, 454, 455, 860, 861, 774, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 814, 465,
	0, 798, 466, 467, 468, 254, 862, 1848, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 746, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 742, 743, 1851, 0, 0, 0,
	0, 0, 0, 755, 1846, 0, 0, 0, 730, 758,
	780, 768, 769, 766, 767, 759, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 816, 762, 0, 0,
	0, 263, 264, 265, 215, 837, 800, 838, 788, 824,
	839, 0, 269, 270, 790, 789, 273, 274, 275, 763,
	815, 276, 840, 841, 221, 0, 277, 822, 0, 805,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 865, 290, 291,
	808, 806, 807, 812, 810, 809, 811, 292, 293, 497,
	294, 825, 296, 842, 843, 748, 297, 0, 298, 0,
	299, 0, 0, 826, 301, 0, 302, 303, 0, 0,
	0, 753, 304, 305, 307, 310, 306, 311, 312, 844,
	845, 775, 866, 0, 0, 0, 0, 0, 313, 314,
	315, 846, 827, 828, 0, 318, 0, 319, 0, 0,
	867, 320, 0, 321, 847, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 817, 818, 821, 869, 0, 819,
	799, 0, 0, 0, 0, 328, 330, 337, 0, 868,
	331, 848, 803, 829, 830, 831, 832, 849, 0, 804,
	0, 338, 870, 871, 339, 340, 341, 872, 833, 834,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 850,
	873, 349, 350, 874, 0, 351, 352, 0, 0, 353,
	0, 354, 750, 749, 355, 356, 358, 792, 357, 875,
	360, 361, 363, 362, 745, 0, 876, 776, 820, 364,
	851, 365, 366, 0, 801, 802, 0, 0, 369, 370,
	0, 0, 371, 241, 877, 372, 878, 852, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 853, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 854, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 879, 404, 405,
	406, 407, 754, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 171, 424, 425, 793, 794, 795, 796, 420,
	426, 427, 813, 428, 409, 410, 429, 880, 430, 855,
	797, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	835, 437, 438, 439, 856, 0, 443, 444, 173, 445,
	446, 447, 448, 449, 308, 450, 309, 791, 452, 0,
	857, 858, 859, 836, 0, 0, 454, 455, 860, 861,
	774, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 814, 465, 0, 798, 466, 467, 468, 1152,
	862, 0, 0, 469, 256, 0, 0, 0, 165, 470,
	471, 257, 472, 473, 474, 746, 166, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 742, 743,
	780, 768, 769, 766, 767, 759, 0, 1368, 0, 0,
	0, 0, 0, 758, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 816, 762, 0, 0,
	0, 263, 264, 265, 215, 837, 800, 838, 788, 824,
	839, 0, 269, 270, 790, 789, 273, 274, 275, 763,
	815, 276, 840, 841, 221, 0, 277, 822, 0, 805,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 865, 290, 291,
	808, 806, 807, 812, 810, 809, 811, 292, 293, 497,
	294, 825, 296, 842, 843, 748, 297, 0, 298, 0,
	299, 0, 0, 826, 301, 0, 302, 303, 0, 0,
	0, 753, 304, 305, 307, 310, 306, 311, 312, 844,
	845, 775, 866, 0, 0, 0, 0, 0, 313, 314,
	315, 846, 827, 828, 0, 318, 0, 319, 0, 0,
	867, 320, 0, 321, 847, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 817, 818, 821, 869, 0, 819,
	799, 0, 0, 0, 0, 328, 330, 337, 0, 868,
	331, 848, 803, 829, 830, 831, 832, 849, 0, 804,
	0, 338, 870, 871, 339, 340, 341, 872, 833, 834,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 850,
	873, 349, 350, 874, 0, 351, 352, 0, 0, 353,
	0, 354, 750, 749, 355, 356, 358, 792, 357, 875,
	360, 361, 363, 362, 745, 0, 876, 776, 820, 364,
	851, 365, 366, 0, 801, 802, 0, 0, 369, 370,
	0, 0, 371, 241, 877, 372, 878, 852, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 853, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 854, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 879, 404, 405,
	406, 407, 754, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 171, 424, 425, 793, 794, 795, 796, 420,
	426, 427, 813, 428, 409, 410, 429, 880, 430, 855,
	797, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	835, 437, 438, 439, 856, 0, 443, 444, 173, 445,
	446, 447, 448, 449, 308, 450, 309, 791, 452, 0,
	857, 858, 859, 836, 0, 0, 454, 455, 860, 861,
	774, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 814, 465, 0, 798, 466, 467, 468, 1152,
	862, 0, 0, 469, 256, 0, 0, 0, 165, 470,
	471, 257, 472, 473, 474, 746, 166, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 742, 743,
	780, 768, 769, 766, 767, 759, 0, 1368, 0, 0,
	0, 0, 0, 758, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 816, 762, 0, 0,
	0, 263, 264, 265, 215, 837, 800, 838, 788, 824,
	839, 1923, 269, 270, 790, 789, 273, 274, 275, 763,
	815, 276, 840, 841, 221, 0, 277, 822, 0, 805,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 865, 290, 291,
	808, 806, 807, 812, 810, 809, 811, 292, 293, 497,
	294, 825, 296, 842, 843, 748, 297, 0, 298, 0,
	299, 0, 0, 826, 301, 0, 302, 303, 0, 0,
	0, 753, 304, 305, 307, 310, 306, 311, 312, 844,
	845, 775, 866, 0, 0, 0, 0, 0, 313, 314,
	315, 846, 827, 828, 0, 318, 0, 319, 0, 1928,
	867, 320, 0, 321, 847, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 817, 818, 821, 869, 0, 819,
	799, 0, 0, 0, 0, 328, 330, 337, 0, 868,
	331, 848, 803, 829, 830, 831, 832, 849, 0, 804,
	0, 338, 870, 871, 339, 340, 341, 872, 833, 834,
	0, 0, 344, 345, 346, 0, 348, 347, 1924, 850,
	873, 349, 350, 874, 0, 351, 352, 0, 0, 353,
	0, 354, 750, 749, 355, 356, 358, 792, 357, 875,
	360, 361, 363, 362, 745, 0, 876, 776, 820, 364,
	851, 365, 366, 0, 801, 802, 0, 0, 369, 370,
	0, 0, 371, 241, 877, 372, 878, 852, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 853, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 854, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 879, 404, 405,
	406, 407, 754, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 793, 794, 795, 796, 420,
	426, 427, 813, 428, 409, 410, 429, 880, 430, 855,
	797, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	835, 437, 438, 439, 856, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 791, 452, 0,
	857, 858, 859, 836, 0, 1925, 454, 455, 860, 861,
	774, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 814, 465, 0, 798, 466, 467, 468, 254,
	862, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 746, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 742, 743,
	780, 768, 769, 766, 767, 759, 0, 755, 0, 0,
	0, 0, 0, 758, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 816, 762, 0, 0,
	0, 263, 264, 265, 215, 837, 800, 838, 788, 824,
	839, 0, 269, 270, 790, 789, 273, 274, 275, 763,
	815, 276, 840, 841, 221, 0, 277, 822, 0, 805,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 865, 290, 291,
	808, 806, 807, 812, 810, 809, 811, 292, 293, 497,
	294, 825, 296, 842, 843, 748, 297, 0, 298, 0,
	299, 0, 0, 826, 301, 0, 302, 303, 0, 0,
	0, 753, 304, 305, 307, 310, 306, 311, 312, 844,
	845, 775, 866, 0, 0, 0, 0, 0, 313, 314,
	315, 846, 827, 828, 0, 318, 0, 319, 0, 0,
	867, 320, 0, 321, 847, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 817, 818, 821, 869, 0, 819,
	799, 0, 0, 0, 0, 328, 330, 337, 0, 868,
	331, 848, 803, 829, 830, 831, 832, 849, 0, 804,
	0, 338, 870, 871, 339, 340, 341, 872, 833, 834,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 850,
	873, 349, 350, 874, 0, 351, 352, 0, 0, 353,
	0, 354, 750, 749, 355, 356, 358, 792, 357, 875,
	360, 361, 363, 362, 745, 2689, 876, 776, 820, 364,
	851, 365, 366, 0, 801, 802, 0, 0, 369, 370,
	0, 0, 371, 241, 877, 372, 878, 852, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 853, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 854, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 879, 404, 405,
	406, 407, 754, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 793, 794, 795, 796, 420,
	426, 427, 813, 428, 409, 410, 429, 880, 430, 855,
	797, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	835, 437, 438, 439, 856, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 791, 452, 0,
	857, 858, 859, 836, 0, 0, 454, 455, 860, 861,
	774, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 814, 465, 0, 798, 466, 467, 468, 254,
	862, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 746, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 742, 743,
	1433, 780, 768, 769, 766, 767, 759, 755, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 816, 762, 0,
	0, 0, 263, 264, 265, 215, 837, 800, 838, 788,
	824, 839, 0, 269, 270, 790, 789, 273, 274, 275,
	763, 815, 276, 840, 841, 221, 0, 277, 822, 0,
	805, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 865, 290,
	291, 808, 806, 807, 812, 810, 809, 811, 292, 293,
	497, 294, 825, 296, 842, 843, 748, 297, 0, 298,
	0, 299, 0, 0, 826, 301, 0, 302, 303, 0,
	0, 0, 753, 304, 305, 307, 310, 306, 311, 312,
	844, 845, 775, 866, 0, 0, 0, 0, 0, 313,
	314, 315, 846, 827, 828, 0, 318, 0, 319, 0,
	0, 867, 320, 0, 321, 847, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 817, 818, 821, 869, 0,
	819, 799, 0, 0, 0, 1749, 328, 330, 337, 0,
	868, 331, 848, 803, 829, 830, 831, 832, 849, 0,
	804, 0, 338, 870, 871, 339, 340, 341, 872, 833,
	834, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	850, 873, 349, 350, 874, 0, 351, 352, 0, 0,
	353, 0, 354, 750, 749, 355, 356, 358, 792, 357,
	875, 360, 361, 363, 362, 745, 0, 876, 776, 820,
	364, 851, 365, 366, 0, 801, 802, 0, 0, 369,
	370, 0, 0, 371, 241, 877, 372, 878, 852, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 853, 381,
	244, 382, 1748, 383, 384, 385, 386, 387, 388, 854,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 879, 404,
	405, 406, 407, 754, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 793, 794, 795, 796,
	420, 426, 427, 813, 428, 409, 410, 429, 880, 430,
	855, 797, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 835, 437, 438, 439, 856, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 791, 452,
	0, 857, 858, 859, 836, 0, 0, 454, 455, 860,
	861, 774, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 814, 465, 0, 798, 466, 467, 468,
	254, 862, 0, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 746, 0, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 0, 0, 742,
	743, 0, 0, 0, 0, 0, 0, 0, 755, 0,
	0, 0, 0, 738, 758, 780, 768, 769, 766, 767,
	759, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 816, 762, 0, 0, 0, 263, 264, 265, 215,
	837, 800, 838, 788, 824, 839, 0, 269, 270, 790,
	789, 273, 274, 275, 763, 815, 276, 840, 841, 221,
	0, 277, 822, 0, 805, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 865, 290, 291, 808, 806, 807, 812, 810,
	809, 811, 292, 293, 497, 294, 825, 296, 842, 843,
	748, 297, 0, 298, 0, 299, 0, 0, 826, 301,
	0, 302, 303, 0, 0, 0, 753, 304, 305, 307,
	310, 306, 311, 312, 844, 845, 775, 866, 0, 0,
	0, 0, 0, 313, 314, 315, 846, 827, 828, 0,
	318, 0, 319, 0, 0, 867, 320, 0, 321, 847,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 817,
	818, 821, 869, 0, 819, 799, 0, 0, 0, 0,
	328, 330, 337, 0, 868, 331, 848, 803, 829, 830,
	831, 832, 849, 0, 804, 0, 338, 870, 871, 339,
	340, 341, 872, 833, 834, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 850, 873, 349, 350, 874, 0,
	351, 352, 0, 0, 353, 0, 354, 750, 749, 355,
	356, 358, 792, 357, 875, 360, 361, 363, 362, 745,
	0, 876, 776, 820, 364, 851, 365, 366, 0, 801,
	802, 740, 0, 369, 370, 0, 0, 371, 241, 877,
	372, 878, 852, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 853, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 854, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 879, 404, 405, 406, 407, 754, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	793, 794, 795, 796, 420, 426, 427, 813, 428, 409,
	410, 429, 880, 430, 855, 797, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 835, 437, 438, 439, 856,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 791, 452, 0, 857, 858, 859, 836, 0,
	0, 454, 455, 860, 861, 774, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 814, 465, 0,
	798, 466, 467, 468, 254, 862, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	746, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 742, 743, 780, 768, 769, 766, 767,
	759, 0, 755, 0, 0, 0, 0, 0, 758, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 816, 762, 0, 0, 0, 263, 264, 265, 215,
	837, 800, 838, 788, 824, 839, 0, 269, 270, 790,
	789, 273, 274, 275, 763, 815, 276, 840, 841, 221,
	0, 277, 822, 0, 805, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 865, 290, 291, 808, 806, 807, 812, 810,
	809, 811, 292, 293, 497, 294, 825, 296, 842, 843,
	748, 297, 0, 298, 0, 299, 0, 0, 826, 301,
	0, 302, 303, 0, 0, 0, 753, 304, 305, 307,
	310, 306, 311, 312, 844, 845, 775, 866, 0, 0,
	0, 0, 0, 313, 314, 315, 846, 827, 828, 0,
	318, 0, 319, 0, 0, 867, 320, 0, 321, 847,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 817,
	818, 821, 869, 0, 819, 799, 0, 0, 0, 0,
	328, 330, 337, 0, 868, 331, 848, 803, 829, 830,
	831, 832, 849, 0, 804, 0, 338, 870, 871, 339,
	340, 341, 872, 833, 834, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 850, 873, 349, 350, 874, 0,
	351, 352, 0, 0, 353, 0, 354, 750, 749, 355,
	356, 358, 792, 357, 875, 360, 361, 363, 362, 745,
	0, 876, 776, 820, 364, 851, 365, 366, 0, 801,
	802, 0, 0, 369, 370, 0, 0, 371, 241, 877,
	372, 878, 852, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 853, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 854, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 879, 404, 405, 406, 407, 754, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	793, 794, 795, 796, 420, 426, 427, 813, 428, 409,
	410, 429, 880, 430, 855, 797, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 835, 437, 438, 439, 856,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 791, 452, 0, 857, 858, 859, 836, 0,
	0, 454, 455, 860, 861, 774, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 814, 465, 0,
	798, 466, 467, 468, 254, 862, 2524, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	746, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 742, 743, 780, 768, 769, 766, 767,
	759, 0, 755, 0, 0, 0, 0, 0, 758, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 816, 762, 0, 0, 0, 263, 264, 265, 215,
	837, 800, 838, 788, 824, 839, 0, 269, 270, 790,
	789, 273, 274, 275, 763, 815, 276, 840, 841, 221,
	0, 277, 822, 0, 805, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 865, 290, 291, 808, 806, 807, 812, 810,
	809, 811, 292, 293, 497, 294, 825, 296, 842, 843,
	748, 297, 0, 298, 0, 299, 0, 0, 826, 301,
	0, 302, 303, 0, 0, 0, 753, 304, 305, 307,
	310, 306, 311, 312, 844, 845, 775, 866, 0, 0,
	0, 0, 0, 313, 314, 315, 846, 827, 828, 0,
	318, 0, 319, 0, 0, 867, 320, 0, 321, 847,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 817,
	818, 821, 869, 0, 819, 799, 0, 0, 0, 0,
	328, 330, 337, 0, 868, 331, 848, 803, 829, 830,
	831, 832, 849, 0, 804, 0, 338, 870, 871, 339,
	340, 341, 872, 833, 834, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 850, 873, 349, 350, 874, 0,
	351, 352, 0, 0, 353, 0, 354, 750, 749, 355,
	356, 358, 792, 357, 875, 360, 361, 363, 362, 745,
	0, 876, 776, 820, 364, 851, 365, 366, 0, 801,
	802, 740, 0, 369, 370, 0, 0, 371, 241, 877,
	372, 878, 852, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 853, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 854, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 879, 404, 405, 406, 407, 754, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	793, 794, 795, 796, 420, 426, 427, 813, 428, 409,
	410, 429, 880, 430, 855, 797, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 835, 437, 438, 439, 856,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 791, 452, 0, 857, 858, 859, 836, 0,
	0, 454, 455, 860, 861, 774, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 814, 465, 0,
	798, 466, 467, 468, 254, 862, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	746, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 742, 743, 780, 768, 769, 766, 767,
	759, 0, 755, 0, 0, 0, 0, 0, 758, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 816, 762, 0, 0, 0, 263, 264, 265, 215,
	837, 800, 838, 788, 824, 839, 0, 269, 270, 790,
	789, 273, 274, 275, 763, 815, 276, 840, 841, 221,
	0, 277, 822, 0, 805, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 865, 290, 291, 808, 806, 807, 812, 810,
	809, 811, 292, 293, 497, 294, 825, 296, 842, 843,
	748, 297, 0, 298, 0, 299, 0, 0, 826, 301,
	0, 302, 303, 0, 0, 0, 753, 304, 305, 307,
	310, 306, 311, 312, 844, 845, 775, 866, 0, 0,
	0, 0, 0, 313, 314, 315, 846, 827, 828, 0,
	318, 0, 319, 0, 0, 867, 320, 0, 321, 847,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 817,
	818, 821, 869, 0, 819, 799, 0, 0, 0, 0,
	328, 330, 337, 0, 868, 331, 848, 803, 829, 830,
	831, 832, 849, 0, 804, 0, 338, 870, 871, 339,
	340, 341, 872, 833, 834, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 850, 873, 349, 350, 874, 0,
	351, 352, 0, 0, 353, 0, 354, 750, 749, 355,
	356, 358, 792, 357, 875, 360, 361, 363, 362, 745,
	0, 876, 776, 820, 364, 851, 365, 366, 0, 801,
	802, 0, 0, 369, 370, 0, 0, 371, 241, 877,
	372, 878, 852, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 853, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 854, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 879, 404, 405, 406, 407, 754, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	793, 794, 795, 796, 420, 426, 427, 813, 428, 409,
	410, 429, 880, 430, 855, 797, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 835, 437, 438, 439, 856,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 791, 452, 0, 857, 858, 859, 836, 0,
	0, 454, 455, 860, 861, 774, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 814, 465, 0,
	798, 466, 467, 468, 254, 862, 0, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	746, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 742, 743, 1433, 780, 768, 769, 766,
	767, 759, 755, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 816, 762, 0, 0, 0, 263, 264, 265,
	215, 837, 800, 838, 788, 824, 839, 0, 269, 270,
	790, 789, 273, 274, 275, 763, 815, 276, 840, 841,
	221, 0, 277, 822, 0, 805, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 291, 808, 806, 807, 812,
	810, 809, 811, 292, 293, 497, 294, 825, 296, 842,
	843, 748, 297, 0, 298, 0, 299, 0, 0, 826,
	301, 0, 302, 303, 0, 0, 0, 753, 304, 305,
	307, 310, 306, 311, 312, 844, 845, 775, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 846, 827, 828,
	0, 318, 0, 319, 0, 1928, 867, 320, 0, 321,
	847, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	817, 818, 821, 869, 0, 819, 799, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 848, 803, 829,
	830, 831, 832, 849, 0, 804, 0, 338, 870, 871,
	339, 340, 341, 872, 833, 834, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 850, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 750, 749,
	355, 356, 358, 792, 357, 875, 360, 361, 363, 362,
	745, 0, 876, 776, 820, 364, 851, 365, 366, 0,
	801, 802, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 852, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 853, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 854, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 754, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 793, 794, 795, 796, 420, 426, 427, 813, 428,
	409, 410, 429, 880, 430, 855, 797, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 835, 437, 438, 439,
	856, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 791, 452, 0, 857, 858, 859, 836,
	0, 0, 454, 455, 860, 861, 774, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 814, 465,
	0, 798, 466, 467, 468, 254, 862, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 746, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 742, 743, 0, 0, 0, 0,
	0, 0, 0, 755, 0, 0, 0, 0, 1915, 758,
	780, 768, 769, 766, 767, 759, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 816, 762, 0, 0,
	0, 263, 264, 265, 215, 837, 800, 838, 788, 824,
	839, 0, 269, 270, 790, 789, 273, 274, 275, 763,
	815, 276, 840, 841, 221, 0, 277, 822, 0, 805,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 865, 290, 291,
	808, 806, 807, 812, 810, 809, 811, 292, 293, 497,
	294, 825, 296, 842, 843, 748, 297, 0, 298, 0,
	299, 0, 0, 826, 301, 0, 302, 303, 0, 0,
	0, 753, 304, 305, 307, 310, 306, 311, 312, 844,
	845, 775, 866, 0, 0, 0, 0, 0, 313, 314,
	315, 846, 827, 828, 0, 318, 0, 319, 0, 0,
	867, 320, 0, 321, 847, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 817, 818, 821, 869, 0, 819,
	799, 0, 0, 0, 0, 328, 330, 337, 0, 868,
	331, 848, 803, 829, 830, 831, 832, 849, 0, 804,
	0, 338, 870, 871, 339, 340, 341, 872, 833, 834,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 850,
	873, 349, 350, 874, 0, 351, 352, 0, 0, 353,
	0, 354, 750, 749, 355, 356, 358, 792, 357, 875,
	360, 361, 363, 362, 745, 0, 876, 776, 820, 364,
	851, 365, 366, 0, 801, 802, 0, 0, 369, 370,
	0, 0, 371, 241, 877, 372, 878, 852, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 853, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 854, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 879, 404, 405,
	406, 407, 754, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 793, 794, 795, 796, 420,
	426, 427, 813, 428, 409, 410, 429, 880, 430, 855,
	797, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	835, 437, 438, 439, 856, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 791, 452, 0,
	857, 858, 859, 836, 0, 0, 454, 455, 860, 861,
	774, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 814, 465, 0, 798, 466, 467, 468, 254,
	862, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 746, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 742, 743,
	0, 0, 0, 0, 0, 0, 0, 755, 0, 0,
	0, 0, 1904, 758, 780, 768, 769, 766, 767, 759,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	816, 762, 0, 0, 0, 263, 264, 265, 215, 837,
	800, 838, 788, 824, 839, 0, 269, 270, 790, 789,
	273, 274, 275, 763, 815, 276, 840, 841, 221, 0,
	277, 822, 0, 805, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 865, 290, 291, 808, 806, 807, 812, 810, 809,
	811, 292, 293, 497, 294, 825, 296, 842, 843, 748,
	297, 0, 298, 0, 299, 0, 0, 826, 301, 0,
	302, 303, 0, 0, 0, 753, 304, 305, 307, 310,
	306, 311, 312, 844, 845, 775, 866, 0, 0, 0,
	0, 0, 313, 314, 315, 846, 827, 828, 0, 318,
	0, 319, 0, 0, 867, 320, 0, 321, 847, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 817, 818,
	821, 869, 0, 819, 799, 0, 0, 0, 0, 328,
	330, 337, 0, 868, 331, 848, 803, 829, 830, 831,
	832, 849, 0, 804, 0, 338, 870, 871, 339, 340,
	341, 872, 833, 834, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 850, 873, 349, 350, 874, 0, 351,
	352, 0, 0, 353, 0, 354, 750, 749, 355, 356,
	358, 792, 357, 875, 360, 361, 363, 362, 745, 0,
	876, 776, 820, 364, 851, 365, 366, 0, 801, 802,
	0, 0, 369, 370, 0, 0, 371, 241, 877, 372,
	878, 852, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 853, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 854, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 879, 404, 405, 406, 407, 754, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 793,
	794, 795, 796, 420, 426, 427, 813, 428, 409, 410,
	429, 880, 430, 855, 797, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 835, 437, 438, 439, 856, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 791, 452, 0, 857, 858, 859, 836, 0, 0,
	454, 455, 860, 861, 774, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 814, 465, 0, 798,
	466, 467, 468, 254, 862, 0, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 746,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 742, 743, 0, 0, 0, 0, 0, 0,
	0, 755, 0, 0, 0, 0, 1902, 758, 780, 768,
	769, 766, 767, 759, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 816, 762, 0, 0, 0, 263,
	264, 265, 215, 837, 800, 838, 788, 824, 839, 0,
	269, 270, 790, 789, 273, 274, 275, 763, 815, 276,
	840, 841, 221, 0, 277, 822, 0, 805, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 865, 290, 291, 808, 806,
	807, 812, 810, 809, 811, 292, 293, 497, 294, 825,
	296, 842, 843, 748, 297, 0, 298, 0, 299, 0,
	0, 826, 301, 0, 302, 303, 0, 0, 0, 753,
	304, 305, 307, 310, 306, 311, 312, 844, 845, 775,
	866, 0, 0, 0, 0, 0, 313, 314, 315, 846,
	827, 828, 0, 318, 0, 319, 0, 0, 867, 320,
	0, 321, 847, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 817, 818, 821, 869, 0, 819, 799, 0,
	0, 0, 0, 328, 330, 337, 0, 868, 331, 848,
	803, 829, 830, 831, 832, 849, 0, 804, 0, 338,
	870, 871, 339, 340, 341, 872, 833, 834, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 850, 873, 349,
	350, 874, 0, 351, 352, 0, 0, 353, 0, 354,
	750, 749, 355, 356, 358, 792, 357, 875, 360, 361,
	363, 362, 745, 0, 876, 776, 820, 364, 851, 365,
	366, 0, 801, 802, 0, 0, 369, 370, 0, 0,
	371, 241, 877, 372, 878, 852, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 853, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 388, 854, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 879, 404, 405, 406, 407,
	754, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 793, 794, 795, 796, 420, 426, 427,
	813, 428, 409, 410, 429, 880, 430, 855, 797, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 835, 437,
	438, 439, 856, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 791, 452, 0, 857, 858,
	859, 836, 0, 0, 454, 455, 860, 861, 774, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	814, 465, 0, 798, 466, 467, 468, 254, 862, 0,
	0, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 746, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 742, 743, 0, 0,
	0, 0, 0, 0, 0, 755, 0, 0, 0, 0,
	1900, 758, 780, 768, 769, 766, 767, 759, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 816, 762,
	0, 0, 0, 263, 264, 265, 215, 837, 800, 838,
	788, 824, 839, 0, 269, 270, 790, 789, 273, 274,
	275, 763, 815, 276, 840, 841, 221, 0, 277, 822,
	0, 805, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 865,
	290, 291, 808, 806, 807, 812, 810, 809, 811, 292,
	293, 497, 294, 825, 296, 842, 843, 748, 297, 0,
	298, 0, 299, 0, 0, 826, 301, 0, 302, 303,
	0, 0, 0, 753, 304, 305, 307, 310, 306, 311,
	312, 844, 845, 775, 866, 0, 0, 0, 0, 0,
	313, 314, 315, 846, 827, 828, 0, 318, 0, 319,
	0, 0, 867, 320, 0, 321, 847, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 817, 818, 821, 869,
	0, 819, 799, 0, 0, 0, 0, 328, 330, 337,
	0, 868, 331, 848, 803, 829, 830, 831, 832, 849,
	0, 804, 0, 338, 870, 871, 339, 340, 341, 872,
	833, 834, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 850, 873, 349, 350, 874, 0, 351, 352, 0,
	0, 353, 0, 354, 750, 749, 355, 356, 358, 792,
	357, 875, 360, 361, 363, 362, 745, 0, 876, 776,
	820, 364, 851, 365, 366, 0, 801, 802, 0, 0,
	369, 370, 0, 0, 371, 241, 877, 372, 878, 852,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 853,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 388,
	854, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 879,
	404, 405, 406, 407, 754, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 793, 794, 795,
	796, 420, 426, 427, 813, 428, 409, 410, 429, 880,
	430, 855, 797, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 835, 437, 438, 439, 856, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 791,
	452, 0, 857, 858, 859, 836, 0, 0, 454, 455,
	860, 861, 774, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 814, 465, 0, 798, 466, 467,
	468, 254, 862, 0, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 746, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	742, 743, 0, 0, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 1897, 758, 1889, 768, 769, 766,
	767, 759, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 816, 762, 0, 0, 0, 263, 264, 265,
	215, 837, 800, 838, 788, 824, 839, 0, 269, 270,
	790, 789, 273, 274, 275, 763, 815, 276, 840, 841,
	221, 0, 277, 822, 0, 805, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 291, 808, 806, 807, 812,
	810, 809, 811, 292, 293, 497, 294, 825, 1892, 842,
	843, 748, 297, 0, 298, 0, 299, 0, 0, 826,
	301, 0, 302, 303, 0, 0, 0, 753, 304, 305,
	307, 310, 306, 311, 312, 844, 845, 775, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 846, 827, 828,
	0, 318, 0, 319, 0, 0, 867, 320, 0, 321,
	847, 0, 230, 0, 322, 323, 1893, 325, 326, 327,
	817, 818, 821, 869, 0, 819, 799, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 848, 803, 829,
	830, 831, 832, 849, 0, 804, 0, 338, 870, 871,
	339, 340, 341, 872, 833, 834, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 850, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 750, 749,
	1894, 1891, 358, 792, 357, 875, 360, 361, 363, 362,
	745, 0, 876, 776, 820, 364, 851, 365, 366, 0,
	801, 802, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 852, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 853, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 854, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 754, 408,
	0, 412, 413, 414, 415, 416, 417, 1895, 0, 424,
	425, 793, 794, 795, 796, 420, 426, 427, 813, 428,
	409, 410, 429, 880, 430, 855, 797, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 835, 437, 438, 439,
	856, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 791, 452, 0, 857, 858, 859, 836,
	0, 0, 454, 455, 860, 861, 774, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 814, 465,
	0, 798, 466, 467, 468, 254, 862, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 1890,
	474, 746, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 742, 743, 0, 0, 0, 0,
	0, 0, 0, 755, 0, 0, 0, 0, 1886, 758,
	1889, 768, 769, 766, 767, 759, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 816, 762, 0, 0,
	0, 263, 264, 265, 215, 837, 800, 838, 788, 824,
	839, 0, 269, 270, 790, 789, 273, 274, 275, 763,
	815, 276, 840, 841, 221, 0, 277, 822, 0, 805,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 865, 290, 291,
	808, 806, 807, 812, 810, 809, 811, 292, 293, 497,
	294, 825, 1892, 842, 843, 748, 297, 0, 298, 0,
	299, 0, 0, 826, 301, 0, 302, 303, 0, 0,
	0, 753, 304, 305, 307, 310, 306, 311, 312, 844,
	845, 775, 866, 0, 0, 0, 0, 0, 313, 314,
	315, 846, 827, 828, 0, 318, 0, 319, 0, 0,
	867, 320, 0, 321, 847, 0, 230, 0, 322, 323,
	1893, 325, 326, 327, 817, 818, 821, 869, 0, 819,
	799, 0, 0, 0, 0, 328, 330, 337, 0, 868,
	331, 848, 803, 829, 830, 831, 832, 849, 0, 804,
	0, 338, 870, 871, 339, 340, 341, 872, 833, 834,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 850,
	873, 349, 350, 874, 0, 351, 352, 0, 0, 353,
	0, 354, 750, 749, 1894, 1891, 358, 792, 357, 875,
	360, 361, 363, 362, 745, 0, 876, 776, 820, 364,
	851, 365, 366, 0, 801, 802, 0, 0, 369, 370,
	0, 0, 371, 241, 877, 372, 878, 852, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 853, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 854, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 879, 404, 405,
	406, 407, 754, 408, 0, 412, 413, 414, 415, 416,
	417, 1895, 0, 424, 425, 793, 794, 795, 796, 420,
	426, 427, 813, 428, 409, 410, 429, 880, 430, 855,
	797, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	835, 437, 438, 439, 856, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 791, 452, 0,
	857, 858, 859, 836, 0, 0, 454, 455, 860, 861,
	774, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 814, 465, 0, 798, 466, 467, 468, 254,
	862, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 1890, 474, 746, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 742, 743,
	780, 768, 769, 766, 767, 759, 0, 755, 0, 0,
	0, 0, 0, 758, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 816, 762, 0, 0,
	0, 263, 264, 265, 215, 837, 800, 838, 788, 824,
	839, 0, 269, 270, 790, 789, 273, 274, 275, 763,
	815, 276, 840, 841, 221, 0, 277, 822, 0, 805,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 865, 290, 291,
	808, 806, 807, 812, 810, 809, 811, 292, 293, 497,
	294, 825, 296, 842, 843, 748, 297, 0, 298, 0,
	299, 0, 0, 826, 301, 0, 302, 303, 0, 0,
	0, 753, 304, 305, 307, 310, 306, 311, 312, 844,
	845, 775, 866, 0, 0, 0, 0, 0, 313, 314,
	315, 846, 827, 828, 0, 318, 0, 319, 0, 0,
	867, 320, 0, 321, 847, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 817, 818, 821, 869, 0, 819,
	799, 0, 0, 0, 0, 328, 330, 337, 0, 868,
	331, 848, 803, 829, 830, 831, 832, 849, 0, 804,
	0, 338, 870, 871, 339, 340, 341, 872, 833, 834,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 850,
	873, 349, 350, 874, 0, 351, 352, 0, 0, 353,
	0, 354, 750, 749, 355, 356, 358, 792, 357, 875,
	360, 361, 363, 362, 745, 0, 876, 776, 820, 364,
	851, 365, 366, 0, 801, 802, 0, 0, 369, 370,
	0, 0, 371, 241, 877, 372, 878, 852, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 853, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 854, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 879, 404, 405,
	406, 407, 754, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 793, 794, 795, 796, 420,
	426, 427, 813, 428, 409, 410, 429, 880, 430, 855,
	797, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	835, 437, 438, 439, 856, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 791, 452, 0,
	857, 858, 859, 836, 0, 0, 454, 455, 860, 861,
	774, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 814, 465, 0, 798, 466, 467, 468, 254,
	862, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 746, 0, 0, 0, 0,
	0, 0, 0, 744, 0, 0, 0, 0, 742, 743,
	0, 0, 0, 0, 0, 1373, 0, 755, 0, 0,
	0, 0, 0, 758, 780, 768, 769, 766, 767, 759,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 1736, 262, 0, 0, 0, 0,
	816, 762, 0, 0, 0, 263, 264, 265, 215, 837,
	800, 838, 788, 824, 839, 0, 269, 270, 790, 789,
	273, 274, 275, 763, 815, 276, 840, 841, 221, 0,
	277, 822, 0, 805, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 865, 290, 291, 808, 806, 807, 812, 810, 809,
	811, 292, 293, 497, 294, 825, 296, 842, 843, 748,
	297, 0, 298, 0, 299, 0, 0, 826, 301, 0,
	302, 303, 0, 0, 0, 753, 304, 305, 307, 310,
	306, 311, 312, 844, 845, 775, 866, 0, 0, 0,
	0, 0, 313, 314, 315, 846, 827, 828, 0, 318,
	0, 319, 0, 0, 867, 320, 0, 321, 847, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 817, 818,
	821, 869, 0, 819, 799, 0, 0, 0, 0, 328,
	330, 337, 0, 868, 331, 848, 803, 829, 830, 831,
	832, 849, 0, 804, 0, 338, 870, 871, 339, 340,
	341, 872, 833, 834, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 850, 873, 349, 350, 874, 0, 351,
	352, 0, 0, 353, 0, 354, 750, 749, 355, 356,
	358, 792, 357, 875, 360, 361, 363, 362, 745, 0,
	876, 776, 820, 364, 851, 365, 366, 0, 801, 802,
	0, 0, 369, 370, 0, 0, 371, 241, 877, 372,
	878, 852, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 853, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 854, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 879, 404, 405, 406, 407, 754, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 793,
	794, 795, 796, 420, 426, 427, 813, 428, 409, 410,
	429, 880, 430, 855, 797, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 835, 437, 438, 439, 856, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 791, 452, 0, 857, 858, 859, 836, 0, 0,
	454, 455, 860, 861, 774, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 814, 465, 0, 798,
	466, 467, 468, 254, 862, 0, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 746,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 742, 743, 0, 0, 0, 0, 0, 0,
	0, 755, 0, 0, 0, 0, 1077, 758, 780, 768,
	769, 766, 767, 759, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 816, 762, 0, 0, 0, 263,
	264, 265, 215, 837, 800, 838, 788, 824, 839, 0,
	269, 270, 790, 789, 273, 274, 275, 763, 815, 276,
	840, 841, 221, 0, 277, 822, 0, 805, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 865, 290, 291, 808, 806,
	807, 812, 810, 809, 811, 292, 293, 497, 294, 825,
	296, 842, 843, 748, 297, 0, 298, 0, 299, 0,
	0, 826, 301, 0, 302, 303, 0, 0, 0, 753,
	304, 305, 307, 310, 306, 311, 312, 844, 845, 775,
	866, 0, 0, 0, 0, 0, 313, 314, 315, 846,
	827, 828, 0, 318, 0, 319, 0, 0, 867, 320,
	0, 321, 847, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1076, 818, 821, 869, 0, 819, 799, 0,
	0, 0, 0, 328, 330, 337, 0, 868, 331, 848,
	803, 829, 830, 831, 832, 849, 0, 804, 0, 338,
	870, 871, 339, 340, 341, 872, 833, 834, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 850, 873, 349,
	350, 874, 0, 351, 352, 0, 0, 353, 0, 354,
	750, 749, 355, 356, 358, 792, 357, 875, 360, 361,
	363, 362, 745, 0, 876, 776, 820, 364, 851, 365,
	366, 0, 801, 802, 0, 0, 369, 370, 0, 0,
	371, 241, 877, 372, 878, 852, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 853, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 388, 854, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 879, 404, 405, 406, 407,
	754, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 793, 794, 795, 796, 420, 426, 427,
	813, 428, 409, 410, 429, 880, 430, 855, 797, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 835, 437,
	438, 439, 856, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 791, 452, 0, 857, 858,
	859, 836, 0, 0, 454, 455, 860, 861, 774, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	814, 465, 0, 798, 466, 467, 468, 254, 862, 0,
	0, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 746, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 0, 0, 742, 743, 0, 0,
	0, 0, 0, 0, 0, 755, 0, 0, 0, 0,
	1071, 758, 780, 768, 769, 766, 767, 759, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 816, 762,
	0, 0, 0, 263, 264, 265, 215, 837, 800, 838,
	788, 824, 839, 0, 269, 270, 790, 789, 273, 274,
	275, 763, 815, 276, 840, 841, 221, 0, 277, 822,
	0, 805, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 865,
	290, 291, 808, 806, 807, 812, 810, 809, 811, 292,
	293, 497, 294, 825, 296, 842, 843, 748, 297, 0,
	298, 0, 299, 0, 0, 826, 301, 0, 302, 303,
	0, 0, 0, 753, 304, 305, 307, 310, 306, 311,
	312, 844, 845, 775, 866, 0, 0, 0, 0, 0,
	313, 314, 315, 846, 827, 828, 0, 318, 0, 319,
	0, 0, 867, 320, 0, 321, 847, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1070, 818, 821, 869,
	0, 819, 799, 0, 0, 0, 0, 328, 330, 337,
	0, 868, 331, 848, 803, 829, 830, 831, 832, 849,
	0, 804, 0, 338, 870, 871, 339, 340, 341, 872,
	833, 834, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 850, 873, 349, 350, 874, 0, 351, 352, 0,
	0, 353, 0, 354, 750, 749, 355, 356, 358, 792,
	357, 875, 360, 361, 363, 362, 745, 0, 876, 776,
	820, 364, 851, 365, 366, 0, 801, 802, 0, 0,
	369, 370, 0, 0, 371, 241, 877, 372, 878, 852,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 853,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 388,
	854, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 879,
	404, 405, 406, 407, 754, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 793, 794, 795,
	796, 420, 426, 427, 813, 428, 409, 410, 429, 880,
	430, 855, 797, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 835, 437, 438, 439, 856, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 791,
	452, 0, 857, 858, 859, 836, 0, 0, 454, 455,
	860, 861, 774, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 814, 465, 0, 798, 466, 467,
	468, 254, 862, 0, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 746, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	742, 743, 0, 0, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 0, 1066, 758, 780, 768, 769, 766,
	767, 759, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 816, 762, 0, 0, 0, 263, 264, 265,
	215, 837, 800, 838, 788, 824, 839, 0, 269, 270,
	790, 789, 273, 274, 275, 763, 815, 276, 840, 841,
	221, 0, 277, 822, 0, 805, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 291, 808, 806, 807, 812,
	810, 809, 811, 292, 293, 497, 294, 825, 296, 842,
	843, 748, 297, 0, 298, 0, 299, 0, 0, 826,
	301, 0, 302, 303, 0, 0, 0, 753, 304, 305,
	307, 310, 306, 311, 312, 844, 845, 775, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 846, 827, 828,
	0, 318, 0, 319, 0, 0, 867, 320, 0, 321,
	847, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	817, 818, 821, 869, 0, 819, 799, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 848, 803, 829,
	830, 831, 832, 849, 0, 804, 0, 338, 870, 871,
	339, 340, 341, 872, 833, 834, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 850, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 750, 749,
	355, 356, 358, 792, 357, 875, 360, 361, 363, 362,
	745, 0, 876, 776, 820, 364, 851, 365, 366, 0,
	801, 802, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 852, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 853, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 854, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 754, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 793, 794, 795, 796, 420, 426, 427, 813, 428,
	409, 410, 429, 880, 430, 855, 797, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 835, 437, 438, 439,
	856, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 791, 452, 0, 857, 858, 859, 836,
	0, 0, 454, 455, 860, 861, 774, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 814, 465,
	0, 798, 466, 467, 468, 254, 862, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 746, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 742, 743, 780, 768, 769, 766,
	767, 759, 0, 755, 0, 0, 0, 0, 0, 758,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 816, 762, 0, 0, 0, 263, 264, 265,
	215, 837, 800, 838, 788, 824, 839, 0, 269, 270,
	790, 789, 273, 274, 275, 763, 815, 276, 840, 841,
	221, 0, 277, 822, 0, 805, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 291, 808, 806, 807, 812,
	810, 809, 811, 292, 293, 497, 294, 825, 296, 842,
	843, 748, 297, 0, 298, 0, 299, 0, 0, 826,
	301, 0, 302, 303, 0, 0, 0, 753, 304, 305,
	307, 310, 306, 311, 312, 844, 845, 775, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 846, 827, 828,
	0, 318, 0, 319, 0, 0, 867, 320, 0, 321,
	847, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	817, 818, 821, 869, 0, 819, 799, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 848, 803, 829,
	830, 831, 832, 849, 0, 804, 0, 338, 870, 871,
	339, 340, 341, 872, 833, 834, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 850, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 750, 749,
	355, 356, 358, 792, 357, 875, 360, 361, 363, 362,
	745, 0, 876, 776, 820, 364, 851, 365, 366, 0,
	801, 802, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 852, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 853, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 854, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 754, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 793, 794, 795, 796, 420, 426, 427, 813, 428,
	409, 410, 429, 880, 430, 855, 797, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 835, 437, 438, 439,
	856, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 791, 452, 0, 857, 858, 859, 836,
	0, 0, 454, 455, 860, 861, 774, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 814, 465,
	0, 798, 466, 467, 468, 254, 862, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 746, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 742, 743, 780, 768, 769, 766,
	767, 759, 0, 755, 0, 0, 0, 0, 0, 758,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 816, 762, 0, 0, 0, 263, 264, 265,
	215, 837, 800, 838, 788, 824, 839, 0, 269, 270,
	790, 789, 273, 274, 275, 763, 815, 276, 840, 841,
	221, 0, 277, 822, 0, 805, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 3074, 808, 806, 807, 812,
	810, 809, 811, 292, 293, 497, 294, 825, 296, 842,
	843, 748, 297, 0, 298, 0, 299, 0, 0, 826,
	301, 0, 302, 303, 0, 0, 0, 753, 304, 305,
	307, 310, 306, 311, 312, 844, 845, 775, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 846, 827, 828,
	0, 318, 0, 319, 0, 0, 867, 320, 0, 321,
	847, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	817, 818, 821, 869, 0, 819, 799, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 848, 803, 829,
	830, 831, 832, 849, 0, 804, 0, 338, 870, 871,
	339, 340, 341, 872, 833, 834, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 850, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 750, 749,
	355, 356, 358, 792, 357, 875, 360, 361, 363, 362,
	745, 0, 876, 776, 820, 364, 851, 365, 366, 0,
	801, 802, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 852, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 853, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 854, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 754, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 793, 794, 795, 796, 420, 426, 427, 813, 428,
	409, 410, 429, 880, 430, 855, 797, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 835, 437, 438, 439,
	856, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 791, 452, 0, 857, 858, 859, 836,
	0, 0, 454, 455, 860, 861, 774, 456, 457, 0,
	3073, 459, 0, 0, 460, 461, 462, 464, 814, 465,
	0, 798, 466, 467, 468, 254, 862, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 746, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 742, 743, 780, 768, 769, 766,
	767, 759, 0, 755, 0, 0, 0, 0, 0, 758,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 816, 762, 0, 0, 0, 263, 264, 265,
	3072, 837, 800, 838, 788, 824, 839, 0, 269, 270,
	790, 789, 273, 274, 275, 763, 815, 276, 840, 841,
	221, 0, 277, 822, 0, 805, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 3074, 808, 806, 807, 812,
	810, 809, 811, 292, 293, 497, 294, 825, 296, 842,
	843, 748, 297, 0, 298, 0, 299, 0, 0, 826,
	301, 0, 302, 303, 0, 0, 0, 753, 304, 305,
	307, 310, 306, 311, 312, 844, 845, 775, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 846, 827, 828,
	0, 318, 0, 319, 0, 0, 867, 320, 0, 321,
	847, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	817, 818, 821, 869, 0, 819, 799, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 848, 803, 829,
	830, 831, 832, 849, 0, 804, 0, 338, 870, 871,
	339, 340, 341, 872, 833, 834, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 850, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 750, 749,
	355, 356, 358, 792, 357, 875, 360, 361, 363, 362,
	745, 0, 876, 776, 820, 364, 851, 365, 366, 0,
	801, 802, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 852, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 853, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 854, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 754, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 793, 794, 795, 796, 420, 426, 427, 813, 428,
	409, 410, 429, 880, 430, 855, 797, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 835, 437, 438, 439,
	856, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 791, 452, 0, 857, 858, 859, 836,
	0, 0, 454, 455, 860, 861, 774, 456, 457, 0,
	3073, 459, 0, 0, 460, 461, 462, 464, 814, 465,
	0, 798, 466, 467, 468, 254, 862, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 746, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 742, 743, 780, 768, 769, 766,
	767, 759, 0, 755, 0, 0, 0, 0, 0, 758,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 816, 762, 0, 0, 0, 263, 264, 265,
	215, 837, 800, 838, 788, 824, 839, 0, 269, 270,
	790, 789, 273, 274, 275, 763, 815, 276, 840, 841,
	221, 0, 277, 822, 0, 805, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 291, 808, 806, 807, 812,
	810, 809, 811, 292, 293, 497, 294, 825, 296, 842,
	843, 0, 297, 0, 298, 0, 299, 0, 0, 826,
	301, 0, 302, 303, 0, 0, 0, 753, 304, 305,
	307, 310, 306, 311, 312, 844, 845, 775, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 846, 827, 828,
	0, 318, 0, 319, 0, 0, 867, 320, 0, 321,
	847, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	817, 818, 821, 869, 0, 819, 799, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 848, 803, 829,
	830, 831, 832, 849, 0, 804, 0, 338, 870, 871,
	339, 340, 341, 872, 833, 834, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 850, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 934, 933,
	355, 356, 358, 792, 357, 875, 360, 361, 363, 362,
	0, 0, 876, 776, 820, 364, 851, 365, 366, 0,
	801, 802, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 852, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 853, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 854, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 754, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 793, 794, 795, 796, 420, 426, 427, 813, 428,
	409, 410, 429, 880, 430, 855, 797, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 835, 437, 438, 439,
	856, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 791, 452, 0, 857, 858, 859, 836,
	0, 0, 454, 455, 860, 861, 774, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 814, 465,
	0, 798, 466, 467, 468, 254, 862, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 780, 768, 769, 766, 767, 759, 0, 0, 1912,
	0, 0, 0, 0, 1910, 1911, 0, 258, 259, 260,
	261, 0, 262, 755, 0, 0, 0, 816, 762, 758,
	0, 0, 263, 264, 265, 0, 837, 800, 838, 788,
	824, 839, 0, 269, 270, 790, 789, 273, 274, 275,
	763, 815, 276, 840, 841, 221, 0, 277, 822, 0,
	805, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 865, 290,
	3074, 808, 806, 807, 812, 810, 809, 811, 292, 293,
	497, 294, 825, 296, 842, 843, 748, 297, 0, 298,
	0, 299, 0, 0, 826, 301, 0, 302, 303, 0,
	0, 0, 753, 304, 305, 307, 310, 306, 311, 312,
	844, 845, 775, 866, 0, 0, 0, 0, 0, 313,
	314, 315, 846, 827, 828, 0, 318, 0, 319, 0,
	0, 867, 320, 0, 321, 847, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 817, 818, 821, 0, 0,
	819, 799, 0, 0, 0, 0, 328, 330, 337, 0,
	868, 331, 848, 803, 829, 830, 831, 832, 849, 0,
	804, 0, 338, 0, 0, 339, 340, 341, 872, 833,
	834, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	850, 873, 349, 350, 0, 0, 351, 352, 0, 0,
	353, 0, 354, 750, 749, 355, 356, 358, 792, 357,
	875, 360, 361, 363, 362, 745, 0, 0, 776, 820,
	364, 851, 365, 366, 0, 801, 802, 0, 0, 369,
	370, 0, 0, 371, 241, 877, 372, 878, 852, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 853, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 388, 854,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 879, 404,
	405, 406, 407, 754, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 793, 794, 795, 796,
	420, 426, 427, 813, 428, 409, 410, 429, 0, 430,
	855, 797, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 835, 437, 438, 439, 856, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 791, 452,
	0, 857, 858, 859, 836, 0, 0, 454, 455, 860,
	861, 774, 456, 457, 0, 3073, 459, 0, 0, 460,
	461, 462, 464, 814, 465, 0, 798, 466, 467, 468,
	254, 862, 0, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 730, 0, 932, 0, 0, 0, 0, 742,
	743, 0, 0, 0, 0, 0, 0, 0, 755, 0,
	258, 259, 260, 261, 758, 262, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 815, 276, 219, 220, 221, 0,
	277, 822, 0, 805, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 865, 290, 291, 808, 806, 807, 812, 810, 809,
	811, 292, 293, 497, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 844, 845, 0, 866, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 867, 320, 0, 321, 847, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 817, 818,
	821, 869, 0, 819, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 868, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 870, 871, 339, 340,
	341, 872, 342, 343, 0, 0, 344, 345, 346, 919,
	348, 347, 0, 850, 873, 349, 350, 874, 0, 351,
	352, 0, 0, 353, 0, 354, 934, 933, 355, 356,
	358, 359, 357, 875, 360, 361, 363, 362, 0, 0,
	876, 0, 820, 364, 240, 365, 366, 0, 367, 368,
	0, 924, 369, 370, 0, 0, 371, 241, 877, 372,
	878, 852, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 853, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 879, 404, 405, 406, 407, 246, 926, 0, 412,
	413, 414, 415, 416, 417, 418, 171, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 813, 428, 409, 410,
	429, 880, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 856, 0,
	443, 444, 173, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 860, 861, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 814, 465, 0, 463,
	466, 467, 468, 1152, 255, 0, 0, 469, 256, 0,
	0, 932, 165, 470, 471, 257, 472, 473, 474, 0,
	166, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 816, 0, 916,
	0, 1458, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 815, 276, 219, 220, 221, 0, 277, 822, 0,
	805, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 865, 290,
	291, 808, 806, 807, 812, 810, 809, 811, 292, 293,
	497, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	0, 0, 225, 304, 305, 307, 310, 306, 311, 312,
	844, 845, 0, 866, 0, 0, 0, 0, 0, 313,
	314, 315, 228, 316, 317, 0, 318, 0, 319, 0,
	0, 867, 320, 0, 321, 847, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 817, 818, 821, 869, 0,
	819, 329, 0, 0, 0, 0, 328, 330, 337, 0,
	868, 331, 234, 333, 332, 334, 335, 336, 235, 0,
	236, 0, 338, 870, 871, 339, 340, 341, 872, 342,
	343, 0, 0, 344, 345, 346, 919, 348, 347, 0,
	850, 873, 349, 350, 874, 0, 351, 352, 0, 0,
	353, 0, 354, 934, 933, 355, 356, 358, 359, 357,
	875, 360, 361, 363, 362, 0, 0, 876, 0, 820,
	364, 240, 365, 366, 0, 367, 368, 0, 924, 369,
	370, 0, 0, 371, 241, 877, 372, 878, 852, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 853, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 879, 404,
	405, 406, 407, 246, 926, 0, 412, 413, 414, 415,
	416, 417, 418, 171, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 813, 428, 409, 410, 429, 880, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 856, 0, 443, 444, 173,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 860,
	861, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 814, 465, 0, 463, 466, 467, 468,
	1152, 255, 0, 0, 469, 256, 2302, 0, 932, 165,
	470, 471, 257, 472, 473, 474, 0, 166, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 816, 0, 916, 0, 1458, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 815, 276,
	219, 220, 221, 0, 277, 822, 0, 805, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 865, 290, 291, 808, 806,
	807, 812, 810, 809, 811, 292, 293, 497, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 844, 845, 0,
	866, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 867, 320,
	0, 321, 847, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 817, 818, 821, 869, 0, 819, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 868, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	870, 871, 339, 340, 341, 872, 342, 343, 0, 0,
	344, 345, 346, 919, 348, 347, 0, 850, 873, 349,
	350, 874, 0, 351, 352, 0, 0, 353, 0, 354,
	934, 933, 355, 356, 358, 359, 357, 875, 360, 361,
	363, 362, 0, 0, 876, 0, 820, 364, 240, 365,
	366, 0, 367, 368, 0, 924, 369, 370, 0, 0,
	371, 241, 877, 372, 878, 852, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 853, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 879, 404, 405, 406, 407,
	246, 926, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	813, 428, 409, 410, 429, 880, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 856, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 860, 861, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	814, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 915, 0, 932, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 816, 0, 916, 0, 921, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 815, 276, 219, 220, 221,
	0, 277, 822, 0, 805, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 865, 290, 291, 808, 806, 807, 812, 810,
	809, 811, 292, 293, 497, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 0, 0, 225, 304, 305, 307,
	310, 306, 311, 312, 844, 845, 0, 866, 0, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 0, 319, 0, 0, 867, 320, 0, 321, 847,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 817,
	818, 821, 869, 0, 819, 329, 0, 0, 0, 0,
	328, 330, 337, 0, 868, 331, 234, 333, 332, 334,
	335, 336, 235, 0, 236, 0, 338, 870, 871, 339,
	340, 341, 872, 342, 343, 0, 0, 344, 345, 346,
	919, 348, 347, 0, 850, 873, 349, 350, 874, 0,
	351, 352, 0, 0, 353, 0, 354, 934, 933, 355,
	356, 358, 359, 357, 875, 360, 361, 363, 362, 0,
	0, 876, 0, 820, 364, 240, 365, 366, 0, 367,
	368, 0, 924, 369, 370, 0, 0, 371, 241, 877,
	372, 878, 852, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 853, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 879, 404, 405, 406, 407, 246, 926, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 813, 428, 409,
	410, 429, 880, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 856,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 860, 861, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 814, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	0, 0, 932, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 816, 0,
	916, 0, 921, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 815, 276, 219, 220, 221, 0, 277, 822,
	0, 805, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 865,
	290, 291, 808, 806, 807, 812, 810, 809, 811, 292,
	293, 497, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 844, 845, 0, 866, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 867, 320, 0, 321, 847, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 817, 818, 821, 869,
	0, 819, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 868, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 870, 871, 339, 340, 341, 872,
	342, 343, 0, 0, 344, 345, 346, 919, 348, 347,
	0, 850, 873, 349, 350, 874, 0, 351, 352, 0,
	0, 353, 0, 354, 934, 933, 355, 356, 358, 359,
	357, 875, 360, 361, 363, 362, 0, 0, 876, 0,
	820, 364, 240, 365, 366, 0, 367, 368, 0, 924,
	369, 370, 0, 0, 371, 241, 877, 372, 878, 852,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 853,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 879,
	404, 405, 406, 407, 246, 926, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 813, 428, 409, 410, 429, 880,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 856, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	860, 861, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 814, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 0, 0, 932,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 816, 0, 916, 0, 921,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 815,
	276, 219, 220, 221, 0, 277, 822, 0, 805, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 865, 290, 291, 808,
	806, 807, 812, 810, 809, 811, 292, 293, 497, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 0, 0,
	225, 304, 305, 307, 310, 306, 311, 312, 844, 845,
	0, 866, 0, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 0, 319, 0, 0, 867,
	320, 0, 321, 847, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 817, 818, 821, 869, 0, 819, 329,
	0, 0, 0, 0, 328, 330, 337, 0, 868, 331,
	234, 333, 332, 334, 335, 336, 235, 0, 236, 0,
	338, 870, 871, 339, 340, 341, 872, 342, 343, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 850, 873,
	349, 350, 874, 0, 351, 352, 0, 0, 353, 0,
	354, 934, 933, 355, 356, 358, 359, 357, 875, 360,
	361, 363, 362, 0, 0, 876, 0, 820, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 877, 372, 878, 852, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 853, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 879, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 813, 428, 409, 410, 429, 880, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 856, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 860, 861, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 814, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 0, 0, 932, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 816, 0, 0, 0, 2630, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 815, 276, 219, 220,
	221, 0, 277, 822, 0, 805, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 291, 808, 806, 807, 812,
	810, 809, 811, 292, 293, 497, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 844, 845, 0, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 867, 320, 0, 321,
	847, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	817, 818, 821, 869, 0, 819, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 870, 871,
	339, 340, 341, 872, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 850, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 934, 933,
	355, 356, 358, 359, 357, 875, 360, 361, 363, 362,
	0, 0, 876, 0, 820, 364, 240, 365, 366, 0,
	367, 368, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 852, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 853, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 246, 926,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 813, 428,
	409, 410, 429, 880, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	856, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 860, 861, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 814, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 1149, 0, 955, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 1362, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 959, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	865, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 497, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 0, 0, 225, 304, 305, 307, 310, 306,
	311, 312, 226, 227, 0, 866, 0, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 0,
	319, 0, 0, 867, 320, 0, 321, 229, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 231, 232, 233,
	869, 0, 237, 329, 0, 0, 0, 0, 328, 330,
	337, 0, 868, 331, 234, 333, 332, 334, 335, 336,
	235, 0, 236, 0, 338, 870, 871, 339, 340, 341,
	872, 342, 343, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 238, 873, 349, 350, 874, 0, 351, 352,
	0, 0, 353, 0, 354, 934, 933, 355, 356, 358,
	359, 357, 875, 360, 361, 363, 362, 0, 0, 876,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 877, 372, 878,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	879, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 171, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	880, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 173, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 1152, 255, 0, 0, 469, 256, 730, 0,
	494, 165, 470, 471, 257, 472, 473, 474, 0, 166,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	138, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 497,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 358, 359, 357, 0,
	360, 361, 363, 362, 0, 0, 0, 0, 239, 364,
	240, 365, 366, 0, 367, 368, 0, 0, 369, 370,
	0, 0, 371, 241, 0, 372, 0, 242, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 243, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 171, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 173, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 1152,
	255, 0, 0, 469, 256, 0, 0, 0, 165, 470,
	471, 257, 472, 473, 474, 0, 166, 780, 768, 769,
	766, 767, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 138, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 837, 800, 838, 788, 824, 839, 0, 269,
	270, 790, 789, 273, 274, 275, 0, 0, 276, 840,
	841, 221, 0, 277, 222, 0, 959, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 865, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 497, 294, 825, 296,
	842, 843, 0, 297, 0, 298, 0, 299, 0, 0,
	826, 301, 0, 302, 303, 0, 0, 0, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 775, 866,
	0, 0, 0, 0, 0, 313, 314, 315, 846, 827,
	828, 0, 318, 0, 319, 0, 0, 867, 320, 0,
	321, 229, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 869, 0, 237, 799, 0, 0,
	0, 0, 328, 330, 337, 0, 868, 331, 848, 803,
	829, 830, 831, 832, 849, 0, 804, 0, 338, 870,
	871, 339, 340, 341, 872, 833, 834, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 238, 873, 349, 350,
	874, 0, 351, 352, 0, 0, 353, 0, 354, 934,
	933, 355, 356, 358, 792, 357, 875, 360, 361, 363,
	362, 0, 0, 876, 776, 239, 364, 851, 365, 366,
	0, 801, 802, 0, 0, 369, 370, 0, 0, 371,
	241, 877, 372, 878, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 388, 854, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 879, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 793, 794, 795, 796, 420, 426, 427, 0,
	428, 409, 410, 429, 880, 430, 855, 797, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 835, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 791, 452, 0, 857, 858, 859,
	836, 0, 0, 454, 455, 252, 253, 774, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 798, 466, 467, 468, 254, 862, 494, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 497, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 358, 359, 357, 0, 360, 361,
	363, 362, 0, 0, 0, 0, 239, 364, 240, 365,
	366, 0, 367, 368, 0, 0, 369, 370, 0, 0,
	371, 241, 0, 372, 0, 242, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 243, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 0, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 2096, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 497, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 0, 0, 225, 304, 305, 307,
	310, 306, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 0, 319, 0, 0, 0, 320, 0, 321, 229,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 231,
	232, 233, 0, 0, 237, 329, 0, 0, 0, 0,
	328, 330, 337, 0, 0, 331, 234, 333, 332, 334,
	335, 336, 235, 0, 236, 0, 338, 0, 0, 339,
	340, 341, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 238, 0, 349, 350, 0, 0,
	351, 352, 0, 0, 353, 0, 354, 0, 0, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	0, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 2539, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 497, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 358, 359,
	357, 0, 360, 361, 363, 362, 0, 0, 0, 0,
	239, 364, 240, 365, 366, 0, 367, 368, 0, 0,
	369, 370, 0, 0, 371, 241, 0, 372, 0, 242,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 243,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 1228, 0, 955,
	954, 0, 0, 0, 952, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 1463,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 959, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 865, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 497, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 0, 0,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	0, 866, 0, 0, 0, 0, 0, 1227, 314, 315,
	228, 316, 317, 0, 318, 0, 319, 0, 0, 867,
	320, 0, 321, 229, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 869, 0, 237, 329,
	0, 0, 0, 0, 328, 330, 337, 0, 868, 331,
	234, 333, 332, 334, 335, 336, 235, 0, 236, 0,
	338, 870, 871, 339, 340, 341, 872, 342, 343, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 238, 873,
	349, 350, 874, 0, 351, 352, 0, 0, 353, 0,
	354, 934, 933, 355, 356, 358, 359, 357, 875, 360,
	361, 363, 362, 0, 0, 876, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 877, 372, 878, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 1226, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 879, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 880, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 1145, 0, 955, 954, 0, 0,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 959, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 497, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 867, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1144, 232, 233, 869, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 870, 871,
	339, 340, 341, 872, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 934, 933,
	355, 356, 358, 359, 357, 875, 360, 361, 363, 362,
	0, 0, 876, 0, 239, 364, 240, 365, 366, 0,
	367, 368, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 242, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 243, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 880, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 1141, 0, 955, 954, 0, 0, 0, 952, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 959, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	865, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 497, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 0, 0, 225, 304, 305, 307, 310, 306,
	311, 312, 226, 227, 0, 866, 0, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 0,
	319, 0, 0, 867, 320, 0, 321, 229, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 1140, 232, 233,
	869, 0, 237, 329, 0, 0, 0, 0, 328, 330,
	337, 0, 868, 331, 234, 333, 332, 334, 335, 336,
	235, 0, 236, 0, 338, 870, 871, 339, 340, 341,
	872, 342, 343, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 238, 873, 349, 350, 874, 0, 351, 352,
	0, 0, 353, 0, 354, 934, 933, 355, 356, 358,
	359, 357, 875, 360, 361, 363, 362, 0, 0, 876,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 877, 372, 878,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	879, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	880, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 1102, 0,
	955, 954, 0, 0, 0, 952, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 959,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 865, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 497,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 866, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	867, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 1101, 232, 233, 869, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 868,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 870, 871, 339, 340, 341, 872, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	873, 349, 350, 874, 0, 351, 352, 0, 0, 353,
	0, 354, 934, 933, 355, 356, 358, 359, 357, 875,
	360, 361, 363, 362, 0, 0, 876, 0, 239, 364,
	240, 365, 366, 0, 367, 368, 0, 0, 369, 370,
	0, 0, 371, 241, 877, 372, 878, 242, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 243, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 879, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 880, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 1099, 0, 955, 954, 0,
	0, 0, 952, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 959, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 865, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 497, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 0, 0, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 0, 866,
	0, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 0, 319, 0, 0, 867, 320, 0,
	321, 229, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 1098, 232, 233, 869, 0, 237, 329, 0, 0,
	0, 0, 328, 330, 337, 0, 868, 331, 234, 333,
	332, 334, 335, 336, 235, 0, 236, 0, 338, 870,
	871, 339, 340, 341, 872, 342, 343, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 238, 873, 349, 350,
	874, 0, 351, 352, 0, 0, 353, 0, 354, 934,
	933, 355, 356, 358, 359, 357, 875, 360, 361, 363,
	362, 0, 0, 876, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 877, 372, 878, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 879, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 880, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 948, 0, 955, 954, 0, 0, 0, 952,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 959, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 865, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 497, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 866, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 867, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 950, 232,
	233, 869, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 868, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 870, 871, 339, 340,
	341, 872, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 873, 349, 350, 874, 0, 351,
	352, 0, 0, 353, 0, 354, 934, 933, 355, 356,
	358, 359, 357, 875, 360, 361, 363, 362, 0, 0,
	876, 0, 239, 364, 240, 365, 366, 0, 367, 368,
	0, 0, 369, 370, 0, 0, 371, 241, 877, 372,
	878, 242, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 243, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 879, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 880, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 955, 954, 469, 256, 0,
	952, 0, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 959, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 865, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 497, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 0, 0, 225, 304, 305, 307,
	310, 306, 311, 312, 226, 227, 0, 866, 0, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 0, 319, 0, 0, 867, 320, 0, 321, 229,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 231,
	232, 233, 869, 0, 237, 329, 0, 0, 0, 0,
	328, 330, 337, 0, 868, 331, 234, 333, 332, 334,
	335, 336, 235, 0, 236, 0, 338, 870, 871, 339,
	340, 341, 872, 342, 343, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 238, 873, 349, 350, 874, 0,
	351, 352, 0, 0, 353, 0, 354, 934, 933, 355,
	356, 358, 359, 357, 875, 360, 361, 363, 362, 0,
	0, 876, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 877,
	372, 878, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 879, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 880, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 955, 954, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 959, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 865, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 497, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 866, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 867, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 869, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 868, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 870, 871,
	339, 340, 341, 872, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 873, 349, 350, 874,
	0, 351, 352, 0, 0, 353, 0, 354, 934, 933,
	355, 356, 358, 359, 357, 875, 360, 361, 363, 362,
	0, 0, 876, 0, 239, 364, 240, 365, 366, 0,
	367, 368, 0, 0, 369, 370, 0, 0, 371, 241,
	877, 372, 878, 242, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 243, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 879, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 880, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 955, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 959, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 865, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 497, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 0, 0, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 0, 866,
	0, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 0, 319, 0, 0, 867, 320, 0,
	321, 229, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 869, 0, 237, 329, 0, 0,
	0, 0, 328, 330, 337, 0, 868, 331, 234, 333,
	332, 334, 335, 336, 235, 0, 236, 0, 338, 870,
	871, 339, 340, 341, 872, 342, 343, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 238, 873, 349, 350,
	874, 0, 351, 352, 0, 0, 353, 0, 354, 934,
	933, 355, 356, 358, 359, 357, 875, 360, 361, 363,
	362, 0, 0, 876, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 877, 372, 878, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 879, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 880, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 598, 0, 207, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 213, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	358, 359, 357, 0, 360, 361, 363, 362, 0, 0,
	0, 0, 239, 364, 240, 365, 366, 0, 367, 368,
	0, 0, 369, 370, 0, 0, 371, 241, 0, 372,
	0, 242, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 243, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 212, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 206,
	0, 207, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 477, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	213, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	0, 0, 225, 304, 305, 307, 310, 306, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 315, 228, 316, 317, 0, 318, 0, 319, 0,
	0, 0, 320, 0, 321, 229, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 231, 232, 233, 0, 0,
	237, 329, 0, 0, 0, 0, 328, 330, 337, 0,
	0, 331, 234, 333, 332, 334, 335, 336, 235, 0,
	236, 0, 338, 0, 0, 339, 340, 341, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	238, 0, 349, 350, 0, 0, 351, 352, 0, 0,
	353, 0, 354, 0, 0, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 212,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 207, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 477, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 213, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 358, 359,
	357, 0, 360, 361, 363, 362, 0, 0, 0, 0,
	239, 364, 240, 365, 366, 0, 367, 368, 0, 0,
	369, 370, 0, 0, 371, 241, 0, 372, 0, 242,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 243,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	1705, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	212, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 207, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 477, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 213, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 0, 0, 225, 304, 305, 307, 310, 306,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 0,
	319, 0, 0, 0, 320, 0, 321, 229, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 231, 232, 233,
	0, 0, 237, 329, 0, 0, 0, 0, 328, 330,
	337, 0, 0, 331, 234, 333, 332, 334, 335, 336,
	235, 0, 236, 0, 338, 0, 0, 339, 340, 341,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 238, 0, 349, 350, 0, 0, 351, 352,
	0, 0, 353, 0, 354, 0, 0, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 212, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 494, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 477, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 497, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	358, 359, 357, 0, 360, 361, 363, 362, 0, 0,
	0, 0, 239, 364, 240, 365, 366, 0, 367, 368,
	0, 0, 369, 370, 0, 0, 371, 241, 0, 372,
	0, 242, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 243, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 494, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 477, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	1988, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 1985, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 497, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 0, 0, 225, 304, 305, 307,
	310, 306, 311, 312, 226, 227, 0, 2065, 0, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 0, 319, 1991, 0, 0, 320, 0, 321, 229,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 231,
	232, 233, 0, 0, 237, 329, 0, 0, 0, 2063,
	328, 330, 337, 0, 0, 331, 234, 333, 332, 334,
	335, 336, 235, 0, 236, 0, 2062, 0, 0, 339,
	340, 341, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 238, 0, 349, 350, 0, 0,
	351, 352, 0, 0, 353, 0, 354, 0, 0, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 1990, 383, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 2064, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 494, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 1988, 277, 222, 0, 0, 1982, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 1985, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 497, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 1991, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1981, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 358, 359, 357, 0, 360, 361, 363, 362,
	0, 0, 0, 0, 239, 364, 240, 365, 366, 0,
	367, 368, 0, 0, 369, 370, 0, 0, 371, 241,
	0, 372, 0, 242, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 243, 381, 244, 382, 1990, 383, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 1989, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 605, 0, 494, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 604, 582, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 585,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 497, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 0, 0, 225, 304, 305, 307, 310, 306,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 0,
	319, 0, 0, 0, 320, 586, 321, 229, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 231, 232, 233,
	0, 0, 237, 329, 0, 0, 0, 0, 328, 330,
	337, 0, 0, 331, 234, 333, 332, 334, 335, 336,
	235, 0, 236, 0, 338, 0, 0, 339, 340, 341,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 238, 0, 349, 350, 0, 0, 351, 352,
	0, 0, 353, 0, 354, 0, 0, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 587, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 581, 0,
	494, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	582, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 585, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 497,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 586, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 358, 359, 357, 0,
	360, 361, 363, 362, 0, 0, 0, 0, 239, 364,
	240, 365, 366, 0, 367, 368, 0, 0, 369, 370,
	0, 0, 371, 241, 0, 372, 0, 242, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 243, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 414, 415, 416,
	417, 418, 587, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 494, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 585, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	497, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	0, 0, 225, 304, 305, 307, 310, 306, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 315, 228, 316, 317, 0, 318, 0, 319, 0,
	0, 0, 320, 586, 321, 229, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 231, 232, 233, 0, 0,
	237, 329, 0, 0, 0, 0, 328, 330, 337, 0,
	0, 331, 234, 333, 332, 334, 335, 336, 235, 0,
	236, 0, 338, 0, 0, 339, 340, 341, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	238, 0, 349, 350, 0, 0, 351, 352, 0, 0,
	353, 0, 354, 0, 0, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 587, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 1120, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 497, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 358, 359, 357, 0, 360, 361,
	363, 362, 0, 0, 0, 0, 239, 364, 240, 365,
	366, 0, 367, 368, 0, 924, 369, 370, 0, 0,
	371, 241, 0, 372, 0, 242, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 243, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 943, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 497, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 0, 0, 225, 304, 305, 307,
	310, 306, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 0, 319, 0, 0, 0, 320, 0, 321, 229,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 945,
	232, 233, 0, 0, 237, 329, 0, 0, 0, 0,
	328, 330, 337, 0, 0, 331, 234, 333, 332, 334,
	335, 336, 235, 0, 236, 0, 338, 0, 0, 339,
	340, 341, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 238, 0, 349, 350, 0, 0,
	351, 352, 0, 0, 353, 0, 354, 0, 0, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 924, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	940, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 497, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 942, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 358, 359,
	357, 0, 360, 361, 363, 362, 0, 0, 0, 0,
	239, 364, 240, 365, 366, 0, 367, 368, 0, 924,
	369, 370, 0, 0, 371, 241, 0, 372, 0, 242,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 243,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 936, 0, 494,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 497, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 0, 0,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 0, 319, 0, 0, 0,
	320, 0, 321, 229, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 938, 232, 233, 0, 0, 237, 329,
	0, 0, 0, 0, 328, 330, 337, 0, 0, 331,
	234, 333, 332, 334, 335, 336, 235, 0, 236, 0,
	338, 0, 0, 339, 340, 341, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 238, 0,
	349, 350, 0, 0, 351, 352, 0, 0, 353, 0,
	354, 0, 0, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 924, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 590, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 497, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 358, 359, 357, 0, 360, 361, 363, 362,
	0, 0, 0, 0, 239, 364, 240, 365, 366, 0,
	367, 368, 0, 0, 369, 370, 0, 0, 371, 241,
	0, 372, 0, 242, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 243, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 589, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 517, 0, 494, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 516, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 497, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 0, 0, 225, 304, 305, 307, 310, 306,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 0,
	319, 0, 0, 0, 320, 0, 321, 229, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 231, 232, 233,
	0, 0, 237, 329, 0, 0, 0, 0, 328, 330,
	337, 0, 0, 331, 234, 333, 332, 334, 335, 336,
	235, 0, 236, 0, 338, 0, 0, 339, 340, 341,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 238, 0, 349, 350, 0, 0, 351, 352,
	0, 0, 353, 0, 354, 0, 0, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 515, 0, 383, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 494, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 1963, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 497, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	358, 359, 357, 0, 360, 361, 363, 362, 0, 0,
	0, 0, 239, 364, 240, 365, 366, 0, 367, 368,
	0, 0, 369, 370, 0, 0, 371, 241, 0, 372,
	0, 242, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 243, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 494, 2461, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 497, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 0, 0, 225, 304, 305, 307,
	310, 306, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 0, 319, 0, 0, 0, 320, 0, 321, 229,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 231,
	232, 233, 0, 0, 237, 329, 0, 0, 0, 0,
	328, 330, 337, 0, 0, 331, 234, 333, 332, 334,
	335, 336, 235, 0, 236, 0, 338, 0, 0, 339,
	340, 341, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 238, 0, 349, 350, 0, 0,
	351, 352, 0, 0, 353, 0, 354, 0, 0, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 494, 2461, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 497, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 358, 359, 357, 0, 360, 361, 363, 362,
	0, 0, 0, 0, 239, 364, 240, 365, 366, 0,
	367, 368, 0, 0, 369, 2458, 0, 0, 371, 241,
	0, 372, 0, 242, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 243, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 494, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 497, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 0, 0, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 0, 319, 0, 0, 0, 320, 0,
	321, 229, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 0, 0, 237, 329, 0, 0,
	0, 0, 328, 330, 337, 0, 0, 331, 234, 333,
	332, 334, 335, 336, 235, 0, 236, 0, 338, 0,
	0, 339, 340, 341, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 238, 0, 349, 350,
	0, 0, 351, 352, 0, 0, 353, 0, 354, 0,
	0, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 924, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 1725, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 497, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	358, 359, 357, 0, 360, 361, 363, 362, 0, 0,
	0, 0, 239, 364, 240, 365, 366, 0, 367, 368,
	0, 0, 369, 370, 0, 0, 371, 241, 0, 372,
	0, 242, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 243, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 1723,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	497, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	0, 0, 225, 304, 305, 307, 310, 306, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 315, 228, 316, 317, 0, 318, 0, 319, 0,
	0, 0, 320, 0, 321, 229, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 231, 232, 233, 0, 0,
	237, 329, 0, 0, 0, 0, 328, 330, 337, 0,
	0, 331, 234, 333, 332, 334, 335, 336, 235, 0,
	236, 0, 338, 0, 0, 339, 340, 341, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	238, 0, 349, 350, 0, 0, 351, 352, 0, 0,
	353, 0, 354, 0, 0, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 1721, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 497, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 231, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 358, 359, 357, 0, 360, 361,
	363, 362, 0, 0, 0, 0, 239, 364, 240, 365,
	366, 0, 367, 368, 0, 0, 369, 370, 0, 0,
	371, 241, 0, 372, 0, 242, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 243, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 494,
	0, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 258, 259, 260, 261, 1698,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 497, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 0, 0,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 0, 319, 0, 0, 0,
	320, 0, 321, 229, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 0, 0, 237, 329,
	0, 0, 0, 0, 328, 330, 337, 0, 0, 331,
	234, 333, 332, 334, 335, 336, 235, 0, 236, 0,
	338, 0, 0, 339, 340, 341, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 238, 0,
	349, 350, 0, 0, 351, 352, 0, 0, 353, 0,
	354, 0, 0, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 1656, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 497, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 358, 359, 357, 0, 360, 361, 363, 362,
	0, 0, 0, 0, 239, 364, 240, 365, 366, 0,
	367, 368, 0, 0, 369, 370, 0, 0, 371, 241,
	0, 372, 0, 242, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 243, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 1654, 0, 494, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 497, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 0, 0, 225, 304, 305, 307, 310, 306,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 0,
	319, 0, 0, 0, 320, 0, 321, 229, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 231, 232, 233,
	0, 0, 237, 329, 0, 0, 0, 0, 328, 330,
	337, 0, 0, 331, 234, 333, 332, 334, 335, 336,
	235, 0, 236, 0, 338, 0, 0, 339, 340, 341,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 238, 0, 349, 350, 0, 0, 351, 352,
	0, 0, 353, 0, 354, 0, 0, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 631, 0,
	494, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 1199, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 497,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 358, 359, 632, 0,
	360, 361, 363, 362, 0, 0, 0, 0, 239, 364,
	240, 365, 366, 0, 367, 368, 0, 0, 369, 370,
	0, 0, 371, 241, 0, 372, 0, 242, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 243, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 412, 413, 628, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	627, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 1549, 0, 494, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 497, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 0, 0, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 0, 319, 0, 0, 0, 320, 0,
	321, 229, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 1548, 232, 233, 0, 0, 237, 329, 0, 0,
	0, 0, 328, 330, 337, 0, 0, 331, 234, 333,
	332, 334, 335, 336, 235, 0, 236, 0, 338, 0,
	0, 339, 340, 341, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 238, 0, 349, 350,
	0, 0, 351, 352, 0, 0, 353, 0, 354, 0,
	0, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 631, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 1199, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 497, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	358, 359, 632, 0, 360, 361, 363, 362, 0, 0,
	0, 0, 239, 364, 240, 365, 366, 0, 367, 368,
	0, 0, 369, 370, 0, 0, 371, 241, 0, 372,
	0, 242, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 243, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 628, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 627, 250, 251, 453, 0, 0,
	454, 1200, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 631,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 621, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	497, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	0, 0, 225, 304, 305, 307, 310, 306, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 315, 228, 316, 317, 0, 318, 0, 319, 0,
	0, 0, 320, 0, 321, 229, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 231, 232, 233, 0, 0,
	237, 329, 0, 0, 0, 0, 328, 330, 337, 0,
	0, 331, 234, 333, 332, 334, 335, 336, 235, 0,
	236, 0, 338, 0, 0, 339, 340, 341, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	238, 0, 349, 350, 0, 0, 351, 352, 0, 0,
	353, 0, 354, 0, 0, 355, 356, 358, 359, 632,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 628, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 1171, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 627, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 1138, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 497, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1137, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 358, 359, 357, 0, 360, 361,
	363, 362, 0, 0, 0, 0, 239, 364, 240, 365,
	366, 0, 367, 368, 0, 0, 369, 370, 0, 0,
	371, 241, 0, 372, 0, 242, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 243, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 1134, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 497, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 0, 0, 225, 304, 305, 307,
	310, 306, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 0, 319, 0, 0, 0, 320, 0, 321, 229,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 1133,
	232, 233, 0, 0, 237, 329, 0, 0, 0, 0,
	328, 330, 337, 0, 0, 331, 234, 333, 332, 334,
	335, 336, 235, 0, 236, 0, 338, 0, 0, 339,
	340, 341, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 238, 0, 349, 350, 0, 0,
	351, 352, 0, 0, 353, 0, 354, 0, 0, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	1131, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 497, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1130, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 358, 359,
	357, 0, 360, 361, 363, 362, 0, 0, 0, 0,
	239, 364, 240, 365, 366, 0, 367, 368, 0, 0,
	369, 370, 0, 0, 371, 241, 0, 372, 0, 242,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 243,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 1128, 0, 494,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 497, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 0, 0,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 0, 319, 0, 0, 0,
	320, 0, 321, 229, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 1127, 232, 233, 0, 0, 237, 329,
	0, 0, 0, 0, 328, 330, 337, 0, 0, 331,
	234, 333, 332, 334, 335, 336, 235, 0, 236, 0,
	338, 0, 0, 339, 340, 341, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 238, 0,
	349, 350, 0, 0, 351, 352, 0, 0, 353, 0,
	354, 0, 0, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 1124, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 497, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	1123, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 358, 359, 357, 0, 360, 361, 363, 362,
	0, 0, 0, 0, 239, 364, 240, 365, 366, 0,
	367, 368, 0, 0, 369, 370, 0, 0, 371, 241,
	0, 372, 0, 242, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 243, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 494, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 258, 259, 260, 261, 1112, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 497, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 0, 0, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 0, 319, 0, 0, 0, 320, 0,
	321, 229, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 0, 0, 237, 329, 0, 0,
	0, 0, 328, 330, 337, 0, 0, 331, 234, 333,
	332, 334, 335, 336, 235, 0, 236, 0, 338, 0,
	0, 339, 340, 341, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 238, 0, 349, 350,
	0, 0, 351, 352, 0, 0, 353, 0, 354, 0,
	0, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 1110, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 497, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 1109, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	358, 359, 357, 0, 360, 361, 363, 362, 0, 0,
	0, 0, 239, 364, 240, 365, 366, 0, 367, 368,
	0, 0, 369, 370, 0, 0, 371, 241, 0, 372,
	0, 242, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 243, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 1104,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	497, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	0, 0, 225, 304, 305, 307, 310, 306, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 315, 228, 316, 317, 0, 318, 0, 319, 0,
	0, 0, 320, 0, 321, 229, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 231, 232, 233, 0, 0,
	237, 329, 0, 0, 0, 0, 328, 330, 337, 0,
	0, 331, 234, 333, 332, 334, 335, 336, 235, 0,
	236, 0, 338, 0, 0, 339, 340, 341, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	238, 0, 349, 350, 0, 0, 351, 352, 0, 0,
	353, 0, 354, 0, 0, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 0, 0, 469, 256, 1095, 0, 494, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 497, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1094, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 358, 359, 357, 0, 360, 361,
	363, 362, 0, 0, 0, 0, 239, 364, 240, 365,
	366, 0, 367, 368, 0, 0, 369, 370, 0, 0,
	371, 241, 0, 372, 0, 242, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 243, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 0,
	0, 469, 256, 1090, 0, 494, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 497, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 0, 0, 225, 304, 305, 307,
	310, 306, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 0, 319, 0, 0, 0, 320, 0, 321, 229,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 231,
	232, 233, 0, 0, 237, 329, 0, 0, 0, 0,
	328, 330, 337, 0, 0, 331, 234, 333, 332, 334,
	335, 336, 235, 0, 236, 0, 338, 0, 0, 339,
	340, 341, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 238, 0, 349, 350, 0, 0,
	351, 352, 0, 0, 353, 0, 354, 0, 0, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 0, 0, 469, 256,
	1086, 0, 494, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 497, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 1088, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 358, 359,
	357, 0, 360, 361, 363, 362, 0, 0, 0, 0,
	239, 364, 240, 365, 366, 0, 367, 368, 0, 0,
	369, 370, 0, 0, 371, 241, 0, 372, 0, 242,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 243,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 0, 0, 469, 256, 963, 0, 494,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 497, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 0, 0,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 0, 319, 0, 0, 0,
	320, 0, 321, 229, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 965, 232, 233, 0, 0, 237, 329,
	0, 0, 0, 0, 328, 330, 337, 0, 0, 331,
	234, 333, 332, 334, 335, 336, 235, 0, 236, 0,
	338, 0, 0, 339, 340, 341, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 238, 0,
	349, 350, 0, 0, 351, 352, 0, 0, 353, 0,
	354, 0, 0, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 388, 245, 389, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	0, 0, 469, 256, 960, 0, 494, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 497, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 358, 359, 357, 0, 360, 361, 363, 362,
	0, 0, 0, 0, 239, 364, 240, 365, 366, 0,
	367, 368, 0, 0, 369, 370, 0, 0, 371, 241,
	0, 372, 0, 242, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 243, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 412, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 0, 0, 469,
	256, 631, 0, 494, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 621,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 497, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 0, 0, 225, 304, 305, 307, 310, 306,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 0,
	319, 0, 0, 0, 320, 0, 321, 229, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 231, 232, 233,
	0, 0, 237, 329, 0, 0, 0, 0, 328, 330,
	337, 0, 0, 331, 234, 333, 332, 334, 335, 336,
	235, 0, 236, 0, 338, 0, 0, 339, 340, 341,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 238, 0, 349, 350, 0, 0, 351, 620,
	0, 0, 353, 0, 354, 0, 0, 355, 356, 358,
	359, 632, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 622, 408, 0, 412, 413,
	628, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 623, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 627, 250, 251, 453, 0, 0, 454,
	625, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 0, 0, 469, 256, 611, 0,
	494, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 497,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 358, 359, 357, 0,
	360, 361, 363, 362, 0, 0, 0, 0, 239, 364,
	240, 365, 366, 0, 367, 368, 0, 0, 369, 370,
	0, 0, 371, 241, 0, 372, 0, 242, 373, 374,
	375, 376, 377, 378, 379, 0, 380, 243, 381, 244,
	382, 0, 383, 384, 385, 386, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 408, 0, 612, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 607, 0, 494, 0, 470,
	471, 257, 472, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 0, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 497, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 0, 0, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 0, 319, 0, 0, 0, 320, 0,
	321, 229, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 0, 0, 237, 329, 0, 0,
	0, 0, 328, 330, 337, 0, 0, 331, 234, 333,
	332, 334, 335, 336, 235, 0, 236, 0, 338, 0,
	0, 339, 340, 341, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 238, 0, 349, 350,
	0, 0, 351, 352, 0, 0, 353, 0, 354, 0,
	0, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	428, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 0, 0,
	469, 256, 596, 0, 494, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 497, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 231, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	358, 359, 357, 0, 360, 361, 363, 362, 0, 0,
	0, 0, 239, 364, 240, 365, 366, 0, 367, 368,
	0, 0, 369, 370, 0, 0, 371, 241, 0, 372,
	0, 242, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 243, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 0, 0, 469, 256, 539,
	0, 494, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 259, 260,
	261, 0, 262, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 263, 264, 265, 215, 216, 266, 217, 267,
	268, 218, 0, 269, 270, 271, 272, 273, 274, 275,
	0, 0, 276, 219, 220, 221, 0, 277, 222, 0,
	0, 0, 278, 279, 280, 281, 282, 0, 284, 285,
	286, 283, 0, 287, 0, 288, 289, 0, 0, 290,
	291, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	497, 294, 295, 296, 223, 224, 0, 297, 0, 298,
	0, 299, 0, 0, 300, 301, 0, 302, 303, 0,
	0, 0, 225, 304, 305, 307, 310, 306, 311, 312,
	226, 227, 0, 0, 0, 0, 0, 0, 0, 313,
	314, 315, 228, 316, 317, 0, 318, 0, 319, 0,
	0, 0, 320, 0, 321, 229, 0, 230, 0, 322,
	323, 324, 325, 326, 327, 231, 232, 233, 0, 0,
	237, 329, 0, 0, 0, 0, 328, 330, 337, 0,
	0, 331, 234, 333, 332, 334, 335, 336, 235, 0,
	236, 0, 338, 0, 0, 339, 340, 341, 0, 342,
	343, 0, 0, 344, 345, 346, 0, 348, 347, 0,
	238, 0, 349, 350, 0, 0, 351, 352, 0, 0,
	353, 0, 354, 0, 0, 355, 356, 358, 359, 357,
	0, 360, 361, 363, 362, 0, 0, 0, 0, 239,
	364, 240, 365, 366, 0, 367, 368, 0, 0, 369,
	370, 0, 0, 371, 241, 0, 372, 0, 242, 373,
	374, 375, 376, 377, 378, 379, 0, 380, 243, 381,
	244, 382, 0, 383, 384, 385, 386, 387, 388, 245,
	389, 390, 0, 391, 392, 393, 394, 395, 0, 397,
	398, 396, 399, 400, 401, 402, 0, 403, 0, 404,
	405, 406, 407, 246, 408, 0, 412, 413, 414, 415,
	416, 417, 418, 0, 424, 425, 419, 421, 422, 423,
	420, 426, 427, 0, 428, 409, 410, 429, 0, 430,
	247, 431, 432, 0, 442, 433, 434, 435, 411, 436,
	440, 441, 437, 438, 439, 248, 0, 443, 444, 0,
	445, 446, 447, 448, 449, 308, 450, 309, 451, 452,
	0, 249, 250, 251, 453, 0, 0, 454, 455, 252,
	253, 0, 456, 457, 0, 458, 459, 0, 0, 460,
	461, 462, 464, 0, 465, 0, 463, 466, 467, 468,
	254, 255, 494, 0, 469, 256, 0, 0, 0, 0,
	470, 471, 257, 472, 473, 474, 0, 0, 258, 259,
	260, 261, 0, 262, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 263, 264, 265, 215, 216, 266, 217,
	267, 268, 218, 0, 269, 270, 271, 272, 273, 274,
	275, 0, 0, 276, 219, 220, 221, 0, 277, 222,
	0, 0, 0, 278, 279, 280, 281, 282, 0, 284,
	285, 286, 283, 0, 287, 0, 288, 289, 0, 0,
	290, 291, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 497, 294, 295, 296, 223, 224, 0, 297, 0,
	298, 0, 299, 0, 0, 300, 301, 0, 302, 303,
	0, 0, 0, 225, 304, 305, 307, 310, 306, 311,
	312, 226, 227, 0, 0, 0, 0, 0, 0, 0,
	313, 314, 315, 228, 316, 317, 0, 318, 0, 319,
	0, 0, 0, 320, 0, 321, 229, 0, 230, 0,
	322, 323, 324, 325, 326, 327, 231, 232, 233, 0,
	0, 237, 329, 0, 0, 0, 0, 328, 330, 337,
	0, 0, 331, 234, 333, 332, 334, 335, 336, 235,
	0, 236, 0, 338, 0, 0, 339, 340, 341, 0,
	342, 343, 0, 0, 344, 345, 346, 0, 348, 347,
	0, 238, 0, 349, 350, 0, 0, 351, 352, 0,
	0, 353, 0, 354, 0, 0, 355, 356, 358, 359,
	357, 0, 360, 361, 363, 362, 0, 0, 0, 0,
	239, 364, 240, 365, 366, 0, 367, 368, 0, 0,
	369, 370, 0, 0, 371, 241, 0, 372, 0, 242,
	373, 374, 375, 376, 377, 378, 379, 0, 380, 243,
	381, 244, 382, 0, 383, 384, 385, 386, 387, 388,
	245, 389, 390, 0, 391, 392, 393, 394, 395, 0,
	397, 398, 396, 399, 400, 401, 402, 0, 403, 0,
	404, 405, 406, 407, 246, 408, 0, 412, 413, 414,
	415, 416, 417, 418, 0, 424, 425, 419, 421, 422,
	423, 420, 426, 427, 0, 428, 409, 410, 429, 0,
	430, 247, 431, 432, 0, 442, 433, 434, 435, 411,
	436, 440, 441, 437, 438, 439, 248, 0, 443, 444,
	0, 445, 446, 447, 448, 449, 308, 450, 309, 451,
	452, 0, 249, 250, 251, 453, 0, 0, 454, 455,
	252, 253, 0, 456, 457, 0, 458, 459, 0, 0,
	460, 461, 462, 464, 0, 465, 0, 463, 466, 467,
	468, 254, 255, 494, 0, 469, 256, 0, 0, 0,
	0, 470, 471, 257, 472, 473, 474, 0, 0, 258,
	259, 260, 261, 0, 262, 0, 0, 0, 0, 214,
	0, 0, 0, 0, 263, 264, 265, 215, 216, 266,
	217, 267, 268, 218, 0, 269, 270, 271, 272, 273,
	274, 275, 0, 0, 276, 219, 220, 221, 0, 277,
	222, 0, 0, 0, 278, 279, 280, 281, 282, 0,
	284, 285, 286, 283, 0, 287, 0, 288, 289, 0,
	0, 290, 291, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 497, 294, 295, 296, 223, 224, 0, 297,
	0, 298, 0, 299, 0, 0, 300, 301, 0, 302,
	303, 0, 0, 0, 225, 304, 305, 307, 310, 306,
	311, 312, 226, 227, 0, 0, 0, 0, 0, 0,
	0, 313, 314, 315, 228, 316, 317, 0, 318, 0,
	319, 0, 0, 0, 320, 0, 321, 229, 0, 230,
	0, 322, 323, 324, 325, 326, 327, 2360, 232, 233,
	0, 0, 237, 329, 0, 0, 0, 0, 328, 330,
	337, 0, 0, 331, 234, 333, 332, 334, 335, 336,
	235, 0, 236, 0, 338, 0, 0, 339, 340, 341,
	0, 342, 343, 0, 0, 344, 345, 346, 0, 348,
	347, 0, 238, 0, 349, 350, 0, 0, 351, 352,
	0, 0, 353, 0, 354, 0, 0, 355, 356, 358,
	359, 357, 0, 360, 361, 363, 362, 0, 0, 0,
	0, 239, 364, 240, 365, 366, 0, 367, 368, 0,
	0, 369, 370, 0, 0, 371, 241, 0, 372, 0,
	242, 373, 374, 375, 376, 377, 378, 379, 0, 380,
	243, 381, 244, 382, 0, 383, 384, 385, 386, 387,
	388, 245, 389, 390, 0, 391, 392, 393, 394, 395,
	0, 397, 398, 396, 399, 400, 401, 402, 0, 403,
	0, 404, 405, 406, 407, 246, 408, 0, 412, 413,
	414, 415, 416, 417, 418, 0, 424, 425, 419, 421,
	422, 423, 420, 426, 427, 0, 428, 409, 410, 429,
	0, 430, 247, 431, 432, 0, 442, 433, 434, 435,
	411, 436, 440, 441, 437, 438, 439, 248, 0, 443,
	444, 0, 445, 446, 447, 448, 449, 308, 450, 309,
	451, 452, 0, 249, 250, 251, 453, 0, 0, 454,
	455, 252, 253, 0, 456, 457, 0, 458, 459, 0,
	0, 460, 461, 462, 464, 0, 465, 0, 463, 466,
	467, 468, 254, 255, 494, 0, 469, 256, 0, 0,
	0, 0, 470, 471, 257, 472, 473, 474, 0, 0,
	258, 259, 260, 261, 0, 262, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 263, 264, 265, 215, 216,
	266, 217, 267, 268, 218, 0, 269, 270, 271, 272,
	273, 274, 275, 0, 0, 276, 219, 220, 221, 0,
	277, 222, 0, 0, 0, 278, 279, 280, 281, 282,
	0, 284, 285, 286, 283, 0, 287, 0, 288, 289,
	0, 0, 290, 291, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 497, 294, 295, 296, 223, 224, 0,
	297, 0, 298, 0, 299, 0, 0, 300, 301, 0,
	302, 303, 0, 0, 0, 225, 304, 305, 307, 310,
	306, 311, 312, 226, 227, 0, 0, 0, 0, 0,
	0, 0, 313, 314, 315, 228, 316, 317, 0, 318,
	0, 319, 0, 0, 0, 320, 0, 321, 229, 0,
	230, 0, 322, 323, 324, 325, 326, 327, 2358, 232,
	233, 0, 0, 237, 329, 0, 0, 0, 0, 328,
	330, 337, 0, 0, 331, 234, 333, 332, 334, 335,
	336, 235, 0, 236, 0, 338, 0, 0, 339, 340,
	341, 0, 342, 343, 0, 0, 344, 345, 346, 0,
	348, 347, 0, 238, 0, 349, 350, 0, 0, 351,
	352, 0, 0, 353, 0, 354, 0, 0, 355, 356,
	358, 359, 357, 0, 360, 361, 363, 362, 0, 0,
	0, 0, 239, 364, 240, 365, 366, 0, 367, 368,
	0, 0, 369, 370, 0, 0, 371, 241, 0, 372,
	0, 242, 373, 374, 375, 376, 377, 378, 379, 0,
	380, 243, 381, 244, 382, 0, 383, 384, 385, 386,
	387, 388, 245, 389, 390, 0, 391, 392, 393, 394,
	395, 0, 397, 398, 396, 399, 400, 401, 402, 0,
	403, 0, 404, 405, 406, 407, 246, 408, 0, 412,
	413, 414, 415, 416, 417, 418, 0, 424, 425, 419,
	421, 422, 423, 420, 426, 427, 0, 428, 409, 410,
	429, 0, 430, 247, 431, 432, 0, 442, 433, 434,
	435, 411, 436, 440, 441, 437, 438, 439, 248, 0,
	443, 444, 0, 445, 446, 447, 448, 449, 308, 450,
	309, 451, 452, 0, 249, 250, 251, 453, 0, 0,
	454, 455, 252, 253, 0, 456, 457, 0, 458, 459,
	0, 0, 460, 461, 462, 464, 0, 465, 0, 463,
	466, 467, 468, 254, 255, 494, 0, 469, 256, 0,
	0, 0, 0, 470, 471, 257, 472, 473, 474, 0,
	0, 258, 259, 260, 261, 0, 262, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 263, 264, 265, 215,
	216, 266, 217, 267, 268, 218, 0, 269, 270, 271,
	272, 273, 274, 275, 0, 0, 276, 219, 220, 221,
	0, 277, 222, 0, 0, 0, 278, 279, 280, 281,
	282, 0, 284, 285, 286, 283, 0, 287, 0, 288,
	289, 0, 0, 290, 291, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 497, 294, 295, 296, 223, 224,
	0, 297, 0, 298, 0, 299, 0, 0, 300, 301,
	0, 302, 303, 0, 0, 0, 225, 304, 305, 307,
	310, 306, 311, 312, 226, 227, 0, 0, 0, 0,
	0, 0, 0, 313, 314, 315, 228, 316, 317, 0,
	318, 0, 319, 0, 0, 0, 320, 0, 321, 229,
	0, 230, 0, 322, 323, 324, 325, 326, 327, 2347,
	232, 233, 0, 0, 237, 329, 0, 0, 0, 0,
	328, 330, 337, 0, 0, 331, 234, 333, 332, 334,
	335, 336, 235, 0, 236, 0, 338, 0, 0, 339,
	340, 341, 0, 342, 343, 0, 0, 344, 345, 346,
	0, 348, 347, 0, 238, 0, 349, 350, 0, 0,
	351, 352, 0, 0, 353, 0, 354, 0, 0, 355,
	356, 358, 359, 357, 0, 360, 361, 363, 362, 0,
	0, 0, 0, 239, 364, 240, 365, 366, 0, 367,
	368, 0, 0, 369, 370, 0, 0, 371, 241, 0,
	372, 0, 242, 373, 374, 375, 376, 377, 378, 379,
	0, 380, 243, 381, 244, 382, 0, 383, 384, 385,
	386, 387, 388, 245, 389, 390, 0, 391, 392, 393,
	394, 395, 0, 397, 398, 396, 399, 400, 401, 402,
	0, 403, 0, 404, 405, 406, 407, 246, 408, 0,
	412, 413, 414, 415, 416, 417, 418, 0, 424, 425,
	419, 421, 422, 423, 420, 426, 427, 0, 428, 409,
	410, 429, 0, 430, 247, 431, 432, 0, 442, 433,
	434, 435, 411, 436, 440, 441, 437, 438, 439, 248,
	0, 443, 444, 0, 445, 446, 447, 448, 449, 308,
	450, 309, 451, 452, 0, 249, 250, 251, 453, 0,
	0, 454, 455, 252, 253, 0, 456, 457, 0, 458,
	459, 0, 0, 460, 461, 462, 464, 0, 465, 0,
	463, 466, 467, 468, 254, 255, 494, 0, 469, 256,
	0, 0, 0, 0, 470, 471, 257, 472, 473, 474,
	0, 0, 258, 259, 260, 261, 0, 262, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 263, 264, 265,
	215, 216, 266, 217, 267, 268, 218, 0, 269, 270,
	271, 272, 273, 274, 275, 0, 0, 276, 219, 220,
	221, 0, 277, 222, 0, 0, 0, 278, 279, 280,
	281, 282, 0, 284, 285, 286, 283, 0, 287, 0,
	288, 289, 0, 0, 290, 291, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 497, 294, 295, 296, 223,
	224, 0, 297, 0, 298, 0, 299, 0, 0, 300,
	301, 0, 302, 303, 0, 0, 0, 225, 304, 305,
	307, 310, 306, 311, 312, 226, 227, 0, 0, 0,
	0, 0, 0, 0, 313, 314, 315, 228, 316, 317,
	0, 318, 0, 319, 0, 0, 0, 320, 0, 321,
	229, 0, 230, 0, 322, 323, 324, 325, 326, 327,
	231, 232, 233, 0, 0, 237, 329, 0, 0, 0,
	0, 328, 330, 337, 0, 0, 331, 234, 333, 332,
	334, 335, 336, 235, 0, 236, 0, 338, 0, 0,
	339, 340, 341, 0, 342, 343, 0, 0, 344, 345,
	346, 0, 348, 347, 0, 238, 0, 349, 350, 0,
	0, 351, 352, 0, 0, 353, 0, 354, 0, 0,
	355, 356, 358, 359, 357, 0, 360, 361, 363, 362,
	0, 0, 0, 0, 239, 364, 240, 365, 366, 0,
	367, 368, 0, 0, 369, 370, 0, 0, 371, 241,
	0, 372, 0, 242, 373, 374, 375, 376, 377, 378,
	379, 0, 380, 243, 381, 244, 382, 0, 383, 384,
	385, 386, 387, 388, 245, 389, 390, 0, 391, 392,
	393, 394, 395, 0, 397, 398, 396, 399, 400, 401,
	402, 0, 403, 0, 404, 405, 406, 407, 246, 408,
	0, 612, 413, 414, 415, 416, 417, 418, 0, 424,
	425, 419, 421, 422, 423, 420, 426, 427, 0, 428,
	409, 410, 429, 0, 430, 247, 431, 432, 0, 442,
	433, 434, 435, 411, 436, 440, 441, 437, 438, 439,
	248, 0, 443, 444, 0, 445, 446, 447, 448, 449,
	308, 450, 309, 451, 452, 0, 249, 250, 251, 453,
	0, 0, 454, 455, 252, 253, 0, 456, 457, 0,
	458, 459, 0, 0, 460, 461, 462, 464, 0, 465,
	0, 463, 466, 467, 468, 254, 255, 494, 0, 469,
	256, 0, 0, 0, 0, 470, 471, 257, 472, 473,
	474, 0, 0, 258, 259, 260, 261, 0, 262, 0,
	0, 0, 0, 214, 0, 1562, 0, 0, 263, 264,
	265, 215, 216, 266, 217, 267, 268, 218, 0, 269,
	270, 271, 272, 273, 274, 275, 0, 0, 276, 219,
	220, 221, 0, 277, 222, 0, 0, 0, 278, 279,
	280, 281, 282, 0, 284, 285, 286, 283, 0, 287,
	0, 288, 289, 0, 0, 290, 291, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 497, 294, 295, 296,
	223, 224, 0, 297, 0, 298, 0, 299, 0, 0,
	300, 301, 0, 302, 303, 0, 0, 0, 225, 304,
	305, 307, 310, 306, 311, 312, 226, 227, 0, 0,
	0, 0, 0, 0, 0, 313, 314, 315, 228, 316,
	317, 0, 318, 0, 319, 0, 0, 0, 320, 0,
	321, 229, 0, 230, 0, 322, 323, 324, 325, 326,
	327, 231, 232, 233, 0, 0, 237, 329, 0, 0,
	0, 0, 328, 330, 337, 0, 0, 331, 234, 333,
	332, 334, 335, 336, 235, 0, 236, 0, 338, 0,
	0, 339, 340, 341, 0, 342, 343, 0, 0, 344,
	345, 346, 0, 348, 347, 0, 238, 0, 349, 350,
	0, 0, 351, 352, 0, 0, 353, 0, 354, 0,
	0, 355, 356, 358, 359, 357, 0, 360, 361, 363,
	362, 0, 0, 0, 0, 239, 364, 240, 365, 366,
	0, 367, 368, 0, 0, 369, 370, 0, 0, 371,
	241, 0, 372, 0, 242, 373, 374, 375, 376, 377,
	378, 379, 0, 380, 243, 381, 244, 382, 0, 383,
	384, 385, 386, 387, 388, 245, 389, 390, 0, 391,
	392, 393, 394, 395, 0, 397, 398, 396, 399, 400,
	401, 402, 0, 403, 0, 404, 405, 406, 407, 246,
	408, 0, 412, 413, 414, 415, 416, 417, 418, 0,
	424, 425, 419, 421, 422, 423, 420, 426, 427, 0,
	0, 409, 410, 429, 0, 430, 247, 431, 432, 0,
	442, 433, 434, 435, 411, 436, 440, 441, 437, 438,
	439, 248, 0, 443, 444, 0, 445, 446, 447, 448,
	449, 308, 450, 309, 451, 452, 0, 249, 250, 251,
	453, 0, 0, 454, 455, 252, 253, 0, 456, 457,
	0, 458, 459, 0, 0, 460, 461, 462, 464, 0,
	465, 0, 463, 466, 467, 468, 254, 255, 494, 0,
	469, 256, 0, 0, 0, 0, 470, 471, 257, 472,
	473, 474, 0, 0, 258, 259, 260, 261, 0, 262,
	0, 0, 0, 0, 214, 0, 0, 0, 0, 263,
	264, 265, 215, 216, 266, 217, 267, 268, 218, 0,
	269, 270, 271, 272, 273, 274, 275, 0, 0, 276,
	219, 220, 221, 0, 277, 222, 0, 0, 0, 278,
	279, 280, 281, 282, 0, 284, 285, 286, 283, 0,
	287, 0, 288, 289, 0, 0, 290, 291, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 497, 294, 295,
	296, 223, 224, 0, 297, 0, 298, 0, 299, 0,
	0, 300, 301, 0, 302, 303, 0, 0, 0, 225,
	304, 305, 307, 310, 306, 311, 312, 226, 227, 0,
	0, 0, 0, 0, 0, 0, 313, 314, 315, 228,
	316, 317, 0, 318, 0, 319, 0, 0, 0, 320,
	0, 321, 229, 0, 230, 0, 322, 323, 324, 325,
	326, 327, 1553, 232, 233, 0, 0, 237, 329, 0,
	0, 0, 0, 328, 330, 337, 0, 0, 331, 234,
	333, 332, 334, 335, 336, 235, 0, 236, 0, 338,
	0, 0, 339, 340, 341, 0, 342, 343, 0, 0,
	344, 345, 346, 0, 348, 347, 0, 238, 0, 349,
	350, 0, 0, 351, 352, 0, 0, 353, 0, 354,
	0, 0, 355, 356, 358, 359, 357, 0, 360, 361,
	363, 362, 0, 0, 0, 0, 239, 364, 240, 365,
	366, 0, 367, 368, 0, 0, 369, 370, 0, 0,
	371, 241, 0, 372, 0, 242, 373, 374, 375, 376,
	377, 378, 379, 0, 380, 243, 381, 244, 382, 0,
	383, 384, 385, 386, 387, 388, 245, 389, 390, 0,
	391, 392, 393, 394, 395, 0, 397, 398, 396, 399,
	400, 401, 402, 0, 403, 0, 404, 405, 406, 407,
	246, 408, 0, 412, 413, 414, 415, 416, 417, 418,
	0, 424, 425, 419, 421, 422, 423, 420, 426, 427,
	0, 428, 409, 410, 429, 0, 430, 247, 431, 432,
	0, 442, 433, 434, 435, 411, 436, 440, 441, 437,
	438, 439, 248, 0, 443, 444, 0, 445, 446, 447,
	448, 449, 308, 450, 309, 451, 452, 0, 249, 250,
	251, 453, 0, 0, 454, 455, 252, 253, 0, 456,
	457, 0, 458, 459, 0, 0, 460, 461, 462, 464,
	0, 465, 0, 463, 466, 467, 468, 254, 255, 494,
	0, 469, 256, 0, 0, 0, 0, 470, 471, 257,
	472, 473, 474, 0, 0, 258, 259, 260, 261, 0,
	262, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	263, 264, 265, 215, 216, 266, 217, 267, 268, 218,
	0, 269, 270, 271, 272, 273, 274, 275, 0, 0,
	276, 219, 220, 221, 0, 277, 222, 0, 0, 0,
	278, 279, 280, 281, 282, 0, 284, 285, 286, 283,
	0, 287, 0, 288, 289, 0, 0, 290, 291, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 497, 294,
	295, 296, 223, 224, 0, 297, 0, 298, 0, 299,
	0, 0, 300, 301, 0, 302, 303, 0, 0, 0,
	225, 304, 305, 307, 310, 306, 311, 312, 226, 227,
	0, 0, 0, 0, 0, 0, 0, 313, 314, 315,
	228, 316, 317, 0, 318, 0, 319, 0, 0, 0,
	320, 0, 321, 229, 0, 230, 0, 322, 323, 324,
	325, 326, 327, 231, 232, 233, 0, 0, 237, 329,
	0, 0, 0, 0, 328, 330, 337, 0, 0, 331,
	234, 333, 332, 334, 335, 336, 235, 0, 236, 0,
	338, 0, 0, 339, 340, 341, 0, 342, 343, 0,
	0, 344, 345, 346, 0, 348, 347, 0, 238, 0,
	349, 350, 0, 0, 351, 352, 0, 0, 353, 0,
	354, 0, 0, 355, 356, 358, 359, 357, 0, 360,
	361, 363, 362, 0, 0, 0, 0, 239, 364, 240,
	365, 366, 0, 367, 368, 0, 0, 369, 370, 0,
	0, 371, 241, 0, 372, 0, 242, 373, 374, 375,
	376, 377, 378, 379, 0, 380, 243, 381, 244, 382,
	0, 383, 384, 385, 386, 387, 388, 245, 898, 390,
	0, 391, 392, 393, 394, 395, 0, 397, 398, 396,
	399, 400, 401, 402, 0, 403, 0, 404, 405, 406,
	407, 246, 408, 0, 412, 413, 414, 415, 416, 417,
	418, 0, 424, 425, 419, 421, 422, 423, 420, 426,
	427, 0, 428, 409, 410, 429, 0, 430, 247, 431,
	432, 0, 442, 433, 434, 435, 411, 436, 440, 441,
	437, 438, 439, 248, 0, 443, 444, 0, 445, 446,
	447, 448, 449, 308, 450, 309, 451, 452, 0, 249,
	250, 251, 453, 0, 0, 454, 455, 252, 253, 0,
	456, 457, 0, 458, 459, 0, 0, 460, 461, 462,
	464, 0, 465, 0, 463, 466, 467, 468, 254, 255,
	494, 0, 469, 256, 0, 0, 0, 0, 470, 471,
	257, 472, 473, 474, 0, 0, 258, 259, 260, 261,
	0, 262, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 263, 264, 265, 215, 216, 266, 217, 267, 268,
	218, 0, 269, 270, 271, 272, 273, 274, 275, 0,
	0, 276, 219, 220, 221, 0, 277, 222, 0, 0,
	0, 278, 279, 280, 281, 282, 0, 284, 285, 286,
	283, 0, 287, 0, 288, 289, 0, 0, 290, 291,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 497,
	294, 295, 296, 223, 224, 0, 297, 0, 298, 0,
	299, 0, 0, 300, 301, 0, 302, 303, 0, 0,
	0, 225, 304, 305, 307, 310, 306, 311, 312, 226,
	227, 0, 0, 0, 0, 0, 0, 0, 313, 314,
	315, 228, 316, 317, 0, 318, 0, 319, 0, 0,
	0, 320, 0, 321, 229, 0, 230, 0, 322, 323,
	324, 325, 326, 327, 231, 232, 233, 0, 0, 237,
	329, 0, 0, 0, 0, 328, 330, 337, 0, 0,
	331, 234, 333, 332, 334, 335, 336, 235, 0, 236,
	0, 338, 0, 0, 339, 340, 341, 0, 342, 343,
	0, 0, 344, 345, 346, 0, 348, 347, 0, 238,
	0, 349, 350, 0, 0, 351, 352, 0, 0, 353,
	0, 354, 0, 0, 355, 356, 358, 359, 357, 0,
	360, 361, 363, 362, 0, 0, 0, 0, 239, 364,
	240, 365, 366, 0, 367, 368, 0, 0, 369, 370,
	0, 0, 371, 241, 0, 372, 0, 242, 373, 374,
	375, 0, 377, 378, 379, 0, 380, 243, 381, 244,
	382, 0, 383, 384, 385, 0, 387, 388, 245, 389,
	390, 0, 391, 392, 393, 394, 395, 0, 397, 398,
	396, 399, 400, 401, 402, 0, 403, 0, 404, 405,
	406, 407, 246, 0, 0, 412, 413, 414, 415, 416,
	417, 418, 0, 424, 425, 419, 421, 422, 423, 420,
	426, 427, 0, 428, 409, 410, 429, 0, 430, 247,
	431, 432, 0, 442, 433, 434, 435, 411, 436, 440,
	441, 437, 438, 439, 248, 0, 443, 444, 0, 445,
	446, 447, 448, 449, 308, 450, 309, 451, 452, 0,
	249, 250, 251, 453, 0, 0, 454, 455, 252, 253,
	0, 456, 457, 0, 458, 459, 0, 0, 460, 461,
	462, 464, 0, 465, 0, 463, 466, 467, 468, 254,
	255, 0, 0, 469, 256, 0, 0, 0, 0, 470,
	471, 257, 472, 473, 474, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1301, 0, 0,
	0, 0, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 1325, 1326, 1327, 1301, 0, 0,
	0, 0, 0, 1307, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 1339, 1349, 0, 0,
	1329, 1330, 1331, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 1324, 1325, 1326, 1327, 1301, 0, 0,
	0, 0, 1337, 1307, 0, 1321, 0, 0, 0, 1322,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 1324, 1325, 1326, 1327, 0, 0, 0,
	0, 0, 1337, 1307, 0, 0, 1328, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1347, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 1328, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 1328, 0, 0, 0,
	0, 2241, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 1340, 0, 0, 0,
	1302, 0, 0, 1348, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 1301, 0, 0,
	0, 2240, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 1324, 1325, 1326, 1327, 1301, 0, 0,
	0, 2237, 0, 1307, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 1339, 1349, 0, 0,
	1329, 1330, 1331, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 1324, 1325, 1326, 1327, 1301, 0, 0,
	0, 0, 1337, 1307, 0, 1321, 0, 0, 0, 1322,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 1324, 1325, 1326, 1327, 0, 0, 0,
	0, 0, 1337, 1307, 0, 0, 1328, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1347, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 1328, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 1328, 0, 0, 0,
	0, 2236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 1340, 0, 0, 0,
	1302, 0, 0, 1348, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 1301, 0, 0,
	0, 2235, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 1338, 1348, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 1324, 1325, 1326, 1327, 3038, 0, 1301,
	0, 0, 0, 1307, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 1337, 0, 0, 1307, 0, 1321, 0, 1322,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 0, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 0, 0, 0, 1337, 1307, 1328, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1337, 0, 0, 0, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 3034, 1328, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 2975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 1348, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 1301, 0, 0, 0, 2974,
	0, 0, 0, 1321, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342,
	1343, 1344, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1335, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1324, 1325, 1326, 1327, 1301, 0, 0, 0, 0,
	0, 1307, 0, 1321, 0, 0, 0, 0, 0, 0,
	1318, 0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342,
	1343, 1344, 0, 0, 1339, 1349, 0, 0, 1329, 1330,
	1331, 1335, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 1348, 0, 0, 0, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 1324, 1325, 1326, 1327, 1301, 0, 0, 0, 0,
	1337, 1307, 0, 1321, 0, 0, 0, 1322, 0, 0,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1347, 1339, 1349, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 1324, 1325, 1326, 1327, 0, 0, 0, 0, 0,
	1337, 1307, 0, 0, 1328, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 1347, 1339, 1349, 0, 0, 1329, 1330,
	1331, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 1345,
	1346, 0, 0, 0, 0, 0, 0, 1316, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1337, 0, 0, 0, 1328, 0, 0, 1322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1336, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315,
	1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 0, 0, 1328, 2924, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315,
	1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 0, 0, 0, 0, 2885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1348, 0, 0,
	0, 0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315,
	1341, 0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308,
	1309, 1301, 0, 0, 0, 2796, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1348, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 1325, 1326,
	1327, 1301, 0, 0, 0, 0, 0, 1307, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	1339, 1349, 0, 0, 1329, 1330, 1331, 1335, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1348, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 1324, 1325, 1326,
	1327, 1301, 0, 0, 0, 0, 1337, 1307, 0, 1321,
	0, 0, 0, 1322, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 1324, 1325, 1326,
	1327, 0, 0, 0, 0, 0, 1337, 1307, 0, 0,
	1328, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 1347,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	1328, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	1328, 2753, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	0, 2752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 1301, 0, 0,
	0, 2751, 0, 0, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1324, 1325, 1326, 1327, 1301, 0, 0,
	0, 0, 0, 1307, 0, 1321, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 1299, 1300, 0, 1332, 1333,
	1334, 1342, 1343, 1344, 0, 0, 1339, 1349, 0, 0,
	1329, 1330, 1331, 1335, 0, 0, 0, 0, 0, 0,
	1302, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 1324, 1325, 1326, 1327, 1301, 0, 0,
	0, 0, 1337, 1307, 0, 1321, 0, 0, 0, 1322,
	0, 0, 1318, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 1324, 1325, 1326, 1327, 0, 0, 0,
	0, 0, 1337, 1307, 0, 0, 1328, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1347, 1339, 1349, 0, 0,
	1329, 1330, 1331, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 1345, 1346, 0, 0, 0, 0, 0, 0, 1316,
	1317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1337, 0, 0, 0, 1328, 0, 0, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 1347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 1328, 2723, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1340, 0, 0, 0,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 0, 0, 0, 0, 2543, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 1348,
	0, 0, 0, 0, 1338, 0, 0, 1313, 1314, 1320,
	1319, 1315, 1341, 0, 1312, 1310, 1311, 1303, 1304, 1305,
	1306, 1308, 1309, 1301, 0, 0, 0, 2516, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 0, 0, 0, 0, 0, 1302, 0, 0, 1348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	1325, 1326, 1327, 1301, 0, 0, 0, 0, 0, 1307,
	0, 1321, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1339, 1349, 0, 0, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 1346, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 0, 1324,
	1325, 1326, 1327, 0, 0, 0, 0, 0, 1337, 1307,
	0, 0, 0, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 1339, 1349, 0, 0, 1329, 1330, 1331, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 1346, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1337, 0,
	0, 0, 1328, 0, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 0,
	0, 0, 0, 1835, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 1301,
	0, 2202, 0, 0, 0, 0, 0, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 1299, 1300, 0,
	1332, 1333, 1334, 1342, 1343, 1344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1335, 0, 0, 0, 0,
	0, 0, 1302, 0, 0, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 1325, 1326, 1327, 1301,
	0, 0, 0, 0, 0, 1307, 3115, 1321, 0, 0,
	0, 0, 0, 0, 1318, 0, 0, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 1335, 0, 0,
	0, 0, 2177, 0, 1302, 0, 0, 1348, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 0,
	0, 1316, 1317, 0, 0, 1324, 1325, 1326, 1327, 0,
	0, 1301, 0, 0, 1337, 1307, 0, 2285, 0, 1321,
	2284, 1322, 0, 0, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1347, 1339, 1349,
	0, 0, 1329, 1330, 1331, 0, 0, 0, 0, 0,
	0, 1336, 2178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 0, 0, 0, 0, 3114,
	0, 1316, 1317, 0, 0, 0, 0, 1324, 1325, 1326,
	1327, 0, 0, 0, 1337, 0, 0, 1307, 1328, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 1347, 0, 0,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 1328, 0,
	0, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 1340, 0,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1938, 0, 0, 0, 1323, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	1340, 1937, 0, 0, 1302, 0, 1338, 1348, 0, 1313,
	1314, 1320, 1319, 1315, 1341, 0, 1312, 1310, 1311, 1303,
	1304, 1305, 1306, 1308, 1309, 0, 0, 0, 0, 0,
	0, 1301, 0, 0, 0, 0, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1348, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 1324, 1325, 1326,
	1327, 1301, 0, 0, 0, 0, 0, 1307, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	1339, 1349, 0, 0, 1329, 1330, 1331, 1335, 0, 0,
	0, 0, 0, 0, 1302, 0, 0, 1348, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 1324, 1325, 1326,
	1327, 1301, 0, 0, 0, 0, 1337, 1307, 0, 1321,
	0, 0, 0, 1322, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 1324, 1325, 1326,
	1327, 0, 0, 0, 0, 0, 1337, 1307, 0, 0,
	1328, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 1347,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 1336, 727, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 0, 0, 0,
	1328, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	1328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	1340, 0, 0, 0, 1302, 0, 0, 1348, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	0, 1301, 2520, 0, 0, 0, 0, 0, 0, 1321,
	0, 0, 0, 0, 0, 0, 1318, 0, 0, 1299,
	1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1335, 0, 0,
	0, 2290, 0, 0, 1302, 0, 0, 1348, 1338, 0,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 1324, 1325, 1326,
	1327, 1301, 0, 0, 0, 0, 0, 1307, 0, 1321,
	0, 0, 2295, 0, 0, 0, 1318, 0, 0, 0,
	1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344, 0,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 1335, 0,
	0, 0, 0, 0, 0, 1302, 0, 0, 1348, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 1324, 1325, 1326,
	1327, 0, 1301, 0, 0, 0, 1337, 1307, 0, 0,
	1321, 0, 0, 1322, 0, 0, 0, 1318, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 1346, 0, 0, 0,
	0, 0, 0, 1316, 1317, 0, 0, 0, 1324, 1325,
	1326, 1327, 0, 0, 0, 0, 1337, 0, 1307, 0,
	1328, 0, 0, 1322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 1347,
	0, 1339, 1349, 0, 0, 1329, 1330, 1331, 0, 0,
	0, 0, 0, 1336, 0, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 1345, 1346, 0, 0,
	0, 0, 0, 0, 1316, 1317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1337, 0, 0,
	1328, 0, 0, 0, 1322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1323, 0, 0,
	1347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 0, 0,
	1340, 0, 0, 0, 0, 0, 0, 0, 1338, 2253,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	0, 1328, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1323, 0,
	0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343, 1344,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1335,
	0, 1340, 0, 2234, 0, 0, 1302, 0, 1338, 1348,
	0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312, 1310,
	1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 0, 0,
	0, 0, 0, 1301, 0, 0, 0, 0, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 1318, 0,
	0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 1302, 0, 1338,
	1348, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0, 1312,
	1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 0, 1324,
	1325, 1326, 1327, 0, 1301, 0, 0, 0, 0, 1307,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343,
	1344, 0, 1339, 1349, 0, 0, 1329, 1330, 1331, 0,
	1335, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 1345, 1346, 0,
	0, 0, 0, 0, 0, 1316, 1317, 0, 0, 0,
	1324, 1325, 1326, 1327, 1301, 0, 0, 0, 1337, 0,
	1307, 0, 1321, 0, 0, 1322, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1347, 0, 1339, 1349, 0, 0, 1329, 1330, 1331,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 1346,
	0, 0, 0, 0, 0, 0, 1316, 1317, 0, 0,
	1324, 1325, 1326, 1327, 0, 0, 0, 0, 0, 1337,
	1307, 0, 1328, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 0, 1347, 1339, 1349, 0, 0, 1329, 1330, 1331,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	0, 0, 1340, 0, 0, 0, 0, 0, 1345, 1346,
	0, 0, 0, 0, 0, 0, 1316, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 1328, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 1347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341, 0,
	1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 1302, 0, 0,
	1348, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341,
	0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309,
	0, 0, 0, 0, 1301, 0, 0, 0, 0, 0,
	0, 0, 1321, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 1299, 1300, 0, 1332, 1333, 1334, 1342, 1343,
	1344, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1302, 0, 0,
	1348, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341,
	0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309,
	1324, 1325, 1326, 1327, 1301, 0, 0, 0, 0, 0,
	1307, 0, 1321, 0, 0, 0, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1339, 1349, 0, 0, 1329, 1330, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 1346,
	0, 0, 0, 0, 0, 0, 1316, 1317, 0, 0,
	1324, 1325, 1326, 1327, 0, 0, 0, 0, 0, 1337,
	1307, 0, 0, 0, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1347, 1339, 1349, 0, 0, 1329, 1330, 1331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1316, 1317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1337,
	0, 0, 0, 1328, 0, 0, 1322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 1627, 1612, 1617, 1600, 1637, 1636, 0, 0, 0,
	1602, 1601, 0, 0, 0, 0, 0, 0, 1646, 1645,
	0, 0, 0, 1340, 0, 0, 0, 0, 0, 0,
	0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341,
	0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309,
	0, 0, 0, 0, 0, 0, 0, 1638, 0, 1634,
	1633, 0, 0, 0, 0, 0, 0, 0, 0, 1632,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1631, 1629, 1630,
	0, 1338, 0, 0, 1313, 1314, 1320, 1319, 1315, 1341,
	0, 1312, 1310, 1311, 1303, 1304, 1305, 1306, 1308, 1309,
	0, 0, 0, 0, 0, 0, 1611, 0, 0, 0,
	0, 0, 1616, 0, 0, 0, 0, 1620, 1615, 1621,
	1622, 1623, 1624, 1625, 0, 1619, 0, 0, 0, 0,
	0, 0, 0, 0, 1643, 1644, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1627, 1612, 1617,
	1600, 1637, 1636, 0, 0, 0, 1602, 1601, 0, 0,
	0, 0, 0, 1604, 1646, 1645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1635, 0, 0, 0,
	1613, 1614, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1638, 0, 1634, 1633, 0, 0, 0,
	0, 0, 0, 0, 1628, 1632, 0, 0, 1756, 1754,
	1755, 1758, 1757, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1631, 1629, 1630, 658, 0, 689, 0,
	0, 1605, 1606, 1607, 1608, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1626, 1609, 0, 665, 0,
	0, 0, 1611, 0, 0, 0, 1648, 0, 0, 0,
	663, 0, 0, 1620, 1615, 1621, 1622, 1623, 1624, 1625,
	0, 1619, 0, 1603, 0, 0, 1639, 1640, 1641, 1642,
	1643, 1644, 0, 0, 664, 0, 0, 0, 0, 666,
	0, 0, 0, 694, 0, 0, 0, 0, 0, 672,
	673, 1610, 0, 0, 684, 0, 1647, 0, 0, 1604,
	0, 0, 0, 0, 0, 0, 0, 690, 667, 0,
	0, 0, 1635, 0, 0, 0, 1613, 1614, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 688, 678, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 668, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 670, 0, 0, 0, 1605, 1606, 1607,
	1608, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1626, 1609, 0, 676, 0, 0, 0, 0, 0,
	0, 671, 1648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 675, 0, 0, 0, 0, 1603,
	0, 0, 1639, 1640, 1641, 1642, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1610, 0, 0,
	0, 0, 1647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 0, 0,
	0, 0, 0, 0, 0, 0, 681, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 660, 679,
	692, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 661, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 682, 0, 0, 680, 0, 0,
	0, 695, 696, 0, 0, 0, 0, 0, 693, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 685,
}
var sqlPact = [...]int{

	285, -1000, 7, -1000, -1000, -1000, 257, -1000, -1000, -1000,
	-1000, 256, 250, 248, -1000, 246, 245, 241, 239, 238,
	230, 229, 228, 227, 216, 215, 213, -1000, -1000, 209,
	-1000, -1000, -1000, -1000, 207, 206, 205, -1000, 204, 1380,
	31517, 199, 197, 196, 1972, 49628, 1528, 194, 192, -1000,
	188, 1846, 36899, 1268, 1772, -1000, 187, 186, 2005, 49247,
	431, 1979, 34196, 36512, 1941, 48860, 31130, 1932, 33809, 48473,
	-1000, -1000, 1102, -1000, -1000, 48086, 183, 180, 177, 173,
	171, -1000, 170, 47699, 168, 161, 148, 143, 141, 137,
	133, 131, -1000, 130, 119, 116, 107, 102, 101, 95,
	93, 91, 90, 88, 82, 79, 78, 77, 76, -1000,
	58694, 75, 74, 72, -1000, 1363, 71, 68, 67, 66,
	64, -1000, -1000, 63, 62, 60, 59, 57, 54, -1000,
	179, 53, 52, 51, 50, 49, -1000, 1203, 620, 3162,
	13841, 1264, 1251, 1246, 1244, 1282, 794, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52295, 49628, 48, -43, 47,
	-1000, 2370, 790, 23731, 285, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36125, 35738, 35351,
	29600, 47312, 46925, 10955, 10955, 970, -1000, -1000, -1000, -1000,
	-1000, 4, 32660, 49628, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 310, -1000, -1000, -1000,
	-1000, -1000, -1000, 20132, 585, 19708, 613, 19284, 441, 451,
	-1000, -1000, -1000, 309, -1000, -1000, -1000, -1000, 1308, -1000,
	-1000, -1000, -1000, 46538, 46151, 1999, 45764, 29203, 28806, 45377,
	1812, 1808, 44990, -1000, -1000, 44603, -1000, -1000, 2305, 1973,
	1964, 34964, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44222, 43835, 43448, 43061, 42674, 28409, 28012, 651, -1000,
	-1000, -1000, -1000, 25279, 650, -1000, -1000, -1000, -1000, -1000,
	45, -1000, 40, 39, -1000, 37, 36, 33, 28, 27,
	26, 25, 24, -1000, 23, 21, -1000, 17, 13, -1000,
	12, 11, 1516, 1222, 1445, 42287, 1069, 49628, -1000, 1523,
	-5, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 647, 49628,
	-1000, -1000, 20542, 97, -1000, 643, -1000, 1935, -1000, 20542,
	97, -1000, 1520, 231, 1422, -1000, -1000, -1000, 1377, 1086,
	-1000, -1000, 49628, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2624, 1416, 636, 41900, -1000, 1681, -1000, 772, 14661, -1000,
	958, -1000, 14661, 304, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2197, 1224, 2551, 27615, 1547, 2393, 2289, 2622, 1686, 2231,
	2198, 2195, 2180, 2141, 2621, 1140, 2620, 1059, 890, 2616,
	2118, 2080, 2596, 1480, 909, 2612, 2610, 2047, 1926, -1000,
	-1000, -1000, -1000, 1100, -1000, -1000, -1000, -1000, -1000, -1000,
	38423, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1203, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1649, 2352, 2352, 2352, 2449, 425, 420,
	-1000, 179, -1000, 2385, -1000, 1414, -1000, -1000, -1000, 57702,
	-1000, -1000, 20542, 20542, 20542, 20542, 20542, 1309, -1000, -1000,
	-1000, 675, -1000, 635, 555, 12186, -1000, -1000, 2553, -1000,
	-1000, -1000, 449, 20542, -1000, 303, -1000, -1000, -1000, -1000,
	634, 2600, -1000, 844, -1000, -1000, -1000, 778, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1997, 632, 631, -1000, 630,
	629, 626, -1000, -1000, -1000, 623, 619, 618, 617, 616,
	614, 602, 601, -1000, -1000, -1000, 1226, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 822, -1000,
	822, 822, 559, 559, 600, 597, 563, 595, -1000, -1000,
	594, 559, 589, 588, -1000, -1000, 587, 732, -1000, 729,
	586, 583, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1579, -1000, -1000, 1579, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 968, 51152, -1000, -1000, -1000, 1, 49628, -1000,
	451, 1, -1000, -1000, 579, -1000, 15071, 15071, 15071, -1000,
	-1000, 1515, 20542, -1000, 2368, -1000, 757, -216, 721, 24892,
	-1000, 22957, 721, 681, 27218, -1000, 1924, -1000, -1000, 578,
	301, -1000, -1000, -1000, -1000, -1000, -1000, 2255, 2190, 986,
	-1000, 1183, 2181, -1000, 2440, 2174, 1159, -1000, -1000, 803,
	2173, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1357, -1000, -1000, 1506, 2170, -188, 2042, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1551, -1000, 29981, 32660, 0,
	-1000, -1000, -22, -1000, 10560, 57702, -1000, -1000, -1000, 57702,
	731, -1000, -1000, 2167, -1000, 57702, 710, -1000, -1000, 2166,
	-1000, 1922, 49628, 10955, 49628, 49628, -1000, 577, 1614, 1502,
	-1000, -1000, 32279, 2440, 1613, -1000, -1000, 793, 1612, -1000,
	-1000, 1607, -1000, 451, -1000, -1000, 41513, 51914, 793, 1606,
	-1000, -1000, -1000, 38423, -1000, 49628, -1000, 49628, -1000, 1089,
	-1000, 51533, 155, 2164, -1000, -1000, 155, 2161, -1000, 155,
	2156, -1000, 142, 2154, -1000, -1000, 1429, 2152, -1000, -28,
	2137, -1000, -1000, -28, 2134, -1000, -1000, 20542, -17, -1000,
	-1000, -1000, 790, 30743, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 41126, 29981, 32279, 49628, 34577, 29981, 645, 57702, -1000,
	2507, 58558, 29981, 57702, -1000, 32279, 49628, 1965, -1000, 40739,
	40352, 2356, 764, -1000, -1000, 49628, -1000, 20542, -1000, 2502,
	1659, -11, -1000, -1000, -1000, -1000, -1000, 1666, 1657, 889,
	1139, -1000, 14661, 14661, 2252, -1000, 298, 10955, -1000, -1000,
	1036, 1704, -1000, -1000, -1000, -1000, 29981, 29981, -1000, 39965,
	-1000, -1000, -1000, 1424, 49628, -1000, -1000, 1963, -1000, 31898,
	49628, -1000, 49628, -1000, 49628, -1000, 49628, -1000, 49628, -1000,
	-1000, -1000, -1000, -1000, 2087, 1286, 1956, -1000, 49628, -1000,
	49628, -1000, -1000, -1000, 1662, -1000, -1000, -1000, 39584, 39197,
	38810, -1000, -1000, 1174, -1000, 1012, -1000, -1000, 157, -1000,
	-1000, 1649, -1000, 1432, 1763, 18860, 1673, 20542, 179, -1000,
	-1000, 179, 179, 13417, -1000, -1000, -1000, 49628, -1000, 58392,
	58558, 10955, 980, 20542, 20542, 20542, 20542, 20542, 20542, 20542,
	20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542,
	20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542,
	20542, 20542, 20542, 20542, 20542, 20542, 20542, 20542, 1720, 20542,
	966, 20542, 20542, 20542, 20542, 1513, -1000, -1000, 1368, 483,
	1399, -1000, 2565, 2565, 2565, 58062, 58062, 548, 675, -1000,
	20542, -1000, 97, 20542, 420, 55911, 1530, 2, 11776, -1000,
	-1000, -1000, -1000, 18436, 819, 57702, 10165, 11352, -1000, 2588,
	1125, 1991, 1874, 576, 713, 712, 706, 653, 564, 20542,
	20542, 20542, 20542, 20542, 20542, 20542, 20542, -1000, -1000, -1000,
	-1000, -1000, -1000, 2553, -1000, 18026, 17602, -1000, 2582, 17178,
	16754, -1000, 16330, 21772, 15906, 979, 978, 977, 976, 20542,
	12596, -1000, -11, -1000, 51152, -1000, 49628, 1, 2498, 20542,
	182, -1000, 56769, -1000, 182, 182, 572, -30, 57702, 1725,
	1724, 24118, 1700, 1362, 1362, 1362, -1000, 571, 668, 721,
	7776, 37280, 1385, 721, 721, 260, 323, 418, 22570, 2368,
	37280, -1000, -1000, 49628, 569, 11352, 10955, -4, 1328, -1000,
	33422, 2369, 2298, 2274, 1087, -1000, 1063, 2432, 38423, 2473,
	97, 2348, 1919, -1000, -1000, 961, 38423, 2440, -1000, 58558,
	-1000, 1792, 2421, 1091, 1141, 1091, 1091, 1132, 38423, 956,
	1256, 29981, 2322, 943, -6, 2464, 97, 2307, 1918, 941,
	-1000, -1000, 49628, 10955, 2306, 1010, 718, 0, 32660, 49628,
	290, -1000, 20542, 97, 20542, 97, 1056, -31, 289, 1755,
	1750, 260, -1000, 33041, 2491, 2128, 49628, 1764, -1000, 2440,
	2111, -1000, 1237, -1000, 2109, 2094, 2489, 1499, 1600, -1000,
	-1000, -1000, 1498, 1599, 993, 2092, 809, 539, 2488, 539,
	26444, -1000, 49628, -1000, 49628, -1000, -1000, 49628, -1000, 49628,
	-1000, 49628, -1000, 49628, 49628, -1000, 49628, 29981, 29981, 29981,
	-32, 3066, 30743, -38, 792, 939, -140, -1000, 417, 49628,
	845, 33041, 4612, -40, -1000, 1005, -1000, -1000, -1000, 370,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 822, 568, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 563, 1226, 559, 559, 559, -1000, -1000, -1000, 732,
	-1000, 729, -1000, -1000, -1000, 822, 822, -1000, -1000, -182,
	1914, -22, 34577, 718, -1000, 718, -1000, 1954, -1000, 2299,
	738, -46, 893, -11, -1000, 1579, -1000, 1167, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2599, -1000, 2570, -1000, -1000, 2580, -1, -1000, -1,
	-1000, 10955, -1000, 49628, 1953, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 49628, -1000, 49628, -1000, -1000, -1000, -1000,
	-1000, -1000, 581, -1000, 1951, -1000, 3066, 288, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49628, 49628, 49628, -1000,
	38423, -1000, -1000, -1000, -1000, 57702, -1000, 463, -1000, -1000,
	57702, 1138, 1768, -1000, 1768, -2, -1000, 56479, 1698, 49628,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 763, 518, 518, 984, 984, 984, 984, 2532,
	3143, 3272, 1507, 5056, 5056, 5056, 5056, 5056, 5056, 5056,
	5056, 895, 403, 403, 895, 895, 895, 895, 895, 403,
	403, 403, 5056, 5056, 5056, 58062, 57772, 3436, 20542, 20542,
	938, 1360, 483, 3436, 20542, 3436, 3436, 3436, 3436, -1000,
	1640, -1000, -1000, -1000, -1000, 1908, 558, 21772, 21772, -1000,
	-1000, -1000, 12186, 20542, -1000, -1000, -1000, -1000, 555, 20542,
	-1000, 55981, -241, 414, -186, 287, 49628, 20542, 662, -103,
	-1000, 1096, -1000, 20542, 284, -1000, -1000, -15, 20542, 20542,
	20542, 410, -1000, 408, -1000, 935, -1000, 931, 929, 925,
	-1000, 553, 1340, 551, 550, 20542, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 57631, 53565, 53495, 53205,
	6414, 53135, 53065, -47, -49, 406, -1000, 1904, -186, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 400, -1000, 399, -54,
	-1000, -55, -1000, 391, -1000, 57340, -186, 390, 3817, -1000,
	21772, 21772, 21772, -1000, 388, -1000, 56407, -1000, 762, 761,
	760, 758, 57269, 15482, 15482, 15482, 387, 57199, 20542, -186,
	-1000, -1000, 549, -60, 809, 15071, 23344, 10955, -1000, 809,
	809, 20542, -1000, 20542, 24118, 24118, 1486, 1712, 24118, -1000,
	-1000, -1000, -1000, 37280, 698, 721, 37280, -1000, 2553, 1702,
	-1000, -1000, -1000, 49628, 451, -1000, 37280, 37280, 10955, 721,
	-1000, 385, 7389, -15, 281, 1938, 49628, 49628, 49628, -1000,
	-1000, 1598, 50771, 1590, 58558, 49628, -1000, -1000, 546, 545,
	1697, 1692, 49628, 49628, 50390, 50009, 49628, 1279, 20542, 1560,
	1829, 97, -1000, 755, 542, 49628, 1158, -1000, -1000, -1000,
	-1000, -1000, 49628, -1000, -1000, 2577, -1000, 1091, -1000, -1000,
	-1000, 1091, 2440, 1154, 49628, 29981, 802, 753, 49628, 1276,
	97, -1000, 743, 540, 10955, 1184, -1000, 735, 49628, 1835,
	-1000, 1536, -1000, -1000, 9770, 57702, -1000, 57702, -1000, -1000,
	-1000, 10955, 1787, 1787, 374, -3, -1000, -1000, -1000, -1000,
	-1000, -1000, 1790, 49628, 627, 49628, 97, 49628, 132, 792,
	29981, 49628, 29981, 29981, 29981, 97, 49628, 2090, 49628, 2070,
	2204, 696, 49628, 1406, 20542, 1197, -1000, 25666, 831, 49628,
	1107, 124, -1000, -1000, -1000, 30, 49628, -1000, -1000, 155,
	155, 155, -1000, 142, 1429, -1000, -28, -28, -1000, -1000,
	-1000, 3066, 1897, 38042, 49628, 2522, -1000, 538, 29981, -66,
	-1000, 846, 945, 944, -1000, 58558, -1000, 673, 804, -1000,
	2573, 537, 2553, -1000, 792, 49628, 94, -1000, 800, 1443,
	-1000, 14661, 14661, -1000, 1579, -1000, -1000, 1161, -1000, 1201,
	-1000, -1000, -1000, -1000, 14661, -1000, -1000, 1009, -22, -22,
	-1000, -1000, 443, -1000, 49628, -1000, -1000, -1000, -1000, 1138,
	-1000, 20542, -1000, -1000, -1000, 13417, -1000, -1000, -1000, 49628,
	-189, 20542, 3436, 3436, 20542, 21772, 21772, -1000, 3436, -1000,
	-1000, -1000, -1000, -1000, 1895, 533, 20542, 58558, 5950, 5756,
	-68, 895, -1000, 20542, -1000, 9375, -76, 55555, -1000, -1000,
	672, 2144, -1000, 20542, 56909, 8980, 372, 14251, -1000, 56839,
	-48, -48, -1000, 2598, 1630, 1531, 1236, 1115, 2572, -1000,
	26831, 811, 1406, 55485, 58392, 58558, 20542, 20542, -1000, 20542,
	20542, 20542, -1000, -1000, 2553, -1000, 20542, -1000, -1000, -1000,
	-1000, -1000, 1893, 20542, -1000, 58392, 58558, 21772, 21772, 21772,
	21772, 21772, 21772, 21772, 21772, 21772, 21772, 21772, 21772, 21772,
	21772, 21772, 21772, 21772, 21772, 21772, 1707, 21772, 2555, 2555,
	2555, -1000, 1947, 1893, 20542, 20542, -1000, -1000, -1000, -1000,
	58558, 368, 367, 365, -1000, 20542, -186, 4612, -1000, 1865,
	-1000, -120, -1000, 2368, -1000, -1000, 1865, 1865, -81, 57702,
	-1000, 1486, -1000, 532, 20542, 24118, -1000, 661, -1000, -82,
	-1000, 37280, -1000, 660, -233, -1000, 709, -1000, 451, -1000,
	-1000, -1000, 280, 37280, -1000, -83, -1000, 2486, 364, 10955,
	-1000, -1000, 924, 922, -1000, 2063, -1000, 1582, -1000, 835,
	-1000, 1232, 20542, 24505, 524, 523, 1341, -1000, 2060, 1429,
	2056, 1429, -1000, -1000, 740, -1000, 57702, 522, 521, -1000,
	-4, 1323, -1000, 26063, 20542, -1000, 920, -1000, -1000, -1000,
	2440, 919, -1000, -1000, 1234, 26063, -1000, -1000, -1000, 26063,
	20542, -1000, -6, 918, 26063, 2035, 792, 1890, 1043, -1000,
	-1000, -1000, -1000, -1000, -1000, 1785, 33041, 49628, 520, 49628,
	519, -1000, -1000, 516, 49628, -1000, -1000, 2440, -1000, 793,
	-1000, -1000, 842, 10955, 508, 10955, 1675, 696, 30362, -1000,
	793, 1763, -1000, 57702, -1000, 1107, 13006, 2279, -84, -1000,
	276, -1000, -1000, -1000, 809, 26444, 24118, 20542, 2606, -89,
	-1000, -1000, -1000, -1000, -1000, -1000, 97, -10, 507, -1000,
	708, 702, -22, 1420, 29981, 49628, 49628, -1000, 2561, -1000,
	659, 362, 2553, 359, -1000, -22, 49628, -1000, 1412, 10955,
	49628, 49628, 10955, 49628, -1000, -1000, -11, -1000, -1000, -1000,
	-1000, 49628, -1000, -1000, -1000, 1415, 55415, -1000, 2285, 10955,
	2563, 3436, 3515, 232, 20542, 58558, 58132, -91, 20542, 20542,
	-1000, 658, 57702, -1000, -1000, -1000, -1000, -1000, -1000, 57702,
	20542, 263, -1000, 2595, 20542, 358, 357, 356, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 355, -1000, -1000, 52676,
	-1000, 20542, 352, -1000, 350, 348, 6880, 5595, 55059, 54989,
	54919, 347, 57702, 1947, 57702, -1000, -1000, 765, 765, 1079,
	1079, 1079, 1079, 2555, 279, 751, 615, 389, 389, 389,
	444, 535, 535, 389, 389, 389, 1885, 1631, 499, 3891,
	-1000, -1000, 57702, 57702, 346, -1000, -1000, -1000, -186, 344,
	1854, 2417, -1000, 24118, 1854, 1854, -1000, -1000, 49628, 57702,
	-1000, -216, -1000, 2553, -1000, -1000, 1702, -1000, 8185, -1000,
	10955, -1000, -1000, 7389, -1000, 495, -1000, 259, 49628, 49628,
	49628, 2055, -1000, 3148, -1000, 54563, -92, -1000, 2380, 2380,
	20542, 260, 24505, 49628, -1000, 1483, 1723, 866, 49628, -1000,
	49628, -1000, -1000, 49628, 49628, 49628, 49628, 49628, -1000, 493,
	-94, 49628, 49628, 29981, -1000, -1000, -102, 10955, -1000, 2296,
	-1000, 29981, 949, 1276, 1822, -1000, 490, 24505, 489, 49628,
	33041, 2485, -1000, -1000, -1000, 488, 1984, 1468, 24505, 1463,
	1674, 696, 30362, -1000, 993, 1107, -1000, -1000, -14, -1000,
	525, 97, 49628, 2604, 1406, -1000, -16, 57702, -1000, 701,
	-1000, 37661, 37661, 29981, 29981, -1000, 337, 2241, 2237, 656,
	-1000, -1000, 333, -1000, -22, 1727, -1000, -1000, 1285, 1535,
	-1000, -1000, -1000, -1000, -1000, 2285, 20542, 20542, 58132, -107,
	-1000, 3436, 3436, -1000, 57702, 8585, -1000, 56839, -1000, -1000,
	-1000, -1000, 1288, -1000, 54493, -1000, -1000, -1000, 20542, 20542,
	-1000, -1000, -1000, -1000, -1000, -1000, 21772, 1884, 487, 58558,
	-1000, -1000, 807, 20542, 20542, 2368, 807, 807, -108, 721,
	-1000, -1000, -1000, 2553, 259, -1000, 2568, 10955, -1000, -1000,
	-1000, 49628, -1000, 49628, -1000, 10955, 49628, 1861, 1573, -1000,
	-1000, 1683, 486, 21772, 49628, 748, -1000, 1307, 24505, 2285,
	10955, 2285, 54423, -110, -113, 1567, -1000, -1000, 1564, 20542,
	-1000, 58558, 1429, 1429, -115, -118, -1000, 917, 914, 20542,
	904, -1000, -1000, -1000, 902, -1000, 727, -28, 26063, -1000,
	-1000, 1304, 24505, -123, 24505, -126, 324, 97, 24505, -1000,
	-1000, 49628, -128, 49628, -1000, 696, 30362, -1000, 2204, -1000,
	2200, 49628, 2262, -1000, -1000, -1000, 1763, 483, -1000, -129,
	-1000, -1000, -1000, 481, 479, -1000, -1000, -67, -1000, 717,
	716, -1000, -1000, -1000, 10955, 1004, -1000, 3436, 3436, -1000,
	-1000, -1000, 317, 1406, 2398, -1000, 54067, 53997, 1496, 21772,
	58558, -134, -1000, 49628, 57702, -186, -1000, -1000, -1000, 37280,
	536, -1000, -1000, 1401, -1000, -1000, -1000, 49628, 1575, -1000,
	-1000, 20542, 3891, 476, 20542, -1000, 1785, 472, -1000, -1000,
	-1000, -1000, -1000, -1000, 2380, -1000, 1213, -1000, -1000, 57702,
	2374, -1000, -1000, 471, 469, 49628, 49628, -48, 464, 462,
	26063, -1000, 49628, -139, 1307, -142, -1000, 1785, -1000, -149,
	842, -1000, 461, 30362, -1000, 1675, 1002, -152, 49628, 1107,
	-1000, -1000, 29981, 29981, 1727, -1000, 49628, -1000, 49628, -1000,
	49628, -1000, 1162, 20542, -1000, -1000, 1496, -154, -1000, -125,
	-1000, 2483, -1000, -1000, -1000, -1000, 2052, 53925, 1648, 49628,
	53635, 1276, 49628, 2285, 49628, 839, 10955, 1285, 1285, -1000,
	-1000, 316, 20542, 20542, -1000, 459, -1000, 1785, 1307, 1276,
	1307, 458, 24505, -1000, 1674, 1080, -1000, 809, -1000, -1000,
	-157, -160, -1000, -163, -165, -1000, 313, 21362, 21362, -186,
	-1000, 49628, 456, 2023, -1000, 1444, 1508, 312, 868, -1000,
	-171, -1000, 451, -1000, 20542, -1000, -172, -1000, 830, -173,
	-1000, 829, 2595, -190, -191, 49628, 1276, 1785, -1000, 1785,
	24505, -197, -1000, 26444, -1000, 792, 792, -1000, -1000, -1000,
	-1000, -1000, 22167, 1417, 1133, 56337, -1000, -1000, -1000, 49628,
	-1000, 1456, 1455, 1153, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1648, 57702, -1000, 1285, 1820, -1000, 1285, 1867, -1000,
	-1000, -198, -1000, 1276, 1276, -199, -1000, -168, -1000, -1000,
	2516, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2219, -1000,
	852, 1572, 1572, 1444, -1000, 450, -1000, 442, 1410, -1000,
	-1000, 1307, -1000, 20952, -1000, 2529, -1000, -1000, 1701, -1000,
	-1000, 20542, 20542, -1000, -1000, -1000, 1785, -1000, -1000, -1000,
	-1000, -205, -206, 1276, 1276, 900, -1000, -1000, 430, 20542,
	-214, 1276, -1000,
}
var sqlPgo = [...]int{

	0, 3129, 3127, 1959, 3126, 2555, 3125, 3123, 3121, 3120,
	3119, 2535, 3118, 3116, 3115, 3114, 3105, 3101, 3100, 3099,
	3097, 3094, 3090, 3089, 3088, 3085, 3079, 3075, 3074, 3069,
	3068, 3062, 2532, 3060, 2488, 3058, 3057, 3055, 3054, 3049,
	3045, 3043, 3042, 24, 3041, 3038, 3035, 3031, 2485, 3027,
	3026, 2460, 3025, 3020, 2454, 3018, 3015, 3014, 2440, 2438,
	3012, 3011, 2422, 3010, 3007, 2417, 3004, 2316, 2996, 2992,
	2301, 2983, 98, 100, 2982, 2294, 2981, 2980, 2245, 2241,
	2228, 2978, 2203, 2977, 2974, 2186, 2059, 2973, 233, 2972,
	2970, 2966, 2965, 2043, 2021, 2962, 2961, 2960, 173, 2958,
	2016, 2955, 2952, 2947, 2941, 2940, 2939, 2935, 2934, 2932,
	2930, 2928, 2927, 2926, 2924, 2920, 2919, 2916, 2915, 2914,
	2912, 2911, 2909, 2907, 2906, 2905, 2904, 187, 118, 2903,
	2902, 2002, 1972, 2899, 2898, 50, 48, 15, 81, 132,
	164, 4937, 154, 2896, 2889, 2888, 2887, 2886, 27, 126,
	125, 121, 119, 226, 2884, 2883, 52, 43, 32, 22,
	89, 2882, 2881, 2878, 2184, 90, 2876, 2873, 171, 179,
	2871, 16, 2867, 31, 83, 71, 94, 186, 49, 2865,
	105, 13, 2864, 112, 113, 2862, 72, 42, 25, 4309,
	102, 80, 56, 174, 151, 148, 144, 120, 195, 2861,
	182, 73, 143, 2860, 2859, 2858, 55, 138, 1, 6,
	159, 9, 2856, 17, 2854, 10, 2853, 2850, 2843, 2841,
	23, 114, 39, 29, 2840, 111, 77, 137, 2838, 158,
	2837, 75, 2835, 183, 145, 2, 161, 2834, 79, 20,
	82, 2830, 2824, 106, 163, 2823, 26, 122, 85, 93,
	191, 150, 92, 156, 153, 2821, 2816, 2814, 130, 2813,
	135, 116, 2812, 2810, 115, 28, 2806, 38, 160, 44,
	2804, 2803, 103, 2799, 142, 2798, 2796, 2794, 185, 117,
	133, 8, 54, 87, 5, 162, 95, 62, 59, 2793,
	3065, 1523, 1779, 61, 2792, 101, 74, 35, 86, 109,
	170, 40, 2791, 2788, 1678, 2783, 2781, 2780, 128, 2777,
	2776, 2772, 96, 33, 78, 2771, 99, 47, 155, 184,
	58, 147, 149, 176, 127, 2770, 134, 97, 2768, 141,
	175, 68, 2765, 326, 2764, 139, 2763, 2759, 2758, 2757,
	57, 2756, 2750, 2748, 110, 2746, 104, 2745, 136, 129,
	124, 65, 123, 169, 165, 462, 2743, 140, 30, 2741,
	2667, 36, 0, 4262, 3472, 2740, 146, 91, 2738, 2731,
	2725, 2723, 34, 11, 4, 7, 14, 12, 556, 419,
	2715, 2714, 152, 88, 107, 2708, 188, 157, 2699, 2696,
	2687, 51, 2686, 21, 2685, 18, 2679, 2677, 19, 3,
	2674, 2673, 181, 2655, 2651, 2650, 2458, 2643, 180, 2640,
	2638, 2637, 2633, 2070, 2631, 2627, 45, 37, 131,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	8, 8, 9, 9, 9, 31, 31, 11, 11, 10,
	10, 10, 12, 7, 7, 7, 7, 7, 7, 7,
	14, 14, 23, 23, 15, 25, 18, 408, 408, 27,
	13, 21, 19, 19, 28, 17, 17, 24, 24, 150,
	150, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	407, 407, 152, 152, 151, 147, 147, 410, 410, 153,
	153, 153, 155, 155, 32, 32, 86, 86, 86, 138,
	79, 79, 79, 79, 79, 74, 74, 360, 360, 361,
	361, 134, 134, 135, 135, 135, 135, 136, 136, 137,
	137, 137, 46, 34, 34, 34, 34, 34, 34, 34,
	35, 35, 35, 35, 36, 36, 36, 36, 36, 36,
	37, 37, 37, 37, 37, 37, 44, 44, 128, 128,
	47, 47, 47, 47, 47, 47, 47, 47, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 58, 58, 56, 328, 328, 59, 59, 60,
	60, 60, 60, 60, 60, 61, 61, 61, 61, 61,
	61, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 68, 68, 68, 69, 69, 69, 66, 66, 66,
	64, 64, 64, 63, 63, 63, 67, 67, 67, 65,
	65, 65, 234, 234, 70, 70, 70, 70, 70, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 73, 73, 73, 73, 73,
	73, 73, 73, 330, 330, 71, 71, 302, 302, 75,
	75, 259, 259, 76, 76, 76, 76, 76, 77, 77,
	77, 77, 87, 87, 87, 87, 406, 406, 227, 227,
	168, 168, 168, 168, 82, 82, 82, 82, 83, 83,
	83, 84, 84, 133, 133, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 38, 38, 38, 39, 39,
	40, 40, 41, 41, 42, 42, 43, 43, 43, 43,
	43, 94, 94, 94, 96, 93, 93, 93, 95, 95,
	95, 95, 97, 97, 98, 98, 98, 98, 98, 98,
	99, 99, 354, 354, 237, 237, 352, 352, 353, 353,
	204, 204, 204, 204, 204, 205, 205, 205, 359, 359,
	359, 359, 359, 359, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 118, 118, 118, 127, 127,
	127, 127, 127, 127, 127, 120, 120, 120, 111, 111,
	101, 101, 101, 101, 107, 107, 107, 107, 107, 102,
	102, 108, 108, 110, 110, 112, 112, 112, 112, 112,
	112, 103, 103, 103, 103, 114, 114, 114, 114, 113,
	113, 123, 123, 123, 123, 123, 123, 123, 315, 315,
	119, 119, 119, 119, 122, 122, 122, 122, 117, 117,
	117, 121, 121, 124, 124, 124, 124, 104, 104, 105,
	105, 106, 106, 125, 125, 116, 116, 126, 126, 126,
	126, 126, 126, 126, 115, 115, 115, 409, 409, 109,
	404, 404, 402, 402, 402, 402, 402, 402, 402, 403,
	403, 405, 405, 80, 80, 80, 52, 52, 53, 53,
	206, 206, 207, 207, 283, 283, 283, 283, 208, 208,
	154, 154, 154, 211, 212, 212, 209, 209, 210, 210,
	210, 214, 214, 213, 216, 216, 215, 282, 370, 370,
	371, 371, 371, 371, 371, 371, 371, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 368, 368, 368,
	369, 366, 366, 367, 367, 367, 367, 411, 411, 281,
	281, 220, 220, 373, 373, 373, 373, 374, 374, 374,
	374, 374, 377, 376, 375, 375, 375, 375, 375, 311,
	311, 311, 57, 57, 57, 248, 248, 247, 247, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 130, 130, 54, 54, 54, 160, 160, 51,
	51, 51, 55, 55, 50, 50, 50, 50, 50, 265,
	265, 265, 263, 263, 225, 225, 317, 317, 317, 172,
	172, 173, 173, 148, 148, 148, 20, 22, 22, 16,
	16, 16, 16, 16, 16, 29, 29, 30, 30, 26,
	26, 264, 264, 266, 266, 81, 81, 85, 85, 85,
	91, 91, 129, 129, 129, 129, 129, 129, 129, 33,
	33, 33, 33, 45, 45, 45, 45, 89, 414, 414,
	414, 90, 90, 413, 413, 167, 167, 167, 167, 169,
	169, 278, 278, 279, 279, 415, 415, 280, 280, 280,
	162, 161, 163, 163, 49, 49, 49, 156, 156, 157,
	157, 158, 158, 159, 159, 416, 416, 78, 78, 78,
	132, 132, 200, 200, 274, 274, 274, 221, 221, 178,
	178, 277, 277, 275, 275, 275, 246, 246, 246, 131,
	131, 230, 230, 239, 239, 240, 240, 325, 325, 241,
	88, 88, 141, 141, 139, 139, 139, 139, 139, 139,
	140, 140, 140, 142, 142, 142, 142, 142, 142, 142,
	145, 145, 145, 145, 146, 146, 146, 144, 144, 384,
	384, 384, 386, 386, 387, 383, 383, 385, 385, 412,
	412, 250, 250, 250, 218, 219, 217, 217, 417, 417,
	223, 223, 222, 224, 224, 316, 316, 316, 244, 244,
	244, 244, 269, 269, 267, 267, 268, 268, 270, 270,
	271, 271, 271, 272, 272, 273, 273, 243, 243, 298,
	298, 143, 143, 143, 229, 229, 229, 231, 231, 288,
	288, 288, 289, 289, 287, 287, 287, 287, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 319, 319, 232,
	232, 320, 276, 276, 400, 400, 400, 401, 401, 314,
	314, 321, 321, 321, 321, 321, 321, 312, 312, 313,
	313, 326, 327, 327, 253, 253, 253, 253, 251, 251,
	252, 252, 322, 322, 322, 322, 245, 245, 323, 323,
	323, 284, 284, 331, 331, 331, 346, 346, 228, 228,
	228, 341, 341, 332, 332, 332, 332, 332, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	335, 335, 335, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 345, 345, 345, 345, 345, 336, 336, 342, 343,
	337, 338, 344, 344, 344, 344, 348, 348, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 340, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 261, 261, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 292, 292, 292, 292, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 378, 378, 378, 378, 378, 378, 378, 378, 381,
	381, 382, 382, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 388, 388, 389, 389, 391, 391, 392, 392,
	393, 394, 394, 394, 395, 396, 396, 390, 390, 397,
	397, 397, 398, 398, 399, 399, 399, 399, 399, 304,
	304, 310, 310, 310, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	170, 170, 170, 170, 170, 236, 236, 235, 235, 301,
	301, 299, 299, 303, 303, 254, 254, 347, 347, 347,
	347, 347, 347, 347, 255, 255, 255, 262, 256, 256,
	257, 257, 257, 257, 257, 295, 296, 258, 258, 258,
	297, 297, 305, 309, 309, 308, 307, 307, 306, 306,
	285, 285, 286, 286, 242, 242, 418, 418, 238, 238,
	324, 324, 324, 324, 202, 202, 233, 233, 201, 201,
	195, 195, 196, 196, 196, 196, 226, 226, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 349,
	349, 349, 350, 351, 300, 188, 187, 175, 176, 186,
	185, 184, 174, 177, 181, 182, 183, 179, 180, 191,
	190, 189, 329, 197, 197, 198, 198, 198, 199, 199,
	199, 199, 171, 171, 192, 192, 193, 194, 194, 164,
	164, 164, 165, 165, 166, 166, 358, 358, 356, 356,
	356, 357, 357, 357, 357, 355, 355, 355, 355, 355,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 4, 6, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 6, 4, 6, 6, 6, 5, 1, 1, 5,
	7, 7, 7, 10, 7, 4, 12, 4, 12, 1,
	3, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	5, 8, 12, 12, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 5, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 1, 1,
	1, 2, 1, 2, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 1,
	2, 1, 7, 3, 6, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 3,
	5, 3, 1, 3, 2, 2, 5, 6, 3, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 3, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 4, 4, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 5, 4, 6, 4, 5, 6, 5, 1, 0,
	2, 3, 3, 3, 6, 4, 2, 3, 4, 2,
	3, 3, 3, 4, 3, 3, 3, 4, 4, 4,
	4, 4, 4, 2, 3, 2, 3, 7, 7, 8,
	10, 7, 4, 5, 5, 5, 3, 1, 1, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 8, 11, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 4, 7, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 7, 3, 1, 0, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 2, 2, 2, 2,
	2, 3, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 6, 3, 13, 16, 9, 12, 4, 2,
	2, 0, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 1, 1, 2, 3,
	0, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 2,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 2, 4, 2, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 1, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 5, 5, 3, 1, 1, 2, 2, 1,
	5, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 8, 6, 4, 6,
	6, 6, 4, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 3, 1,
	1, 1, 1, 5, 3, 1, 1, 3, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 7, 1, 7,
	5, 3, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 424, -4, -32, -34, -46, -44,
	-47, -76, -59, -60, -61, -75, -70, -74, -77, -78,
	-79, -80, -71, -86, -85, -87, -91, -38, -88, -81,
	-82, -92, -100, -129, -130, -131, -132, -5, -11, 25,
	36, -35, -36, -37, 51, 78, 66, -54, -51, -48,
	-58, 80, 100, -385, 104, -62, -65, -67, 108, 116,
	121, 122, 146, 155, 257, 264, 286, 288, 290, 299,
	-40, -39, 117, -139, -141, 284, -83, -84, -93, -94,
	-95, -96, -133, 317, -101, -102, -103, -104, -105, -106,
	-107, -108, -109, -110, -111, -112, -113, -114, -115, -116,
	-117, -118, -119, -120, -121, -122, -123, -124, -125, -126,
	320, -33, -45, -90, -89, 365, -6, -7, -8, -9,
	-10, -12, -22, -49, -50, -52, -53, -55, -57, -56,
	-384, -63, -64, -66, -68, -69, -142, -140, 421, 285,
	375, 37, 329, 67, 112, 294, 20, -14, -18, -15,
	-17, -19, -16, -23, -27, -25, -24, -26, -28, -29,
	-30, -31, -20, -21, -13, 392, 400, -145, -143, -144,
	-146, 306, 383, 342, 425, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 2, 342, 386, 307,
	376, 93, 168, 269, 255, -402, 2, 4, -364, -362,
	-196, -195, 342, 93, 30, 38, 39, 41, 44, 56,
	57, 58, 61, 97, 98, 115, 123, 124, 135, 148,
	150, 158, 159, 160, 175, 181, 183, 163, 203, 232,
	234, 247, 251, 261, 263, 272, 296, 323, 338, 354,
	355, 356, 362, 363, 383, 384, 388, 395, 20, 21,
	22, 23, 25, 35, 36, 37, 40, 42, 43, 46,
	47, 48, 49, 50, 51, 52, 55, 60, 65, 66,
	67, 68, 69, 74, 71, 72, 73, 76, 78, 79,
	82, 83, 91, 92, 94, 95, 96, 100, 102, 104,
	107, 108, 110, 111, 116, 117, 120, 118, 348, 350,
	119, 121, 122, 132, 133, 134, 136, 137, 139, 141,
	145, 147, 152, 153, 154, 155, 156, 157, 169, 164,
	170, 174, 177, 176, 178, 179, 180, 171, 185, 188,
	189, 190, 192, 193, 196, 197, 198, 201, 200, 205,
	206, 209, 210, 213, 215, 218, 219, 222, 220, 221,
	224, 225, 227, 226, 233, 235, 236, 238, 239, 242,
	243, 246, 249, 252, 253, 254, 255, 256, 257, 258,
	260, 262, 264, 266, 267, 268, 269, 270, 271, 273,
	274, 276, 277, 278, 279, 280, 284, 282, 283, 285,
	286, 287, 288, 290, 292, 293, 294, 295, 297, 318,
	319, 331, 299, 300, 301, 302, 303, 304, 305, 309,
	313, 310, 311, 312, 307, 308, 314, 315, 317, 320,
	322, 324, 325, 328, 329, 330, 332, 335, 336, 337,
	333, 334, 327, 340, 341, 343, 344, 345, 346, 347,
	349, 351, 352, 357, 360, 361, 365, 366, 368, 369,
	372, 373, 374, 379, 375, 377, 380, 381, 382, 387,
	393, 394, 396, 397, 398, -194, -164, 414, -193, 424,
	424, 424, 2, 189, 190, 268, 267, 314, 315, -189,
	-192, -193, -194, -164, 4, -362, -364, 93, 240, 424,
	424, 424, 2, 342, 330, 55, 307, 376, 292, 386,
	-263, 185, 93, 371, -164, 264, 24, 2, 102, 174,
	374, 373, 24, 260, 308, 344, 346, 2, 424, 424,
	2, 386, 307, 342, 168, 93, 376, 292, -183, 2,
	-164, -73, 2, 421, 27, -72, -5, -48, -58, -62,
	-75, -70, -11, -32, -34, -54, -51, -59, -65, -67,
	-79, -78, -80, -82, -86, -85, -88, -93, -94, -100,
	-131, -132, 80, 25, 108, 317, 117, 184, 2, -406,
	-227, 2, 24, -168, -164, 80, 146, 306, -138, 342,
	2, -164, 189, 190, 2, -183, 2, -402, 2, 189,
	190, 2, -406, -227, 23, 2, -164, 2, 303, 320,
	-169, 2, 299, -164, 424, 424, 424, 424, 424, 424,
	210, 60, 296, 314, -98, 361, -97, 354, 301, -99,
	-354, 2, 222, -164, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 2, -127,
	314, 330, 153, 36, 60, 24, 65, 94, 147, 168,
	169, 197, 75, 76, 267, 210, 190, -315, 119, 315,
	343, 302, 340, 361, 80, 377, 293, -409, 118, 4,
	93, 222, 316, 354, 69, 347, 348, 424, 424, 424,
	-412, 2, 342, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, -140, -142, -141, 424, 424, 424,
	424, 424, -222, -223, 370, 182, 114, 245, -139, -141,
	2, -384, -127, 314, 2, 60, 24, -352, 2, -290,
	240, -292, 412, 413, 407, 228, 399, -304, 99, 217,
	216, -294, -305, 115, 296, 421, -199, -293, 427, 9,
	-381, -141, 31, 53, -197, -164, 7, 8, 5, 6,
	-171, -333, -300, -340, 364, 125, 231, -378, -379, -198,
	4, -362, -356, -334, -343, -338, -339, -341, 42, 49,
	48, 351, 221, 309, 310, 311, 312, 324, 379, 164,
	40, 238, 239, 176, 183, 63, 85, 86, 84, 89,
	88, 90, 87, 316, 376, 54, 30, 158, 159, 163,
	232, 160, 61, -380, 43, 95, 107, 136, 137, 177,
	178, 179, 180, 192, 193, 334, 357, 39, 41, 44,
	56, 57, 97, 98, 123, 124, 135, 148, 175, 181,
	203, 234, 251, 261, 272, 323, 338, 354, 355, 356,
	362, 363, 384, -363, -344, 81, 126, 144, 173, 161,
	186, 187, 191, 204, 207, 223, 230, 248, 250, 291,
	321, -413, 2, 361, 361, 2, -413, 2, -413, 2,
	-167, 2, 361, 358, -414, 361, 395, -386, 273, -387,
	-183, -386, 424, 424, 426, 424, -217, -218, -219, 2,
	24, 105, 421, 2, -318, 2, 419, -322, -141, 199,
	-321, 421, -319, -189, 241, -382, 297, -378, -379, -171,
	-164, -198, 4, 217, 216, -3, 2, -322, 158, -189,
	2, -322, 158, 2, -190, 158, -322, -192, 2, -360,
	158, -358, 9, -357, 5, 4, -362, -364, -363, 63,
	2, -174, -164, 2, -201, 158, -189, -186, -355, 4,
	-362, -364, -363, -365, 24, 26, 27, 28, 29, 31,
	32, 33, 34, 45, 53, 54, 59, 62, 64, 75,
	80, 84, 85, 87, 86, 88, 89, 90, 99, 101,
	103, 105, 106, 109, 112, 114, 125, 127, 140, 142,
	143, 146, 149, 151, 162, 168, 172, 182, 184, 199,
	202, 208, 211, 212, 228, 229, 231, 237, 240, 241,
	244, 245, 259, 265, 275, 289, 306, 316, 326, 339,
	342, 353, 358, 359, 364, 370, 371, 376, 378, 385,
	386, 389, 390, 391, 392, -187, -355, 358, 426, -233,
	-195, -196, -226, -164, 423, -290, 2, -88, 2, -290,
	158, 2, -88, 158, 2, -290, 158, 2, -88, 158,
	2, -220, 421, 423, 342, 64, 2, -189, 158, -179,
	2, -164, 140, -190, 158, 2, -192, -360, 158, 2,
	-360, 158, 2, -191, 2, -189, 168, 168, -174, 158,
	2, -164, 24, 143, 2, 184, 2, 184, 2, -323,
	2, -322, -234, 158, 2, -189, -234, 158, 2, -234,
	158, 2, -202, 158, 2, -201, -174, 158, 2, -361,
	158, 2, -360, -361, 158, 2, -259, 421, -330, 2,
	-329, -357, 383, 421, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 314, -138, 240, 358, 426, 421, -189, -290, -88,
	-302, 421, 143, -290, -88, 240, 143, 242, 2, 93,
	342, 398, 24, -164, 2, 318, 2, 421, -98, 58,
	361, -279, 2, -280, -161, -162, -163, 188, 266, 271,
	398, -352, 358, 404, 143, -352, -237, 423, -127, 2,
	140, 378, 2, 7, 2, -360, 270, 132, 2, 318,
	2, 267, 315, 60, 143, 2, 2, -404, 2, 240,
	143, 2, 143, 2, 143, 2, 143, 2, 143, 2,
	2, 267, 315, 2, 360, 198, 360, 2, 143, 2,
	143, 2, 5, 2, 188, 266, 331, 2, 342, 386,
	307, 2, 2, 143, 2, 143, 398, 2, -245, -322,
	-222, -223, -244, -267, -268, 208, 127, 237, -250, 24,
	105, -250, -250, 47, 422, 422, -127, 318, 2, 10,
	11, 62, 35, 412, 413, 414, 415, 138, 416, 417,
	410, 411, 409, 402, 403, 406, 194, 195, 77, 405,
	404, 70, 214, 298, 128, 129, 130, 131, 281, 165,
	166, 167, 13, 14, 15, 28, 244, 207, 399, 161,
	321, 407, 16, 17, 18, 186, 187, 230, 38, 162,
	-170, -203, -290, -290, -290, -290, -290, 250, -242, -285,
	419, -141, 421, 421, -141, -290, -304, -235, 421, -351,
	7, -141, -299, 419, -306, -290, 423, 421, 5, 421,
	5, -388, 393, 140, 421, 421, 421, 421, 421, 421,
	421, 421, 421, 421, 421, 421, 421, 263, -348, 387,
	-348, -348, -335, 421, -335, 421, 421, -336, 421, 421,
	421, -335, 421, 421, 421, 394, 400, 394, 400, 421,
	421, -278, -279, -278, 358, -169, 426, -386, -220, 421,
	-238, -324, -290, 414, -238, -238, 240, -235, -290, 81,
	-253, 191, 223, 144, 204, 291, 173, -351, -73, -287,
	427, -314, 400, -141, -319, -164, -141, -321, 421, -318,
	-314, 414, -189, 421, 143, 421, 423, -150, 282, -149,
	22, 25, 108, 381, 120, -210, 170, 255, 115, 327,
	-408, 117, 300, 349, 350, 282, 115, -247, -249, 32,
	91, 225, 252, 50, 156, 216, 217, 329, 115, 282,
	392, 115, 117, 282, -152, 327, -408, 117, 300, 282,
	-151, -210, 115, 427, 117, 235, -360, -233, 426, 426,
	-355, 414, 115, 115, 115, 115, 143, -226, -355, -189,
	-197, -164, -198, 421, -220, 228, 240, -402, -248, -247,
	228, -160, -383, 392, 228, 228, -220, -176, 158, 2,
	-165, -164, -176, 158, -383, 228, -323, -200, -189, -200,
	317, -183, 32, -153, 426, 52, 287, 115, -153, 115,
	-153, 115, -153, 426, 115, -153, 115, 426, 115, 115,
	-235, 422, 426, -330, -360, -402, -226, -168, -360, 143,
	80, 421, 32, -301, -331, -332, -333, -342, -337, -340,
	42, 49, 48, 351, 221, 309, 310, 311, 312, 324,
	379, 164, 40, 238, 239, 176, 4, 41, -344, 183,
	175, 177, 178, 179, 180, 181, 323, 39, 272, 136,
	137, 135, 107, 98, 97, 234, 44, 43, 95, 354,
	355, 356, 357, 192, 193, 57, 56, 384, 334, -361,
	-402, -226, 140, -174, 2, -189, 2, 71, 72, 398,
	-354, -235, 32, -279, 2, -415, 426, 206, -205, 213,
	227, 152, 241, 396, -359, 5, 4, -300, -311, 99,
	210, -340, 8, 413, -349, 7, 412, -353, -352, -353,
	83, 423, -355, 342, 192, -360, -360, -354, 24, 319,
	2, -189, -405, 140, -403, 292, -402, -189, -189, -189,
	-189, -189, 140, 2, 360, 2, 140, -164, -164, 206,
	-189, 2, -191, 2, -190, 2, 342, 168, 342, -153,
	426, -244, -268, -267, -270, -290, 24, -273, 134, 224,
	-290, -292, -140, -140, -140, -224, -316, -290, 265, 168,
	-354, -346, -331, -345, 277, 278, 276, 280, 279, -331,
	-188, -355, 354, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
	-290, -290, -290, -290, -290, -290, -290, -290, 207, 161,
	321, 38, 162, -290, 358, -290, -290, -290, -290, 220,
	228, 231, 364, 125, 372, 105, 235, -418, 339, 34,
	-297, -141, 421, -310, 29, 326, 24, -304, 296, 421,
	-285, -290, -286, -236, -235, 422, 32, 426, -236, -303,
	-299, -309, -308, 389, -355, 414, 422, -235, 385, 24,
	105, 414, 2, 7, -260, 397, 219, 96, 154, 218,
	-261, 305, -389, 133, 149, 421, 422, 2, 422, 2,
	422, 2, 422, 2, 422, 2, -290, -290, -290, -290,
	-290, -290, -290, -235, -351, -254, 2, -347, -235, 4,
	397, 219, 96, 154, 218, 305, -254, 2, 7, -235,
	2, -235, 2, -255, 2, -290, -235, -256, -291, -292,
	412, 413, 407, -304, -257, 2, -290, -236, 354, 354,
	354, 354, -290, 45, 202, 359, -258, -290, 143, -235,
	-169, -387, 32, -235, -229, 426, 143, 32, 4, -229,
	-229, 421, 422, 426, 191, 191, -318, -253, 191, -251,
	248, -251, -251, -400, 421, 420, -314, -175, 419, 428,
	-355, -313, -312, 32, -183, 246, -314, -314, 423, 422,
	-313, -189, 421, -235, -355, 426, 358, -264, 75, 64,
	-282, 158, 64, -366, -177, 75, -367, -164, 59, 371,
	265, 142, -264, 75, -264, 75, 75, 317, 330, 47,
	-322, 35, -88, 73, 143, 358, -322, -249, -331, 91,
	216, 217, 47, -350, -349, 413, -350, 47, -350, -350,
	-350, 392, -190, -322, 358, 256, -360, 73, 358, 426,
	35, -88, 73, 143, 358, -201, -175, 73, 342, -327,
	-326, 401, -195, -164, 423, -290, -88, -290, -88, 332,
	422, 423, 186, 186, -206, -207, -164, -283, -282, -368,
	-369, -366, 185, 168, 371, 126, 32, 115, -226, -328,
	184, 115, 256, 115, 115, 32, 240, 228, 240, 228,
	-156, 345, 115, -284, 390, -274, -88, 421, 99, 32,
	-274, -239, -240, -325, -241, -177, 421, -183, -189, -234,
	-234, -234, -201, -202, -174, -360, -361, -361, 422, -73,
	-329, 422, -137, 392, 358, 392, 422, -138, 378, -207,
	-72, 25, 80, 108, 422, 426, -228, 31, 419, -260,
	421, -348, 421, -137, -326, 143, -227, -327, -327, 140,
	72, 404, 358, 422, 361, -280, -204, 271, 325, 283,
	313, 8, 7, 7, 426, -355, -189, 140, -226, -226,
	314, -73, 140, -73, 423, -189, -201, -189, -322, -271,
	-349, 421, -272, 296, 297, 426, -148, 33, 103, 196,
	-189, 398, -290, -290, 358, -418, 339, -297, -290, 220,
	231, 364, 125, 372, 105, 235, 143, 421, -291, -291,
	-235, -290, 420, 430, 422, 423, -226, -290, 420, 420,
	426, -307, -308, 109, -290, 423, -417, 426, -222, -290,
	-235, -235, 422, 422, 358, 358, 358, 358, 421, -394,
	249, 421, 421, -290, 32, 426, 426, 426, 422, 426,
	426, 426, 422, 422, 426, 422, 143, 422, 422, 422,
	422, 422, -262, 259, 422, 10, 11, 412, 413, 414,
	415, 138, 416, 417, 410, 411, 409, 402, 403, 404,
	70, 214, 298, 13, 14, 15, 186, 162, -291, -291,
	-291, 422, -295, -296, 143, 140, 398, 398, 398, 398,
	32, -258, -258, -258, 422, 143, -235, 421, 422, -284,
	-324, -231, 2, -318, -185, -355, -284, -284, -235, -290,
	-318, -318, -252, 378, 240, 191, -318, -312, 422, -401,
	-351, -314, -313, -351, -289, -288, 141, 226, -183, -220,
	-313, -313, -355, -314, 422, -232, -320, -382, -417, 423,
	-149, -189, -177, -184, -164, 228, -282, 158, -155, 228,
	-331, -184, 421, 421, 196, 196, -177, -184, 158, -177,
	158, -184, -184, -407, 271, 236, -290, 209, 269, 229,
	-150, 282, -88, 398, 421, -191, 282, -197, -350, -350,
	-247, 282, -190, -360, 392, 398, -174, -151, -88, 398,
	421, -175, -152, 282, 398, -189, -134, 157, 235, 414,
	-355, -128, 5, 231, -128, 422, 426, 168, -176, 168,
	-182, -165, -88, -189, 143, -137, -360, -190, -360, -360,
	-360, -88, -189, 115, -189, 115, -157, 111, -416, 404,
	-174, -223, -222, -290, -246, -277, 289, 240, -221, -178,
	-177, 383, -183, -246, -230, 426, 143, 404, 423, -221,
	-153, -153, -153, -153, -153, -73, 143, -136, 243, -135,
	-164, 5, -226, 23, 421, -360, 422, -331, 419, 420,
	7, 7, 421, -351, -137, -226, 143, -41, 392, 269,
	93, 342, 255, 168, -352, -352, -279, 369, 68, 271,
	-352, 342, 314, -73, -164, -272, -290, -316, -189, 427,
	-290, -290, -291, -291, 143, 421, -290, -301, 28, 28,
	422, -286, -290, 414, -355, 422, 422, -299, 112, -290,
	353, -355, 414, 422, 385, -417, -417, -417, 5, 219,
	154, 218, -261, 218, -261, -261, 7, -395, -180, 421,
	-164, 390, -222, 422, -346, -331, -290, -290, -290, -290,
	-290, -351, -290, -295, -290, -346, -331, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, -291, -291, -291, -291,
	-291, -291, -291, -291, -291, -291, 105, 228, 235, -291,
	-296, -295, -290, -290, -331, 422, 422, 422, -235, -72,
	-243, 149, -327, 426, -243, -243, 422, -252, 421, -290,
	-318, 420, 422, 426, -313, 420, 426, 429, 404, -220,
	423, -312, 422, 426, -276, 32, 422, -355, 358, 358,
	115, 228, 380, -370, -367, -290, -225, -317, -177, -382,
	421, -164, 421, 421, -147, 108, 317, -266, 115, -153,
	115, -153, 396, 421, 421, 358, -264, 75, -293, -171,
	-235, 358, 358, 256, -293, -293, -235, 358, -293, 117,
	-137, 143, 341, -208, 171, -283, -165, 421, -176, 421,
	421, -220, -189, -248, -160, -265, 378, -175, 421, -175,
	-158, 201, -416, -358, -383, -269, -267, -246, -238, 229,
	74, 422, 426, 423, -284, -240, -231, -290, 2, 422,
	-88, 426, 421, 404, 404, 242, -360, -138, -138, 7,
	420, 422, -351, 422, -226, 243, -186, -174, -189, -187,
	-201, -189, 241, 422, -148, -175, 28, 28, -290, -301,
	422, -290, -290, 420, -290, 423, 5, -290, 422, 422,
	422, 422, -396, -164, -290, 422, 422, 422, 426, 426,
	422, 422, 422, 422, 422, -296, 143, 105, 235, 421,
	422, 422, -298, 151, 47, -318, -298, -298, -226, -287,
	-351, -288, -175, 419, -355, -320, 421, 423, -177, -184,
	-282, 115, -371, 75, -372, 62, 126, 80, 228, 231,
	371, 265, 59, 99, 275, 32, 422, 422, 426, -173,
	62, -173, -290, -225, -226, 228, 336, 99, 228, 99,
	92, 366, -177, -184, -226, -226, -189, -177, -184, 421,
	422, -191, -190, -360, 422, -175, 73, -361, 354, -209,
	-210, 162, 421, -225, 421, -226, -206, 32, 421, 145,
	46, 240, -225, 240, -159, 200, -416, -358, -156, -246,
	-275, 421, 240, -88, -178, 2, -223, 404, -135, -136,
	-360, -360, 422, 92, 92, 420, 422, -42, -43, 168,
	75, 258, -212, -211, 255, 235, -148, -290, -290, 422,
	-355, 414, -417, -390, 255, 422, -290, -290, -291, 143,
	421, -301, -391, 391, -290, -235, -391, -391, 422, -314,
	-351, 2, -282, -184, -188, -181, -164, 126, 158, 231,
	196, 421, -291, -189, 421, 2, -281, -411, 79, 337,
	-317, -148, -188, -148, 422, 422, 422, 231, 231, -290,
	-331, -153, -153, 422, 422, 358, 358, -235, 358, 358,
	398, -293, 253, -225, 422, -225, 422, 422, -88, -225,
	-189, 422, -189, -416, -358, -157, 106, -226, 75, -269,
	-297, 422, 421, 421, 426, 24, 421, 24, 421, -187,
	342, 422, -223, 47, 422, 422, -291, -301, 422, -392,
	-393, -180, -313, 420, -372, -181, 228, -290, -166, 421,
	-290, -208, 421, -173, 275, -172, 62, 421, 421, -177,
	-184, -417, 421, 421, -293, -189, 422, -281, 422, -208,
	422, -265, 421, -358, -158, 373, 229, 422, -184, -246,
	-361, -361, -43, -226, -226, -189, -397, 269, 297, -235,
	422, 426, 32, 115, 422, -373, 215, -164, 422, -209,
	-226, -148, -189, -410, 378, -188, -214, -213, -211, -216,
	-215, -211, 422, -235, -235, 421, -208, -281, -209, -281,
	421, -225, -159, 317, -284, 422, 422, 422, 422, 422,
	-398, -399, 38, 368, 83, -290, -398, -393, -395, 126,
	-374, -377, -376, 240, 144, 254, 322, 422, 336, 388,
	422, -220, -290, 422, 426, 383, 422, 426, 383, 422,
	422, -226, -209, -208, -208, -225, 422, -239, -137, -137,
	-399, 262, 139, 296, 262, 139, -181, -376, 240, -377,
	240, 373, 102, -373, -213, 162, -215, 143, 422, -209,
	-209, 422, -284, 28, -375, 225, 287, 52, 317, -375,
	-374, 421, 421, -154, 52, 287, -281, -399, 21, 231,
	99, -235, -235, -208, 422, 422, -209, -209, 358, 421,
	-235, 422, -209,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 43, 44, 45,
	47, 48, 49, 50, 51, 53, 55, 58, 59, 0,
	0, 183, 185, 187, 0, 0, 0, 210, 212, 214,
	215, -2, 0, 0, 0, 245, 246, 248, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 386, 0, 860, -2, 0, 364, 366, 375, 377,
	379, 381, 382, 0, 444, 446, 448, 450, 452, 454,
	456, 458, 460, 461, 463, 465, 467, 469, 471, 473,
	475, 477, 479, 481, 483, 485, 487, 489, 491, 493,
	-2, 772, 774, 776, 778, -2, 62, 64, 66, 68,
	70, 72, 87, 218, 220, 222, 224, 227, 229, 231,
	897, 251, 253, 255, 257, 259, -2, 911, 0, 0,
	0, -2, 0, -2, -2, -2, 790, 73, 74, 75,
	76, 77, 78, 93, 94, 95, 96, 97, 98, 80,
	82, 83, 89, 90, 92, 0, 0, 873, 875, 877,
	879, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	42, 46, 52, 54, 56, 60, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 155, -2, -2, -2,
	-2, 0, 0, 1536, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1500, 1501,
	1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
	1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,
	1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
	1532, 1533, 1534, 1535, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
	1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,
	1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
	1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
	1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
	1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
	1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
	1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
	1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692,
	1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702,
	1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712,
	1713, 1714, 1715, 1716, 1717, 1422, 1476, 1425, 1420, 184,
	186, 188, 189, 0, 0, 0, 0, 0, 0, 672,
	1461, 1474, 1475, 1476, 1479, 1480, 1481, 1536, 0, 211,
	213, 216, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 343, 1625, 345, 347, 0, 0,
	0, 0, 239, 240, 241, 242, 243, 244, 247, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 342, 340,
	1456, 284, 285, 0, 0, 325, 326, 327, 328, 329,
	330, 332, 289, 291, 293, 294, 296, 298, 300, 302,
	304, 306, 308, 310, 311, 313, 315, 316, 318, 320,
	321, 323, 733, 0, 0, 0, 0, 0, 166, 0,
	357, 351, 356, 358, 360, 361, 362, 363, 0, 0,
	164, 159, 0, 0, 605, 338, 336, 0, 158, 0,
	0, 769, 0, 357, 1503, 355, 770, 771, 0, 0,
	765, 766, 1655, 800, 365, 367, 376, 378, 380, 383,
	-2, -2, 1750, -2, 406, -2, 414, 1753, 1657, 417,
	0, 419, -2, 422, 445, 447, 449, 451, 453, 455,
	457, 459, 462, 464, 466, 468, 470, 472, 474, 476,
	478, 480, 482, 484, 486, 488, 490, 492, 494, 495,
	0, 0, 0, 0, 0, 499, 0, -2, -2, 0,
	0, 0, 0, 0, -2, 0, -2, 0, 0, -2,
	-2, -2, 0, 0, 0, -2, -2, 0, 0, 498,
	500, 501, 502, 0, 548, 587, 588, 773, 775, 777,
	0, 713, 899, 63, 65, 67, 69, 71, 219, 221,
	223, 225, 228, 230, -2, 871, 872, 252, 254, 256,
	258, 260, -2, 0, 903, 903, 903, 0, 0, 872,
	870, 0, 368, 0, 370, 0, 499, 373, 374, 426,
	427, 1114, 0, 0, 0, 0, 0, 1239, 1192, -2,
	-2, 1224, 1226, 1729, 1750, 0, 1228, 1229, 0, 1231,
	1235, 1236, 0, 1399, 1468, 1463, 1428, 1429, 1430, 1431,
	0, 0, 1434, 0, 1436, 1437, 1438, 1303, 1250, -2,
	-2, -2, 1472, 1028, 1029, 1030, 1031, 1032, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1762, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 0, 1718, 1735, 1736, 1741,
	1743, 1737, 1726, 1273, -2, -2, 1543, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1730, 1731, -2, 1733, -2, -2,
	1742, -2, 1746, 1747, -2, -2, 1752, -2, -2, -2,
	1756, 1757, -2, 1490, 1081, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1775, 1776, 1777, 1778, 1779,
	1780, 802, 780, 793, 802, 782, 783, 784, 785, 786,
	791, 792, 795, 0, 787, 788, 789, 889, 1632, 892,
	672, 890, 874, 876, 0, 878, 0, 0, 0, 883,
	906, 904, 0, 942, 887, 888, 898, 957, 980, 0,
	962, 0, 980, 1002, 0, 967, 1651, 1251, 1252, 0,
	1476, 1473, -2, 1773, 1774, 2, 79, 0, 1735, 1002,
	81, 0, 1735, 84, 0, 1735, 0, -2, 88, 0,
	1735, 167, 168, 1486, 1487, 1491, 1492, 1493, 1494, 1762,
	91, 0, 1452, 99, 0, 1735, 1419, 0, 1449, 1495,
	1496, 1497, 1498, 1499, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 0, 1446, 0, 0, 597,
	1416, 1421, 598, 1426, 0, 190, 191, 192, 193, 194,
	1735, 196, 197, 0, 199, 200, 1735, 202, 203, 0,
	205, 0, 0, 0, 0, 0, 226, 672, 1735, 0,
	233, 1457, 0, 696, 1735, 694, 1460, -2, 1735, 716,
	719, 1735, 721, 672, 723, 1459, -2, 1483, 896, 1735,
	816, 344, 346, 0, 238, 0, 829, 0, 831, 0,
	850, 1008, 151, 1735, 263, 282, 151, 1735, 266, 151,
	1735, 269, 151, 1735, 272, 1414, 151, 1735, 275, 276,
	1735, 278, 169, 279, 1735, 281, 339, 0, 0, -2,
	333, 1462, -2, 0, 331, 290, 292, 295, 297, 299,
	301, 303, 305, 307, 309, 312, 314, 317, 319, 322,
	324, -2, 0, 0, 0, 0, 0, 0, 603, 604,
	0, 0, 0, 767, 768, 0, 0, 0, 387, 0,
	0, 0, 0, 799, 384, 0, 403, 0, 405, 1725,
	-2, -2, 409, 803, 807, 808, 809, 0, 0, 0,
	0, 416, 0, 0, 0, 420, 423, 0, 496, 497,
	0, 0, 507, 508, 509, 510, 1630, 1556, 513, 0,
	516, 537, 552, 0, 0, 520, 522, 602, 524, 0,
	0, 526, 0, 528, 0, 530, 0, 532, 0, 534,
	536, 538, 553, 540, 0, 0, 0, 551, 0, 557,
	0, 560, 561, 562, 0, 564, 565, 566, 0, 0,
	0, 574, 576, 0, 586, 0, 503, 504, 151, 1006,
	-2, 0, 866, 920, 921, 0, 0, 0, 0, 901,
	902, 0, 0, 0, 862, 863, 369, 0, 372, 0,
	0, 0, 0, 1334, 1335, 1336, 1337, 1338, 1339, 1342,
	1343, 1340, 1341, 1344, 1345, 0, 0, 0, 0, 0,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1347, 1348, 1349, 0, 0, 1351, 0, 1353,
	0, 0, 0, 0, 0, 0, 1171, 1173, 1407, 0,
	0, 1350, 1119, 1120, 1121, 1156, 1157, 0, 1225, 1404,
	1403, 1227, 0, 1356, -2, 1357, 1239, 0, 0, 1230,
	1443, 1237, 1238, 1356, 0, 1398, 0, 0, 1433, 0,
	1111, 1305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 1079, 1086,
	1083, 1082, 1067, 0, 1066, 0, 0, 1064, 0, 0,
	0, 1068, 0, 1379, -2, 0, 0, 0, 0, 0,
	0, 779, -2, 781, 0, 797, 0, 891, 0, 0,
	946, 1408, 1412, 1413, 946, 946, 0, 0, 1357, 0,
	0, 0, 0, 999, 999, 999, 997, 974, 0, 980,
	0, 990, 0, 980, 980, 0, -2, 962, 0, 0,
	990, 1003, 1004, 0, 0, 0, 0, 100, 762, 119,
	0, 762, 762, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 115, 107, 108, 0, 0, 85, 697, 0,
	700, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 102, 0, 0, 0, 117, 0,
	142, 144, 0, 0, 0, 0, 993, 596, 0, 0,
	1477, 1424, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 1463, 1464, 611, 0, 0, 0, 236, 692, 695,
	0, 714, 0, 895, 0, 0, 0, 0, 1735, 728,
	1448, 1482, 0, 1735, 818, 0, 1012, 0, 832, 0,
	0, 1009, 0, 261, 0, 149, 150, 0, 264, 0,
	267, 0, 270, 0, 0, 273, 0, 0, 0, 0,
	0, 898, 0, 0, 181, 0, 349, 359, 0, 0,
	0, 0, 898, 0, 1359, 1020, 1023, 1024, 1025, 1111,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1087, 1081, 1097,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1077, 0, 1052, 1052, 1052, 1069, 1070, 1088, 1089,
	1091, 1093, 1095, 1021, 1022, 1087, 1087, 1084, 1085, 181,
	0, 353, 0, 993, 389, 993, 391, 0, 582, 0,
	0, 0, 0, -2, 411, 0, 805, 0, 810, 435,
	436, 437, 812, 813, 415, 438, 439, 440, 441, 442,
	443, 0, 689, 0, 691, 1439, 0, 412, 428, 413,
	418, 0, 424, 0, 0, 511, 512, 514, 515, 517,
	518, 519, 523, 0, 590, 1647, 600, 525, 527, 529,
	531, 533, 898, 542, 0, 544, 898, 555, 558, 563,
	567, 568, 569, 570, 571, 572, 0, 0, 0, 712,
	0, 869, 918, 919, 924, 928, 929, 932, 935, 936,
	926, 1114, 884, 885, 886, 912, 913, 745, 0, 0,
	371, 1115, 1016, 1017, 1071, 1072, 1073, 1074, 1075, 1116,
	1117, 1445, 0, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, -2, -2, -2, -2, -2, -2, -2,
	-2, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, -2, -2, -2, 1154, 1155, -2, 1352, 1354,
	0, 1407, 0, -2, 0, -2, -2, -2, -2, 1168,
	0, 1170, 1175, 1177, 1179, 0, 0, 0, 0, 1406,
	1189, 1390, 0, 0, 1331, 1332, 1333, 1174, 0, 0,
	1405, 1402, 0, 0, 1355, 1234, 0, 0, 0, 0,
	1363, 1397, 1393, 0, 1465, 1471, 1241, 909, 0, 0,
	0, 0, 1248, 0, 1444, 1098, 1099, 1100, 1101, 1102,
	1103, 1112, 1313, 0, 0, 0, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1285, 0, 1366, -2,
	-2, -2, -2, -2, -2, -2, 0, 1287, 0, 0,
	1299, 0, 1301, 0, 1289, 1357, 1376, 0, 0, 1195,
	0, 0, 0, 1239, 0, 1292, 1357, 1384, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1357, 0, 1389,
	796, 893, 0, 0, 1012, 0, 0, 0, 1411, 1012,
	1012, 0, 941, 0, 0, 0, 0, 0, 0, 994,
	998, 995, 996, 0, 0, 980, 990, 954, 0, 0,
	1447, 960, 989, 0, 672, 979, 990, 990, 0, -2,
	964, 0, 0, 909, -2, 0, 0, 0, 0, 761,
	121, 1735, 0, 153, 0, 0, 662, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 698, 699, 701,
	707, 709, 0, 703, 1442, 0, 704, 0, 706, 708,
	710, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 1418, 0, 0, 172,
	992, 0, 1417, 1427, 0, 195, 198, 201, 204, 182,
	671, 0, 0, 0, 0, 610, -2, 612, 614, 615,
	616, 617, 1581, 1483, 0, 1483, 0, 0, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	820, 826, 0, 911, 0, 848, 834, 0, 0, 0,
	848, 852, 853, 855, 856, 0, 0, 1010, 283, 151,
	151, 151, 1415, 151, 151, 170, 277, 280, 341, 286,
	334, 898, 0, 0, 0, 0, 160, 0, 0, 0,
	335, 0, 0, 0, 337, 0, 1013, 1015, 0, 1026,
	0, 1079, 0, 156, 181, 0, 0, 388, 393, 0,
	583, 0, 0, 404, 0, 804, 811, 0, 432, 0,
	434, 690, 1441, 1440, 0, 425, 505, 0, 601, 599,
	541, 545, 898, 547, 0, 584, 585, 589, 1007, 0,
	930, 0, 927, 933, 934, 0, 915, 743, 744, 0,
	0, 0, -2, -2, 0, 0, 0, 1190, -2, 1169,
	1172, 1176, 1178, 1180, 0, 0, 0, 0, 0, 0,
	0, 1191, 1400, 1403, 1329, 0, 0, 1358, 1361, 1362,
	0, 0, 1394, 0, 0, 0, 0, 0, 908, 909,
	909, 909, 1247, 0, 0, 0, 0, 0, 0, 1249,
	0, 0, 0, 0, 0, 0, 0, 0, 1268, 0,
	0, 0, 1272, 1050, 0, 1284, 0, 1286, 1076, 1298,
	1300, 1288, 0, 0, 1290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1198, 1199,
	1200, 1291, 1382, 1383, 0, 0, 1090, 1092, 1094, 1096,
	0, 0, 0, 0, 1297, 0, 1388, 898, 943, 938,
	1409, 993, 945, 947, 1410, 1450, 938, 938, 0, 1358,
	982, 0, 984, 0, 0, 0, 986, 0, 975, 0,
	977, 990, 959, 0, 0, 952, 0, 951, 672, 988,
	961, 965, 1465, 0, 1005, 0, 969, 972, 0, 0,
	120, 749, 0, 0, 1451, 0, 123, 1735, 132, 0,
	639, 0, 0, 0, 0, 0, 764, 133, 1735, 151,
	1735, 151, 134, 137, 0, 141, 139, 0, 0, 630,
	101, 762, 104, 0, 0, 755, 0, 702, 705, 711,
	86, 0, 757, 747, 0, 0, 746, 143, 105, 0,
	0, 759, 103, 0, 0, 0, 181, 0, 0, 1423,
	1478, 206, 208, 209, 207, 619, 0, 1483, 0, 1483,
	0, 1455, 608, 672, 0, 234, 235, 696, 717, -2,
	720, 722, 731, 0, 0, 0, 822, 826, 0, 825,
	896, 923, 910, 1011, 827, 848, 0, 0, 0, 837,
	839, 836, 833, 830, 1012, 0, 0, 0, 0, 0,
	262, 265, 268, 271, 274, 287, 0, 179, 1613, 177,
	174, 176, 348, 0, 0, 0, 0, 1360, 0, 1018,
	0, 0, 0, 0, 157, 352, 0, 390, 0, 0,
	0, 0, 0, 0, 401, 402, -2, 430, 431, 433,
	429, 0, 543, 546, 554, 0, 0, 914, 745, 0,
	1118, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1391, 0, 1402, 1232, 1233, 1240, 1330, 1364, 1392, 1396,
	0, 1466, 1470, 1242, 0, 0, 0, 0, 1435, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 0, 1311, 1312, 1316,
	1458, 0, 0, 1253, 0, 0, 0, 0, 0, 0,
	0, 0, 1365, 1375, 1377, 1196, 1197, 1201, 1202, 1203,
	1204, 1205, 1206, 1207, 1208, 1209, 1210, -2, -2, -2,
	1214, 1215, 1216, -2, -2, -2, 0, 0, 0, 1378,
	1380, 1381, 1385, 1386, 0, 1294, 1295, 1296, 1387, 0,
	940, 0, 944, 0, 940, 940, 905, 983, 0, 1001,
	985, 957, 976, 0, 966, 955, 0, 956, 0, 987,
	0, 963, 968, 0, 971, 0, 1242, -2, 0, 0,
	0, 0, 152, 637, 661, 0, 0, 734, 742, 742,
	0, 1453, 0, 0, 125, 0, 0, 0, 0, 130,
	0, 136, 140, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 111, 114, 0, 0, 110, 0,
	154, 0, 0, 627, 0, 613, 0, 0, 0, 0,
	611, 0, 232, 693, 715, 0, 0, 0, 0, 0,
	824, 826, 0, 817, 818, 848, 922, 828, 846, 847,
	845, 0, 0, 0, 911, 854, 851, 857, 858, 0,
	165, 0, 0, 0, 0, 350, 0, 0, 0, 0,
	1019, 1027, 0, 1080, 354, 0, 577, 578, 625, 0,
	581, 506, 925, 931, 916, 745, 0, 0, -2, 0,
	1183, -2, -2, 1401, 1395, 0, 1432, 909, 1243, 1245,
	1246, 1113, 1318, 1315, 0, 1302, 1263, 1264, 0, 0,
	1267, 1269, 1270, 1271, 1051, 1374, 0, 0, 0, 0,
	1293, 894, 1307, 0, 0, 948, 1307, 1307, 0, 980,
	978, 953, 949, 0, 1466, 970, 0, 0, 751, 753,
	122, 0, 638, 0, 641, 0, 0, 0, 0, 648,
	649, 0, 0, 0, 0, 0, 663, 670, 0, 745,
	0, 745, 0, 0, 0, 0, 127, 146, 0, 0,
	763, 0, 151, 151, 0, 0, 750, 0, 0, 0,
	0, 756, 758, 748, 0, 760, 0, 171, 0, 606,
	626, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	730, 0, 0, 0, 814, 826, 0, 819, 820, 237,
	0, 0, 0, 835, 838, 840, 923, 0, 178, 0,
	173, 175, 161, 0, 0, 1014, 1078, 392, 394, 0,
	0, 400, 579, 624, 0, 0, 917, -2, -2, 1184,
	1467, 1469, 0, 911, 0, 1304, 0, 0, -2, 0,
	0, 0, 880, 0, 939, 937, 881, 882, 1000, 990,
	0, 973, 124, 0, 642, 643, 1454, 645, 0, 647,
	650, 0, 652, 1485, 0, 656, 619, 0, 667, 668,
	735, 736, 741, 737, 742, 665, 0, 126, 128, 145,
	740, 129, 135, 0, 0, 0, 0, 909, 0, 0,
	0, 991, 0, 0, 670, 0, 660, 619, 609, 0,
	731, 726, 0, 0, 821, 822, 0, 0, 0, 848,
	859, 180, 0, 0, 0, 396, 0, 398, 0, 623,
	0, 1244, 1321, 0, 1265, 1266, -2, 0, 1222, 1306,
	1308, 0, 958, 950, 640, 644, 0, 0, 676, 0,
	0, 627, 0, 745, 0, 148, 0, 0, 0, 752,
	754, 0, 0, 0, 113, 0, 659, 619, 670, 627,
	670, 0, 0, 823, 824, 0, 842, 1012, 844, 849,
	0, 0, 395, 0, 0, 580, 0, 0, 0, 1317,
	1223, 0, 0, 0, 651, 681, 0, 0, 0, 664,
	0, 738, 672, 131, 0, 739, 0, 631, 0, 0,
	634, 0, 0, 0, 0, 0, 627, 619, 607, 619,
	0, 0, 815, 0, 843, 181, 181, 397, 399, 1314,
	1319, 1322, -2, 1701, 1533, 0, 1320, 1309, 1310, 0,
	653, 677, 678, 0, 673, 674, 675, 1484, 654, 655,
	669, 676, 147, 628, 0, 0, 629, 0, 0, 116,
	118, 0, 657, 627, 627, 0, 727, 1012, 162, 163,
	0, 1324, 1325, 1326, 1327, 1328, 646, 679, 0, 680,
	0, 0, 0, 681, 632, 0, 635, 0, 622, 658,
	724, 670, 841, 0, 682, 0, 685, 686, 0, 683,
	666, 0, 0, 618, 620, 621, 619, 1323, 684, 687,
	688, 0, 0, 627, 627, 0, 725, 633, 0, 0,
	0, 627, 636,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 410, 3, 416, 411, 3,
	421, 422, 414, 412, 426, 413, 423, 415, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 430, 425,
	402, 404, 403, 406, 427, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 419, 3, 420, 417, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 428, 409, 429, 407,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 405,
	57745, 408, 57746, 418, 57747, 424, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1017
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1023
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1029
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1038
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1040
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1045
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1046
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1047
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1049
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1050
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1051
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1052
		{
			return helpWith(sqllex, "GRANT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "INSERT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1054
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1055
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1056
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1063
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1066
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1071
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1072
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1073
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1075
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1131
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1142
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1157
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1161
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1165
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1176
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1213
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1217
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1221
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1227
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1231
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1237
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1243
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1249
		{

			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1260
		{

			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1267
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1277
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1287
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:1297
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1310
		{

			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1322
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1326
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1332
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1336
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1342
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1353
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1358
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1363
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1368
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1373
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1378
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1383
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1387
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1390
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1400
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1413
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				ColumnKeyword:  sqlDollar[2].union.bool(),
				Column:         tree.Name(sqlDollar[3].str),
				SetDataKeyword: sqlDollar[4].union.bool(),
				ToType:         sqlDollar[6].union.colType(),
				Collation:      sqlDollar[7].str,
				Using:          sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1425
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1432
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1442
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1451
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1472
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1479
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1480
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1484
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1494
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1506
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1511
		{
			sqlVAL.union = sqlDollar[2].union
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1512
		{
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1517
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1521
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1525
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1531
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1535
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1564
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1587
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1591
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1594
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1598
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1629
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1633
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1637
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1641
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1644
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1661
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1664
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1668
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1672
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1678
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1688
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1692
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1698
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1710
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1716
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1726
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1730
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1733
		{
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1737
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1749
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1750
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1751
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1752
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1762
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1770
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1772
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1775
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1785
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1794
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1802
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1804
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1808
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1811
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1821
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				IfExists: false,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1830
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[5].union.expr()}}}},
				},
				IfExists: true,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1838
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1840
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1844
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1847
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1851
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1856
		{

			return unimplementedWithIssue(sqllex, 19472)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1862
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1863
		{
			sqlVAL.str = ""
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1872
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1873
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1875
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1876
		{
			return helpWith(sqllex, "CREATE")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1879
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1880
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1881
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1882
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1884
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1885
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1897
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1904
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1908
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1918
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1922
		{
			sqlVAL.union.val = nil
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1935
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1945
		{
			return helpWith(sqllex, "DELETE")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1952
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1955
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1956
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1957
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1958
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1959
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1968
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1970
		{
			return helpWith(sqllex, "DROP")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1973
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1974
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1975
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1976
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1977
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1985
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1989
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1992
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2000
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2004
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2007
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2015
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2019
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2022
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2030
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2038
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2045
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2053
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2061
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2068
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2076
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2080
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2083
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2091
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2095
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2098
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2102
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2127
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2130
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2132
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2136
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2143
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2146
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2147
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2149
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2150
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2151
		{
			return helpWith(sqllex, "DELETE")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2152
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2153
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2154
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2155
		{
			return helpWith(sqllex, "INSERT")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2156
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2158
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2159
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2161
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2164
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2165
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2167
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2168
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2176
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2177
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2181
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2195
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2202
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2206
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2210
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2220
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2226
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2232
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2236
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2246
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2250
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2254
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2258
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2261
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2281
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2285
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2289
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2292
		{
			return helpWith(sqllex, "GRANT")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2312
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2316
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2320
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2323
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2328
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2332
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2343
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2361
		{
			return helpWith(sqllex, "RESET")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2362
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2370
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2374
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2377
		{
			return helpWith(sqllex, "RESET")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2385
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2388
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2399
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2402
		{
			return helpWith(sqllex, "USE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2406
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2407
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2408
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2409
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2410
		{
			return helpWith(sqllex, "USE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2411
		{
			return unimplemented(sqllex, "set local")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2427
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2442
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2445
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2463
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2471
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2475
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2479
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2485
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2495
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2499
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2503
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2507
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2511
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2522
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2526
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2529
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2535
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2551
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2555
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2560
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2577
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2580
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2582
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2585
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2589
		{

			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2599
		{
			if sqlDollar[1].union.strs()[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2615
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2622
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2628
		{
			return unimplemented(sqllex, "set from current")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2629
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2637
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2642
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2649
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2653
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2659
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2663
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2670
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2676
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2680
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2686
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2690
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2694
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2698
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2702
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2708
		{
			sqlVAL.union.val = tree.Low
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2712
		{
			sqlVAL.union.val = tree.Normal
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2716
		{
			sqlVAL.union.val = tree.High
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2727
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2731
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2735
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2740
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2744
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2757
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2758
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2759
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2760
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2761
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2762
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2763
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2765
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2766
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2767
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2768
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2769
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2770
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2772
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2773
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2774
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2775
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2777
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2778
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2779
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2780
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2782
		{
			return helpWith(sqllex, "SHOW")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2789
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2790
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2802
		{
			sqlVAL.str = "client_encoding"
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2805
		{
			sqlVAL.str = "timezone"
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2806
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2820
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2824
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2827
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2838
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2846
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2861
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2868
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2874
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2884
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2888
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2891
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2893
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2896
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2904
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2907
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2915
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2918
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2931
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2939
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2947
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2950
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2952
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2955
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2957
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2960
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2968
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2971
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2973
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2976
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2984
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2987
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2989
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2993
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3003
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3006
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3016
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3019
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3021
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3024
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3026
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3030
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3034
		{

			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3040
		{
			sqlVAL.union.val = true
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3041
		{
			sqlVAL.union.val = false
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3049
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3052
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3054
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3068
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3077
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3086
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3089
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3096
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3100
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3103
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3110
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3114
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3122
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3127
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3132
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3136
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3144
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3147
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3155
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3158
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3165
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3168
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3176
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3179
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3187
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3190
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3194
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3199
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3204
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3211
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3219
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3226
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3231
		{

			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3243
		{
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3247
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3250
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3258
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3265
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3270
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3390
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3394
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3398
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3437
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3441
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3446
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3450
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3459
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3466
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3470
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3482
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3491
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3494
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3530
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3542
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3556
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3567
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3581
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3587
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3597
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3603
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3609
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3617
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3624
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3629
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3634
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3640
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3647
		{
			sqlVAL.str = ""
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3654
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 628:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3660
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3667
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3674
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3680
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3684
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 633:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3690
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3700
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:3710
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3721
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3732
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3736
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3742
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3746
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3750
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3754
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3758
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3762
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3766
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3784
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3788
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3792
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3796
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3800
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3804
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3808
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3816
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3820
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3824
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 657:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3831
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3841
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3853
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3863
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3875
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3880
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3886
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3892
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3903
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3913
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3937
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3941
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3947
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3951
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3956
		{
			return unimplemented(sqllex, "match full")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3957
		{
			return unimplemented(sqllex, "match partial")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3958
		{
			return unimplemented(sqllex, "match simple")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3959
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3966
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3970
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3974
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3978
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3982
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3988
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3994
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4002
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4006
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4010
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4014
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4018
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4024
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4028
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4032
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4050
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 693:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4058
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4066
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4070
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4073
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4074
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4077
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4078
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4080
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4081
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4082
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4085
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4087
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4089
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4091
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4092
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4094
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4095
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4097
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4106
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4109
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4117
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4121
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4124
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4128
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4132
		{
			sqlVAL.union.val = nil
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4142
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4146
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4149
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4157
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4164
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:4182
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql-gen.y:4195
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:4218
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4227
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4232
		{
			sqlVAL.union.val = true
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4236
		{
			sqlVAL.union.val = false
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4240
		{
			sqlVAL.union.val = false
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4246
		{
			sqlVAL.union.val = true
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4250
		{
			sqlVAL.union.val = false
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4256
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4260
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4269
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4272
		{
			return unimplemented(sqllex, "index_elem func expr (computed indexes)")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4273
		{
			return unimplemented(sqllex, "index_elem a_expr (computed indexes)")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4276
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4277
		{
			sqlVAL.str = ""
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4280
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4281
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4285
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4289
		{
			sqlVAL.union.val = tree.Descending
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4293
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4299
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4306
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4310
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4316
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4320
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4324
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4328
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4332
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 754:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4334
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4348
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4352
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4358
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4362
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4368
		{
			sqlVAL.union.val = true
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4372
		{
			sqlVAL.union.val = false
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4377
		{
			sqlVAL.union.val = true
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4378
		{
			sqlVAL.union.val = false
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4386
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4389
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4399
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: tree.Exprs{sqlDollar[3].union.expr()}}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4408
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4411
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4419
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4422
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4426
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4427
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4428
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4444
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4447
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4449
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4452
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4462
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4465
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4467
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4470
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4474
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4479
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4480
		{
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4481
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4489
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4496
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4499
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4500
		{
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4504
		{
			sqlVAL.str = ""
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4508
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4512
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4516
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4522
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4526
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4532
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4536
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4542
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4546
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4559
		{
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4561
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4565
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4569
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4573
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4579
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4585
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4591
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4595
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 814:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4605
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4615
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4625
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4629
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4633
		{
			sqlVAL.str = ""
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4639
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4643
		{
			sqlVAL.str = ""
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4649
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4653
		{
			sqlVAL.str = ""
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4659
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4663
		{
			sqlVAL.str = ""
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4668
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4669
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4681
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4688
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4695
		{
			return helpWith(sqllex, "INSERT")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4706
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4713
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4717
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4725
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4731
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4735
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4739
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4745
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4749
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4769
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4773
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4777
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4783
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4787
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4789
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4795
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4800
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4804
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 849:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4821
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4832
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4836
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4837
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4841
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4845
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4858
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4861
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4865
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4908
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4914
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4918
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4933
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4937
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4941
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4945
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4949
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4953
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4960
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4995
		{
			return helpWith(sqllex, "SELECT")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4996
		{
			return helpWith(sqllex, "VALUES")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4997
		{
			return helpWith(sqllex, "TABLE")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5019
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5032
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5046
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5058
		{
			return helpWith(sqllex, "SELECT")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5062
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5071
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5080
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5095
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5102
		{
			return helpWith(sqllex, "TABLE")
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5114
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5117
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5118
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5122
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5126
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5132
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5140
		{
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5141
		{
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5145
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5148
		{
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5151
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5152
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5156
		{
			sqlVAL.union.val = true
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5160
		{
			sqlVAL.union.val = false
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5164
		{
			sqlVAL.union.val = false
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5170
		{
			sqlVAL.union.val = true
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5176
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5181
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5182
		{
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5185
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5186
		{
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5190
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5194
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5200
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5206
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5210
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5216
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5220
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5224
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5233
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5242
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5253
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5257
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5266
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5272
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5279
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5286
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5295
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5299
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5303
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5309
		{
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5310
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5313
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5314
		{
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5331
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5335
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5341
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5345
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5364
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5367
		{
			return helpWith(sqllex, "VALUES")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5369
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5381
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5384
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5386
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5392
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5396
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5402
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5406
		{

			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5412
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5418
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5423
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}

			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5446
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5450
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5454
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5458
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5485
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5499
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5503
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5506
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5508
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5512
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5516
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5521
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5537
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5543
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5547
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5553
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5559
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5565
		{
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5567
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5570
		{
			sqlVAL.union.val = nil
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5571
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5572
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5576
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5586
		{
			sqlVAL.union.val = true
		}
	case 980:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5590
		{
			sqlVAL.union.val = false
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5610
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5614
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5618
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5622
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5626
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5630
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5636
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5640
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5647
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5653
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5660
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5666
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5670
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5674
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5678
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5684
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5685
		{
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5696
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5700
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5705
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5706
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5707
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5708
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5712
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5729
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5733
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5737
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5743
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5747
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5759
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5773
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5782
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5793
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5797
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5804
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5806
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5815
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5819
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5823
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5832
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5850
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5854
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5858
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5862
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5866
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5870
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5874
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5878
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5882
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5886
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5890
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5894
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5898
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5902
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5906
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5910
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5914
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5934
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5938
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5942
		{
			sqlVAL.union.val = nil
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5949
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5953
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5957
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5961
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5965
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5969
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5973
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5977
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5981
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5985
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5989
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5993
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6003
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6007
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6016
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6025
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6034
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6038
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6045
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6049
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6053
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6057
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6061
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6067
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6071
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6077
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6088
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6094
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6106
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6112
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6116
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6120
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6124
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6129
		{
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6130
		{
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6139
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6143
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6147
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6151
		{
			sqlVAL.union.val = coltypes.TimeTZ
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6155
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6159
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6163
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6167
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6172
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6178
		{
			sqlVAL.union.val = tree.Year
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6182
		{
			sqlVAL.union.val = tree.Month
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = tree.Day
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6190
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6194
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6198
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6204
		{
			sqlVAL.union.val = tree.Month
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6208
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6220
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6224
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6228
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6232
		{
			sqlVAL.union.val = nil
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6238
		{
			sqlVAL.union.val = tree.Second
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6241
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6265
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6269
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6273
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6276
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6285
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6289
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6293
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6297
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6301
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6305
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6309
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6313
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6317
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6321
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6325
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6329
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6333
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6337
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6341
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6345
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6349
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6353
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6357
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6361
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6365
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6369
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6373
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6377
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6381
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6385
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6389
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6393
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6397
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6405
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6409
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6413
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6417
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6421
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6425
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6429
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6433
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6437
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6441
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6445
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6449
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6453
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6457
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6461
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6465
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6469
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6473
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6477
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6481
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6485
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6489
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6493
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6497
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6501
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6504
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6506
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6510
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6514
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6518
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6522
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6526
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6530
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6534
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6538
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6542
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6546
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6550
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6554
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6558
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6562
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6566
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6570
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6587
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6591
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6595
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6618
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6622
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6626
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6630
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6634
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6638
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6642
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6650
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6654
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6658
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6662
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6666
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6670
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6674
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6678
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6682
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6686
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6690
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6694
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6698
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6702
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6706
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6710
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6714
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:6718
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6732
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6776
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6781
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6790
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6795
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6799
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6803
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6808
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6812
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6816
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6820
		{
			t := sqlDollar[1].union.tuple()
			sqlVAL.union.val = &t
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6825
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = &t
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6840
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6847
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6848
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6850
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6854
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6858
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6861
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6872
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6879
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6888
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6889
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6893
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6895
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6899
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6905
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6909
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6913
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6917
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6923
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6927
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6931
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6935
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6939
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6943
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6951
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6959
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6963
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:6967
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6971
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6978
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6981
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6983
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6986
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6991
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6996
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7001
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7006
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7011
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7013
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7016
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7018
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7022
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7025
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7026
		{
			return unimplemented(sqllex, "treat")
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7047
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7052
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7057
		{
			return unimplemented(sqllex, "within group")
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7058
		{
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7062
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7066
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7077
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7083
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7087
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7093
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7101
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7109
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7116
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7135
		{
			sqlVAL.str = ""
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7141
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7155
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7156
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7157
		{
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7160
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7161
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7167
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7168
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7169
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7170
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7171
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7182
		{
			sqlVAL.union.val = tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7186
		{
			sqlVAL.union.val = tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7192
		{
			sqlVAL.union.val = tree.Any
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7196
		{
			sqlVAL.union.val = tree.Some
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7200
		{
			sqlVAL.union.val = tree.All
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7205
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7206
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7207
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7208
		{
			sqlVAL.union.val = tree.Div
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7209
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7210
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7211
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7212
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7213
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7214
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7215
		{
			sqlVAL.union.val = tree.LT
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7216
		{
			sqlVAL.union.val = tree.GT
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7217
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = tree.LE
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7219
		{
			sqlVAL.union.val = tree.GE
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7220
		{
			sqlVAL.union.val = tree.NE
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7224
		{
			sqlVAL.union.val = tree.Like
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7225
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7226
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7227
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7239
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7245
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7255
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7259
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7275
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7279
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7285
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7289
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7311
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7315
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7319
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7325
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7332
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7336
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7353
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7357
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7361
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7365
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7369
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7375
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7381
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7387
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7391
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7395
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7401
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7423
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7433
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7439
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7443
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7450
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7467
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7473
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7482
		{
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7483
		{
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7487
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7497
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7506
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7510
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7514
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7522
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7526
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7532
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7536
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7542
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7549
		{

			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7577
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7591
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7602
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7606
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7610
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7614
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7617
		{
			return unimplemented(sqllex, "func const")
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7619
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7623
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7626
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7628
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7632
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7636
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7643
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7647
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7656
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7667
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7677
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7773
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7802
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7806
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7810
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7823
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7841
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7851
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7855
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7869
		{
			sqlVAL.str = ""
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7875
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7879
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
