// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:591
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9644

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	-2, 1055,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 68,
	182, 891,
	199, 891,
	214, 250,
	292, 250,
	300, 731,
	327, 250,
	336, 731,
	374, 731,
	398, 250,
	422, 731,
	-2, 0,
	-1, 74,
	214, 254,
	-2, 0,
	-1, 75,
	109, 1055,
	188, 1055,
	408, 1055,
	409, 1055,
	-2, 0,
	-1, 87,
	122, 1029,
	138, 1029,
	196, 1029,
	225, 1029,
	256, 1029,
	266, 1029,
	403, 1029,
	-2, 1013,
	-1, 117,
	128, 652,
	213, 652,
	294, 632,
	345, 632,
	391, 652,
	-2, 0,
	-1, 118,
	4, 1057,
	21, 1057,
	22, 1057,
	23, 1057,
	24, 1057,
	25, 1057,
	27, 1057,
	33, 1057,
	38, 1057,
	39, 1057,
	40, 1057,
	41, 1057,
	42, 1057,
	43, 1057,
	44, 1057,
	45, 1057,
	46, 1057,
	47, 1057,
	48, 1057,
	49, 1057,
	51, 1057,
	52, 1057,
	53, 1057,
	54, 1057,
	55, 1057,
	56, 1057,
	59, 1057,
	60, 1057,
	61, 1057,
	62, 1057,
	64, 1057,
	65, 1057,
	69, 1057,
	70, 1057,
	71, 1057,
	72, 1057,
	73, 1057,
	74, 1057,
	76, 1057,
	77, 1057,
	78, 1057,
	79, 1057,
	81, 1057,
	83, 1057,
	84, 1057,
	85, 1057,
	88, 1057,
	89, 1057,
	97, 1057,
	98, 1057,
	99, 1057,
	100, 1057,
	101, 1057,
	102, 1057,
	103, 1057,
	104, 1057,
	106, 1057,
	108, 1057,
	109, 1057,
	111, 1057,
	114, 1057,
	115, 1057,
	116, 1057,
	118, 1057,
	120, 1057,
	121, 1057,
	123, 1057,
	124, 1057,
	125, 1057,
	126, 1057,
	127, 1057,
	128, 1057,
	129, 1057,
	130, 1057,
	131, 1057,
	132, 1057,
	133, 1057,
	134, 1057,
	135, 1057,
	137, 1057,
	143, 1057,
	144, 1057,
	145, 1057,
	146, 1057,
	147, 1057,
	148, 1057,
	150, 1057,
	152, 1057,
	156, 1057,
	157, 1057,
	159, 1057,
	160, 1057,
	162, 1057,
	163, 1057,
	165, 1057,
	166, 1057,
	167, 1057,
	168, 1057,
	169, 1057,
	170, 1057,
	171, 1057,
	172, 1057,
	174, 1057,
	175, 1057,
	177, 1057,
	178, 1057,
	179, 1057,
	182, 1057,
	183, 1057,
	184, 1057,
	185, 1057,
	188, 1057,
	189, 1057,
	190, 1057,
	191, 1057,
	192, 1057,
	193, 1057,
	194, 1057,
	195, 1057,
	197, 1057,
	199, 1057,
	201, 1057,
	203, 1057,
	204, 1057,
	205, 1057,
	207, 1057,
	208, 1057,
	211, 1057,
	212, 1057,
	213, 1057,
	214, 1057,
	216, 1057,
	217, 1057,
	219, 1057,
	220, 1057,
	222, 1057,
	223, 1057,
	226, 1057,
	227, 1057,
	230, 1057,
	231, 1057,
	233, 1057,
	234, 1057,
	235, 1057,
	236, 1057,
	237, 1057,
	238, 1057,
	239, 1057,
	240, 1057,
	241, 1057,
	242, 1057,
	244, 1057,
	245, 1057,
	246, 1057,
	247, 1057,
	249, 1057,
	252, 1057,
	253, 1057,
	254, 1057,
	255, 1057,
	257, 1057,
	258, 1057,
	259, 1057,
	261, 1057,
	262, 1057,
	263, 1057,
	264, 1057,
	267, 1057,
	268, 1057,
	269, 1057,
	271, 1057,
	273, 1057,
	274, 1057,
	275, 1057,
	276, 1057,
	277, 1057,
	278, 1057,
	279, 1057,
	280, 1057,
	281, 1057,
	282, 1057,
	284, 1057,
	285, 1057,
	286, 1057,
	287, 1057,
	288, 1057,
	289, 1057,
	291, 1057,
	293, 1057,
	294, 1057,
	295, 1057,
	296, 1057,
	297, 1057,
	298, 1057,
	299, 1057,
	300, 1057,
	301, 1057,
	303, 1057,
	304, 1057,
	305, 1057,
	306, 1057,
	307, 1057,
	309, 1057,
	310, 1057,
	311, 1057,
	312, 1057,
	313, 1057,
	314, 1057,
	315, 1057,
	316, 1057,
	318, 1057,
	320, 1057,
	321, 1057,
	322, 1057,
	323, 1057,
	324, 1057,
	325, 1057,
	327, 1057,
	328, 1057,
	329, 1057,
	330, 1057,
	331, 1057,
	332, 1057,
	333, 1057,
	334, 1057,
	336, 1057,
	337, 1057,
	338, 1057,
	339, 1057,
	340, 1057,
	341, 1057,
	342, 1057,
	343, 1057,
	344, 1057,
	345, 1057,
	347, 1057,
	348, 1057,
	349, 1057,
	350, 1057,
	351, 1057,
	353, 1057,
	354, 1057,
	355, 1057,
	356, 1057,
	358, 1057,
	359, 1057,
	360, 1057,
	361, 1057,
	362, 1057,
	363, 1057,
	364, 1057,
	365, 1057,
	366, 1057,
	367, 1057,
	368, 1057,
	369, 1057,
	371, 1057,
	372, 1057,
	373, 1057,
	375, 1057,
	376, 1057,
	377, 1057,
	378, 1057,
	379, 1057,
	380, 1057,
	381, 1057,
	383, 1057,
	384, 1057,
	385, 1057,
	386, 1057,
	387, 1057,
	389, 1057,
	391, 1057,
	392, 1057,
	393, 1057,
	394, 1057,
	395, 1057,
	397, 1057,
	398, 1057,
	399, 1057,
	401, 1057,
	402, 1057,
	405, 1057,
	406, 1057,
	407, 1057,
	408, 1057,
	409, 1057,
	410, 1057,
	412, 1057,
	414, 1057,
	415, 1057,
	416, 1057,
	417, 1057,
	418, 1057,
	419, 1057,
	420, 1057,
	422, 1057,
	423, 1057,
	424, 1057,
	429, 1057,
	430, 1057,
	431, 1057,
	432, 1057,
	433, 1057,
	434, 1057,
	-2, 0,
	-1, 119,
	1, 944,
	203, 944,
	291, 944,
	298, 944,
	437, 944,
	460, 944,
	-2, 0,
	-1, 121,
	1, 944,
	460, 944,
	-2, 0,
	-1, 122,
	1, 944,
	460, 944,
	-2, 0,
	-1, 123,
	1, 948,
	460, 948,
	-2, 0,
	-1, 148,
	122, 1028,
	138, 1028,
	196, 1028,
	225, 1028,
	256, 1028,
	266, 1028,
	403, 1028,
	-2, 1022,
	-1, 181,
	4, 1064,
	5, 1064,
	6, 1064,
	7, 1064,
	8, 1064,
	9, 1064,
	10, 1064,
	21, 1064,
	22, 1064,
	23, 1064,
	24, 1064,
	25, 1064,
	27, 1064,
	33, 1064,
	34, 1064,
	38, 1064,
	39, 1064,
	40, 1064,
	41, 1064,
	42, 1064,
	43, 1064,
	44, 1064,
	45, 1064,
	46, 1064,
	47, 1064,
	48, 1064,
	49, 1064,
	51, 1064,
	52, 1064,
	53, 1064,
	54, 1064,
	55, 1064,
	56, 1064,
	57, 1064,
	58, 1064,
	59, 1064,
	60, 1064,
	61, 1064,
	62, 1064,
	64, 1064,
	65, 1064,
	67, 1064,
	69, 1064,
	70, 1064,
	71, 1064,
	72, 1064,
	73, 1064,
	74, 1064,
	76, 1064,
	77, 1064,
	78, 1064,
	79, 1064,
	81, 1064,
	83, 1064,
	84, 1064,
	85, 1064,
	87, 1064,
	88, 1064,
	89, 1064,
	90, 1064,
	91, 1064,
	92, 1064,
	93, 1064,
	94, 1064,
	95, 1064,
	96, 1064,
	97, 1064,
	98, 1064,
	99, 1064,
	100, 1064,
	101, 1064,
	102, 1064,
	103, 1064,
	104, 1064,
	105, 1064,
	106, 1064,
	108, 1064,
	109, 1064,
	111, 1064,
	114, 1064,
	115, 1064,
	116, 1064,
	118, 1064,
	120, 1064,
	121, 1064,
	123, 1064,
	124, 1064,
	125, 1064,
	126, 1064,
	127, 1064,
	128, 1064,
	129, 1064,
	130, 1064,
	131, 1064,
	132, 1064,
	133, 1064,
	134, 1064,
	135, 1064,
	136, 1064,
	137, 1064,
	143, 1064,
	144, 1064,
	145, 1064,
	146, 1064,
	147, 1064,
	148, 1064,
	150, 1064,
	152, 1064,
	155, 1064,
	156, 1064,
	157, 1064,
	159, 1064,
	160, 1064,
	162, 1064,
	163, 1064,
	165, 1064,
	166, 1064,
	167, 1064,
	168, 1064,
	169, 1064,
	170, 1064,
	171, 1064,
	172, 1064,
	173, 1064,
	174, 1064,
	175, 1064,
	177, 1064,
	178, 1064,
	179, 1064,
	182, 1064,
	183, 1064,
	184, 1064,
	185, 1064,
	187, 1064,
	188, 1064,
	189, 1064,
	190, 1064,
	191, 1064,
	192, 1064,
	193, 1064,
	194, 1064,
	195, 1064,
	197, 1064,
	199, 1064,
	200, 1064,
	201, 1064,
	202, 1064,
	203, 1064,
	204, 1064,
	205, 1064,
	206, 1064,
	207, 1064,
	208, 1064,
	211, 1064,
	212, 1064,
	213, 1064,
	214, 1064,
	216, 1064,
	217, 1064,
	219, 1064,
	220, 1064,
	221, 1064,
	222, 1064,
	223, 1064,
	224, 1064,
	226, 1064,
	227, 1064,
	230, 1064,
	231, 1064,
	233, 1064,
	234, 1064,
	235, 1064,
	236, 1064,
	237, 1064,
	238, 1064,
	239, 1064,
	240, 1064,
	241, 1064,
	242, 1064,
	243, 1064,
	244, 1064,
	245, 1064,
	246, 1064,
	247, 1064,
	248, 1064,
	249, 1064,
	250, 1064,
	251, 1064,
	252, 1064,
	253, 1064,
	254, 1064,
	255, 1064,
	257, 1064,
	258, 1064,
	259, 1064,
	262, 1064,
	263, 1064,
	264, 1064,
	267, 1064,
	268, 1064,
	269, 1064,
	270, 1064,
	271, 1064,
	272, 1064,
	273, 1064,
	274, 1064,
	275, 1064,
	276, 1064,
	277, 1064,
	278, 1064,
	279, 1064,
	280, 1064,
	281, 1064,
	282, 1064,
	284, 1064,
	285, 1064,
	286, 1064,
	287, 1064,
	288, 1064,
	289, 1064,
	291, 1064,
	293, 1064,
	294, 1064,
	295, 1064,
	296, 1064,
	297, 1064,
	298, 1064,
	299, 1064,
	300, 1064,
	301, 1064,
	303, 1064,
	304, 1064,
	305, 1064,
	306, 1064,
	307, 1064,
	309, 1064,
	310, 1064,
	311, 1064,
	312, 1064,
	313, 1064,
	314, 1064,
	315, 1064,
	316, 1064,
	318, 1064,
	319, 1064,
	320, 1064,
	321, 1064,
	322, 1064,
	323, 1064,
	324, 1064,
	325, 1064,
	327, 1064,
	328, 1064,
	329, 1064,
	330, 1064,
	331, 1064,
	332, 1064,
	333, 1064,
	334, 1064,
	336, 1064,
	337, 1064,
	338, 1064,
	339, 1064,
	340, 1064,
	341, 1064,
	342, 1064,
	343, 1064,
	344, 1064,
	345, 1064,
	346, 1064,
	347, 1064,
	348, 1064,
	349, 1064,
	350, 1064,
	351, 1064,
	352, 1064,
	353, 1064,
	354, 1064,
	355, 1064,
	356, 1064,
	358, 1064,
	359, 1064,
	360, 1064,
	361, 1064,
	362, 1064,
	363, 1064,
	364, 1064,
	365, 1064,
	366, 1064,
	367, 1064,
	368, 1064,
	369, 1064,
	371, 1064,
	372, 1064,
	373, 1064,
	375, 1064,
	376, 1064,
	377, 1064,
	378, 1064,
	379, 1064,
	380, 1064,
	381, 1064,
	383, 1064,
	384, 1064,
	385, 1064,
	386, 1064,
	387, 1064,
	389, 1064,
	391, 1064,
	392, 1064,
	393, 1064,
	394, 1064,
	395, 1064,
	396, 1064,
	397, 1064,
	398, 1064,
	399, 1064,
	401, 1064,
	402, 1064,
	404, 1064,
	405, 1064,
	406, 1064,
	407, 1064,
	408, 1064,
	409, 1064,
	410, 1064,
	411, 1064,
	412, 1064,
	414, 1064,
	415, 1064,
	416, 1064,
	417, 1064,
	418, 1064,
	419, 1064,
	420, 1064,
	422, 1064,
	423, 1064,
	424, 1064,
	429, 1064,
	430, 1064,
	431, 1064,
	432, 1064,
	433, 1064,
	434, 1064,
	435, 1064,
	443, 1064,
	448, 1064,
	449, 1064,
	450, 1064,
	457, 1064,
	461, 1064,
	-2, 0,
	-1, 554,
	154, 1737,
	388, 1737,
	440, 1737,
	459, 1737,
	-2, 0,
	-1, 555,
	154, 1815,
	388, 1815,
	440, 1815,
	459, 1815,
	-2, 0,
	-1, 556,
	154, 1726,
	388, 1726,
	440, 1726,
	459, 1726,
	-2, 0,
	-1, 558,
	154, 1904,
	388, 1904,
	440, 1904,
	459, 1904,
	-2, 0,
	-1, 560,
	154, 1933,
	388, 1933,
	440, 1933,
	459, 1933,
	-2, 0,
	-1, 567,
	154, 1825,
	388, 1825,
	440, 1825,
	459, 1825,
	-2, 503,
	-1, 584,
	459, 1684,
	462, 1684,
	-2, 700,
	-1, 585,
	459, 1686,
	462, 1686,
	-2, 701,
	-1, 586,
	459, 1685,
	462, 1685,
	-2, 702,
	-1, 587,
	462, 1631,
	-2, 703,
	-1, 734,
	294, 633,
	345, 633,
	-2, 0,
	-1, 735,
	294, 632,
	345, 632,
	-2, 583,
	-1, 738,
	1, 662,
	456, 662,
	458, 662,
	460, 662,
	-2, 0,
	-1, 739,
	1, 699,
	151, 699,
	456, 699,
	458, 699,
	460, 699,
	-2, 0,
	-1, 747,
	1, 636,
	456, 636,
	458, 636,
	460, 636,
	-2, 0,
	-1, 750,
	1, 662,
	456, 662,
	458, 662,
	460, 662,
	-2, 0,
	-1, 751,
	1, 664,
	456, 664,
	458, 664,
	460, 664,
	-2, 0,
	-1, 752,
	1, 667,
	456, 667,
	458, 667,
	460, 667,
	-2, 0,
	-1, 756,
	1, 681,
	456, 681,
	458, 681,
	460, 681,
	-2, 0,
	-1, 757,
	1, 683,
	456, 683,
	458, 683,
	460, 683,
	-2, 0,
	-1, 800,
	138, 1066,
	225, 1066,
	256, 1066,
	-2, 1022,
	-1, 815,
	138, 1065,
	225, 1065,
	256, 1065,
	-2, 1022,
	-1, 839,
	459, 1683,
	-2, 511,
	-1, 868,
	457, 1675,
	-2, 1666,
	-1, 874,
	5, 1200,
	-2, 1717,
	-1, 875,
	5, 1201,
	-2, 1721,
	-1, 876,
	5, 1202,
	-2, 1720,
	-1, 877,
	5, 1203,
	-2, 1930,
	-1, 878,
	5, 1204,
	-2, 1827,
	-1, 879,
	5, 1205,
	-2, 1896,
	-1, 880,
	5, 1206,
	-2, 1898,
	-1, 881,
	5, 1207,
	-2, 1910,
	-1, 882,
	5, 1208,
	-2, 1899,
	-1, 883,
	5, 1209,
	-2, 1900,
	-1, 884,
	5, 1210,
	-2, 1716,
	-1, 885,
	5, 1211,
	-2, 1946,
	-1, 886,
	5, 1212,
	-2, 1790,
	-1, 887,
	5, 1213,
	-2, 1835,
	-1, 888,
	5, 1214,
	-2, 1837,
	-1, 889,
	5, 1215,
	-2, 1794,
	-1, 890,
	5, 1216,
	457, 1693,
	-2, 1684,
	-1, 891,
	5, 1272,
	457, 1272,
	-2, 1981,
	-1, 896,
	457, 1694,
	-2, 1685,
	-1, 898,
	5, 1220,
	-2, 1979,
	-1, 899,
	5, 1221,
	-2, 1980,
	-1, 900,
	5, 1222,
	-2, 1793,
	-1, 901,
	5, 1223,
	-2, 1992,
	-1, 902,
	5, 1224,
	-2, 1795,
	-1, 903,
	5, 1225,
	-2, 1796,
	-1, 904,
	5, 1226,
	-2, 1797,
	-1, 905,
	5, 1227,
	-2, 1961,
	-1, 906,
	5, 1228,
	-2, 1990,
	-1, 907,
	5, 1229,
	-2, 1773,
	-1, 908,
	5, 1230,
	-2, 1774,
	-1, 909,
	5, 1244,
	-2, 1973,
	-1, 911,
	5, 1219,
	-2, 1969,
	-1, 912,
	5, 1219,
	-2, 1968,
	-1, 913,
	5, 1219,
	-2, 1985,
	-1, 914,
	5, 1236,
	-2, 1963,
	-1, 915,
	5, 1237,
	-2, 1718,
	-1, 916,
	5, 1247,
	-2, 1962,
	-1, 917,
	5, 1249,
	-2, 2001,
	-1, 919,
	5, 1260,
	-2, 1747,
	-1, 920,
	5, 1271,
	-2, 1994,
	-1, 921,
	5, 1263,
	-2, 1995,
	-1, 922,
	5, 1271,
	-2, 1996,
	-1, 923,
	5, 1267,
	-2, 1997,
	-1, 924,
	5, 1187,
	-2, 1803,
	-1, 925,
	5, 1188,
	-2, 1804,
	-1, 926,
	459, 1681,
	-2, 1665,
	-1, 927,
	457, 2021,
	-2, 1682,
	-1, 947,
	5, 1255,
	-2, 1920,
	-1, 964,
	5, 1254,
	-2, 2002,
	-1, 974,
	5, 1256,
	423, 1256,
	-2, 1964,
	-1, 975,
	5, 1257,
	423, 1257,
	-2, 1965,
	-1, 1011,
	457, 1693,
	-2, 1684,
	-1, 1039,
	154, 1933,
	388, 1933,
	440, 1933,
	459, 1933,
	-2, 0,
	-1, 1042,
	1, 489,
	460, 489,
	-2, 956,
	-1, 1162,
	309, 1662,
	450, 1662,
	-2, 1661,
	-1, 1185,
	461, 1662,
	-2, 1663,
	-1, 1220,
	300, 731,
	422, 731,
	-2, 249,
	-1, 1240,
	280, 1053,
	-2, 864,
	-1, 1249,
	260, 1688,
	-2, 0,
	-1, 1313,
	1, 364,
	456, 364,
	458, 364,
	460, 364,
	-2, 1027,
	-1, 1316,
	4, 2000,
	11, 2000,
	12, 2000,
	14, 2000,
	15, 2000,
	16, 2000,
	17, 2000,
	18, 2000,
	19, 2000,
	21, 2000,
	22, 2000,
	23, 2000,
	24, 2000,
	25, 2000,
	27, 2000,
	30, 2000,
	31, 2000,
	33, 2000,
	35, 2000,
	38, 2000,
	39, 2000,
	40, 2000,
	41, 2000,
	42, 2000,
	43, 2000,
	44, 2000,
	45, 2000,
	46, 2000,
	47, 2000,
	48, 2000,
	49, 2000,
	51, 2000,
	52, 2000,
	53, 2000,
	54, 2000,
	55, 2000,
	56, 2000,
	59, 2000,
	60, 2000,
	61, 2000,
	62, 2000,
	64, 2000,
	65, 2000,
	66, 2000,
	69, 2000,
	70, 2000,
	71, 2000,
	72, 2000,
	73, 2000,
	74, 2000,
	75, 2000,
	76, 2000,
	77, 2000,
	78, 2000,
	79, 2000,
	81, 2000,
	82, 2000,
	83, 2000,
	84, 2000,
	85, 2000,
	87, 2000,
	88, 2000,
	89, 2000,
	97, 2000,
	98, 2000,
	99, 2000,
	100, 2000,
	101, 2000,
	102, 2000,
	103, 2000,
	104, 2000,
	106, 2000,
	108, 2000,
	109, 2000,
	111, 2000,
	114, 2000,
	115, 2000,
	116, 2000,
	118, 2000,
	120, 2000,
	121, 2000,
	123, 2000,
	124, 2000,
	125, 2000,
	126, 2000,
	127, 2000,
	128, 2000,
	129, 2000,
	130, 2000,
	131, 2000,
	132, 2000,
	133, 2000,
	134, 2000,
	135, 2000,
	139, 2000,
	140, 2000,
	141, 2000,
	142, 2000,
	143, 2000,
	144, 2000,
	145, 2000,
	146, 2000,
	147, 2000,
	148, 2000,
	149, 2000,
	150, 2000,
	152, 2000,
	155, 2000,
	156, 2000,
	157, 2000,
	159, 2000,
	160, 2000,
	162, 2000,
	163, 2000,
	165, 2000,
	166, 2000,
	167, 2000,
	168, 2000,
	169, 2000,
	170, 2000,
	171, 2000,
	172, 2000,
	173, 2000,
	174, 2000,
	175, 2000,
	176, 2000,
	177, 2000,
	178, 2000,
	179, 2000,
	180, 2000,
	181, 2000,
	183, 2000,
	184, 2000,
	185, 2000,
	187, 2000,
	188, 2000,
	189, 2000,
	190, 2000,
	191, 2000,
	192, 2000,
	193, 2000,
	194, 2000,
	195, 2000,
	197, 2000,
	199, 2000,
	200, 2000,
	201, 2000,
	202, 2000,
	203, 2000,
	204, 2000,
	205, 2000,
	206, 2000,
	207, 2000,
	208, 2000,
	209, 2000,
	210, 2000,
	211, 2000,
	212, 2000,
	213, 2000,
	214, 2000,
	216, 2000,
	217, 2000,
	219, 2000,
	220, 2000,
	221, 2000,
	222, 2000,
	223, 2000,
	224, 2000,
	226, 2000,
	227, 2000,
	230, 2000,
	231, 2000,
	232, 2000,
	233, 2000,
	234, 2000,
	235, 2000,
	236, 2000,
	237, 2000,
	238, 2000,
	239, 2000,
	240, 2000,
	241, 2000,
	242, 2000,
	243, 2000,
	244, 2000,
	245, 2000,
	246, 2000,
	247, 2000,
	250, 2000,
	252, 2000,
	253, 2000,
	254, 2000,
	255, 2000,
	257, 2000,
	258, 2000,
	259, 2000,
	262, 2000,
	263, 2000,
	264, 2000,
	265, 2000,
	267, 2000,
	268, 2000,
	269, 2000,
	271, 2000,
	273, 2000,
	274, 2000,
	275, 2000,
	276, 2000,
	277, 2000,
	278, 2000,
	279, 2000,
	280, 2000,
	281, 2000,
	282, 2000,
	284, 2000,
	285, 2000,
	286, 2000,
	287, 2000,
	288, 2000,
	289, 2000,
	291, 2000,
	293, 2000,
	294, 2000,
	295, 2000,
	296, 2000,
	297, 2000,
	298, 2000,
	299, 2000,
	300, 2000,
	301, 2000,
	303, 2000,
	304, 2000,
	305, 2000,
	306, 2000,
	307, 2000,
	308, 2000,
	309, 2000,
	310, 2000,
	311, 2000,
	312, 2000,
	313, 2000,
	314, 2000,
	315, 2000,
	316, 2000,
	318, 2000,
	319, 2000,
	320, 2000,
	321, 2000,
	322, 2000,
	323, 2000,
	324, 2000,
	325, 2000,
	326, 2000,
	327, 2000,
	328, 2000,
	329, 2000,
	330, 2000,
	331, 2000,
	332, 2000,
	333, 2000,
	334, 2000,
	336, 2000,
	337, 2000,
	338, 2000,
	339, 2000,
	340, 2000,
	341, 2000,
	342, 2000,
	343, 2000,
	344, 2000,
	345, 2000,
	347, 2000,
	348, 2000,
	349, 2000,
	350, 2000,
	351, 2000,
	352, 2000,
	353, 2000,
	354, 2000,
	355, 2000,
	356, 2000,
	358, 2000,
	359, 2000,
	360, 2000,
	361, 2000,
	362, 2000,
	363, 2000,
	364, 2000,
	365, 2000,
	366, 2000,
	367, 2000,
	368, 2000,
	369, 2000,
	371, 2000,
	372, 2000,
	373, 2000,
	375, 2000,
	376, 2000,
	377, 2000,
	378, 2000,
	379, 2000,
	380, 2000,
	381, 2000,
	383, 2000,
	384, 2000,
	385, 2000,
	386, 2000,
	387, 2000,
	389, 2000,
	391, 2000,
	392, 2000,
	393, 2000,
	394, 2000,
	395, 2000,
	397, 2000,
	398, 2000,
	399, 2000,
	401, 2000,
	402, 2000,
	405, 2000,
	406, 2000,
	407, 2000,
	408, 2000,
	409, 2000,
	410, 2000,
	412, 2000,
	414, 2000,
	415, 2000,
	416, 2000,
	417, 2000,
	418, 2000,
	419, 2000,
	420, 2000,
	422, 2000,
	423, 2000,
	424, 2000,
	429, 2000,
	430, 2000,
	431, 2000,
	432, 2000,
	433, 2000,
	434, 2000,
	435, 2000,
	436, 2000,
	438, 2000,
	439, 2000,
	440, 2000,
	441, 2000,
	442, 2000,
	443, 2000,
	445, 2000,
	446, 2000,
	447, 2000,
	448, 2000,
	449, 2000,
	450, 2000,
	451, 2000,
	452, 2000,
	453, 2000,
	455, 2000,
	458, 2000,
	459, 2000,
	461, 2000,
	462, 2000,
	-2, 0,
	-1, 1319,
	154, 1904,
	388, 1904,
	440, 1904,
	459, 1904,
	-2, 0,
	-1, 1348,
	294, 633,
	345, 633,
	-2, 0,
	-1, 1371,
	1, 628,
	456, 628,
	458, 628,
	460, 628,
	-2, 0,
	-1, 1372,
	1, 653,
	456, 653,
	458, 653,
	460, 653,
	-2, 0,
	-1, 1373,
	1, 635,
	456, 635,
	458, 635,
	460, 635,
	-2, 0,
	-1, 1375,
	1, 639,
	456, 639,
	458, 639,
	460, 639,
	-2, 0,
	-1, 1400,
	1, 1953,
	456, 1953,
	458, 1953,
	459, 1953,
	460, 1953,
	-2, 679,
	-1, 1401,
	1, 1902,
	456, 1902,
	458, 1902,
	459, 1902,
	460, 1902,
	-2, 680,
	-1, 1414,
	1, 951,
	460, 951,
	-2, 956,
	-1, 1419,
	138, 1065,
	225, 1065,
	256, 1065,
	-2, 1022,
	-1, 1515,
	122, 1029,
	138, 1029,
	196, 1029,
	225, 1029,
	256, 1029,
	266, 1029,
	403, 1029,
	-2, 1428,
	-1, 1568,
	458, 1566,
	-2, 0,
	-1, 1610,
	122, 1029,
	138, 1029,
	196, 1029,
	225, 1029,
	256, 1029,
	266, 1029,
	403, 1029,
	-2, 1137,
	-1, 1664,
	457, 1259,
	-2, 1247,
	-1, 1703,
	1, 491,
	460, 491,
	-2, 956,
	-1, 1900,
	1, 630,
	456, 630,
	458, 630,
	460, 630,
	-2, 0,
	-1, 1901,
	1, 655,
	456, 655,
	458, 655,
	460, 655,
	-2, 0,
	-1, 1985,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1308,
	-1, 1986,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1309,
	-1, 1987,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1310,
	-1, 1988,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1311,
	-1, 1989,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1312,
	-1, 1990,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1313,
	-1, 1991,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1314,
	-1, 1992,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1315,
	-1, 2004,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1327,
	-1, 2005,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1328,
	-1, 2006,
	14, 0,
	15, 0,
	16, 0,
	82, 0,
	209, 0,
	210, 0,
	438, 0,
	439, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 1329,
	-1, 2009,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1334,
	-1, 2015,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1338,
	-1, 2017,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1346,
	-1, 2018,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1347,
	-1, 2019,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1348,
	-1, 2020,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1349,
	-1, 2114,
	5, 1216,
	154, 1577,
	457, 1693,
	-2, 1684,
	-1, 2115,
	154, 1578,
	-2, 1957,
	-1, 2116,
	154, 1579,
	-2, 1824,
	-1, 2117,
	154, 1580,
	-2, 1748,
	-1, 2118,
	154, 1581,
	-2, 1784,
	-1, 2119,
	154, 1582,
	-2, 1822,
	-1, 2120,
	154, 1583,
	-2, 1895,
	-1, 2196,
	1, 1138,
	2, 1138,
	87, 1138,
	122, 1138,
	138, 1138,
	151, 1138,
	155, 1138,
	161, 1138,
	164, 1138,
	187, 1138,
	196, 1138,
	206, 1138,
	221, 1138,
	225, 1138,
	243, 1138,
	256, 1138,
	260, 1138,
	266, 1138,
	317, 1138,
	319, 1138,
	403, 1138,
	413, 1138,
	426, 1138,
	427, 1138,
	428, 1138,
	437, 1138,
	456, 1138,
	458, 1138,
	460, 1138,
	462, 1138,
	-2, 1137,
	-1, 2201,
	457, 1667,
	-2, 1679,
	-1, 2222,
	457, 1258,
	-2, 1248,
	-1, 2461,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1336,
	-1, 2462,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1340,
	-1, 2468,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1342,
	-1, 2648,
	203, 956,
	291, 956,
	298, 956,
	437, 956,
	-2, 488,
	-1, 2740,
	280, 1053,
	-2, 864,
	-1, 2821,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1344,
	-1, 2828,
	200, 0,
	202, 0,
	250, 0,
	-2, 1363,
	-1, 2891,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1392,
	-1, 2892,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1393,
	-1, 2893,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1394,
	-1, 2897,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1398,
	-1, 2898,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1399,
	-1, 2899,
	14, 0,
	15, 0,
	16, 0,
	438, 0,
	439, 0,
	440, 0,
	-2, 1400,
	-1, 2942,
	457, 1668,
	-2, 1680,
	-1, 3031,
	459, 2103,
	-2, 999,
	-1, 3078,
	200, 0,
	202, 0,
	250, 0,
	-2, 1364,
	-1, 3081,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1367,
	-1, 3082,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1369,
	-1, 3240,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1368,
	-1, 3241,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	173, 0,
	176, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1370,
	-1, 3251,
	200, 0,
	-2, 1401,
	-1, 3356,
	200, 0,
	-2, 1402,
	-1, 3472,
	43, 0,
	173, 0,
	224, 0,
	352, 0,
	435, 0,
	443, 0,
	-2, 1960,
}

const sqlPrivate = 57344

const sqlLast = 75221

var sqlAct = [...]int{

	896, 3281, 3471, 3284, 3481, 3566, 3308, 3556, 3184, 2353,
	2145, 2727, 3441, 3482, 3450, 3483, 3438, 3519, 3315, 3270,
	2859, 2362, 3360, 3425, 2354, 3064, 2251, 3470, 3208, 1972,
	3231, 1012, 2665, 3022, 3017, 3320, 2187, 3140, 2032, 213,
	825, 213, 213, 1634, 213, 213, 213, 213, 213, 2756,
	853, 213, 3027, 1166, 1305, 1430, 3004, 2749, 565, 586,
	1067, 1191, 2723, 3255, 1048, 2751, 2963, 1301, 1603, 1751,
	2394, 2350, 1876, 2327, 2610, 2325, 32, 213, 2624, 1004,
	205, 586, 2396, 2962, 2570, 2597, 1837, 1605, 816, 2309,
	3063, 918, 2454, 2385, 1355, 2387, 2586, 1826, 2363, 1827,
	1577, 3112, 2914, 2330, 2404, 2310, 1513, 2253, 4, 2569,
	2188, 2083, 1969, 1541, 2189, 1159, 1760, 3361, 2393, 824,
	141, 1523, 1834, 2045, 682, 2489, 2450, 1965, 1178, 2403,
	1789, 86, 1778, 892, 1785, 2328, 2163, 1736, 1055, 1414,
	1738, 2075, 2029, 2286, 1578, 2725, 1168, 2063, 2191, 1314,
	813, 1298, 1823, 3309, 2356, 1175, 2629, 1234, 2243, 533,
	1536, 2397, 2285, 2057, 999, 996, 2110, 1288, 1587, 2142,
	587, 588, 2171, 978, 2046, 1044, 213, 213, 1504, 1431,
	2153, 207, 1429, 549, 677, 559, 1822, 148, 1312, 519,
	206, 582, 1843, 541, 1264, 141, 658, 149, 627, 1750,
	1188, 851, 852, 1001, 976, 544, 536, 37, 36, 729,
	34, 25, 23, 21, 1435, 1413, 745, 2485, 1246, 1308,
	2931, 1857, 2932, 1877, 3596, 2355, 3587, 2766, 2162, 1857,
	2162, 1857, 1052, 3586, 3565, 3548, 2646, 2162, 1794, 3154,
	591, 3546, 3505, 3503, 3501, 3154, 3506, 2162, 2162, 594,
	820, 2162, 3498, 820, 1443, 1444, 3499, 2409, 2155, 3495,
	3492, 2765, 591, 3496, 1794, 3468, 3467, 2211, 3421, 1794,
	1794, 594, 692, 3466, 1474, 815, 3463, 1869, 1443, 1444,
	1869, 1446, 821, 3462, 3420, 3410, 1635, 1869, 2215, 3154,
	3409, 3403, 3397, 3395, 3154, 1794, 3154, 3154, 1474, 3358,
	3341, 1794, 3338, 2215, 1794, 1446, 3154, 1613, 3298, 1445,
	3297, 3290, 1794, 3289, 1794, 1794, 3261, 3154, 1465, 3242,
	1794, 3344, 3229, 2215, 979, 979, 1869, 3220, 3181, 801,
	3171, 2778, 2162, 1445, 2162, 835, 3153, 3080, 3039, 800,
	3154, 2215, 2794, 3033, 3002, 2937, 2927, 2794, 3003, 2938,
	2928, 2920, 1052, 1029, 2852, 2162, 2840, 808, 1794, 2793,
	2162, 2785, 2718, 2794, 3074, 2786, 1869, 2583, 2581, 2580,
	2534, 2162, 2162, 2162, 2162, 2517, 2506, 2917, 1869, 2518,
	2162, 980, 1468, 1469, 1470, 1471, 2383, 2504, 1024, 2917,
	1873, 2228, 1451, 2505, 1855, 2162, 2214, 2154, 2209, 2203,
	2215, 2305, 2162, 1794, 2161, 1872, 3172, 1794, 2162, 1873,
	982, 181, 983, 2786, 2300, 2242, 1451, 1709, 1755, 2778,
	2542, 2543, 2337, 1473, 1475, 2453, 1793, 2240, 1573, 1187,
	1604, 2989, 1443, 1444, 2816, 2803, 2359, 2060, 1486, 1487,
	1488, 1788, 2767, 1357, 1514, 2182, 2162, 1473, 1475, 2488,
	183, 2181, 1474, 2180, 2179, 2178, 984, 981, 807, 1446,
	3129, 2768, 1025, 181, 1492, 806, 805, 804, 803, 799,
	798, 797, 796, 795, 2433, 1466, 1514, 1374, 2542, 2543,
	1858, 2560, 2561, 2562, 794, 793, 792, 1445, 1858, 1729,
	1858, 993, 791, 790, 182, 789, 1465, 3076, 788, 1466,
	787, 727, 183, 2061, 175, 726, 2542, 2543, 725, 724,
	723, 722, 176, 721, 720, 719, 718, 181, 717, 716,
	715, 714, 713, 712, 213, 711, 710, 709, 708, 707,
	706, 705, 704, 150, 703, 2765, 3280, 702, 701, 691,
	1443, 1444, 2557, 690, 1025, 649, 182, 648, 607, 606,
	605, 1472, 213, 597, 596, 595, 183, 572, 2548, 213,
	1468, 1469, 1470, 1471, 3488, 571, 2154, 1446, 570, 1467,
	1451, 569, 553, 2062, 2059, 213, 1070, 213, 213, 1171,
	213, 1070, 213, 203, 202, 150, 201, 200, 2101, 199,
	213, 213, 198, 1467, 1483, 1445, 197, 1493, 196, 75,
	182, 1473, 1475, 195, 1054, 194, 193, 192, 1059, 191,
	175, 190, 1068, 189, 188, 213, 2548, 1179, 176, 187,
	186, 185, 184, 3091, 1606, 2935, 2795, 1865, 2627, 213,
	2511, 1171, 1171, 213, 213, 1856, 213, 1944, 2500, 150,
	2343, 2558, 2315, 2204, 2548, 1481, 1442, 2099, 213, 1181,
	2195, 2097, 2095, 1466, 1734, 2093, 213, 1620, 1162, 1544,
	1530, 1025, 1185, 1525, 1193, 1543, 181, 2563, 1879, 2064,
	213, 213, 213, 213, 213, 1171, 1171, 1196, 1451, 1201,
	1171, 1207, 213, 1171, 213, 213, 1547, 1061, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 1014, 213, 2558,
	1042, 3216, 3469, 3391, 3351, 183, 2542, 2543, 3347, 2560,
	2561, 2562, 3221, 1247, 1247, 1447, 1448, 1449, 1450, 1452,
	1453, 3133, 3345, 3111, 3110, 3075, 3098, 2558, 3097, 1472,
	1309, 1544, 3096, 3095, 1171, 2559, 1878, 1543, 3089, 3088,
	1063, 3087, 1156, 1161, 1037, 3001, 1197, 1467, 2951, 182,
	2542, 2543, 2950, 1185, 2948, 2941, 213, 2911, 1542, 175,
	1190, 1189, 2910, 2909, 2836, 1325, 2832, 176, 2058, 213,
	2557, 591, 1328, 1484, 2789, 2622, 2577, 2568, 2541, 2538,
	594, 2537, 2535, 2524, 213, 2523, 1443, 1444, 2358, 1317,
	2522, 1251, 2220, 2559, 1526, 2519, 1524, 992, 1164, 2516,
	141, 2987, 2494, 181, 2493, 2486, 1474, 2384, 2196, 2068,
	181, 821, 1442, 1446, 1831, 895, 2344, 1525, 1441, 117,
	3594, 2559, 1329, 3564, 1375, 1799, 1315, 1797, 3563, 1302,
	3504, 1013, 2861, 3458, 3456, 2542, 2543, 1512, 1292, 1295,
	3388, 1445, 183, 2272, 2548, 1384, 2542, 2543, 3385, 183,
	1240, 1243, 1248, 3382, 3381, 3380, 1482, 2544, 2545, 2546,
	2547, 2549, 2550, 3376, 1485, 3370, 1456, 1454, 1455, 1447,
	1448, 1449, 1450, 1452, 1453, 3342, 3337, 3336, 3383, 2035,
	3276, 3253, 3226, 1209, 3225, 3206, 182, 3203, 2548, 1420,
	3197, 3128, 3109, 182, 2603, 2563, 175, 3053, 3215, 2557,
	1376, 3050, 1321, 175, 176, 2554, 2555, 2556, 2978, 2977,
	2966, 176, 2553, 2551, 2552, 2544, 2545, 2546, 2547, 2549,
	2550, 2965, 2923, 2827, 1451, 150, 1419, 2558, 2796, 1730,
	2287, 2779, 150, 2743, 1412, 2712, 2690, 2668, 2449, 2667,
	1334, 2551, 2552, 2544, 2545, 2546, 2547, 2549, 2550, 2642,
	2041, 1418, 1349, 1341, 2640, 1473, 1475, 1203, 2582, 181,
	2515, 2514, 2499, 2477, 2324, 1548, 1428, 1417, 1443, 1444,
	823, 1545, 1537, 2548, 1534, 2224, 2223, 2342, 213, 1449,
	1450, 1452, 1453, 2199, 2548, 2176, 1606, 2160, 2091, 1508,
	1415, 3279, 821, 1619, 1576, 1446, 1572, 1571, 183, 1007,
	1443, 1444, 1584, 1570, 213, 1569, 1568, 1466, 1567, 1566,
	1565, 1575, 801, 1564, 213, 1070, 213, 213, 213, 1421,
	1474, 2559, 800, 1445, 586, 213, 213, 1446, 1562, 586,
	213, 1629, 1561, 1438, 1439, 213, 1546, 2542, 2543, 1880,
	1560, 1171, 182, 3363, 2100, 1559, 1558, 1701, 1557, 2668,
	1208, 1623, 175, 1556, 1555, 1445, 2558, 1554, 1553, 1552,
	176, 1551, 1070, 1550, 1465, 1527, 1509, 2558, 1507, 1502,
	1036, 1027, 1599, 1538, 1539, 1622, 1020, 3202, 1641, 181,
	2217, 150, 3130, 3084, 2947, 2930, 1631, 1581, 1582, 1614,
	2926, 1698, 2503, 1700, 1706, 2177, 1732, 3265, 1735, 3132,
	3174, 1467, 1594, 2098, 1725, 2542, 2543, 2096, 2094, 2946,
	2825, 2092, 1526, 2638, 1505, 141, 1729, 1615, 183, 1666,
	1729, 1058, 2693, 1056, 1202, 1729, 979, 2752, 1468, 1469,
	1470, 1471, 821, 2554, 2555, 2556, 1052, 3219, 1451, 3348,
	2553, 2551, 2552, 2544, 2545, 2546, 2547, 2549, 2550, 3173,
	2559, 1626, 2933, 3346, 2781, 2780, 1443, 1444, 1557, 2289,
	1557, 2559, 182, 2521, 2520, 1611, 2459, 1410, 3012, 1473,
	1475, 1624, 175, 1057, 1348, 2548, 1474, 1052, 2976, 1703,
	176, 2274, 1574, 1446, 1704, 1053, 1532, 1171, 213, 2546,
	2547, 2549, 2550, 1544, 1070, 1877, 1517, 1728, 3321, 1543,
	1522, 150, 1608, 1602, 1601, 591, 1600, 1598, 1597, 1596,
	591, 1445, 1755, 1049, 594, 1630, 181, 1744, 1356, 594,
	1697, 1466, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1638,
	1795, 3316, 1632, 213, 213, 1357, 1832, 1715, 2542, 2543,
	213, 2560, 2561, 2562, 1828, 1775, 1052, 2729, 1777, 2728,
	213, 1782, 991, 2993, 785, 183, 1721, 2831, 2980, 213,
	3256, 213, 1385, 213, 2801, 2706, 1773, 213, 3567, 2553,
	2551, 2552, 2544, 2545, 2546, 2547, 2549, 2550, 2355, 213,
	2553, 2551, 2552, 2544, 2545, 2546, 2547, 2549, 2550, 1511,
	181, 2863, 1043, 786, 1451, 1759, 2509, 1472, 3489, 182,
	2076, 1050, 2557, 181, 3500, 2222, 1720, 1719, 1051, 175,
	1729, 1726, 1563, 1540, 1818, 1467, 2721, 176, 1819, 1171,
	213, 1171, 1224, 3497, 213, 1473, 1475, 1171, 2761, 183,
	1171, 213, 868, 213, 213, 1786, 1849, 766, 150, 2958,
	3435, 3018, 183, 1171, 1171, 1171, 2391, 213, 3535, 1815,
	644, 1840, 213, 3534, 2060, 3490, 3402, 1058, 1190, 1189,
	2446, 586, 213, 1338, 213, 3164, 213, 1212, 213, 591,
	213, 1382, 2650, 182, 2255, 2229, 2548, 1466, 594, 779,
	819, 1781, 3591, 175, 213, 1049, 182, 213, 1792, 213,
	1222, 176, 777, 3307, 1443, 1444, 175, 781, 213, 1058,
	775, 772, 2639, 3300, 176, 1896, 1790, 1723, 1716, 1057,
	1453, 1427, 150, 1932, 1383, 1847, 2995, 213, 1809, 1808,
	2061, 1446, 1930, 213, 2692, 150, 2991, 2563, 1739, 645,
	2990, 2955, 1740, 2954, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 2498, 2497, 1425, 1070, 1052, 1882, 1445,
	821, 1057, 2496, 1842, 818, 1845, 1381, 1884, 2495, 2558,
	2463, 1223, 2307, 1752, 2258, 1315, 2299, 2296, 2277, 2210,
	2016, 1467, 1416, 1050, 2544, 2545, 2546, 2547, 2549, 2550,
	1051, 1948, 1973, 211, 1807, 639, 2027, 1953, 1887, 1186,
	2062, 2059, 1748, 1049, 1641, 1641, 2802, 819, 2652, 1667,
	2087, 2218, 2086, 1974, 2351, 1037, 3551, 1874, 1276, 1257,
	2025, 1256, 1336, 1753, 1754, 3401, 1010, 1886, 3237, 2047,
	2048, 1741, 1218, 1255, 820, 1254, 814, 2276, 1942, 1724,
	1891, 1070, 1451, 1941, 1743, 1666, 1666, 2047, 2073, 769,
	1875, 1749, 591, 2236, 1350, 2293, 1790, 2550, 3175, 1885,
	1426, 594, 1912, 2559, 2202, 638, 1730, 2287, 2031, 3286,
	1730, 2287, 1893, 1894, 1895, 1730, 2287, 2077, 829, 2265,
	1946, 818, 894, 2109, 213, 2113, 2113, 2126, 3552, 2047,
	1951, 1050, 2146, 2148, 1615, 2031, 2064, 2152, 1051, 1745,
	2128, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1409,
	1945, 2257, 3460, 1947, 2076, 1070, 213, 1950, 1424, 1423,
	1952, 2264, 1846, 850, 2021, 213, 1940, 1900, 213, 1052,
	2805, 1070, 2022, 801, 1347, 2023, 801, 801, 2028, 1905,
	2200, 2804, 1018, 1961, 1380, 839, 1962, 1963, 1371, 821,
	2430, 820, 2542, 2543, 1357, 1638, 1638, 3534, 2072, 647,
	646, 2064, 821, 1035, 2085, 699, 821, 2201, 2246, 2089,
	2090, 817, 3554, 1235, 2846, 2554, 2555, 2556, 1901, 2246,
	2244, 1331, 2553, 2551, 2552, 2544, 2545, 2546, 2547, 2549,
	2550, 2244, 2043, 1746, 1761, 2058, 1899, 1860, 1357, 1372,
	1862, 2183, 2208, 1864, 2184, 2193, 2194, 1867, 1017, 1233,
	213, 2070, 2649, 1765, 637, 3160, 636, 2039, 1171, 3571,
	3236, 3524, 1906, 2037, 2686, 2256, 2451, 2452, 2968, 2275,
	3559, 1335, 979, 761, 2167, 2197, 2758, 1052, 2759, 1015,
	1970, 1971, 2121, 1395, 640, 1070, 1220, 1232, 2703, 2698,
	213, 573, 2212, 2137, 821, 812, 1762, 2150, 213, 1772,
	1730, 1727, 1755, 141, 1757, 2232, 1006, 531, 2169, 213,
	2064, 1706, 2158, 2159, 2173, 2174, 3581, 2234, 1332, 773,
	2024, 2241, 213, 1857, 1337, 1171, 1235, 1611, 817, 2026,
	2548, 526, 773, 783, 1275, 2758, 1746, 782, 213, 1070,
	774, 773, 1171, 3377, 213, 213, 2651, 1008, 1217, 2235,
	3553, 676, 1931, 1546, 1535, 2219, 1943, 761, 1939, 2636,
	2247, 1929, 1641, 2233, 1007, 1755, 1007, 2715, 762, 3193,
	213, 1742, 213, 2992, 2339, 213, 1766, 2271, 3541, 812,
	2297, 1447, 1448, 1449, 1450, 1452, 1453, 2040, 579, 2227,
	213, 1746, 3287, 1538, 1539, 3523, 2312, 213, 3158, 213,
	2680, 213, 1162, 1666, 2311, 2308, 1517, 213, 2304, 2226,
	213, 3065, 213, 2558, 213, 2682, 213, 213, 1185, 213,
	1171, 1171, 1171, 2366, 1171, 2317, 2279, 2319, 213, 213,
	3446, 213, 213, 2334, 2230, 1767, 1768, 2294, 2684, 3247,
	2843, 2465, 213, 2679, 1763, 3387, 2168, 2436, 2067, 2259,
	2261, 2250, 762, 2133, 1904, 213, 213, 213, 2405, 3557,
	213, 770, 213, 2267, 1501, 213, 598, 213, 2030, 213,
	2357, 581, 2357, 1764, 2278, 2379, 2380, 2013, 700, 2288,
	2290, 2291, 2292, 2375, 1392, 2683, 3486, 2295, 2513, 3572,
	213, 213, 213, 213, 2192, 213, 1185, 1185, 2408, 2969,
	3233, 820, 2311, 2172, 2311, 1422, 2407, 2559, 2410, 2411,
	2844, 763, 2348, 1638, 1190, 2313, 2322, 3159, 3418, 213,
	1346, 2423, 3194, 2424, 2421, 591, 3201, 2338, 2979, 3558,
	2439, 2381, 3522, 1776, 594, 3151, 1586, 1185, 810, 2245,
	761, 3059, 141, 2412, 2298, 2413, 2943, 2368, 2418, 1034,
	2361, 1030, 2428, 2390, 1016, 3068, 3484, 3533, 2441, 1769,
	3531, 3560, 812, 3148, 3326, 1746, 3141, 575, 2376, 3205,
	1315, 1185, 1393, 2382, 2377, 3582, 2392, 2372, 2434, 2373,
	3139, 2374, 1858, 1898, 2747, 580, 3143, 2346, 2038, 1821,
	527, 1586, 1583, 1333, 1028, 763, 1784, 839, 2280, 1023,
	811, 839, 3232, 2466, 1590, 3149, 2064, 2011, 3487, 1154,
	2014, 2420, 2491, 2492, 1154, 764, 1783, 518, 213, 1359,
	2425, 3006, 2426, 1770, 2427, 577, 2438, 2501, 2552, 2544,
	2545, 2546, 2547, 2549, 2550, 762, 1593, 3142, 1434, 2378,
	3066, 2474, 528, 1394, 2435, 1779, 1433, 2442, 2445, 1756,
	2448, 3416, 1717, 765, 3292, 1588, 2900, 3107, 2010, 1590,
	2444, 1590, 2630, 574, 3367, 2472, 1753, 1754, 599, 600,
	1591, 3576, 3291, 3274, 2957, 1714, 2748, 2663, 2659, 2502,
	3417, 529, 3163, 530, 3485, 1501, 2347, 2487, 2612, 3162,
	2329, 1593, 1589, 1593, 1780, 2326, 1841, 2842, 1830, 764,
	578, 1829, 3234, 1803, 3389, 2579, 2464, 1070, 1957, 2599,
	1588, 576, 2170, 2584, 2164, 3426, 1936, 821, 2591, 2592,
	1710, 2593, 2437, 1373, 3023, 1591, 213, 1591, 3209, 2281,
	2323, 1278, 1433, 1432, 213, 3314, 3312, 765, 3275, 2670,
	1712, 213, 2669, 2590, 213, 213, 1070, 1589, 3144, 2457,
	1949, 3145, 2207, 1892, 2925, 1070, 1713, 2596, 602, 601,
	2595, 213, 2613, 696, 1434, 2206, 2508, 2205, 1592, 2469,
	689, 1249, 2336, 2617, 1263, 818, 213, 3372, 763, 2166,
	2470, 1261, 2620, 2475, 2165, 698, 2012, 3185, 1250, 2790,
	3147, 2628, 2901, 3282, 213, 213, 213, 1839, 2902, 3108,
	213, 2717, 3150, 213, 2611, 3538, 3310, 1958, 603, 604,
	213, 213, 213, 213, 213, 2606, 1641, 3575, 2647, 1432,
	2656, 2657, 2634, 1592, 2615, 1592, 213, 213, 213, 2625,
	3113, 2653, 3161, 2605, 2621, 213, 2671, 2645, 2674, 2626,
	2602, 2915, 2608, 2672, 2607, 2676, 2677, 213, 1171, 2585,
	213, 3390, 1641, 2081, 2618, 2619, 2600, 1666, 1070, 2574,
	2575, 2576, 2598, 1739, 3429, 3540, 1070, 1740, 2282, 2283,
	2660, 213, 3283, 3373, 213, 213, 3502, 1360, 3272, 3384,
	809, 1010, 764, 1010, 213, 2643, 2644, 1171, 213, 2616,
	1171, 1171, 1171, 1666, 2695, 2687, 2688, 213, 2614, 2689,
	1627, 2726, 2628, 213, 3146, 3252, 3106, 1185, 2631, 213,
	3273, 213, 2732, 2632, 2633, 2133, 2133, 1407, 213, 2648,
	765, 1389, 2572, 1387, 2997, 2471, 814, 1818, 2709, 2710,
	3430, 2697, 2711, 2654, 2473, 2405, 2571, 2432, 2826, 3374,
	1370, 1171, 1171, 2799, 2405, 1368, 1744, 2713, 1366, 213,
	213, 2536, 1364, 213, 1007, 2685, 1741, 2476, 2736, 2333,
	1171, 2763, 2704, 2691, 2306, 694, 695, 1638, 2699, 1743,
	1262, 1744, 687, 688, 1362, 2273, 2225, 1260, 1007, 1621,
	2702, 697, 1354, 1352, 213, 2708, 1070, 213, 213, 1070,
	213, 2714, 2754, 1259, 3480, 2279, 1618, 1408, 1326, 1928,
	2431, 2415, 2700, 1638, 1786, 2707, 2701, 2777, 213, 1938,
	1909, 1699, 1786, 2588, 1549, 1330, 2133, 2133, 2133, 1239,
	2080, 3180, 1179, 3170, 1745, 1068, 3423, 3137, 2601, 3021,
	2974, 2797, 2972, 3151, 2956, 926, 2746, 2731, 2760, 2792,
	821, 1585, 2776, 771, 2730, 2750, 2352, 2769, 1154, 2810,
	2341, 1070, 2637, 141, 2340, 2320, 1871, 2811, 2753, 2762,
	1870, 3148, 1070, 1868, 213, 1866, 1863, 2705, 1861, 1406,
	1185, 2829, 2788, 1388, 209, 1386, 521, 522, 1641, 537,
	521, 537, 547, 552, 1859, 1850, 568, 2851, 2664, 839,
	2798, 1800, 1369, 1798, 209, 1154, 3520, 1367, 2857, 1787,
	1365, 1774, 1771, 3149, 1363, 2854, 2737, 1758, 1747, 2739,
	2740, 2741, 686, 988, 2807, 3330, 209, 1436, 1746, 1666,
	1628, 1006, 3535, 1006, 2812, 3452, 1361, 1641, 1641, 2838,
	2839, 2814, 2455, 3228, 1353, 1351, 3223, 989, 3222, 2912,
	2406, 1733, 2808, 1641, 1641, 1258, 1214, 3332, 1927, 2655,
	2263, 2246, 3032, 1755, 1902, 2246, 1926, 213, 2246, 2834,
	2783, 2784, 1008, 2244, 1008, 776, 778, 2262, 1666, 1666,
	2260, 1925, 213, 1907, 1641, 1404, 1405, 2853, 1070, 1790,
	2865, 2860, 3379, 2866, 1666, 1666, 3353, 2867, 3114, 2869,
	2284, 2864, 2266, 827, 2845, 2847, 2848, 213, 2934, 2877,
	1440, 2311, 532, 1437, 2904, 2879, 2456, 1443, 1444, 1443,
	1444, 521, 521, 2303, 2942, 1666, 2270, 1707, 2301, 209,
	2268, 3422, 3555, 990, 3392, 2302, 3010, 1154, 2269, 1638,
	2905, 2635, 3005, 3574, 1446, 2940, 2360, 2151, 1702, 1633,
	3394, 2913, 2916, 213, 2918, 2919, 3144, 1514, 543, 3145,
	3085, 2981, 141, 2542, 2543, 1340, 1742, 2084, 2952, 1443,
	1444, 1339, 1445, 2945, 1445, 2238, 2237, 2929, 2849, 2238,
	2641, 2239, 2088, 2994, 2082, 2055, 2944, 2841, 1638, 1638,
	213, 213, 213, 1512, 1510, 3583, 2936, 1391, 3147, 3364,
	1390, 3304, 3266, 3264, 1638, 1638, 3196, 1070, 213, 3131,
	3150, 2985, 1171, 3056, 2949, 1739, 3049, 3038, 3016, 1740,
	3000, 2999, 2998, 2971, 2986, 2988, 213, 2771, 2772, 2773,
	2770, 2774, 2775, 2960, 3034, 1638, 2744, 1641, 2742, 213,
	213, 1171, 1171, 1171, 2417, 213, 213, 213, 2416, 2996,
	213, 213, 2366, 2370, 213, 213, 2345, 1171, 3013, 2321,
	2133, 2133, 2042, 213, 1070, 3025, 1924, 3029, 1923, 1922,
	3028, 1921, 1818, 1970, 2870, 1853, 3024, 1070, 1666, 2279,
	1852, 2405, 1851, 1833, 1811, 1810, 1806, 1805, 1804, 1970,
	2880, 1802, 1801, 1403, 1402, 1287, 3019, 1286, 3015, 1285,
	1284, 1283, 3014, 1282, 3083, 1281, 1280, 3009, 1741, 1279,
	1277, 3057, 3146, 3026, 1272, 1271, 3045, 1270, 1269, 3030,
	2908, 1743, 213, 3036, 3035, 1268, 1231, 1230, 1229, 1228,
	1227, 3079, 1226, 3041, 3040, 1225, 3058, 3052, 1641, 1219,
	2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133,
	2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133, 3055,
	2133, 3062, 3067, 2921, 2922, 3048, 3071, 1213, 3070, 3046,
	3047, 1211, 3051, 1210, 1033, 1032, 1745, 963, 3054, 1666,
	873, 1010, 1708, 784, 213, 631, 768, 3285, 1638, 1154,
	1397, 73, 1221, 618, 1070, 67, 1070, 2970, 3434, 2678,
	1908, 1358, 1910, 2604, 2175, 1010, 3415, 3092, 2512, 3359,
	3246, 2079, 1531, 69, 861, 213, 213, 213, 946, 3192,
	3191, 3138, 3105, 2959, 2395, 3189, 3188, 213, 828, 1073,
	1718, 1007, 3126, 213, 867, 213, 1731, 2221, 213, 213,
	213, 3134, 3135, 2112, 1637, 3119, 1007, 870, 1639, 872,
	1070, 213, 213, 1171, 871, 3121, 1070, 1640, 1171, 3165,
	3042, 3043, 3044, 1960, 213, 1533, 3123, 3166, 3118, 1021,
	1746, 869, 1636, 2664, 1154, 1007, 2335, 3127, 2625, 213,
	3116, 3117, 1070, 3124, 2364, 1171, 1266, 3136, 3157, 1638,
	3186, 749, 1722, 2036, 2074, 3122, 2507, 1031, 1528, 3167,
	3168, 1737, 841, 863, 568, 2071, 1026, 840, 2609, 3156,
	2757, 2939, 3183, 3214, 213, 827, 1956, 3155, 2447, 827,
	209, 634, 209, 209, 2539, 1176, 1070, 209, 2056, 2973,
	1019, 2975, 1818, 2134, 2588, 209, 1192, 3213, 3211, 2127,
	2123, 1411, 3195, 3199, 3198, 3182, 3187, 3200, 1154, 3210,
	1503, 1194, 1070, 1198, 3177, 1204, 2365, 1060, 3212, 844,
	1216, 2034, 1068, 1519, 1154, 2481, 2764, 3178, 2623, 2216,
	3217, 3207, 3449, 1964, 1238, 3227, 1820, 987, 209, 209,
	986, 1176, 985, 3218, 3440, 3258, 3235, 3437, 3244, 2724,
	1070, 1711, 2231, 209, 3224, 1495, 2129, 2733, 213, 857,
	213, 1274, 1070, 213, 1184, 2589, 2791, 1236, 1742, 3378,
	1494, 213, 780, 3254, 3369, 209, 209, 209, 209, 1176,
	1641, 1006, 1047, 1046, 3238, 1045, 3244, 568, 2662, 209,
	209, 3269, 3268, 213, 3580, 3243, 2967, 180, 1973, 1324,
	3259, 3260, 177, 686, 179, 1006, 1327, 178, 2983, 2716,
	90, 35, 16, 116, 213, 115, 114, 113, 213, 112,
	111, 1666, 1008, 110, 109, 108, 213, 107, 3267, 3262,
	3318, 1171, 3179, 3313, 3303, 1641, 213, 106, 1154, 105,
	104, 3288, 103, 102, 2726, 3115, 1008, 101, 100, 99,
	98, 3301, 3263, 3120, 97, 96, 95, 213, 213, 94,
	1377, 209, 93, 3311, 92, 91, 3305, 564, 561, 49,
	48, 89, 88, 15, 209, 33, 1666, 213, 3334, 13,
	3317, 53, 54, 213, 3328, 12, 3322, 1883, 28, 552,
	3329, 3333, 1154, 213, 3028, 3327, 29, 3331, 79, 78,
	27, 14, 26, 24, 10, 8, 7, 3323, 30, 1595,
	3325, 11, 3366, 3375, 3335, 146, 145, 3357, 72, 144,
	71, 143, 3343, 142, 1641, 3350, 3365, 70, 22, 3339,
	3340, 1638, 9, 138, 3319, 3011, 66, 140, 1185, 139,
	3386, 63, 1496, 1497, 1498, 1499, 1500, 213, 1171, 137,
	136, 64, 135, 213, 134, 3352, 65, 1171, 1171, 133,
	20, 5, 3408, 1171, 52, 1666, 6, 213, 3230, 213,
	2800, 83, 1516, 84, 31, 3393, 61, 60, 1529, 3396,
	59, 19, 51, 3400, 3419, 3404, 1638, 18, 170, 169,
	168, 213, 167, 3362, 162, 3412, 161, 213, 213, 166,
	1070, 3399, 3431, 3405, 3322, 164, 163, 165, 213, 213,
	160, 3406, 3407, 3443, 132, 172, 3447, 3411, 171, 3455,
	3453, 3457, 174, 158, 154, 153, 3439, 3442, 3413, 3436,
	3414, 1007, 1007, 3465, 157, 3451, 1973, 3464, 159, 156,
	155, 152, 213, 173, 3444, 131, 130, 56, 3461, 3459,
	129, 128, 127, 3491, 126, 125, 55, 17, 3432, 2,
	1, 0, 2133, 3479, 3478, 3476, 3477, 0, 0, 0,
	0, 3294, 0, 0, 0, 1638, 0, 0, 0, 0,
	3507, 213, 0, 521, 3509, 3493, 3511, 0, 0, 3454,
	0, 3516, 0, 3508, 3517, 3521, 0, 1579, 1579, 1579,
	0, 213, 3513, 0, 209, 2133, 209, 2366, 1010, 209,
	0, 0, 0, 0, 3527, 3528, 0, 3532, 3530, 1192,
	3529, 1176, 209, 1010, 0, 213, 0, 213, 0, 209,
	1192, 537, 3539, 3537, 209, 1192, 3545, 3536, 3547, 3544,
	568, 3543, 3439, 3549, 3550, 3442, 0, 0, 0, 0,
	0, 0, 1010, 3451, 0, 3514, 3515, 0, 0, 3518,
	3510, 3562, 3512, 3561, 0, 0, 0, 827, 0, 0,
	3568, 0, 3570, 3569, 0, 0, 0, 0, 3573, 0,
	3295, 3296, 0, 0, 3577, 0, 3542, 0, 0, 1443,
	1444, 0, 0, 0, 3578, 3579, 0, 3584, 0, 3585,
	0, 0, 1007, 0, 0, 0, 0, 0, 2133, 1474,
	0, 3588, 3589, 3590, 3592, 3593, 1446, 0, 2129, 2129,
	0, 0, 0, 3597, 0, 3595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1627, 0, 0,
	2478, 2479, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 1154,
	0, 0, 0, 0, 0, 0, 0, 0, 1154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2129,
	2129, 2129, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 839, 0, 0, 0, 0, 0, 0, 209, 209,
	0, 2565, 2566, 2567, 839, 209, 0, 0, 1006, 0,
	0, 0, 0, 1007, 0, 1838, 0, 0, 1473, 1475,
	0, 1007, 0, 1006, 209, 0, 209, 0, 209, 0,
	0, 0, 521, 0, 1007, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1854, 0, 0, 0, 0, 1008,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	1466, 1154, 0, 0, 0, 0, 0, 0, 0, 1154,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 686,
	0, 0, 0, 1008, 0, 0, 209, 0, 1176, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 0, 0, 0, 0, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 209, 209, 0, 209,
	0, 209, 0, 209, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1933,
	0, 0, 1934, 0, 1935, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 0, 0, 0, 0, 0, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1154,
	0, 0, 1154, 0, 1955, 0, 1959, 0, 1010, 1010,
	0, 0, 1966, 0, 0, 0, 0, 0, 0, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 0, 2015, 0, 2017, 2018, 2019,
	2020, 0, 0, 0, 1154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1154, 0, 2044, 0, 0,
	0, 0, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 1516, 0, 0, 0, 2069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2129, 2129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2102, 2103, 2104,
	2105, 2106, 2107, 2108, 0, 2822, 2823, 0, 2125, 521,
	2136, 2138, 2143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 521, 0, 0, 0, 0, 0, 0, 209, 1010,
	521, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 1154, 0, 2129, 2129, 2129, 2129, 2129, 2129, 2129,
	2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129,
	2129, 2129, 0, 2129, 0, 2881, 2882, 2883, 2884, 2885,
	2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895,
	2896, 2897, 2898, 2899, 0, 2903, 0, 0, 0, 0,
	0, 0, 0, 0, 678, 0, 0, 0, 1006, 1006,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 537, 0, 0, 0, 57,
	0, 680, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 1008,
	1008, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 2254, 0, 0, 0, 0,
	1154, 0, 0, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 68, 0,
	1010, 0, 0, 0, 0, 0, 0, 209, 1010, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1010, 0, 209, 0, 0, 0, 0, 74, 209,
	2314, 0, 0, 0, 0, 0, 0, 1154, 85, 2316,
	0, 2318, 0, 75, 82, 0, 0, 0, 0, 0,
	1154, 0, 0, 0, 0, 209, 0, 1192, 0, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1838, 0, 0, 0, 0,
	0, 0, 2254, 0, 521, 0, 2369, 76, 0, 1006,
	0, 0, 209, 0, 0, 209, 0, 209, 0, 209,
	0, 209, 209, 0, 1176, 0, 0, 0, 0, 0,
	0, 0, 0, 2388, 686, 0, 2254, 2254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 209, 0, 0,
	1008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	209, 1176, 209, 0, 0, 1192, 0, 1192, 0, 0,
	1176, 0, 1176, 0, 1176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1154, 2429, 1154,
	0, 0, 0, 0, 0, 209, 209, 1176, 209, 0,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1154, 0, 147, 80, 0, 81, 1154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 181, 1006, 0,
	0, 0, 2461, 2462, 57, 1154, 0, 0, 2468, 681,
	0, 1006, 0, 117, 0, 0, 0, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 2482, 2483, 0,
	0, 1008, 62, 2069, 0, 0, 183, 0, 0, 1008,
	0, 0, 2490, 0, 0, 0, 0, 0, 0, 1154,
	0, 0, 1008, 1192, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 68, 0, 0, 0, 0, 2510, 0,
	0, 0, 151, 0, 0, 1154, 0, 0, 0, 0,
	182, 0, 0, 2525, 0, 0, 0, 0, 0, 0,
	175, 0, 0, 74, 0, 0, 0, 0, 176, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 75, 82,
	0, 0, 0, 1154, 0, 0, 0, 0, 0, 679,
	0, 0, 0, 0, 0, 1154, 0, 0, 0, 0,
	0, 2143, 2143, 2143, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 0, 0, 0, 1579, 0, 0, 0,
	0, 0, 76, 0, 2594, 0, 209, 839, 0, 0,
	0, 521, 0, 0, 0, 0, 0, 57, 0, 521,
	0, 0, 0, 0, 0, 2129, 521, 0, 0, 521,
	521, 58, 0, 0, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 1192, 3251, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1192, 2542, 2543, 0, 2560, 2561, 2562, 2129, 827,
	0, 0, 0, 0, 0, 0, 68, 0, 0, 2254,
	2254, 209, 827, 0, 0, 2254, 0, 0, 2666, 2213,
	3277, 0, 0, 0, 0, 2254, 2666, 2254, 2666, 2666,
	0, 0, 0, 0, 0, 0, 74, 2681, 77, 0,
	0, 209, 209, 209, 0, 0, 85, 0, 0, 0,
	0, 75, 82, 0, 0, 0, 2557, 0, 0, 0,
	0, 0, 209, 0, 0, 1176, 0, 0, 0, 0,
	147, 80, 0, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2720, 0, 0, 2722,
	2254, 0, 181, 0, 0, 76, 0, 0, 0, 209,
	0, 2129, 0, 209, 681, 0, 0, 0, 117, 0,
	0, 0, 209, 0, 0, 0, 0, 927, 1176, 0,
	0, 0, 0, 3356, 2254, 0, 521, 2755, 0, 0,
	2548, 183, 0, 2254, 0, 0, 2542, 2543, 0, 2560,
	2561, 2562, 0, 1154, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 118, 2830, 210, 2564, 0, 0,
	0, 0, 0, 0, 209, 1838, 0, 151, 1838, 0,
	0, 0, 0, 0, 0, 182, 210, 0, 0, 0,
	0, 2563, 0, 0, 0, 175, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 0, 210, 2806,
	2557, 77, 1176, 209, 0, 209, 0, 0, 0, 0,
	0, 0, 0, 2558, 150, 0, 0, 0, 0, 0,
	0, 2813, 0, 209, 0, 1966, 0, 0, 0, 0,
	0, 2817, 2818, 147, 80, 2821, 81, 0, 0, 2824,
	0, 0, 0, 0, 0, 0, 0, 0, 2828, 0,
	0, 0, 0, 0, 0, 181, 0, 2835, 0, 0,
	2594, 0, 0, 0, 0, 0, 0, 681, 0, 0,
	0, 117, 0, 0, 2548, 0, 0, 0, 0, 2862,
	0, 2855, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 183, 0, 0, 0, 0, 57,
	2871, 2872, 0, 2873, 2874, 2875, 0, 2559, 2876, 0,
	0, 0, 2878, 58, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 2563, 0, 62, 0, 0,
	151, 0, 0, 0, 0, 893, 0, 0, 182, 0,
	0, 0, 0, 2906, 2907, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 176, 2558, 68, 0,
	0, 209, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 2924, 521, 0, 208, 0, 0, 150, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 74, 0,
	0, 0, 0, 0, 592, 0, 0, 0, 85, 0,
	0, 0, 0, 75, 82, 0, 0, 0, 0, 0,
	0, 0, 1192, 0, 0, 0, 592, 0, 0, 2554,
	2555, 2556, 0, 0, 2953, 0, 2553, 2551, 2552, 2544,
	2545, 2546, 2547, 2549, 2550, 0, 0, 0, 0, 2961,
	2964, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	0, 2559, 0, 0, 0, 0, 0, 0, 568, 0,
	0, 0, 0, 2982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3007, 209, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 209, 0, 0, 0, 0, 0, 1009,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1579, 2254, 209, 0, 0, 0, 0, 0, 0, 3037,
	0, 0, 0, 0, 2388, 2388, 0, 0, 0, 0,
	686, 686, 2254, 77, 0, 1838, 1838, 0, 0, 686,
	2254, 0, 0, 2554, 2555, 2556, 0, 0, 209, 0,
	2553, 2551, 2552, 2544, 2545, 2546, 2547, 2549, 2550, 0,
	0, 0, 0, 0, 0, 147, 80, 0, 81, 0,
	0, 3072, 3073, 0, 0, 0, 0, 3077, 3078, 0,
	0, 0, 3081, 3082, 0, 0, 0, 181, 0, 3086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 681,
	0, 0, 0, 117, 0, 0, 0, 3093, 3090, 0,
	0, 0, 0, 0, 0, 3094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 1443, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 118,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 151, 209, 0, 0, 0, 0, 0, 1192,
	182, 209, 210, 1075, 210, 210, 1075, 0, 1075, 210,
	175, 0, 1445, 0, 209, 0, 0, 210, 176, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 0,
	2254, 2254, 2254, 0, 0, 0, 0, 1443, 1444, 1318,
	0, 0, 1192, 0, 0, 0, 0, 2964, 2254, 0,
	2666, 0, 0, 1192, 1192, 209, 0, 1474, 1075, 1075,
	210, 210, 0, 0, 1446, 0, 209, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 2254,
	0, 0, 0, 0, 0, 1468, 1469, 1470, 1471, 0,
	0, 0, 1445, 0, 3204, 1451, 0, 210, 210, 210,
	210, 1465, 1075, 1075, 0, 0, 0, 1075, 0, 0,
	1075, 210, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1475, 0, 1192,
	0, 0, 2964, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2820, 0, 0,
	0, 0, 0, 0, 0, 0, 3239, 3240, 3241, 0,
	0, 1075, 0, 0, 0, 1468, 1469, 1470, 1471, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 1466, 0,
	0, 3249, 3250, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3257, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 1475, 0, 0,
	0, 0, 0, 2254, 0, 2666, 0, 0, 3271, 0,
	208, 0, 208, 208, 0, 0, 209, 208, 0, 0,
	0, 0, 0, 0, 0, 592, 2964, 0, 0, 0,
	0, 0, 0, 0, 3293, 0, 0, 0, 568, 0,
	0, 0, 3299, 0, 1472, 827, 0, 0, 1466, 0,
	0, 0, 3306, 0, 0, 0, 0, 0, 0, 3271,
	0, 0, 1467, 2254, 0, 0, 0, 0, 208, 208,
	0, 209, 0, 0, 0, 2964, 0, 0, 2964, 0,
	897, 1192, 0, 208, 0, 0, 0, 0, 2542, 2543,
	0, 2560, 2561, 2562, 0, 0, 0, 2964, 2964, 0,
	0, 0, 209, 209, 0, 208, 208, 208, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	208, 0, 2862, 0, 1472, 0, 0, 0, 521, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3271, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 3368, 0,
	0, 3371, 2557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	0, 208, 209, 0, 0, 0, 0, 0, 2666, 0,
	0, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 0, 1192, 0, 1192, 0, 0, 0, 0, 0,
	0, 210, 0, 0, 0, 0, 2548, 0, 0, 0,
	0, 0, 1075, 0, 210, 210, 3427, 0, 0, 0,
	0, 210, 1192, 209, 2542, 2543, 210, 2560, 2561, 2562,
	0, 0, 0, 209, 2254, 827, 0, 0, 1075, 0,
	0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 2563, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 2862, 3475, 3475,
	3475, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 214, 0, 0, 0, 0, 3494, 2557, 2558,
	0, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 1492, 2254, 0, 2964, 0,
	2964, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3475, 0, 3271, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 585, 0, 0, 1462, 0, 0, 0, 0, 0,
	1192, 0, 2254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2548, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2559, 1075, 210, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 0, 3475, 0, 0,
	0, 1451, 0, 0, 1609, 0, 1009, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 210, 208, 1609, 0, 1483, 0, 210, 1493, 592,
	0, 0, 1473, 1475, 592, 2558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 210, 0, 210, 0,
	210, 0, 1489, 0, 1490, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 1466, 2554, 2555, 2556, 0, 0,
	0, 0, 2553, 2551, 2552, 2544, 2545, 2546, 2547, 2549,
	2550, 0, 1491, 0, 0, 0, 1075, 0, 1075, 0,
	0, 0, 0, 0, 1075, 0, 0, 1075, 210, 0,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 2559,
	1075, 1075, 1075, 0, 0, 0, 0, 0, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 210,
	0, 210, 0, 210, 0, 210, 0, 210, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 1173,
	0, 1072, 0, 1075, 0, 0, 0, 0, 208, 208,
	0, 2554, 2555, 2556, 0, 208, 0, 0, 2553, 2551,
	2552, 2544, 2545, 2546, 2547, 2549, 2550, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 208, 0, 208, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1173, 1173, 0, 0, 0, 0, 1482, 0, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0, 668,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 1173, 1173, 0, 0, 0,
	1173, 0, 650, 1173, 0, 0, 208, 0, 0, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 0, 0, 651, 592, 208, 0, 208,
	0, 208, 0, 208, 652, 208, 0, 0, 0, 0,
	0, 0, 0, 0, 1173, 0, 0, 0, 0, 0,
	653, 0, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 210, 673, 124, 1075, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 0, 0,
	0, 654, 0, 0, 0, 0, 0, 58, 119, 0,
	0, 0, 0, 0, 1002, 0, 0, 0, 0, 0,
	655, 62, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 1172, 0, 1071, 0, 0, 39, 121, 0, 0,
	656, 0, 0, 657, 0, 0, 0, 0, 0, 0,
	38, 0, 68, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 672,
	0, 0, 41, 0, 0, 1075, 0, 42, 0, 0,
	0, 0, 74, 1172, 1172, 122, 0, 0, 0, 0,
	0, 40, 85, 0, 0, 0, 0, 75, 82, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 862, 87, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 0, 210, 1172, 1172, 0,
	0, 0, 1172, 0, 0, 1172, 0, 0, 0, 210,
	0, 76, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 210, 1075, 0, 0, 1075,
	0, 210, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1009, 0, 0, 0, 0, 676,
	660, 0, 0, 0, 0, 0, 1172, 210, 87, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 1009, 0,
	0, 0, 0, 208, 0, 0, 0, 675, 0, 0,
	0, 0, 0, 0, 661, 0, 0, 662, 0, 0,
	0, 0, 0, 670, 210, 0, 0, 210, 0, 210,
	663, 210, 0, 210, 210, 0, 0, 1075, 1075, 1075,
	0, 1075, 0, 0, 0, 1072, 0, 77, 0, 0,
	0, 0, 0, 0, 802, 44, 0, 0, 0, 210,
	664, 671, 0, 822, 0, 0, 0, 0, 665, 0,
	0, 1173, 210, 0, 210, 0, 0, 0, 47, 147,
	80, 667, 81, 0, 45, 0, 666, 0, 123, 0,
	0, 0, 1072, 0, 46, 0, 997, 0, 674, 0,
	0, 181, 0, 0, 0, 0, 0, 210, 210, 669,
	210, 0, 210, 50, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 0, 120, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 210, 0, 0, 0,
	183, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	0, 608, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 609, 0, 151, 0, 0, 592,
	0, 0, 0, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 208, 0, 610, 629, 0,
	208, 0, 0, 0, 0, 0, 0, 1173, 0, 0,
	0, 0, 0, 150, 1072, 0, 3, 0, 0, 611,
	0, 0, 612, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 208, 0, 208, 635, 208,
	0, 208, 208, 0, 613, 0, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 585, 208, 0, 0,
	0, 585, 614, 0, 0, 0, 0, 0, 0, 0,
	208, 0, 208, 1172, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 0, 0, 616, 639, 0, 0, 0,
	642, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 208, 208, 0, 208, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1173,
	0, 1173, 0, 0, 208, 0, 0, 1173, 0, 0,
	1173, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 1075, 1173, 1173, 1173, 638, 0, 0, 0,
	0, 0, 0, 619, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 1183, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1172,
	0, 0, 621, 210, 210, 210, 1071, 0, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1267, 0, 210, 1075, 0, 0, 0, 641,
	0, 0, 0, 0, 0, 1075, 1072, 0, 0, 622,
	0, 0, 0, 1075, 1291, 1291, 1291, 1183, 0, 0,
	0, 0, 623, 0, 0, 0, 0, 0, 1322, 1323,
	0, 210, 0, 0, 1075, 210, 0, 1075, 1075, 1075,
	628, 0, 0, 87, 210, 87, 0, 87, 0, 0,
	0, 0, 624, 0, 0, 637, 0, 636, 0, 0,
	625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1009, 0, 626, 0, 0, 0, 0, 632, 0,
	0, 0, 0, 643, 0, 640, 1009, 0, 1075, 1075,
	630, 1072, 0, 0, 1443, 1444, 210, 0, 0, 0,
	1396, 1172, 0, 1172, 0, 0, 0, 1075, 0, 1172,
	0, 0, 1172, 0, 1474, 1609, 0, 0, 0, 0,
	0, 1446, 822, 87, 0, 1172, 1172, 1172, 0, 0,
	0, 87, 0, 1075, 0, 210, 1075, 210, 87, 0,
	0, 0, 0, 585, 0, 0, 0, 0, 0, 1445,
	0, 1443, 1444, 0, 0, 210, 0, 0, 1465, 0,
	0, 208, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 1072, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 208, 208, 208, 0, 0, 0, 0, 1075, 0,
	1609, 0, 0, 0, 2819, 0, 1445, 0, 0, 1075,
	0, 0, 208, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1468, 1469, 1470, 1471, 0, 0, 1071, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 208,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 2467, 208, 1473, 1475, 0, 0, 802, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 1506, 0, 0, 0, 1451,
	0, 0, 0, 0, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 1515, 0, 0, 0, 1521, 0, 0,
	0, 0, 0, 1071, 208, 1466, 0, 0, 0, 0,
	1473, 1475, 0, 0, 0, 1075, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1616, 1072,
	0, 0, 1173, 208, 0, 208, 0, 0, 0, 0,
	0, 1625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 210, 210,
	1173, 1173, 1173, 0, 1173, 0, 0, 0, 87, 0,
	0, 1607, 0, 1610, 1075, 210, 0, 0, 1472, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1075, 1075,
	1075, 0, 0, 0, 0, 0, 0, 0, 1443, 1444,
	1172, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	210, 1075, 0, 0, 0, 0, 0, 0, 1474, 0,
	0, 1009, 1009, 0, 1075, 1446, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 1172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1071, 0, 0, 1172, 0, 0, 1813, 0, 0,
	0, 0, 0, 0, 1825, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 0, 0, 0, 0, 2460, 0,
	0, 0, 0, 1267, 0, 1844, 0, 1844, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 1469, 1470, 1471,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 1075, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 208, 0, 0,
	0, 0, 1172, 1172, 1172, 0, 1172, 1473, 1475, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1825, 0, 210, 1889, 0,
	0, 0, 1009, 0, 0, 0, 0, 1075, 210, 210,
	1075, 0, 0, 1075, 0, 1075, 1903, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1913, 0, 1915, 1466,
	1917, 0, 1919, 0, 1920, 0, 0, 1072, 208, 1075,
	0, 0, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1937, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 822, 0, 1075, 0, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 761, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 1009, 0, 0, 735, 0, 0, 1075,
	0, 1009, 0, 0, 0, 0, 0, 0, 210, 0,
	746, 733, 0, 0, 1609, 0, 0, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 734, 0, 1072, 0, 802, 736,
	0, 802, 802, 767, 0, 0, 0, 0, 0, 0,
	743, 744, 0, 0, 0, 208, 755, 1173, 0, 0,
	1173, 1173, 1173, 210, 0, 0, 208, 208, 1075, 762,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452,
	1453, 0, 0, 0, 210, 210, 2033, 760, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	822, 1173, 1173, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2198, 1515, 0, 0, 0, 1515, 0, 739,
	1173, 0, 0, 0, 0, 0, 0, 732, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 740, 741, 0, 0, 1072, 0, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 748, 747, 0, 0, 0, 0,
	0, 0, 742, 0, 210, 1075, 0, 0, 0, 0,
	0, 997, 0, 0, 1075, 1075, 0, 766, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 0, 0, 1610, 0, 0, 0, 0,
	0, 1072, 0, 0, 0, 0, 208, 0, 0, 0,
	0, 0, 1072, 0, 0, 210, 87, 1075, 0, 0,
	1172, 0, 0, 0, 0, 210, 0, 0, 0, 737,
	1071, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 759, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1172,
	0, 208, 1172, 1172, 1172, 0, 0, 0, 0, 0,
	0, 757, 1183, 0, 0, 0, 0, 0, 0, 0,
	0, 751, 0, 0, 0, 0, 0, 752, 0, 0,
	0, 0, 208, 208, 730, 0, 764, 0, 0, 0,
	0, 0, 0, 0, 2332, 0, 0, 0, 0, 1825,
	0, 731, 0, 1172, 1172, 0, 0, 0, 0, 0,
	0, 753, 0, 0, 0, 750, 0, 0, 1072, 0,
	0, 0, 1172, 87, 765, 0, 0, 0, 0, 0,
	0, 2371, 754, 0, 1291, 0, 1291, 0, 1291, 0,
	1183, 1183, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 1071, 756, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2414, 0, 0, 0,
	0, 87, 208, 87, 758, 0, 0, 0, 0, 2419,
	0, 2422, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 2440, 1183, 87, 2443, 87, 0,
	0, 0, 0, 208, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 1072, 0, 0,
	0, 0, 1173, 2458, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1173, 1173, 1173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1173, 0, 0,
	0, 0, 0, 0, 1072, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 1072, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2033, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1072, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 1172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1072, 0, 0, 1173, 0, 0, 1072, 0, 1173, 0,
	0, 0, 0, 1172, 1172, 1172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1172,
	0, 0, 1072, 0, 0, 1173, 1071, 0, 0, 0,
	2658, 0, 0, 0, 0, 0, 0, 0, 997, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 997, 0, 0, 0, 0, 0, 0,
	2694, 2696, 2332, 0, 0, 0, 1072, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 1474,
	0, 0, 1072, 0, 0, 0, 1446, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2734, 0,
	0, 0, 2738, 0, 1445, 0, 0, 0, 0, 0,
	1072, 2745, 0, 1465, 0, 0, 0, 0, 0, 0,
	1462, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 87, 0, 0, 87, 1071, 0, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2787, 87, 87, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 1173, 1071, 0, 0, 1172, 0, 0, 1071, 0,
	1172, 0, 2809, 0, 1183, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 1493, 0, 0, 0, 1473, 1475,
	0, 822, 2815, 0, 1071, 0, 0, 1172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 87, 1460, 1461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 1071, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1491, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 1173, 0,
	0, 0, 0, 0, 0, 0, 0, 1173, 1173, 0,
	0, 0, 0, 1173, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1071, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1072, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 1172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 1462, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 997, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 0, 0, 0, 3008, 3101, 0, 0, 0,
	3100, 1468, 1469, 1470, 1471, 0, 0, 0, 0, 0,
	0, 1451, 3020, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1172, 0, 0, 0, 0, 1483, 0, 0, 1493, 1172,
	1172, 0, 1473, 1475, 0, 1172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 1490, 0, 0, 3060, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 997,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 1474,
	0, 0, 0, 0, 3169, 0, 1446, 0, 0, 0,
	0, 1492, 0, 0, 0, 2332, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	997, 0, 0, 1465, 0, 0, 0, 0, 997, 0,
	1462, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0, 0,
	2530, 0, 0, 0, 2531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 1493, 0, 0, 0, 1473, 1475,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 3278, 0, 1460, 1461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3324, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3349, 1183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2033, 0, 0, 0, 0, 0, 0, 0,
	0, 3398, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3433, 1482, 0, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 3448, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 0, 0, 0, 0, 2065, 0, 0, 0,
	2066, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 1076,
	223, 1077, 1078, 1079, 0, 1080, 472, 1081, 1082, 1083,
	1084, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 1085, 232, 233, 234, 235, 236, 237,
	1086, 1087, 238, 477, 478, 479, 1088, 239, 480, 1089,
	1074, 1090, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 1091, 250, 87, 251, 252, 253, 1092,
	948, 254, 255, 1093, 1094, 1096, 1095, 1097, 1098, 1099,
	256, 257, 258, 259, 260, 261, 481, 482, 1100, 262,
	1101, 264, 263, 1102, 265, 1103, 1104, 266, 267, 268,
	1105, 269, 1106, 270, 271, 1107, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 1108,
	215, 1109, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 1110, 289, 1111, 1112, 949, 290,
	291, 1113, 292, 487, 1114, 488, 293, 1115, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 1116,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 1117,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 1118,
	494, 1119, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 1120, 323,
	322, 1121, 324, 496, 955, 325, 326, 956, 1122, 327,
	328, 1123, 1124, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 1125, 217, 958, 1126, 497, 498, 346, 347, 1127,
	348, 349, 350, 1128, 1129, 352, 353, 354, 1130, 1131,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 1132, 366, 367, 501,
	368, 502, 369, 1133, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 1134, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	1135, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 1136, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 1137,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	1138, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 1139, 436, 437, 435, 1140, 438, 439,
	440, 441, 442, 277, 443, 1141, 444, 507, 508, 509,
	510, 1142, 451, 1143, 445, 446, 511, 447, 512, 1144,
	448, 449, 450, 0, 452, 453, 1145, 1146, 454, 455,
	456, 457, 458, 460, 1147, 461, 1148, 459, 462, 463,
	464, 513, 514, 515, 1149, 466, 465, 516, 1150, 1151,
	1152, 1153, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 2185, 0,
	0, 0, 0, 0, 0, 0, 2186, 218, 219, 220,
	221, 222, 1076, 223, 1077, 1078, 1079, 0, 1080, 472,
	1081, 1082, 1083, 1084, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 1085, 232, 233, 234,
	235, 236, 237, 1086, 1087, 238, 477, 478, 479, 1088,
	239, 480, 1089, 1074, 1090, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 1091, 250, 0, 251,
	252, 253, 1092, 948, 254, 255, 1093, 1094, 1096, 1095,
	1097, 1098, 1099, 256, 257, 258, 259, 260, 261, 481,
	482, 1100, 262, 1101, 264, 263, 1102, 265, 1103, 1104,
	266, 267, 268, 1105, 269, 1106, 270, 271, 1107, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 1108, 215, 1109, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 1110, 289, 1111,
	1112, 949, 290, 291, 1113, 292, 487, 1114, 488, 293,
	1115, 294, 295, 296, 297, 489, 490, 491, 345, 951,
	298, 299, 1116, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 1117, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 1118, 494, 1119, 312, 952, 495, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 1120, 323, 322, 1121, 324, 496, 955, 325, 326,
	956, 1122, 327, 328, 1123, 1124, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 1125, 217, 958, 1126, 497, 498,
	346, 347, 1127, 348, 349, 350, 1128, 1129, 352, 353,
	354, 1130, 1131, 355, 356, 499, 959, 357, 960, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 1132,
	366, 367, 501, 368, 502, 369, 1133, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 1134, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 1135, 392, 961, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 1136, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 1137, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 1138, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 1139, 436, 437, 435,
	1140, 438, 439, 440, 441, 442, 277, 443, 1141, 444,
	507, 508, 509, 510, 1142, 451, 1143, 445, 446, 511,
	447, 512, 1144, 448, 449, 450, 0, 452, 453, 1145,
	1146, 454, 455, 456, 457, 458, 460, 1147, 461, 1148,
	459, 462, 463, 464, 513, 514, 515, 1149, 466, 465,
	516, 1150, 1151, 1152, 1153, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3125, 218, 219, 220, 221, 222, 1076, 223, 1077,
	1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 1085, 232, 233, 234, 235, 236, 237, 1086, 1087,
	238, 477, 478, 479, 1088, 239, 480, 1089, 1074, 1090,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 1091, 250, 0, 251, 252, 253, 1092, 948, 254,
	255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257,
	258, 259, 260, 261, 481, 482, 1100, 262, 1101, 264,
	263, 1102, 265, 1103, 1104, 266, 267, 268, 1105, 269,
	1106, 270, 271, 1107, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 1108, 215, 1109,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 1110, 289, 1111, 1112, 949, 290, 291, 1113,
	292, 487, 1114, 488, 293, 1115, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 1116, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 1117, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 1118, 494, 1119,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 1120, 323, 322, 1121,
	324, 496, 955, 325, 326, 956, 1122, 327, 328, 1123,
	1124, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 1125,
	217, 958, 1126, 497, 498, 346, 347, 1127, 348, 349,
	350, 1128, 1129, 352, 353, 354, 1130, 1131, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 1132, 366, 367, 501, 368, 502,
	369, 1133, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 1134, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 1135, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 1136, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 1137, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 1138, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 1139, 436, 437, 435, 1140, 438, 439, 440, 441,
	442, 277, 443, 1141, 444, 507, 508, 509, 510, 1142,
	451, 1143, 445, 446, 511, 447, 512, 1144, 448, 449,
	450, 0, 452, 453, 1145, 1146, 454, 455, 456, 457,
	458, 460, 1147, 461, 1148, 459, 462, 463, 464, 513,
	514, 515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153,
	467, 468, 517, 469, 470, 471, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3245, 0, 218, 219, 220, 221, 222, 1076, 223,
	1077, 1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 1085, 232, 233, 234, 235, 236, 237, 1086,
	1087, 238, 477, 478, 479, 1088, 239, 480, 1089, 1074,
	1090, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 1091, 250, 0, 251, 252, 253, 1092, 948,
	254, 255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256,
	257, 258, 259, 260, 261, 481, 482, 1100, 262, 1101,
	264, 263, 1102, 265, 1103, 1104, 266, 267, 268, 1105,
	269, 1106, 270, 271, 1107, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 1108, 215,
	1109, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 1110, 289, 1111, 1112, 949, 290, 291,
	1113, 292, 487, 1114, 488, 293, 1115, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 1116, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 1117, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 1118, 494,
	1119, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 1120, 323, 322,
	1121, 324, 496, 955, 325, 326, 956, 1122, 327, 328,
	1123, 1124, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	1125, 217, 958, 1126, 497, 498, 346, 347, 1127, 348,
	349, 350, 1128, 1129, 352, 353, 354, 1130, 1131, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 1132, 366, 367, 501, 368,
	502, 369, 1133, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 1134, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 1135,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 1136, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 1137, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 1138,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 1139, 436, 437, 435, 1140, 438, 439, 440,
	441, 442, 277, 443, 1141, 444, 507, 508, 509, 510,
	1142, 451, 1143, 445, 446, 511, 447, 512, 1144, 448,
	449, 450, 0, 452, 453, 1145, 1146, 454, 455, 456,
	457, 458, 460, 1147, 461, 1148, 459, 462, 463, 464,
	513, 514, 515, 1149, 466, 465, 516, 1150, 1151, 1152,
	1153, 467, 468, 517, 469, 470, 471, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3176, 0, 218, 219, 220, 221, 222, 1076,
	223, 1077, 1078, 1079, 0, 1080, 472, 1081, 1082, 1083,
	1084, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 1085, 232, 233, 234, 235, 236, 237,
	1086, 1087, 238, 477, 478, 479, 1088, 239, 480, 1089,
	1074, 1090, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 1091, 250, 0, 251, 252, 253, 1092,
	948, 254, 255, 1093, 1094, 1096, 1095, 1097, 1098, 1099,
	256, 257, 258, 259, 260, 261, 481, 482, 1100, 262,
	1101, 264, 263, 1102, 265, 1103, 1104, 266, 267, 268,
	1105, 269, 1106, 270, 271, 1107, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 1108,
	215, 1109, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 1110, 289, 1111, 1112, 949, 290,
	291, 1113, 292, 487, 1114, 488, 293, 1115, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 1116,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 1117,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 1118,
	494, 1119, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 1120, 323,
	322, 1121, 324, 496, 955, 325, 326, 956, 1122, 327,
	328, 1123, 1124, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 1125, 217, 958, 1126, 497, 498, 346, 347, 1127,
	348, 349, 350, 1128, 1129, 352, 353, 354, 1130, 1131,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 1132, 366, 367, 501,
	368, 502, 369, 1133, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 1134, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	1135, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 1136, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 1137,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	1138, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 1139, 436, 437, 435, 1140, 438, 439,
	440, 441, 442, 277, 443, 1141, 444, 507, 508, 509,
	510, 1142, 451, 1143, 445, 446, 511, 447, 512, 1144,
	448, 449, 450, 0, 452, 453, 1145, 1146, 454, 455,
	456, 457, 458, 460, 1147, 461, 1148, 459, 462, 463,
	464, 513, 514, 515, 1149, 466, 465, 516, 1150, 1151,
	1152, 1153, 467, 468, 517, 469, 470, 471, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3061, 0, 218, 219, 220, 221, 222,
	1076, 223, 1077, 1078, 1079, 0, 1080, 472, 1081, 1082,
	1083, 1084, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 1085, 232, 233, 234, 235, 236,
	237, 1086, 1087, 238, 477, 478, 479, 1088, 239, 480,
	1089, 1074, 1090, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 1091, 250, 0, 251, 252, 253,
	1092, 948, 254, 255, 1093, 1094, 1096, 1095, 1097, 1098,
	1099, 256, 257, 258, 259, 260, 261, 481, 482, 1100,
	262, 1101, 264, 263, 1102, 265, 1103, 1104, 266, 267,
	268, 1105, 269, 1106, 270, 271, 1107, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	1108, 215, 1109, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 1110, 289, 1111, 1112, 949,
	290, 291, 1113, 292, 487, 1114, 488, 293, 1115, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	1116, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	1117, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	1118, 494, 1119, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 1120,
	323, 322, 1121, 324, 496, 955, 325, 326, 956, 1122,
	327, 328, 1123, 1124, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 1125, 217, 958, 1126, 497, 498, 346, 347,
	1127, 348, 349, 350, 1128, 1129, 352, 353, 354, 1130,
	1131, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 1132, 366, 367,
	501, 368, 502, 369, 1133, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 1134, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 1135, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 1136,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	1137, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 1138, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 1139, 436, 437, 435, 1140, 438,
	439, 440, 441, 442, 277, 443, 1141, 444, 507, 508,
	509, 510, 1142, 451, 1143, 445, 446, 511, 447, 512,
	1144, 448, 449, 450, 0, 452, 453, 1145, 1146, 454,
	455, 456, 457, 458, 460, 1147, 461, 1148, 459, 462,
	463, 464, 513, 514, 515, 1149, 466, 465, 516, 1150,
	1151, 1152, 1153, 467, 468, 517, 469, 470, 471, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2858, 0, 218, 219, 220, 221,
	222, 1076, 223, 1077, 1078, 1079, 0, 1080, 472, 1081,
	1082, 1083, 1084, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 1085, 232, 233, 234, 235,
	236, 237, 1086, 1087, 238, 477, 478, 479, 1088, 239,
	480, 1089, 1074, 1090, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 1091, 250, 0, 251, 252,
	253, 1092, 948, 254, 255, 1093, 1094, 1096, 1095, 1097,
	1098, 1099, 256, 257, 258, 259, 260, 261, 481, 482,
	1100, 262, 1101, 264, 263, 1102, 265, 1103, 1104, 266,
	267, 268, 1105, 269, 1106, 270, 271, 1107, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 1108, 215, 1109, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 1110, 289, 1111, 1112,
	949, 290, 291, 1113, 292, 487, 1114, 488, 293, 1115,
	294, 295, 296, 297, 489, 490, 491, 345, 951, 298,
	299, 1116, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 1117, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 1118, 494, 1119, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	1120, 323, 322, 1121, 324, 496, 955, 325, 326, 956,
	1122, 327, 328, 1123, 1124, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 1125, 217, 958, 1126, 497, 498, 346,
	347, 1127, 348, 349, 350, 1128, 1129, 352, 353, 354,
	1130, 1131, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 1132, 366,
	367, 501, 368, 502, 369, 1133, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 1134, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 1135, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	1136, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 1137, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 1138, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 1139, 436, 437, 435, 1140,
	438, 439, 440, 441, 442, 277, 443, 1141, 444, 507,
	508, 509, 510, 1142, 451, 1143, 445, 446, 511, 447,
	512, 1144, 448, 449, 450, 0, 452, 453, 1145, 1146,
	454, 455, 456, 457, 458, 460, 1147, 461, 1148, 459,
	462, 463, 464, 513, 514, 515, 1149, 466, 465, 516,
	1150, 1151, 1152, 1153, 467, 468, 517, 469, 470, 471,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2850, 0, 218, 219, 220,
	221, 222, 1076, 223, 1077, 1078, 1079, 0, 1080, 472,
	1081, 1082, 1083, 1084, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 1085, 232, 233, 234,
	235, 236, 237, 1086, 1087, 238, 477, 478, 479, 1088,
	239, 480, 1089, 1074, 1090, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 1091, 250, 0, 251,
	252, 253, 1092, 948, 254, 255, 1093, 1094, 1096, 1095,
	1097, 1098, 1099, 256, 257, 258, 259, 260, 261, 481,
	482, 1100, 262, 1101, 264, 263, 1102, 265, 1103, 1104,
	266, 267, 268, 1105, 269, 1106, 270, 271, 1107, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 1108, 215, 1109, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 1110, 289, 1111,
	1112, 949, 290, 291, 1113, 292, 487, 1114, 488, 293,
	1115, 294, 295, 296, 297, 489, 490, 491, 345, 951,
	298, 299, 1116, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 1117, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 1118, 494, 1119, 312, 952, 495, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 1120, 323, 322, 1121, 324, 496, 955, 325, 326,
	956, 1122, 327, 328, 1123, 1124, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 1125, 217, 958, 1126, 497, 498,
	346, 347, 1127, 348, 349, 350, 1128, 1129, 352, 353,
	354, 1130, 1131, 355, 356, 499, 959, 357, 960, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 1132,
	366, 367, 501, 368, 502, 369, 1133, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 1134, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 1135, 392, 961, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 1136, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 1137, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 1138, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 1139, 436, 437, 435,
	1140, 438, 439, 440, 441, 442, 277, 443, 1141, 444,
	507, 508, 509, 510, 1142, 451, 1143, 445, 446, 511,
	447, 512, 1144, 448, 449, 450, 0, 452, 453, 1145,
	1146, 454, 455, 456, 457, 458, 460, 1147, 461, 1148,
	459, 462, 463, 464, 513, 514, 515, 1149, 466, 465,
	516, 1150, 1151, 1152, 1153, 467, 468, 517, 469, 470,
	471, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2719, 0, 218, 219,
	220, 221, 222, 1076, 223, 1077, 1078, 1079, 0, 1080,
	472, 1081, 1082, 1083, 1084, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 1085, 232, 233,
	234, 235, 236, 237, 1086, 1087, 238, 477, 478, 479,
	1088, 239, 480, 1089, 1074, 1090, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 1091, 250, 0,
	251, 252, 253, 1092, 948, 254, 255, 1093, 1094, 1096,
	1095, 1097, 1098, 1099, 256, 257, 258, 259, 260, 261,
	481, 482, 1100, 262, 1101, 264, 263, 1102, 265, 1103,
	1104, 266, 267, 268, 1105, 269, 1106, 270, 271, 1107,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 1108, 215, 1109, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 1110, 289,
	1111, 1112, 949, 290, 291, 1113, 292, 487, 1114, 488,
	293, 1115, 294, 295, 296, 297, 489, 490, 491, 345,
	951, 298, 299, 1116, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 1117, 950, 305, 492, 307, 306, 308,
	309, 310, 493, 1118, 494, 1119, 312, 952, 495, 953,
	313, 314, 315, 954, 316, 317, 0, 0, 318, 319,
	320, 321, 1120, 323, 322, 1121, 324, 496, 955, 325,
	326, 956, 1122, 327, 328, 1123, 1124, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	957, 341, 342, 344, 343, 1125, 217, 958, 1126, 497,
	498, 346, 347, 1127, 348, 349, 350, 1128, 1129, 352,
	353, 354, 1130, 1131, 355, 356, 499, 959, 357, 960,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	1132, 366, 367, 501, 368, 502, 369, 1133, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 1134,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 1135, 392, 961, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 1136, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 1137, 419, 399, 400, 420, 421, 962,
	422, 505, 423, 424, 1138, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 1139, 436, 437,
	435, 1140, 438, 439, 440, 441, 442, 277, 443, 1141,
	444, 507, 508, 509, 510, 1142, 451, 1143, 445, 446,
	511, 447, 512, 1144, 448, 449, 450, 0, 452, 453,
	1145, 1146, 454, 455, 456, 457, 458, 460, 1147, 461,
	1148, 459, 462, 463, 464, 513, 514, 515, 1149, 466,
	465, 516, 1150, 1151, 1152, 1153, 467, 468, 517, 469,
	470, 471, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2078, 0, 218,
	219, 220, 221, 222, 1076, 223, 1077, 1078, 1079, 0,
	1080, 472, 1081, 1082, 1083, 1084, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 1085, 232,
	233, 234, 235, 236, 237, 1086, 1087, 238, 477, 478,
	479, 1088, 239, 480, 1089, 1074, 1090, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 1091, 250,
	0, 251, 252, 253, 1092, 948, 254, 255, 1093, 1094,
	1096, 1095, 1097, 1098, 1099, 256, 257, 258, 259, 260,
	261, 481, 482, 1100, 262, 1101, 264, 263, 1102, 265,
	1103, 1104, 266, 267, 268, 1105, 269, 1106, 270, 271,
	1107, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 1108, 215, 1109, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 1110,
	289, 1111, 1112, 949, 290, 291, 1113, 292, 487, 1114,
	488, 293, 1115, 294, 295, 296, 297, 489, 490, 491,
	345, 951, 298, 299, 1116, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 1117, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 1118, 494, 1119, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 1120, 323, 322, 1121, 324, 496, 955,
	325, 326, 956, 1122, 327, 328, 1123, 1124, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 1125, 217, 958, 1126,
	497, 498, 346, 347, 1127, 348, 349, 350, 1128, 1129,
	352, 353, 354, 1130, 1131, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 1132, 366, 367, 501, 368, 502, 369, 1133, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	1134, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 1135, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 1136, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 1137, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 1138, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 1139, 436,
	437, 435, 1140, 438, 439, 440, 441, 442, 277, 443,
	1141, 444, 507, 508, 509, 510, 1142, 451, 1143, 445,
	446, 511, 447, 512, 1144, 448, 449, 450, 0, 452,
	453, 1145, 1146, 454, 455, 456, 457, 458, 460, 1147,
	461, 1148, 459, 462, 463, 464, 513, 514, 515, 1149,
	466, 465, 516, 1150, 1151, 1152, 1153, 467, 468, 517,
	469, 470, 471, 1177, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1796, 0,
	0, 0, 218, 219, 220, 221, 222, 1076, 223, 1077,
	1078, 1079, 0, 1080, 472, 1081, 1082, 1083, 1084, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 1085, 232, 233, 234, 235, 236, 237, 1086, 1087,
	238, 477, 478, 479, 1088, 239, 480, 1089, 1074, 1090,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 1091, 250, 0, 251, 252, 253, 1092, 948, 254,
	255, 1093, 1094, 1096, 1095, 1097, 1098, 1099, 256, 257,
	258, 259, 260, 261, 481, 482, 1100, 262, 1101, 264,
	263, 1102, 265, 1103, 1104, 266, 267, 268, 1105, 269,
	1106, 270, 271, 1107, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 1108, 215, 1109,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 1110, 289, 1111, 1112, 949, 290, 291, 1113,
	292, 487, 1114, 488, 293, 1115, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 1116, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 1117, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 1118, 494, 1119,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 1120, 323, 322, 1121,
	324, 496, 955, 325, 326, 956, 1122, 327, 328, 1123,
	1124, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 1125,
	217, 958, 1126, 497, 498, 346, 347, 1127, 348, 349,
	350, 1128, 1129, 352, 353, 354, 1130, 1131, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 1132, 366, 367, 501, 368, 502,
	369, 1133, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 1134, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 1135, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 1136, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 1137, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 1138, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 1139, 436, 437, 435, 1140, 438, 439, 440, 441,
	442, 277, 443, 1141, 444, 507, 508, 509, 510, 1142,
	451, 1143, 445, 446, 511, 447, 512, 1144, 448, 449,
	450, 0, 452, 453, 1145, 1146, 454, 455, 456, 457,
	458, 460, 1147, 461, 1148, 459, 462, 463, 464, 513,
	514, 515, 1149, 466, 465, 516, 1150, 1151, 1152, 1153,
	467, 468, 517, 469, 470, 471, 1066, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	1076, 223, 1077, 1078, 1079, 0, 1080, 472, 1081, 1082,
	1083, 1084, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 1085, 232, 233, 234, 235, 236,
	237, 1086, 1087, 238, 477, 478, 479, 1088, 239, 480,
	1089, 1074, 1090, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 1091, 250, 0, 251, 252, 253,
	1092, 948, 254, 255, 1093, 1094, 1096, 1095, 1097, 1098,
	1099, 256, 257, 258, 259, 260, 261, 481, 482, 1100,
	262, 1101, 264, 263, 1102, 265, 1103, 1104, 266, 267,
	268, 1105, 269, 1106, 270, 271, 1107, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	1108, 215, 1109, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 1110, 289, 1111, 1112, 949,
	290, 291, 1113, 292, 487, 1114, 488, 293, 1115, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	1116, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	1117, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	1118, 494, 1119, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 1120,
	323, 322, 1121, 324, 496, 955, 325, 326, 956, 1122,
	327, 328, 1123, 1124, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 1125, 217, 958, 1126, 497, 498, 346, 347,
	1127, 348, 349, 350, 1128, 1129, 352, 353, 354, 1130,
	1131, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 1132, 366, 367,
	501, 368, 502, 369, 1133, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 1134, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 1135, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 1136,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	1137, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 1138, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 1139, 436, 437, 435, 1140, 438,
	439, 440, 441, 442, 277, 443, 1141, 444, 507, 508,
	509, 510, 1142, 451, 1143, 445, 446, 511, 447, 512,
	1144, 448, 449, 450, 0, 452, 453, 1145, 1146, 454,
	455, 456, 457, 458, 460, 1147, 461, 1148, 459, 462,
	463, 464, 513, 514, 515, 1149, 466, 465, 516, 1150,
	1151, 1152, 1153, 467, 468, 517, 469, 470, 471, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 1076, 223, 1077, 1078, 1079, 0, 1080, 472, 1081,
	1082, 1083, 1084, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 1085, 232, 233, 234, 235,
	236, 237, 1086, 1087, 238, 477, 478, 479, 1088, 239,
	480, 1089, 1074, 1090, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 1091, 250, 0, 251, 252,
	253, 1092, 948, 254, 255, 1093, 1094, 1096, 1095, 1097,
	1098, 1099, 256, 257, 258, 259, 260, 261, 481, 482,
	1100, 262, 1101, 264, 263, 1102, 265, 1103, 1104, 266,
	267, 268, 1105, 269, 1106, 270, 271, 1107, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 1108, 215, 1109, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 1110, 289, 1111, 1112,
	949, 290, 291, 1113, 292, 487, 1114, 488, 293, 1115,
	294, 295, 296, 297, 489, 490, 491, 345, 951, 298,
	299, 1116, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 1117, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 1118, 494, 1119, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	1120, 323, 322, 1121, 324, 496, 955, 325, 326, 956,
	1122, 327, 328, 1123, 1124, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 1125, 217, 958, 1126, 497, 498, 346,
	347, 1127, 348, 349, 350, 1128, 1129, 352, 353, 354,
	1130, 1131, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 1132, 366,
	367, 501, 368, 502, 369, 1133, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 1134, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 1135, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	1136, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 1137, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 1138, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 1139, 436, 437, 435, 1140,
	438, 439, 440, 441, 442, 277, 443, 1141, 444, 507,
	508, 509, 510, 1142, 451, 1143, 445, 446, 511, 447,
	512, 1144, 448, 449, 450, 0, 452, 453, 1145, 1146,
	454, 455, 456, 457, 458, 460, 1147, 461, 1148, 459,
	462, 463, 464, 513, 514, 515, 1149, 466, 465, 516,
	1150, 1151, 1152, 1153, 467, 468, 517, 469, 470, 471,
	2054, 0, 890, 847, 848, 849, 845, 846, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 2051, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	2052, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 2050,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 2053, 0,
	0, 0, 0, 0, 0, 860, 2049, 0, 823, 858,
	890, 847, 848, 849, 845, 846, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 181, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	183, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 452, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 1316, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 175, 467, 468, 517, 469, 470,
	471, 834, 176, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 890, 847, 848, 849,
	845, 846, 859, 1520, 1518, 0, 0, 858, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 181, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 183, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	1316, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	175, 467, 468, 517, 469, 470, 471, 834, 176, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 890, 847, 848, 849, 845, 846, 859, 1520,
	2480, 0, 0, 858, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 181, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 183, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 1316, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 175, 467, 468, 517,
	469, 470, 471, 834, 176, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 890, 847,
	848, 849, 845, 846, 859, 1520, 1518, 0, 0, 858,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 2139, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 2144, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 2140, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 2141, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 834,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 1379, 858, 890, 847, 848, 849,
	845, 846, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 1378, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 0, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 826, 858, 890, 847, 848, 849, 845, 846,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 939, 864, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 905, 884, 916, 874, 915, 914,
	0, 232, 876, 875, 235, 236, 237, 866, 938, 238,
	974, 975, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 919, 261, 912, 911, 836, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 910, 268, 0, 269, 0,
	270, 271, 0, 272, 842, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 855, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 909, 907, 908, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 865, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 886,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 898,
	889, 900, 902, 903, 904, 899, 0, 891, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 924, 925, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 878, 338, 957, 341, 342, 344, 343, 833, 217,
	958, 856, 943, 913, 346, 347, 0, 887, 349, 888,
	838, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 906,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 843, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 879, 880,
	882, 883, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 901, 881, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 947, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 877, 0, 444, 920, 921, 922, 923, 0, 451,
	0, 445, 446, 970, 447, 971, 854, 448, 449, 450,
	0, 452, 453, 0, 837, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 885, 462, 463, 464, 513, 917,
	964, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 834, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 830, 831,
	890, 847, 848, 849, 845, 846, 859, 860, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	3445, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 838, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 452, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 834, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 890, 847, 848, 849,
	845, 846, 859, 860, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 3302, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 838, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 890, 847, 848, 849, 845, 846, 859, 860,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 3031, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 1580, 0,
	0, 0, 0, 0, 0, 860, 0, 0, 0, 858,
	890, 847, 848, 849, 845, 846, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 452, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 2837, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 834, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 890, 847, 848, 849,
	845, 846, 859, 860, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 1968, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 1967, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 890, 847, 848, 849, 845, 846, 859, 860,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 838, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 890, 847,
	848, 849, 845, 846, 859, 860, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 834,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 1580, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 0, 858, 890, 847, 848, 849,
	845, 846, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 2144, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 890, 847, 848, 849, 845, 846, 859, 860,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 0, 0,
	0, 0, 0, 0, 0, 860, 1518, 0, 2149, 858,
	890, 847, 848, 849, 845, 846, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 452, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 834, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 2147, 858, 890, 847,
	848, 849, 845, 846, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 834,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 2135, 858, 890, 847, 848, 849,
	845, 846, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 0, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 2124, 858, 890, 847, 848, 849, 845, 846,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 939, 864, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 905, 884, 916, 874, 915, 914,
	0, 232, 876, 875, 235, 236, 237, 866, 938, 238,
	974, 975, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 919, 261, 912, 911, 836, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 910, 268, 0, 269, 0,
	270, 271, 0, 272, 842, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 855, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 909, 907, 908, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 865, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 886,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 898,
	889, 900, 902, 903, 904, 899, 0, 891, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 924, 925, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 878, 338, 957, 341, 342, 344, 343, 833, 217,
	958, 856, 943, 913, 346, 347, 0, 887, 349, 888,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 906,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 843, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 879, 880,
	882, 883, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 901, 881, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 947, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 877, 0, 444, 920, 921, 922, 923, 0, 451,
	0, 445, 446, 970, 447, 971, 854, 448, 449, 450,
	0, 452, 453, 0, 837, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 885, 462, 463, 464, 513, 917,
	964, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 834, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 830, 831,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	2122, 858, 2114, 847, 848, 849, 845, 846, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	2117, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 2118, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 2119, 2116, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 2120, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 2115, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 0, 0,
	0, 0, 0, 0, 0, 860, 0, 0, 2111, 858,
	2114, 847, 848, 849, 845, 846, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 2117, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 2118, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 2119, 2116, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	2120, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 452, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 2115,
	471, 834, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 890, 847, 848, 849,
	845, 846, 859, 860, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 452, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 0, 0, 0, 0, 0, 1526, 0, 860,
	0, 0, 0, 858, 890, 847, 848, 849, 845, 846,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 1954, 223, 0, 0,
	0, 0, 0, 939, 864, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 905, 884, 916, 874, 915, 914,
	0, 232, 876, 875, 235, 236, 237, 866, 938, 238,
	974, 975, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 919, 261, 912, 911, 836, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 910, 268, 0, 269, 0,
	270, 271, 0, 272, 842, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 855, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 909, 907, 908, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 865, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 886,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 898,
	889, 900, 902, 903, 904, 899, 0, 891, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 924, 925, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 878, 338, 957, 341, 342, 344, 343, 833, 217,
	958, 856, 943, 913, 346, 347, 0, 887, 349, 888,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 906,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 843, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 879, 880,
	882, 883, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 901, 881, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 947, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 877, 0, 444, 920, 921, 922, 923, 0, 451,
	0, 445, 446, 970, 447, 971, 854, 448, 449, 450,
	0, 452, 453, 0, 837, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 885, 462, 463, 464, 513, 917,
	964, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 834, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 830, 831,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	1206, 858, 890, 847, 848, 849, 845, 846, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 836, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 1205, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 833, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 837, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 834, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 830, 831, 0, 0,
	0, 0, 0, 0, 0, 860, 0, 0, 1200, 858,
	890, 847, 848, 849, 845, 846, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 1199, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 452, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 834, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 1195, 858, 890, 847,
	848, 849, 845, 846, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 939, 864, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 905, 884,
	916, 874, 915, 914, 0, 232, 876, 875, 235, 236,
	237, 866, 938, 238, 974, 975, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 919, 261, 912, 911, 836,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 910,
	268, 0, 269, 0, 270, 271, 0, 272, 842, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	855, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	909, 907, 908, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 865, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 886, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 898, 889, 900, 902, 903, 904, 899,
	0, 891, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 924, 925, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 878, 338, 957, 341, 342,
	344, 343, 833, 217, 958, 856, 943, 913, 346, 347,
	0, 887, 349, 888, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 906, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 843, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 879, 880, 882, 883, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 901, 881,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 947,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 877, 0, 444, 920, 921,
	922, 923, 0, 451, 0, 445, 446, 970, 447, 971,
	854, 448, 449, 450, 0, 452, 453, 0, 837, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 885, 462,
	463, 464, 513, 917, 964, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 834,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 830, 831, 890, 847, 848, 849, 845, 846,
	859, 860, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 939, 864, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 905, 884, 916, 874, 915, 914,
	0, 232, 876, 875, 235, 236, 237, 866, 938, 238,
	974, 975, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 919, 261, 912, 911, 836, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 910, 268, 0, 269, 0,
	270, 271, 0, 272, 842, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 855, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 909, 907, 908, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 865, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 886,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 898,
	889, 900, 902, 903, 904, 899, 0, 891, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 924, 925, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 878, 338, 957, 341, 342, 344, 343, 833, 217,
	958, 856, 943, 913, 346, 347, 0, 887, 349, 888,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 906,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 843, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 879, 880,
	882, 883, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 901, 881, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 947, 429, 430, 431, 969,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 877, 0, 444, 920, 921, 922, 923, 0, 451,
	0, 445, 446, 970, 447, 971, 854, 448, 449, 450,
	0, 452, 453, 0, 837, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 885, 462, 463, 464, 513, 917,
	964, 0, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 834, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 830, 831,
	890, 847, 848, 849, 845, 846, 859, 860, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 939,
	864, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	905, 884, 916, 874, 915, 914, 0, 232, 876, 875,
	235, 236, 237, 866, 938, 238, 974, 975, 479, 0,
	239, 945, 0, 928, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 3474, 931, 929, 930, 935,
	933, 932, 934, 256, 257, 258, 259, 919, 261, 912,
	911, 836, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 910, 268, 0, 269, 0, 270, 271, 0, 272,
	842, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	965, 966, 855, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 909, 907, 908, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 972, 0, 865, 293,
	0, 294, 295, 296, 297, 940, 941, 944, 345, 951,
	298, 299, 0, 300, 301, 886, 0, 0, 216, 302,
	304, 311, 0, 950, 305, 898, 889, 900, 902, 903,
	904, 899, 0, 891, 0, 312, 952, 942, 953, 313,
	314, 315, 954, 924, 925, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 973, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 878, 338, 957,
	341, 342, 344, 343, 833, 217, 958, 856, 943, 913,
	346, 347, 0, 887, 349, 888, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 967,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 968, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 906, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	843, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 879, 880, 882, 883, 410, 414,
	417, 418, 936, 419, 399, 400, 420, 421, 962, 422,
	901, 881, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 947, 429, 430, 431, 969, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 877, 0, 444,
	920, 921, 922, 923, 0, 451, 0, 445, 446, 970,
	447, 971, 854, 448, 449, 450, 0, 3473, 453, 0,
	837, 454, 455, 456, 457, 458, 460, 937, 461, 0,
	885, 462, 463, 464, 513, 917, 964, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 834, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 830, 831, 890, 847, 848, 849,
	845, 846, 859, 860, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 939, 864, 0, 0, 0,
	224, 226, 225, 227, 228, 3472, 905, 884, 916, 874,
	915, 914, 0, 232, 876, 875, 235, 236, 237, 866,
	938, 238, 974, 975, 479, 0, 239, 945, 0, 928,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 3474, 931, 929, 930, 935, 933, 932, 934, 256,
	257, 258, 259, 919, 261, 912, 911, 836, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 910, 268, 0,
	269, 0, 270, 271, 0, 272, 842, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 965, 966, 855, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 909, 907,
	908, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 972, 0, 865, 293, 0, 294, 295, 296,
	297, 940, 941, 944, 345, 951, 298, 299, 0, 300,
	301, 886, 0, 0, 216, 302, 304, 311, 0, 950,
	305, 898, 889, 900, 902, 903, 904, 899, 0, 891,
	0, 312, 952, 942, 953, 313, 314, 315, 954, 924,
	925, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 973, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 878, 338, 957, 341, 342, 344, 343,
	833, 217, 958, 856, 943, 913, 346, 347, 0, 887,
	349, 888, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 967, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 968, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 906, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 843, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	879, 880, 882, 883, 410, 414, 417, 418, 936, 419,
	399, 400, 420, 421, 962, 422, 901, 881, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 947, 429, 430,
	431, 969, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 877, 0, 444, 920, 921, 922, 923,
	0, 451, 0, 445, 446, 970, 447, 971, 854, 448,
	449, 450, 0, 3473, 453, 0, 837, 454, 455, 456,
	457, 458, 460, 937, 461, 0, 885, 462, 463, 464,
	513, 917, 964, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 834, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	830, 831, 890, 847, 848, 849, 845, 846, 859, 860,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 864, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 905, 884, 916, 874, 915, 914, 0, 232,
	876, 875, 235, 236, 237, 866, 938, 238, 974, 975,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 919,
	261, 912, 911, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 910, 268, 0, 269, 0, 270, 271,
	0, 272, 842, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 855, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 909, 907, 908, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	865, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 886, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 898, 889, 900,
	902, 903, 904, 899, 0, 891, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 924, 925, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 878,
	338, 957, 341, 342, 344, 343, 0, 217, 958, 856,
	943, 913, 346, 347, 0, 887, 349, 888, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 906, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 843, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 879, 880, 882, 883,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 901, 881, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 947, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 877,
	0, 444, 920, 921, 922, 923, 0, 451, 0, 445,
	446, 970, 447, 971, 854, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 885, 462, 463, 464, 513, 917, 964, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 890, 847, 848, 849, 845, 846, 859,
	0, 2132, 0, 0, 0, 0, 2130, 2131, 0, 0,
	218, 219, 220, 221, 222, 860, 223, 0, 0, 858,
	0, 0, 939, 864, 0, 0, 0, 224, 226, 225,
	227, 228, 0, 905, 884, 916, 874, 915, 914, 0,
	232, 876, 875, 235, 236, 237, 866, 938, 238, 974,
	975, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 3474, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	919, 261, 912, 911, 836, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 910, 268, 0, 269, 0, 270,
	271, 0, 272, 842, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 855, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 909, 907, 908, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 865, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 0, 298, 299, 0, 300, 301, 886, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 898, 889,
	900, 902, 903, 904, 899, 0, 891, 0, 312, 0,
	942, 0, 313, 314, 315, 954, 924, 925, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	878, 338, 957, 341, 342, 344, 343, 833, 217, 0,
	856, 943, 913, 346, 347, 0, 887, 349, 888, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 906, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 843, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 879, 880, 882,
	883, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 0, 422, 901, 881, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 947, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	877, 0, 444, 920, 921, 922, 923, 0, 451, 0,
	445, 446, 970, 447, 971, 854, 448, 449, 450, 0,
	3473, 453, 0, 837, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 885, 462, 463, 464, 513, 917, 964,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 823, 0, 1011, 0, 0, 830, 831, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 0,
	858, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 939, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 938, 238,
	477, 478, 479, 0, 239, 945, 0, 928, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 948, 254, 255,
	931, 929, 930, 935, 933, 932, 934, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 965, 966, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 949, 290, 291, 0, 292,
	972, 0, 488, 293, 0, 294, 295, 296, 297, 940,
	941, 944, 345, 951, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 950, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	952, 942, 953, 313, 314, 315, 954, 316, 317, 0,
	0, 318, 319, 320, 321, 998, 323, 322, 0, 324,
	973, 955, 325, 326, 956, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 957, 341, 342, 344, 343, 0, 217,
	958, 0, 943, 498, 346, 347, 0, 348, 349, 350,
	0, 1003, 352, 353, 354, 0, 0, 355, 356, 499,
	959, 357, 960, 967, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 968, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 961,
	393, 394, 395, 396, 504, 1005, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 181, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 936, 419, 399, 400,
	420, 421, 962, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 969,
	0, 436, 437, 435, 183, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 970, 447, 971, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 937, 461, 0, 459, 462, 463, 464, 1316, 514,
	515, 0, 466, 465, 516, 1011, 0, 0, 175, 467,
	468, 517, 469, 470, 471, 0, 176, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 939, 995, 0, 1612, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 938,
	238, 477, 478, 479, 0, 239, 945, 0, 928, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 931, 929, 930, 935, 933, 932, 934, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 965, 966, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 972, 0, 488, 293, 0, 294, 295, 296, 297,
	940, 941, 944, 345, 951, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 952, 942, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 998, 323, 322, 0,
	324, 973, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 0,
	217, 958, 0, 943, 498, 346, 347, 0, 348, 349,
	350, 0, 1003, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 967, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 968, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 504, 1005, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 181, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 936, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	969, 0, 436, 437, 435, 183, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 970, 447, 971, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 937, 461, 0, 459, 462, 463, 464, 1316,
	514, 515, 0, 466, 465, 516, 2587, 0, 1011, 175,
	467, 468, 517, 469, 470, 471, 0, 176, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 995, 939, 1612, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 938, 238, 477, 478, 479, 0, 239, 945,
	0, 928, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 931, 929, 930, 935, 933, 932,
	934, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 965, 966,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 972, 0, 488, 293, 0, 294,
	295, 296, 297, 940, 941, 944, 345, 951, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 952, 942, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 998,
	323, 322, 0, 324, 973, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 0, 217, 958, 0, 943, 498, 346, 347,
	0, 348, 349, 350, 0, 1003, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 967, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	968, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 504, 1005,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	936, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 969, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 970, 447, 971,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 937, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 994,
	0, 1011, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 995,
	939, 1000, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 938, 238, 477, 478, 479,
	0, 239, 945, 0, 928, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 948, 254, 255, 931, 929, 930,
	935, 933, 932, 934, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 965, 966, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 949, 290, 291, 0, 292, 972, 0, 488,
	293, 0, 294, 295, 296, 297, 940, 941, 944, 345,
	951, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 950, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 952, 942, 953,
	313, 314, 315, 954, 316, 317, 0, 0, 318, 319,
	320, 321, 998, 323, 322, 0, 324, 973, 955, 325,
	326, 956, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	957, 341, 342, 344, 343, 0, 217, 958, 0, 943,
	498, 346, 347, 0, 348, 349, 350, 0, 1003, 352,
	353, 354, 0, 0, 355, 356, 499, 959, 357, 960,
	967, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 968, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 961, 393, 394, 395,
	396, 504, 1005, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 936, 419, 399, 400, 420, 421, 962,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 969, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	970, 447, 971, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 937, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 1011, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 939, 995, 0, 1000, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 938, 238, 477, 478,
	479, 0, 239, 945, 0, 928, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 931, 929,
	930, 935, 933, 932, 934, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 965, 966, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 972, 0,
	488, 293, 0, 294, 295, 296, 297, 940, 941, 944,
	345, 951, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 952, 942,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 998, 323, 322, 0, 324, 973, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 0, 217, 958, 0,
	943, 498, 346, 347, 0, 348, 349, 350, 0, 1003,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 967, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 968, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 504, 1005, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 936, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 969, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 970, 447, 971, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 937,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 1011, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 939, 995, 0, 1000, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 938, 238, 477,
	478, 479, 0, 239, 945, 0, 928, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 931,
	929, 930, 935, 933, 932, 934, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 965, 966, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 972,
	0, 488, 293, 0, 294, 295, 296, 297, 940, 941,
	944, 345, 951, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 952,
	942, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 973,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 0, 217, 958,
	0, 943, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 967, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 968, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 504, 1005, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 936, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 969, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 970, 447, 971, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	937, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 823, 0, 1170, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 1507, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 1074,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 0, 958, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 181, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 183, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	1316, 514, 515, 0, 466, 465, 516, 1313, 0, 1170,
	175, 467, 468, 517, 469, 470, 471, 0, 176, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 150,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 1074, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 951, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 0, 0, 958, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	181, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 183,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 1316, 514, 515, 0, 466, 465, 516,
	0, 0, 0, 175, 467, 468, 517, 469, 470, 471,
	0, 176, 0, 0, 0, 0, 1170, 1169, 0, 0,
	0, 0, 1167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 1074,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 0, 958, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 1170, 1169, 0,
	0, 0, 0, 1167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 1791,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	1074, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 0, 0, 958, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 1170, 1169,
	0, 0, 0, 0, 1167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	2782, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 1074, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 0, 0, 958, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1011,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 939, 0,
	0, 1320, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 938, 238, 477, 478, 479, 0, 239,
	945, 0, 928, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 931, 929, 930, 935, 933,
	932, 934, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 965,
	966, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 972, 0, 488, 293, 0,
	294, 295, 296, 297, 940, 941, 944, 345, 951, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 952, 942, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 973, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 0, 217, 958, 0, 943, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 967, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 968, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 936, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 969, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 970, 447,
	971, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 937, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	823, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 181, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 183, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 1316, 514, 515, 0,
	466, 465, 516, 212, 0, 0, 175, 467, 468, 517,
	469, 470, 471, 0, 176, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 150, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 212, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 1617, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 212, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 2735, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 212, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 2367, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 212, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 2861,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 693, 0,
	584, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	1881, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 590, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 217, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	589, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 0, 583, 0, 584, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 593, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 590,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 589, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 584, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	593, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	590, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 1911, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 589, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 584, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 593, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 590, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 589, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 212, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 593, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 1345, 0,
	1170, 1169, 0, 0, 0, 0, 1167, 0, 0, 0,
	0, 0, 0, 593, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 1074, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 948, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 1344,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 949, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 951,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 950, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 952, 495, 953, 313,
	314, 315, 954, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 955, 325, 326,
	956, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 957,
	341, 342, 344, 343, 0, 0, 958, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 959, 357, 960, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 1343, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 961, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 1342, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 962, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 1311, 0, 1170, 1169, 0, 0, 0, 0, 1167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 1074, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 948, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 949, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 1310, 490,
	491, 345, 951, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 950, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 952,
	495, 953, 313, 314, 315, 954, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	955, 325, 326, 956, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 957, 341, 342, 344, 343, 0, 0, 958,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 959,
	357, 960, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 961, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 962, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 1307, 0, 1170, 1169, 0, 0,
	0, 0, 1167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 1074,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 1306, 490, 491, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 0, 958, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 1245, 0, 1170,
	1169, 0, 0, 0, 0, 1167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 1074, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 948, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	949, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 1244, 490, 491, 345, 951, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 950, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 952, 495, 953, 313, 314,
	315, 954, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 955, 325, 326, 956,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 957, 341,
	342, 344, 343, 0, 0, 958, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 959, 357, 960, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 961, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 962, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	1242, 0, 1170, 1169, 0, 0, 0, 0, 1167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 1074, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 948, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 949, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 1241, 490, 491,
	345, 951, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 950, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 952, 495,
	953, 313, 314, 315, 954, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 955,
	325, 326, 956, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 957, 341, 342, 344, 343, 0, 0, 958, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 959, 357,
	960, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 961, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	962, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 1163, 0, 1170, 1169, 0, 0, 0,
	0, 1167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 1074, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	1165, 490, 491, 345, 951, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 0,
	0, 958, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 1170, 1169, 0, 0,
	0, 0, 1167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 1074,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 948,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 949, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 951, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 950,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 952, 495, 953, 313, 314, 315, 954, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 955, 325, 326, 956, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 957, 341, 342, 344, 343,
	0, 0, 958, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 959, 357, 960, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 961, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 962, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 1170, 1169, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	1074, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	948, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 1705, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 949, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 951, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	950, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 952, 495, 953, 313, 314, 315, 954,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 955, 325, 326, 956, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 957, 341, 342, 344,
	343, 0, 0, 958, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 959, 357, 960, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 961, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 962, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 1170, 1169,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 1074, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 948, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 949,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 951, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 950, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 952, 495, 953, 313, 314, 315,
	954, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 955, 325, 326, 956, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 957, 341, 342,
	344, 343, 0, 0, 958, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 959, 357, 960, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 961, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 962, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 1170, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 1074, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 948, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 949, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 951, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 950, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 952, 495, 953, 313, 314, 315, 954, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 955, 325, 326, 956, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 957, 341, 342, 344, 343, 0,
	0, 958, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 959, 357, 960, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	961, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 962, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 2255, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 2252, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 2402, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 2258, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	2399, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 2401, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 2398, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 2257, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 2400, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 2255, 239,
	480, 0, 0, 2249, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 2252, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 2258, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 2248, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 2257, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 2256,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1398, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 1401, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 1399, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	1400, 465, 516, 1158, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	1160, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 1003, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 1155, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 1157, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 1003, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1062,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 1064, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 1003, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 546, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 545, 222, 535, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 538, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 539, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 540, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 534, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 535,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 538,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 539, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 540, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 212, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 215, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 216, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 217,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 1003, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 2331, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 1890, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 217, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 212, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	215, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 216, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 217, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 1824, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 1817, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 215, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 1816, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 216, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 217, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 1812, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 215, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 1814, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 216, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 217, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1300, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 1299, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 1297, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 1296, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 217, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	1294, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 1293, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 1290, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 215, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	1289, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 216, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	217, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 1265, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1180,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 215, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 1182, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 216,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 217, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 212, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 215, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 216, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 217, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 538, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 539,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 540, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 1918, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 215, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	216, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 217, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 1916, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 215, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 216, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 217, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 1914, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 215,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 216, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 217, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 685, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 684, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 683,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 2402,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 3190, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 525, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 524, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 523, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 2190, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 212, 2389, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 489, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 212, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 2984, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 212, 2389, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 2386, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 1897, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 1888, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 566, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 1040, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 1038, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 567, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 563, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 1041, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 562, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 1836,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 1835, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 0, 466,
	465, 516, 566, 0, 212, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 556, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 489,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 567, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	563, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 1319, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 562, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 0, 466, 465, 516, 1304, 0, 212, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 1303, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 0, 466, 465, 516, 1253, 0,
	212, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 0, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 1252, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 419, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 0, 466, 465,
	516, 1237, 0, 212, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 402, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	0, 466, 465, 516, 1174, 0, 212, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 566, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 1040, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 1038, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 567, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 563, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 1041,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 562,
	508, 509, 510, 0, 451, 0, 445, 1039, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 1022, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 489, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 0, 466, 465, 516, 566, 0, 212,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 556,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 554, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 489, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 555, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 567, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 557,
	397, 0, 398, 402, 403, 563, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 558,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 562,
	508, 509, 510, 0, 451, 0, 445, 560, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 0, 466, 465, 516,
	550, 0, 212, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 489, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 551, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 0,
	466, 465, 516, 548, 0, 212, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	489, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 0, 466, 465, 516, 542, 0, 212, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 520,
	0, 212, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 212, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 293, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 361, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	374, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 397,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 212, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 0,
	0, 0, 218, 219, 220, 221, 222, 0, 223, 0,
	0, 0, 0, 0, 472, 0, 0, 0, 0, 224,
	226, 225, 227, 228, 473, 474, 229, 475, 230, 231,
	476, 0, 232, 233, 234, 235, 236, 237, 0, 0,
	238, 477, 478, 479, 0, 239, 480, 0, 0, 0,
	240, 241, 242, 243, 244, 245, 0, 247, 248, 249,
	246, 0, 250, 0, 251, 252, 253, 0, 0, 254,
	255, 0, 0, 0, 0, 0, 0, 0, 256, 257,
	258, 259, 260, 261, 481, 482, 0, 262, 0, 264,
	263, 0, 265, 0, 0, 266, 267, 268, 0, 269,
	0, 270, 271, 0, 272, 483, 273, 274, 276, 278,
	275, 279, 280, 281, 282, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 285, 486, 286, 287,
	0, 288, 0, 289, 0, 0, 0, 290, 291, 0,
	292, 487, 0, 488, 293, 0, 294, 295, 296, 297,
	2675, 490, 491, 345, 0, 298, 299, 0, 300, 301,
	303, 0, 0, 0, 302, 304, 311, 0, 0, 305,
	492, 307, 306, 308, 309, 310, 493, 0, 494, 0,
	312, 0, 495, 0, 313, 314, 315, 0, 316, 317,
	0, 0, 318, 319, 320, 321, 0, 323, 322, 0,
	324, 496, 0, 325, 326, 0, 0, 327, 328, 0,
	0, 329, 330, 0, 331, 332, 334, 336, 333, 335,
	337, 339, 340, 338, 0, 341, 342, 344, 343, 0,
	0, 0, 0, 497, 498, 346, 347, 0, 348, 349,
	350, 0, 0, 352, 353, 354, 0, 0, 355, 356,
	499, 0, 357, 0, 500, 358, 351, 359, 360, 361,
	362, 363, 364, 365, 0, 366, 367, 501, 368, 502,
	369, 0, 370, 0, 371, 372, 373, 374, 375, 376,
	503, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 387, 384, 388, 389, 390, 391, 0, 392,
	0, 393, 394, 395, 396, 504, 397, 0, 398, 402,
	403, 404, 405, 406, 407, 408, 0, 415, 416, 409,
	411, 412, 413, 410, 414, 417, 418, 0, 419, 399,
	400, 420, 421, 0, 422, 505, 423, 424, 0, 434,
	425, 426, 427, 401, 428, 432, 433, 429, 430, 431,
	506, 0, 436, 437, 435, 0, 438, 439, 440, 441,
	442, 277, 443, 0, 444, 507, 508, 509, 510, 0,
	451, 0, 445, 446, 511, 447, 512, 0, 448, 449,
	450, 0, 452, 453, 0, 0, 454, 455, 456, 457,
	458, 460, 0, 461, 0, 459, 462, 463, 464, 513,
	514, 515, 212, 466, 465, 516, 0, 0, 0, 0,
	467, 468, 517, 469, 470, 471, 0, 0, 0, 218,
	219, 220, 221, 222, 0, 223, 0, 0, 0, 0,
	0, 472, 0, 0, 0, 0, 224, 226, 225, 227,
	228, 473, 474, 229, 475, 230, 231, 476, 0, 232,
	233, 234, 235, 236, 237, 0, 0, 238, 477, 478,
	479, 0, 239, 480, 0, 0, 0, 240, 241, 242,
	243, 244, 245, 0, 247, 248, 249, 246, 0, 250,
	0, 251, 252, 253, 0, 0, 254, 255, 0, 0,
	0, 0, 0, 0, 0, 256, 257, 258, 259, 260,
	261, 481, 482, 0, 262, 0, 264, 263, 0, 265,
	0, 0, 266, 267, 268, 0, 269, 0, 270, 271,
	0, 272, 483, 273, 274, 276, 278, 275, 279, 280,
	281, 282, 484, 485, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 285, 486, 286, 287, 0, 288, 0,
	289, 0, 0, 0, 290, 291, 0, 292, 487, 0,
	488, 293, 0, 294, 295, 296, 297, 2673, 490, 491,
	345, 0, 298, 299, 0, 300, 301, 303, 0, 0,
	0, 302, 304, 311, 0, 0, 305, 492, 307, 306,
	308, 309, 310, 493, 0, 494, 0, 312, 0, 495,
	0, 313, 314, 315, 0, 316, 317, 0, 0, 318,
	319, 320, 321, 0, 323, 322, 0, 324, 496, 0,
	325, 326, 0, 0, 327, 328, 0, 0, 329, 330,
	0, 331, 332, 334, 336, 333, 335, 337, 339, 340,
	338, 0, 341, 342, 344, 343, 0, 0, 0, 0,
	497, 498, 346, 347, 0, 348, 349, 350, 0, 0,
	352, 353, 354, 0, 0, 355, 356, 499, 0, 357,
	0, 500, 358, 351, 359, 360, 361, 362, 363, 364,
	365, 0, 366, 367, 501, 368, 502, 369, 0, 370,
	0, 371, 372, 373, 374, 375, 376, 503, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 387,
	384, 388, 389, 390, 391, 0, 392, 0, 393, 394,
	395, 396, 504, 397, 0, 398, 402, 403, 404, 405,
	406, 407, 408, 0, 415, 416, 409, 411, 412, 413,
	410, 414, 417, 418, 0, 419, 399, 400, 420, 421,
	0, 422, 505, 423, 424, 0, 434, 425, 426, 427,
	401, 428, 432, 433, 429, 430, 431, 506, 0, 436,
	437, 435, 0, 438, 439, 440, 441, 442, 277, 443,
	0, 444, 507, 508, 509, 510, 0, 451, 0, 445,
	446, 511, 447, 512, 0, 448, 449, 450, 0, 452,
	453, 0, 0, 454, 455, 456, 457, 458, 460, 0,
	461, 0, 459, 462, 463, 464, 513, 514, 515, 212,
	466, 465, 516, 0, 0, 0, 0, 467, 468, 517,
	469, 470, 471, 0, 0, 0, 218, 219, 220, 221,
	222, 0, 223, 0, 0, 0, 0, 0, 472, 0,
	0, 0, 0, 224, 226, 225, 227, 228, 473, 474,
	229, 475, 230, 231, 476, 0, 232, 233, 234, 235,
	236, 237, 0, 0, 238, 477, 478, 479, 0, 239,
	480, 0, 0, 0, 240, 241, 242, 243, 244, 245,
	0, 247, 248, 249, 246, 0, 250, 0, 251, 252,
	253, 0, 0, 254, 255, 0, 0, 0, 0, 0,
	0, 0, 256, 257, 258, 259, 260, 261, 481, 482,
	0, 262, 0, 264, 263, 0, 265, 0, 0, 266,
	267, 268, 0, 269, 0, 270, 271, 0, 272, 483,
	273, 274, 276, 278, 275, 279, 280, 281, 282, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	285, 486, 286, 287, 0, 288, 0, 289, 0, 0,
	0, 290, 291, 0, 292, 487, 0, 488, 293, 0,
	294, 295, 296, 297, 2661, 490, 491, 345, 0, 298,
	299, 0, 300, 301, 303, 0, 0, 0, 302, 304,
	311, 0, 0, 305, 492, 307, 306, 308, 309, 310,
	493, 0, 494, 0, 312, 0, 495, 0, 313, 314,
	315, 0, 316, 317, 0, 0, 318, 319, 320, 321,
	0, 323, 322, 0, 324, 496, 0, 325, 326, 0,
	0, 327, 328, 0, 0, 329, 330, 0, 331, 332,
	334, 336, 333, 335, 337, 339, 340, 338, 0, 341,
	342, 344, 343, 0, 0, 0, 0, 497, 498, 346,
	347, 0, 348, 349, 350, 0, 0, 352, 353, 354,
	0, 0, 355, 356, 499, 0, 357, 0, 500, 358,
	351, 359, 360, 361, 362, 363, 364, 365, 0, 366,
	367, 501, 368, 502, 369, 0, 370, 0, 371, 372,
	373, 374, 375, 376, 503, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 387, 384, 388, 389,
	390, 391, 0, 392, 0, 393, 394, 395, 396, 504,
	397, 0, 398, 402, 403, 404, 405, 406, 407, 408,
	0, 415, 416, 409, 411, 412, 413, 410, 414, 417,
	418, 0, 419, 399, 400, 420, 421, 0, 422, 505,
	423, 424, 0, 434, 425, 426, 427, 401, 428, 432,
	433, 429, 430, 431, 506, 0, 436, 437, 435, 0,
	438, 439, 440, 441, 442, 277, 443, 0, 444, 507,
	508, 509, 510, 0, 451, 0, 445, 446, 511, 447,
	512, 0, 448, 449, 450, 0, 452, 453, 0, 0,
	454, 455, 456, 457, 458, 460, 0, 461, 0, 459,
	462, 463, 464, 513, 514, 515, 212, 466, 465, 516,
	0, 0, 0, 0, 467, 468, 517, 469, 470, 471,
	0, 0, 0, 218, 219, 220, 221, 222, 0, 223,
	0, 0, 0, 0, 0, 472, 0, 0, 0, 0,
	224, 226, 225, 227, 228, 473, 474, 229, 475, 230,
	231, 476, 0, 232, 233, 234, 235, 236, 237, 0,
	0, 238, 477, 478, 479, 0, 239, 480, 0, 0,
	0, 240, 241, 242, 243, 244, 245, 0, 247, 248,
	249, 246, 0, 250, 0, 251, 252, 253, 0, 0,
	254, 255, 0, 0, 0, 0, 0, 0, 0, 256,
	257, 258, 259, 260, 261, 481, 482, 0, 262, 0,
	264, 263, 0, 265, 0, 0, 266, 267, 268, 0,
	269, 0, 270, 271, 0, 272, 483, 273, 274, 276,
	278, 275, 279, 280, 281, 282, 484, 485, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 285, 486, 286,
	287, 0, 288, 0, 289, 0, 0, 0, 290, 291,
	0, 292, 487, 0, 488, 293, 0, 294, 295, 296,
	297, 2349, 490, 491, 345, 0, 298, 299, 0, 300,
	301, 303, 0, 0, 0, 302, 304, 311, 0, 0,
	305, 492, 307, 306, 308, 309, 310, 493, 0, 494,
	0, 312, 0, 495, 0, 313, 314, 315, 0, 316,
	317, 0, 0, 318, 319, 320, 321, 0, 323, 322,
	0, 324, 496, 0, 325, 326, 0, 0, 327, 328,
	0, 0, 329, 330, 0, 331, 332, 334, 336, 333,
	335, 337, 339, 340, 338, 0, 341, 342, 344, 343,
	0, 0, 0, 0, 497, 498, 346, 347, 0, 348,
	349, 350, 0, 0, 352, 353, 354, 0, 0, 355,
	356, 499, 0, 357, 0, 500, 358, 351, 359, 360,
	361, 362, 363, 364, 365, 0, 366, 367, 501, 368,
	502, 369, 0, 370, 0, 371, 372, 373, 374, 375,
	376, 503, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 387, 384, 388, 389, 390, 391, 0,
	392, 0, 393, 394, 395, 396, 504, 397, 0, 398,
	402, 403, 404, 405, 406, 407, 408, 0, 415, 416,
	409, 411, 412, 413, 410, 414, 417, 418, 0, 419,
	399, 400, 420, 421, 0, 422, 505, 423, 424, 0,
	434, 425, 426, 427, 401, 428, 432, 433, 429, 430,
	431, 506, 0, 436, 437, 435, 0, 438, 439, 440,
	441, 442, 277, 443, 0, 444, 507, 508, 509, 510,
	0, 451, 0, 445, 446, 511, 447, 512, 0, 448,
	449, 450, 0, 452, 453, 0, 0, 454, 455, 456,
	457, 458, 460, 0, 461, 0, 459, 462, 463, 464,
	513, 514, 515, 212, 466, 465, 516, 0, 0, 0,
	0, 467, 468, 517, 469, 470, 471, 0, 0, 0,
	218, 219, 220, 221, 222, 0, 223, 0, 0, 0,
	0, 0, 472, 0, 0, 0, 0, 224, 226, 225,
	227, 228, 473, 474, 229, 475, 230, 231, 476, 0,
	232, 233, 234, 235, 236, 237, 0, 0, 238, 477,
	478, 479, 0, 239, 480, 0, 0, 0, 240, 241,
	242, 243, 244, 245, 0, 247, 248, 249, 246, 0,
	250, 0, 251, 252, 253, 0, 0, 254, 255, 0,
	0, 0, 0, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 481, 482, 0, 262, 0, 264, 263, 0,
	265, 0, 0, 266, 267, 268, 0, 269, 0, 270,
	271, 0, 272, 483, 273, 274, 276, 278, 275, 279,
	280, 281, 282, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 285, 486, 286, 287, 0, 288,
	0, 289, 0, 0, 0, 290, 291, 0, 292, 487,
	0, 488, 293, 0, 294, 295, 296, 297, 489, 490,
	491, 345, 0, 298, 299, 0, 300, 301, 303, 0,
	0, 0, 302, 304, 311, 0, 0, 305, 492, 307,
	306, 308, 309, 310, 493, 0, 494, 0, 312, 0,
	495, 0, 313, 314, 315, 0, 316, 317, 0, 0,
	318, 319, 320, 321, 0, 323, 322, 0, 324, 496,
	0, 325, 326, 0, 0, 327, 328, 0, 0, 329,
	330, 0, 331, 332, 334, 336, 333, 335, 337, 339,
	340, 338, 0, 341, 342, 344, 343, 0, 0, 0,
	0, 497, 498, 346, 347, 0, 348, 349, 350, 0,
	0, 352, 353, 354, 0, 0, 355, 356, 499, 0,
	357, 0, 500, 358, 351, 359, 360, 361, 362, 363,
	364, 365, 0, 366, 367, 501, 368, 502, 369, 0,
	370, 0, 371, 372, 373, 374, 375, 376, 503, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	387, 384, 388, 389, 390, 391, 0, 392, 0, 393,
	394, 395, 396, 504, 397, 0, 398, 551, 403, 404,
	405, 406, 407, 408, 0, 415, 416, 409, 411, 412,
	413, 410, 414, 417, 418, 0, 419, 399, 400, 420,
	421, 0, 422, 505, 423, 424, 0, 434, 425, 426,
	427, 401, 428, 432, 433, 429, 430, 431, 506, 0,
	436, 437, 435, 0, 438, 439, 440, 441, 442, 277,
	443, 0, 444, 507, 508, 509, 510, 0, 451, 0,
	445, 446, 511, 447, 512, 0, 448, 449, 450, 0,
	452, 453, 0, 0, 454, 455, 456, 457, 458, 460,
	0, 461, 0, 459, 462, 463, 464, 513, 514, 515,
	212, 466, 465, 516, 0, 0, 0, 0, 467, 468,
	517, 469, 470, 471, 0, 0, 0, 218, 219, 220,
	221, 222, 0, 223, 0, 0, 0, 0, 0, 472,
	0, 1848, 0, 0, 224, 226, 225, 227, 228, 473,
	474, 229, 475, 230, 231, 476, 0, 232, 233, 234,
	235, 236, 237, 0, 0, 238, 477, 478, 479, 0,
	239, 480, 0, 0, 0, 240, 241, 242, 243, 244,
	245, 0, 247, 248, 249, 246, 0, 250, 0, 251,
	252, 253, 0, 0, 254, 255, 0, 0, 0, 0,
	0, 0, 0, 256, 257, 258, 259, 260, 261, 481,
	482, 0, 262, 0, 264, 263, 0, 265, 0, 0,
	266, 267, 268, 0, 269, 0, 270, 271, 0, 272,
	483, 273, 274, 276, 278, 275, 279, 280, 281, 282,
	484, 485, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 285, 486, 286, 287, 0, 288, 0, 289, 0,
	0, 0, 290, 291, 0, 292, 487, 0, 488, 293,
	0, 294, 295, 296, 297, 489, 490, 491, 345, 0,
	298, 299, 0, 300, 301, 303, 0, 0, 0, 302,
	304, 311, 0, 0, 305, 492, 307, 306, 308, 309,
	310, 493, 0, 494, 0, 312, 0, 495, 0, 313,
	314, 315, 0, 316, 317, 0, 0, 318, 319, 320,
	321, 0, 323, 322, 0, 324, 496, 0, 325, 326,
	0, 0, 327, 328, 0, 0, 329, 330, 0, 331,
	332, 334, 336, 333, 335, 337, 339, 340, 338, 0,
	341, 342, 344, 343, 0, 0, 0, 0, 497, 498,
	346, 347, 0, 348, 349, 350, 0, 0, 352, 353,
	354, 0, 0, 355, 356, 499, 0, 357, 0, 500,
	358, 351, 359, 360, 361, 362, 363, 364, 365, 0,
	366, 367, 501, 368, 502, 369, 0, 370, 0, 371,
	372, 373, 374, 375, 376, 503, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 387, 384, 388,
	389, 390, 391, 0, 392, 0, 393, 394, 395, 396,
	504, 397, 0, 398, 402, 403, 404, 405, 406, 407,
	408, 0, 415, 416, 409, 411, 412, 413, 410, 414,
	417, 418, 0, 0, 399, 400, 420, 421, 0, 422,
	505, 423, 424, 0, 434, 425, 426, 427, 401, 428,
	432, 433, 429, 430, 431, 506, 0, 436, 437, 435,
	0, 438, 439, 440, 441, 442, 277, 443, 0, 444,
	507, 508, 509, 510, 0, 451, 0, 445, 446, 511,
	447, 512, 0, 448, 449, 450, 0, 452, 453, 0,
	0, 454, 455, 456, 457, 458, 460, 0, 461, 0,
	459, 462, 463, 464, 513, 514, 515, 212, 466, 465,
	516, 0, 0, 0, 0, 467, 468, 517, 469, 470,
	471, 0, 0, 0, 218, 219, 220, 221, 222, 0,
	223, 0, 0, 0, 0, 0, 472, 0, 0, 0,
	0, 224, 226, 225, 227, 228, 473, 474, 229, 475,
	230, 231, 476, 0, 232, 233, 234, 235, 236, 237,
	0, 0, 238, 477, 478, 479, 0, 239, 480, 0,
	0, 0, 240, 241, 242, 243, 244, 245, 0, 247,
	248, 249, 246, 0, 250, 0, 251, 252, 253, 0,
	0, 254, 255, 0, 0, 0, 0, 0, 0, 0,
	256, 257, 258, 259, 260, 261, 481, 482, 0, 262,
	0, 264, 263, 0, 265, 0, 0, 266, 267, 268,
	0, 269, 0, 270, 271, 0, 272, 483, 273, 274,
	276, 278, 275, 279, 280, 281, 282, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 285, 486,
	286, 287, 0, 288, 0, 289, 0, 0, 0, 290,
	291, 0, 292, 487, 0, 488, 293, 0, 294, 295,
	296, 297, 1273, 490, 491, 345, 0, 298, 299, 0,
	300, 301, 303, 0, 0, 0, 302, 304, 311, 0,
	0, 305, 492, 307, 306, 308, 309, 310, 493, 0,
	494, 0, 312, 0, 495, 0, 313, 314, 315, 0,
	316, 317, 0, 0, 318, 319, 320, 321, 0, 323,
	322, 0, 324, 496, 0, 325, 326, 0, 0, 327,
	328, 0, 0, 329, 330, 0, 331, 332, 334, 336,
	333, 335, 337, 339, 340, 338, 0, 341, 342, 344,
	343, 0, 0, 0, 0, 497, 498, 346, 347, 0,
	348, 349, 350, 0, 0, 352, 353, 354, 0, 0,
	355, 356, 499, 0, 357, 0, 500, 358, 351, 359,
	360, 361, 362, 363, 364, 365, 0, 366, 367, 501,
	368, 502, 369, 0, 370, 0, 371, 372, 373, 374,
	375, 376, 503, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 387, 384, 388, 389, 390, 391,
	0, 392, 0, 393, 394, 395, 396, 504, 397, 0,
	398, 402, 403, 404, 405, 406, 407, 408, 0, 415,
	416, 409, 411, 412, 413, 410, 414, 417, 418, 0,
	419, 399, 400, 420, 421, 0, 422, 505, 423, 424,
	0, 434, 425, 426, 427, 401, 428, 432, 433, 429,
	430, 431, 506, 0, 436, 437, 435, 0, 438, 439,
	440, 441, 442, 277, 443, 0, 444, 507, 508, 509,
	510, 0, 451, 0, 445, 446, 511, 447, 512, 0,
	448, 449, 450, 0, 452, 453, 0, 0, 454, 455,
	456, 457, 458, 460, 0, 461, 0, 459, 462, 463,
	464, 513, 514, 515, 212, 466, 465, 516, 0, 0,
	0, 0, 467, 468, 517, 469, 470, 471, 0, 0,
	0, 218, 219, 220, 221, 222, 0, 223, 0, 0,
	0, 0, 0, 472, 0, 0, 0, 0, 224, 226,
	225, 227, 228, 473, 474, 229, 475, 230, 231, 476,
	0, 232, 233, 234, 235, 236, 237, 0, 0, 238,
	477, 478, 479, 0, 239, 480, 0, 0, 0, 240,
	241, 242, 243, 244, 245, 0, 247, 248, 249, 246,
	0, 250, 0, 251, 252, 253, 0, 0, 254, 255,
	0, 0, 0, 0, 0, 0, 0, 256, 257, 258,
	259, 260, 261, 481, 482, 0, 262, 0, 264, 263,
	0, 265, 0, 0, 266, 267, 268, 0, 269, 0,
	270, 271, 0, 272, 483, 273, 274, 276, 278, 275,
	279, 280, 281, 282, 484, 485, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 285, 486, 286, 287, 0,
	288, 0, 289, 0, 0, 0, 290, 291, 0, 292,
	487, 0, 488, 293, 0, 294, 295, 296, 297, 1215,
	490, 491, 345, 0, 298, 299, 0, 300, 301, 303,
	0, 0, 0, 302, 304, 311, 0, 0, 305, 492,
	307, 306, 308, 309, 310, 493, 0, 494, 0, 312,
	0, 495, 0, 313, 314, 315, 0, 316, 317, 0,
	0, 318, 319, 320, 321, 0, 323, 322, 0, 324,
	496, 0, 325, 326, 0, 0, 327, 328, 0, 0,
	329, 330, 0, 331, 332, 334, 336, 333, 335, 337,
	339, 340, 338, 0, 341, 342, 344, 343, 0, 0,
	0, 0, 497, 498, 346, 347, 0, 348, 349, 350,
	0, 0, 352, 353, 354, 0, 0, 355, 356, 499,
	0, 357, 0, 500, 358, 351, 359, 360, 361, 362,
	363, 364, 365, 0, 366, 367, 501, 368, 502, 369,
	0, 370, 0, 371, 372, 373, 374, 375, 376, 503,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 387, 384, 388, 389, 390, 391, 0, 392, 0,
	393, 394, 395, 396, 504, 397, 0, 398, 402, 403,
	404, 405, 406, 407, 408, 0, 415, 416, 409, 411,
	412, 413, 410, 414, 417, 418, 0, 419, 399, 400,
	420, 421, 0, 422, 505, 423, 424, 0, 434, 425,
	426, 427, 401, 428, 432, 433, 429, 430, 431, 506,
	0, 436, 437, 435, 0, 438, 439, 440, 441, 442,
	277, 443, 0, 444, 507, 508, 509, 510, 0, 451,
	0, 445, 446, 511, 447, 512, 0, 448, 449, 450,
	0, 452, 453, 0, 0, 454, 455, 456, 457, 458,
	460, 0, 461, 0, 459, 462, 463, 464, 513, 514,
	515, 212, 466, 465, 516, 0, 0, 0, 0, 467,
	468, 517, 469, 470, 471, 0, 0, 0, 218, 219,
	220, 221, 222, 0, 223, 0, 0, 0, 0, 0,
	472, 0, 0, 0, 0, 224, 226, 225, 227, 228,
	473, 474, 229, 475, 230, 231, 476, 0, 232, 233,
	234, 235, 236, 237, 0, 0, 238, 477, 478, 479,
	0, 239, 480, 0, 0, 0, 240, 241, 242, 243,
	244, 245, 0, 247, 248, 249, 246, 0, 250, 0,
	251, 252, 253, 0, 0, 254, 255, 0, 0, 0,
	0, 0, 0, 0, 256, 257, 258, 259, 260, 261,
	481, 482, 0, 262, 0, 264, 263, 0, 265, 0,
	0, 266, 267, 268, 0, 269, 0, 270, 271, 0,
	272, 483, 273, 274, 276, 278, 275, 279, 280, 281,
	282, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 285, 486, 286, 287, 0, 288, 0, 289,
	0, 0, 0, 290, 291, 0, 292, 487, 0, 488,
	293, 0, 294, 295, 296, 297, 489, 490, 491, 345,
	0, 298, 299, 0, 300, 301, 303, 0, 0, 0,
	302, 304, 311, 0, 0, 305, 492, 307, 306, 308,
	309, 310, 493, 0, 494, 0, 312, 0, 495, 0,
	313, 314, 315, 0, 316, 317, 0, 0, 318, 319,
	320, 321, 0, 323, 322, 0, 324, 496, 0, 325,
	326, 0, 0, 327, 328, 0, 0, 329, 330, 0,
	331, 332, 334, 336, 333, 335, 337, 339, 340, 338,
	0, 341, 342, 344, 343, 0, 0, 0, 0, 497,
	498, 346, 347, 0, 348, 349, 350, 0, 0, 352,
	353, 354, 0, 0, 355, 356, 499, 0, 357, 0,
	500, 358, 351, 359, 360, 361, 362, 363, 364, 365,
	0, 366, 367, 501, 368, 502, 369, 0, 370, 0,
	371, 372, 373, 374, 375, 376, 503, 977, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 387, 384,
	388, 389, 390, 391, 0, 392, 0, 393, 394, 395,
	396, 504, 397, 0, 398, 402, 403, 404, 405, 406,
	407, 408, 0, 415, 416, 409, 411, 412, 413, 410,
	414, 417, 418, 0, 419, 399, 400, 420, 421, 0,
	422, 505, 423, 424, 0, 434, 425, 426, 427, 401,
	428, 432, 433, 429, 430, 431, 506, 0, 436, 437,
	435, 0, 438, 439, 440, 441, 442, 277, 443, 0,
	444, 507, 508, 509, 510, 0, 451, 0, 445, 446,
	511, 447, 512, 0, 448, 449, 450, 0, 452, 453,
	0, 0, 454, 455, 456, 457, 458, 460, 0, 461,
	0, 459, 462, 463, 464, 513, 514, 515, 212, 466,
	465, 516, 0, 0, 0, 0, 467, 468, 517, 469,
	470, 471, 0, 0, 0, 218, 219, 220, 221, 222,
	0, 223, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 224, 226, 225, 227, 228, 473, 474, 229,
	475, 230, 231, 476, 0, 232, 233, 234, 235, 236,
	237, 0, 0, 238, 477, 478, 479, 0, 239, 480,
	0, 0, 0, 240, 241, 242, 243, 244, 245, 0,
	247, 248, 249, 246, 0, 250, 0, 251, 252, 253,
	0, 0, 254, 255, 0, 0, 0, 0, 0, 0,
	0, 256, 257, 258, 259, 260, 261, 481, 482, 0,
	262, 0, 264, 263, 0, 265, 0, 0, 266, 267,
	268, 0, 269, 0, 270, 271, 0, 272, 483, 273,
	274, 276, 278, 275, 279, 280, 281, 282, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 285,
	486, 286, 287, 0, 288, 0, 289, 0, 0, 0,
	290, 291, 0, 292, 487, 0, 488, 0, 0, 294,
	295, 296, 297, 489, 490, 491, 345, 0, 298, 299,
	0, 300, 301, 303, 0, 0, 0, 302, 304, 311,
	0, 0, 305, 492, 307, 306, 308, 309, 310, 493,
	0, 494, 0, 312, 0, 495, 0, 313, 314, 315,
	0, 316, 317, 0, 0, 318, 319, 320, 321, 0,
	323, 322, 0, 324, 496, 0, 325, 326, 0, 0,
	327, 328, 0, 0, 329, 330, 0, 331, 332, 334,
	336, 333, 335, 337, 339, 340, 338, 0, 341, 342,
	344, 343, 0, 0, 0, 0, 497, 498, 346, 347,
	0, 348, 349, 350, 0, 0, 352, 353, 354, 0,
	0, 355, 356, 499, 0, 357, 0, 500, 358, 351,
	359, 360, 0, 362, 363, 364, 365, 0, 366, 367,
	501, 368, 502, 369, 0, 370, 0, 371, 372, 373,
	0, 375, 376, 503, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 387, 384, 388, 389, 390,
	391, 0, 392, 0, 393, 394, 395, 396, 504, 0,
	0, 398, 402, 403, 404, 405, 406, 407, 408, 0,
	415, 416, 409, 411, 412, 413, 410, 414, 417, 418,
	0, 419, 399, 400, 420, 421, 0, 422, 505, 423,
	424, 0, 434, 425, 426, 427, 401, 428, 432, 433,
	429, 430, 431, 506, 0, 436, 437, 435, 0, 438,
	439, 440, 441, 442, 277, 443, 0, 444, 507, 508,
	509, 510, 0, 451, 0, 445, 446, 511, 447, 512,
	0, 448, 449, 450, 0, 452, 453, 0, 0, 454,
	455, 456, 457, 458, 460, 0, 461, 0, 459, 462,
	463, 464, 513, 514, 515, 0, 466, 465, 516, 0,
	0, 0, 0, 467, 468, 517, 469, 470, 471, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1479, 1474,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 1479, 1474, 0, 0, 0, 0,
	1462, 0, 1446, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 1493, 0, 0, 0, 1473, 1475,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1493, 0, 1481, 0, 1473, 1475, 0, 0, 0, 0,
	1466, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 1491, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0,
	1484, 0, 1472, 0, 0, 0, 0, 0, 1479, 1474,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	1467, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 1484, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	3099, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 0, 0, 0, 0, 0, 1451, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0,
	0, 1483, 0, 0, 1493, 0, 2833, 0, 1473, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 1481, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 1492, 0, 0, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 1467, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 0, 0, 1445, 0,
	1484, 1451, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 1493, 0,
	0, 0, 1473, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 1490, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 1481, 0, 0, 0,
	0, 1451, 0, 1482, 1466, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 1491, 0, 0, 1483, 0, 0, 1493, 0,
	2533, 0, 1473, 1475, 0, 0, 0, 1480, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 1490, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 1443, 1444, 0,
	1476, 1477, 1478, 1486, 1487, 1488, 1481, 0, 0, 0,
	1472, 0, 0, 0, 1466, 0, 1479, 1474, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 1467, 1492,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 0, 1445, 0, 1484, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 1469, 1470, 1471, 0,
	0, 0, 0, 0, 1484, 1451, 0, 1482, 0, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0, 1483,
	0, 0, 1493, 0, 2532, 0, 1473, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 1490, 0,
	0, 0, 0, 0, 0, 1460, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 0, 0, 0, 1482, 1466, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 1491, 0, 0, 0,
	0, 0, 0, 0, 2529, 0, 0, 0, 0, 0,
	0, 1480, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 1467, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 1462, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 0, 1484, 0,
	0, 0, 0, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 1468, 1469, 1470, 1471, 0, 0, 0, 0, 1465,
	0, 1451, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 1493, 0,
	0, 1482, 1473, 1475, 1457, 1458, 1464, 1463, 1459, 1485,
	0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	0, 0, 1489, 0, 1490, 0, 0, 0, 2528, 0,
	0, 1460, 1461, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 1481, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1493, 0, 1491, 0, 1473, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 0, 0,
	1467, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 2527, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1493, 0, 0, 1482,
	1473, 1475, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0,
	1489, 0, 1490, 0, 0, 0, 2066, 0, 0, 1460,
	1461, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 1481, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 1492, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 1467, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	1445, 0, 1484, 1451, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1493, 0, 0, 0, 1473, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 1481, 0,
	0, 0, 0, 1451, 0, 1482, 1466, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 1491, 0, 0, 1483, 3428, 0,
	1493, 0, 0, 0, 1473, 1475, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 1481, 0,
	0, 0, 1472, 0, 0, 0, 1466, 0, 1479, 1474,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	1467, 1492, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 1445, 0, 1484, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 0, 0, 0, 0, 1484, 1451, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 0,
	0, 1483, 3424, 0, 1493, 0, 0, 0, 1473, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1481, 0, 0, 0, 0, 0, 0, 1482,
	1466, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1491, 0,
	0, 0, 3355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 1479,
	1474, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 1492, 0, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 1444, 0, 1476,
	1477, 1478, 1486, 1487, 1488, 1445, 0, 0, 0, 0,
	1484, 0, 0, 0, 1465, 1479, 1474, 0, 0, 0,
	0, 1462, 0, 1446, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 1469,
	1470, 1471, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 1482, 0, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 1483, 0, 0, 1493, 3354, 0, 0, 1473,
	1475, 0, 0, 0, 1468, 1469, 1470, 1471, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 1489,
	0, 1490, 0, 0, 0, 0, 0, 0, 1460, 1461,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 1493, 0, 1481, 0, 1473, 1475, 0, 0, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 1490, 0, 1491,
	0, 0, 0, 0, 1460, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 1480, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1472, 0, 0,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 1444, 0,
	1476, 1477, 1478, 1486, 1487, 1488, 0, 0, 0, 0,
	0, 1484, 0, 1472, 0, 0, 1479, 1474, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 1492,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 1484, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1482, 0, 0, 1457, 1458, 1464,
	1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449,
	1450, 1452, 1453, 0, 0, 0, 0, 3248, 0, 0,
	0, 0, 0, 0, 0, 1468, 1469, 1470, 1471, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	1482, 0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1483,
	0, 0, 1493, 3152, 0, 0, 1473, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 1490, 0,
	0, 0, 0, 0, 0, 1460, 1461, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	1481, 0, 0, 0, 0, 0, 0, 0, 1466, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	1479, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 1467, 1492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 1445, 0, 1484, 1451,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1483, 0, 0, 1493, 0, 0, 0,
	1473, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 1490, 0, 0, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 1481, 0, 0, 0, 0, 1451,
	0, 1482, 1466, 0, 1457, 1458, 1464, 1463, 1459, 1485,
	0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	1491, 0, 0, 1483, 3104, 0, 1493, 0, 0, 0,
	1473, 1475, 0, 0, 0, 1480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 1490, 0, 0, 0, 0, 0, 0, 1460,
	1461, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 1481, 0, 0, 0, 1472, 0,
	0, 0, 1466, 0, 1479, 1474, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 1467, 1492, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1480, 0, 0, 0, 0,
	1445, 0, 1484, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 1484, 1451, 0, 1482, 0, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 0, 0, 0, 1483, 3103, 0,
	1493, 0, 0, 0, 1473, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 1482, 1466, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 1491, 0, 0, 0, 3102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 1444, 0, 1476,
	1477, 1478, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 1479, 1474, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 1492, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487,
	1488, 1445, 0, 0, 0, 0, 1484, 0, 0, 0,
	1465, 1479, 1474, 0, 0, 0, 0, 1462, 0, 1446,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 1469, 1470, 1471, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1483, 0,
	0, 1493, 3069, 0, 0, 1473, 1475, 0, 0, 0,
	1468, 1469, 1470, 1471, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 1489, 0, 1490, 0, 0,
	0, 0, 0, 0, 1460, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 1493, 0, 1481,
	0, 1473, 1475, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 0, 1490, 0, 1491, 0, 0, 0, 0,
	1460, 1461, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 0, 0, 1481, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 0, 0, 1480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 0, 0, 0, 0, 0, 1484, 0, 1472,
	0, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 1492, 0, 1467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 1484, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0,
	0, 0, 0, 2868, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 0, 0, 0, 0,
	0, 1451, 3526, 0, 0, 0, 1482, 0, 0, 1457,
	1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447,
	1448, 1449, 1450, 1452, 1453, 1483, 0, 2484, 1493, 0,
	0, 0, 1473, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 1490, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 1443, 1444, 0,
	1476, 1477, 1478, 1486, 1487, 1488, 1481, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 1479, 1474, 0, 0,
	0, 0, 2455, 0, 1446, 0, 0, 0, 0, 1492,
	0, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1480, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 1462, 3525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1472, 0, 0, 0, 0, 0, 2456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1468, 1469, 1470, 1471, 0,
	0, 0, 0, 0, 1484, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478,
	1486, 1487, 1488, 0, 0, 0, 0, 0, 0, 1483,
	0, 0, 1493, 1479, 1474, 0, 1473, 1475, 0, 0,
	0, 1446, 0, 0, 0, 0, 1492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 1490, 0,
	0, 0, 0, 0, 0, 1460, 1461, 0, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	1481, 0, 0, 0, 0, 1462, 0, 1482, 1466, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 1469, 1470, 1471, 0, 0, 0, 0,
	0, 0, 1451, 0, 2572, 0, 0, 2571, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1483, 0, 0, 1493,
	0, 0, 1467, 1473, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 0, 1490, 0, 0, 1484, 0,
	0, 2157, 1460, 1461, 0, 0, 0, 0, 1443, 1444,
	0, 1476, 1477, 1478, 1486, 1487, 1488, 1481, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 1479, 1474, 0,
	0, 0, 2156, 0, 0, 1446, 0, 0, 0, 0,
	1492, 0, 0, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1480, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 1462,
	0, 1482, 0, 0, 1457, 1458, 1464, 1463, 1459, 1485,
	0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453,
	0, 1472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 1469, 1470, 1471,
	0, 0, 0, 0, 0, 1484, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 1444, 0, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 1493, 1479, 1474, 0, 1473, 1475, 0,
	0, 0, 1446, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 1490,
	0, 0, 0, 0, 0, 0, 1460, 1461, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 1481, 0, 0, 0, 0, 1462, 0, 1482, 1466,
	0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454,
	1455, 1447, 1448, 1449, 1450, 1452, 1453, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1493, 0, 0, 1467, 1473, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 1490, 0, 0, 1484,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 1481, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 1479, 1474,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 1492, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1480,
	820, 0, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	1462, 0, 1482, 0, 0, 1457, 1458, 1464, 1463, 1459,
	1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452,
	1453, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 0, 0, 0, 0, 1484, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 1444, 0, 1476,
	1477, 1478, 1486, 1487, 1488, 0, 0, 0, 0, 0,
	0, 1483, 0, 0, 1493, 1479, 1474, 0, 1473, 1475,
	0, 0, 0, 1446, 0, 0, 0, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 1481, 0, 0, 0, 0, 1462, 0, 1482,
	1466, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1468, 1469, 1470, 1471, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 2578,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1483, 0,
	0, 1493, 0, 0, 1467, 1473, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 1490, 0, 0,
	1484, 0, 0, 0, 1460, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1481,
	0, 0, 0, 0, 0, 0, 0, 1466, 0, 0,
	2856, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1480, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 0, 1472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487,
	1488, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 1474, 0, 0, 0, 2573, 1484, 0, 1446,
	0, 0, 0, 0, 1492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 1444,
	0, 1476, 1477, 1478, 1486, 1487, 1488, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 1479, 1474, 0,
	0, 0, 0, 1462, 0, 1446, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 0, 0, 0, 0, 0,
	1482, 0, 1465, 1457, 1458, 1464, 1463, 1459, 1485, 1462,
	1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0,
	1468, 1469, 1470, 1471, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1483, 0, 0, 1493, 0, 0,
	0, 1473, 1475, 0, 0, 0, 1468, 1469, 1470, 1471,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 1489, 0, 1490, 0, 0, 0, 0, 0, 0,
	1460, 1461, 0, 0, 0, 0, 0, 0, 0, 0,
	1483, 0, 0, 1493, 0, 1481, 0, 1473, 1475, 0,
	0, 0, 0, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 1490,
	0, 1491, 0, 0, 0, 0, 1460, 1461, 0, 0,
	0, 0, 0, 0, 0, 0, 1480, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1472,
	0, 0, 1480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	2540, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	1444, 0, 1476, 1477, 1478, 1486, 1487, 1488, 0, 0,
	0, 0, 0, 1484, 0, 1472, 0, 0, 1479, 1474,
	0, 0, 0, 2526, 0, 0, 1446, 0, 0, 0,
	0, 1492, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 0, 0, 0, 1484,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 1457,
	1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447,
	1448, 1449, 1450, 1452, 1453, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1468, 1469, 1470,
	1471, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 0, 1482, 0, 0, 1457, 1458, 1464, 1463, 1459,
	1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450, 1452,
	1453, 1483, 0, 0, 1493, 0, 0, 0, 1473, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	1490, 0, 0, 0, 0, 0, 0, 1460, 1461, 0,
	0, 0, 0, 1443, 1444, 0, 1476, 1477, 1478, 1486,
	1487, 1488, 1481, 0, 0, 0, 0, 0, 0, 0,
	1466, 0, 1479, 1474, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 1492, 0, 0, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1480, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 1443, 1444, 0, 1476, 1477, 1478, 1486, 1487, 1488,
	0, 0, 0, 0, 0, 0, 1472, 0, 0, 0,
	0, 1474, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1492, 1467, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 1469, 1470, 1471, 0, 1445, 0, 0, 0,
	1484, 1451, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1483, 0, 0, 1493, 0,
	0, 0, 1473, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1489, 0, 1490, 0, 0, 0, 0, 0,
	0, 1460, 1461, 0, 0, 0, 0, 0, 0, 1468,
	1469, 1470, 1471, 0, 0, 0, 1481, 0, 0, 1451,
	0, 0, 0, 1482, 1466, 0, 1457, 1458, 1464, 1463,
	1459, 1485, 0, 1456, 1454, 1455, 1447, 1448, 1449, 1450,
	1452, 1453, 1491, 1483, 0, 0, 1493, 0, 0, 0,
	1473, 1475, 0, 0, 0, 1443, 1444, 1480, 1476, 1477,
	1478, 1486, 1487, 1488, 0, 0, 0, 0, 0, 0,
	1489, 0, 1490, 0, 0, 1474, 0, 0, 0, 1460,
	1461, 0, 1446, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 0, 0, 1481, 0, 0, 0, 0, 0,
	1472, 0, 1466, 0, 0, 0, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 1467, 1465,
	1491, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1472, 0,
	0, 0, 0, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1483, 0, 0,
	1493, 0, 1484, 0, 1473, 1475, 0, 1482, 0, 0,
	1457, 1458, 1464, 1463, 1459, 1485, 0, 1456, 1454, 1455,
	1447, 1448, 1449, 1450, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1481, 0,
	0, 0, 0, 0, 0, 0, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 0, 0, 1457, 1458,
	1464, 1463, 1459, 1485, 0, 1456, 1454, 1455, 1447, 1448,
	1449, 1450, 1452, 1453, 1663, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1675, 1657, 1664, 1647, 1685, 1684,
	1467, 0, 1649, 1648, 0, 0, 0, 0, 0, 0,
	1695, 1696, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1686, 0, 1682, 1681, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1680, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1679, 1677, 1678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1482,
	0, 0, 1457, 1458, 1464, 1463, 1459, 1485, 0, 1456,
	1454, 1455, 1447, 1448, 1449, 1450, 1452, 1453, 0, 1659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1668,
	1662, 1670, 1672, 1673, 1674, 1669, 0, 1667, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1691, 1692, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1683, 0, 0, 0, 1660, 0, 1661,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1676,
	0, 0, 0, 1644, 1642, 1643, 1646, 1645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1652, 1653,
	1655, 1656, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1671, 1654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1694, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1650, 0, 0, 1687, 1688, 1689, 1690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1658, 0, 0, 0, 0, 1665,
	1693,
}
var sqlPact = [...]int{

	6436, -1000, -1000, -1000, -1000, -1000, -1000, 162, 161, 160,
	159, 154, 153, 151, 149, -1000, -1000, -1000, 147, -1000,
	-1000, 146, -1000, 145, 143, 138, 136, -1000, 132, 129,
	127, -1000, -1000, -1000, -1000, 126, 124, 123, 52404, 1807,
	63767, 55335, 1755, 46923, 63344, 46500, 62921, 62498, 112, -1000,
	62075, 111, 108, 105, -1000, -1000, 97, 1739, 38000, 95,
	94, 93, 1914, 90, 89, -1000, 88, -1000, 6819, 1241,
	-1000, 87, 85, -1000, 6357, 4162, 54495, 2218, 83, 79,
	37576, 2211, 2233, -1000, -1000, 1596, -1000, -1000, 78, 77,
	74, 72, 71, 70, 69, 68, 67, -1000, 66, 65,
	63, 62, 61, 60, 59, 58, 56, 55, 54, 53,
	51, 50, 49, 48, 45, 41, -1000, 7950, 1537, 1399,
	1398, 1390, 1377, 1395, 862, 40, 38, 35, 33, 32,
	26, 25, -1000, -1000, 24, 13, 12, 11, -1000, 10,
	9, 128, 8, 7, 6, 5, -2, 1986, 2225, 1258,
	968, 18230, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 67937, 64184, -3, -50, -4,
	-1000, 2561, 795, 31217, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 374, -1000, -1000, -1000, 238, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1630, 619,
	-1000, -1000, -1000, 61652, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1789, 0, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 614, -1000, 1784, 199, 1738, -1000, -1000, -1000, -1000,
	-1000, 64184, -1000, -1000, 2913, 2912, 1651, 613, 61235, -1000,
	1290, -1000, 751, 20918, -1000, 969, -1000, 20918, 228, -1000,
	-1000, -1000, -1000, -1000, 46077, 14654, 45654, 45231, 41861, 60812,
	14221, 51987, 1101, -1000, -1000, -1000, -1000, -1000, -33, 39263,
	64184, -1000, 205, -1000, -1000, -1000, -1000, -1000, -1000, 27294,
	744, 26836, 955, 26378, 881, -1000, -1000, -1000, -1000, 2911,
	2909, 973, 2905, 2513, 67520, 1424, 2877, 1425, 1063, 900,
	2873, 2870, 2868, 2867, 2866, 2865, 2864, 1363, 60389, 2318,
	41428, 40995, 52404, 52404, 2039, 59966, -1000, -1000, 1147, 1133,
	-1000, -1000, -1000, -1000, 2441, 2229, 2222, 51564, -1000, -1000,
	2863, 2856, 2855, 2853, 2852, 67103, 1410, 2848, 1967, 2847,
	2844, 2843, 2841, 2839, 2838, 2837, 2835, 2833, -1000, 51141,
	50718, 50295, 49872, 59543, 40562, 40129, -1000, -1000, -1000, 32905,
	4992, 59120, 34204, 52404, 52404, -1000, -1000, 27740, 76, -1000,
	-1000, -1000, 2294, -1000, 27740, 76, -1000, 64184, -1000, 2314,
	1669, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1719, 1361, 2703, 39696, 1622, 1110, 2431, 2430, 1216, 2067,
	2422, 2400, 2396, 2393, 2388, 1344, 1968, 475, 17772, 1243,
	1260, 2371, 2369, 2735, 1731, 44808, 2832, 2831, 2549, 2365,
	2293, -1000, -1000, -1000, -1000, 1165, -1000, -1000, 47340, -1000,
	-1000, 1010, -1000, -1000, 1010, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1084, 66269, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1375, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1803,
	-1000, 1607, -1000, -1000, 1200, 2225, 1958, 2541, 2541, 2541,
	2599, 360, 354, -1000, 128, -1000, -1000, 74272, -1000, -1000,
	27740, 27740, 27740, 27740, 27740, 1642, -1000, 612, -1000, -1000,
	659, -1000, 611, 532, -1000, -1000, -1000, -1000, -1000, -1000,
	609, 2729, -1000, 832, -1000, -1000, -1000, -1000, 2689, -1000,
	16868, -1000, -1000, -1000, 339, 608, 27740, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 201, 757, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 517,
	1516, 515, 515, 515, -1000, -1000, 890, -1000, -1000, -1000,
	301, 514, 229, 508, -1000, -1000, -1000, -1000, 2313, 606,
	604, -1000, 602, 601, 600, -1000, -1000, -1000, 597, 596,
	591, 589, 588, 583, 575, 571, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 889, -1000, 556, 553, 552, 551, 549,
	548, 546, 540, 539, -1000, -1000, -34, 64184, -1000, 374,
	-34, -1000, -1000, 537, -1000, 21364, 21364, 21364, -1000, -1000,
	1782, 27740, -1000, 1954, -1000, 468, -31, 550, 32059, -1000,
	30371, 550, 667, 35469, -1000, 2292, -1000, -1000, 536, 198,
	-1000, -1000, 2275, 64184, 15085, 64184, 52404, 52404, -1000, 2459,
	27740, -1000, -1000, 38842, 64184, 52821, 2654, 74800, 38842, 64184,
	2310, -1000, -1000, -1000, 64184, -1000, 27740, -1000, 2653, 1182,
	42713, 2628, -45, -1000, -1000, -1000, -1000, -1000, -1000, 1947,
	1959, 976, 1848, 1302, -1000, 20918, 2502, -1000, -1000, -1000,
	195, 15085, -1000, 2732, 2434, 1134, -1000, 1845, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1445, 2433, -1000, 1649,
	2428, 1440, -1000, -1000, 838, 2427, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1674, -1000, -1000, 2525, -1000,
	-1000, 1737, 2425, -20, -1000, -1000, 33342, 39263, -36, -1000,
	-1000, -55, -1000, 13788, 74272, -1000, -1000, -1000, 74272, 703,
	-1000, -1000, 2419, -1000, 74272, 701, -1000, -1000, 2417, -1000,
	-1000, -1000, 2830, -1000, 2829, 1905, 2826, 2825, 2824, -1000,
	1328, 1509, 2823, -1000, 2822, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 49449, 49026, 896, -1000, 1779, -1000, -1000, 48603,
	816, 1903, -1000, -1000, 1900, -1000, 779, -1000, 2821, 58697,
	2065, 816, 1898, -1000, -1000, -1000, -1000, -1000, 52404, -1000,
	52404, -1000, 52404, -1000, 1265, -1000, 66686, -31, -1000, -1000,
	-1000, -1000, -1000, 2411, 2820, 2818, 2813, -1000, 64184, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 173, 2410,
	-1000, -1000, 173, 2394, -1000, 173, 2392, -1000, 165, 2391,
	-1000, -1000, 1717, 2389, -1000, -84, 2386, -1000, -1000, -84,
	2382, -1000, -53, -1000, -1000, -1000, 795, -1000, 32482, 58274,
	42292, 767, 582, 37153, 74272, -1000, 33342, 74272, -1000, 42292,
	48603, -1000, 57851, 48186, -1000, -1000, 1156, 1996, -1000, -1000,
	-1000, -1000, 42292, 42292, 42292, -1000, 57428, -1000, 1684, 1323,
	2527, 52404, -1000, 1530, -1000, -1000, -1000, 2553, 2309, -1000,
	38421, 54072, -1000, 53655, -1000, 53238, -1000, 52404, -1000, 52404,
	-1000, 2809, 2807, 2806, -1000, 2804, 2547, 74272, 2532, -1000,
	2447, 1420, 1411, 64184, -1000, -1000, 64184, -1000, 64184, -1000,
	-1000, -1000, 1943, -1000, -1000, -1000, -1000, 52404, -1000, -1000,
	-1000, -1000, -1000, -1000, 2308, -1000, 1434, -1000, 1154, -1000,
	-1000, 175, -1000, -1000, -45, -1000, 66269, -1000, -1000, 2225,
	1958, -1000, 64184, -1000, -1000, 1989, -1000, 1257, -1000, 2225,
	1832, 2044, 25920, 2013, 27740, 128, -1000, -1000, 128, 128,
	20472, -1000, -1000, 74800, 74800, 15085, 1119, 27740, 27740, 27740,
	27740, 27740, 27740, 27740, 27740, 27740, 27740, 27740, 27740, 27740,
	27740, 27740, 27740, 27740, 27740, 27740, 27740, 27740, 27740, 27740,
	27740, 27740, 27740, 27740, 27740, 27740, 27740, 27740, 27740, 27740,
	27740, 27740, 1884, 27740, 1082, 27740, 27740, 27740, 27740, 1374,
	-1000, -1000, 1548, 422, 1681, -1000, 2698, 2698, 2698, 74350,
	74350, 493, 2800, 659, -1000, 27740, -1000, 76, 27740, 15518,
	-1000, 2717, 1252, -1000, -1000, 354, 9428, 1863, -1000, 351,
	15976, -1000, -1000, -1000, 16868, 532, 25462, 27740, 875, 74272,
	13357, 2326, 2142, -1000, 2716, -1000, -1000, 2699, -1000, -1000,
	-1000, -1000, 2699, 1118, 1116, 2714, -1000, 2699, 2699, 531,
	653, 650, 649, 645, 586, 27740, 27740, 27740, 27740, 27740,
	27740, 27740, 27740, -1000, 25016, 24558, 24100, 29078, 23642, 27740,
	17314, 23184, 22726, 64184, -34, 2652, 27740, 104, -1000, 72927,
	-1000, 104, 104, 530, -54, 74272, 1999, 1999, 31638, 1956,
	1683, 1683, 1683, -1000, 528, 639, -5, -6, -7, -1000,
	-1000, -9, -15, 550, 9893, 55752, 1677, 550, 550, 191,
	188, 350, 29950, 1954, 55752, -1000, -1000, 52404, 526, 15518,
	15085, 1191, -59, 184, 2017, 2015, 2002, -1000, 1367, -60,
	1081, -161, -1000, 4477, -62, -1000, 1046, -1000, -1000, -1000,
	-1000, 335, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 882, 519, 518, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 517,
	1516, 515, 515, 515, -1000, -1000, -1000, 301, 514, 229,
	508, -1000, -1000, -1000, -1000, -1000, -1000, 2272, -55, 52821,
	733, -67, 983, -45, -1000, -1000, -1000, 42713, 1010, -1000,
	1457, -1000, -1000, -1000, -1000, -1000, -1000, 1171, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2728, -1000, 2707, -1000, -1000,
	2713, -35, -1000, -1000, 15085, -1000, -47, 1601, -1000, 44385,
	2540, 2537, 2520, 1264, -1000, 1208, 2591, 47340, 2632, 2640,
	624, -1000, 2271, -1000, -1000, 747, 1345, 1080, 47340, 1649,
	-1000, 74800, -1000, 2082, 2589, 1112, 1108, 1112, 1112, 1117,
	-1000, 47340, 1079, 1550, 42292, -1000, 1078, -1000, -48, 2630,
	2637, 182, -1000, 2260, 1074, -1000, -1000, 52404, 15085, 699,
	-1000, 42292, -36, 39263, 64184, 183, -1000, 27740, 76, 27740,
	76, -1000, -1000, 2381, -1000, -1000, -1000, 2797, 1476, 1966,
	-1000, -1000, -1000, 507, 1897, 1649, 1892, -1000, -1000, 47763,
	2255, 64184, 2024, -40, 52404, -1000, -1000, 1544, -1000, 2380,
	2376, 520, 2794, -1000, 1777, 1888, -1000, -1000, -1000, 65852,
	1127, 2372, 852, 331, 2651, 331, 36311, -1000, 64184, -1000,
	64184, -1000, -1000, -1000, 2791, -1000, 52404, -1000, -1000, 52404,
	-1000, 52404, -1000, 52404, -1000, 52404, 52404, -1000, 64184, 42292,
	42292, 42292, 4640, 43551, -72, 349, -1000, 57011, 64184, 933,
	43968, 64184, 2492, -205, -1000, 767, 767, 699, -1000, 699,
	-1000, 52404, 2300, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2786, 2782, -1000, 807, 52404, 64184, 52404, -1000, -1000, 64184,
	-1000, 64184, -1000, -1000, 64184, -1000, 64184, -1000, 64184, -1000,
	-1000, -1000, -1000, -1000, -1000, 76, 27740, 1296, -1000, 2299,
	-1000, 2236, -1000, 15, -1000, -1000, -1000, -1000, 1798, 52404,
	52404, 64184, 52404, -1000, 47340, -1000, -1000, 2225, -1000, 952,
	-1000, -1000, -1000, -1000, -1000, 74272, 481, -1000, -1000, 74272,
	1392, 2029, -1000, 2029, -37, -1000, 72576, 1988, 52404, -1000,
	-1000, -1000, -1000, -1000, 732, 529, 529, 957, 957, 957,
	957, 2646, 775, 267, 1145, 421, 421, 421, 421, 421,
	421, 421, 421, 3558, 1383, 1383, 3558, 3558, 3558, 3558,
	3558, 1383, 1383, 1383, 421, 421, 421, 74350, 5902, 7617,
	27740, 27740, 1072, 1521, 422, 7280, 27740, 5356, 5356, 5356,
	5356, -1000, 1979, -1000, -1000, -1000, -1000, 2253, 506, 29078,
	29078, -1000, -1000, -1000, -1000, 16422, 27740, -1000, -1000, -1000,
	-1000, 22268, -1000, -1000, 72091, -248, 347, -211, -13, -1000,
	27740, 27740, 27740, 346, -1000, 344, -1000, -1000, 1070, -1000,
	1064, 1056, 1055, -1000, 505, 179, 27740, 64184, -1000, 69924,
	636, -69, -1000, -82, 1179, -1000, 27740, 171, -1000, 1667,
	504, 503, 341, -83, -1000, 337, 730, 729, 332, 327,
	325, 27740, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 74068, 69852, 69596, 69392, 9082, 69312, 69108, -88,
	324, -1000, 2247, -211, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 323, -1000, 321, -1000, 73787, -211, 320, 4701, -1000,
	29078, 29078, 29078, -1000, 319, -1000, 72723, -1000, 73741, 21822,
	21822, 21822, 318, 73425, 27740, -211, -89, -1000, -90, -1000,
	-1000, 501, -91, 852, 21364, 30794, 15085, -1000, 852, 852,
	27740, -1000, 27740, 2004, -1000, -1000, -1000, 2001, 1899, 1999,
	31638, -1000, -1000, -1000, -1000, 55752, 436, 550, -1000, -1000,
	-1000, -1000, -1000, 55752, -1000, 2689, 2102, -1000, -1000, -1000,
	64184, 374, -1000, 55752, 55752, 15085, 550, -1000, 317, 34625,
	-13, 169, -1000, -1000, 15085, 2107, 2107, 2107, -1000, -1000,
	64184, 2657, -1000, 1525, -1000, 74800, -1000, 658, 946, -1000,
	2712, 492, -1000, 2699, 2699, 64184, 82, 20918, -1000, 1010,
	-1000, -1000, 1300, -1000, 1498, -1000, 1114, -1000, -1000, -1000,
	20918, -1000, 2290, 64184, 64184, 52404, -1000, -1000, 1880, 65435,
	1879, 74800, 64184, -1000, -1000, 482, 480, 1981, 1978, 64184,
	64184, 65018, 64601, 64184, 1595, 27740, 1639, 1405, 76, 76,
	-1000, -1000, 76, 479, 1011, 52404, 52404, 52404, 1430, -1000,
	-1000, -1000, -1000, -1000, 52404, -1000, -1000, 2711, -1000, 1112,
	-1000, -1000, -1000, 1112, 1649, 1429, 52404, 42292, 837, 64184,
	1563, 76, 76, -1000, -1000, 76, 478, 15085, 1508, -1000,
	2073, -1000, -96, -1000, -1000, 12926, 74272, -1000, 74272, -1000,
	64184, -1000, 894, 64184, 43968, 819, 2370, -1000, 1649, 2363,
	374, -1000, -1000, 35890, -55, 767, 42292, 52404, -40, 42292,
	42292, 42292, 2776, 476, 2774, -1000, 52404, 2362, 1774, 1878,
	2377, 687, 64184, 1685, -1000, 27740, 1468, -1000, 35048, 910,
	64184, 1409, 73, -1000, -1000, -1000, 2, 64184, -1000, 2768,
	-1000, -1000, 173, 173, 173, -1000, 165, 1717, -1000, -84,
	-84, -1000, -1000, 4640, 767, -43, 474, -1000, 715, 714,
	33773, 42292, -97, -1000, -1000, -1000, -1000, -1000, 52404, 64184,
	592, 2057, 64184, -99, -1000, 167, 471, -1000, 767, 33342,
	2239, -1000, -1000, 836, -1000, 1122, -1000, -1000, -1000, -1000,
	-1000, -1000, -26, -55, -55, -1000, -1000, -1000, -1000, 74272,
	-1000, 1287, 1276, 64184, -1000, 15085, 64184, 52404, 15085, 52404,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1392, -1000, 27740,
	-1000, -1000, -1000, 20472, -1000, -1000, -1000, 52404, -27, 27740,
	27740, 7223, 5436, 27740, 29078, 29078, -1000, 27740, 989, -1000,
	-1000, -1000, -1000, -1000, 2234, 466, 27740, 74800, 4845, 1227,
	-1000, 308, 68824, 3558, -1000, 27740, -1000, 306, 20026, -1000,
	73074, -16, -102, -1000, 2722, 1908, 1722, 1426, 1317, 2710,
	12495, -211, -104, -1000, -1000, 657, -1000, 2436, -1000, 27740,
	73278, 12064, -1000, 36732, 865, 1685, -1000, -1000, 2699, 763,
	-1000, -1000, -1000, 763, -1000, 72045, 74800, 74800, 27740, 27740,
	-1000, 27740, 27740, 27740, -1000, -1000, 27740, -1000, -1000, 2232,
	27740, -1000, 74800, 74800, 29078, 29078, 29078, 29078, 29078, 29078,
	29078, 29078, 29078, 29078, 29078, 29078, 29078, 29078, 29078, 29078,
	29078, 29078, 29078, 1994, 29078, 2692, 2692, 2692, -1000, 2221,
	2232, 27740, 27740, 74800, 305, 304, 299, -1000, 27740, -211,
	-1000, -1000, 4640, -1000, 2130, -1000, -85, -1000, 1954, -1000,
	-1000, 2130, 2130, -107, 74272, 31638, 31638, -1000, 465, 27740,
	1998, -1000, 634, -1000, -112, -1000, 55752, -1000, 629, -242,
	-1000, 712, -1000, -1000, -1000, -1000, 374, -1000, -1000, -1000,
	166, 55752, -1000, -113, -1000, 2650, 297, 15085, -1000, -1000,
	-1000, -1000, -1000, -1000, -55, 1733, 2721, -1000, 2705, 654,
	628, 296, 2699, 294, 290, -55, 64184, -1000, -45, -1000,
	-1000, -1000, 27740, -1000, -1000, 2533, 1045, 1043, -1000, 2360,
	-1000, 1876, -1000, 924, -1000, 1311, -1000, 27740, 27740, 464,
	453, 1602, 2761, 2358, 1717, 2356, 1717, -1000, -1000, 746,
	-1000, 74272, 452, 451, -1000, -47, 1590, 830, -1000, -1000,
	27740, 27740, 56590, -1000, 340, 2525, -30, -1000, 1042, -1000,
	-1000, -1000, 1649, 1038, -1000, -1000, 1543, -1000, -1000, 825,
	-1000, -1000, 27740, -1000, -48, 1028, 767, 2220, -1000, -1000,
	2760, 2759, 2758, 287, -114, -49, 74800, 2647, 1813, 64184,
	52404, 52404, 2641, 740, -1000, 2689, -1000, -1000, -1000, -1000,
	816, -1000, -1000, 2756, -1000, 928, 15085, 52404, 2355, 1957,
	687, 43134, -1000, 816, 2044, 74272, -1000, 1409, 19568, 2523,
	-115, -1000, -1000, -1000, 852, 36311, 31638, 27740, 2755, -120,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56173, 56173,
	42292, 42292, 42292, 767, 64184, 64184, 43968, 2754, 444, 64184,
	64184, 440, -1000, 64184, 64184, 2751, 42292, -1000, -1000, 76,
	-1000, 1727, 52404, 11633, -1000, -1000, 807, -1000, -1000, 1583,
	1836, 1583, 1744, 71764, -1000, 2546, 15085, 2648, 5356, 27740,
	27740, 243, 695, 467, 5356, 27740, 27740, 74800, 74524, -121,
	27740, 27740, -1000, 27740, 627, 74272, 2695, 27740, 283, 281,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 280,
	-1000, -1000, -1000, -1000, -1000, 74272, 27740, 164, -1000, -1000,
	-1000, 68354, -1000, 27740, 275, 274, -1000, -1000, -1000, 270,
	268, 68778, 8758, 71560, 71480, 71276, 74272, 2221, 74272, -1000,
	-1000, 739, 739, 1094, 1094, 1094, 1094, 2692, 1631, 409,
	495, 824, 824, 824, 835, 1026, 1026, 824, 824, 824,
	2202, 1995, 435, 5697, -1000, -1000, 74272, 74272, 266, -1000,
	-1000, -1000, -211, 265, 2116, 2587, -1000, 31638, 2116, 2116,
	-1000, -1000, 1899, 64184, 74272, 31638, -31, -1000, 2689, -1000,
	-1000, 2102, -1000, 10336, -1000, 15085, -1000, -1000, 34625, -1000,
	434, -1000, 1, -1000, -1000, 626, 2747, 644, -1000, 263,
	-1000, -1000, -55, 74272, 64184, 64184, 64184, 2353, -1000, 1950,
	-1000, 70995, -122, -1000, 72576, 27740, 64184, -1000, 1600, 2034,
	966, -1000, 64184, -1000, 64184, -1000, -1000, 64184, 64184, 52404,
	2343, -128, 74272, -56, -1000, 709, -1000, 1098, -1000, 11202,
	52404, 52404, 42292, 2341, -130, 15085, -1000, 42292, -1000, -1000,
	-1000, 2052, -1000, 54912, 1682, 76, -1000, 2744, 433, 1649,
	76, -1000, 1712, -1000, 621, -1000, -1000, 430, 64184, 1759,
	428, 15085, 1962, 687, 43134, -1000, 1127, 1409, -1000, -1000,
	-65, -1000, 441, 76, 1685, -1000, -73, 74272, -1000, 697,
	-1000, -131, -1000, -1000, 254, -1000, 2490, 2488, -1000, -1000,
	27740, 427, 425, 64184, 2485, -1000, -1000, -136, -1000, 1870,
	-1000, -1000, -1000, -1000, -1000, 15085, 1336, -1000, -1000, -1000,
	-1000, 2546, 5356, 5356, 27740, 27740, 27740, 5356, 74524, -139,
	-1000, 5356, 5356, -211, -1000, -1000, 73074, -1000, -1000, -1000,
	74272, 10771, 1611, -1000, 70949, -1000, -1000, -1000, -1000, 27740,
	27740, -1000, -1000, -1000, -1000, -1000, 29078, 2201, 424, 74800,
	-1000, -1000, 833, 27740, 27740, 1954, 833, 833, -1000, -142,
	-1000, 550, -1000, -1000, -1000, 2689, 1, -1000, 2741, 15085,
	642, -1000, 2740, -1000, -1000, -1000, -1000, 64184, -1000, 64184,
	-1000, 15085, 64184, 2191, 1872, -1000, -1000, 1977, 423, 29078,
	52404, 534, 2136, 1474, 27740, -1000, -145, -147, 1871, -1000,
	-1000, 1853, 27740, -1000, 74800, 1717, 1717, -148, -150, -1000,
	27740, 1015, 64184, 19122, -1000, 2739, 2525, -1000, -1000, -1000,
	27740, 1005, -1000, -84, 1563, 2080, -1000, -1000, -1000, -1000,
	1975, -1000, -1000, 64184, 1974, 803, -1000, 43968, 819, -1000,
	-1000, 809, -1000, 27740, -1000, 52404, 27740, 1754, -1000, 687,
	43134, -1000, 2377, -1000, 2452, 64184, 2517, -1000, 2044, 422,
	-1000, 767, 420, 419, -156, 27740, 27740, -158, 418, 767,
	-141, -1000, 696, 682, -1000, -1000, 52404, 52404, -1000, 5356,
	5356, 5356, -1000, 246, -1000, -1000, 1685, 2585, -1000, 70668,
	70464, 5853, 29078, 74800, -159, -1000, 64184, 74272, -211, -1000,
	-1000, -1000, 55752, 587, -1000, 2737, -1000, -1000, 2448, -1000,
	-1000, -1000, 64184, 1866, -1000, -1000, 27740, 5697, 408, 27740,
	-1000, -1000, 2041, 2215, 2052, 406, -1000, -1000, -1000, -1000,
	1491, -1000, -1000, 74272, 2566, -1000, -1000, 398, 397, 74272,
	396, 438, 2175, -1000, -1000, -1000, 74272, 391, 819, -1000,
	1619, 1682, 383, -1000, -1000, -1000, 2056, 245, 2639, 809,
	-1000, 2681, -1000, -165, 928, -166, 52404, 43134, -1000, 1957,
	1107, -167, 64184, 1409, -1000, -1000, 42292, 42292, 1474, -168,
	-173, -1000, 42292, -1000, 1870, -1000, 64184, -1000, 64184, -1000,
	-1000, -1000, 1805, 27740, -1000, -1000, 5853, -174, -1000, -194,
	-1000, 2636, -1000, -1000, -1000, -1000, -1000, 2352, 70384, 1932,
	64184, 70180, 2206, -1000, -1000, 1563, 64184, 52404, 927, 15085,
	1583, 1583, 27740, 18676, 1604, 27740, -1000, 52404, 64184, -1000,
	2477, 2052, 76, -1000, -1000, 1474, 377, 1474, 376, -1000,
	1962, 1255, -1000, 852, -1000, -1000, -175, -182, 2052, 1474,
	-1000, -185, -1000, -192, -193, 244, 28632, 28632, 28632, -211,
	-1000, 64184, 375, 2307, -1000, 1746, 1781, 106, 931, -1000,
	-1000, 2136, -198, 374, -1000, 27740, -1000, -199, -1000, 905,
	-206, -1000, 886, -214, -1000, 2172, -1000, -215, 373, -216,
	-1000, -1000, -1000, 1563, 803, 2052, 27740, 2052, 27740, -1000,
	36311, -1000, 767, 767, 1563, 2052, 767, -1000, -1000, -1000,
	2423, -1000, 29509, 1695, 1387, 72372, 2423, 2423, -1000, -1000,
	64184, -1000, 1750, 1747, 1239, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1932, 74272, -1000, 1583, 2079, -1000, 1583,
	2161, -1000, 1552, -1000, 64184, -1000, 64184, 819, -1000, 1563,
	-217, 1563, -223, -201, -1000, -1000, -1000, 1563, -1000, -1000,
	1417, 2642, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2463, -1000, 945, 1664, 1664, 1746, -1000, 371, -1000,
	366, -1000, -224, -1000, -1000, 842, 1474, 842, 1474, -1000,
	-1000, 1385, -1000, -1000, 1671, 28186, -1000, 2661, -1000, -1000,
	2016, -1000, 2136, 27740, 27740, 1710, -1000, 2733, 2052, -1000,
	2052, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -225, -232,
	-1000, -1000, -1000, -1000, 1563, 1563, 1563, 994, 842, 842,
	-1000, 363, -1000, -1000, 27740, -234, 1563, -1000,
}
var sqlPgo = [...]int{

	0, 3440, 3439, 3437, 3436, 3435, 3434, 3432, 3431, 3430,
	3427, 3426, 3425, 3423, 3421, 3420, 3419, 3418, 3414, 3405,
	3404, 3403, 3402, 3398, 3395, 3394, 3390, 3387, 3386, 3385,
	3379, 3376, 3374, 3372, 3370, 3369, 3368, 3367, 3362, 3361,
	3360, 3357, 3356, 3354, 3353, 3351, 3350, 3348, 30, 3346,
	3344, 3341, 3340, 3339, 3336, 3334, 3332, 3331, 3330, 3329,
	3321, 3319, 3317, 3316, 3315, 3314, 35, 3313, 213, 3312,
	3308, 3307, 3303, 3301, 3300, 3299, 3298, 3296, 3295, 212,
	3291, 108, 3289, 3288, 3286, 3285, 3284, 211, 3283, 3282,
	3281, 3280, 3279, 3278, 3276, 3268, 130, 3267, 3265, 76,
	3262, 3261, 3259, 3255, 3253, 3252, 3251, 3250, 3249, 3248,
	185, 3247, 210, 3245, 3244, 3242, 3239, 3236, 3235, 3234,
	3230, 3229, 3228, 3227, 3223, 3222, 3220, 3219, 3217, 3207,
	3205, 3204, 3203, 3200, 3199, 3197, 3196, 3195, 3193, 209,
	156, 3192, 3191, 208, 207, 3190, 3189, 95, 93, 72,
	3188, 124, 131, 197, 6582, 187, 3187, 3184, 3182, 150,
	3177, 3176, 92, 140, 137, 134, 132, 394, 3174, 3168,
	71, 57, 33, 28, 97, 3165, 3163, 3162, 2485, 86,
	3154, 3152, 206, 183, 3150, 1613, 3149, 155, 89, 122,
	26, 104, 3147, 117, 19, 3146, 148, 32, 3145, 128,
	60, 29, 5055, 6484, 3144, 115, 218, 103, 80, 190,
	181, 171, 170, 133, 1332, 3139, 192, 3137, 67, 151,
	3135, 3132, 3131, 62, 145, 75, 3129, 8, 6, 153,
	25, 90, 16, 3127, 12, 3124, 3122, 3120, 3117, 31,
	129, 3116, 125, 88, 3113, 83, 3112, 61, 159, 3109,
	180, 96, 3108, 3106, 200, 152, 167, 10, 174, 3105,
	3103, 3101, 3099, 3097, 100, 21, 98, 3096, 3090, 102,
	182, 3081, 49, 135, 73, 116, 214, 94, 172, 85,
	168, 136, 166, 3080, 3079, 3073, 169, 3070, 3068, 147,
	163, 3064, 3061, 216, 34, 55, 179, 52, 3058, 126,
	3056, 154, 3053, 3051, 3050, 215, 139, 175, 3, 70,
	118, 24, 9, 178, 123, 68, 74, 3048, 2491, 1590,
	1568, 3047, 109, 84, 38, 101, 121, 202, 43, 3046,
	3045, 335, 3043, 3042, 3038, 3036, 141, 3034, 3033, 3032,
	114, 110, 87, 3031, 127, 66, 14, 307, 203, 78,
	164, 165, 194, 3026, 144, 3024, 64, 105, 3016, 149,
	188, 286, 3012, 201, 113, 3011, 160, 3005, 2997, 2994,
	2989, 50, 2988, 2987, 91, 2984, 112, 2983, 2977, 143,
	111, 162, 106, 40, 2976, 58, 36, 2974, 146, 53,
	2970, 219, 54, 0, 5700, 4837, 5922, 2969, 1483, 2968,
	161, 107, 2966, 2965, 2964, 82, 2963, 56, 2961, 2960,
	37, 2959, 23, 4, 7, 15, 13, 1572, 815, 2958,
	2954, 79, 99, 119, 2953, 204, 173, 2952, 2951, 2950,
	63, 2949, 22, 2948, 20, 2947, 2946, 27, 2, 17,
	2944, 2943, 191, 2942, 186, 2941, 2940, 2652, 2939, 199,
	69, 2938, 138, 158, 2937, 2935, 2933, 2932, 196, 2931,
	198, 2930, 11, 18, 1, 2927, 2926, 2925, 157, 5,
	2493, 2923, 2922, 65, 2920, 2917, 142,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 12, 12, 7, 7, 8, 8, 8, 36,
	36, 10, 10, 9, 9, 9, 11, 11, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 14, 14, 26,
	26, 15, 15, 28, 28, 16, 16, 29, 29, 449,
	449, 19, 31, 20, 32, 13, 450, 450, 450, 450,
	24, 21, 33, 22, 22, 22, 22, 22, 150, 150,
	150, 150, 18, 18, 27, 27, 164, 164, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 448,
	448, 166, 166, 165, 161, 161, 451, 451, 167, 167,
	167, 169, 169, 37, 37, 95, 95, 95, 96, 96,
	97, 97, 151, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 83, 83, 391, 391, 392, 392, 146, 146,
	147, 147, 147, 147, 148, 148, 149, 149, 149, 51,
	39, 39, 39, 39, 39, 39, 39, 40, 40, 40,
	40, 41, 41, 41, 41, 41, 41, 42, 42, 42,
	42, 42, 42, 49, 49, 49, 49, 140, 140, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 456,
	456, 457, 457, 458, 458, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 459, 459, 459, 459, 459,
	459, 459, 459, 459, 459, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	63, 63, 241, 241, 217, 217, 64, 64, 64, 65,
	65, 66, 66, 53, 53, 444, 444, 255, 255, 358,
	358, 68, 68, 69, 69, 69, 69, 69, 69, 70,
	70, 70, 70, 70, 70, 70, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 77, 77, 77, 78,
	78, 78, 75, 75, 75, 73, 73, 73, 72, 72,
	72, 76, 76, 76, 74, 74, 74, 256, 256, 79,
	79, 79, 79, 79, 79, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	360, 360, 80, 80, 80, 329, 329, 84, 84, 84,
	287, 287, 85, 85, 85, 85, 85, 86, 86, 86,
	86, 98, 98, 98, 98, 447, 447, 248, 248, 182,
	182, 182, 182, 91, 91, 91, 91, 92, 92, 92,
	93, 93, 145, 145, 104, 104, 104, 104, 104, 103,
	103, 103, 103, 103, 103, 43, 43, 43, 44, 44,
	45, 45, 46, 46, 47, 47, 48, 48, 48, 48,
	48, 106, 106, 452, 452, 108, 105, 105, 105, 107,
	107, 107, 107, 109, 110, 110, 110, 110, 110, 110,
	110, 110, 111, 111, 385, 385, 263, 263, 383, 383,
	399, 399, 384, 384, 221, 221, 221, 221, 221, 222,
	222, 222, 390, 390, 390, 390, 390, 390, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 130,
	130, 130, 139, 139, 139, 139, 139, 139, 139, 132,
	132, 132, 121, 121, 113, 113, 113, 113, 113, 117,
	117, 117, 117, 117, 114, 114, 123, 123, 123, 123,
	123, 118, 118, 120, 120, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 115, 115, 115, 115, 125, 125,
	125, 125, 293, 293, 293, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 135, 135, 135, 135, 135,
	135, 343, 343, 131, 131, 131, 131, 134, 134, 134,
	134, 277, 277, 128, 128, 128, 129, 129, 129, 133,
	133, 136, 136, 136, 136, 116, 116, 116, 461, 461,
	461, 137, 137, 127, 127, 138, 138, 138, 138, 138,
	138, 138, 138, 126, 126, 126, 126, 119, 445, 445,
	442, 442, 442, 442, 442, 442, 442, 443, 443, 446,
	446, 89, 89, 89, 58, 58, 462, 462, 462, 59,
	59, 463, 463, 463, 460, 460, 460, 460, 460, 460,
	460, 460, 223, 223, 224, 224, 310, 310, 310, 310,
	310, 227, 227, 168, 168, 168, 230, 231, 231, 228,
	228, 229, 229, 229, 233, 233, 232, 235, 235, 234,
	309, 406, 406, 408, 408, 408, 408, 408, 408, 408,
	410, 410, 410, 410, 410, 410, 410, 410, 410, 410,
	404, 404, 404, 405, 400, 400, 401, 401, 401, 401,
	225, 225, 226, 226, 226, 226, 402, 403, 246, 246,
	346, 407, 407, 409, 409, 411, 464, 464, 464, 464,
	464, 464, 465, 465, 308, 308, 239, 239, 412, 412,
	412, 412, 413, 413, 413, 413, 413, 416, 415, 414,
	414, 414, 414, 414, 339, 339, 339, 62, 62, 62,
	274, 274, 273, 273, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 142, 142,
	60, 60, 60, 174, 174, 57, 57, 57, 467, 467,
	61, 61, 61, 468, 468, 67, 67, 67, 67, 67,
	67, 56, 56, 56, 56, 56, 469, 469, 294, 294,
	292, 292, 245, 245, 345, 186, 186, 162, 162, 162,
	23, 25, 25, 17, 17, 34, 34, 35, 35, 30,
	30, 453, 453, 454, 454, 90, 90, 94, 94, 94,
	102, 102, 141, 141, 141, 141, 141, 141, 141, 38,
	38, 38, 38, 50, 50, 50, 50, 100, 471, 471,
	471, 101, 101, 470, 470, 181, 181, 181, 181, 183,
	183, 305, 305, 306, 306, 472, 472, 307, 307, 307,
	307, 176, 175, 177, 177, 55, 55, 55, 170, 170,
	171, 171, 172, 172, 173, 173, 473, 473, 87, 87,
	87, 144, 144, 216, 216, 301, 301, 301, 240, 240,
	191, 191, 304, 304, 302, 302, 302, 302, 272, 272,
	272, 143, 143, 253, 253, 265, 265, 266, 266, 355,
	355, 267, 99, 99, 154, 154, 152, 152, 152, 152,
	152, 152, 159, 159, 159, 159, 159, 153, 153, 153,
	155, 155, 155, 155, 155, 155, 155, 158, 158, 158,
	158, 160, 160, 160, 157, 157, 423, 423, 423, 425,
	425, 426, 422, 422, 424, 424, 466, 466, 276, 276,
	276, 237, 238, 236, 236, 243, 243, 242, 244, 244,
	344, 344, 344, 270, 270, 270, 270, 297, 297, 295,
	295, 295, 296, 296, 298, 298, 298, 299, 299, 300,
	300, 269, 269, 325, 325, 156, 156, 156, 250, 250,
	250, 251, 251, 316, 316, 316, 316, 316, 316, 317,
	317, 315, 315, 315, 315, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 348, 348, 252, 252, 349, 303,
	303, 440, 440, 440, 441, 441, 342, 342, 350, 350,
	350, 350, 350, 350, 340, 340, 341, 341, 356, 357,
	357, 280, 280, 280, 280, 278, 278, 281, 281, 281,
	281, 279, 279, 351, 351, 351, 351, 271, 271, 352,
	352, 352, 353, 311, 312, 312, 361, 361, 361, 361,
	361, 376, 249, 249, 249, 249, 249, 474, 474, 362,
	362, 362, 362, 362, 362, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 366, 366, 366,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 375, 375,
	375, 375, 375, 367, 367, 372, 372, 373, 373, 373,
	368, 369, 374, 374, 374, 374, 475, 475, 378, 378,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 364,
	364, 364, 371, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 288, 288, 289, 289,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 320, 320, 320, 320, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 417, 417, 417, 417, 417, 417,
	417, 417, 420, 420, 421, 421, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 418, 418, 418,
	418, 418, 418, 418, 418, 418, 418, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 419,
	419, 419, 419, 419, 419, 427, 427, 428, 428, 430,
	430, 431, 431, 432, 433, 433, 433, 434, 435, 435,
	429, 429, 436, 436, 436, 436, 437, 437, 438, 438,
	438, 438, 438, 439, 439, 439, 439, 439, 331, 331,
	332, 332, 338, 338, 338, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 184, 184, 184, 184, 184, 261, 261, 259, 259,
	259, 262, 262, 260, 260, 258, 258, 257, 257, 328,
	328, 326, 326, 330, 330, 282, 282, 377, 377, 377,
	377, 377, 377, 377, 283, 283, 283, 291, 284, 284,
	285, 285, 285, 285, 285, 322, 323, 286, 286, 286,
	324, 324, 333, 337, 337, 336, 335, 335, 334, 334,
	313, 313, 314, 314, 268, 268, 476, 476, 264, 264,
	354, 354, 354, 354, 219, 219, 254, 254, 218, 218,
	211, 211, 212, 212, 212, 212, 247, 247, 379, 379,
	379, 380, 381, 382, 327, 201, 200, 188, 189, 199,
	198, 197, 187, 190, 194, 195, 196, 192, 193, 207,
	206, 205, 203, 204, 359, 213, 213, 214, 214, 214,
	215, 215, 215, 215, 185, 185, 208, 208, 209, 210,
	210, 202, 202, 202, 178, 178, 178, 179, 179, 180,
	180, 389, 389, 387, 387, 387, 388, 388, 388, 388,
	386, 386, 386, 386, 386, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 396, 396, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 395, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 398, 398,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 6, 4,
	6, 6, 9, 6, 9, 6, 5, 6, 5, 1,
	1, 5, 5, 6, 6, 4, 4, 4, 4, 3,
	4, 4, 4, 7, 7, 9, 8, 9, 5, 3,
	5, 7, 4, 12, 4, 12, 1, 3, 5, 5,
	2, 5, 3, 6, 4, 6, 5, 6, 6, 4,
	8, 3, 4, 3, 6, 4, 3, 1, 3, 2,
	1, 1, 3, 1, 3, 2, 2, 0, 1, 1,
	0, 2, 0, 7, 2, 5, 6, 2, 1, 3,
	1, 3, 1, 6, 4, 9, 7, 12, 12, 12,
	9, 2, 7, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 5,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 3, 5, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 6, 6, 6, 3, 1, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 3, 3,
	4, 3, 4, 7, 4, 4, 4, 3, 5, 7,
	4, 3, 3, 4, 3, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 1, 1, 2, 1, 2,
	7, 3, 2, 0, 1, 3, 3, 1, 0, 1,
	2, 2, 1, 6, 5, 1, 2, 1, 3, 2,
	0, 8, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 3, 5, 3, 1, 3, 2,
	2, 5, 3, 6, 3, 1, 1, 2, 1, 1,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 3, 5, 7, 2, 3, 0, 3, 5, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 3, 3, 1,
	3, 1, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 5,
	7, 3, 3, 3, 3, 4, 4, 4, 3, 4,
	4, 3, 4, 4, 5, 3, 5, 5, 5, 7,
	3, 3, 3, 4, 3, 4, 3, 5, 4, 5,
	3, 4, 5, 3, 4, 3, 4, 3, 3, 4,
	4, 5, 0, 1, 1, 3, 2, 4, 3, 3,
	5, 4, 3, 5, 3, 5, 4, 6, 4, 6,
	4, 1, 0, 3, 4, 4, 5, 7, 5, 3,
	3, 2, 0, 4, 2, 3, 4, 2, 3, 3,
	3, 4, 3, 3, 3, 3, 4, 3, 1, 1,
	1, 2, 3, 2, 3, 6, 6, 7, 9, 7,
	9, 3, 4, 5, 5, 5, 3, 5, 2, 0,
	1, 1, 1, 1, 3, 2, 2, 2, 1, 2,
	0, 3, 3, 2, 10, 13, 0, 2, 3, 9,
	12, 0, 2, 3, 1, 1, 2, 2, 2, 2,
	1, 0, 1, 0, 1, 3, 1, 1, 1, 1,
	3, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 5, 8, 5, 11,
	3, 0, 2, 4, 3, 3, 1, 5, 1, 3,
	1, 2, 0, 1, 2, 2, 0, 1, 3, 3,
	2, 2, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 5, 8, 4,
	1, 0, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 2, 2, 2, 2, 2, 3, 1, 4, 2,
	4, 7, 3, 3, 0, 3, 6, 3, 1, 1,
	8, 7, 5, 0, 1, 6, 7, 6, 5, 3,
	4, 14, 17, 14, 17, 4, 0, 2, 2, 0,
	1, 0, 1, 3, 2, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 6, 8, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 1, 3,
	1, 3, 8, 5, 3, 4, 3, 0, 2, 2,
	0, 10, 3, 2, 0, 1, 3, 1, 1, 3,
	3, 5, 1, 1, 3, 3, 2, 3, 4, 3,
	4, 5, 0, 2, 4, 2, 3, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 8, 8, 8,
	2, 4, 4, 4, 2, 2, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	2, 5, 2, 3, 1, 3, 0, 1, 1, 1,
	1, 3, 0, 2, 0, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 1, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 3, 4, 1,
	5, 3, 4, 5, 1, 5, 1, 3, 2, 0,
	3, 0, 2, 3, 1, 3, 2, 0, 3, 5,
	6, 4, 6, 4, 3, 2, 1, 0, 5, 1,
	0, 2, 2, 2, 1, 1, 0, 1, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 2, 1, 0, 2, 5, 7, 2,
	1, 1, 2, 4, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 5, 4, 1, 2, 1,
	4, 1, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 2, 5, 1, 4, 2, 5, 1, 4, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 1, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 1,
	2, 2, 2, 4, 3, 5, 6, 8, 6, 5,
	4, 3, 4, 1, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 8, 8,
	6, 4, 6, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 3, 3, 3, 0, 1, 4, 2, 2,
	2, 2, 2, 3, 2, 2, 3, 0, 4, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 1, 2,
	3, 2, 3, 2, 3, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 1, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 3, 1,
	1, 1, 1, 5, 3, 1, 1, 3, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 7,
	1, 7, 5, 3, 1, 1, 1, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 460, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -141, -3, -37, -39,
	-52, -68, -70, -79, -88, -87, -89, -91, -95, -94,
	-83, -43, -99, -103, -112, -142, -143, -144, 84, 70,
	125, 106, 111, 158, 289, 318, 328, 312, -107, -108,
	347, -38, -50, -101, -100, -4, -10, 27, 41, -40,
	-41, -42, 55, -60, -57, -54, -63, -455, 86, -424,
	-71, -74, -76, -459, 116, 131, 175, 281, -92, -93,
	314, 316, 132, -45, -44, 126, -152, -154, -105, -106,
	-145, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, -128, -129, -130, -131,
	-132, -133, -134, -135, -136, -137, -138, 351, 397, 42,
	360, 71, 119, 322, 21, -5, -6, -7, -8, -9,
	-11, -12, -25, -53, -55, -56, -58, -59, -67, -61,
	-62, -423, -72, -73, -75, -77, -78, 313, -155, -153,
	457, 410, -14, -19, -20, -15, -16, -18, -21, -17,
	-26, -31, -32, -28, -29, -27, -30, -33, -34, -35,
	-36, -23, -24, -13, -22, 428, 436, -158, -156, -157,
	-160, 335, 418, 374, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, -203, -208, -209, -210, -202, -178,
	-395, -398, 4, -393, -396, 137, 182, 249, 21, 22,
	23, 24, 25, 27, 38, 40, 39, 41, 42, 45,
	47, 48, 51, 52, 53, 54, 55, 56, 59, 64,
	69, 70, 71, 72, 73, 74, 79, 76, 77, 78,
	81, 83, 84, 85, 88, 89, 97, 98, 99, 100,
	101, 102, 106, 109, 108, 111, 114, 115, 116, 118,
	120, 121, 123, 125, 126, 129, 127, 380, 128, 130,
	131, 132, 133, 143, 144, 145, 147, 148, 150, 152,
	156, 157, 159, 163, 165, 166, 167, 168, 174, 175,
	177, 178, 183, 179, 184, 188, 191, 190, 192, 193,
	194, 185, 199, 203, 204, 205, 207, 208, 211, 212,
	213, 214, 217, 216, 219, 222, 223, 226, 227, 230,
	231, 233, 234, 237, 235, 238, 236, 239, 242, 240,
	241, 244, 245, 247, 246, 172, 254, 255, 257, 258,
	259, 275, 262, 263, 264, 267, 268, 271, 274, 276,
	277, 278, 279, 280, 281, 282, 284, 285, 287, 289,
	291, 293, 294, 295, 296, 297, 298, 300, 301, 303,
	304, 305, 306, 307, 312, 309, 310, 311, 313, 314,
	315, 316, 318, 320, 321, 322, 323, 325, 327, 348,
	349, 362, 328, 329, 330, 331, 332, 333, 334, 338,
	342, 339, 340, 341, 343, 336, 337, 344, 345, 347,
	350, 351, 353, 355, 356, 359, 360, 361, 363, 366,
	367, 368, 364, 365, 358, 373, 371, 372, 375, 376,
	377, 378, 379, 381, 383, 391, 392, 394, 397, 398,
	399, 389, 401, 402, 405, 406, 407, 408, 409, 414,
	410, 412, 415, 416, 417, 423, 422, 429, 430, 432,
	433, 434, 33, 43, 44, 46, 49, 60, 61, 62,
	65, 103, 104, 124, 134, 135, 146, 160, 162, 169,
	170, 171, 189, 195, 197, 201, 220, 252, 253, 269,
	273, 286, 288, 299, 324, 354, 369, 384, 385, 386,
	387, 393, 395, 418, 419, 420, 424, 431, 260, -196,
	2, -178, -178, 289, 26, 2, 26, 285, 337, 376,
	378, 2, -447, -248, 2, 26, -182, -178, 86, 158,
	335, -196, 2, -447, -248, 24, 2, -178, 2, -183,
	2, 328, -178, 460, 81, 227, 64, 324, 344, -110,
	392, -109, 384, 330, -111, -385, 2, 242, -178, 460,
	460, 460, 460, 2, 374, 278, 422, 336, 411, 99,
	296, 182, -442, 2, 4, -396, -393, -212, -211, 374,
	99, -210, -202, 450, -209, 460, 460, 460, 2, 204,
	205, 295, 294, 344, 345, 460, 460, 460, 2, 25,
	58, 80, 83, 105, 133, 153, 156, 265, -456, 234,
	275, 293, 330, 343, 373, 381, 394, -460, 361, 59,
	411, -467, 399, 114, -292, 99, 378, 376, 227, 157,
	406, 320, 161, 404, 109, 188, 409, 408, 460, 460,
	25, 58, 67, 83, 114, 133, 153, 156, -458, 275,
	293, 327, 330, 343, 373, 381, 399, 394, 2, 422,
	336, 374, 182, 99, 411, 320, 292, -81, 2, 457,
	29, 347, -151, 374, 198, 2, -178, 204, 205, 2,
	460, 460, -442, 2, 204, 205, 2, 198, 2, 59,
	332, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 2, -139,
	344, 361, 167, 41, 64, 26, 69, 279, 100, 159,
	182, 183, 212, 80, 81, -293, 40, 205, 204, -343,
	375, 331, 337, 371, 392, 86, 412, 321, 434, 297,
	127, 4, 99, 242, 346, 384, 227, 73, -466, 2,
	374, -470, 2, 392, 392, 2, -470, 2, -470, 2,
	-181, 2, 392, 388, -471, 392, 431, 460, 460, 460,
	460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
	-153, -155, -154, 460, 460, 460, 460, 460, -139, 344,
	2, 64, 26, -159, 151, -242, -243, 403, 196, 122,
	266, -152, -154, 2, -423, -383, 2, -318, -399, -320,
	448, 449, 443, 248, 435, -331, 105, 404, 260, -398,
	-321, -333, 124, 324, -262, 8, 9, 5, 6, 7,
	-185, -363, -327, -371, 396, 136, 251, -215, 461, 10,
	457, -420, -154, -332, 34, 162, 57, -387, -214, -365,
	-373, -369, -370, -474, 47, 53, 52, 381, 241, 338,
	339, 355, 340, 341, 45, 414, 179, 257, 259, 190,
	4, 197, -213, -202, -417, -418, -393, -394, 189, 195,
	191, 354, 192, 193, 194, 44, 299, 147, 148, 146,
	115, 104, 103, 253, 49, 48, 46, 419, -374, 101,
	384, 385, 386, 387, 207, 208, -178, -395, 67, 91,
	92, 90, 95, 94, 96, 93, 346, 411, 58, 33,
	169, 170, 201, 252, 171, 65, -419, 365, 87, 155,
	187, 173, 200, 202, 206, 221, 224, 243, 250, 270,
	272, 319, 352, -475, 420, 134, 135, 273, 286, 369,
	393, 395, 160, 220, 60, 61, -425, 300, -426, -196,
	-425, 460, 460, 462, 460, -236, -237, -238, 2, 26,
	112, 457, 2, -347, 2, 455, -351, -154, 215, -350,
	457, -348, -203, 261, -421, 325, -417, -418, -185, -202,
	-214, 4, -239, 457, 459, 99, 374, 68, 2, -287,
	457, -178, 26, 260, 388, 462, -329, 457, 260, 154,
	263, -178, 2, 2, 348, 2, 457, -110, 62, 392,
	39, 344, -306, 2, -307, -175, -176, -177, -356, 203,
	291, 298, 437, 434, -383, -452, 154, 440, 388, -383,
	-263, 459, 2, -351, 169, -203, 2, -200, -386, 4,
	-393, -396, -394, -397, 67, -395, 26, 28, 29, 30,
	32, 34, 35, 36, 37, 50, 57, 58, 63, 66,
	68, 80, 86, 90, 91, 93, 92, 94, 95, 96,
	105, 107, 110, 112, 113, 117, 119, 122, 136, 138,
	151, 153, 154, 158, 161, 164, 176, 186, 196, 198,
	215, 218, 225, 228, 229, 248, 251, 256, 260, 261,
	265, 266, 283, 290, 302, 317, 335, 346, 357, 370,
	374, 382, 388, 390, 396, 403, 404, 411, 413, 421,
	425, 426, 427, 428, -398, 2, -351, 169, 2, -205,
	169, -351, -208, 2, -391, 169, -389, 10, -388, 5,
	4, -393, -396, -394, 2, -187, -178, 2, -199, -386,
	2, -218, 169, -203, -204, -208, 388, 462, -254, -211,
	-212, -247, -178, 459, -318, 2, -99, 2, -318, 169,
	2, -99, 169, 2, -318, 169, 2, -99, 169, 2,
	2, 2, 394, 2, 83, 169, -178, 374, 98, 2,
	311, -457, 327, 398, 422, 2, 2, 2, 2, 2,
	2, 2, 374, 336, -468, 300, -192, 2, -178, 151,
	-391, 169, 2, -391, 169, 2, -206, -208, -206, 182,
	199, -187, 169, 2, 378, 376, 378, 376, 154, 2,
	198, 2, 198, 2, -352, 2, -353, -203, 2, 2,
	2, 2, 2, 169, -178, 374, 98, 2, 214, 2,
	2, 2, 2, 2, 2, 2, 2, 2, -256, 169,
	2, -203, -256, 169, 2, -256, 169, 2, -219, 169,
	2, -218, -187, 169, 2, -392, 169, 2, -391, -392,
	169, 2, -360, 2, -359, -388, 418, -81, 457, 344,
	457, -391, -203, -203, -318, -99, 154, -318, -99, -151,
	151, 2, 99, 374, -139, 2, 151, 413, 2, 8,
	2, -391, 331, 297, 143, 2, 348, 2, 64, -293,
	434, 154, 2, 154, 2, -277, 2, 428, -445, 2,
	260, 154, 2, 154, 2, 154, 2, 154, 2, 154,
	2, 294, 345, 205, 2, -99, 425, -318, 425, 2,
	391, 213, 128, 154, -277, 2, 154, 2, 154, 2,
	5, 2, 203, 291, 362, 2, -203, -461, 2, 374,
	422, 336, 2, 2, 76, 77, 154, 2, 154, 434,
	2, -271, -351, -305, -306, -305, 388, -183, -159, -242,
	-243, -139, 348, 2, 408, 245, 350, 211, -159, -270,
	-295, -296, 225, 138, 256, -276, 26, 112, -276, -276,
	51, 458, 458, 11, 12, 66, 38, 448, 449, 450,
	451, 149, 452, 453, 446, 447, 445, 438, 439, 442,
	209, 210, 82, 441, 440, 75, 232, 326, 139, 140,
	141, 142, 308, 180, 31, 181, 14, 15, 16, 30,
	265, 224, 435, 173, 352, 443, 17, 18, 19, 200,
	202, 250, 43, 176, -184, -220, -318, -318, -318, -318,
	-318, 272, 457, -268, -313, 455, -154, 457, 457, 457,
	5, 457, 5, -382, 8, -154, -318, -331, 458, -260,
	457, -154, -331, -326, 457, 324, 455, 457, -334, -318,
	459, -427, 429, -367, 457, 288, -366, 457, -366, -366,
	423, -364, 457, 436, 430, 457, -364, 457, 457, 151,
	457, 457, 457, 457, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 423, 457, 457, 457, 457, 457, 457,
	457, 457, 457, 462, -425, -239, 457, -264, -354, -318,
	450, -264, -264, 260, -257, -318, 87, -280, 206, 243,
	155, 221, 319, 187, -382, -82, -68, -79, -87, -99,
	-112, -143, -144, -315, 461, -342, 436, -154, -348, -202,
	-154, -350, 457, -347, -342, 450, -203, 457, 154, 457,
	459, 154, -247, -386, -187, -203, -213, -214, 111, -257,
	-442, -247, -182, 35, -328, -361, -362, -375, -363, -372,
	-368, -371, 304, 305, 303, 307, 306, 47, 53, 52,
	381, 241, 338, 339, 355, 340, 341, 45, 414, 179,
	257, 259, 190, 4, 46, 419, -374, 197, 189, 195,
	191, 354, 192, 193, 194, 44, 299, 147, 148, 146,
	115, 104, 103, 253, 49, 48, 101, 384, 385, 386,
	387, 207, 208, 420, 365, 60, 61, -442, -247, 151,
	-385, -257, 35, -306, 2, 105, -389, 39, -472, 462,
	223, -222, 231, 247, 166, 261, 432, 254, -390, 5,
	4, -327, -339, 105, 227, -371, 9, 449, -379, 8,
	448, -384, -383, 89, 459, -386, -164, 309, -163, 23,
	27, 116, 416, 129, -229, 184, 278, 124, 358, 407,
	-449, -450, 329, 379, 380, 78, 254, 309, 124, -273,
	-275, 35, 97, 245, 274, 54, 177, 236, 237, 360,
	424, 124, 309, 428, 124, -450, 309, -450, -166, 358,
	407, -449, -450, 329, 309, -165, -229, 124, 461, -96,
	-391, 457, -254, 462, 462, -386, 450, 124, 124, 124,
	124, 2, 2, 248, 2, 2, 2, 156, -460, -458,
	2, 2, 2, -203, 169, -205, 169, 2, -208, 422,
	-241, 260, -444, -255, 374, -203, -174, -422, 428, 248,
	248, 35, 457, 2, -189, 169, 2, -179, -178, 182,
	-422, 248, -352, -216, -203, -216, 347, -196, 35, -315,
	124, 2, 2, 2, -178, -167, 462, 56, 315, 124,
	-167, 124, -167, 124, -167, 462, 124, -167, 124, 462,
	124, 124, 458, 462, -360, -391, -149, 428, 154, 86,
	457, 457, -151, -97, -96, -391, -444, -187, 2, -203,
	2, 374, 207, -391, -391, -391, -385, 26, 349, 2,
	294, 345, 77, -203, 374, 99, 182, 70, -446, 151,
	-443, 320, -442, -203, 99, -203, 99, -203, 99, -203,
	-203, 2, 2, 2, 2, 74, 74, 151, 2, 391,
	2, 391, 2, -178, -178, -178, 223, -203, 151, 374,
	182, 99, 374, -167, 462, -183, -159, -270, -385, 211,
	350, -159, -296, -295, 26, -318, -300, 145, 244, -318,
	-320, -153, -153, -153, -244, -344, -318, 290, 182, -376,
	-361, -361, -201, -386, 384, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
	-318, -318, -318, -318, -318, -318, -318, -318, -318, -318,
	224, 173, 352, 43, 176, -318, 388, -318, -318, -318,
	-318, 240, 248, 251, 396, 136, 405, 112, 254, -476,
	370, 37, -324, -154, -261, 457, -338, 32, 357, 26,
	-331, 457, 2, -313, -318, -314, -258, -257, -257, 458,
	421, 26, 112, 450, 2, 8, -288, -290, 433, 239,
	102, 168, 238, -289, 334, 458, 462, 35, 458, -318,
	-258, -330, -326, -257, -337, -336, 425, -386, 450, -428,
	144, 161, 8, -380, 8, -380, 384, 384, 8, -380,
	-380, 457, 458, 2, 458, 2, 458, 2, 458, 2,
	458, 2, -318, -318, -318, -318, -318, -318, -318, -257,
	-282, 2, -377, -257, 4, 433, 239, 102, 168, 238,
	334, -282, 2, -283, 2, -318, -257, -284, -319, -320,
	448, 449, 443, -331, -285, 2, -318, -258, -318, 50,
	218, 390, -286, -318, 154, -257, -257, 2, -257, 2,
	-426, 35, -257, -250, 462, 154, 35, 4, -250, -250,
	457, 458, 462, -281, 165, 235, 230, -281, -347, -280,
	206, -278, 270, -278, -278, -440, 457, 456, 460, 460,
	460, 460, 460, -342, -188, 455, 463, -386, -341, -340,
	35, -196, 267, -342, -342, 459, 458, -341, -203, 457,
	-257, -386, 363, 458, 459, 200, 200, 200, 325, 458,
	388, 428, -81, 262, 458, 462, -249, 34, 455, -290,
	457, -378, 423, 457, 457, 154, -248, -452, 458, 392,
	-307, -221, 298, 356, 310, 342, 372, 9, 8, 8,
	462, -386, 462, -453, 80, 388, 68, -309, 169, 68,
	-400, -190, 80, -401, -178, 63, 404, 290, 153, -453,
	80, -453, 80, 80, 347, 361, 51, -351, 38, 38,
	26, -99, 219, 154, 434, 374, 182, 388, -351, -275,
	-361, 97, 236, 237, 51, -381, -379, 449, -381, 51,
	-381, -381, -381, 428, -205, -351, 388, 280, -391, 388,
	462, 38, 38, 26, -99, 219, 154, 388, -218, -188,
	-357, -356, -392, -211, -178, 459, -318, -99, -318, -99,
	124, 2, -468, 214, 457, -225, 248, -274, -273, 248,
	-207, 2, -203, 154, -247, -358, 198, 462, -255, 280,
	124, 124, 457, 120, 296, 2, 260, 248, -189, 169,
	-170, 377, 124, -312, -311, 426, -301, -99, 457, 105,
	35, -301, -265, -266, -355, -267, -190, 457, -196, -178,
	2, -203, -256, -256, -256, -218, -219, -187, -391, -392,
	-392, -81, -359, 458, 458, -148, 264, -147, -178, 5,
	-151, 413, -224, -310, -309, -404, -405, -400, 224, 182,
	404, 199, 137, -240, -191, -190, 98, -149, -356, 462,
	-149, -149, -357, -357, -203, 151, 2, 2, -277, -203,
	-187, -218, -203, -247, -247, -187, -187, -187, -99, -318,
	344, 151, 151, 459, -277, 296, 99, 374, 278, 182,
	-203, -218, -187, -203, -351, -159, 408, -298, -379, 457,
	-299, 324, 325, 462, -162, 36, 110, 211, -203, 434,
	121, -318, -318, 388, -476, 370, -324, 121, -318, 240,
	251, 396, 136, 405, 112, 254, 154, 457, -319, -319,
	458, -259, -318, -318, 456, 465, 458, -243, 462, -242,
	-318, -257, -257, 458, 458, 388, 388, 388, 388, 457,
	459, -257, -247, 456, 456, 462, 458, -335, -336, 117,
	-318, 459, -433, 271, 457, 457, 458, 458, 462, 458,
	434, 434, 458, 458, 458, -318, 35, 462, 462, 462,
	458, 462, 462, 462, 458, 458, 154, 458, 458, -291,
	283, 458, 11, 12, 448, 449, 450, 451, 149, 452,
	453, 446, 447, 445, 438, 439, 440, 75, 232, 326,
	14, 15, 16, 200, 176, -319, -319, -319, 458, -322,
	-323, 154, 151, 35, -286, -286, -286, 458, 154, -257,
	458, 458, 457, 458, -312, -354, -251, 2, -347, -198,
	-386, -312, -312, -257, -318, 206, 206, -279, 413, 260,
	-281, -347, -340, 458, -441, -382, -342, -341, -382, -317,
	-316, 152, 36, 110, 246, 172, -196, -239, -341, -341,
	-386, -342, 458, -252, -349, -421, -243, 459, -386, -140,
	5, 251, -140, -140, -247, 24, 284, -361, 455, 456,
	8, 8, 457, -380, -380, -247, 154, -383, -306, 402,
	72, 298, 384, -383, -163, 309, -190, -190, -203, 248,
	-309, 169, -169, 248, -361, -197, -178, 457, 457, 211,
	211, -190, -197, 169, -190, 169, -197, -197, -448, 298,
	255, -318, 226, 296, 249, -164, 309, -99, -99, -99,
	457, -452, 413, 111, -203, -218, -203, -207, 309, -213,
	-381, -381, -273, 309, -205, -391, 428, -187, -165, -99,
	-99, -99, 457, -188, -166, 309, -146, 178, 458, 450,
	-178, 422, -178, -223, -226, -224, -190, -462, 430, 428,
	124, 124, -239, -217, -203, 455, -149, -391, -203, -391,
	-391, -391, 2, 457, 2, -203, 124, 260, 248, -171,
	118, -473, 440, -187, -243, -318, -272, -304, 317, 260,
	-240, 418, -196, -272, -253, 462, 154, 440, 459, -240,
	2, -167, -167, -167, -167, -167, -81, -149, 462, 457,
	440, 440, 457, -391, -391, 458, 462, -203, -189, 182,
	182, -195, -179, 458, 462, 459, 457, -149, -96, 154,
	-46, 428, 374, 461, 344, 344, -178, -199, -187, -203,
	-200, -218, -299, -318, -344, -203, 461, -318, -318, 121,
	121, -318, -319, -319, -318, 121, 154, 457, -318, -328,
	30, 30, 458, 462, -314, -318, 458, 421, -243, -243,
	458, 5, 239, 168, 238, -289, 238, -289, -289, 8,
	450, -386, 458, -326, 119, -318, 382, -386, 450, -434,
	-193, 457, -178, 426, -242, -380, -364, -364, 458, -376,
	-361, -318, -318, -318, -318, -318, -318, -322, -318, -376,
	-361, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	-319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
	112, 248, 254, -319, -323, -322, -318, -318, -361, 458,
	458, 458, -257, -81, -269, 161, -357, 462, -269, -269,
	458, -347, -347, 457, -318, 206, 456, 458, 462, -341,
	456, 462, 464, 440, -239, 459, -340, 458, 462, -303,
	35, 458, -386, 263, 5, 8, 455, 456, 458, -380,
	458, 458, -247, -318, 388, 388, 124, 248, 415, -406,
	-401, -318, -245, -345, -318, 457, 457, -161, 116, 347,
	-454, 2, 124, -167, 124, -167, 432, 457, 457, 388,
	428, -257, -318, -150, 105, -385, -450, 461, -450, 461,
	388, 388, 280, 428, -257, 388, -149, 154, 2, 2,
	2, 458, 458, 462, -407, 35, 258, -178, -203, -205,
	35, -64, 428, -356, -382, -174, 2, -294, 413, -188,
	-203, 124, -172, 217, -473, -389, -422, -297, -295, -272,
	-264, 249, 79, 458, -312, -266, -251, -318, 2, 458,
	-147, -148, -391, -391, -391, -149, -151, -151, -310, 2,
	457, -189, -179, 457, -151, -191, 2, -392, -99, 264,
	-203, 450, -277, -231, -230, 278, 254, -231, 261, 458,
	-162, -188, -318, -318, 121, 30, 30, -318, -318, -328,
	458, -318, -318, -257, 456, 5, -318, 458, 458, 458,
	-318, 459, -435, -178, -318, 458, 458, 458, 458, 462,
	462, 458, 458, 458, 458, -323, 154, 112, 254, 457,
	458, 458, -325, 164, 51, -347, -325, -325, -279, -247,
	-347, -315, -382, -316, -188, 455, -386, -349, 457, 459,
	456, 2, 455, 458, -190, -190, -309, 124, -408, 80,
	-410, 66, 137, 86, 248, 251, 404, 290, 63, 105,
	302, 35, 458, 458, 462, -162, -245, -247, 248, 367,
	105, 248, 105, 98, 399, -190, -197, -247, -247, -203,
	130, 458, 462, 440, 2, 450, 450, -207, -205, -391,
	130, 458, -188, -392, -227, 185, -190, -405, -402, -403,
	290, -409, -411, 137, 290, -99, 2, 457, -225, -274,
	-99, 264, 456, 457, -178, 260, 457, -188, -173, 216,
	-473, -389, -170, -272, -302, 457, 260, -99, -243, 440,
	458, 458, 98, 98, -245, 457, 457, -247, 98, 458,
	-47, -48, 182, 80, 282, -200, 374, 182, -162, -318,
	-318, -318, 458, -243, -386, 450, -429, 278, 458, -318,
	-318, -319, 154, 457, -328, -430, 427, -318, -257, -430,
	-430, 458, -342, -382, 2, 455, 2, -309, -197, -201,
	-194, -178, 137, 169, 251, 211, 457, -319, -203, 457,
	2, -464, 107, 186, -308, -465, 85, 368, -345, 458,
	458, 251, 251, -318, -361, -167, -167, 458, 458, -318,
	388, -385, 84, -383, 2, -450, -318, 388, -228, -229,
	176, -407, 211, -194, 211, -463, 428, -223, -462, -65,
	-66, 389, -356, -245, -203, -245, 260, -473, -389, -171,
	113, -247, 80, -297, -324, -149, 457, 457, 458, -245,
	-245, 458, 457, -149, 462, 26, 457, 26, 457, -203,
	-218, 458, -243, 51, 458, 458, -319, -328, 458, -431,
	-432, -193, -341, 456, 2, -410, -194, 248, -318, -180,
	457, -318, 186, 108, 174, -227, 457, 302, -186, 66,
	457, 457, 457, 440, 154, 457, -462, 276, 457, 98,
	245, 458, 35, -66, 9, 458, -294, 458, -203, -389,
	-172, 408, 249, 458, -197, -272, -392, -392, -308, 458,
	458, -392, -48, -247, -247, -436, 296, 325, 163, -257,
	458, 462, 35, 124, 458, -412, 233, -178, 458, 108,
	174, -228, -247, -203, -451, 413, -201, -233, -232, -230,
	-235, -234, -230, -257, -383, 84, 276, -257, -203, -246,
	-346, -190, 98, -227, -99, -308, 457, -308, 457, -173,
	347, -311, 458, 458, -227, -308, 458, 458, 458, 458,
	-437, -438, 43, 401, 89, -318, -437, -437, -432, -434,
	137, -413, -416, -415, 260, 353, 155, 277, 458, 367,
	424, -464, 458, -239, -318, 458, 462, 418, 458, 462,
	418, 458, 154, 458, 457, 458, 462, -228, -463, -227,
	-245, -227, -245, -265, -149, -149, -228, -227, -149, -439,
	123, -438, 287, 150, 324, 287, 150, -439, -439, -194,
	-415, 260, -416, 260, 408, 109, -412, -232, 176, -234,
	154, 276, -247, -346, -462, -228, 458, -228, 458, -312,
	-228, 89, 161, 383, 245, 30, -414, 245, 315, 56,
	347, -414, -413, 457, 457, 458, -469, 426, -308, -469,
	-308, 324, 268, -438, 22, 251, 105, -464, -257, -257,
	-168, 56, 315, 2, -227, -227, 458, 458, -228, -228,
	-228, 388, -469, -469, 457, -257, 458, -228,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 365, 366, 368,
	369, 370, 372, 373, 375, 377, 379, 381, 382, 384,
	386, 388, 389, 390, 391, 392, 394, 396, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 456,
	0, 922, 924, 926, 928, 25, 26, 0, 0, 190,
	192, 194, 0, 219, 221, 223, 224, 226, -2, 0,
	319, 320, 322, 324, -2, -2, 0, 0, 443, 445,
	0, 0, 0, 465, 466, 0, 1012, -2, 459, 461,
	463, 528, 530, 532, 534, 536, 538, 540, 541, 543,
	545, 547, 549, 551, 553, 555, 557, 559, 561, 563,
	565, 567, 569, 571, 573, 575, 577, -2, -2, -2,
	0, -2, -2, -2, 940, 29, 31, 33, 35, 37,
	39, 41, 61, 275, 276, 278, 280, 282, 285, 286,
	288, 1054, 326, 328, 330, 332, 334, 0, -2, 1066,
	0, 0, 43, 44, 45, 46, 47, 48, 49, 50,
	68, 69, 70, 71, 72, 73, 74, 75, 54, 56,
	57, 63, 64, 66, 52, 0, 0, 1030, 1032, 1034,
	1036, -2, 0, 0, 7, 9, 11, 13, 15, 17,
	19, 21, 367, 371, 374, 376, 378, 380, 383, 385,
	387, 393, 395, 397, 817, 1662, 1676, 1677, 1678, 1681,
	1682, 1683, 1684, 1685, 1686, 2022, 2102, 2103, 1705, 1706,
	1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716,
	1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
	1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
	1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
	1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866,
	1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876,
	1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 0, 421,
	419, 1656, 422, 1856, 424, 426, 313, 314, 315, 316,
	317, 318, 0, 436, 430, 435, 437, 439, 440, 441,
	442, 416, 414, 0, 436, 1708, 434, 920, 921, 915,
	916, 1889, 950, 455, -2, -2, -2, 1991, -2, 487,
	-2, 494, 1994, 1891, 499, 0, 501, -2, 504, 923,
	925, 927, 27, 28, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, -2, -2, -2, -2, 0, 0,
	1745, 1632, 1678, 1635, 1630, 191, 193, 195, 196, 0,
	0, 0, 0, 0, 0, 220, 222, 225, 227, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 252, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 725, 0, 0,
	730, 868, 869, 890, 0, 0, 0, 0, 321, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 0, 0, 0, 0, 0, 253, 359, 360, 0,
	1055, 0, 0, 0, 0, 171, 162, 0, 0, 713,
	444, 446, 0, 157, 0, 0, 919, 0, 173, 0,
	0, 460, 462, 464, 529, 531, 533, 535, 537, 539,
	542, 544, 546, 548, 550, 552, 554, 556, 558, 560,
	562, 564, 566, 568, 570, 572, 574, 576, 578, 579,
	0, 0, 0, 0, -2, -2, 0, 0, -2, -2,
	0, 0, 0, 0, 0, 0, 0, -2, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 582, 584, 585, 586, 0, 634, 651, 0, 859,
	1056, 952, 930, 943, 952, 932, 933, 934, 935, 936,
	941, 942, 945, 0, 937, 938, 939, 30, 32, 34,
	36, 38, 40, 42, 277, 279, 281, 283, 287, 289,
	-2, 1028, 1029, 327, 329, 331, 333, 335, 447, 0,
	449, 0, 583, 1016, 0, -2, 0, 1060, 1060, 1060,
	0, 0, 1029, 1027, 0, 452, 453, 508, 509, 1290,
	0, 0, 0, 0, 0, 1530, 1374, 0, 510, -2,
	1405, 1407, 1970, 1991, 1529, 1409, 1410, 1411, 1412, 1413,
	0, 0, 1416, 0, 1418, 1419, 1420, 1421, 0, 1423,
	0, 1427, 1428, 1429, 0, 1975, 1609, 1674, -2, 1195,
	1196, 1197, 1198, 1199, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1670, 0, 1496, 1443, -2, 1695, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1754, -2, -2, -2, -2, -2, -2, -2, 1251, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 2005, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 0, 1959,
	1976, 1977, 1982, 1984, 1978, 1967, 1466, -2, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 1252, -2, 1971, 1972, 1987, 1988, 1993,
	1998, 1999, 1974, 1983, -2, -2, 1046, 1864, 1049, 817,
	1047, 1031, 1033, 0, 1035, 0, 0, 0, 1040, 1063,
	1061, 0, 1096, 1044, 1045, 1055, 1114, 1137, 0, 1119,
	0, 1137, 1163, 0, 1124, 1884, 1444, 1445, 0, 1678,
	1675, -2, 0, 0, 0, 0, 0, 0, 216, 417,
	0, 423, 425, 0, 0, 0, 0, 0, 0, 0,
	0, 949, 457, 458, 0, 482, 0, 486, 1966, -2,
	1713, 1904, -2, 490, 953, 957, 958, 959, 960, 0,
	0, 0, 0, 0, 496, 0, 0, 483, 484, 502,
	505, 0, 51, 0, 1976, 1163, 53, 0, 1646, 1700,
	1701, 1702, 1703, 1704, 2005, 2021, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 2100, 2101, 55, 0, 1976, 58, 0,
	1976, 0, -2, 62, 0, 1976, 174, 175, 1691, 1692,
	1696, 1697, 1698, 1699, 65, 0, 1652, 67, 0, 1649,
	76, 0, 1976, 0, 1629, -2, 0, 0, 705, 1626,
	1631, 706, 1636, 0, 197, 198, 199, 200, 201, 1976,
	203, 204, 0, 206, 207, 1976, 209, 210, 0, 212,
	228, 229, 0, 231, 0, 1976, 0, 0, 0, 237,
	-2, 254, 0, 251, 0, 241, 242, 244, 245, 246,
	247, 248, 0, 0, 0, 874, 293, 291, 1657, 0,
	-2, 1976, 862, 865, 1976, 867, 879, 1660, 0, -2,
	0, 1053, 1976, 967, 726, 727, 728, 729, 0, 312,
	0, 980, 0, 982, 0, 1002, 1169, 1114, 255, 256,
	257, 258, 259, 1976, 0, 0, 0, 264, 0, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 150, 1976,
	338, 357, 150, 1976, 341, 150, 1976, 344, 150, 1976,
	347, 1624, 150, 1976, 350, 351, 1976, 353, 176, 354,
	1976, 356, 0, -2, 410, 1664, -2, 362, 0, -2,
	0, 188, 0, 0, 711, 712, 0, 917, 918, 0,
	0, 467, 0, 0, 580, 581, 0, 0, 591, 592,
	593, 594, 1892, 1862, 1770, 598, 0, 601, -2, 0,
	0, 0, 605, 0, 610, 611, 612, 0, 710, 614,
	0, 0, 616, 0, 620, 0, 623, 0, 625, 0,
	627, -2, -2, -2, 638, -2, 0, 642, 0, 644,
	0, 0, 0, 0, 659, 660, 0, 665, 0, 668,
	669, 670, 0, 672, 673, 674, 675, 0, 677, 678,
	-2, -2, 682, 684, 0, 691, 0, 696, 0, 587,
	588, 150, 1167, 929, -2, 931, 0, 947, 1019, -2,
	0, 448, 0, 451, 1023, 0, 1025, 0, 1017, 1022,
	1075, 1076, 0, 0, 0, 0, 1058, 1059, 0, 0,
	0, 1014, 1015, 0, 0, 0, 0, 1535, 1536, 1537,
	1538, 1539, 1540, 1543, 1544, 1541, 1542, 1545, 1546, 0,
	0, 0, 0, 0, 1547, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1548, 1549, 1550, 0,
	0, 1552, 0, 1554, 0, 0, 0, 0, 0, 0,
	1353, 1355, 1617, 0, 0, 1551, 1295, 1296, 1297, 1332,
	1333, 0, 0, 1406, 1614, 1613, 1408, 0, 1566, 0,
	1415, 0, 1287, 1422, 1643, -2, 0, 1530, 1561, 0,
	0, 1430, 1431, 1432, 0, 0, 1566, 0, 0, 1608,
	0, 1498, 0, 1231, 0, 1232, 1233, 0, 1234, 1235,
	1248, 1261, 0, 0, 0, 0, 1265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1253, 0, 0, 0, 1589, -2, 0,
	0, 0, 0, 0, 1048, 0, 0, 1100, 1618, 1622,
	1623, 1100, 1100, 0, 0, 1567, 1160, 1160, 0, 0,
	1156, 1156, 1156, 1154, 1131, 0, 398, 400, 402, 404,
	405, 406, 408, 1137, 0, 1147, 0, 1137, 1137, 0,
	-2, 1119, 0, 0, 1147, 1164, 1165, 0, 0, 0,
	0, 0, 0, 1679, 0, 0, 0, 1666, 0, 0,
	0, 428, 438, 1055, 0, 1569, 1186, 1180, 1189, 1190,
	1191, 1192, 1238, 1239, 1240, 1241, 1242, 1200, 1201, 1202,
	1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
	1213, 1214, 1215, 1216, -2, 1249, 1251, 1272, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1244,
	0, 1219, 1219, 1219, 1236, 1237, 1260, 1271, 1263, 1271,
	1267, 1187, 1188, 1254, 1255, 1256, 1257, 0, 432, 0,
	0, 0, 0, -2, 492, 497, 498, 0, 0, 955,
	0, 961, 519, 520, 521, 963, 964, 0, 495, 522,
	523, 524, 525, 526, 527, 0, 834, 0, 836, 1638,
	0, 493, 512, 500, 0, 506, 77, 912, 116, 0,
	912, 912, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 101, 112, 89, 90, 0, 0, 0, 0, 59,
	842, 0, 845, 0, 0, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 100, 0, 95, 79, 0,
	0, 0, 102, 114, 0, 141, 143, 0, 0, 1150,
	158, 0, 704, 0, 0, 1679, 1634, 0, 0, 0,
	0, 230, 232, 0, 234, 235, 236, 0, 873, 0,
	243, 240, 284, 791, 1976, 841, 1976, 839, 1661, 0,
	0, 0, 310, 305, 0, 307, 860, 0, 1052, 0,
	0, 0, 0, 880, 0, 1976, 885, 1648, 1687, 1688,
	969, 0, 1175, 0, 983, 0, 0, 1170, 0, 1172,
	0, 261, 262, 263, 0, 336, 0, 148, 149, 0,
	339, 0, 342, 0, 345, 0, 0, 348, 0, 0,
	0, 0, 1055, 0, 0, 0, 164, 0, 0, 0,
	0, 0, 0, 188, 160, 188, 188, 1150, 469, 1150,
	471, 0, 0, 595, 596, 597, 599, 600, 602, 603,
	-2, -2, 692, 662, 0, 0, 0, 661, 613, 0,
	698, 1880, 708, 615, 1745, 618, 1745, 621, 1745, 624,
	626, 629, 654, 637, 641, 0, 0, 0, 646, 0,
	648, 0, 650, 662, 663, 666, 671, 676, 0, 0,
	0, 0, 0, 858, 0, 946, 1020, 1022, 450, 0,
	1026, 1018, 1073, 1074, 1079, 1080, 1086, 1089, 1090, 1082,
	1290, 1041, 1042, 1043, 1067, 1068, 899, 0, 2102, 1291,
	1181, 1292, 1293, 1645, 0, 1298, 1299, 1300, 1301, 1302,
	1303, 1304, 1305, 1306, 1307, -2, -2, -2, -2, -2,
	-2, -2, -2, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, -2, -2, -2, 1330, 1331, -2,
	1553, 1555, 0, 1617, 0, -2, 0, -2, -2, -2,
	-2, 1350, 0, 1352, 1357, 1359, 1361, 0, 0, 0,
	0, 1616, 1371, 1600, 1601, 0, 0, 1532, 1533, 1534,
	1356, 0, 1375, 1615, 1612, 0, 0, 1565, 1066, 1434,
	0, 0, 0, 0, 1441, 0, 1644, 1286, 1273, 1274,
	1275, 1276, 1277, 1278, 1288, 1426, 1563, 0, 1562, 0,
	0, 0, 1573, 0, 1607, 1603, 0, 1667, 1673, 1506,
	0, 0, 0, 0, 1641, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1478, 0, 1576, -2, -2, -2, -2, -2, -2,
	-2, 0, 1480, 0, 1482, 1567, 1586, 0, 0, 1376,
	0, 0, 0, 1530, 0, 1485, 1567, 1594, 0, 0,
	0, 0, 0, 1567, 0, 1599, 0, 1492, 0, 1494,
	1050, 0, 0, 1175, 0, 0, 0, 1621, 1175, 1175,
	0, 1095, 0, 0, 1157, 1158, 1159, 0, 0, 1160,
	0, 1151, 1155, 1152, 1153, 0, 0, 1137, 399, 401,
	403, 407, 409, 1147, 1111, 0, 0, 1647, 1117, 1146,
	0, 817, 1136, 1147, 1147, 0, -2, 1121, 0, 0,
	1066, -2, 189, 816, 0, 0, 0, 0, 418, 420,
	0, 0, 412, 0, 415, 0, 1176, 1179, 0, 1193,
	0, 0, -2, 0, 0, 0, 0, 0, 485, 0,
	954, 962, 0, 516, 0, 518, 0, 835, 1640, 1639,
	0, 507, 0, 0, 0, 0, 911, 120, 1976, 0,
	152, 0, 0, 785, 1653, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 91, 0, 0, 0, 0, 0, 0, 0, 843,
	844, 846, 852, 854, 0, 848, 1642, 0, 849, 0,
	851, 853, 855, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 92, 0, 0, 0, 0, 1628,
	179, 1149, 0, 1627, 1637, 0, 202, 205, 208, 211,
	0, 238, 0, 0, 733, 716, 0, 837, 840, 0,
	817, 872, 1659, 0, 292, 188, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 1976,
	971, 977, 0, 1066, 1174, 0, 1000, 985, 0, 0,
	0, 1000, 1004, 1005, 1007, 1008, 0, 0, 1171, 0,
	265, 358, 150, 150, 150, 1625, 150, 150, 177, 352,
	355, 361, 411, 1055, 188, 186, 1841, 184, 181, 183,
	0, 0, 0, 734, 736, 737, 738, 739, 0, 1688,
	0, 1799, 1688, 0, 988, 990, 0, 155, 188, 0,
	0, 304, 468, 473, 589, 0, 631, 656, 604, 606,
	607, 608, 0, 709, 707, 617, 619, 622, 640, 643,
	645, 0, 0, 0, 658, 0, 0, 0, 0, 0,
	693, 694, 695, 697, 1168, 1021, 1024, 0, 1084, 0,
	1083, 1087, 1088, 0, 1070, 897, 898, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 1372, 0, -2, 1351,
	1354, 1358, 1360, 1362, 0, 0, 0, 0, 0, 0,
	1556, 0, 1558, 1373, 1610, 1613, 1528, 0, 0, 1065,
	1066, 1066, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 1564, 0, 1571, 1572, 0, 1433, 0, 1604, 0,
	0, 0, 1442, 0, 0, 0, 1243, 1217, 0, 1271,
	1269, 1270, 1264, 1271, 1268, 0, 0, 0, 0, 0,
	1461, 0, 0, 0, 1465, 1477, 0, 1479, 1481, 0,
	0, 1483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1379, 1380, 1381, 1484, 1592,
	1593, 0, 0, 0, 0, 0, 0, 1490, 0, 1598,
	1491, 1493, 1055, 1097, 1092, 1619, 1150, 1099, 1101, 1620,
	1650, 1092, 1092, 0, 1568, 0, 0, 1141, 0, 0,
	0, 1143, 0, 1132, 0, 1134, 1147, 1116, 0, 0,
	1109, 0, 1105, 1106, 1107, 1108, 817, 1145, 1118, 1122,
	1667, 0, 1166, 0, 1126, 1129, 0, 0, 1680, 213,
	217, 218, 214, 215, 427, 0, 0, 1570, 0, 1182,
	0, 0, 0, 0, 0, 431, 0, 481, -2, 514,
	515, 517, 0, 513, 117, 912, 0, 0, 903, 0,
	122, 1976, 131, 0, 762, 0, 1651, 0, 0, 0,
	0, 914, 0, 1976, 150, 1976, 150, 133, 136, 0,
	140, 138, 0, 0, 753, 78, 912, 81, 85, 93,
	0, 0, 0, 99, 0, 0, 0, 905, 0, 847,
	850, 856, 60, 0, 907, 901, 0, 900, 142, 83,
	87, 94, 0, 909, 80, 0, 188, 0, 159, 1633,
	0, 0, 0, 0, 0, 732, 802, 0, 0, 0,
	0, 0, 0, 298, 294, 0, 303, 309, 308, 863,
	-2, 866, 875, 0, 877, 889, 0, 0, 0, 973,
	977, 0, 976, 1053, 1078, 1173, 978, 1000, 0, 0,
	0, 987, 984, 981, 1175, 0, 0, 0, 0, 0,
	260, 337, 340, 343, 346, 349, 363, 163, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 0, 1688,
	1688, 0, 1655, 0, 0, 0, 0, 156, 161, 0,
	470, 0, 0, 0, 647, 649, 662, 685, 686, 748,
	0, 748, 0, 0, 1069, 899, 0, 1294, 1335, 0,
	0, -2, 0, 0, 1339, 0, 0, 0, -2, 0,
	0, 0, 1557, 1559, 0, 1612, 1435, 0, 0, 0,
	1439, 1417, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 0,
	1424, 1425, 1531, 1574, 1602, 1606, 0, 1668, 1672, 1504,
	1505, 1509, 1658, 0, 0, 0, 1262, 1266, 1446, 0,
	0, 0, 0, 0, 0, 0, 1575, 1585, 1587, 1377,
	1378, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	1391, -2, -2, -2, 1395, 1396, 1397, -2, -2, -2,
	0, 0, 0, 1588, 1590, 1591, 1595, 1596, 0, 1487,
	1488, 1489, 1597, 0, 1094, 0, 1098, 0, 1094, 1094,
	1062, 1139, 0, 0, 1162, 0, 1114, 1133, 0, 1123,
	1112, 0, 1113, 0, 1144, 0, 1120, 1125, 0, 1128,
	0, 1435, -2, 429, 413, 0, 0, 1184, 1194, 0,
	1246, 1250, 433, 1148, 0, 0, 0, 0, 151, 760,
	784, 0, 0, 892, 899, 0, 0, 124, 0, 0,
	0, 132, 0, 129, 0, 135, 139, 0, 0, 0,
	0, 0, 96, 97, 98, 0, 103, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 153, 0, 233, 871,
	239, 742, 790, 0, 792, 0, 717, 0, 791, 841,
	0, 290, 0, 297, 0, 861, 876, 0, 0, 0,
	0, 0, 975, 977, 0, 968, 969, 1000, 1077, 979,
	998, -2, 997, 0, 1066, 1006, 1003, 1009, 1010, 0,
	185, 0, 180, 182, 0, 166, 0, 0, 735, 740,
	0, 0, 0, 0, 0, 989, 991, 0, 172, 0,
	590, 609, 657, 687, 747, 0, 0, 689, 1081, 1085,
	1071, 899, 1337, 1341, 0, 0, 0, 1343, -2, 0,
	1365, -2, -2, 1560, 1611, 1414, 1066, 1436, 1438, 1289,
	1605, 0, 1511, 1508, 0, 1495, 1218, 1456, 1457, 0,
	0, 1460, 1462, 1463, 1464, 1584, 0, 0, 0, 0,
	1486, 1051, 1500, 0, 0, 1102, 1500, 1500, 1140, 0,
	1142, 1137, 1135, 1110, 1103, 0, 1668, 1127, 0, 0,
	1177, 1183, 0, 1245, 118, 119, 121, 0, 761, 0,
	764, 0, 0, 0, 0, 771, 772, 0, 0, 0,
	0, 0, 806, 815, 0, 894, 0, 0, 0, 126,
	145, 0, 0, 913, 0, 150, 150, 0, 0, 904,
	0, 0, 0, 0, 106, 0, 0, 906, 908, 902,
	0, 0, 910, 178, 750, 0, 802, 794, 795, 796,
	0, 801, 803, 0, 0, 721, 718, 733, 716, 838,
	870, 0, 295, 0, 888, 0, 0, 0, 965, 977,
	0, 970, 971, 311, 0, 0, 0, 986, 1078, 0,
	187, 188, 0, 0, 0, 0, 0, 0, 0, 188,
	472, 474, 0, 0, 480, 746, 0, 0, 1072, 1345,
	-2, -2, 1366, 0, 1669, 1671, 1066, 0, 1497, 0,
	0, -2, 0, 0, 0, 1037, 0, 1093, 1091, 1038,
	1039, 1161, 1147, 0, 1130, 0, 1185, 123, 0, 765,
	766, 1654, 768, 0, 770, 773, 0, 775, 1690, 0,
	779, 786, 807, 0, 742, 0, 812, 813, 893, 788,
	0, 125, 127, 144, 896, 128, 134, 0, 0, 82,
	0, 0, 1739, 109, 107, 105, 84, 0, 716, 749,
	0, 793, 0, 804, 805, 719, 0, 0, 0, 296,
	299, 0, 302, 0, 889, 0, 0, 0, 972, 973,
	0, 0, 0, 1000, 1011, 165, 0, 0, 815, 0,
	0, 783, 0, 170, 0, 476, 0, 478, 0, 688,
	690, 1437, 1515, 0, 1458, 1459, -2, 0, 1403, 1499,
	1501, 0, 1115, 1104, 1178, 763, 767, 0, 0, 821,
	0, 0, 0, 810, 811, 750, 0, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 714, 0, 0, 722,
	0, 742, 0, 300, 301, 815, 0, 815, 0, 974,
	975, 0, 993, 994, 996, 1001, 0, 0, 742, 815,
	782, 0, 475, 0, 0, 0, 0, 0, 0, 1510,
	1404, 0, 0, 0, 774, 826, 0, 0, 0, 808,
	809, 806, 0, 817, 130, 0, 895, 0, 754, 0,
	0, 757, 0, 0, 110, 1739, 108, 0, 0, 0,
	798, 800, 723, 750, 721, 742, 0, 742, 0, 966,
	0, 995, 188, 188, 750, 742, 188, 477, 479, 1507,
	1527, 1516, -2, 1939, 1742, 0, 1527, 1527, 1502, 1503,
	0, 776, 822, 823, 0, 818, 819, 820, 1689, 777,
	778, 787, 814, 821, 146, 751, 0, 0, 752, 0,
	0, 113, 0, 115, 0, 797, 0, 716, 720, 750,
	0, 750, 0, 1175, 167, 168, 780, 750, 169, 1512,
	0, 0, 1518, 1519, 1520, 1521, 1522, 1513, 1514, 769,
	824, 0, 825, 0, 0, 0, 826, 755, 0, 758,
	0, 111, 0, 799, 715, 886, 815, 886, 815, 992,
	781, 0, 1524, 1525, 0, 0, 827, 0, 830, 831,
	0, 828, 806, 0, 0, 745, 881, 0, 742, 883,
	742, 1523, 1526, 1517, 829, 832, 833, 789, 0, 0,
	741, 743, 744, 887, 750, 750, 750, 0, 886, 886,
	756, 0, 882, 884, 0, 0, 750, 759,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 446, 3, 452, 447, 3,
	457, 458, 450, 448, 462, 449, 459, 451, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 465, 3,
	438, 440, 439, 442, 461, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 455, 3, 456, 453, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 463, 445, 464, 443,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 441, 57781, 444, 57782, 454, 57783, 460, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1073
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1078
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1082
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1083
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1093
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "ALTER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1106
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1107
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1108
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1109
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1110
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1111
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1112
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1165
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1191
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1202
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1217
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1221
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1225
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1236
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1248
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1267
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1299
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1303
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1307
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1313
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1317
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1323
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1332
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1343
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1347
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1353
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1361
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1371
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1375
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1385
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1396
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1403
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1415
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1422
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1430
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1435
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1439
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1444
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1450
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1458
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1469
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1479
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1489
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1498
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1509
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1515
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1523
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1527
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1541
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1546
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1557
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1567
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1578
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1583
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1588
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1593
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1603
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1628
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1637
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1649
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1659
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1666
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1669
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1685
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1694
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1699
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1706
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1714
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1715
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1719
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1729
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1737
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1741
		{
			sqlVAL.union.val = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1747
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1751
		{
			sqlVAL.union.val = nil
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1758
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1762
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1766
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1776
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 153:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1802
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1805
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1828
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1832
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1835
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1839
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1843
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1849
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1859
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1896
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1901
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1905
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1911
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1916
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1921
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1926
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1931
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1935
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1951
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1954
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1962
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1970
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1974
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1984
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1990
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1994
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1998
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2002
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2008
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2018
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2022
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2026
		{
			sqlVAL.union.val = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2032
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2045
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2046
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2047
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2048
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2058
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2066
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2081
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2090
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2104
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2107
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2126
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2134
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2136
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2140
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2143
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2147
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2151
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2155
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2170
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2176
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2181
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2193
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2194
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2196
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2197
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2198
		{
			return helpWith(sqllex, "CREATE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2201
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2202
		{
			return unimplemented(sqllex, "create cast")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2203
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2204
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2205
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2206
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2207
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2208
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2209
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2210
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2211
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2212
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2213
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2214
		{
			return unimplemented(sqllex, "create operator")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2215
		{
			return unimplemented(sqllex, "create publication")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2216
		{
			return unimplemented(sqllex, "create rule")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2217
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2218
		{
			return unimplemented(sqllex, "create server")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2224
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2225
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2228
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2229
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2232
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2233
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2236
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2237
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2238
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2239
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2240
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2241
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2242
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2243
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2244
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2245
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2246
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2247
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2248
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "drop server")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2259
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2260
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2261
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2262
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2264
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2265
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2266
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2267
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2277
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2285
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2289
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2293
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2299
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2303
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2312
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2319
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2325
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2331
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2335
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2346
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2358
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2366
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2374
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2384
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2388
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2394
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2405
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2409
		{

			sqlVAL.union.val = nil
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2423
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2433
		{
			return helpWith(sqllex, "DELETE")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2440
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2443
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2444
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2445
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2446
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2447
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2456
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2457
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2458
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2459
		{
			return helpWith(sqllex, "DROP")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2462
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2463
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2464
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2465
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2466
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2474
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2478
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2481
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2489
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2493
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2496
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2504
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2508
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2511
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2519
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2527
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2534
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2542
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2550
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2557
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2565
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2569
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2572
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2580
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2584
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2587
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2591
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2596
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2619
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2622
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2624
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2628
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2632
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2639
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2643
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2646
		{
			return helpWith(sqllex, "DELETE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2648
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2649
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2650
		{
			return helpWith(sqllex, "INSERT")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2651
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2653
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2654
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2655
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2658
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2663
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2664
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2665
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2670
		{
			return helpWith(sqllex, "DELETE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2671
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2672
		{
			return helpWith(sqllex, "INSERT")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2674
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2678
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2679
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2683
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2697
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2705
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2713
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2717
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2721
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2731
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2738
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2746
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2754
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2764
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2768
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2772
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2776
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2779
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2799
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2803
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2807
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2810
		{
			return helpWith(sqllex, "GRANT")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2830
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2834
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2841
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2846
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2850
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2860
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2878
		{
			return helpWith(sqllex, "RESET")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2879
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2887
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2891
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2894
		{
			return helpWith(sqllex, "RESET")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2902
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2905
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2916
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2919
		{
			return helpWith(sqllex, "USE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2923
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2924
		{
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2925
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2926
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2930
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2931
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2932
		{
			return helpWith(sqllex, "USE")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2963
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2966
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2984
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2992
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2996
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3000
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3006
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3020
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3024
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3028
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3032
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3043
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3056
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3072
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3076
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3081
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3101
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3103
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3106
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3110
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3129
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3136
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3141
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3146
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3151
		{
			return unimplemented(sqllex, "set from current")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3152
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3160
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3165
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3172
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3176
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3182
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3186
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3193
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3214
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3224
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3228
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3232
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3236
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3240
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3246
		{
			sqlVAL.union.val = tree.Low
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3250
		{
			sqlVAL.union.val = tree.Normal
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3254
		{
			sqlVAL.union.val = tree.High
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3265
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3269
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3273
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3282
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3295
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3296
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3297
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3298
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3299
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3300
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3302
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3303
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3304
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3305
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3306
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3307
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3308
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3309
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3310
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3311
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3313
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3315
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3316
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3318
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3321
		{
			return helpWith(sqllex, "SHOW")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3328
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3329
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3341
		{
			sqlVAL.str = "client_encoding"
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			sqlVAL.str = "timezone"
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3359
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3363
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3367
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3378
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3386
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3394
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3401
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3409
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3417
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3424
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3434
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3438
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3441
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3443
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3446
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3454
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3469
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3473
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3477
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3480
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3488
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3491
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3504
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3512
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3520
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3523
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3525
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3529
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3533
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3536
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3538
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3542
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3545
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3553
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3556
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3558
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3572
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3574
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3577
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3581
		{
			sqlVAL.union.val = true
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3583
		{
			sqlVAL.union.val = true
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3585
		{
			sqlVAL.union.val = false
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3595
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3599
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3602
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3603
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3605
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3609
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3612
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3614
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3622
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3630
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3639
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3642
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3647
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3649
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3653
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3656
		{
			sqlVAL.union.val = true
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3657
		{
			sqlVAL.union.val = false
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3665
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3668
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3670
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3673
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3691
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3704
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3707
		{
			sqlVAL.union.val = true
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3708
		{
			sqlVAL.union.val = false
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3715
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3719
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3722
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3729
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3733
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3736
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3743
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3747
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3755
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3760
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3765
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3769
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3777
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3781
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3785
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3798
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3801
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3809
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3812
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3816
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3820
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3824
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3832
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3840
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3847
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3854
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3858
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3869
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3874
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3878
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3881
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3885
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3892
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3897
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4017
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4021
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4025
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4064
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4068
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4077
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4086
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4093
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4097
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4109
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4118
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4121
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4157
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4169
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4182
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4183
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4184
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4188
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4199
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4211
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4212
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4213
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4227
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4228
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4229
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4230
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4231
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4232
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4233
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4234
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4239
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4245
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4255
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4261
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4264
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4268
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4277
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4284
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4289
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4294
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4300
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4307
		{
			sqlVAL.str = ""
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4320
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4327
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4334
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4340
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4350
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4360
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4364
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 759:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4370
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4384
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4405
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4409
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4413
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4417
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4421
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4447
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4451
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4455
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4459
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4463
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4467
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4471
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4481
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4485
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4489
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 780:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4496
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4506
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4518
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4540
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4545
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4551
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4557
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4568
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4578
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4592
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4596
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4602
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4612
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4627
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4634
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4640
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4651
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4661
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4667
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4671
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4677
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4681
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4687
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4692
		{
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4693
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4694
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4695
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4696
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4697
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4714
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4718
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4724
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4728
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4748
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4752
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4756
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4760
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4769
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4773
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4777
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4781
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4785
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4791
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4797
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4809
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4813
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4817
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4821
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4827
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4831
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4837
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4856
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4861
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4865
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4869
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4872
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4873
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4876
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4877
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4879
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4880
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4881
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4884
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4886
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4888
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4890
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4891
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4893
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4894
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4896
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4898
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4906
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4909
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4917
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4921
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4924
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4928
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4932
		{
			sqlVAL.union.val = nil
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4942
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4946
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4949
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4954
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4955
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4963
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4971
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4972
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4975
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4976
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 875:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4982
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4984
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4986
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 878:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4988
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4990
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4992
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 881:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5008
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5022
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:5037
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:5051
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5065
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5068
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5069
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5073
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5088
		{
			sqlVAL.union.val = false
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5094
		{
			sqlVAL.union.val = true
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = false
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5104
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5108
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5117
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5128
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 896:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5129
		{
			sqlVAL.str = ""
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5133
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5137
		{
			sqlVAL.union.val = tree.Descending
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5141
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 900:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5147
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5154
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5158
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5164
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5170
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5178
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5184
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5192
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5198
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5206
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5210
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5215
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5216
		{
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5219
		{
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5220
		{
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5228
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5231
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5241
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5250
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5253
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5261
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5264
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5268
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5269
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5270
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5286
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5289
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5291
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5294
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5304
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5307
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5312
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5316
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5321
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5322
		{
		}
	case 940:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5323
		{
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5331
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5338
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5341
		{
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5342
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5346
		{
			sqlVAL.str = ""
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5350
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5354
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5358
		{
			sqlVAL.str = ""
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5364
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5368
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5374
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5378
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5384
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5388
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5401
		{
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5403
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5407
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5412
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5416
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5420
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5426
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5432
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5438
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5442
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 965:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5452
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5462
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5472
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5476
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5480
		{
			sqlVAL.str = ""
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5486
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 971:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5490
		{
			sqlVAL.str = ""
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5496
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 973:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5500
		{
			sqlVAL.str = ""
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5506
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 975:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5510
		{
			sqlVAL.str = ""
		}
	case 976:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5515
		{
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5516
		{
		}
	case 978:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5528
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 979:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5535
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5542
		{
			return helpWith(sqllex, "INSERT")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5553
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5560
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5564
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5573
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5580
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5584
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5588
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5594
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5618
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 992:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5622
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5626
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5632
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5635
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5636
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5638
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5644
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5649
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5653
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5670
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5682
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5685
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5688
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5694
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5698
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5711
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5714
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5718
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5761
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5767
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5771
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5790
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5794
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5798
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5806
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5811
		{
			sqlVAL.union.val = tree.ForNone
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5812
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5813
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5814
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5815
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5820
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5855
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5856
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5857
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5879
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5892
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5906
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5918
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5922
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5931
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5940
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5955
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5962
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5974
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5978
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5982
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5986
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5996
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6004
		{
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6005
		{
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6009
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6013
		{
			sqlVAL.union.val = nil
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6018
		{
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6019
		{
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = true
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = false
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6031
		{
			sqlVAL.union.val = false
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6037
		{
			sqlVAL.union.val = true
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6043
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6048
		{
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6049
		{
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6053
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6057
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6063
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6079
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6083
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6088
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6103
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6112
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6124
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6128
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6132
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6141
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6147
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6154
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6163
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6167
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6171
		{
			sqlVAL.union.val = tree.NewNumVal(constant.MakeInt64(1), "", false)
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6177
		{
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6178
		{
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6181
		{
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6182
		{
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6199
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6203
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6209
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6213
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6232
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6235
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6237
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6249
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6252
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6254
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6260
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6264
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6270
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6274
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6279
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6284
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6290
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6295
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6307
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6326
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6334
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6365
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6379
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6389
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6397
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6406
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6410
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6414
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6425
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6449
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6455
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6459
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6465
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6471
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6477
		{
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6479
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.union.val = nil
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6483
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6488
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6492
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6498
		{
			sqlVAL.union.val = true
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6502
		{
			sqlVAL.union.val = false
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6522
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6526
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6530
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6534
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6538
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6542
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6552
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6559
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6565
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6572
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6578
		{
			sqlVAL.str = tree.AstFull
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6582
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6586
		{
			sqlVAL.str = tree.AstRight
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6590
		{
			sqlVAL.str = tree.AstInner
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6596
		{
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6597
		{
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.str = tree.AstHash
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6630
		{
			sqlVAL.str = ""
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6652
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6653
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6655
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6659
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6664
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6678
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6682
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6688
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6696
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6713
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6725
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6738
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6746
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6747
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6755
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6761
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6768
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6769
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6771
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6779
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6791
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6792
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6809
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6813
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6817
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6821
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6825
		{
			sqlVAL.union.val = types.String
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6829
		{
			sqlVAL.union.val = types.Name
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6833
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6842
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6846
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6850
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6858
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = types.INet
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6870
		{
			sqlVAL.union.val = types.Oid
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6874
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6878
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6882
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6913
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6921
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6929
		{
			sqlVAL.union.val = nil
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6936
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6940
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6944
		{
			sqlVAL.union.val = types.Int2
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6948
		{
			sqlVAL.union.val = types.Int2
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = types.Int4
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = types.Int
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = types.Int
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = types.Int
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = types.Float4
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = types.Float4
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = types.Float
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = types.Float
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6988
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6996
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7004
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = types.Bool
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7016
		{
			sqlVAL.union.val = types.Bool
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7031
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7035
		{
			sqlVAL.union.val = types.RegType
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = types.Float
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7064
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7070
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7092
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7110
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7114
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7118
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7122
		{
			sqlVAL.union.val = types.String
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = true
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7132
		{
			sqlVAL.union.val = false
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = types.Date
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7141
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7146
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7153
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7154
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7156
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7164
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7180
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7189
		{
			sqlVAL.union.val = true
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7190
		{
			sqlVAL.union.val = false
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = false
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = types.Interval
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7201
		{
			sqlVAL.union.val = tree.Year
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = tree.Month
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = tree.Day
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7227
		{
			sqlVAL.union.val = tree.Month
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7258
		{
			sqlVAL.union.val = nil
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = tree.Second
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7267
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7314
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7431
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7435
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7439
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7443
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7447
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7451
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7455
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7459
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7463
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7467
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7471
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7475
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7479
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7483
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7487
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7491
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7495
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7499
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7503
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7507
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7511
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7515
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7519
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7523
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7527
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7531
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7535
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7539
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7543
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7547
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7551
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7555
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7558
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7568
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7572
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7576
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7580
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7584
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7588
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7600
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7604
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7612
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7616
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7620
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7624
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7646
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7658
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7666
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7734
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7738
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7746
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7754
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7762
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7766
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7824
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7840
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7845
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7847
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7851
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7854
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7872
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7881
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7901
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7905
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7913
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7917
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7920
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7924
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7931
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7932
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7940
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7944
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7947
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7958
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7965
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7975
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7980
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7984
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7988
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8002
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8012
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8020
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8024
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8067
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8070
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8072
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8075
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8077
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8080
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8082
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8085
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8090
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8092
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8095
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8097
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8100
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8105
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8114
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8115
		{
			return unimplemented(sqllex, "treat")
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8117
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8121
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8125
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8129
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8133
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8136
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8141
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8146
		{
			return unimplemented(sqllex, "within group")
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8147
		{
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8151
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8155
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8176
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8182
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8190
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8194
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8198
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8225
		{
			sqlVAL.str = ""
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8271
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8284
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8312
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8316
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8320
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8324
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8331
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8348
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8352
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8357
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8370
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8381
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8393
		{
			sqlVAL.union.val = tree.Any
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8397
		{
			sqlVAL.union.val = tree.Some
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8401
		{
			sqlVAL.union.val = tree.All
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8406
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8407
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8409
		{
			sqlVAL.union.val = tree.Div
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8410
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8411
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8413
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8415
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = tree.LT
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8417
		{
			sqlVAL.union.val = tree.GT
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8418
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8419
		{
			sqlVAL.union.val = tree.LE
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = tree.GE
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8421
		{
			sqlVAL.union.val = tree.NE
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8425
		{
			sqlVAL.union.val = tree.Like
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8427
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8428
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8451
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8455
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8461
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8465
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8469
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8480
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8484
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8490
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8494
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8501
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8541
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8547
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8551
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8573
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8577
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8581
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8587
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8598
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8615
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8619
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8623
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8637
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8643
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8649
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8653
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8657
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8663
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8682
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8692
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8702
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8709
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8715
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8719
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8726
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8732
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8741
		{
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8742
		{
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8746
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8756
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8765
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8769
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8773
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8781
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8791
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8814
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8822
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8845
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8854
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8858
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8862
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8866
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8872
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8876
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8884
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8888
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8897
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8908
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8917
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8925
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9022
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9029
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9033
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9037
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9051
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9055
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9059
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9072
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9090
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9103
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9110
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9135
		{
			sqlVAL.str = ""
		}
	case 1689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9141
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9145
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
