// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9252

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 986,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	177, 825,
	194, 825,
	209, 232,
	285, 232,
	293, 681,
	320, 232,
	329, 681,
	366, 681,
	391, 232,
	414, 681,
	-2, 0,
	-1, 75,
	209, 236,
	-2, 0,
	-1, 76,
	106, 986,
	183, 986,
	400, 986,
	401, 986,
	-2, 0,
	-1, 87,
	119, 960,
	133, 960,
	191, 960,
	220, 960,
	251, 960,
	261, 960,
	396, 960,
	-2, 947,
	-1, 116,
	124, 601,
	200, 593,
	208, 601,
	287, 587,
	338, 587,
	384, 601,
	-2, 0,
	-1, 117,
	4, 988,
	21, 988,
	22, 988,
	23, 988,
	24, 988,
	25, 988,
	27, 988,
	32, 988,
	37, 988,
	38, 988,
	39, 988,
	40, 988,
	41, 988,
	42, 988,
	43, 988,
	44, 988,
	45, 988,
	46, 988,
	47, 988,
	49, 988,
	50, 988,
	51, 988,
	52, 988,
	53, 988,
	54, 988,
	57, 988,
	58, 988,
	59, 988,
	60, 988,
	62, 988,
	63, 988,
	67, 988,
	68, 988,
	69, 988,
	70, 988,
	71, 988,
	73, 988,
	74, 988,
	75, 988,
	76, 988,
	78, 988,
	80, 988,
	81, 988,
	82, 988,
	85, 988,
	86, 988,
	94, 988,
	95, 988,
	96, 988,
	97, 988,
	98, 988,
	99, 988,
	100, 988,
	101, 988,
	103, 988,
	105, 988,
	106, 988,
	108, 988,
	111, 988,
	112, 988,
	113, 988,
	115, 988,
	117, 988,
	118, 988,
	120, 988,
	121, 988,
	122, 988,
	123, 988,
	124, 988,
	125, 988,
	126, 988,
	127, 988,
	128, 988,
	129, 988,
	130, 988,
	132, 988,
	138, 988,
	139, 988,
	140, 988,
	141, 988,
	142, 988,
	143, 988,
	145, 988,
	147, 988,
	151, 988,
	152, 988,
	154, 988,
	155, 988,
	157, 988,
	158, 988,
	160, 988,
	161, 988,
	162, 988,
	163, 988,
	164, 988,
	165, 988,
	166, 988,
	168, 988,
	169, 988,
	171, 988,
	172, 988,
	173, 988,
	177, 988,
	178, 988,
	179, 988,
	180, 988,
	183, 988,
	184, 988,
	185, 988,
	186, 988,
	187, 988,
	188, 988,
	189, 988,
	190, 988,
	192, 988,
	194, 988,
	196, 988,
	198, 988,
	199, 988,
	200, 988,
	202, 988,
	203, 988,
	206, 988,
	207, 988,
	208, 988,
	209, 988,
	211, 988,
	212, 988,
	214, 988,
	215, 988,
	217, 988,
	218, 988,
	221, 988,
	222, 988,
	225, 988,
	226, 988,
	228, 988,
	229, 988,
	230, 988,
	231, 988,
	232, 988,
	233, 988,
	234, 988,
	235, 988,
	236, 988,
	237, 988,
	239, 988,
	240, 988,
	241, 988,
	242, 988,
	244, 988,
	247, 988,
	248, 988,
	249, 988,
	250, 988,
	252, 988,
	253, 988,
	254, 988,
	256, 988,
	257, 988,
	258, 988,
	259, 988,
	262, 988,
	263, 988,
	265, 988,
	267, 988,
	268, 988,
	269, 988,
	270, 988,
	271, 988,
	272, 988,
	273, 988,
	274, 988,
	275, 988,
	277, 988,
	278, 988,
	279, 988,
	280, 988,
	281, 988,
	282, 988,
	284, 988,
	286, 988,
	287, 988,
	288, 988,
	289, 988,
	290, 988,
	291, 988,
	292, 988,
	293, 988,
	294, 988,
	296, 988,
	297, 988,
	298, 988,
	299, 988,
	300, 988,
	302, 988,
	303, 988,
	304, 988,
	305, 988,
	306, 988,
	307, 988,
	308, 988,
	309, 988,
	311, 988,
	313, 988,
	314, 988,
	315, 988,
	316, 988,
	317, 988,
	318, 988,
	320, 988,
	321, 988,
	322, 988,
	323, 988,
	324, 988,
	325, 988,
	326, 988,
	327, 988,
	329, 988,
	330, 988,
	331, 988,
	332, 988,
	333, 988,
	334, 988,
	335, 988,
	336, 988,
	337, 988,
	338, 988,
	340, 988,
	341, 988,
	342, 988,
	343, 988,
	345, 988,
	346, 988,
	347, 988,
	348, 988,
	350, 988,
	351, 988,
	352, 988,
	353, 988,
	354, 988,
	355, 988,
	356, 988,
	357, 988,
	358, 988,
	359, 988,
	360, 988,
	361, 988,
	363, 988,
	364, 988,
	365, 988,
	367, 988,
	368, 988,
	369, 988,
	370, 988,
	371, 988,
	372, 988,
	373, 988,
	374, 988,
	375, 988,
	377, 988,
	378, 988,
	379, 988,
	380, 988,
	382, 988,
	384, 988,
	385, 988,
	386, 988,
	387, 988,
	388, 988,
	390, 988,
	391, 988,
	392, 988,
	394, 988,
	395, 988,
	398, 988,
	399, 988,
	400, 988,
	401, 988,
	402, 988,
	404, 988,
	406, 988,
	407, 988,
	408, 988,
	409, 988,
	410, 988,
	411, 988,
	412, 988,
	414, 988,
	415, 988,
	416, 988,
	421, 988,
	422, 988,
	423, 988,
	424, 988,
	425, 988,
	426, 988,
	-2, 0,
	-1, 118,
	1, 878,
	198, 878,
	284, 878,
	291, 878,
	429, 878,
	452, 878,
	-2, 0,
	-1, 120,
	1, 878,
	452, 878,
	-2, 0,
	-1, 121,
	1, 878,
	452, 878,
	-2, 0,
	-1, 122,
	1, 882,
	452, 882,
	-2, 0,
	-1, 146,
	119, 959,
	133, 959,
	191, 959,
	220, 959,
	251, 959,
	261, 959,
	396, 959,
	-2, 956,
	-1, 176,
	4, 995,
	5, 995,
	6, 995,
	7, 995,
	8, 995,
	9, 995,
	10, 995,
	21, 995,
	22, 995,
	23, 995,
	24, 995,
	25, 995,
	27, 995,
	32, 995,
	33, 995,
	37, 995,
	38, 995,
	39, 995,
	40, 995,
	41, 995,
	42, 995,
	43, 995,
	44, 995,
	45, 995,
	46, 995,
	47, 995,
	49, 995,
	50, 995,
	51, 995,
	52, 995,
	53, 995,
	54, 995,
	55, 995,
	56, 995,
	57, 995,
	58, 995,
	59, 995,
	60, 995,
	62, 995,
	63, 995,
	65, 995,
	67, 995,
	68, 995,
	69, 995,
	70, 995,
	71, 995,
	73, 995,
	74, 995,
	75, 995,
	76, 995,
	78, 995,
	80, 995,
	81, 995,
	82, 995,
	84, 995,
	85, 995,
	86, 995,
	87, 995,
	88, 995,
	89, 995,
	90, 995,
	91, 995,
	92, 995,
	93, 995,
	94, 995,
	95, 995,
	96, 995,
	97, 995,
	98, 995,
	99, 995,
	100, 995,
	101, 995,
	102, 995,
	103, 995,
	105, 995,
	106, 995,
	108, 995,
	111, 995,
	112, 995,
	113, 995,
	115, 995,
	117, 995,
	118, 995,
	120, 995,
	121, 995,
	122, 995,
	123, 995,
	124, 995,
	125, 995,
	126, 995,
	127, 995,
	128, 995,
	129, 995,
	130, 995,
	131, 995,
	132, 995,
	138, 995,
	139, 995,
	140, 995,
	141, 995,
	142, 995,
	143, 995,
	145, 995,
	147, 995,
	150, 995,
	151, 995,
	152, 995,
	154, 995,
	155, 995,
	157, 995,
	158, 995,
	160, 995,
	161, 995,
	162, 995,
	163, 995,
	164, 995,
	165, 995,
	166, 995,
	167, 995,
	168, 995,
	169, 995,
	171, 995,
	172, 995,
	173, 995,
	177, 995,
	178, 995,
	179, 995,
	180, 995,
	182, 995,
	183, 995,
	184, 995,
	185, 995,
	186, 995,
	187, 995,
	188, 995,
	189, 995,
	190, 995,
	192, 995,
	194, 995,
	195, 995,
	196, 995,
	197, 995,
	198, 995,
	199, 995,
	200, 995,
	201, 995,
	202, 995,
	203, 995,
	206, 995,
	207, 995,
	208, 995,
	209, 995,
	211, 995,
	212, 995,
	214, 995,
	215, 995,
	216, 995,
	217, 995,
	218, 995,
	219, 995,
	221, 995,
	222, 995,
	225, 995,
	226, 995,
	228, 995,
	229, 995,
	230, 995,
	231, 995,
	232, 995,
	233, 995,
	234, 995,
	235, 995,
	236, 995,
	237, 995,
	238, 995,
	239, 995,
	240, 995,
	241, 995,
	242, 995,
	243, 995,
	244, 995,
	245, 995,
	246, 995,
	247, 995,
	248, 995,
	249, 995,
	250, 995,
	252, 995,
	253, 995,
	254, 995,
	257, 995,
	258, 995,
	259, 995,
	262, 995,
	263, 995,
	264, 995,
	265, 995,
	266, 995,
	267, 995,
	268, 995,
	269, 995,
	270, 995,
	271, 995,
	272, 995,
	273, 995,
	274, 995,
	275, 995,
	277, 995,
	278, 995,
	279, 995,
	280, 995,
	281, 995,
	282, 995,
	284, 995,
	286, 995,
	287, 995,
	288, 995,
	289, 995,
	290, 995,
	291, 995,
	292, 995,
	293, 995,
	294, 995,
	296, 995,
	297, 995,
	298, 995,
	299, 995,
	300, 995,
	302, 995,
	303, 995,
	304, 995,
	305, 995,
	306, 995,
	307, 995,
	308, 995,
	309, 995,
	311, 995,
	312, 995,
	313, 995,
	314, 995,
	315, 995,
	316, 995,
	317, 995,
	318, 995,
	320, 995,
	321, 995,
	322, 995,
	323, 995,
	324, 995,
	325, 995,
	326, 995,
	327, 995,
	329, 995,
	330, 995,
	331, 995,
	332, 995,
	333, 995,
	334, 995,
	335, 995,
	336, 995,
	337, 995,
	338, 995,
	339, 995,
	340, 995,
	341, 995,
	342, 995,
	343, 995,
	344, 995,
	345, 995,
	346, 995,
	347, 995,
	348, 995,
	350, 995,
	351, 995,
	352, 995,
	353, 995,
	354, 995,
	355, 995,
	356, 995,
	357, 995,
	358, 995,
	359, 995,
	360, 995,
	361, 995,
	363, 995,
	364, 995,
	365, 995,
	367, 995,
	368, 995,
	369, 995,
	370, 995,
	371, 995,
	372, 995,
	373, 995,
	374, 995,
	375, 995,
	377, 995,
	378, 995,
	379, 995,
	380, 995,
	382, 995,
	384, 995,
	385, 995,
	386, 995,
	387, 995,
	388, 995,
	389, 995,
	390, 995,
	391, 995,
	392, 995,
	394, 995,
	395, 995,
	397, 995,
	398, 995,
	399, 995,
	400, 995,
	401, 995,
	402, 995,
	403, 995,
	404, 995,
	406, 995,
	407, 995,
	408, 995,
	409, 995,
	410, 995,
	411, 995,
	412, 995,
	414, 995,
	415, 995,
	416, 995,
	421, 995,
	422, 995,
	423, 995,
	424, 995,
	425, 995,
	426, 995,
	427, 995,
	435, 995,
	440, 995,
	441, 995,
	442, 995,
	449, 995,
	454, 995,
	-2, 0,
	-1, 543,
	149, 1663,
	381, 1663,
	432, 1663,
	451, 1663,
	-2, 0,
	-1, 544,
	149, 1740,
	381, 1740,
	432, 1740,
	451, 1740,
	-2, 0,
	-1, 545,
	149, 1653,
	381, 1653,
	432, 1653,
	451, 1653,
	-2, 0,
	-1, 547,
	149, 1826,
	381, 1826,
	432, 1826,
	451, 1826,
	-2, 0,
	-1, 549,
	149, 1854,
	381, 1854,
	432, 1854,
	451, 1854,
	-2, 0,
	-1, 556,
	149, 1750,
	381, 1750,
	432, 1750,
	451, 1750,
	-2, 469,
	-1, 573,
	451, 1612,
	453, 1612,
	-2, 650,
	-1, 574,
	451, 1614,
	453, 1614,
	-2, 651,
	-1, 575,
	451, 1613,
	453, 1613,
	-2, 652,
	-1, 576,
	453, 1559,
	-2, 653,
	-1, 719,
	287, 588,
	338, 588,
	-2, 0,
	-1, 720,
	287, 587,
	338, 587,
	-2, 547,
	-1, 722,
	1, 569,
	448, 569,
	450, 569,
	452, 569,
	-2, 0,
	-1, 723,
	1, 649,
	146, 649,
	448, 649,
	450, 649,
	452, 649,
	-2, 0,
	-1, 732,
	1, 611,
	448, 611,
	450, 611,
	452, 611,
	-2, 0,
	-1, 733,
	1, 613,
	448, 613,
	450, 613,
	452, 613,
	-2, 0,
	-1, 734,
	1, 616,
	448, 616,
	450, 616,
	452, 616,
	-2, 0,
	-1, 738,
	1, 630,
	448, 630,
	450, 630,
	452, 630,
	-2, 0,
	-1, 739,
	1, 632,
	448, 632,
	450, 632,
	452, 632,
	-2, 0,
	-1, 784,
	133, 999,
	220, 999,
	251, 999,
	-2, 956,
	-1, 799,
	133, 998,
	220, 998,
	251, 998,
	-2, 956,
	-1, 823,
	451, 1611,
	-2, 477,
	-1, 852,
	449, 1603,
	-2, 1594,
	-1, 858,
	5, 1133,
	-2, 1644,
	-1, 859,
	5, 1134,
	-2, 1648,
	-1, 860,
	5, 1135,
	-2, 1647,
	-1, 861,
	5, 1136,
	-2, 1852,
	-1, 862,
	5, 1137,
	-2, 1752,
	-1, 863,
	5, 1138,
	-2, 1818,
	-1, 864,
	5, 1139,
	-2, 1820,
	-1, 865,
	5, 1140,
	-2, 1831,
	-1, 866,
	5, 1141,
	-2, 1821,
	-1, 867,
	5, 1142,
	-2, 1822,
	-1, 868,
	5, 1143,
	-2, 1643,
	-1, 869,
	5, 1144,
	-2, 1866,
	-1, 870,
	5, 1145,
	-2, 1715,
	-1, 871,
	5, 1146,
	-2, 1759,
	-1, 872,
	5, 1147,
	-2, 1761,
	-1, 873,
	5, 1148,
	-2, 1719,
	-1, 874,
	5, 1149,
	449, 1621,
	-2, 1612,
	-1, 875,
	5, 1205,
	449, 1205,
	-2, 1901,
	-1, 880,
	449, 1622,
	-2, 1613,
	-1, 882,
	5, 1153,
	-2, 1899,
	-1, 883,
	5, 1154,
	-2, 1900,
	-1, 884,
	5, 1155,
	-2, 1718,
	-1, 885,
	5, 1156,
	-2, 1912,
	-1, 886,
	5, 1157,
	-2, 1720,
	-1, 887,
	5, 1158,
	-2, 1721,
	-1, 888,
	5, 1159,
	-2, 1722,
	-1, 889,
	5, 1160,
	-2, 1881,
	-1, 890,
	5, 1161,
	-2, 1910,
	-1, 891,
	5, 1162,
	-2, 1698,
	-1, 892,
	5, 1163,
	-2, 1699,
	-1, 893,
	5, 1177,
	-2, 1893,
	-1, 895,
	5, 1152,
	-2, 1889,
	-1, 896,
	5, 1152,
	-2, 1888,
	-1, 897,
	5, 1152,
	-2, 1905,
	-1, 898,
	5, 1169,
	-2, 1883,
	-1, 899,
	5, 1170,
	-2, 1645,
	-1, 900,
	5, 1180,
	-2, 1882,
	-1, 901,
	5, 1182,
	-2, 1921,
	-1, 903,
	5, 1193,
	-2, 1673,
	-1, 904,
	5, 1204,
	-2, 1914,
	-1, 905,
	5, 1196,
	-2, 1915,
	-1, 906,
	5, 1204,
	-2, 1916,
	-1, 907,
	5, 1200,
	-2, 1917,
	-1, 908,
	5, 1120,
	-2, 1728,
	-1, 909,
	5, 1121,
	-2, 1729,
	-1, 910,
	451, 1609,
	-2, 1593,
	-1, 911,
	449, 1941,
	-2, 1610,
	-1, 931,
	5, 1188,
	-2, 1841,
	-1, 948,
	5, 1187,
	-2, 1922,
	-1, 958,
	5, 1189,
	415, 1189,
	-2, 1884,
	-1, 959,
	5, 1190,
	415, 1190,
	-2, 1885,
	-1, 995,
	449, 1621,
	-2, 1612,
	-1, 1024,
	149, 1854,
	381, 1854,
	432, 1854,
	451, 1854,
	-2, 0,
	-1, 1025,
	1, 457,
	452, 457,
	-2, 890,
	-1, 1145,
	302, 1590,
	442, 1590,
	-2, 1589,
	-1, 1168,
	454, 1590,
	-2, 1591,
	-1, 1203,
	293, 681,
	414, 681,
	-2, 231,
	-1, 1223,
	273, 984,
	-2, 798,
	-1, 1232,
	255, 1616,
	-2, 0,
	-1, 1296,
	1, 346,
	448, 346,
	450, 346,
	452, 346,
	-2, 958,
	-1, 1299,
	4, 1920,
	11, 1920,
	12, 1920,
	14, 1920,
	15, 1920,
	16, 1920,
	17, 1920,
	18, 1920,
	19, 1920,
	21, 1920,
	22, 1920,
	23, 1920,
	24, 1920,
	25, 1920,
	27, 1920,
	30, 1920,
	32, 1920,
	34, 1920,
	37, 1920,
	38, 1920,
	39, 1920,
	40, 1920,
	41, 1920,
	42, 1920,
	43, 1920,
	44, 1920,
	45, 1920,
	46, 1920,
	47, 1920,
	49, 1920,
	50, 1920,
	51, 1920,
	52, 1920,
	53, 1920,
	54, 1920,
	57, 1920,
	58, 1920,
	59, 1920,
	60, 1920,
	62, 1920,
	63, 1920,
	64, 1920,
	67, 1920,
	68, 1920,
	69, 1920,
	70, 1920,
	71, 1920,
	72, 1920,
	73, 1920,
	74, 1920,
	75, 1920,
	76, 1920,
	78, 1920,
	79, 1920,
	80, 1920,
	81, 1920,
	82, 1920,
	84, 1920,
	85, 1920,
	86, 1920,
	94, 1920,
	95, 1920,
	96, 1920,
	97, 1920,
	98, 1920,
	99, 1920,
	100, 1920,
	101, 1920,
	103, 1920,
	105, 1920,
	106, 1920,
	108, 1920,
	111, 1920,
	112, 1920,
	113, 1920,
	115, 1920,
	117, 1920,
	118, 1920,
	120, 1920,
	121, 1920,
	122, 1920,
	123, 1920,
	124, 1920,
	125, 1920,
	126, 1920,
	127, 1920,
	128, 1920,
	129, 1920,
	130, 1920,
	134, 1920,
	135, 1920,
	136, 1920,
	137, 1920,
	138, 1920,
	139, 1920,
	140, 1920,
	141, 1920,
	142, 1920,
	143, 1920,
	144, 1920,
	145, 1920,
	147, 1920,
	150, 1920,
	151, 1920,
	152, 1920,
	154, 1920,
	155, 1920,
	157, 1920,
	158, 1920,
	160, 1920,
	161, 1920,
	162, 1920,
	163, 1920,
	164, 1920,
	165, 1920,
	166, 1920,
	167, 1920,
	168, 1920,
	169, 1920,
	170, 1920,
	171, 1920,
	172, 1920,
	173, 1920,
	174, 1920,
	175, 1920,
	176, 1920,
	178, 1920,
	179, 1920,
	180, 1920,
	182, 1920,
	183, 1920,
	184, 1920,
	185, 1920,
	186, 1920,
	187, 1920,
	188, 1920,
	189, 1920,
	190, 1920,
	192, 1920,
	194, 1920,
	195, 1920,
	196, 1920,
	197, 1920,
	198, 1920,
	199, 1920,
	200, 1920,
	201, 1920,
	202, 1920,
	203, 1920,
	204, 1920,
	205, 1920,
	206, 1920,
	207, 1920,
	208, 1920,
	209, 1920,
	211, 1920,
	212, 1920,
	214, 1920,
	215, 1920,
	216, 1920,
	217, 1920,
	218, 1920,
	219, 1920,
	221, 1920,
	222, 1920,
	225, 1920,
	226, 1920,
	227, 1920,
	228, 1920,
	229, 1920,
	230, 1920,
	231, 1920,
	232, 1920,
	233, 1920,
	234, 1920,
	235, 1920,
	236, 1920,
	237, 1920,
	238, 1920,
	239, 1920,
	240, 1920,
	241, 1920,
	242, 1920,
	245, 1920,
	247, 1920,
	248, 1920,
	249, 1920,
	250, 1920,
	252, 1920,
	253, 1920,
	254, 1920,
	257, 1920,
	258, 1920,
	259, 1920,
	260, 1920,
	262, 1920,
	263, 1920,
	265, 1920,
	267, 1920,
	268, 1920,
	269, 1920,
	270, 1920,
	271, 1920,
	272, 1920,
	273, 1920,
	274, 1920,
	275, 1920,
	277, 1920,
	278, 1920,
	279, 1920,
	280, 1920,
	281, 1920,
	282, 1920,
	284, 1920,
	286, 1920,
	287, 1920,
	288, 1920,
	289, 1920,
	290, 1920,
	291, 1920,
	292, 1920,
	293, 1920,
	294, 1920,
	296, 1920,
	297, 1920,
	298, 1920,
	299, 1920,
	300, 1920,
	301, 1920,
	302, 1920,
	303, 1920,
	304, 1920,
	305, 1920,
	306, 1920,
	307, 1920,
	308, 1920,
	309, 1920,
	311, 1920,
	312, 1920,
	313, 1920,
	314, 1920,
	315, 1920,
	316, 1920,
	317, 1920,
	318, 1920,
	319, 1920,
	320, 1920,
	321, 1920,
	322, 1920,
	323, 1920,
	324, 1920,
	325, 1920,
	326, 1920,
	327, 1920,
	329, 1920,
	330, 1920,
	331, 1920,
	332, 1920,
	333, 1920,
	334, 1920,
	335, 1920,
	336, 1920,
	337, 1920,
	338, 1920,
	340, 1920,
	341, 1920,
	342, 1920,
	343, 1920,
	344, 1920,
	345, 1920,
	346, 1920,
	347, 1920,
	348, 1920,
	350, 1920,
	351, 1920,
	352, 1920,
	353, 1920,
	354, 1920,
	355, 1920,
	356, 1920,
	357, 1920,
	358, 1920,
	359, 1920,
	360, 1920,
	361, 1920,
	363, 1920,
	364, 1920,
	365, 1920,
	367, 1920,
	368, 1920,
	369, 1920,
	370, 1920,
	371, 1920,
	372, 1920,
	373, 1920,
	374, 1920,
	375, 1920,
	377, 1920,
	378, 1920,
	379, 1920,
	380, 1920,
	382, 1920,
	384, 1920,
	385, 1920,
	386, 1920,
	387, 1920,
	388, 1920,
	390, 1920,
	391, 1920,
	392, 1920,
	394, 1920,
	395, 1920,
	398, 1920,
	399, 1920,
	400, 1920,
	401, 1920,
	402, 1920,
	404, 1920,
	406, 1920,
	407, 1920,
	408, 1920,
	409, 1920,
	410, 1920,
	411, 1920,
	412, 1920,
	414, 1920,
	415, 1920,
	416, 1920,
	421, 1920,
	422, 1920,
	423, 1920,
	424, 1920,
	425, 1920,
	426, 1920,
	427, 1920,
	428, 1920,
	430, 1920,
	431, 1920,
	432, 1920,
	433, 1920,
	434, 1920,
	435, 1920,
	437, 1920,
	438, 1920,
	439, 1920,
	440, 1920,
	441, 1920,
	442, 1920,
	443, 1920,
	444, 1920,
	445, 1920,
	447, 1920,
	450, 1920,
	451, 1920,
	453, 1920,
	454, 1920,
	-2, 0,
	-1, 1302,
	149, 1826,
	381, 1826,
	432, 1826,
	451, 1826,
	-2, 0,
	-1, 1328,
	287, 588,
	338, 588,
	-2, 0,
	-1, 1347,
	1, 583,
	448, 583,
	450, 583,
	452, 583,
	-2, 0,
	-1, 1348,
	1, 602,
	448, 602,
	450, 602,
	452, 602,
	-2, 0,
	-1, 1349,
	1, 590,
	448, 590,
	450, 590,
	452, 590,
	-2, 0,
	-1, 1371,
	1, 1873,
	448, 1873,
	450, 1873,
	451, 1873,
	452, 1873,
	-2, 628,
	-1, 1372,
	1, 1824,
	448, 1824,
	450, 1824,
	451, 1824,
	452, 1824,
	-2, 629,
	-1, 1385,
	1, 885,
	452, 885,
	-2, 890,
	-1, 1390,
	133, 998,
	220, 998,
	251, 998,
	-2, 956,
	-1, 1483,
	119, 960,
	133, 960,
	191, 960,
	220, 960,
	251, 960,
	261, 960,
	396, 960,
	-2, 1361,
	-1, 1536,
	450, 1494,
	-2, 0,
	-1, 1571,
	119, 960,
	133, 960,
	191, 960,
	220, 960,
	251, 960,
	261, 960,
	396, 960,
	-2, 1070,
	-1, 1626,
	449, 1192,
	-2, 1180,
	-1, 1665,
	1, 459,
	452, 459,
	-2, 890,
	-1, 1850,
	1, 585,
	448, 585,
	450, 585,
	452, 585,
	-2, 0,
	-1, 1851,
	1, 604,
	448, 604,
	450, 604,
	452, 604,
	-2, 0,
	-1, 1924,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1241,
	-1, 1925,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1242,
	-1, 1926,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1243,
	-1, 1927,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1244,
	-1, 1928,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1245,
	-1, 1929,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1246,
	-1, 1930,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1247,
	-1, 1931,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1248,
	-1, 1943,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1260,
	-1, 1944,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1261,
	-1, 1945,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	204, 0,
	205, 0,
	430, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1262,
	-1, 1948,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1267,
	-1, 1954,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1271,
	-1, 1956,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1279,
	-1, 1957,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1280,
	-1, 1958,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1281,
	-1, 1959,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1282,
	-1, 2053,
	5, 1149,
	149, 1505,
	449, 1621,
	-2, 1612,
	-1, 2054,
	149, 1506,
	-2, 1877,
	-1, 2055,
	149, 1507,
	-2, 1749,
	-1, 2056,
	149, 1508,
	-2, 1674,
	-1, 2057,
	149, 1509,
	-2, 1709,
	-1, 2058,
	149, 1510,
	-2, 1747,
	-1, 2059,
	149, 1511,
	-2, 1817,
	-1, 2130,
	1, 1071,
	84, 1071,
	119, 1071,
	133, 1071,
	146, 1071,
	150, 1071,
	156, 1071,
	159, 1071,
	182, 1071,
	191, 1071,
	201, 1071,
	216, 1071,
	220, 1071,
	238, 1071,
	251, 1071,
	255, 1071,
	261, 1071,
	310, 1071,
	312, 1071,
	396, 1071,
	405, 1071,
	418, 1071,
	419, 1071,
	420, 1071,
	429, 1071,
	448, 1071,
	450, 1071,
	452, 1071,
	453, 1071,
	-2, 1070,
	-1, 2135,
	449, 1595,
	-2, 1607,
	-1, 2157,
	449, 1191,
	-2, 1181,
	-1, 2373,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1269,
	-1, 2374,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1273,
	-1, 2380,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1275,
	-1, 2560,
	198, 890,
	284, 890,
	291, 890,
	429, 890,
	-2, 456,
	-1, 2633,
	450, 1564,
	453, 1564,
	-2, 1581,
	-1, 2647,
	273, 984,
	-2, 798,
	-1, 2724,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1277,
	-1, 2731,
	195, 0,
	197, 0,
	245, 0,
	-2, 1296,
	-1, 2794,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1325,
	-1, 2795,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1326,
	-1, 2796,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1327,
	-1, 2800,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1331,
	-1, 2801,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1332,
	-1, 2802,
	14, 0,
	15, 0,
	16, 0,
	430, 0,
	431, 0,
	432, 0,
	-2, 1333,
	-1, 2845,
	449, 1596,
	-2, 1608,
	-1, 2928,
	451, 2023,
	-2, 933,
	-1, 2971,
	195, 0,
	197, 0,
	245, 0,
	-2, 1297,
	-1, 2974,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1300,
	-1, 2975,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1302,
	-1, 3120,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1301,
	-1, 3121,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	167, 0,
	170, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1303,
	-1, 3131,
	195, 0,
	-2, 1334,
	-1, 3226,
	195, 0,
	-2, 1335,
	-1, 3336,
	41, 0,
	167, 0,
	219, 0,
	344, 0,
	427, 0,
	435, 0,
	-2, 1880,
}

const sqlPrivate = 57344

const sqlLast = 69976

var sqlAct = [...]int{

	880, 3073, 3161, 3345, 3335, 3408, 3184, 3418, 2283, 2957,
	3164, 3309, 3346, 2084, 3293, 3306, 3347, 3150, 2634, 3187,
	2866, 2292, 1831, 2762, 3334, 3230, 2284, 3088, 809, 3111,
	2577, 2919, 996, 2914, 1911, 2121, 1288, 1031, 1596, 208,
	1149, 208, 208, 2664, 3192, 208, 208, 208, 208, 208,
	1398, 2924, 208, 2656, 1583, 3034, 1971, 2658, 2631, 554,
	575, 2867, 3135, 2669, 2366, 2401, 1050, 1481, 2324, 2280,
	2257, 800, 1566, 988, 2509, 2260, 2535, 2522, 208, 3006,
	1564, 2399, 575, 1142, 2122, 1354, 671, 2482, 2323, 2118,
	2956, 1789, 1792, 2498, 2315, 2186, 1284, 2293, 837, 1545,
	1782, 1781, 2188, 2241, 4, 2317, 2817, 1709, 2123, 1509,
	1718, 2481, 1597, 1904, 3231, 2002, 1908, 808, 139, 1161,
	1984, 2362, 852, 1158, 1491, 1742, 1736, 1697, 876, 2668,
	2258, 1038, 1385, 1695, 2102, 200, 2014, 2540, 32, 1968,
	3185, 1546, 2219, 2632, 1778, 1151, 1297, 797, 2022, 1271,
	1281, 2286, 1217, 2178, 980, 576, 2327, 2081, 202, 1996,
	86, 522, 577, 1504, 983, 2110, 1555, 962, 2092, 2125,
	1027, 208, 208, 2218, 2049, 1985, 201, 146, 1472, 1399,
	1397, 666, 538, 147, 571, 1777, 1295, 1798, 1247, 616,
	647, 548, 1171, 836, 139, 525, 1708, 985, 960, 714,
	1384, 729, 1229, 1810, 2834, 2397, 2285, 2835, 533, 1574,
	506, 1812, 2236, 799, 1832, 530, 1812, 2205, 580, 1403,
	1812, 2454, 2455, 1035, 2472, 2473, 2474, 3446, 1565, 3437,
	2101, 2289, 2101, 1999, 58, 3436, 583, 1035, 2101, 3417,
	580, 2675, 1749, 804, 2719, 3404, 59, 1824, 3048, 3402,
	3367, 3365, 3048, 2101, 2101, 2101, 3362, 2676, 583, 3363,
	63, 2820, 1192, 804, 2454, 2455, 680, 3359, 3356, 3332,
	3360, 1749, 1749, 3331, 3328, 3327, 1749, 1824, 1824, 3289,
	2558, 3288, 2469, 176, 2150, 3279, 3278, 2416, 3048, 3048,
	69, 2094, 2417, 3272, 846, 87, 1749, 2000, 1745, 3266,
	3264, 994, 3048, 3048, 3228, 3213, 1009, 2150, 1749, 805,
	1014, 3210, 3178, 879, 3048, 1749, 3177, 785, 3214, 1749,
	75, 178, 3170, 784, 3169, 1749, 176, 3048, 1824, 85,
	2820, 176, 2093, 76, 1411, 1412, 3141, 966, 967, 1749,
	963, 963, 3065, 3122, 3102, 792, 2150, 2688, 3070, 3064,
	1749, 2101, 2101, 1186, 2460, 3047, 2973, 2696, 3048, 2150,
	1414, 902, 2233, 2938, 178, 177, 2931, 2001, 1998, 178,
	964, 87, 2177, 1668, 2930, 170, 77, 2931, 1010, 2840,
	2476, 1180, 2841, 171, 2688, 667, 807, 1413, 977, 2830,
	2823, 2755, 2831, 2101, 1749, 2695, 2495, 2460, 2696, 2101,
	2493, 2267, 2365, 2101, 148, 2475, 2492, 2146, 177, 2101,
	58, 2446, 669, 177, 2101, 1748, 2429, 2418, 170, 2430,
	2101, 2175, 59, 170, 1191, 2313, 171, 2163, 1828, 2149,
	2101, 171, 2150, 1541, 786, 2101, 63, 2470, 2143, 2137,
	1749, 2101, 1749, 806, 1170, 2100, 1827, 148, 2101, 1828,
	3023, 1356, 148, 2677, 3217, 2400, 968, 176, 965, 1411,
	1412, 2003, 791, 790, 2148, 1813, 69, 1419, 1411, 1412,
	1813, 1688, 2678, 981, 1813, 789, 788, 787, 783, 782,
	2470, 78, 2347, 3352, 781, 1414, 780, 779, 778, 777,
	776, 775, 991, 774, 1414, 178, 75, 2454, 2455, 773,
	2472, 2473, 2474, 772, 712, 85, 2454, 2455, 176, 76,
	711, 208, 1413, 145, 81, 1185, 82, 710, 709, 708,
	208, 1413, 707, 706, 705, 704, 703, 702, 701, 2471,
	700, 699, 698, 697, 696, 176, 695, 694, 693, 177,
	692, 208, 691, 690, 689, 688, 178, 670, 208, 170,
	116, 687, 77, 679, 678, 638, 637, 171, 2469, 1997,
	2985, 2675, 596, 595, 208, 1053, 208, 208, 1154, 208,
	1053, 208, 2471, 178, 594, 586, 585, 584, 2288, 208,
	208, 1037, 561, 2155, 1010, 1042, 1482, 560, 176, 559,
	177, 558, 1419, 542, 2932, 2093, 198, 117, 197, 196,
	1051, 1419, 195, 194, 208, 1162, 1007, 193, 192, 149,
	1820, 191, 190, 3333, 1010, 1811, 189, 177, 208, 1884,
	1154, 1154, 208, 208, 188, 208, 178, 170, 187, 148,
	2460, 1441, 1442, 1443, 1174, 171, 186, 208, 185, 2460,
	2466, 2467, 2468, 184, 183, 208, 182, 2465, 2463, 2464,
	2456, 2457, 2458, 2459, 2461, 2462, 148, 78, 181, 208,
	208, 208, 208, 208, 1154, 1154, 180, 1164, 179, 1154,
	177, 208, 1154, 208, 2838, 2538, 2423, 2412, 2245, 176,
	170, 2475, 1025, 2138, 1434, 2454, 2455, 2273, 171, 145,
	81, 2129, 82, 2456, 2457, 2458, 2459, 2461, 2462, 1693,
	1567, 1292, 1145, 2040, 1512, 2038, 1168, 176, 1512, 148,
	1511, 176, 176, 2470, 1511, 1834, 819, 178, 1046, 1154,
	1139, 1144, 1410, 670, 1581, 1498, 116, 1176, 1179, 1044,
	1184, 1515, 1190, 2036, 1173, 1510, 2034, 580, 208, 1022,
	2032, 1172, 1493, 998, 3260, 178, 3221, 3160, 1234, 178,
	178, 3215, 3103, 3027, 208, 583, 3096, 1230, 1230, 3005,
	3004, 177, 2992, 1415, 1416, 1417, 1418, 1420, 1421, 208,
	2991, 170, 2990, 117, 1300, 2989, 1435, 2983, 2982, 171,
	2981, 1833, 2980, 2901, 2855, 149, 1285, 139, 2854, 177,
	2852, 2844, 2814, 177, 177, 2813, 2812, 1168, 2739, 170,
	148, 2699, 2735, 170, 170, 2471, 2533, 171, 2489, 1275,
	1278, 171, 171, 2480, 1298, 1307, 2453, 2450, 2460, 2449,
	2447, 2436, 1310, 2435, 2434, 1231, 2431, 2428, 148, 805,
	2406, 2405, 668, 148, 1493, 2398, 2314, 2130, 2007, 1410,
	976, 1480, 1786, 1409, 3444, 3416, 3415, 3368, 997, 1754,
	1390, 2764, 3323, 1752, 3321, 3255, 1391, 3252, 3251, 2274,
	3250, 1411, 1412, 3246, 3240, 3209, 3208, 1974, 3156, 3133,
	3108, 3107, 1494, 3086, 1492, 3083, 3077, 3218, 3022, 3003,
	2952, 2949, 2882, 2881, 87, 2870, 87, 1414, 87, 2869,
	1417, 1418, 1420, 1421, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 1689, 2220, 2826, 2152, 2730, 1383, 2689,
	2650, 2621, 2361, 2601, 1413, 1315, 2466, 2467, 2468, 2580,
	2579, 2554, 1329, 2465, 2463, 2464, 2456, 2457, 2458, 2459,
	2461, 2462, 1389, 2552, 2494, 2456, 2457, 2458, 2459, 2461,
	2462, 2427, 2426, 2411, 1688, 2389, 2254, 1396, 878, 1516,
	3095, 1388, 1513, 1411, 1412, 1505, 1502, 2159, 2158, 2133,
	1386, 2115, 208, 806, 87, 2099, 1980, 2030, 1476, 1580,
	1544, 87, 1540, 1539, 1538, 2454, 2455, 1537, 87, 1414,
	1536, 1535, 1534, 1533, 1532, 1530, 785, 1529, 208, 1552,
	1528, 1527, 784, 1392, 1419, 1526, 1543, 1525, 208, 1053,
	208, 208, 208, 1524, 834, 805, 1413, 1523, 1154, 575,
	208, 208, 1522, 813, 575, 208, 1514, 1521, 1590, 2272,
	208, 1520, 1406, 1407, 1441, 1442, 1443, 3233, 2515, 1519,
	1518, 1495, 1477, 1475, 1584, 1663, 2469, 1470, 1021, 1012,
	1411, 1412, 1004, 3082, 3024, 1053, 2977, 1562, 2851, 2833,
	1679, 1678, 2829, 2415, 1688, 1685, 2116, 3145, 1575, 3026,
	1506, 1507, 2454, 2455, 1593, 2850, 1414, 1691, 1494, 1660,
	1549, 1550, 2550, 2580, 1473, 1576, 3253, 1434, 1041, 1662,
	1694, 1835, 1688, 2659, 1563, 1688, 2604, 1039, 3101, 3066,
	2836, 2691, 2690, 1413, 3193, 1035, 1567, 139, 2433, 1328,
	2909, 1433, 1381, 786, 835, 994, 1512, 994, 2460, 1035,
	1666, 1603, 1511, 2432, 2371, 2207, 2458, 2459, 2461, 2462,
	1036, 1474, 1032, 1585, 1588, 1713, 2222, 990, 2880, 1040,
	1587, 963, 1500, 1674, 2636, 1684, 2635, 1355, 1832, 1483,
	3188, 1035, 1356, 1489, 1783, 805, 2705, 2967, 1682, 1572,
	2616, 2039, 1731, 2037, 770, 3136, 2421, 1665, 3419, 2285,
	1542, 2766, 3353, 1436, 1437, 1438, 1439, 580, 2015, 1435,
	1154, 208, 580, 1419, 3216, 2454, 2455, 1053, 1525, 1687,
	1569, 2035, 1525, 992, 2033, 583, 2157, 1703, 2031, 1531,
	583, 2470, 771, 1592, 3159, 1508, 2629, 1774, 1659, 1207,
	3364, 3361, 2671, 1441, 1442, 1443, 1594, 2862, 1033, 3303,
	2915, 2321, 1750, 1319, 3391, 1034, 208, 208, 3392, 3354,
	2190, 3058, 1195, 208, 3271, 2164, 2562, 764, 1205, 762,
	1680, 1872, 766, 208, 2181, 760, 3441, 757, 1629, 1870,
	1026, 3183, 208, 3179, 208, 2179, 208, 1999, 2895, 2181,
	208, 2892, 2891, 2859, 2281, 2858, 1434, 1787, 2564, 748,
	2179, 2410, 208, 2409, 2408, 2407, 1733, 2375, 1683, 1735,
	562, 2238, 1739, 1717, 87, 2232, 2229, 1568, 2210, 1571,
	2145, 1352, 1955, 2471, 1353, 1479, 1387, 975, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 991, 1169, 991, 1206,
	1770, 1675, 1154, 208, 1154, 1743, 1032, 2193, 2460, 1154,
	2026, 2000, 208, 754, 208, 208, 2025, 1913, 803, 1041,
	2153, 1240, 1312, 1239, 1154, 1154, 1173, 208, 2706, 580,
	1440, 1804, 208, 1172, 1238, 1795, 1237, 575, 208, 3117,
	208, 1882, 208, 2209, 208, 1836, 208, 583, 1435, 1218,
	1881, 1842, 1773, 1035, 208, 2171, 2226, 1317, 208, 1041,
	208, 1738, 1259, 1747, 568, 1351, 1970, 1966, 1201, 208,
	1040, 1970, 1710, 2551, 1628, 1698, 1689, 2220, 3054, 1699,
	3270, 2001, 1998, 2603, 1366, 1216, 1846, 1421, 208, 1964,
	802, 2470, 1033, 1763, 208, 1764, 3166, 2067, 2136, 1034,
	1707, 2465, 2463, 2464, 2456, 2457, 2458, 2459, 2461, 2462,
	1040, 2200, 1978, 1394, 1053, 3325, 1313, 1976, 2199, 1802,
	1801, 633, 1215, 1711, 1712, 1849, 2708, 2707, 2344, 1327,
	1797, 2003, 1020, 1800, 3045, 685, 1032, 1838, 2142, 1002,
	3286, 2872, 2192, 2363, 2364, 570, 3383, 1298, 2666, 1912,
	1891, 803, 3431, 1888, 1850, 1203, 1762, 628, 3247, 2015,
	804, 3042, 805, 1330, 1713, 1700, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 2003, 1705, 1702, 798, 1815,
	2749, 2667, 1817, 2471, 1347, 1819, 1689, 1686, 1829, 1822,
	1986, 1987, 1576, 1960, 1022, 580, 2462, 1837, 634, 1053,
	2613, 1961, 3043, 1001, 1962, 1851, 2624, 1967, 1986, 2012,
	1603, 1603, 3391, 583, 1689, 2220, 2608, 1689, 2220, 3052,
	1730, 1858, 1033, 802, 1909, 1910, 1380, 627, 3116, 1034,
	1715, 1704, 2208, 999, 2016, 1348, 2666, 1035, 1886, 1880,
	564, 1350, 208, 1218, 2048, 1889, 2052, 2052, 2065, 2883,
	1986, 2561, 2563, 2085, 2087, 1356, 2191, 569, 2091, 665,
	2594, 1485, 1812, 3350, 2180, 1490, 1053, 208, 2746, 1503,
	1885, 3284, 1887, 1997, 2003, 2548, 208, 2893, 1890, 208,
	1363, 785, 1053, 2596, 785, 785, 1883, 1900, 3382, 2269,
	1901, 1902, 2230, 804, 2134, 801, 806, 566, 2454, 2455,
	3285, 2465, 2463, 2464, 2456, 2457, 2458, 2459, 2461, 2462,
	758, 768, 758, 1871, 2144, 767, 1318, 2135, 759, 2011,
	758, 1869, 1554, 1705, 1705, 2958, 2454, 2455, 2595, 2472,
	2473, 2474, 3127, 1258, 563, 3053, 805, 2117, 2747, 1200,
	3398, 2127, 2128, 3038, 3314, 2969, 3039, 1963, 2425, 805,
	1982, 3113, 1952, 805, 2598, 3257, 1965, 2454, 2455, 2024,
	2131, 794, 208, 743, 2028, 2029, 1364, 1035, 2873, 2592,
	2009, 567, 1469, 626, 3167, 625, 2350, 755, 2111, 994,
	2126, 3411, 565, 3041, 3351, 796, 1314, 2469, 1558, 2006,
	2106, 1734, 2377, 804, 1053, 3044, 994, 1969, 786, 208,
	2147, 786, 786, 686, 629, 587, 3432, 208, 2060, 2089,
	2591, 963, 2076, 139, 3081, 636, 635, 208, 2097, 2098,
	1561, 795, 1713, 3381, 2108, 2112, 2113, 2953, 801, 2176,
	208, 2460, 2003, 1154, 805, 1977, 1365, 2847, 1572, 1556,
	1015, 2167, 2961, 3348, 3390, 208, 1053, 743, 518, 208,
	208, 3112, 1393, 2169, 1559, 744, 1972, 2353, 3349, 2460,
	1701, 1514, 1335, 2154, 3388, 1848, 2107, 2182, 1326, 796,
	806, 1019, 513, 1628, 1628, 208, 1557, 208, 1950, 3198,
	208, 1953, 3085, 1483, 2242, 2170, 2654, 1483, 2276, 2386,
	2460, 1776, 1551, 2511, 2162, 208, 1013, 3040, 2168, 1008,
	505, 2255, 208, 1000, 208, 2903, 208, 1402, 1506, 1507,
	2475, 2384, 208, 2227, 2470, 208, 1813, 208, 1603, 208,
	2803, 208, 208, 2161, 208, 1154, 1154, 1154, 2212, 1154,
	1949, 2264, 2213, 208, 208, 2240, 208, 3001, 2165, 744,
	1401, 2239, 2470, 208, 2959, 1714, 1676, 2204, 3172, 3114,
	1560, 981, 2352, 2194, 2196, 2185, 208, 2541, 208, 2333,
	2335, 2202, 2309, 2310, 3426, 1145, 3171, 3409, 1571, 2349,
	991, 2211, 3154, 2470, 2334, 3237, 2242, 2235, 2242, 2861,
	1168, 208, 208, 208, 2228, 208, 2278, 991, 2655, 3258,
	87, 2575, 2247, 2571, 2249, 2277, 745, 2296, 2221, 2223,
	2224, 2225, 588, 589, 1173, 1673, 2471, 580, 208, 2259,
	2342, 2243, 2343, 2256, 1796, 2381, 2252, 2305, 1785, 1705,
	2320, 1469, 1784, 3057, 2268, 583, 2382, 1400, 1758, 2387,
	3056, 990, 2311, 990, 2471, 3410, 2745, 2287, 1896, 2287,
	3294, 1877, 2336, 2510, 2337, 139, 2351, 2307, 2103, 1741,
	1558, 2524, 2291, 1669, 2804, 1951, 1168, 1168, 1402, 2348,
	2805, 2920, 2214, 3089, 2302, 2471, 2303, 3412, 2304, 1740,
	1671, 3155, 2306, 2298, 1298, 2312, 2253, 3002, 2355, 2322,
	745, 1401, 1561, 1261, 2582, 2581, 1672, 992, 2369, 992,
	591, 590, 1843, 2828, 2508, 684, 793, 1737, 746, 2141,
	2507, 2109, 1349, 87, 2403, 2404, 1554, 208, 3425, 2140,
	2378, 2139, 2266, 2105, 802, 1336, 1559, 1168, 2104, 2413,
	1711, 1712, 3242, 2525, 514, 2463, 2464, 2456, 2457, 2458,
	2459, 2461, 2462, 87, 3259, 2358, 747, 1897, 2360, 2357,
	592, 593, 3162, 677, 3074, 2466, 2467, 2468, 87, 1232,
	87, 1246, 2465, 2463, 2464, 2456, 2457, 2458, 2459, 2461,
	2462, 2414, 2700, 2523, 1794, 2626, 1233, 1244, 1400, 2383,
	520, 3055, 1558, 3395, 3186, 2818, 515, 3297, 2385, 3243,
	3007, 1628, 746, 2020, 3397, 2464, 2456, 2457, 2458, 2459,
	2461, 2462, 2376, 87, 3152, 87, 1053, 2491, 2542, 2215,
	2216, 2496, 3366, 1378, 1561, 3254, 2503, 2504, 3132, 3000,
	1360, 2484, 1560, 2505, 516, 208, 517, 1600, 208, 3163,
	747, 1868, 87, 1556, 2897, 208, 3153, 2483, 208, 208,
	1053, 2502, 2729, 1358, 2545, 805, 2448, 1346, 1559, 1053,
	3298, 2388, 3244, 2263, 2237, 2206, 208, 2160, 1344, 1342,
	2420, 1582, 1579, 1340, 1338, 1332, 1242, 2526, 2528, 1379,
	1557, 208, 1308, 798, 2346, 2531, 2345, 2339, 1879, 1855,
	1661, 1517, 1311, 1222, 2539, 2019, 3344, 3291, 3031, 208,
	208, 208, 2918, 2517, 2878, 208, 1979, 2520, 208, 2518,
	756, 2559, 682, 683, 2876, 208, 208, 208, 208, 208,
	2546, 2860, 2519, 2532, 2565, 1485, 2653, 2536, 2638, 208,
	208, 208, 2529, 2530, 2637, 2557, 2537, 994, 208, 2282,
	1316, 2657, 743, 2514, 2271, 2270, 2584, 2250, 2588, 2589,
	208, 1154, 994, 208, 1560, 2497, 2486, 2487, 2488, 1053,
	675, 676, 1245, 2512, 796, 1826, 1053, 1825, 1972, 1603,
	1377, 208, 2072, 2572, 208, 208, 994, 1359, 1243, 1823,
	1821, 519, 1818, 2549, 208, 1867, 2757, 1154, 208, 1483,
	1154, 1154, 1154, 3202, 2568, 2569, 1816, 208, 2543, 2544,
	1357, 2539, 1814, 208, 1345, 1603, 2607, 1805, 2643, 208,
	2583, 208, 2586, 2639, 2527, 1343, 1341, 2560, 208, 2576,
	1339, 1337, 1331, 1241, 2500, 2566, 2606, 2555, 2556, 1755,
	1753, 761, 763, 2614, 744, 1744, 1732, 1729, 1703, 2513,
	1716, 1154, 1154, 1706, 1404, 2367, 3392, 1589, 2622, 208,
	208, 3317, 3105, 208, 3104, 2673, 2597, 2687, 972, 2602,
	1588, 1692, 2599, 1703, 2600, 1168, 2609, 1197, 208, 2662,
	1053, 208, 208, 1053, 208, 2661, 2617, 2703, 2612, 2618,
	2181, 2181, 973, 3204, 2198, 1773, 2623, 2181, 2929, 2212,
	208, 2179, 2197, 2619, 1743, 2620, 3249, 1713, 2195, 1852,
	1743, 1375, 1376, 1874, 2670, 1162, 3223, 3008, 1051, 981,
	2217, 1411, 1412, 2670, 910, 2201, 2610, 2368, 1411, 1412,
	2611, 1408, 2234, 2203, 981, 521, 2660, 1405, 991, 3290,
	3261, 2907, 2902, 1053, 3407, 2843, 1899, 1414, 2686, 2713,
	2290, 2698, 2090, 991, 1053, 2702, 208, 2679, 2732, 1664,
	1595, 139, 2547, 204, 3424, 508, 509, 2454, 2455, 526,
	508, 526, 536, 541, 1413, 974, 557, 991, 2754, 805,
	2714, 1413, 532, 3263, 204, 745, 1411, 1412, 1321, 2760,
	2672, 2173, 2172, 1482, 1320, 2023, 2849, 2752, 2173, 2710,
	2553, 2174, 674, 2027, 2711, 2021, 204, 1994, 2978, 2717,
	1362, 2715, 2848, 1361, 2741, 2742, 2743, 2744, 1603, 1168,
	1480, 1478, 3433, 2767, 3234, 3146, 3144, 3099, 87, 3076,
	87, 3025, 2948, 2937, 2815, 990, 2681, 2682, 2683, 2913,
	2684, 2685, 1628, 2900, 2899, 2898, 1600, 1600, 2737, 208,
	2875, 2680, 990, 2651, 2748, 2750, 2751, 2649, 2341, 87,
	2340, 87, 2300, 208, 2275, 2251, 2242, 1603, 1603, 1053,
	2763, 2769, 2756, 1981, 1866, 2770, 1865, 1864, 1628, 2068,
	1808, 1909, 2773, 1603, 1603, 2772, 1807, 746, 1806, 208,
	2837, 992, 1788, 2780, 1766, 508, 508, 1909, 2783, 2807,
	1765, 2782, 1761, 204, 2845, 1760, 1759, 947, 992, 2768,
	1757, 1756, 1395, 806, 1603, 1374, 1373, 1333, 1270, 1269,
	1268, 1267, 1266, 1265, 2808, 747, 1264, 1263, 2811, 2816,
	1262, 1260, 2819, 2832, 208, 1255, 1254, 1253, 87, 1719,
	2821, 2822, 139, 2856, 1252, 2884, 1251, 1214, 1213, 1212,
	1211, 1210, 1209, 1208, 1202, 1196, 1194, 1723, 1193, 1018,
	994, 994, 1017, 857, 1667, 2894, 769, 208, 208, 208,
	620, 2839, 753, 3165, 1368, 74, 1204, 607, 2896, 68,
	2874, 3302, 741, 2590, 1053, 208, 1854, 1334, 1856, 1154,
	2516, 2114, 1698, 2888, 3283, 2986, 1699, 2424, 3229, 1720,
	3126, 2018, 1499, 70, 1291, 845, 208, 930, 2910, 3032,
	2864, 2863, 2326, 2933, 2846, 2072, 2072, 2325, 812, 208,
	208, 1154, 1154, 1154, 1056, 208, 208, 208, 1677, 2922,
	208, 208, 851, 2853, 1690, 2156, 2051, 208, 1599, 2926,
	2911, 854, 2925, 2889, 2890, 2921, 2944, 2824, 2825, 1601,
	1053, 856, 2906, 2212, 855, 1602, 1501, 853, 1598, 2265,
	2294, 1249, 730, 731, 1681, 1975, 2013, 2419, 1496, 825,
	847, 2010, 1011, 2916, 824, 2521, 1724, 2665, 2842, 2912,
	2976, 1628, 1700, 3094, 1895, 2359, 1892, 623, 2451, 1995,
	1003, 2923, 2073, 2066, 1702, 208, 2927, 2062, 1382, 2972,
	2935, 2296, 1471, 2934, 1773, 2295, 1043, 828, 1973, 1487,
	2393, 2945, 2946, 2963, 2940, 2947, 2072, 2072, 2072, 87,
	2877, 2950, 2879, 2951, 2939, 2955, 2534, 2674, 2151, 994,
	1628, 1628, 981, 981, 1903, 2960, 1725, 1726, 1775, 2964,
	971, 970, 969, 3308, 3305, 1721, 1628, 1628, 1704, 1670,
	2166, 991, 991, 1463, 1600, 2640, 841, 208, 1167, 1603,
	2501, 2701, 1219, 3248, 1462, 765, 3239, 1053, 1030, 1053,
	87, 1029, 1028, 1722, 2574, 3430, 2871, 1628, 175, 172,
	174, 173, 2886, 2625, 1698, 90, 37, 36, 1699, 208,
	208, 208, 35, 17, 115, 114, 113, 112, 2999, 111,
	110, 208, 109, 108, 3020, 107, 106, 208, 105, 208,
	104, 3013, 208, 208, 208, 103, 2500, 102, 101, 100,
	3050, 99, 208, 208, 1154, 98, 1053, 97, 1154, 3016,
	3012, 3010, 3011, 96, 95, 1005, 94, 93, 92, 3060,
	3015, 1705, 3017, 91, 674, 2536, 208, 34, 3021, 1053,
	553, 550, 1154, 50, 49, 3051, 3018, 1727, 89, 3030,
	88, 16, 208, 3049, 3072, 1016, 3061, 3062, 3078, 33,
	1553, 2567, 557, 994, 1700, 14, 54, 55, 13, 29,
	30, 994, 80, 208, 3028, 3029, 1702, 79, 204, 1053,
	204, 204, 3091, 1159, 994, 204, 28, 3067, 3093, 15,
	3106, 981, 3059, 204, 1175, 27, 3068, 3079, 3090, 25,
	26, 11, 2068, 2068, 8, 3071, 1053, 7, 10, 12,
	991, 1728, 24, 3092, 1051, 3098, 144, 143, 1199, 2662,
	73, 142, 72, 141, 140, 3100, 71, 3109, 3087, 23,
	1704, 9, 1221, 22, 136, 3191, 204, 204, 2908, 1159,
	67, 3124, 3138, 138, 1053, 3115, 137, 2670, 1773, 3118,
	3009, 204, 208, 64, 208, 135, 1053, 208, 3014, 1257,
	134, 3075, 3134, 990, 206, 208, 3080, 1701, 65, 133,
	132, 66, 131, 204, 204, 204, 204, 1159, 990, 3124,
	21, 3123, 5, 53, 3148, 557, 208, 204, 6, 3097,
	3149, 1912, 3110, 3139, 3140, 2704, 83, 84, 208, 31,
	62, 61, 990, 2068, 2068, 2068, 208, 3143, 3142, 60,
	811, 1154, 1628, 2072, 2072, 3182, 208, 3190, 20, 992,
	3147, 52, 1603, 1705, 3195, 19, 166, 3197, 165, 164,
	3168, 163, 159, 158, 992, 981, 162, 208, 208, 3194,
	160, 161, 157, 981, 130, 3180, 3207, 168, 3211, 3212,
	167, 3200, 204, 1696, 991, 155, 3189, 208, 992, 152,
	151, 154, 991, 208, 156, 153, 3201, 3199, 204, 150,
	3203, 2925, 3205, 208, 169, 991, 129, 1603, 3206, 57,
	128, 127, 126, 541, 125, 124, 3245, 56, 18, 2,
	3236, 3174, 3227, 2072, 2072, 2072, 2072, 2072, 2072, 2072,
	2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072,
	2072, 2072, 2662, 2072, 823, 1, 0, 87, 3222, 208,
	1154, 0, 87, 3256, 3235, 208, 0, 0, 0, 1154,
	1154, 0, 0, 0, 3220, 0, 0, 208, 0, 208,
	0, 3277, 0, 0, 0, 87, 0, 3232, 0, 3194,
	3265, 0, 1603, 3269, 0, 3273, 3262, 3287, 0, 1701,
	3268, 208, 1147, 0, 3280, 3275, 3276, 208, 208, 3274,
	1053, 0, 3299, 1168, 0, 1600, 0, 0, 208, 0,
	3307, 3310, 3318, 3175, 3176, 0, 3311, 0, 0, 3315,
	0, 3281, 0, 3282, 0, 3320, 0, 3322, 0, 3329,
	0, 0, 3312, 0, 3304, 1912, 0, 0, 0, 3330,
	208, 1600, 0, 0, 1223, 1226, 0, 3324, 0, 3326,
	0, 3300, 3355, 0, 0, 0, 0, 0, 0, 0,
	3340, 3341, 0, 0, 3343, 3342, 0, 0, 0, 0,
	0, 0, 3371, 0, 3373, 3369, 208, 0, 0, 0,
	0, 0, 3379, 0, 3357, 0, 3378, 0, 0, 3370,
	0, 3380, 3372, 0, 3374, 208, 1304, 3375, 0, 0,
	3376, 3377, 0, 0, 0, 0, 508, 0, 0, 0,
	3389, 0, 3386, 3387, 0, 1628, 2390, 2391, 0, 208,
	3307, 0, 3393, 3310, 0, 3396, 3394, 204, 3401, 204,
	3403, 0, 204, 0, 3405, 0, 3406, 0, 3400, 0,
	2068, 2068, 1175, 1322, 1159, 204, 1972, 3414, 3413, 0,
	3319, 0, 0, 204, 1175, 526, 0, 0, 204, 1175,
	0, 3421, 3423, 3420, 557, 3422, 0, 3427, 0, 0,
	1628, 2296, 3434, 3399, 3435, 0, 0, 0, 0, 3428,
	3429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3438, 3439, 3440, 0, 0, 3442, 3443, 0, 0,
	0, 0, 0, 3447, 0, 0, 990, 990, 3445, 2454,
	2455, 0, 2472, 2473, 2474, 0, 0, 2477, 2478, 2479,
	2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068,
	2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068, 0,
	2068, 0, 0, 811, 1600, 1628, 0, 811, 0, 1411,
	1412, 0, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 0, 992, 992, 0, 0, 0, 0, 0, 0,
	2469, 0, 0, 0, 0, 1414, 0, 0, 0, 1177,
	0, 1181, 0, 1187, 1414, 0, 0, 3045, 0, 0,
	0, 0, 0, 1600, 1600, 0, 0, 0, 0, 0,
	0, 0, 1413, 0, 0, 0, 87, 0, 0, 1600,
	1600, 1413, 0, 0, 3042, 204, 0, 3035, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3033, 0, 0, 0, 0, 0, 3037, 0, 0, 0,
	1600, 0, 2460, 0, 0, 0, 0, 823, 0, 0,
	0, 823, 0, 0, 0, 3043, 0, 0, 0, 1137,
	204, 204, 0, 0, 1137, 0, 1306, 204, 0, 0,
	0, 0, 0, 1309, 0, 990, 0, 1793, 0, 0,
	0, 0, 1419, 0, 0, 3036, 204, 0, 204, 0,
	204, 1419, 0, 0, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1809, 0, 0, 0,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 1441, 1442, 1443, 0, 2470, 0, 0, 0, 0,
	0, 992, 1591, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 1159, 204,
	0, 0, 0, 0, 0, 1434, 0, 2072, 0, 0,
	0, 557, 0, 0, 1434, 0, 204, 0, 0, 0,
	0, 204, 204, 0, 204, 0, 204, 0, 204, 0,
	204, 0, 0, 0, 0, 0, 3038, 0, 1873, 3039,
	0, 0, 1875, 0, 1876, 1464, 1465, 1466, 1467, 1468,
	2072, 0, 0, 204, 0, 0, 0, 2471, 0, 990,
	0, 0, 0, 0, 2725, 2726, 0, 990, 0, 0,
	0, 0, 541, 0, 0, 1484, 3041, 0, 557, 0,
	990, 1497, 0, 0, 0, 0, 0, 0, 3044, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 992, 0, 0, 0, 0,
	0, 0, 0, 992, 0, 1600, 0, 0, 0, 0,
	0, 0, 0, 0, 1746, 0, 992, 0, 0, 2072,
	0, 0, 0, 0, 2784, 2785, 2786, 2787, 2788, 2789,
	2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799,
	2800, 2801, 2802, 0, 2806, 0, 0, 0, 2466, 2467,
	2468, 0, 0, 0, 0, 2465, 2463, 2464, 2456, 2457,
	2458, 2459, 2461, 2462, 0, 0, 1411, 1412, 0, 0,
	3040, 0, 1454, 1455, 1456, 0, 0, 0, 0, 0,
	1547, 1547, 1547, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 0, 1460, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 0, 0, 508, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 0, 0, 0, 0, 0, 1413,
	0, 204, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 508, 0, 0, 0, 0, 0, 0, 204, 0,
	508, 0, 0, 204, 0, 0, 0, 0, 1830, 811,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1844, 1845,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2068, 0, 0, 0, 0, 1436,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1137, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 1461, 526, 2068, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 0, 1137,
	0, 0, 0, 2189, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 1449, 0, 0, 0, 1600, 0,
	0, 204, 1434, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1411, 1412, 0, 0, 0, 204,
	0, 0, 0, 204, 2244, 0, 2068, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 1600, 0, 0, 0, 0, 0, 204,
	0, 1175, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 1413, 0, 1793,
	0, 0, 0, 0, 0, 1433, 2189, 0, 508, 0,
	2299, 0, 0, 0, 1435, 0, 204, 0, 0, 204,
	0, 204, 0, 204, 0, 204, 204, 0, 1159, 0,
	0, 1137, 0, 0, 0, 0, 0, 2318, 674, 1452,
	2189, 0, 0, 0, 0, 0, 0, 204, 1600, 0,
	0, 2728, 0, 0, 0, 0, 0, 0, 0, 0,
	1175, 0, 1175, 0, 0, 0, 0, 1436, 1437, 1438,
	1439, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 204, 204, 204, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 1411, 1412, 0,
	1444, 1445, 1446, 1454, 1455, 1456, 0, 1441, 1442, 1443,
	0, 0, 204, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 1450, 1414, 0, 0, 0, 1460, 0, 0,
	1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 1893, 0, 1898, 0, 0, 0, 0, 1433, 1905,
	1434, 0, 0, 0, 0, 1430, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 0, 1954, 0, 1956, 1957, 1958, 1959, 3131, 0,
	0, 1175, 0, 0, 0, 0, 0, 2231, 0, 0,
	1436, 1437, 1438, 1439, 1983, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 1440, 0, 0, 0, 0, 1484,
	0, 0, 0, 2008, 0, 0, 0, 0, 0, 0,
	0, 3157, 1435, 1451, 0, 0, 1461, 0, 0, 0,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 1137, 0,
	0, 0, 0, 0, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 1457, 0, 1458, 0, 2064, 0, 2075, 2077, 2082,
	1428, 1429, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 2308,
	0, 0, 0, 1434, 204, 0, 0, 0, 0, 508,
	0, 0, 508, 0, 0, 0, 0, 0, 0, 508,
	0, 1459, 508, 508, 657, 0, 0, 0, 204, 0,
	3226, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	1175, 0, 0, 1137, 0, 0, 0, 639, 0, 0,
	0, 0, 0, 0, 0, 1175, 0, 0, 0, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0,
	0, 0, 0, 2189, 2189, 204, 0, 1440, 640, 2189,
	0, 0, 2578, 0, 0, 0, 0, 641, 0, 2189,
	2578, 2189, 2578, 2578, 0, 1435, 0, 0, 0, 0,
	0, 0, 642, 204, 204, 204, 0, 0, 0, 0,
	1137, 0, 0, 0, 0, 0, 0, 0, 662, 0,
	1452, 0, 0, 0, 204, 0, 1137, 1159, 0, 0,
	0, 0, 0, 643, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2628, 0, 0, 2630, 2633,
	644, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	645, 204, 0, 646, 0, 0, 0, 1159, 0, 0,
	0, 0, 0, 2189, 0, 508, 0, 0, 0, 0,
	0, 0, 2189, 2246, 0, 2248, 0, 0, 0, 661,
	0, 0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431,
	1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418,
	1420, 1421, 0, 204, 1793, 0, 2995, 1793, 0, 2994,
	0, 0, 0, 0, 0, 0, 0, 0, 1137, 0,
	0, 0, 2709, 0, 0, 1159, 204, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 2454, 2455, 0, 2472, 2473,
	2474, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 2968, 0, 0, 0, 0, 0,
	1137, 648, 59, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 665, 649, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2765, 39, 120, 0, 0, 0, 2469, 0, 0, 0,
	0, 0, 0, 0, 38, 664, 69, 0, 0, 0,
	0, 0, 650, 0, 0, 651, 0, 0, 0, 0,
	0, 659, 0, 0, 0, 0, 41, 0, 652, 0,
	0, 42, 0, 0, 0, 0, 75, 0, 0, 121,
	0, 0, 0, 0, 40, 85, 0, 0, 0, 76,
	43, 0, 0, 0, 0, 0, 0, 653, 660, 0,
	2373, 2374, 0, 0, 0, 0, 2380, 654, 2460, 0,
	0, 0, 204, 204, 0, 2615, 44, 0, 0, 656,
	0, 0, 0, 508, 655, 2394, 2395, 0, 0, 0,
	0, 2008, 77, 0, 0, 663, 0, 508, 0, 0,
	2402, 0, 0, 0, 0, 0, 658, 0, 0, 0,
	0, 2644, 0, 0, 2646, 2647, 2648, 0, 0, 2475,
	0, 0, 0, 1175, 0, 0, 2422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2693, 2694, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2082,
	2082, 2082, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 2904, 204, 204, 1547, 45, 0, 0, 0, 0,
	0, 0, 2506, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 0, 48, 145,
	81, 0, 82, 0, 46, 0, 0, 0, 122, 0,
	2189, 204, 0, 2471, 47, 0, 0, 0, 0, 0,
	0, 176, 0, 2318, 2318, 0, 0, 0, 0, 674,
	674, 2189, 0, 51, 1793, 1793, 116, 0, 0, 0,
	0, 204, 0, 811, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 1482, 0, 0, 811, 0, 0, 178,
	0, 0, 911, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 0, 0, 0,
	1137, 2593, 0, 117, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 63, 2987,
	0, 205, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 1137, 0, 0, 0, 0, 0,
	0, 171, 205, 1137, 2466, 2467, 2468, 0, 69, 0,
	0, 2465, 2463, 2464, 2456, 2457, 2458, 2459, 2461, 2462,
	0, 0, 148, 0, 205, 3, 0, 823, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 75, 0,
	823, 1175, 0, 204, 0, 0, 2663, 85, 0, 0,
	0, 76, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2189, 2189, 2189, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1175, 0, 0, 0, 0,
	0, 2189, 0, 2578, 77, 0, 1175, 1175, 204, 0,
	0, 0, 0, 1137, 0, 0, 204, 204, 0, 0,
	1137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2716, 0, 0, 0, 1905, 0, 0, 0,
	3084, 0, 2720, 2721, 0, 0, 2724, 0, 0, 0,
	2727, 0, 0, 0, 0, 0, 2189, 0, 0, 2731,
	0, 0, 0, 0, 0, 0, 0, 0, 2738, 0,
	0, 2506, 0, 0, 0, 0, 0, 1175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2758, 0, 0, 2941, 2942, 2943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 2774, 2775, 0, 2776, 2777, 2778, 0, 0, 2779,
	0, 0, 0, 2781, 1137, 0, 0, 1137, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 145, 81, 0, 82, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 2809, 2810, 2189, 0, 2578, 0,
	0, 3151, 0, 176, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 0, 0, 670, 0, 0, 116, 0,
	0, 0, 2827, 0, 0, 203, 0, 1137, 0, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 1137, 0,
	0, 178, 2633, 0, 0, 0, 581, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1175, 0, 0, 0, 0, 117, 0, 0, 581, 0,
	0, 0, 0, 0, 0, 2857, 0, 149, 0, 0,
	0, 204, 204, 0, 0, 177, 0, 0, 0, 0,
	2865, 2868, 0, 0, 58, 170, 0, 0, 0, 58,
	0, 2765, 0, 171, 0, 0, 59, 508, 0, 0,
	0, 59, 0, 2885, 0, 0, 0, 3151, 0, 0,
	63, 0, 0, 0, 148, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 1137, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 993, 0, 0, 0, 2578,
	0, 0, 0, 0, 0, 0, 0, 1547, 0, 0,
	75, 1175, 0, 1175, 0, 75, 0, 0, 2936, 85,
	0, 0, 0, 76, 85, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 0, 3295, 0, 0, 0, 0,
	0, 1175, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2965, 2966, 0, 77, 0, 0, 2970,
	2971, 77, 0, 0, 2974, 2975, 0, 0, 0, 0,
	0, 2979, 0, 0, 2765, 0, 205, 1058, 205, 205,
	1058, 0, 1058, 205, 0, 0, 0, 0, 1137, 0,
	2984, 205, 0, 0, 0, 0, 0, 2988, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3151,
	0, 0, 1058, 1058, 205, 205, 0, 0, 0, 0,
	0, 0, 0, 2454, 2455, 0, 2472, 2473, 2474, 205,
	0, 0, 0, 1175, 1137, 0, 0, 0, 0, 0,
	0, 78, 2734, 0, 0, 0, 78, 0, 0, 0,
	0, 205, 205, 205, 205, 0, 1058, 1058, 0, 0,
	0, 1058, 0, 0, 1058, 205, 0, 0, 0, 0,
	0, 0, 0, 145, 81, 0, 82, 0, 145, 81,
	2868, 82, 0, 0, 2469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 0,
	176, 0, 0, 0, 0, 0, 0, 670, 0, 0,
	116, 1058, 670, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 178, 0, 0, 0, 0, 178, 0,
	0, 0, 0, 209, 0, 0, 205, 0, 0, 0,
	0, 1137, 0, 1137, 0, 0, 2460, 117, 0, 0,
	2868, 0, 117, 0, 0, 0, 0, 0, 0, 149,
	0, 0, 0, 0, 149, 0, 0, 177, 3119, 3120,
	3121, 0, 177, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 170, 0, 0, 171, 0, 0, 0, 0,
	171, 0, 0, 574, 3129, 3130, 0, 2475, 0, 0,
	1137, 0, 0, 0, 0, 0, 148, 0, 3137, 0,
	0, 1301, 0, 2454, 2455, 574, 2472, 2473, 2474, 0,
	0, 0, 0, 1137, 0, 0, 0, 0, 0, 2470,
	0, 0, 2733, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 203, 203, 0, 0, 0, 203, 0, 2868,
	0, 0, 0, 0, 0, 581, 0, 3173, 0, 0,
	0, 0, 0, 1137, 0, 0, 0, 811, 0, 0,
	0, 0, 0, 0, 2469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2868, 0, 0, 2868, 0, 0,
	1137, 0, 0, 0, 0, 0, 0, 0, 203, 203,
	0, 0, 0, 0, 0, 0, 0, 0, 2868, 2868,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 2471, 0, 0, 0, 986, 0, 0, 1137, 0,
	0, 0, 0, 0, 0, 203, 203, 203, 203, 0,
	1137, 0, 0, 0, 0, 0, 2460, 1411, 1412, 203,
	1444, 1445, 1446, 1454, 1455, 1456, 0, 3238, 0, 0,
	3241, 0, 0, 0, 199, 0, 1447, 0, 0, 0,
	205, 823, 0, 1414, 0, 0, 0, 1460, 0, 0,
	0, 1058, 0, 205, 205, 0, 0, 0, 0, 0,
	1058, 205, 0, 0, 0, 0, 205, 2475, 0, 0,
	1413, 0, 1411, 1412, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 203, 1430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 1414, 2470,
	203, 0, 2466, 2467, 2468, 0, 0, 0, 0, 2465,
	2463, 2464, 2456, 2457, 2458, 2459, 2461, 2462, 0, 0,
	0, 0, 0, 0, 811, 1413, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	1436, 1437, 1438, 1439, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 0, 3339, 3339, 3339, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1451, 3358, 0, 1461, 0, 0, 2723,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 2471, 2868, 0, 2868, 1436, 1437, 1438, 1439, 0,
	0, 1457, 0, 1458, 0, 1419, 0, 3339, 0, 0,
	1428, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 205, 1137, 1449, 0, 0, 823, 1058,
	0, 0, 0, 1434, 0, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 205, 205,
	0, 0, 0, 0, 0, 205, 0, 0, 3339, 0,
	0, 881, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 205, 0, 205, 0, 205, 0,
	0, 0, 2466, 2467, 2468, 0, 0, 1440, 0, 2465,
	2463, 2464, 2456, 2457, 2458, 2459, 2461, 2462, 0, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 1570,
	0, 993, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 1570, 0,
	1452, 0, 0, 0, 1058, 581, 1058, 0, 0, 0,
	581, 1058, 1440, 0, 205, 0, 0, 205, 1054, 0,
	0, 1155, 0, 1054, 0, 0, 1058, 1058, 0, 0,
	1435, 0, 0, 0, 205, 0, 0, 0, 0, 205,
	205, 0, 205, 0, 205, 0, 205, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1411,
	1412, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 1155, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 1414, 1425, 1426, 1432, 1431,
	1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418,
	1420, 1421, 0, 0, 0, 0, 2442, 0, 0, 2443,
	0, 0, 1413, 0, 0, 0, 1058, 1155, 1155, 0,
	1433, 0, 1155, 0, 0, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2722, 581, 0, 0,
	0, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1437, 1438, 1439, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 1058, 0, 0, 0, 0, 0, 0, 0, 1048,
	0, 0, 203, 203, 0, 0, 1166, 0, 0, 203,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	203, 0, 203, 0, 0, 0, 0, 0, 1411, 1412,
	0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 0, 1414, 1434, 0, 0, 1460, 0,
	0, 205, 1250, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 0, 0, 1274, 1274, 1274, 1166, 203, 1433,
	0, 203, 0, 0, 0, 0, 1430, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 581, 203, 0, 203, 0, 203, 0,
	203, 0, 203, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 1435, 0, 0,
	0, 1436, 1437, 1438, 1439, 0, 0, 0, 0, 0,
	0, 1419, 0, 1367, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 1461, 0, 205,
	0, 1441, 1442, 1443, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 1058, 0, 0, 0, 0,
	0, 1428, 1429, 0, 0, 0, 0, 205, 1058, 0,
	0, 205, 1054, 0, 0, 0, 1449, 0, 0, 0,
	0, 1155, 574, 0, 1434, 0, 0, 574, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 205, 0, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 0, 0, 1055, 0, 1054, 1156,
	0, 1055, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 205, 0, 205,
	0, 205, 0, 205, 205, 0, 0, 1058, 1058, 1058,
	0, 1058, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 0,
	0, 1156, 1156, 993, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 1412, 0, 0,
	993, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 1452, 0, 205, 205, 205, 0, 205, 0, 0,
	0, 0, 1414, 0, 0, 1156, 1156, 0, 0, 0,
	1156, 0, 0, 1156, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	0, 0, 0, 1155, 0, 0, 0, 1433, 0, 0,
	1054, 0, 0, 1577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1586, 0, 0, 0,
	1156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 2379, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 0, 0, 0, 0, 0, 1436,
	1437, 1438, 1439, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 581, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1155, 0, 1155, 0, 0,
	0, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 203, 1155, 1155, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 0, 0,
	574, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 203, 0, 203, 0, 203, 0, 203, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 0, 0, 0, 0, 0, 203,
	0, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 1768, 0, 0, 0, 0, 0, 1054, 1780, 0,
	0, 0, 0, 0, 1435, 0, 0, 203, 203, 203,
	0, 203, 0, 205, 0, 0, 0, 1250, 0, 1799,
	0, 1799, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 205, 205, 205, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1055, 0, 205, 1058, 0, 0, 0, 0, 0, 1156,
	0, 1058, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 0, 1054, 0, 1411, 1412, 0, 1780, 0, 0,
	1840, 0, 0, 0, 0, 0, 205, 0, 0, 1058,
	205, 0, 1058, 1058, 1058, 0, 1055, 1853, 0, 205,
	1414, 0, 0, 1859, 0, 1860, 0, 1861, 0, 1862,
	0, 1863, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 0, 0, 0, 0, 0, 0, 1413, 0, 0,
	0, 0, 0, 0, 1878, 1433, 0, 0, 0, 1054,
	1411, 1412, 0, 1058, 1058, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 1054, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 1058, 0, 205, 1058, 205, 0, 0, 0,
	0, 2372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 1413, 0, 0, 0, 1436, 1437, 1438,
	1439, 1433, 0, 0, 0, 0, 0, 1419, 0, 0,
	0, 993, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1156, 0, 0, 0, 0, 993, 0, 1055, 0,
	0, 0, 0, 0, 0, 1058, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 1058, 0, 0, 0,
	1570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1437, 1438, 1439, 1054, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 1441, 1442, 1443, 1155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1054,
	0, 0, 0, 0, 0, 203, 203, 203, 0, 0,
	0, 0, 0, 0, 1570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2132, 0, 203, 0, 0, 0,
	0, 0, 0, 1156, 0, 1156, 1434, 0, 0, 0,
	1156, 1058, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1156, 1156, 0, 0, 0,
	203, 0, 1435, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 1155, 1155,
	1155, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 205, 0, 0, 0, 1055, 0, 0, 203, 0,
	203, 0, 0, 0, 0, 0, 1058, 205, 0, 0,
	0, 1058, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0,
	1166, 0, 0, 1058, 1058, 1058, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2262, 0, 1058, 0, 0, 1780, 0, 0, 0, 0,
	1055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 0, 0, 2301, 0, 0,
	1274, 0, 1274, 0, 1274, 0, 1166, 1166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2338, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 0, 993, 993, 0, 0, 0, 0,
	0, 0, 0, 1055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2354, 1166, 2356, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 1058, 0, 0, 0, 0, 0, 0, 0, 1054,
	0, 0, 0, 2370, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1054, 0, 0, 205, 0, 0, 0,
	0, 0, 1054, 0, 205, 205, 1058, 0, 1058, 0,
	1058, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1058, 0, 0, 1058, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1058, 0, 0, 1156, 0, 0, 0, 0, 0,
	0, 0, 0, 993, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 0, 1155, 0, 0, 0, 1058, 0,
	0, 0, 1054, 0, 0, 0, 0, 0, 0, 1054,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 713, 0, 743, 0,
	1155, 0, 0, 1155, 1155, 1155, 1058, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	720, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 749, 718, 0, 0, 1156, 1156, 1156, 0,
	1156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1155, 1155, 719, 0, 0, 0,
	0, 721, 0, 0, 0, 750, 0, 0, 205, 0,
	0, 727, 728, 1058, 0, 0, 0, 737, 0, 0,
	0, 0, 0, 1054, 0, 0, 1054, 0, 0, 0,
	744, 722, 0, 0, 0, 0, 0, 993, 0, 205,
	205, 0, 0, 0, 0, 993, 2570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 742, 1570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2605, 1166, 2262, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1054, 0, 723, 0,
	0, 0, 0, 0, 0, 0, 717, 1054, 0, 0,
	203, 0, 0, 0, 0, 0, 0, 0, 203, 203,
	0, 724, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 1058, 0, 0, 0, 0, 0, 0, 2641,
	0, 1058, 1058, 2645, 0, 0, 0, 0, 0, 0,
	0, 726, 2652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 748, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 745, 1058, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1411, 1412, 2697, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 1054, 0, 0, 0, 0, 2712, 1414, 1166,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2718, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 0, 1055, 739, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 733, 0,
	1430, 203, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 715, 0, 746, 0, 0, 0, 0, 0, 0,
	0, 1055, 0, 0, 0, 0, 0, 716, 0, 0,
	1055, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	0, 732, 203, 0, 0, 751, 752, 0, 0, 0,
	0, 747, 0, 0, 0, 1436, 1437, 1438, 1439, 736,
	0, 0, 0, 0, 0, 1419, 0, 1054, 0, 0,
	0, 0, 1155, 203, 203, 0, 0, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 1461, 0, 0, 0, 1441, 1442, 1443, 0, 0,
	740, 0, 0, 0, 1155, 1155, 1155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 1458, 0,
	0, 0, 1156, 0, 0, 1428, 1429, 0, 0, 0,
	1055, 0, 0, 1054, 0, 0, 0, 1055, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 1156, 0,
	0, 1156, 1156, 1156, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 1156, 1156, 203, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 1055, 0, 2905, 1055, 0, 0, 0, 0, 0,
	1054, 0, 1054, 0, 0, 0, 0, 0, 0, 0,
	2917, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1055, 0, 0, 1155, 0, 1054,
	0, 1155, 2954, 0, 0, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1054, 0, 0, 1155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0,
	0, 2004, 1054, 0, 2005, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1054,
	0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 1414, 0,
	1055, 0, 1460, 0, 0, 0, 0, 1054, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1054,
	0, 0, 0, 0, 0, 1413, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 1411, 1412,
	1430, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 3063,
	0, 0, 0, 0, 1414, 0, 0, 2262, 1460, 0,
	0, 0, 0, 0, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 0, 0, 0, 1436, 1437, 1438, 1439, 1433,
	0, 0, 0, 0, 0, 1419, 1430, 0, 0, 0,
	0, 0, 0, 0, 0, 1055, 0, 0, 0, 0,
	1156, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 1461, 0, 0, 0, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1156, 1156, 1156, 0, 1457, 0, 1458, 0,
	0, 1436, 1437, 1438, 1439, 1428, 1429, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 1055, 0, 1155, 0, 0, 0, 0, 1434, 0,
	0, 0, 1155, 1155, 1451, 0, 0, 1461, 0, 0,
	0, 1441, 1442, 1443, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	3158, 1448, 1457, 0, 1458, 0, 0, 0, 0, 0,
	0, 1428, 1429, 1054, 0, 0, 0, 0, 0, 598,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 3196, 1440, 0, 0, 0, 0, 0, 0, 0,
	599, 618, 1459, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 600, 3219, 1166, 601, 0, 0, 0, 1055, 0,
	1055, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	624, 0, 0, 0, 0, 0, 602, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 603, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 1156, 0, 1055, 0, 1156,
	0, 0, 604, 0, 0, 605, 628, 0, 0, 0,
	631, 1452, 0, 0, 3267, 0, 0, 0, 0, 0,
	1055, 0, 0, 1156, 0, 0, 0, 0, 1450, 0,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0,
	0, 0, 0, 0, 2993, 0, 0, 0, 0, 0,
	1055, 0, 0, 3301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3316, 0, 0, 627, 0, 0, 0,
	0, 0, 0, 608, 0, 0, 0, 1055, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 606, 0, 0, 0, 0, 0,
	2736, 0, 0, 609, 0, 1055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1055, 0, 0,
	610, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 611, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	612, 0, 1156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 617, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 613,
	0, 0, 626, 0, 625, 0, 0, 0, 0, 614,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 615, 0, 0, 0, 0, 621, 0, 0, 0,
	0, 632, 0, 629, 0, 0, 0, 619, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1156, 0, 0, 0, 0, 0, 0, 0, 0,
	1156, 1156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1055, 213, 214, 215, 216, 217, 1059, 218, 1060,
	1061, 1062, 1063, 459, 1064, 1065, 1066, 1067, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 1068,
	226, 227, 228, 229, 230, 231, 1069, 1070, 232, 464,
	465, 466, 1071, 233, 467, 1072, 1057, 1073, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1074, 243,
	0, 244, 245, 246, 1075, 932, 247, 248, 1076, 1077,
	1079, 1078, 1080, 1081, 1082, 249, 250, 251, 252, 253,
	254, 468, 469, 1083, 255, 1084, 257, 256, 1085, 258,
	1086, 1087, 259, 260, 261, 1088, 262, 1089, 263, 264,
	1090, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 1091, 210, 1092, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 1093, 281, 1094,
	1095, 933, 282, 283, 1096, 284, 474, 1097, 475, 285,
	1098, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 1099, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 1100, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 1101, 481, 1102, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 1103, 315, 314, 1104, 316, 483, 939, 317, 318,
	940, 1105, 319, 320, 1106, 1107, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 1108, 212, 942, 1109, 484, 485,
	337, 338, 1110, 339, 340, 341, 1111, 1112, 343, 344,
	345, 1113, 1114, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 1115, 355, 356,
	488, 357, 489, 358, 1116, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 1117, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 1118, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 1119,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	1120, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	1121, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 1122, 424, 425, 423, 1123, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 1124, 494, 495,
	496, 497, 1125, 439, 1126, 433, 434, 498, 435, 499,
	1127, 436, 437, 438, 0, 440, 441, 1128, 1129, 442,
	443, 444, 445, 447, 1130, 448, 1131, 446, 449, 450,
	451, 500, 501, 502, 1132, 453, 452, 503, 1133, 1134,
	1135, 1136, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1052, 0, 0, 0, 0, 0, 0, 0, 2119, 0,
	0, 0, 0, 0, 0, 0, 2120, 213, 214, 215,
	216, 217, 1059, 218, 1060, 1061, 1062, 1063, 459, 1064,
	1065, 1066, 1067, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 1068, 226, 227, 228, 229, 230,
	231, 1069, 1070, 232, 464, 465, 466, 1071, 233, 467,
	1072, 1057, 1073, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1074, 243, 0, 244, 245, 246, 1075,
	932, 247, 248, 1076, 1077, 1079, 1078, 1080, 1081, 1082,
	249, 250, 251, 252, 253, 254, 468, 469, 1083, 255,
	1084, 257, 256, 1085, 258, 1086, 1087, 259, 260, 261,
	1088, 262, 1089, 263, 264, 1090, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 1091, 210, 1092,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 1093, 281, 1094, 1095, 933, 282, 283, 1096,
	284, 474, 1097, 475, 285, 1098, 286, 287, 288, 289,
	476, 477, 478, 935, 290, 291, 1099, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 1100, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 1101, 481, 1102,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 1103, 315, 314, 1104,
	316, 483, 939, 317, 318, 940, 1105, 319, 320, 1106,
	1107, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 1108,
	212, 942, 1109, 484, 485, 337, 338, 1110, 339, 340,
	341, 1111, 1112, 343, 344, 345, 1113, 1114, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 1115, 355, 356, 488, 357, 489, 358, 1116,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 1117, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 1118, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 1119, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 1120, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 1121, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 1122, 424,
	425, 423, 1123, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 1124, 494, 495, 496, 497, 1125, 439, 1126,
	433, 434, 498, 435, 499, 1127, 436, 437, 438, 0,
	440, 441, 1128, 1129, 442, 443, 444, 445, 447, 1130,
	448, 1131, 446, 449, 450, 451, 500, 501, 502, 1132,
	453, 452, 503, 1133, 1134, 1135, 1136, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3019, 213, 214, 215, 216, 217, 1059,
	218, 1060, 1061, 1062, 1063, 459, 1064, 1065, 1066, 1067,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 1068, 226, 227, 228, 229, 230, 231, 1069, 1070,
	232, 464, 465, 466, 1071, 233, 467, 1072, 1057, 1073,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1074, 243, 0, 244, 245, 246, 1075, 932, 247, 248,
	1076, 1077, 1079, 1078, 1080, 1081, 1082, 249, 250, 251,
	252, 253, 254, 468, 469, 1083, 255, 1084, 257, 256,
	1085, 258, 1086, 1087, 259, 260, 261, 1088, 262, 1089,
	263, 264, 1090, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 1091, 210, 1092, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 1093,
	281, 1094, 1095, 933, 282, 283, 1096, 284, 474, 1097,
	475, 285, 1098, 286, 287, 288, 289, 476, 477, 478,
	935, 290, 291, 1099, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 1100, 934, 297, 479, 299, 298,
	300, 301, 302, 480, 1101, 481, 1102, 304, 936, 482,
	937, 305, 306, 307, 938, 308, 309, 0, 0, 310,
	311, 312, 313, 1103, 315, 314, 1104, 316, 483, 939,
	317, 318, 940, 1105, 319, 320, 1106, 1107, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 941, 333, 334, 336, 335, 1108, 212, 942, 1109,
	484, 485, 337, 338, 1110, 339, 340, 341, 1111, 1112,
	343, 344, 345, 1113, 1114, 346, 486, 943, 347, 944,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 1115,
	355, 356, 488, 357, 489, 358, 1116, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 1117, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 1118, 381, 945, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 1119, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 1120, 408, 388, 389, 409, 946, 410, 492,
	411, 412, 1121, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 1122, 424, 425, 423, 1123,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 1124,
	494, 495, 496, 497, 1125, 439, 1126, 433, 434, 498,
	435, 499, 1127, 436, 437, 438, 0, 440, 441, 1128,
	1129, 442, 443, 444, 445, 447, 1130, 448, 1131, 446,
	449, 450, 451, 500, 501, 502, 1132, 453, 452, 503,
	1133, 1134, 1135, 1136, 454, 455, 504, 456, 457, 458,
	1052, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3125, 0, 213, 214, 215,
	216, 217, 1059, 218, 1060, 1061, 1062, 1063, 459, 1064,
	1065, 1066, 1067, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 1068, 226, 227, 228, 229, 230,
	231, 1069, 1070, 232, 464, 465, 466, 1071, 233, 467,
	1072, 1057, 1073, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1074, 243, 0, 244, 245, 246, 1075,
	932, 247, 248, 1076, 1077, 1079, 1078, 1080, 1081, 1082,
	249, 250, 251, 252, 253, 254, 468, 469, 1083, 255,
	1084, 257, 256, 1085, 258, 1086, 1087, 259, 260, 261,
	1088, 262, 1089, 263, 264, 1090, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 1091, 210, 1092,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 1093, 281, 1094, 1095, 933, 282, 283, 1096,
	284, 474, 1097, 475, 285, 1098, 286, 287, 288, 289,
	476, 477, 478, 935, 290, 291, 1099, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 1100, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 1101, 481, 1102,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 1103, 315, 314, 1104,
	316, 483, 939, 317, 318, 940, 1105, 319, 320, 1106,
	1107, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 1108,
	212, 942, 1109, 484, 485, 337, 338, 1110, 339, 340,
	341, 1111, 1112, 343, 344, 345, 1113, 1114, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 1115, 355, 356, 488, 357, 489, 358, 1116,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 1117, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 1118, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 1119, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 1120, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 1121, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 1122, 424,
	425, 423, 1123, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 1124, 494, 495, 496, 497, 1125, 439, 1126,
	433, 434, 498, 435, 499, 1127, 436, 437, 438, 0,
	440, 441, 1128, 1129, 442, 443, 444, 445, 447, 1130,
	448, 1131, 446, 449, 450, 451, 500, 501, 502, 1132,
	453, 452, 503, 1133, 1134, 1135, 1136, 454, 455, 504,
	456, 457, 458, 1052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2761, 0,
	213, 214, 215, 216, 217, 1059, 218, 1060, 1061, 1062,
	1063, 459, 1064, 1065, 1066, 1067, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 1068, 226, 227,
	228, 229, 230, 231, 1069, 1070, 232, 464, 465, 466,
	1071, 233, 467, 1072, 1057, 1073, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 1074, 243, 0, 244,
	245, 246, 1075, 932, 247, 248, 1076, 1077, 1079, 1078,
	1080, 1081, 1082, 249, 250, 251, 252, 253, 254, 468,
	469, 1083, 255, 1084, 257, 256, 1085, 258, 1086, 1087,
	259, 260, 261, 1088, 262, 1089, 263, 264, 1090, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	1091, 210, 1092, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 1093, 281, 1094, 1095, 933,
	282, 283, 1096, 284, 474, 1097, 475, 285, 1098, 286,
	287, 288, 289, 476, 477, 478, 935, 290, 291, 1099,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	1100, 934, 297, 479, 299, 298, 300, 301, 302, 480,
	1101, 481, 1102, 304, 936, 482, 937, 305, 306, 307,
	938, 308, 309, 0, 0, 310, 311, 312, 313, 1103,
	315, 314, 1104, 316, 483, 939, 317, 318, 940, 1105,
	319, 320, 1106, 1107, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 941, 333, 334,
	336, 335, 1108, 212, 942, 1109, 484, 485, 337, 338,
	1110, 339, 340, 341, 1111, 1112, 343, 344, 345, 1113,
	1114, 346, 486, 943, 347, 944, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 1115, 355, 356, 488, 357,
	489, 358, 1116, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 1117, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 1118,
	381, 945, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 1119, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 1120, 408,
	388, 389, 409, 946, 410, 492, 411, 412, 1121, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 1122, 424, 425, 423, 1123, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 1124, 494, 495, 496, 497,
	1125, 439, 1126, 433, 434, 498, 435, 499, 1127, 436,
	437, 438, 0, 440, 441, 1128, 1129, 442, 443, 444,
	445, 447, 1130, 448, 1131, 446, 449, 450, 451, 500,
	501, 502, 1132, 453, 452, 503, 1133, 1134, 1135, 1136,
	454, 455, 504, 456, 457, 458, 1052, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2753, 0, 213, 214, 215, 216, 217, 1059, 218,
	1060, 1061, 1062, 1063, 459, 1064, 1065, 1066, 1067, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	1068, 226, 227, 228, 229, 230, 231, 1069, 1070, 232,
	464, 465, 466, 1071, 233, 467, 1072, 1057, 1073, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 1074,
	243, 0, 244, 245, 246, 1075, 932, 247, 248, 1076,
	1077, 1079, 1078, 1080, 1081, 1082, 249, 250, 251, 252,
	253, 254, 468, 469, 1083, 255, 1084, 257, 256, 1085,
	258, 1086, 1087, 259, 260, 261, 1088, 262, 1089, 263,
	264, 1090, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 1091, 210, 1092, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 1093, 281,
	1094, 1095, 933, 282, 283, 1096, 284, 474, 1097, 475,
	285, 1098, 286, 287, 288, 289, 476, 477, 478, 935,
	290, 291, 1099, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 1100, 934, 297, 479, 299, 298, 300,
	301, 302, 480, 1101, 481, 1102, 304, 936, 482, 937,
	305, 306, 307, 938, 308, 309, 0, 0, 310, 311,
	312, 313, 1103, 315, 314, 1104, 316, 483, 939, 317,
	318, 940, 1105, 319, 320, 1106, 1107, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	941, 333, 334, 336, 335, 1108, 212, 942, 1109, 484,
	485, 337, 338, 1110, 339, 340, 341, 1111, 1112, 343,
	344, 345, 1113, 1114, 346, 486, 943, 347, 944, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 1115, 355,
	356, 488, 357, 489, 358, 1116, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 1117, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 1118, 381, 945, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	1119, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 1120, 408, 388, 389, 409, 946, 410, 492, 411,
	412, 1121, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 1122, 424, 425, 423, 1123, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 1124, 494,
	495, 496, 497, 1125, 439, 1126, 433, 434, 498, 435,
	499, 1127, 436, 437, 438, 0, 440, 441, 1128, 1129,
	442, 443, 444, 445, 447, 1130, 448, 1131, 446, 449,
	450, 451, 500, 501, 502, 1132, 453, 452, 503, 1133,
	1134, 1135, 1136, 454, 455, 504, 456, 457, 458, 1052,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2627, 0, 213, 214, 215, 216,
	217, 1059, 218, 1060, 1061, 1062, 1063, 459, 1064, 1065,
	1066, 1067, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 1068, 226, 227, 228, 229, 230, 231,
	1069, 1070, 232, 464, 465, 466, 1071, 233, 467, 1072,
	1057, 1073, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 1074, 243, 0, 244, 245, 246, 1075, 932,
	247, 248, 1076, 1077, 1079, 1078, 1080, 1081, 1082, 249,
	250, 251, 252, 253, 254, 468, 469, 1083, 255, 1084,
	257, 256, 1085, 258, 1086, 1087, 259, 260, 261, 1088,
	262, 1089, 263, 264, 1090, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 1091, 210, 1092, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 1093, 281, 1094, 1095, 933, 282, 283, 1096, 284,
	474, 1097, 475, 285, 1098, 286, 287, 288, 289, 476,
	477, 478, 935, 290, 291, 1099, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 1100, 934, 297, 479,
	299, 298, 300, 301, 302, 480, 1101, 481, 1102, 304,
	936, 482, 937, 305, 306, 307, 938, 308, 309, 0,
	0, 310, 311, 312, 313, 1103, 315, 314, 1104, 316,
	483, 939, 317, 318, 940, 1105, 319, 320, 1106, 1107,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 941, 333, 334, 336, 335, 1108, 212,
	942, 1109, 484, 485, 337, 338, 1110, 339, 340, 341,
	1111, 1112, 343, 344, 345, 1113, 1114, 346, 486, 943,
	347, 944, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 1115, 355, 356, 488, 357, 489, 358, 1116, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	1117, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 1118, 381, 945, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 1119, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 1120, 408, 388, 389, 409, 946,
	410, 492, 411, 412, 1121, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 1122, 424, 425,
	423, 1123, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 1124, 494, 495, 496, 497, 1125, 439, 1126, 433,
	434, 498, 435, 499, 1127, 436, 437, 438, 0, 440,
	441, 1128, 1129, 442, 443, 444, 445, 447, 1130, 448,
	1131, 446, 449, 450, 451, 500, 501, 502, 1132, 453,
	452, 503, 1133, 1134, 1135, 1136, 454, 455, 504, 456,
	457, 458, 1052, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2017, 0, 213,
	214, 215, 216, 217, 1059, 218, 1060, 1061, 1062, 1063,
	459, 1064, 1065, 1066, 1067, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 1068, 226, 227, 228,
	229, 230, 231, 1069, 1070, 232, 464, 465, 466, 1071,
	233, 467, 1072, 1057, 1073, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 1074, 243, 0, 244, 245,
	246, 1075, 932, 247, 248, 1076, 1077, 1079, 1078, 1080,
	1081, 1082, 249, 250, 251, 252, 253, 254, 468, 469,
	1083, 255, 1084, 257, 256, 1085, 258, 1086, 1087, 259,
	260, 261, 1088, 262, 1089, 263, 264, 1090, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 1091,
	210, 1092, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 1093, 281, 1094, 1095, 933, 282,
	283, 1096, 284, 474, 1097, 475, 285, 1098, 286, 287,
	288, 289, 476, 477, 478, 935, 290, 291, 1099, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 1100,
	934, 297, 479, 299, 298, 300, 301, 302, 480, 1101,
	481, 1102, 304, 936, 482, 937, 305, 306, 307, 938,
	308, 309, 0, 0, 310, 311, 312, 313, 1103, 315,
	314, 1104, 316, 483, 939, 317, 318, 940, 1105, 319,
	320, 1106, 1107, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 941, 333, 334, 336,
	335, 1108, 212, 942, 1109, 484, 485, 337, 338, 1110,
	339, 340, 341, 1111, 1112, 343, 344, 345, 1113, 1114,
	346, 486, 943, 347, 944, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 1115, 355, 356, 488, 357, 489,
	358, 1116, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 1117, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 1118, 381,
	945, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 1119, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 1120, 408, 388,
	389, 409, 946, 410, 492, 411, 412, 1121, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	1122, 424, 425, 423, 1123, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 1124, 494, 495, 496, 497, 1125,
	439, 1126, 433, 434, 498, 435, 499, 1127, 436, 437,
	438, 0, 440, 441, 1128, 1129, 442, 443, 444, 445,
	447, 1130, 448, 1131, 446, 449, 450, 451, 500, 501,
	502, 1132, 453, 452, 503, 1133, 1134, 1135, 1136, 454,
	455, 504, 456, 457, 458, 1160, 0, 1052, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1751, 0, 0, 0, 213, 214, 215, 216, 217, 1059,
	218, 1060, 1061, 1062, 1063, 459, 1064, 1065, 1066, 1067,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 1068, 226, 227, 228, 229, 230, 231, 1069, 1070,
	232, 464, 465, 466, 1071, 233, 467, 1072, 1057, 1073,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	1074, 243, 0, 244, 245, 246, 1075, 932, 247, 248,
	1076, 1077, 1079, 1078, 1080, 1081, 1082, 249, 250, 251,
	252, 253, 254, 468, 469, 1083, 255, 1084, 257, 256,
	1085, 258, 1086, 1087, 259, 260, 261, 1088, 262, 1089,
	263, 264, 1090, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 1091, 210, 1092, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 1093,
	281, 1094, 1095, 933, 282, 283, 1096, 284, 474, 1097,
	475, 285, 1098, 286, 287, 288, 289, 476, 477, 478,
	935, 290, 291, 1099, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 1100, 934, 297, 479, 299, 298,
	300, 301, 302, 480, 1101, 481, 1102, 304, 936, 482,
	937, 305, 306, 307, 938, 308, 309, 0, 0, 310,
	311, 312, 313, 1103, 315, 314, 1104, 316, 483, 939,
	317, 318, 940, 1105, 319, 320, 1106, 1107, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 941, 333, 334, 336, 335, 1108, 212, 942, 1109,
	484, 485, 337, 338, 1110, 339, 340, 341, 1111, 1112,
	343, 344, 345, 1113, 1114, 346, 486, 943, 347, 944,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 1115,
	355, 356, 488, 357, 489, 358, 1116, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 1117, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 1118, 381, 945, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 1119, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 1120, 408, 388, 389, 409, 946, 410, 492,
	411, 412, 1121, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 1122, 424, 425, 423, 1123,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 1124,
	494, 495, 496, 497, 1125, 439, 1126, 433, 434, 498,
	435, 499, 1127, 436, 437, 438, 0, 440, 441, 1128,
	1129, 442, 443, 444, 445, 447, 1130, 448, 1131, 446,
	449, 450, 451, 500, 501, 502, 1132, 453, 452, 503,
	1133, 1134, 1135, 1136, 454, 455, 504, 456, 457, 458,
	1049, 0, 1052, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 1059, 218, 1060, 1061, 1062, 1063,
	459, 1064, 1065, 1066, 1067, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 1068, 226, 227, 228,
	229, 230, 231, 1069, 1070, 232, 464, 465, 466, 1071,
	233, 467, 1072, 1057, 1073, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 1074, 243, 0, 244, 245,
	246, 1075, 932, 247, 248, 1076, 1077, 1079, 1078, 1080,
	1081, 1082, 249, 250, 251, 252, 253, 254, 468, 469,
	1083, 255, 1084, 257, 256, 1085, 258, 1086, 1087, 259,
	260, 261, 1088, 262, 1089, 263, 264, 1090, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 1091,
	210, 1092, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 1093, 281, 1094, 1095, 933, 282,
	283, 1096, 284, 474, 1097, 475, 285, 1098, 286, 287,
	288, 289, 476, 477, 478, 935, 290, 291, 1099, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 1100,
	934, 297, 479, 299, 298, 300, 301, 302, 480, 1101,
	481, 1102, 304, 936, 482, 937, 305, 306, 307, 938,
	308, 309, 0, 0, 310, 311, 312, 313, 1103, 315,
	314, 1104, 316, 483, 939, 317, 318, 940, 1105, 319,
	320, 1106, 1107, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 941, 333, 334, 336,
	335, 1108, 212, 942, 1109, 484, 485, 337, 338, 1110,
	339, 340, 341, 1111, 1112, 343, 344, 345, 1113, 1114,
	346, 486, 943, 347, 944, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 1115, 355, 356, 488, 357, 489,
	358, 1116, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 1117, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 1118, 381,
	945, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 1119, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 1120, 408, 388,
	389, 409, 946, 410, 492, 411, 412, 1121, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	1122, 424, 425, 423, 1123, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 1124, 494, 495, 496, 497, 1125,
	439, 1126, 433, 434, 498, 435, 499, 1127, 436, 437,
	438, 0, 440, 441, 1128, 1129, 442, 443, 444, 445,
	447, 1130, 448, 1131, 446, 449, 450, 451, 500, 501,
	502, 1132, 453, 452, 503, 1133, 1134, 1135, 1136, 454,
	455, 504, 456, 457, 458, 1052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 1059, 218, 1060,
	1061, 1062, 1063, 459, 1064, 1065, 1066, 1067, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 1068,
	226, 227, 228, 229, 230, 231, 1069, 1070, 232, 464,
	465, 466, 1071, 233, 467, 1072, 1057, 1073, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 1074, 243,
	0, 244, 245, 246, 1075, 932, 247, 248, 1076, 1077,
	1079, 1078, 1080, 1081, 1082, 249, 250, 251, 252, 253,
	254, 468, 469, 1083, 255, 1084, 257, 256, 1085, 258,
	1086, 1087, 259, 260, 261, 1088, 262, 1089, 263, 264,
	1090, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 1091, 210, 1092, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 1093, 281, 1094,
	1095, 933, 282, 283, 1096, 284, 474, 1097, 475, 285,
	1098, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 1099, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 1100, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 1101, 481, 1102, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 1103, 315, 314, 1104, 316, 483, 939, 317, 318,
	940, 1105, 319, 320, 1106, 1107, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 1108, 212, 942, 1109, 484, 485,
	337, 338, 1110, 339, 340, 341, 1111, 1112, 343, 344,
	345, 1113, 1114, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 1115, 355, 356,
	488, 357, 489, 358, 1116, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 1117, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 1118, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 1119,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	1120, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	1121, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 1122, 424, 425, 423, 1123, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 1124, 494, 495,
	496, 497, 1125, 439, 1126, 433, 434, 498, 435, 499,
	1127, 436, 437, 438, 0, 440, 441, 1128, 1129, 442,
	443, 444, 445, 447, 1130, 448, 1131, 446, 449, 450,
	451, 500, 501, 502, 1132, 453, 452, 503, 1133, 1134,
	1135, 1136, 454, 455, 504, 456, 457, 458, 1993, 0,
	874, 831, 832, 833, 829, 830, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 1990, 218, 0, 0, 0, 0, 923, 848,
	0, 0, 0, 219, 220, 221, 222, 460, 889, 868,
	900, 858, 899, 898, 0, 226, 860, 859, 229, 230,
	231, 850, 922, 232, 958, 959, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 903, 254, 896, 895, 820, 255,
	0, 257, 256, 0, 258, 1991, 0, 259, 894, 261,
	0, 262, 0, 263, 264, 0, 826, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 839, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 893, 891, 892,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 849, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 870,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	882, 873, 884, 886, 887, 888, 883, 0, 875, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 908, 909,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 862, 330, 941, 333, 334, 336, 335, 817,
	212, 942, 840, 927, 897, 337, 338, 0, 871, 340,
	872, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 890, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 827, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 863, 864, 866,
	867, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 885, 865, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 931, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 861, 0, 904, 905, 906, 907, 0, 439, 0,
	433, 434, 954, 435, 955, 838, 436, 437, 438, 0,
	440, 441, 0, 821, 442, 443, 444, 445, 447, 921,
	448, 0, 869, 449, 450, 451, 500, 901, 948, 1989,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 818, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 814, 815, 1992, 0,
	0, 0, 0, 0, 0, 844, 1988, 0, 0, 807,
	842, 874, 831, 832, 833, 829, 830, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 923,
	848, 0, 0, 0, 219, 220, 221, 222, 460, 889,
	868, 900, 858, 899, 898, 0, 226, 860, 859, 229,
	230, 231, 850, 922, 232, 958, 959, 466, 0, 233,
	929, 0, 912, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 932, 247, 248, 915, 913, 914, 919, 917, 916,
	918, 249, 250, 251, 252, 903, 254, 896, 895, 820,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 894,
	261, 0, 262, 0, 263, 264, 0, 826, 265, 266,
	268, 271, 267, 272, 273, 274, 949, 950, 839, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 893, 891,
	892, 0, 280, 0, 281, 0, 0, 933, 282, 283,
	0, 284, 956, 0, 849, 285, 0, 286, 287, 288,
	289, 924, 925, 928, 935, 290, 291, 0, 292, 293,
	870, 0, 0, 0, 211, 294, 296, 303, 0, 934,
	297, 882, 873, 884, 886, 887, 888, 883, 0, 875,
	0, 304, 936, 926, 937, 305, 306, 307, 938, 908,
	909, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 957, 939, 317, 318, 940, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 862, 330, 941, 333, 334, 336, 335,
	817, 212, 942, 840, 927, 897, 337, 338, 0, 871,
	340, 872, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 943, 347, 944, 951, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 952, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 890,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 945,
	382, 383, 384, 385, 827, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 176, 404, 405, 863, 864,
	866, 867, 399, 403, 406, 407, 920, 408, 388, 389,
	409, 946, 410, 885, 865, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 931, 417, 418, 419, 953, 0,
	424, 425, 423, 178, 426, 427, 428, 429, 430, 269,
	431, 270, 861, 0, 904, 905, 906, 907, 0, 439,
	0, 433, 434, 954, 435, 955, 838, 436, 437, 438,
	0, 440, 441, 0, 821, 442, 443, 444, 445, 447,
	921, 448, 0, 869, 449, 450, 451, 1299, 901, 948,
	0, 453, 452, 503, 0, 0, 0, 170, 454, 455,
	504, 456, 457, 458, 818, 171, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 814, 815, 874,
	831, 832, 833, 829, 830, 843, 1488, 1486, 0, 0,
	0, 842, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 848, 0,
	0, 0, 219, 220, 221, 222, 460, 889, 868, 900,
	858, 899, 898, 0, 226, 860, 859, 229, 230, 231,
	850, 922, 232, 958, 959, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 903, 254, 896, 895, 820, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 894, 261, 0,
	262, 0, 263, 264, 0, 826, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 839, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 893, 891, 892, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 849, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 870, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 882,
	873, 884, 886, 887, 888, 883, 0, 875, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 908, 909, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 862, 330, 941, 333, 334, 336, 335, 817, 212,
	942, 840, 927, 897, 337, 338, 0, 871, 340, 872,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 890, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 827, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 176, 404, 405, 863, 864, 866, 867,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 885, 865, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 931, 417, 418, 419, 953, 0, 424, 425,
	423, 178, 426, 427, 428, 429, 430, 269, 431, 270,
	861, 0, 904, 905, 906, 907, 0, 439, 0, 433,
	434, 954, 435, 955, 838, 436, 437, 438, 0, 440,
	441, 0, 821, 442, 443, 444, 445, 447, 921, 448,
	0, 869, 449, 450, 451, 1299, 901, 948, 0, 453,
	452, 503, 0, 0, 0, 170, 454, 455, 504, 456,
	457, 458, 818, 171, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 814, 815, 874, 831, 832,
	833, 829, 830, 843, 1488, 2392, 0, 0, 0, 842,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 923, 848, 0, 0, 0,
	219, 220, 221, 222, 460, 889, 868, 900, 858, 899,
	898, 0, 226, 860, 859, 229, 230, 231, 850, 922,
	232, 958, 959, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 903, 254, 896, 895, 820, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 894, 261, 0, 262, 0,
	263, 264, 0, 826, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 839, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 893, 891, 892, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	849, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 870, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 882, 873, 884,
	886, 887, 888, 883, 0, 875, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 908, 909, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 862,
	330, 941, 333, 334, 336, 335, 817, 212, 942, 840,
	927, 897, 337, 338, 0, 871, 340, 872, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 890, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	827, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 176, 404, 405, 863, 864, 866, 867, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 885,
	865, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	931, 417, 418, 419, 953, 0, 424, 425, 423, 178,
	426, 427, 428, 429, 430, 269, 431, 270, 861, 0,
	904, 905, 906, 907, 0, 439, 0, 433, 434, 954,
	435, 955, 838, 436, 437, 438, 0, 440, 441, 0,
	821, 442, 443, 444, 445, 447, 921, 448, 0, 869,
	449, 450, 451, 1299, 901, 948, 0, 453, 452, 503,
	0, 0, 0, 170, 454, 455, 504, 456, 457, 458,
	818, 171, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 814, 815, 874, 831, 832, 833, 829,
	830, 843, 1488, 1486, 0, 0, 0, 842, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 2078,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	2083, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 2079, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 2080, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 818, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 810, 842, 874, 831, 832, 833,
	829, 830, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 848, 0, 0, 0, 219,
	220, 221, 222, 460, 889, 868, 900, 858, 899, 898,
	0, 226, 860, 859, 229, 230, 231, 850, 922, 232,
	958, 959, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	903, 254, 896, 895, 820, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 894, 261, 0, 262, 0, 263,
	264, 0, 826, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 839, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 893, 891, 892, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 956, 0, 849,
	285, 0, 286, 287, 288, 289, 924, 925, 928, 935,
	290, 291, 0, 292, 293, 870, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 882, 873, 884, 886,
	887, 888, 883, 0, 875, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 908, 909, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 862, 330,
	941, 333, 334, 336, 335, 817, 212, 942, 840, 927,
	897, 337, 338, 0, 871, 340, 872, 822, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 890, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 827,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 863, 864, 866, 867, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 885, 865,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 931,
	417, 418, 419, 953, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 861, 0, 904,
	905, 906, 907, 0, 439, 0, 433, 434, 954, 435,
	955, 838, 436, 437, 438, 0, 440, 441, 0, 821,
	442, 443, 444, 445, 447, 921, 448, 0, 869, 449,
	450, 451, 500, 901, 948, 0, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 818,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 814, 815, 874, 831, 832, 833, 829, 830,
	843, 844, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 460, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 3313, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 254,
	896, 895, 820, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 862, 330, 941, 333,
	334, 336, 335, 817, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 822, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 440, 441, 0, 821, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	500, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 818, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	814, 815, 874, 831, 832, 833, 829, 830, 843, 844,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	923, 848, 0, 0, 0, 219, 220, 221, 222, 460,
	889, 868, 900, 858, 899, 898, 0, 226, 860, 859,
	229, 230, 231, 850, 922, 232, 958, 959, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 3181,
	246, 0, 932, 247, 248, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 903, 254, 896, 895,
	820, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	894, 261, 0, 262, 0, 263, 264, 0, 826, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 839,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 893,
	891, 892, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 849, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 935, 290, 291, 0, 292,
	293, 870, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 882, 873, 884, 886, 887, 888, 883, 0,
	875, 0, 304, 936, 926, 937, 305, 306, 307, 938,
	908, 909, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 957, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 862, 330, 941, 333, 334, 336,
	335, 817, 212, 942, 840, 927, 897, 337, 338, 0,
	871, 340, 872, 822, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	890, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 827, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 863,
	864, 866, 867, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 946, 410, 885, 865, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 931, 417, 418, 419, 953,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 861, 0, 904, 905, 906, 907, 0,
	439, 0, 433, 434, 954, 435, 955, 838, 436, 437,
	438, 0, 440, 441, 0, 821, 442, 443, 444, 445,
	447, 921, 448, 0, 869, 449, 450, 451, 500, 901,
	948, 0, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 818, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 814, 815,
	874, 831, 832, 833, 829, 830, 843, 844, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 848,
	0, 0, 0, 219, 220, 221, 222, 460, 889, 868,
	900, 858, 899, 898, 0, 226, 860, 859, 229, 230,
	231, 850, 922, 232, 958, 959, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 903, 254, 896, 895, 820, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 894, 261,
	0, 262, 0, 263, 264, 0, 826, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 839, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 893, 891, 892,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 849, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 870,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	882, 873, 884, 886, 887, 888, 883, 0, 875, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 908, 909,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 862, 330, 941, 333, 334, 336, 335, 817,
	2928, 942, 840, 927, 897, 337, 338, 0, 871, 340,
	872, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 890, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 827, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 863, 864, 866,
	867, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 885, 865, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 931, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 861, 0, 904, 905, 906, 907, 0, 439, 0,
	433, 434, 954, 435, 955, 838, 436, 437, 438, 0,
	440, 441, 0, 821, 442, 443, 444, 445, 447, 921,
	448, 0, 869, 449, 450, 451, 500, 901, 948, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 818, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 814, 815, 1548, 0,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	842, 874, 831, 832, 833, 829, 830, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 923,
	848, 0, 0, 0, 219, 220, 221, 222, 460, 889,
	868, 900, 858, 899, 898, 0, 226, 860, 859, 229,
	230, 231, 850, 922, 232, 958, 959, 466, 0, 233,
	929, 0, 912, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 932, 247, 248, 915, 913, 914, 919, 917, 916,
	918, 249, 250, 251, 252, 903, 254, 896, 895, 820,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 894,
	261, 0, 262, 0, 263, 264, 0, 826, 265, 266,
	268, 271, 267, 272, 273, 274, 949, 950, 839, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 893, 891,
	892, 0, 280, 0, 281, 0, 0, 933, 282, 283,
	0, 284, 956, 0, 849, 285, 0, 286, 287, 288,
	289, 924, 925, 928, 935, 290, 291, 0, 292, 293,
	870, 0, 0, 0, 211, 294, 296, 303, 0, 934,
	297, 882, 873, 884, 886, 887, 888, 883, 0, 875,
	0, 304, 936, 926, 937, 305, 306, 307, 938, 908,
	909, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 957, 939, 317, 318, 940, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 862, 330, 941, 333, 334, 336, 335,
	817, 212, 942, 840, 927, 897, 337, 338, 0, 871,
	340, 872, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 943, 347, 944, 951, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 952, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 890,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 945,
	382, 383, 384, 385, 827, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 863, 864,
	866, 867, 399, 403, 406, 407, 920, 408, 388, 389,
	409, 946, 410, 885, 865, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 931, 417, 418, 419, 953, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 861, 0, 904, 905, 906, 907, 0, 439,
	0, 433, 434, 954, 435, 955, 838, 436, 437, 438,
	0, 440, 441, 0, 821, 442, 443, 444, 445, 447,
	921, 448, 0, 869, 449, 450, 451, 500, 901, 948,
	2740, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 818, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 814, 815, 874,
	831, 832, 833, 829, 830, 843, 844, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 848, 0,
	0, 0, 219, 220, 221, 222, 460, 889, 868, 900,
	858, 899, 898, 0, 226, 860, 859, 229, 230, 231,
	850, 922, 232, 958, 959, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 903, 254, 896, 895, 820, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 894, 261, 0,
	262, 0, 263, 264, 0, 826, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 839, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 893, 891, 892, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 849, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 870, 0,
	0, 0, 1907, 294, 296, 303, 0, 934, 297, 882,
	873, 884, 886, 887, 888, 883, 0, 875, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 908, 909, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 862, 330, 941, 333, 334, 336, 335, 817, 212,
	942, 840, 927, 897, 337, 338, 0, 871, 340, 872,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 1906, 359,
	0, 360, 361, 362, 363, 364, 365, 890, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 827, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 863, 864, 866, 867,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 885, 865, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 931, 417, 418, 419, 953, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	861, 0, 904, 905, 906, 907, 0, 439, 0, 433,
	434, 954, 435, 955, 838, 436, 437, 438, 0, 440,
	441, 0, 821, 442, 443, 444, 445, 447, 921, 448,
	0, 869, 449, 450, 451, 500, 901, 948, 0, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 818, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 814, 815, 874, 831, 832,
	833, 829, 830, 843, 844, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 923, 848, 0, 0, 0,
	219, 220, 221, 222, 460, 889, 868, 900, 858, 899,
	898, 0, 226, 860, 859, 229, 230, 231, 850, 922,
	232, 958, 959, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 903, 254, 896, 895, 820, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 894, 261, 0, 262, 0,
	263, 264, 0, 826, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 839, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 893, 891, 892, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	849, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 870, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 882, 873, 884,
	886, 887, 888, 883, 0, 875, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 908, 909, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 862,
	330, 941, 333, 334, 336, 335, 817, 212, 942, 840,
	927, 897, 337, 338, 0, 871, 340, 872, 822, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 890, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	827, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 863, 864, 866, 867, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 885,
	865, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	931, 417, 418, 419, 953, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 861, 0,
	904, 905, 906, 907, 0, 439, 0, 433, 434, 954,
	435, 955, 838, 436, 437, 438, 0, 440, 441, 0,
	821, 442, 443, 444, 445, 447, 921, 448, 0, 869,
	449, 450, 451, 500, 901, 948, 0, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	818, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 814, 815, 874, 831, 832, 833, 829,
	830, 843, 844, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 818, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 1548, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 842, 874, 831, 832, 833,
	829, 830, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 848, 0, 0, 0, 219,
	220, 221, 222, 460, 889, 868, 900, 858, 899, 898,
	0, 226, 860, 859, 229, 230, 231, 850, 922, 232,
	958, 959, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	903, 254, 896, 895, 820, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 894, 261, 0, 262, 0, 263,
	264, 0, 826, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 839, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 893, 891, 892, 0, 280, 0, 281,
	0, 2083, 933, 282, 283, 0, 284, 956, 0, 849,
	285, 0, 286, 287, 288, 289, 924, 925, 928, 935,
	290, 291, 0, 292, 293, 870, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 882, 873, 884, 886,
	887, 888, 883, 0, 875, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 908, 909, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 862, 330,
	941, 333, 334, 336, 335, 817, 212, 942, 840, 927,
	897, 337, 338, 0, 871, 340, 872, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 890, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 827,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 863, 864, 866, 867, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 885, 865,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 931,
	417, 418, 419, 953, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 861, 0, 904,
	905, 906, 907, 0, 439, 0, 433, 434, 954, 435,
	955, 838, 436, 437, 438, 0, 440, 441, 0, 821,
	442, 443, 444, 445, 447, 921, 448, 0, 869, 449,
	450, 451, 500, 901, 948, 0, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 818,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 814, 815, 874, 831, 832, 833, 829, 830,
	843, 844, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 460, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 254,
	896, 895, 820, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 862, 330, 941, 333,
	334, 336, 335, 817, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 440, 441, 0, 821, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	500, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 818, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	814, 815, 0, 0, 0, 0, 0, 0, 0, 844,
	1486, 0, 0, 2088, 842, 874, 831, 832, 833, 829,
	830, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 848, 0, 0, 0, 219, 220,
	221, 222, 460, 889, 868, 900, 858, 899, 898, 0,
	226, 860, 859, 229, 230, 231, 850, 922, 232, 958,
	959, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 903,
	254, 896, 895, 820, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 894, 261, 0, 262, 0, 263, 264,
	0, 826, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 839, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 893, 891, 892, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 849, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 870, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 882, 873, 884, 886, 887,
	888, 883, 0, 875, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 908, 909, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 862, 330, 941,
	333, 334, 336, 335, 817, 212, 942, 840, 927, 897,
	337, 338, 0, 871, 340, 872, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 890, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 827, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 863, 864, 866, 867, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 885, 865, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 931, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 861, 0, 904, 905,
	906, 907, 0, 439, 0, 433, 434, 954, 435, 955,
	838, 436, 437, 438, 0, 440, 441, 0, 821, 442,
	443, 444, 445, 447, 921, 448, 0, 869, 449, 450,
	451, 500, 901, 948, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 818, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 814, 815, 0, 0, 0, 0, 0, 0, 0,
	844, 0, 0, 0, 2086, 842, 874, 831, 832, 833,
	829, 830, 843, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 848, 0, 0, 0, 219,
	220, 221, 222, 460, 889, 868, 900, 858, 899, 898,
	0, 226, 860, 859, 229, 230, 231, 850, 922, 232,
	958, 959, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 248, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	903, 254, 896, 895, 820, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 894, 261, 0, 262, 0, 263,
	264, 0, 826, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 839, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 893, 891, 892, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 956, 0, 849,
	285, 0, 286, 287, 288, 289, 924, 925, 928, 935,
	290, 291, 0, 292, 293, 870, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 882, 873, 884, 886,
	887, 888, 883, 0, 875, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 908, 909, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 862, 330,
	941, 333, 334, 336, 335, 817, 212, 942, 840, 927,
	897, 337, 338, 0, 871, 340, 872, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 890, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 827,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 863, 864, 866, 867, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 885, 865,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 931,
	417, 418, 419, 953, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 861, 0, 904,
	905, 906, 907, 0, 439, 0, 433, 434, 954, 435,
	955, 838, 436, 437, 438, 0, 440, 441, 0, 821,
	442, 443, 444, 445, 447, 921, 448, 0, 869, 449,
	450, 451, 500, 901, 948, 0, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 818,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 814, 815, 0, 0, 0, 0, 0, 0,
	0, 844, 0, 0, 0, 2074, 842, 874, 831, 832,
	833, 829, 830, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 923, 848, 0, 0, 0,
	219, 220, 221, 222, 460, 889, 868, 900, 858, 899,
	898, 0, 226, 860, 859, 229, 230, 231, 850, 922,
	232, 958, 959, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 903, 254, 896, 895, 820, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 894, 261, 0, 262, 0,
	263, 264, 0, 826, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 839, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 893, 891, 892, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	849, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	935, 290, 291, 0, 292, 293, 870, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 882, 873, 884,
	886, 887, 888, 883, 0, 875, 0, 304, 936, 926,
	937, 305, 306, 307, 938, 908, 909, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 957, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 862,
	330, 941, 333, 334, 336, 335, 817, 212, 942, 840,
	927, 897, 337, 338, 0, 871, 340, 872, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 890, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	827, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 863, 864, 866, 867, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 946, 410, 885,
	865, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	931, 417, 418, 419, 953, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 861, 0,
	904, 905, 906, 907, 0, 439, 0, 433, 434, 954,
	435, 955, 838, 436, 437, 438, 0, 440, 441, 0,
	821, 442, 443, 444, 445, 447, 921, 448, 0, 869,
	449, 450, 451, 500, 901, 948, 0, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	818, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 814, 815, 0, 0, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 2063, 842, 874, 831,
	832, 833, 829, 830, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 923, 848, 0, 0,
	0, 219, 220, 221, 222, 460, 889, 868, 900, 858,
	899, 898, 0, 226, 860, 859, 229, 230, 231, 850,
	922, 232, 958, 959, 466, 0, 233, 929, 0, 912,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 915, 913, 914, 919, 917, 916, 918, 249, 250,
	251, 252, 903, 254, 896, 895, 820, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 894, 261, 0, 262,
	0, 263, 264, 0, 826, 265, 266, 268, 271, 267,
	272, 273, 274, 949, 950, 839, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 893, 891, 892, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 956,
	0, 849, 285, 0, 286, 287, 288, 289, 924, 925,
	928, 935, 290, 291, 0, 292, 293, 870, 0, 0,
	0, 211, 294, 296, 303, 0, 934, 297, 882, 873,
	884, 886, 887, 888, 883, 0, 875, 0, 304, 936,
	926, 937, 305, 306, 307, 938, 908, 909, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 957,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	862, 330, 941, 333, 334, 336, 335, 817, 212, 942,
	840, 927, 897, 337, 338, 0, 871, 340, 872, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 951, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 952, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 890, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 827, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 863, 864, 866, 867, 399,
	403, 406, 407, 920, 408, 388, 389, 409, 946, 410,
	885, 865, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 931, 417, 418, 419, 953, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 861,
	0, 904, 905, 906, 907, 0, 439, 0, 433, 434,
	954, 435, 955, 838, 436, 437, 438, 0, 440, 441,
	0, 821, 442, 443, 444, 445, 447, 921, 448, 0,
	869, 449, 450, 451, 500, 901, 948, 0, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 818, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 814, 815, 0, 0, 0, 0,
	0, 0, 0, 844, 0, 0, 0, 2061, 842, 2053,
	831, 832, 833, 829, 830, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 923, 848, 0,
	0, 0, 219, 220, 221, 222, 460, 889, 868, 900,
	858, 899, 898, 0, 226, 860, 859, 229, 230, 231,
	850, 922, 232, 958, 959, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 903, 2056, 896, 895, 820, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 894, 261, 0,
	262, 0, 263, 264, 0, 826, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 839, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 893, 891, 892, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 849, 285, 0, 286, 287, 288, 2057, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 870, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 882,
	873, 884, 886, 887, 888, 883, 0, 875, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 908, 909, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 2058, 2055,
	331, 862, 330, 941, 333, 334, 336, 335, 817, 212,
	942, 840, 927, 897, 337, 338, 0, 871, 340, 872,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 890, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 827, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 2059, 0, 404, 405, 863, 864, 866, 867,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 885, 865, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 931, 417, 418, 419, 953, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	861, 0, 904, 905, 906, 907, 0, 439, 0, 433,
	434, 954, 435, 955, 838, 436, 437, 438, 0, 440,
	441, 0, 821, 442, 443, 444, 445, 447, 921, 448,
	0, 869, 449, 450, 451, 500, 901, 948, 0, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	2054, 458, 818, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 814, 815, 0, 0, 0,
	0, 0, 0, 0, 844, 0, 0, 0, 2050, 842,
	2053, 831, 832, 833, 829, 830, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 848,
	0, 0, 0, 219, 220, 221, 222, 460, 889, 868,
	900, 858, 899, 898, 0, 226, 860, 859, 229, 230,
	231, 850, 922, 232, 958, 959, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 903, 2056, 896, 895, 820, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 894, 261,
	0, 262, 0, 263, 264, 0, 826, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 839, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 893, 891, 892,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 849, 285, 0, 286, 287, 288, 2057,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 870,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	882, 873, 884, 886, 887, 888, 883, 0, 875, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 908, 909,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 2058,
	2055, 331, 862, 330, 941, 333, 334, 336, 335, 817,
	212, 942, 840, 927, 897, 337, 338, 0, 871, 340,
	872, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 890, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 827, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 2059, 0, 404, 405, 863, 864, 866,
	867, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 885, 865, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 931, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 861, 0, 904, 905, 906, 907, 0, 439, 0,
	433, 434, 954, 435, 955, 838, 436, 437, 438, 0,
	440, 441, 0, 821, 442, 443, 444, 445, 447, 921,
	448, 0, 869, 449, 450, 451, 500, 901, 948, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 2054, 458, 818, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 814, 815, 874, 831,
	832, 833, 829, 830, 843, 844, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 923, 848, 0, 0,
	0, 219, 220, 221, 222, 460, 889, 868, 900, 858,
	899, 898, 0, 226, 860, 859, 229, 230, 231, 850,
	922, 232, 958, 959, 466, 0, 233, 929, 0, 912,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 915, 913, 914, 919, 917, 916, 918, 249, 250,
	251, 252, 903, 254, 896, 895, 820, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 894, 261, 0, 262,
	0, 263, 264, 0, 826, 265, 266, 268, 271, 267,
	272, 273, 274, 949, 950, 839, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 893, 891, 892, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 956,
	0, 849, 285, 0, 286, 287, 288, 289, 924, 925,
	928, 935, 290, 291, 0, 292, 293, 870, 0, 0,
	0, 211, 294, 296, 303, 0, 934, 297, 882, 873,
	884, 886, 887, 888, 883, 0, 875, 0, 304, 936,
	926, 937, 305, 306, 307, 938, 908, 909, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 957,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	862, 330, 941, 333, 334, 336, 335, 817, 212, 942,
	840, 927, 897, 337, 338, 0, 871, 340, 872, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 951, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 952, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 890, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 827, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 863, 864, 866, 867, 399,
	403, 406, 407, 920, 408, 388, 389, 409, 946, 410,
	885, 865, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 931, 417, 418, 419, 953, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 861,
	0, 904, 905, 906, 907, 0, 439, 0, 433, 434,
	954, 435, 955, 838, 436, 437, 438, 0, 440, 441,
	0, 821, 442, 443, 444, 445, 447, 921, 448, 0,
	869, 449, 450, 451, 500, 901, 948, 0, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 818, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 814, 815, 0, 0, 0, 0,
	0, 1494, 0, 844, 0, 0, 0, 0, 842, 874,
	831, 832, 833, 829, 830, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 1894, 218, 0, 0, 0, 0, 923, 848, 0,
	0, 0, 219, 220, 221, 222, 460, 889, 868, 900,
	858, 899, 898, 0, 226, 860, 859, 229, 230, 231,
	850, 922, 232, 958, 959, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 903, 254, 896, 895, 820, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 894, 261, 0,
	262, 0, 263, 264, 0, 826, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 839, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 893, 891, 892, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 849, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 870, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 882,
	873, 884, 886, 887, 888, 883, 0, 875, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 908, 909, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 862, 330, 941, 333, 334, 336, 335, 817, 212,
	942, 840, 927, 897, 337, 338, 0, 871, 340, 872,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 890, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 827, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 863, 864, 866, 867,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 885, 865, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 931, 417, 418, 419, 953, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	861, 0, 904, 905, 906, 907, 0, 439, 0, 433,
	434, 954, 435, 955, 838, 436, 437, 438, 0, 440,
	441, 0, 821, 442, 443, 444, 445, 447, 921, 448,
	0, 869, 449, 450, 451, 500, 901, 948, 0, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 818, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 814, 815, 0, 0, 0,
	0, 0, 0, 0, 844, 0, 0, 0, 1189, 842,
	874, 831, 832, 833, 829, 830, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 848,
	0, 0, 0, 219, 220, 221, 222, 460, 889, 868,
	900, 858, 899, 898, 0, 226, 860, 859, 229, 230,
	231, 850, 922, 232, 958, 959, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 903, 254, 896, 895, 820, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 894, 261,
	0, 262, 0, 263, 264, 0, 826, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 839, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 893, 891, 892,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 849, 285, 0, 286, 287, 288, 289,
	1188, 925, 928, 935, 290, 291, 0, 292, 293, 870,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	882, 873, 884, 886, 887, 888, 883, 0, 875, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 908, 909,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 862, 330, 941, 333, 334, 336, 335, 817,
	212, 942, 840, 927, 897, 337, 338, 0, 871, 340,
	872, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 890, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 827, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 863, 864, 866,
	867, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 885, 865, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 931, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 861, 0, 904, 905, 906, 907, 0, 439, 0,
	433, 434, 954, 435, 955, 838, 436, 437, 438, 0,
	440, 441, 0, 821, 442, 443, 444, 445, 447, 921,
	448, 0, 869, 449, 450, 451, 500, 901, 948, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 818, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 814, 815, 0, 0,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 1183,
	842, 874, 831, 832, 833, 829, 830, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 923,
	848, 0, 0, 0, 219, 220, 221, 222, 460, 889,
	868, 900, 858, 899, 898, 0, 226, 860, 859, 229,
	230, 231, 850, 922, 232, 958, 959, 466, 0, 233,
	929, 0, 912, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 932, 247, 248, 915, 913, 914, 919, 917, 916,
	918, 249, 250, 251, 252, 903, 254, 896, 895, 820,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 894,
	261, 0, 262, 0, 263, 264, 0, 826, 265, 266,
	268, 271, 267, 272, 273, 274, 949, 950, 839, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 893, 891,
	892, 0, 280, 0, 281, 0, 0, 933, 282, 283,
	0, 284, 956, 0, 849, 285, 0, 286, 287, 288,
	289, 1182, 925, 928, 935, 290, 291, 0, 292, 293,
	870, 0, 0, 0, 211, 294, 296, 303, 0, 934,
	297, 882, 873, 884, 886, 887, 888, 883, 0, 875,
	0, 304, 936, 926, 937, 305, 306, 307, 938, 908,
	909, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 957, 939, 317, 318, 940, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 862, 330, 941, 333, 334, 336, 335,
	817, 212, 942, 840, 927, 897, 337, 338, 0, 871,
	340, 872, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 943, 347, 944, 951, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 952, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 890,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 945,
	382, 383, 384, 385, 827, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 863, 864,
	866, 867, 399, 403, 406, 407, 920, 408, 388, 389,
	409, 946, 410, 885, 865, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 931, 417, 418, 419, 953, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 861, 0, 904, 905, 906, 907, 0, 439,
	0, 433, 434, 954, 435, 955, 838, 436, 437, 438,
	0, 440, 441, 0, 821, 442, 443, 444, 445, 447,
	921, 448, 0, 869, 449, 450, 451, 500, 901, 948,
	0, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 818, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 814, 815, 0,
	0, 0, 0, 0, 0, 0, 844, 0, 0, 0,
	1178, 842, 874, 831, 832, 833, 829, 830, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	923, 848, 0, 0, 0, 219, 220, 221, 222, 460,
	889, 868, 900, 858, 899, 898, 0, 226, 860, 859,
	229, 230, 231, 850, 922, 232, 958, 959, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 248, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 903, 254, 896, 895,
	820, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	894, 261, 0, 262, 0, 263, 264, 0, 826, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 839,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 893,
	891, 892, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 849, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 935, 290, 291, 0, 292,
	293, 870, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 882, 873, 884, 886, 887, 888, 883, 0,
	875, 0, 304, 936, 926, 937, 305, 306, 307, 938,
	908, 909, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 957, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 862, 330, 941, 333, 334, 336,
	335, 817, 212, 942, 840, 927, 897, 337, 338, 0,
	871, 340, 872, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	890, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 827, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 863,
	864, 866, 867, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 946, 410, 885, 865, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 931, 417, 418, 419, 953,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 861, 0, 904, 905, 906, 907, 0,
	439, 0, 433, 434, 954, 435, 955, 838, 436, 437,
	438, 0, 440, 441, 0, 821, 442, 443, 444, 445,
	447, 921, 448, 0, 869, 449, 450, 451, 500, 901,
	948, 0, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 818, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 814, 815,
	874, 831, 832, 833, 829, 830, 843, 844, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 848,
	0, 0, 0, 219, 220, 221, 222, 460, 889, 868,
	900, 858, 899, 898, 0, 226, 860, 859, 229, 230,
	231, 850, 922, 232, 958, 959, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 903, 254, 896, 895, 820, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 894, 261,
	0, 262, 0, 263, 264, 0, 826, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 839, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 893, 891, 892,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 849, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 870,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	882, 873, 884, 886, 887, 888, 883, 0, 875, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 908, 909,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 862, 330, 941, 333, 334, 336, 335, 817,
	212, 942, 840, 927, 897, 337, 338, 0, 871, 340,
	872, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 890, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 827, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 863, 864, 866,
	867, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 885, 865, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 931, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 861, 0, 904, 905, 906, 907, 0, 439, 0,
	433, 434, 954, 435, 955, 838, 436, 437, 438, 0,
	440, 441, 0, 821, 442, 443, 444, 445, 447, 921,
	448, 0, 869, 449, 450, 451, 500, 901, 948, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 818, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 814, 815, 874, 831,
	832, 833, 829, 830, 843, 844, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 923, 848, 0, 0,
	0, 219, 220, 221, 222, 460, 889, 868, 900, 858,
	899, 898, 0, 226, 860, 859, 229, 230, 231, 850,
	922, 232, 958, 959, 466, 0, 233, 929, 0, 912,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	3338, 915, 913, 914, 919, 917, 916, 918, 249, 250,
	251, 252, 903, 254, 896, 895, 820, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 894, 261, 0, 262,
	0, 263, 264, 0, 826, 265, 266, 268, 271, 267,
	272, 273, 274, 949, 950, 839, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 893, 891, 892, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 956,
	0, 849, 285, 0, 286, 287, 288, 289, 924, 925,
	928, 935, 290, 291, 0, 292, 293, 870, 0, 0,
	0, 211, 294, 296, 303, 0, 934, 297, 882, 873,
	884, 886, 887, 888, 883, 0, 875, 0, 304, 936,
	926, 937, 305, 306, 307, 938, 908, 909, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 957,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	862, 330, 941, 333, 334, 336, 335, 817, 212, 942,
	840, 927, 897, 337, 338, 0, 871, 340, 872, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 951, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 952, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 890, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 827, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 863, 864, 866, 867, 399,
	403, 406, 407, 920, 408, 388, 389, 409, 946, 410,
	885, 865, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 931, 417, 418, 419, 953, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 861,
	0, 904, 905, 906, 907, 0, 439, 0, 433, 434,
	954, 435, 955, 838, 436, 437, 438, 0, 3337, 441,
	0, 821, 442, 443, 444, 445, 447, 921, 448, 0,
	869, 449, 450, 451, 500, 901, 948, 0, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 818, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 814, 815, 874, 831, 832, 833,
	829, 830, 843, 844, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 923, 848, 0, 0, 0, 219,
	220, 221, 222, 3336, 889, 868, 900, 858, 899, 898,
	0, 226, 860, 859, 229, 230, 231, 850, 922, 232,
	958, 959, 466, 0, 233, 929, 0, 912, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 932, 247, 3338, 915,
	913, 914, 919, 917, 916, 918, 249, 250, 251, 252,
	903, 254, 896, 895, 820, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 894, 261, 0, 262, 0, 263,
	264, 0, 826, 265, 266, 268, 271, 267, 272, 273,
	274, 949, 950, 839, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 893, 891, 892, 0, 280, 0, 281,
	0, 0, 933, 282, 283, 0, 284, 956, 0, 849,
	285, 0, 286, 287, 288, 289, 924, 925, 928, 935,
	290, 291, 0, 292, 293, 870, 0, 0, 0, 211,
	294, 296, 303, 0, 934, 297, 882, 873, 884, 886,
	887, 888, 883, 0, 875, 0, 304, 936, 926, 937,
	305, 306, 307, 938, 908, 909, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 957, 939, 317,
	318, 940, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 862, 330,
	941, 333, 334, 336, 335, 817, 212, 942, 840, 927,
	897, 337, 338, 0, 871, 340, 872, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 943, 347, 944, 951,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 952, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 890, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 945, 382, 383, 384, 385, 827,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 863, 864, 866, 867, 399, 403, 406,
	407, 920, 408, 388, 389, 409, 946, 410, 885, 865,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 931,
	417, 418, 419, 953, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 861, 0, 904,
	905, 906, 907, 0, 439, 0, 433, 434, 954, 435,
	955, 838, 436, 437, 438, 0, 3337, 441, 0, 821,
	442, 443, 444, 445, 447, 921, 448, 0, 869, 449,
	450, 451, 500, 901, 948, 0, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 818,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	0, 0, 814, 815, 874, 831, 832, 833, 829, 830,
	843, 844, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 848, 0, 0, 0, 219, 220, 221,
	222, 460, 889, 868, 900, 858, 899, 898, 0, 226,
	860, 859, 229, 230, 231, 850, 922, 232, 958, 959,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 903, 254,
	896, 895, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 894, 261, 0, 262, 0, 263, 264, 0,
	826, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 839, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 893, 891, 892, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 849, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 870, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 882, 873, 884, 886, 887, 888,
	883, 0, 875, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 908, 909, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 862, 330, 941, 333,
	334, 336, 335, 0, 212, 942, 840, 927, 897, 337,
	338, 0, 871, 340, 872, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 890, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 827, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 863, 864, 866, 867, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 885, 865, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 931, 417, 418,
	419, 953, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 861, 0, 904, 905, 906,
	907, 0, 439, 0, 433, 434, 954, 435, 955, 838,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 921, 448, 0, 869, 449, 450, 451,
	500, 901, 948, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 874, 831, 832,
	833, 829, 830, 843, 0, 2071, 0, 0, 0, 0,
	2069, 2070, 0, 0, 213, 214, 215, 216, 217, 844,
	218, 0, 0, 0, 842, 923, 848, 0, 0, 0,
	219, 220, 221, 222, 0, 889, 868, 900, 858, 899,
	898, 0, 226, 860, 859, 229, 230, 231, 850, 922,
	232, 958, 959, 466, 0, 233, 929, 0, 912, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 3338,
	915, 913, 914, 919, 917, 916, 918, 249, 250, 251,
	252, 903, 254, 896, 895, 820, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 894, 261, 0, 262, 0,
	263, 264, 0, 826, 265, 266, 268, 271, 267, 272,
	273, 274, 949, 950, 839, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 893, 891, 892, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 956, 0,
	849, 285, 0, 286, 287, 288, 289, 924, 925, 928,
	0, 290, 291, 0, 292, 293, 870, 0, 0, 0,
	211, 294, 296, 303, 0, 934, 297, 882, 873, 884,
	886, 887, 888, 883, 0, 875, 0, 304, 0, 926,
	0, 305, 306, 307, 938, 908, 909, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 957, 939,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 862,
	330, 941, 333, 334, 336, 335, 817, 212, 0, 840,
	927, 897, 337, 338, 0, 871, 340, 872, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	951, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 952, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 890, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	827, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 863, 864, 866, 867, 399, 403,
	406, 407, 920, 408, 388, 389, 409, 0, 410, 885,
	865, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	931, 417, 418, 419, 953, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 861, 0,
	904, 905, 906, 907, 0, 439, 0, 433, 434, 954,
	435, 955, 838, 436, 437, 438, 0, 3337, 441, 0,
	821, 442, 443, 444, 445, 447, 921, 448, 0, 869,
	449, 450, 451, 500, 901, 948, 0, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 807,
	0, 995, 0, 814, 815, 0, 0, 0, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 842, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 923,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 922, 232, 464, 465, 466, 0, 233,
	929, 0, 912, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 932, 247, 248, 915, 913, 914, 919, 917, 916,
	918, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 949, 950, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 933, 282, 283,
	0, 284, 956, 0, 475, 285, 0, 286, 287, 288,
	289, 924, 925, 928, 935, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 934,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 936, 926, 937, 305, 306, 307, 938, 308,
	309, 0, 0, 310, 311, 312, 313, 982, 315, 314,
	0, 316, 957, 939, 317, 318, 940, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 941, 333, 334, 336, 335,
	0, 212, 942, 0, 927, 485, 337, 338, 0, 339,
	340, 341, 0, 987, 343, 344, 345, 0, 0, 346,
	486, 943, 347, 944, 951, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 952, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 945,
	382, 383, 384, 385, 491, 989, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 176, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 920, 408, 388, 389,
	409, 946, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 953, 0,
	424, 425, 423, 178, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 954, 435, 955, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	921, 448, 0, 446, 449, 450, 451, 1299, 501, 502,
	0, 453, 452, 503, 995, 0, 0, 170, 454, 455,
	504, 456, 457, 458, 0, 171, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 923, 0, 979, 0, 1573, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 922, 232, 464, 465,
	466, 0, 233, 929, 0, 912, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 915, 913, 914,
	919, 917, 916, 918, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 949,
	950, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 956, 0, 475, 285, 0,
	286, 287, 288, 289, 924, 925, 928, 935, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 0, 934, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 936, 926, 937, 305, 306,
	307, 938, 308, 309, 0, 0, 310, 311, 312, 313,
	982, 315, 314, 0, 316, 957, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 941, 333,
	334, 336, 335, 0, 212, 942, 0, 927, 485, 337,
	338, 0, 339, 340, 341, 0, 987, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 951, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 952,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 491, 989, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 176, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 920,
	408, 388, 389, 409, 946, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 953, 0, 424, 425, 423, 178, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 954, 435, 955, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 921, 448, 0, 446, 449, 450, 451,
	1299, 501, 502, 0, 453, 452, 503, 0, 0, 0,
	170, 454, 455, 504, 456, 457, 458, 0, 171, 0,
	0, 2499, 0, 995, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 979, 0, 1573,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 923, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 922, 232, 464, 465, 466,
	0, 233, 929, 0, 912, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 932, 247, 248, 915, 913, 914, 919,
	917, 916, 918, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 949, 950,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 933,
	282, 283, 0, 284, 956, 0, 475, 285, 0, 286,
	287, 288, 289, 924, 925, 928, 935, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 934, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 936, 926, 937, 305, 306, 307,
	938, 308, 309, 0, 0, 310, 311, 312, 313, 982,
	315, 314, 0, 316, 957, 939, 317, 318, 940, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 941, 333, 334,
	336, 335, 0, 212, 942, 0, 927, 485, 337, 338,
	0, 339, 340, 341, 0, 987, 343, 344, 345, 0,
	0, 346, 486, 943, 347, 944, 951, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 952, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 945, 382, 383, 384, 385, 491, 989, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 920, 408,
	388, 389, 409, 946, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	953, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 954, 435, 955, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 921, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 0, 978, 0, 995,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 979, 923, 984, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 922, 232, 464, 465, 466, 0, 233, 929, 0,
	912, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 932,
	247, 248, 915, 913, 914, 919, 917, 916, 918, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 949, 950, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 933, 282, 283, 0, 284,
	956, 0, 475, 285, 0, 286, 287, 288, 289, 924,
	925, 928, 935, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 934, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	936, 926, 937, 305, 306, 307, 938, 308, 309, 0,
	0, 310, 311, 312, 313, 982, 315, 314, 0, 316,
	957, 939, 317, 318, 940, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 941, 333, 334, 336, 335, 0, 212,
	942, 0, 927, 485, 337, 338, 0, 339, 340, 341,
	0, 987, 343, 344, 345, 0, 0, 346, 486, 943,
	347, 944, 951, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 952, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 945, 382, 383,
	384, 385, 491, 989, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 920, 408, 388, 389, 409, 946,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 953, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 954, 435, 955, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 921, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 995, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	923, 0, 979, 0, 984, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 922, 232, 464, 465, 466, 0,
	233, 929, 0, 912, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 932, 247, 248, 915, 913, 914, 919, 917,
	916, 918, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 949, 950, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 933, 282,
	283, 0, 284, 956, 0, 475, 285, 0, 286, 287,
	288, 289, 924, 925, 928, 935, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 0,
	934, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 936, 926, 937, 305, 306, 307, 938,
	308, 309, 0, 0, 310, 311, 312, 313, 982, 315,
	314, 0, 316, 957, 939, 317, 318, 940, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 941, 333, 334, 336,
	335, 0, 212, 942, 0, 927, 485, 337, 338, 0,
	339, 340, 341, 0, 987, 343, 344, 345, 0, 0,
	346, 486, 943, 347, 944, 951, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 952, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	945, 382, 383, 384, 385, 491, 989, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 920, 408, 388,
	389, 409, 946, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 953,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 954, 435, 955, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 921, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 995, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 923, 0, 979, 0, 984, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 922, 232, 464,
	465, 466, 0, 233, 929, 0, 912, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 915, 913,
	914, 919, 917, 916, 918, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	949, 950, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 956, 0, 475, 285,
	0, 286, 287, 288, 289, 924, 925, 928, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 926, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 957, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 212, 942, 0, 927, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 951, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	952, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 989,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	920, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 953, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 954, 435, 955,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 921, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 807, 0,
	1153, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	1475, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 1057, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	0, 942, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 176, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 178, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 1299, 501, 502, 0,
	453, 452, 503, 1296, 0, 1153, 170, 454, 455, 504,
	456, 457, 458, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 148, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 1057, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 0, 942, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 176,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 178, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 1299, 501, 502, 0, 453, 452, 503, 0, 0,
	0, 170, 454, 455, 504, 456, 457, 458, 0, 171,
	0, 0, 0, 0, 1153, 1152, 0, 0, 0, 0,
	1150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 1057, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 932, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	933, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 935, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 934, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 936, 482, 937, 305, 306,
	307, 938, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 939, 317, 318, 940,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 941, 333,
	334, 336, 335, 0, 0, 942, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 943, 347, 944, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 945, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 946, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 1153, 1152, 0,
	0, 0, 0, 1150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 2692,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 1057, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 932, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 933, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	935, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 934, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 936, 482,
	937, 305, 306, 307, 938, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 939,
	317, 318, 940, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 941, 333, 334, 336, 335, 0, 0, 942, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 943, 347, 944,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 945, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 946, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	995, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 923, 0,
	0, 0, 1303, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 922, 232, 464, 465, 466, 0, 233, 929,
	0, 912, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 915, 913, 914, 919, 917, 916, 918,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 949, 950, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 956, 0, 475, 285, 0, 286, 287, 288, 289,
	924, 925, 928, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 926, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 957, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	212, 942, 0, 927, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 951, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 952, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 920, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 953, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 954, 435, 955, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 921,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 807, 0, 207, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 176,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 178, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 1299, 501, 502, 0, 453, 452, 503, 207, 0,
	0, 170, 454, 455, 504, 456, 457, 458, 0, 171,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	148, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 212, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 207, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 1578, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 207, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 2642, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 207, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 2297,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	681, 0, 573, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 2764, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 579, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 212, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 578, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 0, 572, 0, 573, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	582, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	579, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 212, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	578, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 573, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 582, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 579,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 1857, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 578,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 573, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 582, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 579, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 578, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 207, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 582, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 212, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 1325, 0,
	1153, 1152, 0, 0, 0, 0, 1150, 0, 0, 0,
	0, 0, 0, 582, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 1057, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 1324, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	0, 942, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 1323, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 1294, 0, 1153, 1152, 0, 0, 0,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 1057, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 1293, 477, 478, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 0, 942, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 1290, 0,
	1153, 1152, 0, 0, 0, 0, 1150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 1057, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	1289, 477, 478, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	0, 942, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 1228, 0, 1153, 1152, 0, 0, 0,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 1057, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 1227, 477, 478, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 0, 942, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 1225, 0,
	1153, 1152, 0, 0, 0, 0, 1150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 1057, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	1224, 477, 478, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	0, 942, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 0,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 1146, 0, 1153, 1152, 0, 0, 0,
	0, 1150, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 1057, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 932, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 933, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 1148, 477, 478, 935, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 934, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 936, 482, 937, 305,
	306, 307, 938, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 939, 317, 318,
	940, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 941,
	333, 334, 336, 335, 0, 0, 942, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 943, 347, 944, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 945, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 946, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 1153, 1152,
	0, 0, 0, 0, 1150, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 1057,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 932, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 933, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 935, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 934, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 936,
	482, 937, 305, 306, 307, 938, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	939, 317, 318, 940, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 941, 333, 334, 336, 335, 0, 0, 942,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 943, 347,
	944, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 945, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 946, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 1153, 1152, 0, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 1057, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 932, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 933, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 935, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 934,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 936, 482, 937, 305, 306, 307, 938, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 939, 317, 318, 940, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 941, 333, 334, 336, 335,
	0, 0, 942, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 943, 347, 944, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 945,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 946, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	1153, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 1057, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	932, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 933, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 935, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 934, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 936, 482, 937, 305, 306, 307, 938, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 939, 317, 318, 940, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 941, 333, 334, 336, 335, 0,
	0, 942, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	943, 347, 944, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 945, 382,
	383, 384, 385, 491, 386, 0, 387, 391, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	946, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 207,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 2190, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 2187, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 2332, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 2193, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 2329, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 2331,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 2328, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 2192, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 2330, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 207, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 2190, 233, 467, 0, 0,
	2184, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 2187, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 2193, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 2183, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 0, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 2192, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 2191, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 1369, 0, 207, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 1372, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 1370, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 1371, 452, 503, 1141, 0, 207, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 1143, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 212, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	987, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 1138, 0, 207, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 1140, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 987, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 1045, 0, 207, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 1047, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 212, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	987, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 0, 453, 452,
	503, 535, 0, 207, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 534, 217, 524, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 527, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 528, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 529, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 523, 0, 207, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	524, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 527, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 528, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 0, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 529, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 207, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 987,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	2261, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 212, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 1841, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 207, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 1779, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1772,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 1771, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 1767, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 1769, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1283,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 1282, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 1280, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 1279, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1277,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 1276, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 1273, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 1272, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 1248,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 1163, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 1165, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 207, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 212, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 207, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 527, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 528, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 529, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 0, 453, 452, 503, 673, 0, 207,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 0,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 408, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 672, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 0, 453,
	452, 503, 512, 0, 207, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 511, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 476, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 510, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 207, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 2124, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 476, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 0, 453, 452, 503, 207, 2319, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 207, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 2887, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 207, 2319,
	0, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 476, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 0, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 2316, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 207, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 213, 214, 215, 216, 217, 1847,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	1839, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 555, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 1023, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	556, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 552, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	551, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	1791, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 1790, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 555, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 545, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	556, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 552, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	1302, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	551, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	1287, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 1286, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 1236, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 1235, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	1220, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 0, 453, 452, 503, 1157, 0, 207, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 476, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 0, 453, 452, 503,
	555, 0, 207, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 1023, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 476, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 556, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 552, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 551, 495, 496, 497, 0,
	439, 0, 433, 1024, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 207, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 213, 214,
	215, 216, 217, 1006, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 555, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 545, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	543, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 544, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 556,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 546,
	386, 0, 387, 391, 392, 552, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 547,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 551,
	495, 496, 497, 0, 439, 0, 433, 549, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 539,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 540, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 537, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 0, 453, 452, 503, 531,
	0, 207, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 476, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	0, 453, 452, 503, 507, 0, 207, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 366, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 207, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 285,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 351, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	363, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 386,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 207, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 459, 0, 0, 0, 0, 219, 220, 221,
	222, 460, 461, 223, 462, 224, 225, 463, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 464, 465,
	466, 0, 233, 467, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	468, 469, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	470, 265, 266, 268, 271, 267, 272, 273, 274, 471,
	472, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 473, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 474, 0, 475, 285, 0,
	286, 287, 288, 289, 2587, 477, 478, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 479, 299, 298, 300, 301, 302,
	480, 0, 481, 0, 304, 0, 482, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 483, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 484, 485, 337,
	338, 0, 339, 340, 341, 0, 0, 343, 344, 345,
	0, 0, 346, 486, 0, 347, 0, 487, 348, 342,
	349, 350, 351, 352, 353, 354, 0, 355, 356, 488,
	357, 489, 358, 0, 359, 0, 360, 361, 362, 363,
	364, 365, 490, 366, 367, 0, 368, 369, 370, 371,
	372, 0, 374, 375, 376, 373, 377, 378, 379, 380,
	0, 381, 0, 382, 383, 384, 385, 491, 386, 0,
	387, 391, 392, 393, 394, 395, 396, 397, 0, 404,
	405, 398, 400, 401, 402, 399, 403, 406, 407, 0,
	408, 388, 389, 409, 0, 410, 492, 411, 412, 0,
	422, 413, 414, 415, 390, 416, 420, 421, 417, 418,
	419, 493, 0, 424, 425, 423, 0, 426, 427, 428,
	429, 430, 269, 431, 270, 432, 0, 494, 495, 496,
	497, 0, 439, 0, 433, 434, 498, 435, 499, 0,
	436, 437, 438, 0, 440, 441, 0, 0, 442, 443,
	444, 445, 447, 0, 448, 0, 446, 449, 450, 451,
	500, 501, 502, 207, 453, 452, 503, 0, 0, 0,
	0, 454, 455, 504, 456, 457, 458, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 459, 0, 0, 0, 0, 219, 220, 221, 222,
	460, 461, 223, 462, 224, 225, 463, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 464, 465, 466,
	0, 233, 467, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 468,
	469, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 470,
	265, 266, 268, 271, 267, 272, 273, 274, 471, 472,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	473, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 474, 0, 475, 285, 0, 286,
	287, 288, 289, 2585, 477, 478, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 479, 299, 298, 300, 301, 302, 480,
	0, 481, 0, 304, 0, 482, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 483, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 484, 485, 337, 338,
	0, 339, 340, 341, 0, 0, 343, 344, 345, 0,
	0, 346, 486, 0, 347, 0, 487, 348, 342, 349,
	350, 351, 352, 353, 354, 0, 355, 356, 488, 357,
	489, 358, 0, 359, 0, 360, 361, 362, 363, 364,
	365, 490, 366, 367, 0, 368, 369, 370, 371, 372,
	0, 374, 375, 376, 373, 377, 378, 379, 380, 0,
	381, 0, 382, 383, 384, 385, 491, 386, 0, 387,
	391, 392, 393, 394, 395, 396, 397, 0, 404, 405,
	398, 400, 401, 402, 399, 403, 406, 407, 0, 408,
	388, 389, 409, 0, 410, 492, 411, 412, 0, 422,
	413, 414, 415, 390, 416, 420, 421, 417, 418, 419,
	493, 0, 424, 425, 423, 0, 426, 427, 428, 429,
	430, 269, 431, 270, 432, 0, 494, 495, 496, 497,
	0, 439, 0, 433, 434, 498, 435, 499, 0, 436,
	437, 438, 0, 440, 441, 0, 0, 442, 443, 444,
	445, 447, 0, 448, 0, 446, 449, 450, 451, 500,
	501, 502, 207, 453, 452, 503, 0, 0, 0, 0,
	454, 455, 504, 456, 457, 458, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	459, 0, 0, 0, 0, 219, 220, 221, 222, 460,
	461, 223, 462, 224, 225, 463, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 464, 465, 466, 0,
	233, 467, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 468, 469,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 470, 265,
	266, 268, 271, 267, 272, 273, 274, 471, 472, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 473,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 474, 0, 475, 285, 0, 286, 287,
	288, 289, 2573, 477, 478, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 0, 294, 296, 303, 0,
	0, 297, 479, 299, 298, 300, 301, 302, 480, 0,
	481, 0, 304, 0, 482, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 483, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 0, 0, 0, 484, 485, 337, 338, 0,
	339, 340, 341, 0, 0, 343, 344, 345, 0, 0,
	346, 486, 0, 347, 0, 487, 348, 342, 349, 350,
	351, 352, 353, 354, 0, 355, 356, 488, 357, 489,
	358, 0, 359, 0, 360, 361, 362, 363, 364, 365,
	490, 366, 367, 0, 368, 369, 370, 371, 372, 0,
	374, 375, 376, 373, 377, 378, 379, 380, 0, 381,
	0, 382, 383, 384, 385, 491, 386, 0, 387, 391,
	392, 393, 394, 395, 396, 397, 0, 404, 405, 398,
	400, 401, 402, 399, 403, 406, 407, 0, 408, 388,
	389, 409, 0, 410, 492, 411, 412, 0, 422, 413,
	414, 415, 390, 416, 420, 421, 417, 418, 419, 493,
	0, 424, 425, 423, 0, 426, 427, 428, 429, 430,
	269, 431, 270, 432, 0, 494, 495, 496, 497, 0,
	439, 0, 433, 434, 498, 435, 499, 0, 436, 437,
	438, 0, 440, 441, 0, 0, 442, 443, 444, 445,
	447, 0, 448, 0, 446, 449, 450, 451, 500, 501,
	502, 207, 453, 452, 503, 0, 0, 0, 0, 454,
	455, 504, 456, 457, 458, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 459,
	0, 0, 0, 0, 219, 220, 221, 222, 460, 461,
	223, 462, 224, 225, 463, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 464, 465, 466, 0, 233,
	467, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 468, 469, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 470, 265, 266,
	268, 271, 267, 272, 273, 274, 471, 472, 0, 0,
	0, 0, 0, 0, 0, 275, 276, 277, 473, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 474, 0, 475, 285, 0, 286, 287, 288,
	289, 2279, 477, 478, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 479, 299, 298, 300, 301, 302, 480, 0, 481,
	0, 304, 0, 482, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 483, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 484, 485, 337, 338, 0, 339,
	340, 341, 0, 0, 343, 344, 345, 0, 0, 346,
	486, 0, 347, 0, 487, 348, 342, 349, 350, 351,
	352, 353, 354, 0, 355, 356, 488, 357, 489, 358,
	0, 359, 0, 360, 361, 362, 363, 364, 365, 490,
	366, 367, 0, 368, 369, 370, 371, 372, 0, 374,
	375, 376, 373, 377, 378, 379, 380, 0, 381, 0,
	382, 383, 384, 385, 491, 386, 0, 387, 391, 392,
	393, 394, 395, 396, 397, 0, 404, 405, 398, 400,
	401, 402, 399, 403, 406, 407, 0, 408, 388, 389,
	409, 0, 410, 492, 411, 412, 0, 422, 413, 414,
	415, 390, 416, 420, 421, 417, 418, 419, 493, 0,
	424, 425, 423, 0, 426, 427, 428, 429, 430, 269,
	431, 270, 432, 0, 494, 495, 496, 497, 0, 439,
	0, 433, 434, 498, 435, 499, 0, 436, 437, 438,
	0, 440, 441, 0, 0, 442, 443, 444, 445, 447,
	0, 448, 0, 446, 449, 450, 451, 500, 501, 502,
	207, 453, 452, 503, 0, 0, 0, 0, 454, 455,
	504, 456, 457, 458, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 459, 0,
	0, 0, 0, 219, 220, 221, 222, 460, 461, 223,
	462, 224, 225, 463, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 464, 465, 466, 0, 233, 467,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 468, 469, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 470, 265, 266, 268,
	271, 267, 272, 273, 274, 471, 472, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 473, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 474, 0, 475, 285, 0, 286, 287, 288, 289,
	476, 477, 478, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	479, 299, 298, 300, 301, 302, 480, 0, 481, 0,
	304, 0, 482, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 483, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 484, 485, 337, 338, 0, 339, 340,
	341, 0, 0, 343, 344, 345, 0, 0, 346, 486,
	0, 347, 0, 487, 348, 342, 349, 350, 351, 352,
	353, 354, 0, 355, 356, 488, 357, 489, 358, 0,
	359, 0, 360, 361, 362, 363, 364, 365, 490, 366,
	367, 0, 368, 369, 370, 371, 372, 0, 374, 375,
	376, 373, 377, 378, 379, 380, 0, 381, 0, 382,
	383, 384, 385, 491, 386, 0, 387, 540, 392, 393,
	394, 395, 396, 397, 0, 404, 405, 398, 400, 401,
	402, 399, 403, 406, 407, 0, 408, 388, 389, 409,
	0, 410, 492, 411, 412, 0, 422, 413, 414, 415,
	390, 416, 420, 421, 417, 418, 419, 493, 0, 424,
	425, 423, 0, 426, 427, 428, 429, 430, 269, 431,
	270, 432, 0, 494, 495, 496, 497, 0, 439, 0,
	433, 434, 498, 435, 499, 0, 436, 437, 438, 0,
	440, 441, 0, 0, 442, 443, 444, 445, 447, 0,
	448, 0, 446, 449, 450, 451, 500, 501, 502, 207,
	453, 452, 503, 0, 0, 0, 0, 454, 455, 504,
	456, 457, 458, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 459, 0, 1803,
	0, 0, 219, 220, 221, 222, 460, 461, 223, 462,
	224, 225, 463, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 464, 465, 466, 0, 233, 467, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 468, 469, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 470, 265, 266, 268, 271,
	267, 272, 273, 274, 471, 472, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 473, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	474, 0, 475, 285, 0, 286, 287, 288, 289, 476,
	477, 478, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 479,
	299, 298, 300, 301, 302, 480, 0, 481, 0, 304,
	0, 482, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	483, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 484, 485, 337, 338, 0, 339, 340, 341,
	0, 0, 343, 344, 345, 0, 0, 346, 486, 0,
	347, 0, 487, 348, 342, 349, 350, 351, 352, 353,
	354, 0, 355, 356, 488, 357, 489, 358, 0, 359,
	0, 360, 361, 362, 363, 364, 365, 490, 366, 367,
	0, 368, 369, 370, 371, 372, 0, 374, 375, 376,
	373, 377, 378, 379, 380, 0, 381, 0, 382, 383,
	384, 385, 491, 386, 0, 387, 391, 392, 393, 394,
	395, 396, 397, 0, 404, 405, 398, 400, 401, 402,
	399, 403, 406, 407, 0, 0, 388, 389, 409, 0,
	410, 492, 411, 412, 0, 422, 413, 414, 415, 390,
	416, 420, 421, 417, 418, 419, 493, 0, 424, 425,
	423, 0, 426, 427, 428, 429, 430, 269, 431, 270,
	432, 0, 494, 495, 496, 497, 0, 439, 0, 433,
	434, 498, 435, 499, 0, 436, 437, 438, 0, 440,
	441, 0, 0, 442, 443, 444, 445, 447, 0, 448,
	0, 446, 449, 450, 451, 500, 501, 502, 207, 453,
	452, 503, 0, 0, 0, 0, 454, 455, 504, 456,
	457, 458, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 459, 0, 0, 0,
	0, 219, 220, 221, 222, 460, 461, 223, 462, 224,
	225, 463, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 464, 465, 466, 0, 233, 467, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 468, 469, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 470, 265, 266, 268, 271, 267,
	272, 273, 274, 471, 472, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 473, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 474,
	0, 475, 285, 0, 286, 287, 288, 289, 1256, 477,
	478, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 0, 297, 479, 299,
	298, 300, 301, 302, 480, 0, 481, 0, 304, 0,
	482, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 483,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 0, 0,
	0, 484, 485, 337, 338, 0, 339, 340, 341, 0,
	0, 343, 344, 345, 0, 0, 346, 486, 0, 347,
	0, 487, 348, 342, 349, 350, 351, 352, 353, 354,
	0, 355, 356, 488, 357, 489, 358, 0, 359, 0,
	360, 361, 362, 363, 364, 365, 490, 366, 367, 0,
	368, 369, 370, 371, 372, 0, 374, 375, 376, 373,
	377, 378, 379, 380, 0, 381, 0, 382, 383, 384,
	385, 491, 386, 0, 387, 391, 392, 393, 394, 395,
	396, 397, 0, 404, 405, 398, 400, 401, 402, 399,
	403, 406, 407, 0, 408, 388, 389, 409, 0, 410,
	492, 411, 412, 0, 422, 413, 414, 415, 390, 416,
	420, 421, 417, 418, 419, 493, 0, 424, 425, 423,
	0, 426, 427, 428, 429, 430, 269, 431, 270, 432,
	0, 494, 495, 496, 497, 0, 439, 0, 433, 434,
	498, 435, 499, 0, 436, 437, 438, 0, 440, 441,
	0, 0, 442, 443, 444, 445, 447, 0, 448, 0,
	446, 449, 450, 451, 500, 501, 502, 207, 453, 452,
	503, 0, 0, 0, 0, 454, 455, 504, 456, 457,
	458, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 459, 0, 0, 0, 0,
	219, 220, 221, 222, 460, 461, 223, 462, 224, 225,
	463, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 464, 465, 466, 0, 233, 467, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 468, 469, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 470, 265, 266, 268, 271, 267, 272,
	273, 274, 471, 472, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 473, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 474, 0,
	475, 285, 0, 286, 287, 288, 289, 1198, 477, 478,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 479, 299, 298,
	300, 301, 302, 480, 0, 481, 0, 304, 0, 482,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 483, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	484, 485, 337, 338, 0, 339, 340, 341, 0, 0,
	343, 344, 345, 0, 0, 346, 486, 0, 347, 0,
	487, 348, 342, 349, 350, 351, 352, 353, 354, 0,
	355, 356, 488, 357, 489, 358, 0, 359, 0, 360,
	361, 362, 363, 364, 365, 490, 366, 367, 0, 368,
	369, 370, 371, 372, 0, 374, 375, 376, 373, 377,
	378, 379, 380, 0, 381, 0, 382, 383, 384, 385,
	491, 386, 0, 387, 391, 392, 393, 394, 395, 396,
	397, 0, 404, 405, 398, 400, 401, 402, 399, 403,
	406, 407, 0, 408, 388, 389, 409, 0, 410, 492,
	411, 412, 0, 422, 413, 414, 415, 390, 416, 420,
	421, 417, 418, 419, 493, 0, 424, 425, 423, 0,
	426, 427, 428, 429, 430, 269, 431, 270, 432, 0,
	494, 495, 496, 497, 0, 439, 0, 433, 434, 498,
	435, 499, 0, 436, 437, 438, 0, 440, 441, 0,
	0, 442, 443, 444, 445, 447, 0, 448, 0, 446,
	449, 450, 451, 500, 501, 502, 207, 453, 452, 503,
	0, 0, 0, 0, 454, 455, 504, 456, 457, 458,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 219,
	220, 221, 222, 460, 461, 223, 462, 224, 225, 463,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	464, 465, 466, 0, 233, 467, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 468, 469, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 470, 265, 266, 268, 271, 267, 272, 273,
	274, 471, 472, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 473, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 474, 0, 475,
	285, 0, 286, 287, 288, 289, 476, 477, 478, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 0,
	294, 296, 303, 0, 0, 297, 479, 299, 298, 300,
	301, 302, 480, 0, 481, 0, 304, 0, 482, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 483, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 0, 0, 0, 484,
	485, 337, 338, 0, 339, 340, 341, 0, 0, 343,
	344, 345, 0, 0, 346, 486, 0, 347, 0, 487,
	348, 342, 349, 350, 351, 352, 353, 354, 0, 355,
	356, 488, 357, 489, 358, 0, 359, 0, 360, 361,
	362, 363, 364, 365, 490, 961, 367, 0, 368, 369,
	370, 371, 372, 0, 374, 375, 376, 373, 377, 378,
	379, 380, 0, 381, 0, 382, 383, 384, 385, 491,
	386, 0, 387, 391, 392, 393, 394, 395, 396, 397,
	0, 404, 405, 398, 400, 401, 402, 399, 403, 406,
	407, 0, 408, 388, 389, 409, 0, 410, 492, 411,
	412, 0, 422, 413, 414, 415, 390, 416, 420, 421,
	417, 418, 419, 493, 0, 424, 425, 423, 0, 426,
	427, 428, 429, 430, 269, 431, 270, 432, 0, 494,
	495, 496, 497, 0, 439, 0, 433, 434, 498, 435,
	499, 0, 436, 437, 438, 0, 440, 441, 0, 0,
	442, 443, 444, 445, 447, 0, 448, 0, 446, 449,
	450, 451, 500, 501, 502, 207, 453, 452, 503, 0,
	0, 0, 0, 454, 455, 504, 456, 457, 458, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 459, 0, 0, 0, 0, 219, 220,
	221, 222, 460, 461, 223, 462, 224, 225, 463, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 464,
	465, 466, 0, 233, 467, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 468, 469, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 470, 265, 266, 268, 271, 267, 272, 273, 274,
	471, 472, 0, 0, 0, 0, 0, 0, 0, 275,
	276, 277, 473, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 474, 0, 475, 0,
	0, 286, 287, 288, 289, 476, 477, 478, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 479, 299, 298, 300, 301,
	302, 480, 0, 481, 0, 304, 0, 482, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 483, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 484, 485,
	337, 338, 0, 339, 340, 341, 0, 0, 343, 344,
	345, 0, 0, 346, 486, 0, 347, 0, 487, 348,
	342, 349, 350, 0, 352, 353, 354, 0, 355, 356,
	488, 357, 489, 358, 0, 359, 0, 360, 361, 362,
	0, 364, 365, 490, 366, 367, 0, 368, 369, 370,
	371, 372, 0, 374, 375, 376, 373, 377, 378, 379,
	380, 0, 381, 0, 382, 383, 384, 385, 491, 0,
	0, 387, 391, 392, 393, 394, 395, 396, 397, 0,
	404, 405, 398, 400, 401, 402, 399, 403, 406, 407,
	0, 408, 388, 389, 409, 0, 410, 492, 411, 412,
	0, 422, 413, 414, 415, 390, 416, 420, 421, 417,
	418, 419, 493, 0, 424, 425, 423, 0, 426, 427,
	428, 429, 430, 269, 431, 270, 432, 0, 494, 495,
	496, 497, 0, 439, 0, 433, 434, 498, 435, 499,
	0, 436, 437, 438, 0, 440, 441, 0, 0, 442,
	443, 444, 445, 447, 0, 448, 0, 446, 449, 450,
	451, 500, 501, 502, 0, 453, 452, 503, 0, 0,
	0, 0, 454, 455, 504, 456, 457, 458, 1411, 1412,
	0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 1411, 1412, 1430, 1444, 1445, 1446,
	1454, 1455, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 0, 0,
	0, 1436, 1437, 1438, 1439, 1433, 0, 0, 0, 0,
	0, 1419, 1430, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 1461, 0, 0,
	0, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 1458, 0, 0, 1436, 1437, 1438,
	1439, 1428, 1429, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	1451, 0, 0, 1461, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 1457, 0,
	1458, 0, 0, 0, 0, 0, 0, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1411, 1412, 0, 1444, 1445,
	1446, 1454, 1455, 1456, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1447, 0, 0, 0, 0, 0,
	0, 1414, 1435, 0, 0, 1460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 1413, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 1430, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 0, 0, 0, 0, 0, 0,
	2445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1436, 1437,
	1438, 1439, 0, 0, 0, 0, 0, 0, 1419, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0,
	0, 1451, 0, 0, 1461, 0, 2444, 0, 1441, 1442,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1458, 0, 0, 0, 0, 0, 0, 1428, 1429,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 1412, 0, 1444,
	1445, 1446, 1454, 1455, 1456, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 1414, 1435, 0, 0, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 1413,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 0, 0, 0, 1436,
	1437, 1438, 1439, 1433, 0, 0, 0, 0, 0, 1419,
	1430, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453,
	0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421,
	0, 0, 1451, 0, 0, 1461, 0, 2441, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 1458, 0, 0, 1436, 1437, 1438, 1439, 1428,
	1429, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 1451, 0,
	0, 1461, 0, 0, 0, 1441, 1442, 1443, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 1457, 0, 1458, 0,
	0, 0, 0, 0, 0, 1428, 1429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 1414,
	1435, 0, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 1413, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 1430, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427,
	1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 0, 0, 0, 0, 0, 0, 0, 2440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1437, 1438, 1439,
	0, 0, 0, 0, 0, 0, 1419, 0, 1450, 0,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 1451,
	0, 0, 1461, 0, 2439, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1458,
	0, 0, 0, 0, 0, 0, 1428, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446,
	1454, 1455, 1456, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	1414, 1435, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1413, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 0, 0,
	1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 0, 0, 0, 1436, 1437, 1438,
	1439, 1433, 0, 0, 0, 0, 0, 1419, 1430, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0,
	1451, 0, 0, 1461, 0, 2005, 0, 1441, 1442, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	1458, 0, 0, 1436, 1437, 1438, 1439, 1428, 1429, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 1451, 0, 0, 1461,
	0, 0, 0, 1441, 1442, 1443, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 1457, 0, 1458, 0, 0, 0,
	0, 0, 0, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1411,
	1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 1435, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 1452, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 0,
	0, 0, 0, 3296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1437, 1438, 1439, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 3292,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1458, 0, 0, 0, 0,
	0, 0, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 1435, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 1452, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 0, 0, 1411, 1412, 1430, 1444, 1445, 1446,
	1454, 1455, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 0, 0,
	0, 1436, 1437, 1438, 1439, 1433, 0, 0, 0, 0,
	0, 1419, 1430, 0, 0, 1450, 0, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 3225, 0,
	0, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 1458, 0, 0, 1436, 1437, 1438,
	1439, 1428, 1429, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	1451, 0, 0, 1461, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 1457, 0,
	1458, 0, 0, 0, 0, 0, 0, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 1435, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 1452, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 0, 0, 0, 3224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1437, 1438, 1439,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451,
	0, 0, 1461, 3128, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1458,
	0, 0, 0, 0, 0, 0, 1428, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 1435, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 1452, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 1411, 1412,
	1430, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 0, 0, 0, 1436, 1437, 1438, 1439, 1433,
	0, 0, 0, 0, 0, 1419, 1430, 0, 0, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451, 0,
	0, 1461, 3046, 0, 0, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 1458, 0,
	0, 1436, 1437, 1438, 1439, 1428, 1429, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 1451, 0, 0, 1461, 0, 0,
	0, 1441, 1442, 1443, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 1457, 0, 1458, 0, 0, 0, 0, 0,
	0, 1428, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1411, 1412, 0,
	1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 1447, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 1435, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 1452, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 1450, 0,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0,
	0, 2998, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 1438, 1439, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 1451, 0, 0, 1461, 2997, 0, 0,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 1458, 0, 0, 0, 0, 0, 0,
	1428, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 1412, 0, 1444,
	1445, 1446, 1454, 1455, 1456, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 1435, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	1452, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 0, 0, 0, 1436,
	1437, 1438, 1439, 1433, 0, 0, 0, 0, 0, 1419,
	1430, 0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431,
	1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418,
	1420, 1421, 1451, 0, 0, 1461, 2996, 0, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 1458, 0, 0, 1436, 1437, 1438, 1439, 1428,
	1429, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 1451, 0,
	0, 1461, 0, 0, 0, 1441, 1442, 1443, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 1457, 0, 1458, 0,
	0, 0, 0, 0, 0, 1428, 1429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	1435, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 1452, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427,
	1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 0, 0, 0, 0, 2962, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1437, 1438, 1439, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 1450, 0,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451, 0, 0,
	1461, 2771, 0, 0, 1441, 1442, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 1458, 0, 0,
	0, 0, 0, 0, 1428, 1429, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0,
	0, 1440, 0, 0, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 1435,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 1452, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 1437, 1438, 1439, 0, 0, 0,
	0, 0, 0, 1419, 3385, 0, 0, 1450, 0, 0,
	1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 1451, 0, 2396, 1461,
	0, 0, 0, 1441, 1442, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 1458, 0, 0, 0,
	0, 0, 0, 1428, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1434, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1448,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3384,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1411,
	1412, 0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 1447, 0,
	0, 0, 0, 2367, 0, 1414, 0, 0, 1435, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1413, 1452, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 1437, 1438, 1439, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 1450, 0, 0, 1425,
	1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415,
	1416, 1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 0,
	0, 0, 1441, 1442, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1458, 0, 0, 0, 0,
	0, 0, 1428, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1411, 1412,
	0, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 1435, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 1452, 0, 0, 0, 0, 2096, 0, 1433,
	0, 0, 0, 0, 1411, 1412, 1430, 1444, 1445, 1446,
	1454, 1455, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 2095, 0, 0,
	1414, 0, 0, 0, 1460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 0, 0,
	0, 1436, 1437, 1438, 1439, 1433, 0, 0, 0, 0,
	0, 1419, 1430, 2484, 0, 1450, 2483, 0, 1425, 1426,
	1432, 1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416,
	1417, 1418, 1420, 1421, 1451, 0, 0, 1461, 0, 0,
	0, 1441, 1442, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 1458, 0, 0, 1436, 1437, 1438,
	1439, 1428, 1429, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	1451, 0, 0, 1461, 0, 0, 0, 1441, 1442, 1443,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 1457, 0,
	1458, 0, 0, 0, 0, 0, 0, 1428, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454,
	1455, 1456, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 1447, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 1435, 1460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1413, 1452, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1436, 1437, 1438, 1439,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	1450, 0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0,
	1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451,
	0, 0, 1461, 0, 0, 0, 1441, 1442, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1458,
	0, 0, 0, 0, 0, 0, 1428, 1429, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 804, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1411, 1412, 0, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 1440, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 1435, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 1452, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 1411, 1412,
	1430, 1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 0, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1413, 0, 0, 0, 1436, 1437, 1438, 1439, 1433,
	0, 0, 0, 0, 0, 1419, 1430, 0, 0, 1450,
	0, 0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424,
	1422, 1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451, 0,
	0, 1461, 0, 0, 0, 1441, 1442, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 1458, 0,
	0, 1436, 1437, 1438, 1439, 1428, 1429, 0, 0, 0,
	0, 1419, 0, 0, 0, 0, 2490, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 1451, 0, 0, 1461, 0, 0,
	0, 1441, 1442, 1443, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1448, 1457, 0, 1458, 0, 0, 0, 0, 0,
	0, 1428, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1411, 1412, 0,
	1444, 1445, 1446, 1454, 1455, 1456, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 1447, 2759, 0, 0,
	2485, 0, 0, 1414, 0, 0, 1435, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1413, 1452, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 1450, 0,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 1437, 1438, 1439, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 1450, 0, 0, 1425, 1426, 1432,
	1431, 1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417,
	1418, 1420, 1421, 1451, 0, 0, 1461, 0, 0, 0,
	1441, 1442, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 1458, 0, 0, 0, 0, 0, 0,
	1428, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 1412, 0, 1444,
	1445, 1446, 1454, 1455, 1456, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 0, 1447, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 1435, 1460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1413,
	1452, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1447, 0, 0, 0, 2438, 0, 0, 1414, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1413, 0, 0, 0, 1436,
	1437, 1438, 1439, 1433, 0, 0, 0, 0, 0, 1419,
	1430, 0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431,
	1427, 1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418,
	1420, 1421, 1451, 0, 0, 1461, 0, 0, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 1458, 0, 0, 1436, 1437, 1438, 1439, 1428,
	1429, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 1451, 0,
	0, 1461, 0, 0, 0, 1441, 1442, 1443, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 1457, 0, 1458, 0,
	0, 0, 0, 0, 0, 1428, 1429, 0, 0, 0,
	0, 2452, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 1448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1411, 1412, 0, 1444, 1445, 1446, 1454, 1455, 1456,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	1435, 1460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1413, 1452, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427,
	1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 1412, 0, 1444,
	1445, 1446, 1454, 1455, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 1437, 1438, 1439, 0, 0,
	0, 0, 1414, 0, 1419, 0, 1460, 0, 1450, 0,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 1451, 0, 1413,
	1461, 0, 0, 0, 1441, 1442, 1443, 1433, 0, 0,
	0, 0, 1411, 1412, 1430, 1444, 1445, 1446, 1454, 1455,
	1456, 0, 0, 0, 0, 1457, 0, 1458, 0, 0,
	0, 1447, 0, 0, 1428, 1429, 0, 0, 1414, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	0, 0, 0, 0, 0, 1413, 0, 0, 0, 1436,
	1437, 1438, 1439, 1433, 0, 1459, 0, 0, 0, 1419,
	1430, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 1461, 0, 0, 0, 1441,
	1442, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 1440, 1458, 0, 0, 1436, 1437, 1438, 1439, 1428,
	1429, 0, 0, 0, 0, 1419, 0, 0, 0, 1435,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 0, 0, 0, 1451, 0,
	0, 1461, 0, 0, 1452, 1441, 1442, 1443, 0, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 1458, 0,
	0, 0, 0, 0, 0, 1428, 1429, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1434, 0,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 1450, 0, 0,
	1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422, 1423,
	1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 1625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 1637, 1619, 1626, 1609, 1647,
	1646, 0, 0, 1611, 1610, 0, 0, 0, 0, 0,
	0, 1657, 1658, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 1425, 1426, 1432, 1431, 1427,
	1453, 0, 1424, 1422, 1423, 1415, 1416, 1417, 1418, 1420,
	1421, 1648, 0, 1644, 1643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1641, 1639, 1640, 0, 1450, 0,
	0, 1425, 1426, 1432, 1431, 1427, 1453, 0, 1424, 1422,
	1423, 1415, 1416, 1417, 1418, 1420, 1421, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1630, 1624, 1632,
	1634, 1635, 1636, 1631, 0, 1629, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1653, 1654, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1613,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1645, 0, 0, 0, 1622, 0, 1623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1638, 0, 0, 0, 1606,
	1604, 1605, 1608, 1607, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1614, 1615, 1617, 1618, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1633,
	1616, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1656, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1612, 0,
	1649, 1650, 1651, 1652, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1620,
	0, 0, 0, 0, 1627, 1655,
}
var sqlPact = [...]int{

	4753, -1000, -1000, -1000, -1000, -1000, -1000, 216, 214, 206,
	194, 192, 191, 186, 184, 176, -1000, -1000, -1000, 172,
	-1000, -1000, 164, -1000, 160, 159, 156, 155, -1000, 151,
	150, -1000, -1000, -1000, -1000, 147, 146, 144, 48781, 1545,
	58292, 50020, 1746, 2068, 43404, 57877, 42989, 57462, 57047, 141,
	-1000, 56632, 139, 137, 135, -1000, -1000, 130, 1268, 35074,
	125, 124, 123, 1703, 122, 111, -1000, 110, -1000, 9104,
	1315, -1000, 104, 103, -1000, 4522, 383, 49605, 2041, 102,
	101, 34658, 1993, -1000, -1000, 1378, -1000, -1000, 99, 93,
	92, 91, 90, 88, 86, 85, 84, -1000, 82, 81,
	80, 79, 78, 76, 75, 74, 73, 72, 71, 70,
	67, 66, 65, 58, 52, -1000, 8134, 1311, 1235, 1233,
	1227, 1225, 1230, 769, 51, 47, 41, 39, 38, 37,
	-1000, -1000, 36, 35, 34, 32, -1000, 27, 26, 180,
	25, 24, 23, 11, 10, 1659, 2017, 1199, 384, 16472,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	62382, 58701, 6, -115, 4, -1000, 2336, 838, 29255, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 399,
	-1000, -1000, -1000, 292, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1437, 593, -1000, -1000, -1000,
	56217, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 58701,
	-1000, 1544, -75, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	590, -1000, 1541, 161, 1482, -1000, -1000, -1000, -1000, -1000,
	58701, -1000, -1000, 2630, 2627, 1430, 589, 55808, -1000, 1238,
	-1000, 694, 19113, -1000, 938, -1000, 19113, 278, -1000, -1000,
	-1000, -1000, -1000, 42574, 13408, 42159, 41744, 38851, 55393, 12983,
	48372, 916, -1000, -1000, -1000, -1000, -1000, -9, 36301, 58701,
	-1000, 276, -1000, -1000, -1000, -1000, -1000, -1000, 25388, 379,
	24937, 351, 24486, 260, -1000, -1000, -1000, -1000, 2626, 2624,
	835, 2623, 2267, 61973, 1273, 2622, 1151, 908, 785, 2621,
	2620, 2619, 2618, 2617, 2616, 2615, 1056, 54978, 2027, 38426,
	38001, 48781, 48781, 1872, 54563, -1000, -1000, 966, 953, -1000,
	-1000, -1000, -1000, 2154, 2065, 2049, 47957, -1000, -1000, 2614,
	2612, 2605, 2604, 2603, 61564, 1267, 2599, 1774, 2598, 2595,
	2594, 2591, 2590, 2589, 2588, 2587, 2586, -1000, 47542, 47127,
	46712, 46297, 54148, 37576, 37151, -1000, -1000, -1000, 30911, 5502,
	53733, 31763, 48781, -1000, -1000, 25826, -45, -1000, -1000, -1000,
	2013, -1000, 25826, -45, -1000, 2026, 1320, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2218, 1211, 2456, 36726, 1427,
	1037, 2153, 2585, 1760, 2152, 2151, 2147, 2146, 2135, 1197,
	1802, 1157, 1135, 2131, 2108, 2478, 1382, 41329, 2584, 2583,
	2308, 2101, 2010, -1000, -1000, -1000, -1000, 1100, -1000, -1000,
	-1000, -1000, -1000, 43813, -1000, -1000, 924, -1000, -1000, 924,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 905, 60746, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1332, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1743, -1000, 1411, -1000, -1000, 2580, 2017,
	1707, 2298, 2298, 2298, 2352, 393, 389, -1000, 180, -1000,
	-1000, 69110, -1000, -1000, 25826, 25826, 25826, 25826, 25826, 1406,
	-1000, 588, -1000, -1000, 627, -1000, 584, 519, -1000, -1000,
	-1000, -1000, -1000, -1000, 583, 2486, -1000, 836, -1000, -1000,
	-1000, -1000, 2455, -1000, 15583, -1000, -1000, -1000, 425, 582,
	25826, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 274, 711, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 507, 1288, 506, 506, 506, -1000, -1000,
	780, -1000, -1000, -1000, 286, 503, 282, 500, -1000, -1000,
	-1000, -1000, 2025, 581, 580, -1000, 572, 568, 563, -1000,
	-1000, -1000, 558, 554, 548, 546, 542, 541, 538, 536,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 774, -1000, 535,
	534, 533, 532, 531, 528, 525, 524, 523, -1000, -1000,
	-20, 58701, -1000, 399, -20, -1000, -1000, 521, -1000, 19551,
	19551, 19551, -1000, -1000, 1537, 25826, -1000, 1922, -1000, 5105,
	-226, 668, 30081, -1000, 28410, 668, 633, 33004, -1000, 2003,
	-1000, -1000, 520, 273, -1000, -1000, 2002, 58701, 13831, 58701,
	48781, 48781, -1000, 2219, 25826, -1000, -1000, 39274, 35892, 58701,
	49190, 2396, 69563, 35892, 58701, 2024, -1000, -1000, -1000, 58701,
	-1000, 25826, -1000, 2395, 1108, -80, -1000, -1000, -1000, -1000,
	-1000, -1000, 1735, 1744, 877, 1597, 1046, -1000, 19113, 2255,
	-1000, -1000, -1000, 248, 13831, -1000, 2831, 2203, 1050, -1000,
	1596, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1228,
	2200, -1000, 2575, 2197, 1218, -1000, -1000, 732, 2196, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1389, -1000,
	-1000, 2302, -1000, -1000, 1647, 2195, -156, -1000, -1000, 39274,
	36301, -38, -1000, -1000, -103, -1000, 12558, 69110, -1000, -1000,
	-1000, 69110, 733, -1000, -1000, 2190, -1000, 69110, 729, -1000,
	-1000, 2189, -1000, -1000, -1000, 2579, -1000, 2578, 1685, 2574,
	2573, 2570, -1000, 1305, 1274, 2568, -1000, 2562, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 45882, 45467, 783, -1000, 1536,
	-1000, -1000, 45052, 724, 1679, -1000, -1000, 1675, -1000, 808,
	-1000, 2560, 53318, 1887, 724, 1671, -1000, -1000, -1000, -1000,
	-1000, 48781, -1000, 48781, -1000, 48781, -1000, 1080, -1000, 61155,
	-226, -1000, -1000, -1000, -1000, -1000, 2167, 2556, 2554, 2548,
	-1000, 58701, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 162, 2162, -1000, -1000, 162, 2156, -1000, 162, 2142,
	-1000, 157, 2140, -1000, -1000, 1508, 2139, -1000, -125, 2127,
	-1000, -1000, -125, 2125, -1000, -4, -1000, -1000, -1000, 838,
	-1000, 30496, 52903, 39274, 718, 632, 69110, -1000, 39274, 69110,
	-1000, 45052, -1000, 52488, 44643, -1000, -1000, 985, 1790, -1000,
	-1000, -1000, -1000, 39274, 39274, -1000, 52073, -1000, 1423, 1167,
	2305, 48781, -1000, -1000, 2023, -1000, 35483, 48781, -1000, 48781,
	-1000, 48781, -1000, 48781, -1000, 48781, -1000, 2545, 2544, 2542,
	2119, 1237, 1229, 58701, -1000, -1000, 2315, 58701, -1000, 58701,
	-1000, -1000, -1000, 1723, -1000, -1000, -1000, -1000, 48781, -1000,
	-1000, -1000, -1000, -1000, -1000, 2022, -1000, 1173, -1000, 975,
	-1000, -1000, 166, -1000, -1000, -80, -1000, 60746, -1000, -1000,
	2017, 1707, -1000, 58701, -1000, -1000, -1000, 2017, 1556, 1848,
	24035, 1798, 25826, 180, -1000, -1000, 180, 180, 18675, -1000,
	-1000, 69563, 69563, 13831, 940, 25826, 25826, 25826, 25826, 25826,
	25826, 25826, 25826, 25826, 25826, 25826, 25826, 25826, 25826, 25826,
	25826, 25826, 25826, 25826, 25826, 25826, 25826, 25826, 25826, 25826,
	25826, 25826, 25826, 25826, 25826, 25826, 25826, 25826, 25826, 25826,
	1611, 25826, 901, 25826, 25826, 25826, 25826, 1258, -1000, -1000,
	1335, 418, 1386, -1000, 2445, 2445, 2445, 69215, 69215, 517,
	2541, 627, -1000, 25826, -1000, -45, 25826, 14256, -1000, 2469,
	1148, -1000, -1000, 389, 8381, 1655, -1000, 388, 14707, -1000,
	-1000, -1000, 15583, 519, 23584, 25826, 751, 69110, 12135, 2036,
	1927, -1000, 2467, -1000, -1000, 2457, -1000, -1000, -1000, -1000,
	2457, 939, 933, 2465, -1000, 2457, 2457, 518, 738, 734,
	731, 703, 701, 25826, 25826, 25826, 25826, 25826, 25826, 25826,
	25826, -1000, 23146, 22695, 22244, 27140, 21793, 25826, 16021, 21342,
	20891, 58701, -20, 2388, 25826, 142, -1000, 67583, -1000, 142,
	142, 516, -5, 69110, 1788, 1788, 29668, 1800, 1414, 1414,
	1414, -1000, 512, 608, 668, 9581, 50429, 1418, 668, 668,
	240, 272, 387, 27997, 1922, 50429, -1000, -1000, 48781, 510,
	14256, 13831, 1043, -11, 232, 1816, 1814, 1804, -1000, 1120,
	-12, 718, 899, -13, -1000, 207, -21, -1000, 873, -1000,
	-1000, -1000, -1000, 134, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 771, 509, 508, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 507, 1288, 506, 506, 506, -1000, -1000, -1000, 286,
	503, 282, 500, -1000, -1000, -1000, -1000, -1000, -1000, 1998,
	-103, 49190, 697, -23, 840, -80, -1000, 924, -1000, 1450,
	-1000, -1000, -1000, -1000, -1000, -1000, 991, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2485, -1000, 2453, -1000, -1000, 2463,
	-32, -1000, -1000, 13831, -1000, -81, 1183, -1000, 40914, 2301,
	2295, 2287, 1078, -1000, 1058, 2346, 43813, 2366, 3, -1000,
	1996, -1000, -1000, 689, 1166, 897, 43813, 2575, -1000, 69563,
	-1000, 1868, 2341, 1074, 1077, 1074, 1074, 936, -1000, 43813,
	895, 1319, 39274, -1000, 894, -1000, -91, 2365, -2, -1000,
	1995, 890, -1000, -1000, 48781, 13831, 666, -38, 36301, 58701,
	227, -1000, 25826, -45, 25826, -45, -1000, -1000, 2107, -1000,
	-1000, -1000, 2533, 1250, 1767, -1000, -1000, -1000, 497, 1670,
	2575, 1666, -1000, -1000, 44228, 1994, 58701, 1819, -52, 48781,
	-1000, -1000, 1316, -1000, 2105, 2104, 570, 2532, -1000, 1533,
	1652, -1000, -1000, -1000, 60337, 885, 2099, 741, 129, 2386,
	129, 33830, -1000, 58701, -1000, 58701, -1000, -1000, -1000, 2530,
	-1000, 48781, -1000, -1000, 48781, -1000, 48781, -1000, 48781, -1000,
	48781, 48781, -1000, 58701, 39274, 39274, 39274, 5497, 40096, -25,
	386, -1000, 51664, 58701, 806, 40505, -206, 718, 666, -1000,
	666, -1000, 48781, 2021, -1000, -1000, -1000, -1000, -1000, -1000,
	2528, 2526, -1000, -1000, -1000, 58701, -1000, 58701, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1091, -1000, 2020,
	-1000, 2018, -1000, 31, -1000, -1000, -1000, -1000, -1000, 1580,
	48781, 48781, 48781, -1000, 43813, -1000, -1000, 2017, -1000, -1000,
	-1000, -1000, -1000, 69110, -1000, 463, -1000, -1000, 69110, 1126,
	1823, -1000, 1823, -51, -1000, 67238, 1782, 48781, -1000, -1000,
	-1000, -1000, -1000, 688, 448, 448, 942, 942, 942, 942,
	2380, 3488, 3497, 850, 3885, 3885, 3885, 3885, 3885, 3885,
	3885, 3885, 457, 323, 323, 457, 457, 457, 457, 457,
	323, 323, 323, 3885, 3885, 3885, 69215, 69281, 7363, 25826,
	25826, 886, 1330, 418, 6975, 25826, 7429, 7429, 7429, 7429,
	-1000, 1680, -1000, -1000, -1000, -1000, 1992, 496, 27140, 27140,
	-1000, -1000, -1000, -1000, 15145, 25826, -1000, -1000, -1000, -1000,
	20440, -1000, -1000, 66680, -252, 385, -198, 2, -1000, 25826,
	25826, 25826, 381, -1000, 380, -1000, -1000, 884, -1000, 883,
	882, 880, -1000, 494, 226, 25826, 58701, -1000, 64182, 605,
	-161, -1000, -33, 1042, -1000, 25826, 225, -1000, 1383, 493,
	492, 377, -34, -1000, 376, 687, 672, 374, 373, 371,
	25826, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 68831, 63901, 63835, 63554, 6076, 63273, 63207, -39, 370,
	-1000, 1987, -198, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	369, -1000, 367, -1000, 68765, -198, 366, 210, -1000, 27140,
	27140, 27140, -1000, 363, -1000, 67517, -1000, 68486, 20002, 20002,
	20002, 358, 68207, 25826, -198, -44, -1000, -50, -1000, -1000,
	485, -54, 741, 19551, 28839, 13831, -1000, 741, 741, 25826,
	-1000, 25826, 1799, -1000, -1000, -1000, 1793, 1538, 1788, 29668,
	-1000, -1000, -1000, -1000, 50429, 578, 668, 50429, -1000, 2455,
	1916, -1000, -1000, -1000, 58701, 399, -1000, 50429, 50429, 13831,
	668, -1000, 356, 32176, 2, 224, -1000, -1000, 13831, 1852,
	1852, 1852, -1000, -1000, 1985, 58701, 2408, -1000, 1298, -1000,
	69563, -1000, 625, 925, -1000, 2462, 472, -1000, 2457, 2457,
	58701, 131, 19113, -1000, 924, -1000, -1000, 1156, -1000, 1261,
	-1000, 881, -1000, -1000, -1000, 19113, -1000, 2639, 58701, 58701,
	48781, -1000, -1000, 1650, 59928, 1648, 69563, 58701, -1000, -1000,
	471, 470, 1779, 1778, 58701, 58701, 59519, 59110, 58701, 1419,
	25826, 1339, 1352, -45, -1000, -45, 464, 978, 48781, 48781,
	48781, 1214, -1000, -1000, -1000, -1000, -1000, 48781, -1000, -1000,
	2460, -1000, 1074, -1000, -1000, -1000, 1074, 2575, 1198, 48781,
	39274, 730, 58701, 1351, -45, -1000, -45, 462, 13831, 1204,
	-1000, 1893, -1000, -1000, -1000, 11712, 69110, -1000, 69110, -1000,
	58701, -1000, 782, 58701, 40505, 714, 2094, -1000, 2575, 2088,
	399, -1000, -1000, 33417, -103, 718, 39274, 48781, -52, 39274,
	39274, 39274, 2525, 461, 2521, -1000, 48781, 2086, 1531, 1645,
	2106, 651, 58701, 1432, -1000, 25826, 1226, -1000, 32591, 792,
	58701, 1138, 108, -1000, -1000, -1000, 21, 58701, -1000, 2519,
	-1000, -1000, 162, 162, 162, -1000, 157, 1508, -1000, -125,
	-125, -1000, -1000, 5497, 718, -69, 460, -1000, 660, 659,
	31340, 39274, -55, -1000, -1000, -1000, -1000, -1000, 48781, 58701,
	624, 1885, 58701, -1000, 718, -1000, -1000, 726, -1000, 962,
	-1000, -1000, -103, -103, -1000, 1090, 1089, 58701, -1000, 13831,
	58701, 48781, 13831, 48781, -1000, -1000, -1000, -1000, -1000, 1126,
	-1000, 25826, -1000, -1000, -1000, 18675, -1000, -1000, -1000, 48781,
	-210, 25826, 25826, 6468, 6131, 25826, 27140, 27140, -1000, 25826,
	4123, -1000, -1000, -1000, -1000, -1000, 1983, 458, 25826, 69563,
	5942, 5742, -1000, 352, 8917, 457, -1000, 25826, -1000, 348,
	18237, -1000, 67862, -18, -18, -1000, 2482, 1702, 1405, 1247,
	1104, 2459, 11289, -198, -59, -1000, -1000, 621, -1000, 2150,
	-1000, 25826, 68141, 10866, -1000, 34243, 743, 1432, -1000, -1000,
	2457, 684, -1000, -1000, -1000, 684, -1000, 66401, 69563, 69563,
	25826, 25826, -1000, 25826, 25826, 25826, -1000, -1000, 25826, -1000,
	-1000, 1978, 25826, -1000, 69563, 69563, 27140, 27140, 27140, 27140,
	27140, 27140, 27140, 27140, 27140, 27140, 27140, 27140, 27140, 27140,
	27140, 27140, 27140, 27140, 27140, 1711, 27140, 2426, 2426, 2426,
	-1000, 1965, 1978, 25826, 25826, 69563, 346, 345, 342, -1000,
	25826, -198, -1000, -1000, 5497, -1000, 1919, -1000, -192, -1000,
	1922, -1000, -1000, 1919, 1919, -60, 69110, 29668, 29668, -1000,
	456, 25826, 1792, -1000, 604, -1000, -61, -1000, 50429, -1000,
	601, -249, -1000, 658, -1000, -1000, -1000, 399, -1000, -1000,
	-1000, 223, 50429, -1000, -71, -1000, 2381, 341, 13831, -1000,
	-1000, -1000, -1000, -1000, -1000, -45, -103, 1479, 2477, -1000,
	2458, 618, 600, 340, 2457, 338, 334, -103, 58701, -1000,
	-80, -1000, -1000, -1000, 25826, -1000, -1000, 2294, 874, 872,
	-1000, 2081, -1000, 1636, -1000, 800, -1000, 1159, -1000, 25826,
	25826, 440, 436, 1328, 2518, 2074, 1508, 2064, 1508, -1000,
	-1000, 704, -1000, 69110, 434, 433, -1000, -81, 1168, -1000,
	-1000, 25826, 25826, 51251, -1000, 2302, 2302, -1000, 871, -1000,
	-1000, -1000, 2575, 870, -1000, -1000, 1304, -1000, -1000, -1000,
	-1000, 25826, -1000, -91, 867, 718, 1975, -1000, 2513, 2512,
	2511, 333, -96, -1000, 2378, 1552, 58701, 48781, 48781, 2377,
	680, -1000, 2455, -1000, -1000, -1000, -1000, 724, -1000, -1000,
	2507, -1000, 805, 13831, 48781, 2062, 1749, 651, 39687, -1000,
	724, 1848, -1000, 69110, -1000, 1138, 17786, 2292, -76, -1000,
	143, -1000, -1000, -1000, 741, 33830, 29668, 25826, 2501, -87,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 50842, 50842,
	39274, 39274, 39274, 718, 58701, 58701, 40505, 2500, 432, 58701,
	58701, 431, -1000, -1000, -1000, 1468, 48781, -1000, -1000, 722,
	-1000, -1000, 1353, 1595, 1353, 1486, 66335, -1000, 2290, 13831,
	2387, 7429, 25826, 25826, 1029, 4754, 1615, 7429, 25826, 25826,
	69563, 6657, -94, 25826, 25826, -1000, 25826, 598, 69110, 2473,
	25826, 332, 330, 328, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 327, -1000, -1000, -1000, -1000, -1000, 69110, 25826,
	109, -1000, -1000, -1000, 62791, -1000, 25826, 325, 322, -1000,
	-1000, -1000, 320, 312, 8851, 4276, 66056, 65777, 65711, 69110,
	1965, 69110, -1000, -1000, 674, 674, 1051, 1051, 1051, 1051,
	2426, 1646, 253, 1587, 964, 964, 964, 1164, 495, 495,
	964, 964, 964, 1960, 1728, 430, 486, -1000, -1000, 69110,
	69110, 310, -1000, -1000, -1000, -198, 309, 1921, 2338, -1000,
	29668, 1921, 1921, -1000, -1000, 1538, 58701, 69110, 29668, -226,
	-1000, 2455, -1000, -1000, 1916, -1000, 10016, -1000, 13831, -1000,
	-1000, 32176, -1000, 429, -1000, -1, -1000, -1000, -1000, 596,
	2499, 612, -1000, 303, -1000, -1000, -103, 69110, 58701, 58701,
	58701, 2058, -1000, 3503, -1000, 65432, -95, -1000, 67238, 25826,
	58701, -1000, 1276, 1828, 829, -1000, 58701, -1000, 58701, -1000,
	-1000, 58701, 58701, 48781, -101, 69110, -111, -1000, 657, -1000,
	-1000, 48781, 48781, 39274, -102, 13831, -1000, 39274, -1000, -1000,
	-1000, 1864, -45, -1000, 2497, 427, 2575, -45, -1000, 1455,
	-1000, 595, -1000, -1000, 426, 58701, 1527, 424, 13831, 1752,
	651, 39687, -1000, 885, 1138, -1000, -1000, -121, -1000, 501,
	-45, 58701, 2495, 1432, -1000, -123, 69110, -1000, 656, -1000,
	-106, -1000, -1000, 302, -1000, 2239, 2237, -1000, -1000, 25826,
	422, 421, 58701, 1574, -1000, -1000, -1000, -1000, 13831, 1162,
	-1000, -1000, -1000, -1000, 2290, 7429, 7429, 25826, 25826, 25826,
	7429, 6657, -107, -1000, 7429, 7429, -198, -1000, -1000, 67862,
	-1000, -1000, -1000, -1000, 69110, 10443, 1360, -1000, 65153, -1000,
	-1000, -1000, -1000, 25826, 25826, -1000, -1000, -1000, -1000, -1000,
	27140, 1959, 420, 69563, -1000, -1000, 736, 25826, 25826, 1922,
	736, 736, -1000, -114, -1000, 668, -1000, -1000, -1000, 2455,
	-1, -1000, 2494, 13831, 610, -1000, 2493, -1000, -1000, -1000,
	-1000, 58701, -1000, 58701, -1000, 13831, 58701, 1962, 1626, -1000,
	-1000, 1765, 419, 27140, 48781, 745, 1938, 1314, 25826, -1000,
	-126, -128, 1620, -1000, -1000, 1602, 25826, -1000, 69563, 1508,
	1508, -134, -138, -1000, 862, 58701, 17348, -1000, -1000, -1000,
	860, -1000, -125, 1351, 1904, 720, -1000, 40505, 714, -1000,
	-1000, 712, -1000, 25826, -1000, 48781, 25826, 1524, -1000, 651,
	39687, -1000, 2106, -1000, 2163, 58701, 2286, -1000, -1000, -1000,
	1848, 418, -1000, 718, 417, 416, -139, 25826, 25826, -145,
	-135, -1000, 725, 428, -1000, -1000, 48781, 48781, -1000, 7429,
	7429, 7429, -1000, 296, -1000, -1000, 1432, 2337, -1000, 65087,
	64808, 3448, 27140, 69563, -146, -1000, 58701, 69110, -198, -1000,
	-1000, -1000, 50429, 579, -1000, 2492, -1000, -1000, 1400, -1000,
	-1000, -1000, 58701, 1632, -1000, -1000, 25826, 486, 415, 25826,
	-1000, -1000, 1841, 1974, 1864, 414, -1000, -1000, -1000, -1000,
	1163, -1000, -1000, 69110, 2312, -1000, -1000, 411, 409, 408,
	644, 1956, -1000, 406, 714, -1000, 1385, -1000, 1794, 294,
	2376, 712, -1000, 2444, -1000, -150, 805, -151, 48781, 39687,
	-1000, 1749, 980, -157, 58701, 1138, -1000, -1000, 39274, 39274,
	1314, -164, -165, -1000, 1574, -1000, 58701, -1000, 58701, -1000,
	-1000, -1000, 1282, 25826, -1000, -1000, 3448, -169, -1000, -174,
	-1000, 2375, -1000, -1000, -1000, -1000, -1000, 2057, 64529, 1712,
	58701, 64463, 1972, -1000, -1000, 1351, 58701, 48781, 804, 13831,
	1353, 1353, 25826, 16910, 1374, 25826, -1000, 48781, -1000, 2236,
	1864, -45, -1000, -1000, 1314, 405, 1314, 403, -1000, 1752,
	1075, -1000, 741, -1000, -1000, -175, -176, 1864, 1314, -1000,
	-1000, -177, -181, 163, 26702, 26702, 26702, -198, -1000, 58701,
	402, 2044, -1000, 1488, 1413, 33, 803, -1000, -1000, 1938,
	-182, 399, -1000, 25826, -1000, -183, -1000, 791, -194, -1000,
	790, -199, -1000, 1953, -1000, -200, 398, -1000, 1351, 720,
	1864, 25826, 1864, 25826, -1000, 33830, -1000, 718, 718, 1351,
	1864, -1000, -1000, -1000, -1000, -1000, 27563, 1443, 1129, 66959,
	-1000, -1000, -1000, -1000, 58701, -1000, 1509, 1489, 1112, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1712, 69110, -1000,
	1353, 1903, -1000, 1353, 1935, -1000, 1370, -1000, 58701, 714,
	-1000, 1351, -201, 1351, -205, -212, -1000, -1000, -1000, 1351,
	2384, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2220, -1000,
	814, 1627, 1627, 1488, -1000, 397, -1000, 396, -1000, -211,
	-1000, 740, 1314, 740, 1314, -1000, -1000, 26264, -1000, 2412,
	-1000, -1000, 1762, -1000, 1938, 25826, 25826, 1398, -1000, 2490,
	1864, -1000, 1864, -1000, -1000, -1000, -1000, -1000, -215, -221,
	-1000, -1000, -1000, -1000, 1351, 1351, 1351, 855, 740, 740,
	-1000, 395, -1000, -1000, 25826, -223, 1351, -1000,
}
var sqlPgo = [...]int{

	0, 3195, 3169, 3168, 3167, 3165, 3164, 3162, 3161, 3160,
	3159, 3156, 3154, 3149, 3145, 3144, 3141, 3140, 3139, 3135,
	3130, 3127, 3124, 3122, 3121, 3120, 3116, 3113, 3112, 3111,
	3109, 3108, 3106, 3105, 3101, 3098, 3089, 3081, 3080, 3079,
	3077, 3076, 3075, 3072, 29, 3068, 3063, 3062, 3060, 3052,
	3051, 3050, 3049, 3048, 3040, 3035, 3033, 3026, 3023, 3020,
	3018, 3015, 44, 3014, 3013, 3011, 3009, 3006, 3004, 3003,
	3002, 3001, 3000, 2997, 2996, 2992, 2989, 104, 2988, 2987,
	2984, 2981, 2980, 2979, 2975, 2969, 2966, 2957, 2952, 2950,
	2949, 2948, 138, 2947, 2946, 2945, 2939, 2931, 2930, 2928,
	2924, 2923, 2921, 191, 2920, 2917, 2913, 2908, 2907, 2906,
	2904, 2903, 2897, 2895, 2891, 2889, 2888, 2887, 2885, 2880,
	2878, 2876, 2875, 2873, 2872, 2870, 2869, 2867, 2866, 2865,
	2864, 199, 137, 2863, 2862, 2857, 2856, 2855, 2853, 105,
	94, 22, 2852, 86, 160, 183, 294, 177, 2851, 2850,
	2849, 2848, 2846, 64, 127, 133, 125, 126, 203, 2845,
	2844, 69, 53, 31, 27, 101, 2842, 2841, 2838, 2394,
	92, 2836, 2835, 195, 182, 2834, 1004, 2833, 123, 89,
	91, 95, 63, 2832, 114, 17, 2831, 169, 30, 2830,
	119, 66, 34, 5416, 6065, 2828, 83, 202, 75, 135,
	176, 158, 162, 155, 128, 122, 2826, 187, 2825, 96,
	150, 2823, 2820, 2819, 58, 143, 1, 6, 140, 9,
	90, 15, 2814, 11, 2813, 2812, 2811, 2810, 32, 129,
	2808, 65, 71, 2804, 20, 54, 161, 2798, 168, 2797,
	93, 2796, 192, 144, 149, 13, 175, 2780, 2779, 2778,
	2777, 2776, 99, 21, 97, 2775, 2772, 106, 180, 2768,
	43, 130, 70, 110, 219, 85, 165, 74, 166, 134,
	174, 2767, 2763, 2762, 157, 2760, 2759, 115, 159, 2758,
	2757, 201, 33, 50, 179, 51, 2756, 2755, 121, 2754,
	151, 2753, 2748, 2747, 200, 132, 170, 10, 68, 88,
	26, 8, 178, 120, 80, 77, 2745, 2940, 1397, 1013,
	2744, 111, 87, 56, 79, 124, 193, 38, 2742, 2741,
	716, 2740, 2739, 2738, 2737, 136, 2736, 2735, 2734, 108,
	84, 72, 2733, 2732, 113, 61, 209, 197, 76, 164,
	154, 188, 2731, 141, 2730, 37, 103, 2729, 146, 186,
	112, 2728, 1104, 109, 2727, 163, 2726, 2725, 2724, 2721,
	98, 2719, 2711, 361, 2708, 116, 2706, 2705, 142, 148,
	173, 67, 28, 2704, 59, 35, 2702, 145, 40, 2698,
	2674, 36, 0, 6351, 5122, 5873, 2694, 3044, 2688, 156,
	102, 2687, 2682, 2681, 2679, 55, 14, 3, 5, 16,
	12, 948, 313, 2677, 2675, 73, 100, 117, 2673, 198,
	167, 2672, 2671, 2670, 62, 2668, 25, 2667, 23, 2665,
	2664, 24, 4, 2661, 2660, 184, 2658, 185, 2657, 2656,
	2405, 2653, 196, 2652, 107, 2651, 131, 153, 2650, 2649,
	2647, 2646, 190, 2645, 189, 2644, 18, 19, 2, 2643,
	2642, 2640, 152, 7, 2190, 2636, 2634, 57, 147, 81,
	2633, 2577, 139,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	432, 432, 17, 27, 18, 28, 12, 434, 434, 434,
	434, 21, 19, 19, 29, 29, 142, 142, 142, 142,
	16, 16, 24, 24, 155, 155, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 431, 431, 157,
	157, 156, 152, 152, 435, 435, 158, 158, 158, 160,
	160, 33, 33, 90, 90, 90, 143, 83, 83, 83,
	83, 83, 83, 83, 78, 78, 380, 380, 381, 381,
	138, 138, 139, 139, 139, 139, 140, 140, 141, 141,
	141, 47, 35, 35, 35, 35, 35, 35, 35, 36,
	36, 36, 36, 37, 37, 37, 37, 37, 37, 38,
	38, 38, 38, 38, 38, 45, 45, 45, 45, 132,
	132, 48, 48, 48, 48, 48, 48, 48, 48, 48,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 440, 440, 441, 441, 442, 442, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 443, 443, 443,
	443, 443, 443, 443, 443, 443, 443, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 59, 59, 230, 230, 208, 208, 60, 60,
	60, 61, 61, 62, 62, 49, 49, 427, 427, 243,
	243, 347, 347, 64, 64, 65, 65, 65, 65, 65,
	65, 66, 66, 66, 66, 66, 66, 66, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 73, 73,
	73, 74, 74, 74, 71, 71, 71, 69, 69, 69,
	68, 68, 68, 72, 72, 72, 70, 70, 70, 244,
	244, 75, 75, 75, 75, 75, 75, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 349, 349,
	76, 76, 76, 318, 318, 79, 79, 79, 275, 275,
	80, 80, 80, 80, 80, 81, 81, 81, 81, 91,
	91, 91, 91, 430, 430, 236, 236, 173, 173, 173,
	173, 86, 86, 86, 86, 87, 87, 87, 88, 88,
	137, 137, 97, 97, 97, 97, 97, 96, 96, 96,
	96, 96, 96, 39, 39, 39, 40, 40, 41, 41,
	42, 42, 43, 43, 44, 44, 44, 44, 44, 99,
	99, 436, 436, 101, 98, 98, 98, 100, 100, 100,
	100, 102, 103, 103, 103, 103, 103, 103, 104, 104,
	374, 374, 251, 251, 372, 372, 388, 388, 373, 373,
	212, 212, 212, 212, 212, 213, 213, 213, 379, 379,
	379, 379, 379, 379, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 122, 122, 122, 131, 131, 131, 131,
	131, 131, 131, 124, 124, 124, 114, 114, 106, 106,
	106, 106, 110, 110, 110, 110, 110, 107, 107, 111,
	111, 113, 113, 115, 115, 115, 115, 115, 115, 108,
	108, 108, 108, 117, 117, 117, 117, 281, 281, 281,
	116, 116, 333, 333, 127, 127, 127, 127, 127, 127,
	332, 332, 123, 123, 123, 123, 126, 126, 126, 126,
	265, 265, 120, 120, 120, 121, 121, 121, 125, 125,
	128, 128, 128, 128, 109, 109, 109, 445, 445, 445,
	129, 129, 119, 119, 130, 130, 130, 130, 130, 130,
	130, 130, 118, 118, 118, 433, 433, 112, 428, 428,
	425, 425, 425, 425, 425, 425, 425, 426, 426, 429,
	429, 84, 84, 84, 54, 54, 446, 446, 446, 55,
	55, 447, 447, 447, 444, 444, 444, 444, 444, 444,
	444, 444, 214, 214, 215, 215, 299, 299, 299, 299,
	299, 216, 216, 159, 159, 159, 219, 220, 220, 217,
	217, 218, 218, 218, 222, 222, 221, 224, 224, 223,
	298, 393, 393, 394, 394, 394, 394, 394, 394, 394,
	395, 395, 395, 395, 395, 395, 395, 395, 395, 395,
	391, 391, 391, 392, 389, 389, 390, 390, 390, 390,
	448, 448, 448, 448, 448, 448, 449, 449, 297, 297,
	228, 228, 396, 396, 396, 396, 397, 397, 397, 397,
	397, 400, 399, 398, 398, 398, 398, 398, 328, 328,
	328, 58, 58, 58, 262, 262, 261, 261, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 134, 134, 56, 56, 56, 165, 165, 53,
	53, 53, 451, 451, 57, 57, 57, 452, 452, 63,
	63, 63, 63, 63, 63, 52, 52, 52, 52, 52,
	453, 453, 282, 282, 280, 280, 234, 234, 335, 177,
	177, 153, 153, 153, 20, 22, 22, 15, 15, 30,
	30, 31, 31, 26, 26, 437, 437, 438, 438, 85,
	85, 89, 89, 89, 95, 95, 133, 133, 133, 133,
	133, 133, 133, 34, 34, 34, 34, 46, 46, 46,
	46, 93, 455, 455, 455, 94, 94, 454, 454, 172,
	172, 172, 172, 174, 174, 294, 294, 295, 295, 456,
	456, 296, 296, 296, 296, 167, 166, 168, 168, 51,
	51, 51, 161, 161, 162, 162, 163, 163, 164, 164,
	457, 457, 82, 82, 82, 136, 136, 207, 207, 290,
	290, 290, 229, 229, 182, 182, 293, 293, 291, 291,
	291, 291, 260, 260, 260, 135, 135, 239, 239, 253,
	253, 254, 254, 344, 344, 255, 92, 92, 146, 146,
	144, 144, 144, 144, 144, 144, 458, 458, 145, 145,
	145, 147, 147, 147, 147, 147, 147, 147, 150, 150,
	150, 150, 151, 151, 151, 149, 149, 407, 407, 407,
	409, 409, 410, 406, 406, 408, 408, 450, 450, 264,
	264, 264, 226, 227, 225, 225, 459, 459, 232, 232,
	231, 233, 233, 334, 334, 334, 258, 258, 258, 258,
	285, 285, 283, 283, 284, 284, 286, 286, 287, 287,
	287, 288, 288, 289, 289, 257, 257, 314, 314, 148,
	148, 148, 238, 238, 238, 240, 240, 305, 305, 305,
	305, 305, 306, 306, 304, 304, 304, 304, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 337, 337, 241,
	241, 338, 292, 292, 423, 423, 423, 424, 424, 331,
	331, 339, 339, 339, 339, 339, 339, 329, 329, 330,
	330, 345, 346, 346, 268, 268, 268, 268, 266, 266,
	269, 269, 269, 269, 267, 267, 340, 340, 340, 340,
	259, 259, 341, 341, 341, 342, 300, 301, 301, 350,
	350, 350, 350, 350, 365, 237, 237, 237, 237, 237,
	460, 460, 351, 351, 351, 351, 351, 351, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	355, 355, 355, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 364, 364, 364, 364, 364, 356, 356, 361, 361,
	362, 362, 362, 357, 358, 363, 363, 363, 363, 461,
	461, 367, 367, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 353, 353, 353, 360, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 276,
	276, 277, 277, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 309, 309,
	309, 309, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 401, 401, 401,
	401, 401, 401, 401, 401, 404, 404, 405, 405, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 411, 411,
	412, 412, 414, 414, 415, 415, 416, 417, 417, 417,
	418, 419, 419, 413, 413, 420, 420, 420, 420, 421,
	421, 422, 422, 422, 422, 422, 320, 320, 321, 321,
	327, 327, 327, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 175,
	175, 175, 175, 175, 249, 249, 247, 247, 247, 250,
	250, 248, 248, 246, 246, 245, 245, 317, 317, 315,
	315, 319, 319, 270, 270, 366, 366, 366, 366, 366,
	366, 366, 271, 271, 271, 279, 272, 272, 273, 273,
	273, 273, 273, 311, 312, 274, 274, 274, 313, 313,
	322, 326, 326, 325, 324, 324, 323, 323, 302, 302,
	303, 303, 256, 256, 462, 462, 252, 252, 343, 343,
	343, 343, 210, 210, 242, 242, 209, 209, 202, 202,
	203, 203, 203, 203, 235, 235, 368, 368, 368, 369,
	370, 371, 316, 192, 191, 179, 180, 190, 189, 188,
	178, 181, 185, 186, 187, 183, 184, 198, 197, 196,
	194, 195, 348, 204, 204, 205, 205, 205, 206, 206,
	206, 206, 176, 176, 199, 199, 200, 201, 201, 193,
	193, 193, 169, 169, 169, 170, 170, 171, 171, 378,
	378, 376, 376, 376, 377, 377, 377, 377, 375, 375,
	375, 375, 375, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 384, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 387, 387,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 7, 5, 3, 5, 7,
	4, 12, 4, 12, 1, 3, 5, 5, 2, 5,
	3, 6, 4, 6, 5, 6, 6, 4, 8, 3,
	4, 3, 6, 4, 3, 1, 3, 2, 1, 1,
	3, 1, 3, 2, 2, 0, 1, 1, 0, 2,
	0, 7, 2, 5, 6, 2, 1, 6, 4, 9,
	7, 12, 12, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 5, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 3, 5, 3, 6, 6, 6, 3, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	3, 3, 4, 3, 4, 7, 4, 4, 4, 3,
	5, 7, 4, 3, 3, 4, 3, 3, 3, 3,
	3, 2, 0, 1, 0, 1, 0, 3, 3, 3,
	3, 3, 6, 4, 4, 4, 3, 5, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 1, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 3,
	5, 7, 2, 3, 0, 3, 5, 2, 3, 0,
	2, 3, 2, 3, 2, 6, 4, 7, 2, 6,
	4, 7, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 3, 3, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 5, 4, 6, 4,
	3, 0, 1, 3, 2, 4, 2, 4, 1, 6,
	3, 1, 1, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 1, 3, 2, 1, 3, 1, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 1, 3,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 3, 3, 1, 1, 1, 1,
	1, 2, 2, 5, 7, 3, 3, 3, 3, 4,
	4, 3, 4, 4, 3, 4, 4, 4, 3, 2,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 3, 4, 4, 5, 0, 1, 1,
	3, 4, 1, 0, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 5, 5, 3, 1, 1, 5, 2, 0,
	1, 1, 1, 1, 3, 2, 2, 2, 1, 2,
	0, 3, 3, 2, 10, 13, 0, 2, 3, 9,
	12, 0, 2, 3, 1, 1, 2, 2, 2, 2,
	1, 0, 1, 0, 1, 3, 1, 1, 1, 1,
	3, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 3, 1, 3, 7, 1, 3, 11,
	3, 2, 0, 3, 1, 2, 2, 3, 2, 6,
	2, 1, 1, 2, 4, 2, 5, 5, 5, 2,
	8, 9, 6, 5, 3, 1, 5, 8, 5, 11,
	0, 1, 3, 3, 2, 2, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 5, 8, 4, 1, 0, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 2, 2, 2, 2, 2,
	3, 1, 4, 2, 4, 7, 3, 3, 0, 3,
	6, 3, 1, 1, 8, 7, 5, 0, 1, 6,
	7, 6, 5, 3, 4, 14, 17, 14, 17, 4,
	0, 2, 2, 0, 1, 0, 1, 3, 2, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 0, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 1, 3, 1, 3, 8, 5, 3, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	2, 3, 4, 3, 4, 5, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	3, 4, 1, 5, 3, 4, 5, 1, 5, 1,
	3, 2, 0, 3, 0, 2, 3, 1, 3, 2,
	0, 3, 5, 6, 4, 6, 4, 3, 2, 1,
	0, 5, 1, 0, 2, 2, 2, 1, 1, 0,
	1, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 2, 1, 0, 2,
	5, 7, 2, 1, 1, 2, 4, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 2, 5, 1, 4, 2, 5,
	1, 4, 3, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 5, 4,
	6, 3, 5, 4, 6, 4, 6, 5, 7, 3,
	3, 3, 3, 3, 4, 3, 2, 4, 2, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 1, 5, 5, 3,
	1, 1, 1, 2, 2, 2, 4, 3, 5, 6,
	8, 6, 6, 4, 3, 4, 1, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 8, 8, 6, 4, 6, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 1, 1, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 2, 3, 1, 2, 3, 2,
	3, 2, 3, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 1,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 1, 2, 1, 0, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 3, 1, 1, 1,
	1, 5, 3, 1, 1, 3, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 7, 1, 7,
	5, 3, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 452, -77, -47, -45, -79, -80, -65,
	-78, -81, -76, -91, -95, -85, -97, -133, -3, -33,
	-35, -48, -64, -66, -75, -83, -82, -84, -86, -90,
	-89, -39, -92, -96, -105, -134, -135, -136, 81, 68,
	121, 103, 108, 127, 153, 282, 311, 321, 305, -100,
	-101, 340, -34, -46, -94, -93, -4, -10, 27, 39,
	-36, -37, -38, 53, -56, -53, -50, -59, -439, 83,
	-408, -67, -70, -72, -443, 113, 126, 169, 274, -87,
	-88, 307, 309, -41, -40, 122, -144, -146, -98, -99,
	-137, -106, -107, -108, -109, -110, -111, -112, -113, -114,
	-115, -116, -117, -118, -119, -120, -121, -122, -123, -124,
	-125, -126, -127, -128, -129, -130, 343, 390, 40, 352,
	69, 116, 315, 21, -5, -6, -7, -8, -9, -11,
	-22, -49, -51, -52, -54, -55, -63, -57, -58, -407,
	-68, -69, -71, -73, -74, 306, -147, -145, 449, 402,
	-13, -17, -18, -14, -16, -19, -15, -23, -27, -28,
	-25, -24, -26, -29, -30, -31, -32, -20, -21, -12,
	420, 428, -150, -148, -149, -151, 328, 410, 366, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, -194,
	-199, -200, -201, -193, -169, -384, -387, 4, -382, -385,
	132, 177, 244, 21, 22, 23, 24, 25, 27, 37,
	38, 39, 40, 43, 45, 46, 49, 50, 51, 52,
	53, 54, 57, 62, 67, 68, 69, 70, 71, 76,
	73, 74, 75, 78, 80, 81, 82, 85, 86, 94,
	95, 96, 97, 98, 99, 103, 106, 105, 108, 111,
	112, 113, 115, 117, 118, 121, 122, 125, 123, 372,
	374, 124, 126, 127, 128, 138, 139, 140, 142, 143,
	145, 147, 151, 152, 154, 158, 160, 161, 162, 163,
	168, 169, 171, 172, 178, 173, 179, 183, 186, 185,
	187, 188, 189, 180, 194, 198, 199, 200, 202, 203,
	206, 207, 208, 209, 212, 211, 214, 217, 218, 221,
	222, 225, 226, 228, 229, 232, 230, 233, 231, 234,
	237, 235, 236, 239, 240, 242, 241, 249, 250, 252,
	253, 254, 269, 257, 258, 259, 262, 265, 268, 270,
	271, 272, 273, 274, 275, 277, 278, 280, 282, 284,
	286, 287, 288, 289, 290, 291, 293, 294, 296, 297,
	298, 299, 300, 305, 302, 303, 304, 306, 307, 308,
	309, 311, 313, 314, 315, 316, 318, 320, 341, 342,
	354, 321, 322, 323, 324, 325, 326, 327, 331, 335,
	332, 333, 334, 336, 329, 330, 337, 338, 340, 343,
	345, 347, 348, 351, 352, 353, 355, 358, 359, 360,
	356, 357, 350, 365, 363, 364, 367, 368, 369, 370,
	371, 373, 375, 384, 385, 387, 390, 391, 392, 382,
	394, 395, 398, 399, 400, 401, 406, 402, 404, 407,
	408, 409, 415, 414, 421, 422, 424, 425, 426, 32,
	41, 42, 44, 47, 58, 59, 60, 63, 100, 101,
	120, 129, 130, 141, 155, 157, 164, 165, 166, 184,
	190, 192, 196, 215, 247, 248, 263, 267, 279, 281,
	292, 317, 346, 361, 377, 378, 379, 380, 386, 388,
	410, 411, 412, 416, 423, 255, -187, 2, -169, -169,
	282, 26, 2, 26, 278, 330, 368, 370, 2, 193,
	2, -430, -236, 2, 26, -173, -169, 83, 153, 328,
	-187, 2, -430, -236, 24, 2, -169, 2, -174, 2,
	321, -169, 452, 78, 222, 62, 317, 337, -103, 385,
	-102, 377, 323, -104, -374, 2, 237, -169, 452, 452,
	452, 452, 2, 366, 272, 414, 329, 403, 96, 289,
	177, -425, 2, 4, -385, -382, -203, -202, 366, 96,
	-201, -193, 442, -200, 452, 452, 452, 2, 199, 200,
	288, 287, 337, 338, 452, 452, 452, 2, 25, 56,
	77, 80, 102, 128, 148, 151, 260, -440, 229, 269,
	286, 323, 336, 365, 375, 387, -444, 353, 57, 403,
	-451, 392, 111, -280, 96, 370, 368, 222, 152, 399,
	313, 156, 397, 106, 183, 401, 400, 452, 452, 25,
	56, 65, 80, 111, 128, 148, 151, -442, 269, 286,
	320, 323, 336, 365, 375, 392, 387, 2, 414, 329,
	366, 177, 96, 403, 313, 285, -77, 2, 449, 29,
	340, -143, 366, 2, -169, 199, 200, 2, 452, 452,
	-425, 2, 199, 200, 2, 57, 325, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 2, -131, 337, 353, 162, 39, 62,
	26, 67, 97, 154, 177, 178, 207, 77, 78, -281,
	-333, -332, 367, 324, 330, 363, 385, 83, 404, 314,
	426, -433, 123, 4, 96, 237, 339, 377, 222, 38,
	71, 371, 372, -450, 2, 366, -454, 2, 385, 385,
	2, -454, 2, -454, 2, -172, 2, 385, 381, -455,
	385, 423, 452, 452, 452, 452, 452, 452, 452, 452,
	452, 452, 452, 452, -145, -147, -146, 452, 452, 452,
	452, 452, -131, 337, 2, 62, 26, -458, 146, -231,
	-232, 396, 191, 119, 261, -144, -146, 2, -407, -372,
	2, -307, -388, -309, 440, 441, 435, 243, 427, -320,
	102, 397, 255, -387, -310, -322, 120, 317, -250, 8,
	9, 5, 6, 7, -176, -352, -316, -360, 389, 131,
	246, -206, 454, 10, 449, -404, -146, -321, 33, 157,
	55, -376, -205, -354, -362, -358, -359, -460, 45, 51,
	50, 375, 236, 331, 332, 347, 333, 334, 43, 406,
	173, 252, 254, 185, 4, 192, -204, -193, -401, -402,
	-382, -383, 184, 190, 186, 346, 187, 188, 189, 42,
	292, 142, 143, 141, 112, 101, 100, 248, 47, 46,
	44, 411, -363, 98, 377, 378, 379, 380, 202, 203,
	-169, -384, 65, 88, 89, 87, 92, 91, 93, 90,
	339, 403, 56, 32, 164, 165, 196, 247, 166, 63,
	-403, 357, 84, 150, 182, 167, 195, 197, 201, 216,
	219, 238, 245, 264, 266, 312, 344, -461, 412, 129,
	130, 267, 279, 361, 386, 388, 155, 215, 58, 59,
	-409, 293, -410, -187, -409, 452, 452, 453, 452, -225,
	-226, -227, 2, 26, 109, 449, 2, -336, 2, 447,
	-340, -146, 210, -339, 449, -337, -194, 256, -405, 318,
	-401, -402, -176, -193, -205, 4, -228, 449, 451, 96,
	366, 66, 2, -275, 449, -169, 26, -143, 255, 381,
	453, -318, 449, 255, 149, 258, -169, 2, 2, 341,
	2, 449, -103, 60, 385, -295, 2, -296, -166, -167,
	-168, -345, 198, 284, 291, 429, 426, -372, -436, 149,
	432, 381, -372, -251, 451, 2, -340, 164, -194, 2,
	-191, -375, 4, -382, -385, -383, -386, 65, -384, 26,
	28, 29, 30, 31, 33, 34, 35, 36, 48, 55,
	56, 61, 64, 66, 77, 83, 87, 88, 90, 89,
	91, 92, 93, 102, 104, 107, 109, 110, 114, 116,
	119, 131, 133, 146, 148, 149, 153, 156, 159, 170,
	181, 191, 193, 210, 213, 220, 223, 224, 243, 246,
	251, 255, 256, 260, 261, 276, 283, 295, 310, 328,
	339, 349, 362, 366, 376, 381, 383, 389, 396, 397,
	403, 405, 413, 417, 418, 419, 420, -387, 2, -340,
	164, 2, -196, 164, -340, -199, 2, -380, 164, -378,
	10, -377, 5, 4, -382, -385, -383, 2, -178, -169,
	2, -190, -375, 2, -209, 164, -194, -195, -199, 381,
	453, -242, -202, -203, -235, -169, 451, -307, 2, -92,
	2, -307, 164, 2, -92, 164, 2, -307, 164, 2,
	-92, 164, 2, 2, 2, 387, 2, 80, 164, -169,
	366, 95, 2, 304, -441, 320, 391, 414, 2, 2,
	2, 2, 2, 2, 2, 366, 329, -452, 293, -183,
	2, -169, 146, -380, 164, 2, -380, 164, 2, -197,
	-199, -197, 177, 194, -178, 164, 2, 370, 368, 370,
	368, 149, 2, 193, 2, 193, 2, -341, 2, -342,
	-194, 2, 2, 2, 2, 2, 164, -169, 366, 95,
	2, 209, 2, 2, 2, 2, 2, 2, 2, 2,
	2, -244, 164, 2, -194, -244, 164, 2, -244, 164,
	2, -210, 164, 2, -209, -178, 164, 2, -381, 164,
	2, -380, -381, 164, 2, -349, 2, -348, -377, 410,
	-77, 449, 337, 449, -380, -194, -307, -92, 149, -307,
	-92, 146, 2, 96, 366, -131, 2, 146, 405, 2,
	8, 2, -380, 290, 138, 2, 341, 2, 62, -281,
	426, 149, 2, 2, -428, 2, 255, 149, 2, 149,
	2, 149, 2, 149, 2, 149, 2, 287, 338, 200,
	384, 208, 124, 149, -265, 2, 420, 149, 2, 149,
	2, 5, 2, 198, 284, 354, 2, -194, -445, 2,
	366, 414, 329, 2, 2, 73, 74, 149, 2, 149,
	426, 2, -259, -340, -294, -295, -294, 381, -174, -458,
	-231, -232, -131, 341, 2, 2, -458, -258, -283, -284,
	220, 133, 251, -264, 26, 109, -264, -264, 49, 450,
	450, 11, 12, 64, 37, 440, 441, 442, 443, 144,
	444, 445, 438, 439, 437, 430, 431, 434, 204, 205,
	79, 433, 432, 72, 227, 319, 134, 135, 136, 137,
	301, 174, 175, 176, 14, 15, 16, 30, 260, 219,
	427, 167, 344, 435, 17, 18, 19, 195, 197, 245,
	41, 170, -175, -211, -307, -307, -307, -307, -307, 266,
	449, -256, -302, 447, -146, 449, 449, 449, 5, 449,
	5, -371, 8, -146, -307, -320, 450, -248, 449, -146,
	-320, -315, 449, 317, 447, 449, -323, -307, 451, -411,
	421, -356, 449, 281, -355, 449, -355, -355, 415, -353,
	449, 428, 422, 449, -353, 449, 449, 146, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 415, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 453, -409, -228, 449, -252, -343, -307, 442, -252,
	-252, 255, -245, -307, 84, -268, 201, 238, 150, 216,
	312, 182, -371, -77, -304, 454, -331, 428, -146, -337,
	-193, -146, -339, 449, -336, -331, 442, -194, 449, 149,
	449, 451, 149, -235, -375, -178, -194, -204, -205, 108,
	-245, -380, -425, -235, -173, 34, -317, -350, -351, -364,
	-352, -361, -357, -360, 297, 298, 296, 300, 299, 45,
	51, 50, 375, 236, 331, 332, 347, 333, 334, 43,
	406, 173, 252, 254, 185, 4, 44, 411, -363, 192,
	184, 190, 186, 346, 187, 188, 189, 42, 292, 142,
	143, 141, 112, 101, 100, 248, 47, 46, 98, 377,
	378, 379, 380, 202, 203, 412, 357, 58, 59, -425,
	-235, 146, -374, -245, 34, -295, 2, -456, 453, 218,
	-213, 226, 242, 161, 256, 424, 249, -379, 5, 4,
	-316, -328, 102, 222, -360, 9, 441, -368, 8, 440,
	-373, -372, 86, 451, -375, -155, 302, -154, 23, 27,
	113, 408, 125, -218, 179, 272, 120, 350, -432, -434,
	322, 373, 374, 75, 249, 302, 120, -261, -263, 34,
	94, 240, 268, 52, 171, 231, 232, 352, 416, 120,
	302, 420, 120, -434, 302, -434, -157, 350, -432, -434,
	322, 302, -156, -218, 120, 454, -380, -242, 453, 453,
	-375, 442, 120, 120, 120, 120, 2, 2, 243, 2,
	2, 2, 151, -444, -442, 2, 2, 2, -194, 164,
	-196, 164, 2, -199, 414, -230, 255, -427, -243, 366,
	-194, -165, -406, 420, 243, 243, 34, 449, 2, -180,
	164, 2, -170, -169, 177, -406, 243, -341, -207, -194,
	-207, 340, -187, 34, -304, 120, 2, 2, 2, -169,
	-158, 453, 54, 308, 120, -158, 120, -158, 120, -158,
	453, 120, -158, 120, 453, 120, 120, 450, 453, -349,
	-380, -141, 420, 149, 83, 449, -381, -427, -178, 2,
	-194, 2, 366, 202, -380, -380, -374, 26, 342, 2,
	287, 338, 74, -194, -429, 146, -426, 313, -425, -194,
	-194, -194, -194, -194, 2, 2, 2, 146, 2, 384,
	2, 384, 2, -169, 68, -169, -169, 218, -194, 146,
	366, 177, 366, -158, 453, -174, -458, -258, -374, -458,
	-284, -283, -286, -307, 26, -289, 140, 239, -307, -309,
	-145, -145, -145, -233, -334, -307, 283, 177, -365, -350,
	-350, -192, -375, 377, -307, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, -307, -307, -307, -307, 219,
	167, 344, 41, 170, -307, 381, -307, -307, -307, -307,
	235, 243, 246, 389, 131, 398, 109, 249, -462, 362,
	36, -313, -146, -249, 449, -327, 31, 349, 26, -320,
	449, 2, -302, -307, -303, -246, -245, -245, 450, 413,
	26, 109, 442, 2, 8, -276, -278, 425, 234, 99,
	163, 233, -277, 327, 450, 453, 34, 450, -307, -246,
	-319, -315, -245, -326, -325, 417, -375, 442, -412, 139,
	156, 8, -369, 8, -369, 377, 377, 8, -369, -369,
	449, 450, 2, 450, 2, 450, 2, 450, 2, 450,
	2, -307, -307, -307, -307, -307, -307, -307, -245, -270,
	2, -366, -245, 4, 425, 234, 99, 163, 233, 327,
	-270, 2, -271, 2, -307, -245, -272, -308, -309, 440,
	441, 435, -320, -273, 2, -307, -246, -307, 48, 213,
	383, -274, -307, 149, -245, -245, 2, -245, 2, -410,
	34, -245, -238, 453, 149, 34, 4, -238, -238, 449,
	450, 453, -269, 160, 230, 225, -269, -336, -268, 201,
	-266, 264, -266, -266, -423, 449, 448, -331, -179, 447,
	455, -375, -330, -329, 34, -187, 262, -331, -331, 451,
	450, -330, -194, 449, -245, -375, 355, 450, 451, 195,
	195, 195, 318, 450, -141, 381, 420, -77, 257, 450,
	453, -237, 33, 447, -278, 449, -367, 415, 449, 449,
	149, -236, -436, 450, 385, -296, -212, 291, 348, 303,
	335, 364, 9, 8, 8, 453, -375, 453, -437, 77,
	381, 66, -298, 164, 66, -389, -181, 77, -390, -169,
	61, 397, 283, 148, -437, 77, -437, 77, 77, 340,
	353, 49, -340, 37, -92, 214, 149, 426, 366, 177,
	381, -340, -263, -350, 94, 231, 232, 49, -370, -368,
	441, -370, 49, -370, -370, -370, 420, -196, -340, 381,
	273, -380, 381, 453, 37, -92, 214, 149, 381, -209,
	-179, -346, -345, -202, -169, 451, -307, -92, -307, -92,
	120, 2, -452, 209, 449, -228, 243, -262, -261, 243,
	-198, 2, -194, 149, -235, -347, 193, 453, -243, 273,
	120, 120, 449, 117, 289, 2, 255, 243, -180, 164,
	-161, 369, 120, -301, -300, 418, -290, -92, 449, 102,
	34, -290, -253, -254, -344, -255, -181, 449, -187, -169,
	2, -194, -244, -244, -244, -209, -210, -178, -380, -381,
	-381, -77, -348, 450, 450, -140, 259, -139, -169, 5,
	-143, 405, -215, -299, -298, -391, -392, -389, 219, 177,
	397, 194, 132, -141, -345, -141, -346, -346, -194, 146,
	2, 2, -235, -235, 337, 146, 146, 451, -265, 289,
	96, 366, 272, 177, -194, -209, -194, -340, -458, -287,
	-368, 449, -288, 317, 318, 453, -153, 35, 107, 206,
	-194, 426, 118, -307, -307, 381, -462, 362, -313, 118,
	-307, 235, 246, 389, 131, 398, 109, 249, 149, 449,
	-308, -308, 450, -247, -307, -307, 448, 457, 450, -459,
	453, -231, -307, -245, -245, 450, 450, 381, 381, 381,
	381, 449, 451, -245, -235, 448, 448, 453, 450, -324,
	-325, 114, -307, 451, -417, 265, 449, 449, 450, 450,
	453, 450, 426, 426, 450, 450, 450, -307, 34, 453,
	453, 453, 450, 453, 453, 453, 450, 450, 149, 450,
	450, -279, 276, 450, 11, 12, 440, 441, 442, 443,
	144, 444, 445, 438, 439, 437, 430, 431, 432, 72,
	227, 319, 14, 15, 16, 195, 170, -308, -308, -308,
	450, -311, -312, 149, 146, 34, -274, -274, -274, 450,
	149, -245, 450, 450, 449, 450, -301, -343, -240, 2,
	-336, -189, -375, -301, -301, -245, -307, 201, 201, -267,
	405, 255, -269, -336, -329, 450, -424, -371, -331, -330,
	-371, -306, -305, 147, 35, 107, 241, -187, -228, -330,
	-330, -375, -331, 450, -241, -338, -405, -459, 451, -375,
	-132, 5, 246, -132, -132, 149, -235, 24, 277, -350,
	447, 448, 8, 8, 449, -369, -369, -235, 149, -372,
	-295, 395, 70, 291, 377, -372, -154, 302, -181, -181,
	-194, 243, -298, 164, -160, 243, -350, -188, -169, 449,
	449, 206, 206, -181, -188, 164, -181, 164, -188, -188,
	-431, 291, 250, -307, 221, 289, 244, -155, 302, -92,
	-92, 449, -436, 405, 108, -194, -209, -198, 302, -204,
	-370, -370, -261, 302, -196, -380, 420, -178, -156, -92,
	-92, 449, -179, -157, 302, -138, 172, 442, -169, 414,
	-169, -214, -215, -169, -446, 422, 420, 120, 120, -228,
	-208, -194, 447, -141, -380, -194, -380, -380, -380, 2,
	449, 2, -194, 120, 255, 243, -162, 115, -457, 432,
	-178, -232, -231, -307, -260, -293, 310, 255, -229, -182,
	-181, 410, -187, -260, -239, 453, 149, 432, 451, -229,
	2, -158, -158, -158, -158, -158, -77, -141, 453, 449,
	432, 432, 449, -380, -380, 450, 453, -194, -180, 177,
	177, -186, -170, -141, -42, 420, 366, 337, 337, -169,
	-190, -178, -194, -191, -209, -288, -307, -334, -194, 454,
	-307, -307, 118, 118, -307, -308, -308, -307, 118, 149,
	449, -307, -317, 30, 30, 450, 453, -303, -307, 450,
	413, -459, -459, -459, 5, 234, 163, 233, -277, 233,
	-277, -277, 8, 442, -375, 450, -315, 116, -307, 376,
	-375, 442, -418, -184, 449, -169, 418, -231, -369, -353,
	-353, 450, -365, -350, -307, -307, -307, -307, -307, -307,
	-311, -307, -365, -350, -308, -308, -308, -308, -308, -308,
	-308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
	-308, -308, -308, 109, 243, 249, -308, -312, -311, -307,
	-307, -350, 450, 450, 450, -245, -77, -257, 156, -346,
	453, -257, -257, 450, -336, -336, 449, -307, 201, 448,
	450, 453, -330, 448, 453, 456, 432, -228, 451, -329,
	450, 453, -292, 34, 450, -375, -92, 258, 5, 8,
	447, 448, 450, -369, 450, 450, -235, -307, 381, 381,
	120, 243, 407, -393, -390, -307, -234, -335, -307, 449,
	449, -152, 113, 340, -438, 2, 120, -158, 120, -158,
	424, 449, 449, 381, -245, -307, -142, 102, -374, -434,
	-434, 381, 381, 273, -245, 381, -141, 149, 2, 2,
	2, 450, 34, 253, -169, -194, -196, 34, -60, 420,
	-345, -371, -165, 2, -282, 405, -179, -194, 120, -163,
	212, -457, -378, -406, -285, -283, -260, -252, 244, 76,
	450, 453, 451, -301, -254, -240, -307, 2, 450, -139,
	-140, -380, -380, -380, -141, -143, -143, -299, 2, 449,
	-180, -170, 449, 259, -194, -265, -220, -219, 272, 249,
	-220, 256, 450, -153, -179, -307, -307, 118, 30, 30,
	-307, -307, -317, 450, -307, -307, -245, 448, 5, -307,
	450, 450, 450, 450, -307, 451, -419, -169, -307, 450,
	450, 450, 450, 453, 453, 450, 450, 450, 450, -312,
	149, 109, 249, 449, 450, 450, -314, 159, 49, -336,
	-314, -314, -267, -235, -336, -304, -371, -305, -179, 447,
	-375, -338, 449, 451, 448, 2, 447, 450, -181, -181,
	-298, 120, -394, 77, -395, 64, 132, 83, 243, 246,
	397, 283, 61, 102, 295, 34, 450, 450, 453, -153,
	-234, -235, 243, 359, 102, 243, 102, 95, 392, -181,
	-188, -235, -235, -194, 450, 453, 432, -198, -196, -380,
	450, -179, -381, -216, 180, -92, 2, 449, -228, -262,
	-92, 259, 448, 449, -169, 255, 449, -179, -164, 211,
	-457, -378, -161, -260, -291, 449, 255, -92, -182, 2,
	-232, 432, 450, 450, 95, 95, -234, 449, 449, -235,
	-43, -44, 177, 77, 275, -191, 366, 177, -153, -307,
	-307, -307, 450, -459, -375, 442, -413, 272, 450, -307,
	-307, -308, 149, 449, -317, -414, 419, -307, -245, -414,
	-414, 450, -331, -371, 2, 447, 2, -298, -188, -192,
	-185, -169, 132, 164, 246, 206, 449, -308, -194, 449,
	2, -448, 104, 181, -297, -449, 82, 360, -335, 450,
	450, 246, 246, -307, -350, -158, -158, 450, 450, 381,
	-374, 81, -372, 381, -217, -218, 170, -447, 420, -214,
	-446, -61, -62, 382, -345, -234, -194, -234, 255, -457,
	-378, -162, 110, -235, 77, -285, -313, -141, 449, 449,
	450, -234, -234, 450, 453, 26, 449, 26, 449, -194,
	-209, 450, -232, 49, 450, 450, -308, -317, 450, -415,
	-416, -184, -330, 448, 2, -395, -185, 243, -307, -171,
	449, -307, 181, 105, 168, -216, 449, 295, -177, 64,
	449, 449, 449, 432, 149, 449, -446, 270, 95, 240,
	450, 34, -62, 9, 450, -282, 450, -194, -378, -163,
	400, 244, 450, -188, -260, -381, -381, -297, 450, 450,
	-44, -235, -235, -420, 289, 318, 158, -245, 450, 453,
	34, 120, 450, -396, 228, -169, 450, 105, 168, -217,
	-235, -194, -435, 405, -192, -222, -221, -219, -224, -223,
	-219, -245, -372, 81, 270, -245, -194, 95, -216, -92,
	-297, 449, -297, 449, -164, 340, -300, 450, 450, -216,
	-297, 450, 450, 450, -421, -422, 41, 394, 86, -307,
	-421, -421, -416, -418, 132, -397, -400, -399, 255, 345,
	150, 271, 450, 359, 416, -448, 450, -228, -307, 450,
	453, 410, 450, 453, 410, 450, 149, 450, 449, -217,
	-447, -216, -234, -216, -234, -253, -141, -141, -217, -216,
	-422, 280, 145, 317, 280, 145, -185, -399, 255, -400,
	255, 400, 106, -396, -221, 170, -223, 149, 270, -235,
	-446, -217, 450, -217, 450, -301, -217, 30, -398, 240,
	308, 54, 340, -398, -397, 449, 449, 450, -453, 418,
	-297, -453, -297, -422, 22, 246, 102, -448, -245, -245,
	-159, 54, 308, 2, -216, -216, 450, 450, -217, -217,
	-217, 381, -453, -453, 449, -245, 450, -217,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 347, 348,
	350, 351, 352, 354, 355, 357, 359, 361, 363, 364,
	366, 368, 369, 370, 371, 372, 374, 376, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 422,
	424, 0, 856, 858, 860, 862, 27, 28, 0, 0,
	172, 174, 176, 0, 201, 203, 205, 206, 208, -2,
	0, 301, 302, 304, 306, -2, -2, 0, 0, 411,
	413, 0, 0, 433, 434, 0, 946, -2, 427, 429,
	431, 494, 496, 498, 500, 502, 504, 506, 507, 509,
	511, 513, 515, 517, 519, 521, 523, 525, 527, 529,
	531, 533, 535, 537, 539, 541, -2, -2, -2, 0,
	-2, -2, -2, 874, 31, 33, 35, 37, 39, 41,
	59, 257, 258, 260, 262, 264, 267, 268, 270, 985,
	308, 310, 312, 314, 316, 0, -2, 999, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 66, 67, 68,
	69, 70, 71, 72, 52, 54, 55, 61, 62, 64,
	0, 0, 961, 963, 965, 967, -2, 0, 0, 7,
	9, 11, 13, 15, 17, 19, 21, 23, 349, 353,
	356, 358, 360, 362, 365, 367, 373, 375, 377, 751,
	1590, 1604, 1605, 1606, 1609, 1610, 1611, 1612, 1613, 1614,
	1942, 2022, 2023, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
	1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
	1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,
	1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
	1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
	1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
	1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
	1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
	1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
	1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829,
	1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839,
	1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889,
	1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899,
	1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909,
	1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
	1920, 1921, 1922, 1923, 1924, 0, 389, 387, 1584, 390,
	1778, 392, 394, 295, 296, 297, 298, 299, 300, 0,
	155, 0, 404, 398, 403, 405, 407, 408, 409, 410,
	384, 382, 0, 404, 1636, 402, 854, 855, 849, 850,
	1811, 884, 423, -2, -2, -2, 1911, -2, 455, -2,
	462, 1914, 1813, 465, 0, 467, -2, 470, 857, 859,
	861, 29, 30, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, -2, -2, -2, -2, 0, 0, 1671,
	1560, 1606, 1563, 1558, 173, 175, 177, 178, 0, 0,
	0, 0, 0, 0, 202, 204, 207, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 0, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 0, 0, 674, 675, 0, 0, 680,
	802, 803, 824, 0, 0, 0, 0, 303, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 307, 0, 0,
	0, 0, 0, 0, 0, 235, 341, 342, 0, 986,
	0, 0, 0, 153, 146, 0, 0, 663, 412, 414,
	0, 145, 0, 0, 853, 0, 0, 428, 430, 432,
	495, 497, 499, 501, 503, 505, 508, 510, 512, 514,
	516, 518, 520, 522, 524, 526, 528, 530, 532, 534,
	536, 538, 540, 542, 543, 0, 0, 0, 0, -2,
	-2, 0, -2, -2, 0, 0, 0, 0, 0, 0,
	0, 0, -2, -2, -2, 0, 0, 0, -2, -2,
	0, 0, 0, 546, 548, 549, 550, 0, 589, 592,
	600, 645, 646, 0, 793, 987, 886, 864, 877, 886,
	866, 867, 868, 869, 870, 875, 876, 879, 0, 871,
	872, 873, 32, 34, 36, 38, 40, 42, 259, 261,
	263, 265, 269, 271, -2, 959, 960, 309, 311, 313,
	315, 317, 415, 0, 417, 0, 547, 950, 0, -2,
	0, 991, 991, 991, 0, 0, 960, 958, 0, 420,
	421, 474, 475, 1223, 0, 0, 0, 0, 0, 1458,
	1307, 0, 476, -2, 1338, 1340, 1890, 1911, 1457, 1342,
	1343, 1344, 1345, 1346, 0, 0, 1349, 0, 1351, 1352,
	1353, 1354, 0, 1356, 0, 1360, 1361, 1362, 0, 1895,
	1537, 1602, -2, 1128, 1129, 1130, 1131, 1132, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1598, 0, 1429, 1376,
	-2, 1623, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1680, -2, -2, -2, -2, -2,
	-2, -2, 1184, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1925, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 0, 1879, 1896, 1897, 1902, 1904, 1898, 1887,
	1399, -2, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1185, -2, 1891,
	1892, 1907, 1908, 1913, 1918, 1919, 1894, 1903, -2, -2,
	977, 1786, 980, 751, 978, 962, 964, 0, 966, 0,
	0, 0, 971, 994, 992, 0, 1030, 975, 976, 986,
	1047, 1070, 0, 1052, 0, 1070, 1096, 0, 1057, 1806,
	1377, 1378, 0, 1606, 1603, -2, 0, 0, 0, 0,
	0, 0, 198, 385, 0, 391, 393, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 425, 426, 0,
	450, 0, 454, 1886, -2, -2, 458, 887, 891, 892,
	893, 894, 0, 0, 0, 0, 0, 464, 0, 0,
	451, 452, 468, 471, 0, 50, 0, 1896, 1096, 51,
	0, 1574, 1628, 1629, 1630, 1631, 1632, 1925, 1941, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 53, 0,
	1896, 56, 0, 1896, 0, -2, 60, 0, 1896, 156,
	157, 1619, 1620, 1624, 1625, 1626, 1627, 63, 0, 1580,
	65, 0, 1577, 73, 0, 1896, 0, 1557, -2, 0,
	0, 655, 1554, 1559, 656, 1564, 0, 179, 180, 181,
	182, 183, 1896, 185, 186, 0, 188, 189, 1896, 191,
	192, 0, 194, 210, 211, 0, 213, 0, 1896, 0,
	0, 0, 219, -2, 236, 0, 233, 0, 223, 224,
	226, 227, 228, 229, 230, 0, 0, 0, 808, 275,
	273, 1585, 0, -2, 1896, 796, 799, 1896, 801, 813,
	1588, 0, -2, 0, 984, 1896, 901, 676, 677, 678,
	679, 0, 294, 0, 914, 0, 916, 0, 936, 1102,
	1047, 237, 238, 239, 240, 241, 1896, 0, 0, 0,
	246, 0, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 138, 1896, 320, 339, 138, 1896, 323, 138, 1896,
	326, 138, 1896, 329, 1552, 138, 1896, 332, 333, 1896,
	335, 158, 336, 1896, 338, 0, -2, 378, 1592, -2,
	344, 0, -2, 0, 170, 0, 661, 662, 0, 851,
	852, 0, 435, 0, 0, 544, 545, 0, 0, 555,
	556, 557, 558, 1784, 1695, 561, 0, 564, -2, 0,
	0, 0, 568, 570, 660, 572, 0, 0, 574, 0,
	576, 0, 578, 0, 580, 0, 582, -2, -2, -2,
	0, 0, 0, 0, 608, 609, 0, 0, 614, 0,
	617, 618, 619, 0, 621, 622, 623, 624, 0, 626,
	627, -2, -2, 631, 633, 0, 640, 0, 644, 0,
	551, 552, 138, 1100, 863, -2, 865, 0, 881, 953,
	-2, 0, 416, 0, 419, 957, 951, 956, 1008, 1009,
	0, 0, 0, 0, 989, 990, 0, 0, 0, 948,
	949, 0, 0, 0, 0, 1463, 1464, 1465, 1466, 1467,
	1468, 1471, 1472, 1469, 1470, 1473, 1474, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1476, 1477, 1478, 0, 0, 1480,
	0, 1482, 0, 0, 0, 0, 0, 0, 1286, 1288,
	1545, 0, 0, 1479, 1228, 1229, 1230, 1265, 1266, 0,
	0, 1339, 1542, 1541, 1341, 0, 1494, 0, 1348, 0,
	1220, 1355, 1571, -2, 0, 1458, 1489, 0, 0, 1363,
	1364, 1365, 0, 0, 1494, 0, 0, 1536, 0, 1431,
	0, 1164, 0, 1165, 1166, 0, 1167, 1168, 1181, 1194,
	0, 0, 0, 0, 1198, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1186, 0, 0, 0, 1517, -2, 0, 0, 0,
	0, 0, 979, 0, 0, 1034, 1546, 1550, 1551, 1034,
	1034, 0, 0, 1495, 1093, 1093, 0, 0, 1089, 1089,
	1089, 1087, 1064, 0, 1070, 0, 1080, 0, 1070, 1070,
	0, -2, 1052, 0, 0, 1080, 1097, 1098, 0, 0,
	0, 0, 0, 0, 1607, 0, 0, 0, 1594, 0,
	0, 170, 0, 396, 406, 986, 0, 1497, 1119, 1113,
	1122, 1123, 1124, 1125, 1171, 1172, 1173, 1174, 1175, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, -2, 1182, 1184, 1205,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1177, 0, 1152, 1152, 1152, 1169, 1170, 1193, 1204,
	1196, 1204, 1200, 1120, 1121, 1187, 1188, 1189, 1190, 0,
	400, 0, 0, 0, 0, -2, 460, 0, 889, 0,
	895, 485, 486, 487, 897, 898, 0, 463, 488, 489,
	490, 491, 492, 493, 0, 768, 0, 770, 1566, 0,
	461, 478, 466, 0, 472, 74, 846, 104, 0, 846,
	846, 0, 0, 125, 0, 0, 0, 0, 0, 92,
	100, 80, 81, 0, 0, 0, 0, 57, 776, 0,
	779, 0, 0, 0, 0, 0, 0, 0, 791, 0,
	0, 0, 0, 91, 0, 86, 76, 0, 0, 94,
	102, 0, 129, 131, 0, 0, 1083, 654, 0, 0,
	1607, 1562, 0, 0, 0, 0, 212, 214, 0, 216,
	217, 218, 0, 807, 0, 225, 222, 266, 751, 1896,
	775, 1896, 773, 1589, 0, 0, 0, 292, 287, 0,
	289, 794, 0, 983, 0, 0, 0, 0, 814, 0,
	1896, 819, 1576, 1615, 1616, 903, 0, 1108, 0, 917,
	0, 0, 1103, 0, 1105, 0, 243, 244, 245, 0,
	318, 0, 136, 137, 0, 321, 0, 324, 0, 327,
	0, 0, 330, 0, 0, 0, 0, 986, 0, 0,
	0, 148, 0, 0, 0, 0, 170, 170, 1083, 437,
	1083, 439, 0, 0, 559, 560, 562, 563, 565, 566,
	-2, -2, 641, 567, 571, 0, 648, 1802, 658, 573,
	575, 577, 579, 581, 584, 603, 591, 0, 595, 0,
	597, 0, 599, 611, 610, 612, 615, 620, 625, 0,
	0, 0, 0, 792, 0, 880, 954, 956, 418, 952,
	1006, 1007, 1012, 1016, 1017, 1020, 1023, 1024, 1014, 1223,
	972, 973, 974, 1000, 1001, 833, 0, 2022, 1224, 1114,
	1225, 1226, 1573, 0, 1231, 1232, 1233, 1234, 1235, 1236,
	1237, 1238, 1239, 1240, -2, -2, -2, -2, -2, -2,
	-2, -2, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1258, 1259, -2, -2, -2, 1263, 1264, -2, 1481,
	1483, 0, 1545, 0, -2, 0, -2, -2, -2, -2,
	1283, 0, 1285, 1290, 1292, 1294, 0, 0, 0, 0,
	1544, 1304, 1528, 1529, 0, 0, 1460, 1461, 1462, 1289,
	0, 1308, 1543, 1540, 0, 0, 1493, 997, 1367, 0,
	0, 0, 0, 1374, 0, 1572, 1219, 1206, 1207, 1208,
	1209, 1210, 1211, 1221, 1359, 1491, 0, 1490, 0, 0,
	0, 1501, 0, 1535, 1531, 0, 1595, 1601, 1439, 0,
	0, 0, 0, 1569, 0, 0, 0, 0, 0, 0,
	0, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1411, 0, 1504, -2, -2, -2, -2, -2, -2, -2,
	0, 1413, 0, 1415, 1495, 1514, 0, 0, 1309, 0,
	0, 0, 1458, 0, 1418, 1495, 1522, 0, 0, 0,
	0, 0, 1495, 0, 1527, 0, 1425, 0, 1427, 981,
	0, 0, 1108, 0, 0, 0, 1549, 1108, 1108, 0,
	1029, 0, 0, 1090, 1091, 1092, 0, 0, 1093, 0,
	1084, 1088, 1085, 1086, 0, 0, 1070, 1080, 1044, 0,
	0, 1575, 1050, 1079, 0, 751, 1069, 1080, 1080, 0,
	-2, 1054, 0, 0, 997, -2, 171, 750, 0, 0,
	0, 0, 386, 388, 0, 0, 0, 380, 0, 383,
	0, 1109, 1112, 0, 1126, 0, 0, -2, 0, 0,
	0, 0, 0, 453, 0, 888, 896, 0, 482, 0,
	484, 0, 769, 1568, 1567, 0, 473, 0, 0, 0,
	0, 845, 108, 1896, 0, 140, 0, 0, 735, 1581,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 777, 778, 780, 786, 788, 0, 782, 1570,
	0, 783, 0, 785, 787, 789, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	1556, 161, 1082, 1555, 1565, 0, 184, 187, 190, 193,
	0, 220, 0, 0, 683, 666, 0, 771, 774, 0,
	751, 806, 1587, 0, 274, 170, 0, 0, 288, 0,
	0, 0, 0, 0, 0, 812, 0, 0, 0, 1896,
	905, 911, 0, 999, 1107, 0, 934, 919, 0, 0,
	0, 934, 938, 939, 941, 942, 0, 0, 1104, 0,
	247, 340, 138, 138, 138, 1553, 138, 138, 159, 334,
	337, 343, 379, 986, 170, 168, 1765, 166, 163, 165,
	0, 0, 0, 684, 686, 687, 688, 689, 0, 1616,
	0, 1724, 1616, 143, 170, 286, 436, 441, 553, 0,
	586, 605, 659, 657, 594, 0, 0, 0, 607, 0,
	0, 0, 0, 0, 642, 643, 647, 1101, 955, 0,
	1018, 0, 1015, 1021, 1022, 0, 1003, 831, 832, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1305, 0,
	-2, 1284, 1287, 1291, 1293, 1295, 0, 0, 0, 0,
	0, 0, 1484, 0, 1486, 1306, 1538, 1541, 1456, 0,
	0, 996, 997, 997, 997, 1373, 0, 0, 0, 0,
	0, 0, 0, 1492, 0, 1499, 1500, 0, 1366, 0,
	1532, 0, 0, 0, 1375, 0, 0, 0, 1176, 1150,
	0, 1204, 1202, 1203, 1197, 1204, 1201, 0, 0, 0,
	0, 0, 1394, 0, 0, 0, 1398, 1410, 0, 1412,
	1414, 0, 0, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1312, 1313, 1314,
	1417, 1520, 1521, 0, 0, 0, 0, 0, 0, 1423,
	0, 1526, 1424, 1426, 986, 1031, 1026, 1547, 1083, 1033,
	1035, 1548, 1578, 1026, 1026, 0, 1496, 0, 0, 1074,
	0, 0, 0, 1076, 0, 1065, 0, 1067, 1080, 1049,
	0, 0, 1042, 0, 1039, 1040, 1041, 751, 1078, 1051,
	1055, 1595, 0, 1099, 0, 1059, 1062, 0, 0, 1608,
	195, 199, 200, 196, 197, 0, 395, 0, 0, 1498,
	0, 1115, 0, 0, 0, 0, 0, 399, 0, 449,
	-2, 480, 481, 483, 0, 479, 105, 846, 0, 0,
	837, 0, 110, 1896, 119, 0, 712, 0, 1579, 0,
	0, 0, 0, 848, 0, 1896, 138, 1896, 138, 121,
	124, 0, 128, 126, 0, 0, 703, 75, 846, 78,
	84, 0, 0, 0, 90, 0, 0, 839, 0, 781,
	784, 790, 58, 0, 841, 835, 0, 834, 130, 79,
	85, 0, 843, 77, 0, 170, 0, 1561, 0, 0,
	0, 0, 682, -2, 0, 0, 0, 0, 0, 0,
	280, 276, 0, 285, 291, 290, 797, -2, 800, 809,
	0, 811, 823, 0, 0, 0, 907, 911, 0, 910,
	984, 1011, 998, 1106, 912, 934, 0, 0, 0, 922,
	924, 921, 918, 915, 1108, 0, 0, 0, 0, 0,
	242, 319, 322, 325, 328, 331, 345, 147, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 1616,
	1616, 0, 1583, 144, 438, 0, 0, 596, 598, 611,
	634, 635, 698, 0, 698, 0, 0, 1002, 833, 0,
	1227, 1268, 0, 0, -2, 0, 0, 1272, 0, 0,
	0, -2, 0, 0, 0, 1485, 1487, 0, 1540, 1368,
	0, 0, 0, 0, 1350, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 0, 1357, 1358, 1459, 1502, 1530, 1534, 0,
	1596, 1600, 1437, 1438, 1442, 1586, 0, 0, 0, 1195,
	1199, 1379, 0, 0, 0, 0, 0, 0, 0, 1503,
	1513, 1515, 1310, 1311, 1315, 1316, 1317, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, -2, -2, -2, 1328, 1329, 1330,
	-2, -2, -2, 0, 0, 0, 1516, 1518, 1519, 1523,
	1524, 0, 1420, 1421, 1422, 1525, 0, 1028, 0, 1032,
	0, 1028, 1028, 993, 1072, 0, 0, 1095, 0, 1047,
	1066, 0, 1056, 1045, 0, 1046, 0, 1077, 0, 1053,
	1058, 0, 1061, 0, 1368, -2, 154, 397, 381, 0,
	0, 1117, 1127, 0, 1179, 1183, 401, 1081, 0, 0,
	0, 0, 139, 710, 734, 0, 0, 826, 833, 0,
	0, 112, 0, 0, 0, 120, 0, 117, 0, 123,
	127, 0, 0, 0, 0, 87, 88, 89, 0, 93,
	95, 0, 0, 0, 0, 0, 141, 0, 215, 805,
	221, 692, 0, 667, 0, 751, 775, 0, 272, 0,
	279, 0, 795, 810, 0, 0, 0, 0, 0, 909,
	911, 0, 902, 903, 934, 1010, 913, 932, -2, 931,
	0, 0, 0, 999, 940, 937, 943, 944, 0, 167,
	0, 162, 164, 0, 150, 0, 0, 685, 690, 0,
	0, 0, 0, 0, 554, 606, 636, 697, 0, 0,
	638, 1013, 1019, 1004, 833, 1270, 1274, 0, 0, 0,
	1276, -2, 0, 1298, -2, -2, 1488, 1539, 1347, 997,
	1369, 1371, 1372, 1222, 1533, 0, 1444, 1441, 0, 1428,
	1151, 1389, 1390, 0, 0, 1393, 1395, 1396, 1397, 1512,
	0, 0, 0, 0, 1419, 982, 1433, 0, 0, 1036,
	1433, 1433, 1073, 0, 1075, 1070, 1068, 1043, 1037, 0,
	1596, 1060, 0, 0, 1110, 1116, 0, 1178, 106, 107,
	109, 0, 711, 0, 714, 0, 0, 0, 0, 721,
	722, 0, 0, 0, 0, 0, 740, 749, 0, 828,
	0, 0, 0, 114, 133, 0, 0, 847, 0, 138,
	138, 0, 0, 838, 0, 0, 0, 840, 842, 836,
	0, 844, 160, 700, 0, 671, 668, 683, 666, 772,
	804, 0, 277, 0, 822, 0, 0, 0, 899, 911,
	0, 904, 905, 293, 0, 0, 0, 920, 923, 925,
	1011, 0, 169, 170, 0, 0, 0, 0, 0, 0,
	440, 442, 0, 0, 448, 696, 0, 0, 1005, 1278,
	-2, -2, 1299, 0, 1597, 1599, 999, 0, 1430, 0,
	0, -2, 0, 0, 0, 968, 0, 1027, 1025, 969,
	970, 1094, 1080, 0, 1063, 0, 1118, 111, 0, 715,
	716, 1582, 718, 0, 720, 723, 0, 725, 1618, 0,
	729, 736, 741, 0, 692, 0, 746, 747, 827, 738,
	0, 113, 115, 132, 830, 116, 122, 0, 0, 0,
	0, 1665, 97, 0, 666, 699, 0, 669, 0, 0,
	0, 278, 281, 0, 284, 0, 823, 0, 0, 0,
	906, 907, 0, 0, 0, 934, 945, 149, 0, 0,
	749, 0, 0, 733, 0, 444, 0, 446, 0, 637,
	639, 1370, 1448, 0, 1391, 1392, -2, 0, 1336, 1432,
	1434, 0, 1048, 1038, 1111, 713, 717, 0, 0, 755,
	0, 0, 0, 744, 745, 700, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 664, 0, 672, 0,
	692, 0, 282, 283, 749, 0, 749, 0, 908, 909,
	0, 927, 928, 930, 935, 0, 0, 692, 749, 732,
	443, 0, 0, 0, 0, 0, 0, 1443, 1337, 0,
	0, 0, 724, 760, 0, 0, 0, 742, 743, 740,
	0, 751, 118, 0, 829, 0, 704, 0, 0, 707,
	0, 0, 98, 1665, 96, 0, 0, 673, 700, 671,
	692, 0, 692, 0, 900, 0, 929, 170, 170, 700,
	692, 445, 447, 1440, 1445, 1449, -2, 1860, 1668, 0,
	1446, 1447, 1435, 1436, 0, 726, 756, 757, 0, 752,
	753, 754, 1617, 727, 728, 737, 748, 755, 134, 701,
	0, 0, 702, 0, 0, 101, 0, 103, 0, 666,
	670, 700, 0, 700, 0, 1108, 151, 152, 730, 700,
	0, 1451, 1452, 1453, 1454, 1455, 719, 758, 0, 759,
	0, 0, 0, 760, 705, 0, 708, 0, 99, 0,
	665, 820, 749, 820, 749, 926, 731, 0, 761, 0,
	764, 765, 0, 762, 740, 0, 0, 695, 815, 0,
	692, 817, 692, 1450, 763, 766, 767, 739, 0, 0,
	691, 693, 694, 821, 700, 700, 700, 0, 820, 820,
	706, 0, 816, 818, 0, 0, 700, 709,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 438, 3, 444, 439, 3,
	449, 450, 442, 440, 453, 441, 451, 443, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 457, 3,
	430, 432, 431, 434, 454, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 447, 3, 448, 445, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 455, 437, 456, 435,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 433, 57773, 436, 57774, 446,
	57775, 452, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1050
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1055
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1059
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1061
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1071
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1080
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1140
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1141
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1152
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1167
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1171
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1176
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1188
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1200
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1219
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1249
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1253
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1258
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1265
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1269
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1275
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1282
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1292
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1300
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1307
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1315
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1322
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1330
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1335
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1339
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1344
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1350
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1358
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1367
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1379
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1387
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1398
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1402
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1406
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1410
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1416
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1421
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1428
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1432
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1438
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1442
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1449
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1454
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1459
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1464
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1469
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1474
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1479
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1484
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1489
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1493
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1496
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1505
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1517
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1527
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1534
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1537
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1544
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1553
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1562
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1567
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1574
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1582
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1583
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1587
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1597
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1609
		{
			sqlVAL.union.val = nil
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1619
		{
			sqlVAL.union.val = nil
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1640
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1644
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1670
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1673
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1696
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1700
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1703
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1707
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1744
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1749
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1753
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1759
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1764
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1769
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1773
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1792
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1796
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1800
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1808
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1812
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1818
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1822
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1828
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1832
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1836
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1846
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1860
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1864
		{
			sqlVAL.union.val = nil
		}
	case 171:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1870
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1883
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1884
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1885
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1886
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1896
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1904
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1906
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1909
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1919
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1928
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1936
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1938
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1942
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1945
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1955
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1964
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1972
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1974
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1978
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1981
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1985
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1989
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1994
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2009
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2015
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2020
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2032
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2033
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2035
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2036
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2037
		{
			return helpWith(sqllex, "CREATE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2040
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "create cast")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2042
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2043
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2044
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2045
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2046
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2049
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2050
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2051
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplemented(sqllex, "create operator")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "create publication")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "create rule")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2056
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			return unimplemented(sqllex, "create server")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2063
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2064
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2067
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2068
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2071
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2072
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2075
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2076
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2077
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2078
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2079
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2080
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2081
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2083
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2084
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2085
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2086
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2087
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2088
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2089
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return unimplemented(sqllex, "drop server")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2098
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2099
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2100
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2101
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2103
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2104
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2116
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2124
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2128
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2132
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2138
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2143
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2152
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2159
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2165
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2171
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2175
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2186
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2198
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2206
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2214
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2224
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2228
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2234
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2245
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2249
		{

			sqlVAL.union.val = nil
		}
	case 293:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2263
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2273
		{
			return helpWith(sqllex, "DELETE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2280
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2283
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2284
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2285
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2286
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2296
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2297
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2298
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2299
		{
			return helpWith(sqllex, "DROP")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2302
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2303
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2304
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2305
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2306
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2314
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2318
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2321
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2329
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2333
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2336
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2344
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2348
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2351
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2359
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2367
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2374
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2382
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2390
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2397
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2405
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2409
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2412
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2420
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2424
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2427
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2431
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2436
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2459
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2462
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2464
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2468
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2479
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2483
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2486
		{
			return helpWith(sqllex, "DELETE")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2488
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2489
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2490
		{
			return helpWith(sqllex, "INSERT")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2491
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2493
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2494
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2497
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2502
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2503
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2504
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2508
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2522
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2530
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2538
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2542
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2546
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2556
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2563
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2571
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2575
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2579
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2589
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2593
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2597
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2601
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2604
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2624
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2628
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2632
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2635
		{
			return helpWith(sqllex, "GRANT")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2655
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2659
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2663
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2666
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2671
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2675
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2685
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2689
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2703
		{
			return helpWith(sqllex, "RESET")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2712
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2716
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2719
		{
			return helpWith(sqllex, "RESET")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2727
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2730
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2741
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2744
		{
			return helpWith(sqllex, "USE")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2748
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2749
		{
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2750
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2751
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2755
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2756
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2757
		{
			return helpWith(sqllex, "USE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2773
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2788
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2791
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2809
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2818
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2822
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2826
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2832
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2846
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2850
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2854
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2858
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2869
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2872
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2882
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2898
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2902
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2907
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2924
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2927
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2929
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2932
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2936
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2955
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2962
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2968
		{
			return unimplemented(sqllex, "set from current")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2969
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2977
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2982
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2989
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2999
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3003
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3031
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3041
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3045
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3049
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3053
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3057
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3063
		{
			sqlVAL.union.val = tree.Low
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3067
		{
			sqlVAL.union.val = tree.Normal
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3071
		{
			sqlVAL.union.val = tree.High
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3082
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3086
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3090
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3095
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3099
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3112
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3113
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3114
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3115
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3116
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3117
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3119
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3120
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3121
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3122
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3123
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3124
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3125
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3126
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3127
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3128
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3129
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3130
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3131
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3132
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3133
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3134
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3135
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3137
		{
			return helpWith(sqllex, "SHOW")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3144
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3145
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3146
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3157
		{
			sqlVAL.str = "client_encoding"
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3160
		{
			sqlVAL.str = "timezone"
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3175
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3180
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3185
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3196
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3204
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3212
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3219
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3227
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3234
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3244
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3248
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3251
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3253
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3256
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3264
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3268
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3276
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3279
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3292
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3300
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3308
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3312
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3314
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3318
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3320
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3324
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3332
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3338
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3350
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3353
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3355
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3358
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3362
		{
			sqlVAL.union.val = true
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3364
		{
			sqlVAL.union.val = true
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3366
		{
			sqlVAL.union.val = false
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3380
		{
			sqlVAL.union.val = true
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3381
		{
			sqlVAL.union.val = false
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3395
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3398
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3400
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3404
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3407
		{
			sqlVAL.union.val = true
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = false
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3416
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3419
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3421
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3424
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3432
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3442
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3452
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3455
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3458
		{
			sqlVAL.union.val = true
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3459
		{
			sqlVAL.union.val = false
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3466
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3470
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3473
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3480
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3484
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3487
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3494
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3498
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3506
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3511
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3516
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3520
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3528
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3533
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3538
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3551
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3554
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3562
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3565
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3573
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3577
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3585
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3593
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3600
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3607
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3611
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3622
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3627
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3630
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3638
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3646
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3651
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3771
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3775
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3779
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3818
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3822
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3827
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3831
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3840
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3847
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3851
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3863
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3872
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3875
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3911
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3924
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3938
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3939
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3940
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3944
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3956
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3969
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3970
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3971
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3985
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3986
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3987
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3988
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3989
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3990
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3991
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3992
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3997
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4003
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4013
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4019
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4022
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4026
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4035
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4042
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4047
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4052
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4058
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4065
		{
			sqlVAL.str = ""
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4072
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4078
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4085
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4092
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4098
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4102
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4108
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4118
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4122
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4128
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4142
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4157
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4163
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4167
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4171
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4175
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4179
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4183
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4187
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4205
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4213
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4225
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4229
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4239
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4243
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4247
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 730:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4254
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4264
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4276
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4303
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4309
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4315
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4326
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4336
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4348
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4349
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4350
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4351
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4352
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4353
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4370
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4374
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4380
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4384
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4404
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4408
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4412
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4416
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4429
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4433
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4437
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4447
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4453
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4461
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4465
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4469
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4473
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4477
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4483
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4487
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4493
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4512
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4517
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4521
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4525
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4532
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4533
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4535
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4536
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4537
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4540
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4542
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4544
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4546
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4547
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4549
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4550
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4552
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4554
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4562
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4565
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4573
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4577
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4580
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4584
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4588
		{
			sqlVAL.union.val = nil
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4598
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4602
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4605
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4610
		{
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4611
		{
		}
	case 804:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4619
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4627
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4628
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4631
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4632
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4638
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4640
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4642
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4644
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4646
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4648
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4664
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4678
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4693
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4707
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4721
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4724
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4725
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4729
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4744
		{
			sqlVAL.union.val = false
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4750
		{
			sqlVAL.union.val = true
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4754
		{
			sqlVAL.union.val = false
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4760
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4773
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4784
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 830:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4785
		{
			sqlVAL.str = ""
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4793
		{
			sqlVAL.union.val = tree.Descending
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4797
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 834:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4803
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4810
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4814
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4820
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4826
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4834
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4840
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4848
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4854
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4866
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4871
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4872
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4875
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4876
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4884
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4887
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4897
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4906
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4909
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4917
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4920
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4924
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4925
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4926
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4942
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4945
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4947
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4950
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4960
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4963
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4968
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4972
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4977
		{
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4978
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4979
		{
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4987
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4994
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4997
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4998
		{
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5002
		{
			sqlVAL.str = ""
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5006
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5010
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5014
		{
			sqlVAL.str = ""
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5020
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5024
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5030
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5034
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5040
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5044
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5057
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5059
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5063
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5072
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5076
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5082
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5088
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5094
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 899:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5108
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5118
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5128
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5132
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5136
		{
			sqlVAL.str = ""
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5142
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5146
		{
			sqlVAL.str = ""
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5152
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5156
		{
			sqlVAL.str = ""
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5162
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5166
		{
			sqlVAL.str = ""
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5171
		{
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5172
		{
		}
	case 912:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5184
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5191
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5198
		{
			return helpWith(sqllex, "INSERT")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5209
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5216
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5220
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5229
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5236
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5240
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5244
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5250
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5274
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5278
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5282
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5288
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5291
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5292
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5300
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5305
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 935:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5326
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5337
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5341
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5342
		{
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5346
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5350
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5366
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5370
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5413
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5419
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5423
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5438
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5442
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5446
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5450
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5454
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5458
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5463
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5464
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5469
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5504
		{
			return helpWith(sqllex, "SELECT")
		}
	case 964:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5505
		{
			return helpWith(sqllex, "VALUES")
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5506
		{
			return helpWith(sqllex, "TABLE")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5528
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5541
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5555
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5567
		{
			return helpWith(sqllex, "SELECT")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5571
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5580
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5589
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5604
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5611
		{
			return helpWith(sqllex, "TABLE")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5623
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5627
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5631
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5635
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 982:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5645
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5653
		{
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5654
		{
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5658
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5662
		{
			sqlVAL.union.val = nil
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5667
		{
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5668
		{
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5672
		{
			sqlVAL.union.val = true
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5676
		{
			sqlVAL.union.val = false
		}
	case 991:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5680
		{
			sqlVAL.union.val = false
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5686
		{
			sqlVAL.union.val = true
		}
	case 993:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5692
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5697
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5698
		{
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5701
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5702
		{
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5706
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5710
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5716
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5722
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5732
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5736
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5741
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5756
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5765
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5780
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5789
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5795
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5802
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5809
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5818
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5822
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5826
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5832
		{
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5833
		{
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5836
		{
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5837
		{
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5854
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5858
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5864
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5868
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5887
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5890
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5892
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5904
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5907
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5909
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5915
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5925
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5929
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5934
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5939
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5945
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5951
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5956
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5967
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5971
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5975
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5983
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6013
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6027
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6037
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6045
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6054
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6058
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6062
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6073
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6097
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6103
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6107
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6113
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6115
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6119
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6125
		{
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6127
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = nil
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6131
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6132
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6136
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6140
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6146
		{
			sqlVAL.union.val = true
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = false
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6170
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6174
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6182
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6186
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6196
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6200
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6207
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6213
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6220
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6226
		{
			sqlVAL.str = tree.AstFull
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6234
		{
			sqlVAL.str = tree.AstRight
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6238
		{
			sqlVAL.str = tree.AstInner
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6244
		{
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6245
		{
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6266
		{
			sqlVAL.str = tree.AstHash
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6270
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6274
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6278
		{
			sqlVAL.str = ""
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6291
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6295
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6300
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6302
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6303
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6307
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6312
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6326
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6330
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6336
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6344
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6354
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6361
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6373
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6386
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6394
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6395
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6403
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6409
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6416
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6417
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6419
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6427
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6428
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6439
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6440
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6457
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6461
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6465
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6469
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6473
		{
			sqlVAL.union.val = types.String
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6477
		{
			sqlVAL.union.val = types.Name
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6481
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6490
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6494
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6498
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6502
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6506
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6510
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6514
		{
			sqlVAL.union.val = types.INet
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6518
		{
			sqlVAL.union.val = types.Oid
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6522
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6526
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6530
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6561
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6569
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6577
		{
			sqlVAL.union.val = nil
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6584
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6588
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6592
		{
			sqlVAL.union.val = types.Int2
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6596
		{
			sqlVAL.union.val = types.Int2
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6600
		{
			sqlVAL.union.val = types.Int4
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6604
		{
			sqlVAL.union.val = types.Int
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6608
		{
			sqlVAL.union.val = types.Int
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6612
		{
			sqlVAL.union.val = types.Int
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6616
		{
			sqlVAL.union.val = types.Float4
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6620
		{
			sqlVAL.union.val = types.Float4
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6624
		{
			sqlVAL.union.val = types.Float
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = types.Float
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6636
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6644
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6652
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6660
		{
			sqlVAL.union.val = types.Bool
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6664
		{
			sqlVAL.union.val = types.Bool
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6671
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.union.val = types.RegType
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6693
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = types.Float
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6712
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6718
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6726
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6734
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6740
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6752
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6758
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6762
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6766
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6770
		{
			sqlVAL.union.val = types.String
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6779
		{
			sqlVAL.union.val = true
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = false
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6785
		{
			sqlVAL.union.val = types.Date
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6789
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6794
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6801
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6802
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6804
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6812
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6828
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6837
		{
			sqlVAL.union.val = true
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6838
		{
			sqlVAL.union.val = false
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6839
		{
			sqlVAL.union.val = false
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6843
		{
			sqlVAL.union.val = types.Interval
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6849
		{
			sqlVAL.union.val = tree.Year
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = tree.Month
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6857
		{
			sqlVAL.union.val = tree.Day
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6861
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6865
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6869
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6875
		{
			sqlVAL.union.val = tree.Month
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6879
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6887
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6899
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = nil
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6912
		{
			sqlVAL.union.val = tree.Second
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6915
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6939
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6943
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6947
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6950
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6959
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7016
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7060
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7072
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7076
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7080
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7084
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7088
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7092
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7096
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7100
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7108
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7112
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7116
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7120
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7124
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7128
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7132
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7136
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7140
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7144
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7148
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7152
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7156
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7160
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7164
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7168
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7172
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7180
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7184
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7188
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7192
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7196
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7200
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7203
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7205
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7209
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7213
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7217
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7269
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7291
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7425
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7485
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7490
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7499
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7517
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7526
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7565
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7576
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7577
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7579
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7583
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7587
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7590
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7601
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7608
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7622
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7624
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7628
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7638
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7642
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7646
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7652
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7656
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7660
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7664
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7700
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7710
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7715
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7717
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7720
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7722
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7725
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7727
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7732
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7735
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7737
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7740
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7742
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7745
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7747
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7754
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7755
		{
			return unimplemented(sqllex, "treat")
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7761
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7765
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7776
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7778
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7781
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7786
		{
			return unimplemented(sqllex, "within group")
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7787
		{
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7791
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7795
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7802
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7806
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7822
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7834
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7838
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7845
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7865
		{
			sqlVAL.str = ""
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7871
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7875
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7886
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7893
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7907
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7913
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7926
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7954
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7962
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7993
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8000
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8012
		{
			sqlVAL.union.val = tree.Any
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = tree.Some
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8020
		{
			sqlVAL.union.val = tree.All
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8025
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8026
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = tree.Div
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8029
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8030
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8031
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8033
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = tree.LT
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = tree.GT
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8037
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = tree.LE
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = tree.GE
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8040
		{
			sqlVAL.union.val = tree.NE
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = tree.Like
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8070
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8074
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8080
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8084
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8088
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8099
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8109
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8113
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8120
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8136
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8140
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8192
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8196
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8200
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8206
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8213
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8234
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8238
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8242
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8268
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8294
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8301
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8311
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8328
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8334
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8338
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8360
		{
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8361
		{
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8365
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8384
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8400
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8404
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8410
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8433
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8441
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8464
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8473
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8477
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8481
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8485
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8491
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8495
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8507
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8516
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8527
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8536
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8544
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8641
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8648
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8652
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8656
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8670
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8674
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8678
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8691
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8709
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8721
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8727
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8751
		{
			sqlVAL.str = ""
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8757
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8761
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
