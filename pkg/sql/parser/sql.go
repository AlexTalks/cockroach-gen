// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9279

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 999,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	178, 838,
	195, 838,
	210, 233,
	286, 233,
	294, 694,
	321, 233,
	330, 694,
	367, 694,
	392, 233,
	415, 694,
	-2, 0,
	-1, 75,
	210, 237,
	-2, 0,
	-1, 76,
	106, 999,
	184, 999,
	401, 999,
	402, 999,
	-2, 0,
	-1, 87,
	119, 973,
	133, 973,
	192, 973,
	221, 973,
	252, 973,
	262, 973,
	397, 973,
	-2, 960,
	-1, 116,
	124, 614,
	201, 606,
	209, 614,
	288, 600,
	339, 600,
	385, 614,
	-2, 0,
	-1, 117,
	4, 1001,
	21, 1001,
	22, 1001,
	23, 1001,
	24, 1001,
	25, 1001,
	27, 1001,
	32, 1001,
	37, 1001,
	38, 1001,
	39, 1001,
	40, 1001,
	41, 1001,
	42, 1001,
	43, 1001,
	44, 1001,
	45, 1001,
	46, 1001,
	47, 1001,
	49, 1001,
	50, 1001,
	51, 1001,
	52, 1001,
	53, 1001,
	54, 1001,
	57, 1001,
	58, 1001,
	59, 1001,
	60, 1001,
	62, 1001,
	63, 1001,
	67, 1001,
	68, 1001,
	69, 1001,
	70, 1001,
	71, 1001,
	73, 1001,
	74, 1001,
	75, 1001,
	76, 1001,
	78, 1001,
	80, 1001,
	81, 1001,
	82, 1001,
	85, 1001,
	86, 1001,
	94, 1001,
	95, 1001,
	96, 1001,
	97, 1001,
	98, 1001,
	99, 1001,
	100, 1001,
	101, 1001,
	103, 1001,
	105, 1001,
	106, 1001,
	108, 1001,
	111, 1001,
	112, 1001,
	113, 1001,
	115, 1001,
	117, 1001,
	118, 1001,
	120, 1001,
	121, 1001,
	122, 1001,
	123, 1001,
	124, 1001,
	125, 1001,
	126, 1001,
	127, 1001,
	128, 1001,
	129, 1001,
	130, 1001,
	132, 1001,
	138, 1001,
	139, 1001,
	140, 1001,
	141, 1001,
	142, 1001,
	143, 1001,
	145, 1001,
	147, 1001,
	151, 1001,
	152, 1001,
	154, 1001,
	155, 1001,
	157, 1001,
	158, 1001,
	160, 1001,
	161, 1001,
	162, 1001,
	163, 1001,
	164, 1001,
	165, 1001,
	166, 1001,
	167, 1001,
	169, 1001,
	170, 1001,
	172, 1001,
	173, 1001,
	174, 1001,
	178, 1001,
	179, 1001,
	180, 1001,
	181, 1001,
	184, 1001,
	185, 1001,
	186, 1001,
	187, 1001,
	188, 1001,
	189, 1001,
	190, 1001,
	191, 1001,
	193, 1001,
	195, 1001,
	197, 1001,
	199, 1001,
	200, 1001,
	201, 1001,
	203, 1001,
	204, 1001,
	207, 1001,
	208, 1001,
	209, 1001,
	210, 1001,
	212, 1001,
	213, 1001,
	215, 1001,
	216, 1001,
	218, 1001,
	219, 1001,
	222, 1001,
	223, 1001,
	226, 1001,
	227, 1001,
	229, 1001,
	230, 1001,
	231, 1001,
	232, 1001,
	233, 1001,
	234, 1001,
	235, 1001,
	236, 1001,
	237, 1001,
	238, 1001,
	240, 1001,
	241, 1001,
	242, 1001,
	243, 1001,
	245, 1001,
	248, 1001,
	249, 1001,
	250, 1001,
	251, 1001,
	253, 1001,
	254, 1001,
	255, 1001,
	257, 1001,
	258, 1001,
	259, 1001,
	260, 1001,
	263, 1001,
	264, 1001,
	266, 1001,
	268, 1001,
	269, 1001,
	270, 1001,
	271, 1001,
	272, 1001,
	273, 1001,
	274, 1001,
	275, 1001,
	276, 1001,
	278, 1001,
	279, 1001,
	280, 1001,
	281, 1001,
	282, 1001,
	283, 1001,
	285, 1001,
	287, 1001,
	288, 1001,
	289, 1001,
	290, 1001,
	291, 1001,
	292, 1001,
	293, 1001,
	294, 1001,
	295, 1001,
	297, 1001,
	298, 1001,
	299, 1001,
	300, 1001,
	301, 1001,
	303, 1001,
	304, 1001,
	305, 1001,
	306, 1001,
	307, 1001,
	308, 1001,
	309, 1001,
	310, 1001,
	312, 1001,
	314, 1001,
	315, 1001,
	316, 1001,
	317, 1001,
	318, 1001,
	319, 1001,
	321, 1001,
	322, 1001,
	323, 1001,
	324, 1001,
	325, 1001,
	326, 1001,
	327, 1001,
	328, 1001,
	330, 1001,
	331, 1001,
	332, 1001,
	333, 1001,
	334, 1001,
	335, 1001,
	336, 1001,
	337, 1001,
	338, 1001,
	339, 1001,
	341, 1001,
	342, 1001,
	343, 1001,
	344, 1001,
	346, 1001,
	347, 1001,
	348, 1001,
	349, 1001,
	351, 1001,
	352, 1001,
	353, 1001,
	354, 1001,
	355, 1001,
	356, 1001,
	357, 1001,
	358, 1001,
	359, 1001,
	360, 1001,
	361, 1001,
	362, 1001,
	364, 1001,
	365, 1001,
	366, 1001,
	368, 1001,
	369, 1001,
	370, 1001,
	371, 1001,
	372, 1001,
	373, 1001,
	374, 1001,
	375, 1001,
	376, 1001,
	378, 1001,
	379, 1001,
	380, 1001,
	381, 1001,
	383, 1001,
	385, 1001,
	386, 1001,
	387, 1001,
	388, 1001,
	389, 1001,
	391, 1001,
	392, 1001,
	393, 1001,
	395, 1001,
	396, 1001,
	399, 1001,
	400, 1001,
	401, 1001,
	402, 1001,
	403, 1001,
	405, 1001,
	407, 1001,
	408, 1001,
	409, 1001,
	410, 1001,
	411, 1001,
	412, 1001,
	413, 1001,
	415, 1001,
	416, 1001,
	417, 1001,
	422, 1001,
	423, 1001,
	424, 1001,
	425, 1001,
	426, 1001,
	427, 1001,
	-2, 0,
	-1, 118,
	1, 891,
	199, 891,
	285, 891,
	292, 891,
	430, 891,
	453, 891,
	-2, 0,
	-1, 120,
	1, 891,
	453, 891,
	-2, 0,
	-1, 121,
	1, 891,
	453, 891,
	-2, 0,
	-1, 122,
	1, 895,
	453, 895,
	-2, 0,
	-1, 146,
	119, 972,
	133, 972,
	192, 972,
	221, 972,
	252, 972,
	262, 972,
	397, 972,
	-2, 969,
	-1, 176,
	4, 1008,
	5, 1008,
	6, 1008,
	7, 1008,
	8, 1008,
	9, 1008,
	10, 1008,
	21, 1008,
	22, 1008,
	23, 1008,
	24, 1008,
	25, 1008,
	27, 1008,
	32, 1008,
	33, 1008,
	37, 1008,
	38, 1008,
	39, 1008,
	40, 1008,
	41, 1008,
	42, 1008,
	43, 1008,
	44, 1008,
	45, 1008,
	46, 1008,
	47, 1008,
	49, 1008,
	50, 1008,
	51, 1008,
	52, 1008,
	53, 1008,
	54, 1008,
	55, 1008,
	56, 1008,
	57, 1008,
	58, 1008,
	59, 1008,
	60, 1008,
	62, 1008,
	63, 1008,
	65, 1008,
	67, 1008,
	68, 1008,
	69, 1008,
	70, 1008,
	71, 1008,
	73, 1008,
	74, 1008,
	75, 1008,
	76, 1008,
	78, 1008,
	80, 1008,
	81, 1008,
	82, 1008,
	84, 1008,
	85, 1008,
	86, 1008,
	87, 1008,
	88, 1008,
	89, 1008,
	90, 1008,
	91, 1008,
	92, 1008,
	93, 1008,
	94, 1008,
	95, 1008,
	96, 1008,
	97, 1008,
	98, 1008,
	99, 1008,
	100, 1008,
	101, 1008,
	102, 1008,
	103, 1008,
	105, 1008,
	106, 1008,
	108, 1008,
	111, 1008,
	112, 1008,
	113, 1008,
	115, 1008,
	117, 1008,
	118, 1008,
	120, 1008,
	121, 1008,
	122, 1008,
	123, 1008,
	124, 1008,
	125, 1008,
	126, 1008,
	127, 1008,
	128, 1008,
	129, 1008,
	130, 1008,
	131, 1008,
	132, 1008,
	138, 1008,
	139, 1008,
	140, 1008,
	141, 1008,
	142, 1008,
	143, 1008,
	145, 1008,
	147, 1008,
	150, 1008,
	151, 1008,
	152, 1008,
	154, 1008,
	155, 1008,
	157, 1008,
	158, 1008,
	160, 1008,
	161, 1008,
	162, 1008,
	163, 1008,
	164, 1008,
	165, 1008,
	166, 1008,
	167, 1008,
	168, 1008,
	169, 1008,
	170, 1008,
	172, 1008,
	173, 1008,
	174, 1008,
	178, 1008,
	179, 1008,
	180, 1008,
	181, 1008,
	183, 1008,
	184, 1008,
	185, 1008,
	186, 1008,
	187, 1008,
	188, 1008,
	189, 1008,
	190, 1008,
	191, 1008,
	193, 1008,
	195, 1008,
	196, 1008,
	197, 1008,
	198, 1008,
	199, 1008,
	200, 1008,
	201, 1008,
	202, 1008,
	203, 1008,
	204, 1008,
	207, 1008,
	208, 1008,
	209, 1008,
	210, 1008,
	212, 1008,
	213, 1008,
	215, 1008,
	216, 1008,
	217, 1008,
	218, 1008,
	219, 1008,
	220, 1008,
	222, 1008,
	223, 1008,
	226, 1008,
	227, 1008,
	229, 1008,
	230, 1008,
	231, 1008,
	232, 1008,
	233, 1008,
	234, 1008,
	235, 1008,
	236, 1008,
	237, 1008,
	238, 1008,
	239, 1008,
	240, 1008,
	241, 1008,
	242, 1008,
	243, 1008,
	244, 1008,
	245, 1008,
	246, 1008,
	247, 1008,
	248, 1008,
	249, 1008,
	250, 1008,
	251, 1008,
	253, 1008,
	254, 1008,
	255, 1008,
	258, 1008,
	259, 1008,
	260, 1008,
	263, 1008,
	264, 1008,
	265, 1008,
	266, 1008,
	267, 1008,
	268, 1008,
	269, 1008,
	270, 1008,
	271, 1008,
	272, 1008,
	273, 1008,
	274, 1008,
	275, 1008,
	276, 1008,
	278, 1008,
	279, 1008,
	280, 1008,
	281, 1008,
	282, 1008,
	283, 1008,
	285, 1008,
	287, 1008,
	288, 1008,
	289, 1008,
	290, 1008,
	291, 1008,
	292, 1008,
	293, 1008,
	294, 1008,
	295, 1008,
	297, 1008,
	298, 1008,
	299, 1008,
	300, 1008,
	301, 1008,
	303, 1008,
	304, 1008,
	305, 1008,
	306, 1008,
	307, 1008,
	308, 1008,
	309, 1008,
	310, 1008,
	312, 1008,
	313, 1008,
	314, 1008,
	315, 1008,
	316, 1008,
	317, 1008,
	318, 1008,
	319, 1008,
	321, 1008,
	322, 1008,
	323, 1008,
	324, 1008,
	325, 1008,
	326, 1008,
	327, 1008,
	328, 1008,
	330, 1008,
	331, 1008,
	332, 1008,
	333, 1008,
	334, 1008,
	335, 1008,
	336, 1008,
	337, 1008,
	338, 1008,
	339, 1008,
	340, 1008,
	341, 1008,
	342, 1008,
	343, 1008,
	344, 1008,
	345, 1008,
	346, 1008,
	347, 1008,
	348, 1008,
	349, 1008,
	351, 1008,
	352, 1008,
	353, 1008,
	354, 1008,
	355, 1008,
	356, 1008,
	357, 1008,
	358, 1008,
	359, 1008,
	360, 1008,
	361, 1008,
	362, 1008,
	364, 1008,
	365, 1008,
	366, 1008,
	368, 1008,
	369, 1008,
	370, 1008,
	371, 1008,
	372, 1008,
	373, 1008,
	374, 1008,
	375, 1008,
	376, 1008,
	378, 1008,
	379, 1008,
	380, 1008,
	381, 1008,
	383, 1008,
	385, 1008,
	386, 1008,
	387, 1008,
	388, 1008,
	389, 1008,
	390, 1008,
	391, 1008,
	392, 1008,
	393, 1008,
	395, 1008,
	396, 1008,
	398, 1008,
	399, 1008,
	400, 1008,
	401, 1008,
	402, 1008,
	403, 1008,
	404, 1008,
	405, 1008,
	407, 1008,
	408, 1008,
	409, 1008,
	410, 1008,
	411, 1008,
	412, 1008,
	413, 1008,
	415, 1008,
	416, 1008,
	417, 1008,
	422, 1008,
	423, 1008,
	424, 1008,
	425, 1008,
	426, 1008,
	427, 1008,
	428, 1008,
	436, 1008,
	441, 1008,
	442, 1008,
	443, 1008,
	450, 1008,
	455, 1008,
	-2, 0,
	-1, 544,
	149, 1677,
	382, 1677,
	433, 1677,
	452, 1677,
	-2, 0,
	-1, 545,
	149, 1754,
	382, 1754,
	433, 1754,
	452, 1754,
	-2, 0,
	-1, 546,
	149, 1667,
	382, 1667,
	433, 1667,
	452, 1667,
	-2, 0,
	-1, 548,
	149, 1841,
	382, 1841,
	433, 1841,
	452, 1841,
	-2, 0,
	-1, 550,
	149, 1869,
	382, 1869,
	433, 1869,
	452, 1869,
	-2, 0,
	-1, 557,
	149, 1764,
	382, 1764,
	433, 1764,
	452, 1764,
	-2, 482,
	-1, 574,
	452, 1626,
	454, 1626,
	-2, 663,
	-1, 575,
	452, 1628,
	454, 1628,
	-2, 664,
	-1, 576,
	452, 1627,
	454, 1627,
	-2, 665,
	-1, 577,
	454, 1573,
	-2, 666,
	-1, 721,
	288, 601,
	339, 601,
	-2, 0,
	-1, 722,
	288, 600,
	339, 600,
	-2, 560,
	-1, 724,
	1, 582,
	449, 582,
	451, 582,
	453, 582,
	-2, 0,
	-1, 725,
	1, 662,
	146, 662,
	449, 662,
	451, 662,
	453, 662,
	-2, 0,
	-1, 734,
	1, 624,
	449, 624,
	451, 624,
	453, 624,
	-2, 0,
	-1, 735,
	1, 626,
	449, 626,
	451, 626,
	453, 626,
	-2, 0,
	-1, 736,
	1, 629,
	449, 629,
	451, 629,
	453, 629,
	-2, 0,
	-1, 740,
	1, 643,
	449, 643,
	451, 643,
	453, 643,
	-2, 0,
	-1, 741,
	1, 645,
	449, 645,
	451, 645,
	453, 645,
	-2, 0,
	-1, 786,
	133, 1012,
	221, 1012,
	252, 1012,
	-2, 969,
	-1, 801,
	133, 1011,
	221, 1011,
	252, 1011,
	-2, 969,
	-1, 825,
	452, 1625,
	-2, 490,
	-1, 854,
	450, 1617,
	-2, 1608,
	-1, 860,
	5, 1147,
	-2, 1658,
	-1, 861,
	5, 1148,
	-2, 1662,
	-1, 862,
	5, 1149,
	-2, 1661,
	-1, 863,
	5, 1150,
	-2, 1867,
	-1, 864,
	5, 1151,
	-2, 1766,
	-1, 865,
	5, 1152,
	-2, 1833,
	-1, 866,
	5, 1153,
	-2, 1835,
	-1, 867,
	5, 1154,
	-2, 1846,
	-1, 868,
	5, 1155,
	-2, 1836,
	-1, 869,
	5, 1156,
	-2, 1837,
	-1, 870,
	5, 1157,
	-2, 1657,
	-1, 871,
	5, 1158,
	-2, 1881,
	-1, 872,
	5, 1159,
	-2, 1729,
	-1, 873,
	5, 1160,
	-2, 1774,
	-1, 874,
	5, 1161,
	-2, 1776,
	-1, 875,
	5, 1162,
	-2, 1733,
	-1, 876,
	5, 1163,
	450, 1635,
	-2, 1626,
	-1, 877,
	5, 1219,
	450, 1219,
	-2, 1916,
	-1, 882,
	450, 1636,
	-2, 1627,
	-1, 884,
	5, 1167,
	-2, 1914,
	-1, 885,
	5, 1168,
	-2, 1915,
	-1, 886,
	5, 1169,
	-2, 1732,
	-1, 887,
	5, 1170,
	-2, 1927,
	-1, 888,
	5, 1171,
	-2, 1734,
	-1, 889,
	5, 1172,
	-2, 1735,
	-1, 890,
	5, 1173,
	-2, 1736,
	-1, 891,
	5, 1174,
	-2, 1896,
	-1, 892,
	5, 1175,
	-2, 1925,
	-1, 893,
	5, 1176,
	-2, 1712,
	-1, 894,
	5, 1177,
	-2, 1713,
	-1, 895,
	5, 1191,
	-2, 1908,
	-1, 897,
	5, 1166,
	-2, 1904,
	-1, 898,
	5, 1166,
	-2, 1903,
	-1, 899,
	5, 1166,
	-2, 1920,
	-1, 900,
	5, 1183,
	-2, 1898,
	-1, 901,
	5, 1184,
	-2, 1659,
	-1, 902,
	5, 1194,
	-2, 1897,
	-1, 903,
	5, 1196,
	-2, 1936,
	-1, 905,
	5, 1207,
	-2, 1687,
	-1, 906,
	5, 1218,
	-2, 1929,
	-1, 907,
	5, 1210,
	-2, 1930,
	-1, 908,
	5, 1218,
	-2, 1931,
	-1, 909,
	5, 1214,
	-2, 1932,
	-1, 910,
	5, 1134,
	-2, 1742,
	-1, 911,
	5, 1135,
	-2, 1743,
	-1, 912,
	452, 1623,
	-2, 1607,
	-1, 913,
	450, 1956,
	-2, 1624,
	-1, 933,
	5, 1202,
	-2, 1856,
	-1, 950,
	5, 1201,
	-2, 1937,
	-1, 960,
	5, 1203,
	416, 1203,
	-2, 1899,
	-1, 961,
	5, 1204,
	416, 1204,
	-2, 1900,
	-1, 997,
	450, 1635,
	-2, 1626,
	-1, 1026,
	149, 1869,
	382, 1869,
	433, 1869,
	452, 1869,
	-2, 0,
	-1, 1027,
	1, 470,
	453, 470,
	-2, 903,
	-1, 1147,
	303, 1604,
	443, 1604,
	-2, 1603,
	-1, 1170,
	455, 1604,
	-2, 1605,
	-1, 1205,
	294, 694,
	415, 694,
	-2, 232,
	-1, 1225,
	274, 997,
	-2, 811,
	-1, 1234,
	256, 1630,
	-2, 0,
	-1, 1298,
	1, 347,
	449, 347,
	451, 347,
	453, 347,
	-2, 971,
	-1, 1301,
	4, 1935,
	11, 1935,
	12, 1935,
	14, 1935,
	15, 1935,
	16, 1935,
	17, 1935,
	18, 1935,
	19, 1935,
	21, 1935,
	22, 1935,
	23, 1935,
	24, 1935,
	25, 1935,
	27, 1935,
	30, 1935,
	32, 1935,
	34, 1935,
	37, 1935,
	38, 1935,
	39, 1935,
	40, 1935,
	41, 1935,
	42, 1935,
	43, 1935,
	44, 1935,
	45, 1935,
	46, 1935,
	47, 1935,
	49, 1935,
	50, 1935,
	51, 1935,
	52, 1935,
	53, 1935,
	54, 1935,
	57, 1935,
	58, 1935,
	59, 1935,
	60, 1935,
	62, 1935,
	63, 1935,
	64, 1935,
	67, 1935,
	68, 1935,
	69, 1935,
	70, 1935,
	71, 1935,
	72, 1935,
	73, 1935,
	74, 1935,
	75, 1935,
	76, 1935,
	78, 1935,
	79, 1935,
	80, 1935,
	81, 1935,
	82, 1935,
	84, 1935,
	85, 1935,
	86, 1935,
	94, 1935,
	95, 1935,
	96, 1935,
	97, 1935,
	98, 1935,
	99, 1935,
	100, 1935,
	101, 1935,
	103, 1935,
	105, 1935,
	106, 1935,
	108, 1935,
	111, 1935,
	112, 1935,
	113, 1935,
	115, 1935,
	117, 1935,
	118, 1935,
	120, 1935,
	121, 1935,
	122, 1935,
	123, 1935,
	124, 1935,
	125, 1935,
	126, 1935,
	127, 1935,
	128, 1935,
	129, 1935,
	130, 1935,
	134, 1935,
	135, 1935,
	136, 1935,
	137, 1935,
	138, 1935,
	139, 1935,
	140, 1935,
	141, 1935,
	142, 1935,
	143, 1935,
	144, 1935,
	145, 1935,
	147, 1935,
	150, 1935,
	151, 1935,
	152, 1935,
	154, 1935,
	155, 1935,
	157, 1935,
	158, 1935,
	160, 1935,
	161, 1935,
	162, 1935,
	163, 1935,
	164, 1935,
	165, 1935,
	166, 1935,
	167, 1935,
	168, 1935,
	169, 1935,
	170, 1935,
	171, 1935,
	172, 1935,
	173, 1935,
	174, 1935,
	175, 1935,
	176, 1935,
	177, 1935,
	179, 1935,
	180, 1935,
	181, 1935,
	183, 1935,
	184, 1935,
	185, 1935,
	186, 1935,
	187, 1935,
	188, 1935,
	189, 1935,
	190, 1935,
	191, 1935,
	193, 1935,
	195, 1935,
	196, 1935,
	197, 1935,
	198, 1935,
	199, 1935,
	200, 1935,
	201, 1935,
	202, 1935,
	203, 1935,
	204, 1935,
	205, 1935,
	206, 1935,
	207, 1935,
	208, 1935,
	209, 1935,
	210, 1935,
	212, 1935,
	213, 1935,
	215, 1935,
	216, 1935,
	217, 1935,
	218, 1935,
	219, 1935,
	220, 1935,
	222, 1935,
	223, 1935,
	226, 1935,
	227, 1935,
	228, 1935,
	229, 1935,
	230, 1935,
	231, 1935,
	232, 1935,
	233, 1935,
	234, 1935,
	235, 1935,
	236, 1935,
	237, 1935,
	238, 1935,
	239, 1935,
	240, 1935,
	241, 1935,
	242, 1935,
	243, 1935,
	246, 1935,
	248, 1935,
	249, 1935,
	250, 1935,
	251, 1935,
	253, 1935,
	254, 1935,
	255, 1935,
	258, 1935,
	259, 1935,
	260, 1935,
	261, 1935,
	263, 1935,
	264, 1935,
	266, 1935,
	268, 1935,
	269, 1935,
	270, 1935,
	271, 1935,
	272, 1935,
	273, 1935,
	274, 1935,
	275, 1935,
	276, 1935,
	278, 1935,
	279, 1935,
	280, 1935,
	281, 1935,
	282, 1935,
	283, 1935,
	285, 1935,
	287, 1935,
	288, 1935,
	289, 1935,
	290, 1935,
	291, 1935,
	292, 1935,
	293, 1935,
	294, 1935,
	295, 1935,
	297, 1935,
	298, 1935,
	299, 1935,
	300, 1935,
	301, 1935,
	302, 1935,
	303, 1935,
	304, 1935,
	305, 1935,
	306, 1935,
	307, 1935,
	308, 1935,
	309, 1935,
	310, 1935,
	312, 1935,
	313, 1935,
	314, 1935,
	315, 1935,
	316, 1935,
	317, 1935,
	318, 1935,
	319, 1935,
	320, 1935,
	321, 1935,
	322, 1935,
	323, 1935,
	324, 1935,
	325, 1935,
	326, 1935,
	327, 1935,
	328, 1935,
	330, 1935,
	331, 1935,
	332, 1935,
	333, 1935,
	334, 1935,
	335, 1935,
	336, 1935,
	337, 1935,
	338, 1935,
	339, 1935,
	341, 1935,
	342, 1935,
	343, 1935,
	344, 1935,
	345, 1935,
	346, 1935,
	347, 1935,
	348, 1935,
	349, 1935,
	351, 1935,
	352, 1935,
	353, 1935,
	354, 1935,
	355, 1935,
	356, 1935,
	357, 1935,
	358, 1935,
	359, 1935,
	360, 1935,
	361, 1935,
	362, 1935,
	364, 1935,
	365, 1935,
	366, 1935,
	368, 1935,
	369, 1935,
	370, 1935,
	371, 1935,
	372, 1935,
	373, 1935,
	374, 1935,
	375, 1935,
	376, 1935,
	378, 1935,
	379, 1935,
	380, 1935,
	381, 1935,
	383, 1935,
	385, 1935,
	386, 1935,
	387, 1935,
	388, 1935,
	389, 1935,
	391, 1935,
	392, 1935,
	393, 1935,
	395, 1935,
	396, 1935,
	399, 1935,
	400, 1935,
	401, 1935,
	402, 1935,
	403, 1935,
	405, 1935,
	407, 1935,
	408, 1935,
	409, 1935,
	410, 1935,
	411, 1935,
	412, 1935,
	413, 1935,
	415, 1935,
	416, 1935,
	417, 1935,
	422, 1935,
	423, 1935,
	424, 1935,
	425, 1935,
	426, 1935,
	427, 1935,
	428, 1935,
	429, 1935,
	431, 1935,
	432, 1935,
	433, 1935,
	434, 1935,
	435, 1935,
	436, 1935,
	438, 1935,
	439, 1935,
	440, 1935,
	441, 1935,
	442, 1935,
	443, 1935,
	444, 1935,
	445, 1935,
	446, 1935,
	448, 1935,
	451, 1935,
	452, 1935,
	454, 1935,
	455, 1935,
	-2, 0,
	-1, 1304,
	149, 1841,
	382, 1841,
	433, 1841,
	452, 1841,
	-2, 0,
	-1, 1331,
	288, 601,
	339, 601,
	-2, 0,
	-1, 1350,
	1, 596,
	449, 596,
	451, 596,
	453, 596,
	-2, 0,
	-1, 1351,
	1, 615,
	449, 615,
	451, 615,
	453, 615,
	-2, 0,
	-1, 1352,
	1, 603,
	449, 603,
	451, 603,
	453, 603,
	-2, 0,
	-1, 1374,
	1, 1888,
	449, 1888,
	451, 1888,
	452, 1888,
	453, 1888,
	-2, 641,
	-1, 1375,
	1, 1839,
	449, 1839,
	451, 1839,
	452, 1839,
	453, 1839,
	-2, 642,
	-1, 1388,
	1, 898,
	453, 898,
	-2, 903,
	-1, 1393,
	133, 1011,
	221, 1011,
	252, 1011,
	-2, 969,
	-1, 1486,
	119, 973,
	133, 973,
	192, 973,
	221, 973,
	252, 973,
	262, 973,
	397, 973,
	-2, 1375,
	-1, 1539,
	451, 1508,
	-2, 0,
	-1, 1581,
	119, 973,
	133, 973,
	192, 973,
	221, 973,
	252, 973,
	262, 973,
	397, 973,
	-2, 1084,
	-1, 1636,
	450, 1206,
	-2, 1194,
	-1, 1675,
	1, 472,
	453, 472,
	-2, 903,
	-1, 1861,
	1, 598,
	449, 598,
	451, 598,
	453, 598,
	-2, 0,
	-1, 1862,
	1, 617,
	449, 617,
	451, 617,
	453, 617,
	-2, 0,
	-1, 1935,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1255,
	-1, 1936,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1256,
	-1, 1937,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1257,
	-1, 1938,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1258,
	-1, 1939,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1259,
	-1, 1940,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1260,
	-1, 1941,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1261,
	-1, 1942,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1262,
	-1, 1954,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1274,
	-1, 1955,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1275,
	-1, 1956,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	205, 0,
	206, 0,
	431, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	-2, 1276,
	-1, 1959,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1281,
	-1, 1965,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1285,
	-1, 1967,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1293,
	-1, 1968,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1294,
	-1, 1969,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1295,
	-1, 1970,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1296,
	-1, 2064,
	5, 1163,
	149, 1519,
	450, 1635,
	-2, 1626,
	-1, 2065,
	149, 1520,
	-2, 1892,
	-1, 2066,
	149, 1521,
	-2, 1763,
	-1, 2067,
	149, 1522,
	-2, 1688,
	-1, 2068,
	149, 1523,
	-2, 1723,
	-1, 2069,
	149, 1524,
	-2, 1761,
	-1, 2070,
	149, 1525,
	-2, 1832,
	-1, 2146,
	1, 1085,
	84, 1085,
	119, 1085,
	133, 1085,
	146, 1085,
	150, 1085,
	156, 1085,
	159, 1085,
	183, 1085,
	192, 1085,
	202, 1085,
	217, 1085,
	221, 1085,
	239, 1085,
	252, 1085,
	256, 1085,
	262, 1085,
	311, 1085,
	313, 1085,
	397, 1085,
	406, 1085,
	419, 1085,
	420, 1085,
	421, 1085,
	430, 1085,
	449, 1085,
	451, 1085,
	453, 1085,
	454, 1085,
	-2, 1084,
	-1, 2151,
	450, 1609,
	-2, 1621,
	-1, 2173,
	450, 1205,
	-2, 1195,
	-1, 2393,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1283,
	-1, 2394,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1287,
	-1, 2400,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1289,
	-1, 2581,
	199, 903,
	285, 903,
	292, 903,
	430, 903,
	-2, 469,
	-1, 2654,
	451, 1578,
	454, 1578,
	-2, 1595,
	-1, 2668,
	274, 997,
	-2, 811,
	-1, 2746,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1291,
	-1, 2753,
	196, 0,
	198, 0,
	246, 0,
	-2, 1310,
	-1, 2816,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1339,
	-1, 2817,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1340,
	-1, 2818,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1341,
	-1, 2822,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1345,
	-1, 2823,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1346,
	-1, 2824,
	14, 0,
	15, 0,
	16, 0,
	431, 0,
	432, 0,
	433, 0,
	-2, 1347,
	-1, 2867,
	450, 1610,
	-2, 1622,
	-1, 2950,
	452, 2038,
	-2, 946,
	-1, 2994,
	196, 0,
	198, 0,
	246, 0,
	-2, 1311,
	-1, 2997,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1314,
	-1, 2998,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1316,
	-1, 3142,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1315,
	-1, 3143,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	168, 0,
	171, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1317,
	-1, 3153,
	196, 0,
	-2, 1348,
	-1, 3249,
	196, 0,
	-2, 1349,
	-1, 3361,
	41, 0,
	168, 0,
	220, 0,
	345, 0,
	428, 0,
	436, 0,
	-2, 1895,
}

const sqlPrivate = 57344

const sqlLast = 70216

var sqlAct = [...]int{

	882, 3183, 3360, 3370, 2655, 3444, 3206, 3434, 3333, 2980,
	3186, 2299, 3096, 3317, 2095, 3330, 3372, 3371, 3209, 2784,
	2300, 3253, 3172, 3057, 2308, 998, 1841, 3359, 3111, 2137,
	811, 1922, 2941, 1151, 2685, 2936, 3214, 1033, 2888, 208,
	3133, 208, 208, 1982, 32, 208, 208, 208, 208, 208,
	1606, 839, 208, 2421, 1401, 2946, 802, 2677, 2138, 2679,
	576, 1593, 2652, 2889, 2202, 2273, 2419, 2598, 1286, 3157,
	2386, 555, 1052, 2340, 2296, 2556, 2276, 1576, 208, 2542,
	1144, 1574, 576, 990, 2529, 2502, 1290, 672, 2350, 1802,
	3029, 2339, 2333, 2518, 1548, 2309, 2979, 2331, 1791, 1792,
	854, 1484, 1728, 1357, 2257, 2204, 810, 139, 2134, 2139,
	2839, 1915, 3254, 1919, 2501, 1512, 1995, 1719, 2382, 86,
	2349, 2013, 1799, 1163, 878, 3207, 1752, 1494, 4, 1746,
	1040, 1707, 1705, 1160, 1388, 1549, 2113, 1979, 2025, 2092,
	2274, 2235, 1584, 2561, 2141, 799, 1820, 2653, 1153, 1273,
	1299, 1283, 2302, 1788, 2033, 1219, 1607, 2343, 577, 202,
	2194, 523, 1029, 1507, 982, 201, 578, 985, 2121, 2007,
	2103, 208, 208, 964, 1558, 1475, 2060, 146, 2234, 1996,
	1400, 1402, 539, 139, 147, 507, 1787, 572, 549, 1808,
	531, 1249, 1297, 648, 1173, 1718, 617, 838, 526, 987,
	37, 801, 200, 36, 34, 667, 26, 24, 534, 22,
	716, 1387, 731, 962, 1406, 1231, 2417, 2856, 1822, 581,
	2857, 1842, 2474, 2475, 1575, 584, 2301, 2305, 3472, 881,
	1037, 2112, 3463, 806, 3462, 2112, 1822, 2112, 2112, 3443,
	3430, 581, 1759, 3071, 2252, 3428, 2741, 584, 3071, 1414,
	1415, 2695, 3392, 806, 1834, 2112, 1414, 1415, 2579, 1822,
	3390, 2694, 3387, 2112, 2221, 3388, 2436, 3384, 807, 682,
	3385, 2437, 904, 2105, 2010, 1417, 1293, 3381, 3357, 996,
	1759, 1759, 1417, 2489, 3356, 3355, 3352, 1759, 1834, 1834,
	3351, 3312, 3302, 1834, 2166, 3071, 3301, 3295, 3289, 3071,
	1759, 3071, 1416, 1755, 3287, 3251, 668, 3071, 2166, 1416,
	1436, 3235, 968, 969, 1759, 965, 965, 787, 3313, 3232,
	3200, 979, 3071, 1759, 786, 3199, 3192, 3191, 1759, 1759,
	3071, 58, 3163, 670, 1011, 1759, 3144, 2078, 2011, 2166,
	3237, 3123, 3093, 59, 2707, 2112, 3087, 3070, 2996, 2112,
	3071, 2166, 1037, 1834, 2842, 2480, 794, 63, 176, 2958,
	2952, 2862, 2723, 2723, 2863, 2852, 2845, 2777, 2853, 2112,
	1759, 2104, 1439, 1440, 1441, 1442, 2842, 2722, 176, 2162,
	2723, 2714, 1422, 2515, 2715, 966, 2112, 69, 2513, 1422,
	2512, 2112, 2466, 2112, 2449, 2112, 178, 2450, 1016, 2438,
	2474, 2475, 2112, 2492, 2493, 2494, 1012, 3088, 993, 2012,
	2009, 1759, 1759, 1444, 1445, 1446, 178, 75, 2329, 2992,
	2179, 1838, 2715, 2112, 176, 2112, 85, 1414, 1415, 2165,
	76, 2159, 2166, 2249, 2112, 2153, 837, 2193, 1759, 2490,
	177, 2474, 2475, 2111, 1837, 2420, 2112, 1838, 1678, 2707,
	170, 2283, 2385, 1417, 176, 1758, 2191, 1544, 171, 1172,
	177, 2489, 178, 1359, 1485, 2696, 1437, 2132, 2131, 2130,
	170, 2129, 2128, 1823, 77, 176, 970, 967, 171, 148,
	1416, 793, 2474, 2475, 2697, 2492, 2493, 2494, 1436, 792,
	791, 1823, 178, 790, 2367, 3240, 789, 785, 784, 148,
	783, 2991, 3046, 2014, 782, 781, 177, 780, 779, 778,
	2474, 2475, 208, 178, 1823, 777, 170, 1698, 776, 775,
	774, 208, 714, 713, 171, 712, 711, 710, 709, 708,
	707, 2491, 706, 2480, 2990, 705, 177, 704, 703, 702,
	1443, 701, 208, 2489, 700, 148, 170, 699, 3008, 208,
	1439, 1440, 1441, 1442, 171, 2860, 2694, 177, 1438, 1182,
	1422, 698, 2724, 1012, 697, 208, 1055, 208, 208, 1156,
	208, 1055, 208, 696, 2480, 2304, 695, 3377, 2104, 78,
	208, 208, 76, 694, 1039, 2495, 693, 692, 1044, 691,
	690, 1444, 1445, 1446, 689, 1053, 148, 681, 680, 2559,
	1164, 2008, 639, 638, 597, 208, 596, 595, 1009, 809,
	587, 145, 81, 586, 82, 2480, 585, 2490, 1830, 208,
	562, 1156, 1156, 208, 208, 2171, 208, 561, 2051, 560,
	559, 1194, 543, 176, 1188, 1181, 1821, 1186, 208, 1192,
	1166, 198, 1176, 2480, 1437, 671, 208, 197, 116, 2485,
	2483, 2484, 2476, 2477, 2478, 2479, 2481, 2482, 2490, 1895,
	208, 208, 208, 208, 208, 1156, 1156, 2495, 2474, 2475,
	1156, 178, 208, 1156, 208, 208, 1427, 1425, 1426, 1418,
	1419, 1420, 1421, 1423, 1424, 1027, 1418, 1419, 1420, 1421,
	1423, 1424, 196, 195, 194, 117, 193, 192, 1485, 2490,
	191, 190, 2443, 1012, 189, 188, 187, 149, 186, 2491,
	185, 184, 183, 182, 181, 177, 1414, 1415, 1443, 180,
	179, 1156, 2432, 1310, 2261, 170, 2289, 2490, 1515, 1048,
	1313, 1141, 1146, 171, 1514, 2154, 1438, 1024, 1175, 581,
	208, 1515, 1417, 1577, 2145, 584, 1174, 1514, 2049, 1844,
	2491, 2047, 1294, 2045, 669, 1518, 208, 2043, 1703, 1236,
	1591, 1414, 1415, 1501, 1178, 1413, 3238, 1046, 1513, 1416,
	1147, 208, 1000, 3358, 1170, 1496, 3283, 139, 3244, 3124,
	3050, 880, 3119, 3182, 3028, 176, 3027, 1417, 3015, 807,
	3014, 2491, 3013, 1193, 2474, 2475, 1187, 1287, 3012, 1302,
	116, 2480, 3006, 3005, 3004, 3003, 2923, 2877, 2876, 2874,
	1277, 1280, 2866, 2836, 1416, 1843, 2835, 2834, 1300, 2491,
	2486, 2487, 2488, 178, 2761, 1232, 1232, 2485, 2483, 2484,
	2476, 2477, 2478, 2479, 2481, 2482, 2757, 2718, 2554, 1233,
	1393, 2509, 2500, 1394, 2473, 1149, 2470, 2469, 2467, 1422,
	2456, 2455, 2454, 2451, 1427, 1425, 1426, 1418, 1419, 1420,
	1421, 1423, 1424, 2448, 2426, 1170, 2425, 177, 2485, 2483,
	2484, 2476, 2477, 2478, 2479, 2481, 2482, 170, 2418, 2330,
	1444, 1445, 1446, 2146, 2018, 171, 176, 1413, 1483, 978,
	2474, 2475, 1796, 836, 1422, 1496, 1412, 1225, 1228, 2290,
	3470, 3442, 2486, 2487, 2488, 1497, 148, 1495, 1764, 2485,
	2483, 2484, 2476, 2477, 2478, 2479, 2481, 2482, 3441, 3241,
	1386, 2474, 2475, 1762, 178, 3393, 999, 2480, 1318, 2786,
	3347, 3345, 1392, 1437, 3278, 1332, 176, 3275, 2483, 2484,
	2476, 2477, 2478, 2479, 2481, 2482, 3274, 1399, 3273, 1306,
	1699, 2236, 3269, 1391, 3263, 3236, 3231, 3230, 176, 2381,
	992, 176, 1985, 3178, 208, 3155, 807, 3129, 177, 3128,
	3109, 3106, 3100, 1389, 178, 3045, 3118, 3026, 170, 2972,
	2969, 2904, 2903, 2892, 2891, 2848, 171, 2752, 787, 2708,
	208, 1546, 1555, 2671, 2642, 786, 178, 1325, 2622, 178,
	208, 1055, 208, 208, 208, 2601, 1395, 148, 2600, 2575,
	1156, 576, 208, 208, 2573, 2514, 576, 208, 177, 1409,
	1410, 1600, 208, 2480, 1517, 1438, 1570, 1991, 170, 2447,
	1594, 2446, 2431, 2409, 2270, 1519, 171, 1516, 1673, 1508,
	177, 1505, 2175, 177, 1414, 1415, 2174, 1055, 2149, 2126,
	170, 2110, 2041, 170, 2480, 821, 1479, 148, 171, 2288,
	1846, 171, 1509, 1510, 1590, 1585, 1613, 1552, 1553, 1547,
	1417, 1701, 994, 1603, 1543, 1542, 1704, 2050, 1670, 148,
	1541, 1540, 148, 1565, 1539, 996, 1538, 996, 139, 1537,
	1694, 1536, 1535, 1672, 1533, 1532, 1531, 1416, 2476, 2477,
	2478, 2479, 2481, 2482, 1598, 1530, 807, 2490, 965, 2601,
	1529, 1528, 1527, 1526, 1525, 1524, 1845, 1523, 1522, 1521,
	1498, 1480, 1478, 1473, 1023, 1014, 1006, 3256, 1597, 3105,
	3047, 3000, 2873, 2855, 2851, 1595, 2435, 2127, 2490, 3167,
	2168, 2535, 3049, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 2872, 1676, 1582, 2474, 2475, 1497, 2571, 1689,
	1688, 1675, 1476, 1698, 1695, 1723, 1698, 1586, 1698, 1043,
	581, 3276, 1156, 208, 1713, 581, 584, 1545, 1041, 1055,
	1697, 584, 1573, 1698, 1579, 1572, 1571, 2680, 1569, 1568,
	3239, 1567, 1028, 1420, 1421, 1423, 1424, 2048, 1602, 2491,
	2046, 3122, 2044, 1669, 815, 3089, 2042, 2858, 1760, 2238,
	2625, 1604, 2710, 2709, 993, 3215, 993, 1384, 208, 208,
	1042, 1037, 1577, 1034, 2453, 208, 2478, 2479, 2481, 2482,
	2491, 3181, 2931, 1515, 2010, 208, 1690, 1684, 1528, 1514,
	2452, 1037, 1331, 2391, 208, 2223, 208, 1038, 208, 2902,
	772, 1503, 208, 1528, 2657, 1842, 2656, 1692, 3210, 1358,
	1359, 1793, 1037, 2727, 208, 2637, 1741, 3158, 3445, 2301,
	2788, 2026, 3378, 2173, 3389, 1534, 2441, 1511, 1743, 2884,
	2650, 1745, 1784, 1209, 1749, 1727, 1601, 1638, 773, 3386,
	1708, 2690, 1753, 3294, 1709, 1322, 3327, 2937, 2011, 1780,
	2337, 3417, 3081, 1207, 1156, 208, 1156, 2583, 1797, 1035,
	1772, 629, 1156, 3418, 1197, 208, 1036, 208, 208, 2484,
	2476, 2477, 2478, 2479, 2481, 2482, 766, 1156, 1156, 3379,
	208, 1175, 581, 1482, 1814, 208, 1805, 977, 584, 1174,
	576, 208, 634, 208, 764, 208, 2206, 208, 1639, 208,
	1034, 2476, 2477, 2478, 2479, 2481, 2482, 208, 2180, 3467,
	3205, 208, 1748, 208, 1883, 563, 768, 1757, 762, 2012,
	2009, 1355, 208, 2406, 1208, 1881, 2197, 759, 1693, 1708,
	1710, 3201, 628, 1709, 2917, 2914, 2913, 2195, 2585, 1034,
	1708, 208, 1712, 2881, 1709, 2404, 1812, 208, 1847, 2197,
	1774, 1857, 1773, 750, 2880, 1685, 1356, 2430, 2429, 2428,
	2195, 1043, 2427, 1720, 2395, 2297, 2254, 1055, 2248, 2245,
	635, 1783, 2226, 807, 1825, 2161, 1966, 1827, 1390, 1171,
	1829, 2037, 2036, 2209, 1832, 1807, 1035, 1810, 1924, 1320,
	2728, 1717, 805, 1036, 1315, 1893, 1923, 1714, 1756, 3293,
	1849, 1610, 1300, 1261, 1037, 2572, 1354, 1902, 1242, 569,
	1241, 1853, 1042, 2014, 1721, 1722, 1613, 1613, 1899, 1710,
	805, 2187, 1240, 3139, 1239, 1035, 2225, 1892, 2152, 1424,
	1710, 1712, 1036, 1220, 1043, 1203, 2216, 3349, 1369, 2215,
	1981, 3188, 1712, 1024, 1997, 1998, 1839, 800, 1397, 581,
	2401, 1848, 1055, 3310, 3077, 584, 1811, 1729, 2624, 2183,
	1330, 2402, 1997, 2023, 2407, 804, 2730, 756, 1981, 1218,
	3437, 2185, 1022, 1861, 1860, 1733, 2894, 1869, 627, 2729,
	626, 2027, 1894, 1586, 2364, 1042, 1714, 1989, 1316, 1897,
	1715, 571, 1987, 804, 2014, 208, 1900, 1714, 2059, 2771,
	2063, 2063, 2076, 2186, 1997, 2169, 1217, 2096, 2098, 630,
	2158, 2008, 2102, 1350, 2383, 2384, 2184, 1730, 3375, 2208,
	2619, 1920, 1921, 1896, 1862, 1898, 1055, 208, 3409, 2242,
	2026, 1037, 1840, 1901, 787, 806, 208, 787, 787, 208,
	2482, 1911, 1055, 2688, 1912, 1913, 1699, 1696, 807, 1699,
	2236, 1699, 2236, 1855, 1856, 2150, 2634, 1333, 3417, 2768,
	687, 807, 2687, 806, 1351, 807, 1699, 2236, 3457, 1205,
	1037, 2151, 1822, 2629, 1740, 2022, 3270, 1004, 2160, 1715,
	1723, 1725, 1353, 2582, 1561, 3308, 565, 637, 636, 666,
	1715, 1220, 1383, 2014, 2147, 1734, 3075, 1319, 2687, 745,
	1993, 1715, 2133, 570, 2403, 2613, 2143, 2144, 1506, 2588,
	996, 2584, 3138, 2405, 3309, 2224, 1891, 1564, 2035, 2569,
	1706, 798, 208, 2039, 2040, 3408, 1711, 2020, 1359, 2915,
	2769, 2645, 2285, 2207, 996, 1366, 2120, 1638, 1638, 965,
	3376, 1003, 2905, 567, 2246, 2117, 2612, 1715, 3135, 1321,
	2981, 1562, 2118, 807, 1055, 1735, 1736, 3435, 3149, 208,
	760, 3424, 139, 2071, 1731, 2196, 2615, 208, 2100, 2087,
	803, 1001, 1977, 2108, 2109, 1260, 3338, 208, 760, 519,
	564, 2123, 2124, 2192, 2163, 2119, 3280, 2017, 1472, 2617,
	208, 746, 1732, 1156, 1975, 2445, 770, 1882, 803, 806,
	769, 1582, 761, 514, 2895, 208, 1055, 1202, 1880, 208,
	208, 760, 3076, 2220, 3374, 1711, 992, 568, 992, 2122,
	3189, 1367, 2142, 3104, 2014, 3436, 1711, 1517, 566, 2976,
	1963, 1613, 2198, 2170, 2616, 208, 2869, 208, 3068, 993,
	208, 1017, 2984, 2251, 2258, 1338, 588, 1563, 3373, 3134,
	3416, 3414, 3220, 2178, 2271, 208, 745, 3438, 2263, 1317,
	2265, 3407, 208, 993, 208, 3065, 208, 2397, 1509, 1510,
	2243, 3108, 208, 2255, 1723, 208, 1737, 208, 798, 208,
	2228, 208, 208, 2177, 208, 1156, 1156, 1156, 1396, 1156,
	2181, 1368, 1557, 208, 208, 1980, 208, 208, 2280, 1971,
	1329, 1610, 1610, 2303, 208, 2303, 3066, 1972, 1744, 2675,
	1973, 1988, 1021, 1978, 2256, 1859, 2201, 208, 2370, 208,
	2210, 2212, 2292, 3458, 2352, 2354, 2312, 1823, 994, 688,
	994, 2218, 757, 747, 1786, 2353, 2229, 2258, 1554, 2258,
	1738, 2227, 208, 208, 208, 1015, 208, 3136, 746, 2321,
	1010, 2825, 1488, 506, 2244, 2925, 1493, 1961, 1561, 1405,
	1964, 2351, 3024, 2237, 2239, 2240, 2241, 1175, 581, 208,
	2982, 1724, 2325, 2326, 584, 2259, 1686, 2294, 2362, 2268,
	2363, 2336, 1404, 3452, 3194, 3193, 2562, 3176, 3080, 3260,
	2883, 1564, 1147, 2284, 139, 3079, 2676, 1683, 2596, 2544,
	2373, 2592, 2293, 2275, 2355, 2272, 2356, 1170, 2314, 1960,
	1559, 2375, 1806, 2307, 1795, 1794, 2327, 2323, 2361, 1768,
	1472, 3281, 2767, 3318, 2318, 1562, 2319, 1404, 2320, 1888,
	1679, 2942, 3112, 2322, 2269, 748, 1263, 1300, 2368, 2328,
	1907, 2230, 1002, 2338, 589, 590, 3177, 1560, 3061, 1854,
	2157, 3062, 1638, 1974, 2603, 2602, 515, 2389, 2398, 2850,
	2528, 2527, 1976, 1681, 2531, 1352, 2423, 2424, 208, 2247,
	1403, 2545, 1715, 749, 2156, 2155, 2114, 2282, 912, 1682,
	1234, 2433, 804, 1170, 1170, 3265, 2826, 3097, 3064, 2719,
	747, 3184, 2827, 686, 2378, 2372, 679, 1235, 2380, 1339,
	3067, 1405, 1751, 3025, 2647, 1804, 3421, 3208, 516, 3068,
	2377, 2543, 2369, 3030, 3321, 1403, 1248, 204, 2840, 509,
	510, 1563, 1750, 527, 509, 527, 537, 542, 3451, 2434,
	558, 2547, 592, 591, 1962, 3266, 3065, 3078, 204, 3058,
	1908, 2031, 2116, 3423, 3391, 1170, 517, 2115, 518, 3174,
	1747, 2396, 3056, 3277, 1246, 807, 676, 1055, 3060, 2511,
	204, 2324, 521, 3154, 1381, 2516, 796, 3282, 745, 3185,
	2523, 2524, 3023, 1721, 1722, 2525, 208, 3066, 3322, 2231,
	2232, 3175, 593, 594, 208, 2919, 2522, 2503, 2751, 2371,
	798, 208, 748, 1363, 208, 208, 1055, 2566, 2468, 3267,
	2408, 1361, 3063, 2279, 2253, 1055, 2546, 3059, 2222, 1349,
	2176, 1592, 208, 2440, 2530, 1347, 1610, 2549, 1589, 1345,
	1382, 1311, 2504, 1343, 800, 2552, 797, 208, 2563, 2366,
	749, 1341, 2365, 1879, 2560, 1335, 1244, 3369, 2358, 1890,
	2030, 1866, 2539, 1671, 1520, 208, 208, 208, 1314, 509,
	509, 208, 2550, 2551, 208, 2538, 996, 204, 1224, 2580,
	746, 208, 208, 208, 208, 208, 3315, 2558, 1613, 3054,
	2940, 996, 2586, 2567, 2553, 208, 208, 208, 2537, 2506,
	2507, 2508, 2678, 2557, 208, 2534, 2900, 2540, 2578, 758,
	2517, 684, 685, 2898, 677, 678, 208, 1156, 2520, 208,
	996, 2882, 2674, 2659, 1613, 1055, 2532, 2658, 1247, 2589,
	2590, 1380, 1055, 2533, 2620, 2298, 2621, 208, 2287, 3061,
	208, 208, 3062, 2286, 2593, 2604, 2266, 2607, 1836, 2605,
	208, 2609, 2610, 1156, 208, 2548, 1156, 1156, 1156, 1835,
	1362, 2560, 1833, 208, 2627, 2640, 1245, 2641, 1360, 208,
	2564, 2565, 2660, 2628, 520, 208, 1348, 208, 2664, 3064,
	1831, 1828, 1346, 1826, 208, 2581, 1344, 2410, 2411, 1713,
	1342, 3067, 1824, 2570, 1815, 2587, 2635, 1878, 1340, 2576,
	2577, 1765, 1334, 1243, 1598, 993, 1763, 1156, 1156, 1754,
	1742, 992, 2692, 1739, 1713, 208, 208, 1726, 1716, 208,
	993, 2618, 747, 2683, 2623, 2779, 2682, 2706, 2630, 2597,
	763, 765, 3224, 2643, 974, 992, 1407, 1599, 208, 2351,
	1055, 208, 208, 1055, 208, 1753, 2639, 2228, 2351, 993,
	2725, 1753, 2638, 3418, 2633, 2644, 3341, 2387, 975, 1557,
	208, 3131, 3126, 3125, 1702, 1199, 2197, 2197, 2197, 1164,
	3226, 2214, 1053, 2951, 1723, 3272, 3246, 2195, 2213, 2211,
	1378, 1379, 1863, 1885, 3031, 2233, 2217, 2631, 2497, 2498,
	2499, 2632, 1411, 3063, 807, 2689, 1414, 1415, 1170, 522,
	1414, 1415, 2681, 1055, 2698, 2250, 139, 2219, 2721, 1638,
	3314, 3284, 2736, 2929, 1055, 2735, 208, 2924, 1783, 1408,
	2865, 2691, 795, 994, 748, 1561, 1417, 2306, 2705, 2388,
	2754, 1613, 2776, 2101, 1674, 2700, 2701, 2702, 2717, 2703,
	2704, 976, 1605, 2782, 3433, 1638, 533, 994, 2568, 1416,
	3450, 2474, 2475, 1416, 1414, 1415, 2189, 2188, 1564, 2763,
	2764, 2765, 749, 2732, 3286, 1485, 1324, 2739, 2737, 2034,
	2871, 2789, 1323, 2774, 2733, 2189, 2574, 1559, 2190, 2038,
	1613, 1613, 2032, 2005, 1365, 3001, 2870, 1364, 2766, 1483,
	1481, 3459, 1562, 2636, 3257, 2837, 1613, 1613, 1990, 206,
	3168, 3166, 3099, 3048, 2759, 2975, 2968, 2957, 2935, 208,
	1007, 2922, 2921, 2920, 1560, 2897, 2699, 1488, 2672, 676,
	2770, 2772, 2773, 2670, 208, 2360, 2258, 1613, 2785, 2665,
	1055, 2359, 2667, 2668, 2669, 2778, 2316, 2791, 2291, 2267,
	1018, 2792, 2794, 1992, 2859, 1877, 1170, 558, 1876, 1875,
	208, 1818, 1817, 1816, 1798, 1776, 2802, 2829, 2804, 2867,
	1775, 1771, 1770, 204, 2083, 204, 204, 2854, 1161, 1769,
	204, 1767, 1766, 1610, 1398, 2790, 1377, 1376, 204, 1177,
	1910, 2868, 1336, 2712, 2713, 1920, 2795, 2830, 1563, 1272,
	1271, 139, 1270, 2841, 1269, 208, 1268, 1267, 996, 996,
	1266, 1920, 2805, 1201, 2843, 2844, 1265, 2906, 1264, 1610,
	1262, 2878, 1257, 2838, 1256, 1255, 1254, 1223, 1253, 1216,
	1215, 204, 204, 1214, 1161, 1213, 1212, 2916, 208, 208,
	208, 1211, 2833, 2861, 1210, 1204, 204, 1198, 1196, 1195,
	2846, 2847, 1020, 2918, 1259, 1055, 208, 1019, 949, 825,
	1156, 859, 1638, 1677, 771, 621, 755, 3187, 204, 204,
	204, 204, 1161, 1371, 74, 208, 2910, 1206, 608, 2932,
	558, 68, 204, 204, 2886, 2953, 2896, 3326, 208, 208,
	1156, 1156, 1156, 2944, 208, 208, 208, 743, 2611, 208,
	208, 2948, 1865, 208, 208, 1337, 1867, 2536, 2125, 208,
	2875, 1638, 1638, 3307, 2747, 2748, 2228, 2947, 2943, 2964,
	2928, 3009, 1055, 2079, 2911, 2912, 2444, 1638, 1638, 3252,
	3148, 2029, 1502, 70, 2899, 847, 2901, 993, 993, 2312,
	932, 3055, 2885, 2342, 2341, 2933, 814, 2934, 204, 1058,
	1687, 853, 1700, 2999, 2172, 2062, 1609, 856, 1638, 1611,
	858, 2945, 2949, 2938, 204, 857, 1612, 208, 2351, 2955,
	2954, 1504, 855, 1608, 2281, 2310, 996, 1251, 732, 542,
	2959, 2965, 2966, 2995, 1613, 733, 2960, 2967, 1691, 2971,
	2973, 2986, 2974, 1986, 2806, 2807, 2808, 2809, 2810, 2811,
	2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821,
	2822, 2823, 2824, 2983, 2828, 2978, 2024, 2439, 2520, 1499,
	827, 2970, 849, 2021, 1013, 826, 1610, 2541, 2686, 208,
	2987, 2864, 3117, 1906, 2379, 1903, 624, 2471, 2006, 1055,
	1005, 1055, 1783, 2084, 2077, 2073, 1385, 1474, 2311, 1045,
	830, 1984, 1490, 2413, 2555, 2693, 2167, 1914, 1785, 973,
	972, 208, 208, 208, 971, 3332, 3329, 992, 3022, 1680,
	3043, 2182, 1466, 208, 2661, 1610, 1610, 843, 1169, 208,
	2521, 208, 992, 2720, 208, 208, 208, 1221, 3271, 1465,
	3036, 1610, 1610, 767, 208, 208, 1156, 3262, 1055, 1032,
	1156, 1031, 1030, 2595, 3456, 993, 2893, 175, 172, 174,
	3073, 992, 3035, 3038, 3033, 3034, 3040, 173, 208, 3044,
	2908, 1055, 1610, 996, 1156, 3051, 3052, 2557, 2646, 90,
	35, 996, 17, 3101, 3074, 3039, 3053, 115, 114, 113,
	112, 3072, 111, 3082, 996, 3084, 3085, 3041, 3083, 3098,
	110, 109, 108, 208, 3103, 107, 106, 3114, 105, 104,
	103, 3116, 1055, 102, 101, 3032, 2961, 2962, 2963, 100,
	3090, 99, 509, 3037, 3102, 3091, 98, 3120, 97, 994,
	96, 95, 3113, 94, 93, 92, 3095, 2683, 3127, 1055,
	3121, 1053, 91, 204, 994, 204, 554, 551, 204, 50,
	3115, 49, 89, 88, 16, 1638, 3094, 33, 1177, 14,
	1161, 204, 54, 55, 3130, 2083, 2083, 13, 3146, 204,
	1177, 527, 29, 994, 204, 1177, 3160, 1055, 30, 3110,
	558, 80, 79, 28, 3137, 208, 15, 208, 3140, 1055,
	208, 27, 25, 11, 8, 7, 10, 1566, 208, 3145,
	12, 144, 993, 143, 73, 142, 3146, 3156, 1613, 72,
	993, 141, 140, 825, 71, 1556, 23, 825, 1923, 208,
	3171, 9, 136, 993, 3213, 1139, 2930, 67, 138, 137,
	1139, 208, 64, 3161, 3162, 135, 3212, 134, 65, 208,
	133, 132, 66, 131, 1156, 21, 3164, 1783, 5, 208,
	3204, 53, 6, 3132, 3170, 2726, 83, 84, 3169, 31,
	62, 61, 60, 1613, 20, 3190, 2083, 2083, 2083, 208,
	208, 52, 3216, 19, 3165, 3217, 166, 3222, 3219, 165,
	164, 3229, 163, 159, 158, 162, 160, 161, 157, 208,
	3202, 130, 168, 3211, 167, 208, 3228, 3233, 3234, 155,
	152, 151, 3221, 3223, 154, 208, 2947, 3227, 156, 153,
	3225, 150, 169, 129, 2079, 2079, 57, 128, 127, 1610,
	126, 125, 3092, 124, 3258, 56, 18, 3259, 2, 3268,
	1, 204, 2683, 0, 0, 3245, 3250, 1613, 3243, 0,
	0, 3279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 1156, 3255, 0, 0, 0, 208, 0, 3197,
	3198, 1156, 1156, 0, 0, 813, 0, 1156, 3196, 0,
	208, 0, 208, 3300, 0, 0, 204, 204, 0, 0,
	3285, 3216, 0, 204, 3288, 3291, 3292, 0, 0, 0,
	0, 3311, 3297, 1803, 208, 0, 0, 0, 0, 0,
	208, 208, 204, 1055, 204, 3323, 204, 0, 3304, 0,
	509, 208, 0, 3331, 3334, 2079, 2079, 2079, 0, 0,
	3335, 0, 1819, 3339, 3296, 0, 3342, 0, 3344, 1638,
	3346, 3305, 1923, 3306, 3328, 0, 0, 3336, 0, 992,
	992, 0, 3354, 3353, 208, 0, 3350, 3298, 3299, 0,
	0, 3348, 0, 3303, 0, 3380, 0, 0, 0, 3343,
	0, 3324, 0, 558, 3368, 3367, 0, 3365, 3366, 0,
	0, 0, 1170, 204, 0, 1161, 204, 0, 0, 3394,
	208, 3382, 0, 0, 1638, 0, 0, 3396, 558, 3398,
	3403, 3153, 3395, 204, 3406, 0, 0, 3404, 204, 204,
	208, 204, 0, 204, 3400, 204, 0, 204, 3401, 3402,
	0, 0, 3405, 0, 3397, 1884, 3399, 0, 3413, 1886,
	3415, 1887, 3412, 0, 208, 3331, 3419, 3422, 3334, 3426,
	204, 3420, 0, 3427, 3179, 3429, 0, 0, 0, 0,
	0, 3432, 3431, 0, 2312, 0, 0, 0, 0, 542,
	0, 994, 994, 3440, 0, 558, 3439, 0, 1638, 0,
	0, 0, 0, 0, 0, 3447, 3449, 0, 0, 3446,
	0, 3448, 3453, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2083, 2083, 0, 3425, 3454, 3455, 0, 3460,
	0, 3461, 0, 1610, 0, 0, 0, 3464, 3465, 3466,
	3468, 3469, 0, 0, 0, 0, 0, 992, 0, 3473,
	0, 0, 0, 0, 0, 3471, 0, 0, 0, 0,
	0, 0, 3249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1610, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1139, 0, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083,
	2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083, 2083,
	2083, 0, 2083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 509, 0, 0, 1139, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 994,
	0, 0, 1610, 0, 0, 0, 0, 0, 0, 0,
	0, 2079, 2079, 0, 0, 509, 0, 0, 0, 0,
	0, 0, 204, 0, 509, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 992, 0, 0, 0, 0, 0,
	0, 0, 992, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 813, 0, 992, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1179, 0, 1183, 0, 1189,
	209, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
	2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079, 2079,
	527, 2079, 0, 0, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 1414, 1415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 994, 2205, 0, 1417,
	575, 0, 59, 118, 994, 204, 0, 0, 0, 0,
	0, 1414, 1415, 0, 0, 204, 63, 994, 0, 0,
	0, 0, 575, 1309, 0, 0, 1416, 0, 204, 0,
	1312, 39, 120, 0, 1436, 0, 0, 1417, 0, 0,
	0, 0, 0, 204, 38, 0, 69, 204, 2260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1416, 0, 41, 0, 0, 0,
	0, 42, 0, 204, 0, 1177, 75, 0, 204, 121,
	2750, 0, 0, 0, 40, 85, 0, 0, 0, 76,
	43, 0, 0, 1803, 0, 0, 1439, 1440, 1441, 1442,
	2205, 0, 509, 0, 2315, 0, 1422, 0, 0, 0,
	204, 0, 0, 204, 0, 204, 44, 204, 0, 204,
	204, 0, 1161, 0, 0, 0, 0, 0, 0, 0,
	0, 2334, 676, 77, 2205, 2205, 0, 1444, 1445, 1446,
	0, 0, 204, 0, 1422, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1177, 0, 1177, 0, 0,
	0, 0, 1467, 1468, 1469, 1470, 1471, 0, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 1446, 0, 0,
	204, 204, 204, 0, 204, 0, 0, 0, 0, 0,
	1437, 0, 1487, 0, 0, 0, 0, 0, 1500, 0,
	0, 0, 0, 0, 0, 0, 1139, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2474,
	2475, 0, 2492, 2493, 2494, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2474, 2475, 1443, 2492, 2493, 2494, 0, 48,
	145, 81, 0, 82, 0, 46, 0, 0, 0, 122,
	2489, 2756, 1438, 0, 0, 47, 0, 0, 0, 0,
	0, 1139, 176, 0, 0, 1414, 1415, 0, 0, 0,
	0, 1457, 1458, 1459, 51, 0, 1177, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 1550, 1550, 1550,
	1438, 1417, 0, 2489, 0, 1463, 0, 0, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 2083,
	0, 0, 0, 0, 0, 0, 0, 0, 1416, 0,
	0, 0, 2480, 0, 117, 0, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 1139, 149, 0, 0, 0,
	0, 0, 0, 0, 177, 0, 0, 0, 0, 0,
	0, 1139, 2083, 0, 170, 0, 813, 0, 0, 0,
	0, 0, 171, 0, 204, 2480, 0, 0, 0, 0,
	1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424, 204,
	0, 0, 0, 148, 509, 0, 3, 0, 1439, 1440,
	1441, 1442, 509, 0, 0, 0, 0, 0, 1422, 509,
	0, 0, 509, 509, 0, 0, 2490, 0, 204, 1425,
	1426, 1418, 1419, 1420, 1421, 1423, 1424, 2495, 0, 0,
	1177, 0, 1454, 0, 0, 1464, 0, 0, 0, 1444,
	1445, 1446, 0, 0, 0, 1177, 0, 0, 0, 0,
	2083, 0, 0, 0, 0, 0, 0, 0, 0, 2490,
	0, 0, 0, 2205, 2205, 204, 0, 0, 2079, 2205,
	0, 0, 2599, 1139, 0, 0, 0, 0, 0, 2205,
	2599, 2205, 2599, 2599, 1452, 0, 1056, 0, 0, 1157,
	0, 1056, 1437, 204, 204, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2491, 0,
	0, 2079, 0, 0, 204, 0, 0, 1161, 0, 0,
	0, 1414, 1415, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2649, 0, 0, 2651, 2654,
	0, 1157, 1157, 0, 0, 0, 0, 1417, 204, 0,
	0, 2491, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 1443, 1161, 0, 0,
	0, 0, 0, 2205, 1416, 509, 0, 0, 0, 0,
	0, 0, 2205, 0, 1438, 1157, 1157, 0, 0, 0,
	1157, 0, 0, 1157, 0, 0, 0, 0, 0, 2079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 204, 1803, 0, 0, 1803, 0, 2486,
	2487, 2488, 0, 0, 0, 0, 2485, 2483, 2484, 2476,
	2477, 2478, 2479, 2481, 2482, 0, 2731, 0, 0, 1161,
	204, 1157, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1422, 0, 0, 0, 204, 0,
	0, 0, 2486, 2487, 2488, 0, 0, 0, 0, 2485,
	2483, 2484, 2476, 2477, 2478, 2479, 2481, 2482, 0, 0,
	0, 0, 0, 0, 0, 1444, 1445, 1446, 0, 0,
	0, 0, 1453, 0, 0, 0, 0, 0, 0, 0,
	1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423,
	1424, 0, 0, 0, 2787, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1904,
	0, 1909, 0, 0, 0, 0, 0, 1916, 1437, 0,
	0, 0, 0, 0, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 0,
	1965, 0, 1967, 1968, 1969, 1970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 204, 0, 0,
	0, 0, 1994, 0, 0, 0, 0, 509, 0, 0,
	0, 0, 0, 0, 58, 0, 0, 1487, 0, 0,
	0, 2019, 509, 0, 0, 0, 59, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 0, 0, 0, 0, 1177, 0,
	0, 0, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 0,
	0, 0, 0, 2075, 0, 2086, 2088, 2093, 0, 0,
	69, 0, 0, 0, 0, 0, 1139, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 558, 0, 0, 0, 0, 0, 0,
	75, 0, 0, 0, 0, 63, 0, 0, 0, 85,
	0, 0, 0, 76, 0, 1139, 1414, 1415, 0, 0,
	0, 1056, 0, 0, 1139, 0, 2926, 204, 204, 0,
	1157, 575, 0, 0, 0, 69, 575, 0, 0, 0,
	0, 0, 1417, 0, 204, 0, 0, 0, 825, 0,
	1426, 1418, 1419, 1420, 1421, 1423, 1424, 77, 0, 0,
	0, 825, 0, 2205, 204, 75, 0, 1056, 0, 1416,
	0, 0, 0, 0, 85, 0, 2334, 2334, 76, 913,
	0, 0, 676, 676, 2205, 0, 0, 1803, 1803, 0,
	0, 676, 2205, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 77, 0, 1139, 2474, 2475, 0, 2492, 2493,
	2494, 1139, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 2755, 2164, 0, 0, 0, 1422,
	0, 0, 0, 0, 0, 3010, 0, 0, 0, 0,
	0, 205, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 1446, 0, 0, 0, 2489, 0, 2262, 0,
	2264, 0, 1157, 0, 145, 81, 0, 82, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 176, 1177, 0, 204,
	0, 0, 0, 0, 0, 0, 0, 78, 671, 0,
	0, 116, 204, 1437, 0, 0, 0, 0, 0, 1139,
	0, 0, 1139, 0, 0, 0, 0, 0, 0, 2205,
	2205, 2205, 0, 0, 178, 0, 0, 0, 2480, 145,
	81, 1177, 82, 0, 0, 0, 0, 2205, 0, 2599,
	0, 0, 1177, 1177, 204, 0, 0, 0, 117, 0,
	0, 176, 204, 204, 0, 0, 0, 0, 0, 58,
	149, 0, 0, 671, 0, 0, 116, 0, 177, 0,
	0, 59, 1139, 0, 0, 0, 3107, 0, 170, 0,
	2495, 0, 0, 1139, 0, 63, 171, 0, 0, 178,
	0, 0, 0, 0, 1157, 1438, 1157, 0, 0, 0,
	0, 0, 1157, 0, 0, 0, 0, 148, 0, 0,
	0, 1177, 2490, 117, 0, 69, 0, 1157, 1157, 0,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	575, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	988, 0, 0, 170, 0, 75, 0, 0, 0, 0,
	0, 171, 0, 0, 85, 0, 2393, 2394, 76, 0,
	0, 0, 2400, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 199,
	0, 2414, 2415, 0, 0, 0, 0, 2019, 0, 0,
	0, 0, 0, 2205, 0, 2599, 2422, 0, 3173, 1139,
	0, 0, 77, 0, 2491, 0, 204, 1056, 0, 0,
	0, 0, 0, 0, 0, 0, 1418, 1419, 1420, 1421,
	1423, 1424, 2442, 0, 0, 0, 0, 558, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2457, 0, 2654,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 204, 0,
	0, 0, 0, 0, 0, 2093, 2093, 2093, 0, 0,
	0, 0, 1056, 0, 0, 0, 0, 2787, 0, 0,
	1550, 0, 0, 509, 0, 0, 0, 78, 2526, 0,
	0, 0, 0, 3173, 1139, 2486, 2487, 2488, 0, 0,
	0, 0, 2485, 2483, 2484, 2476, 2477, 2478, 2479, 2481,
	2482, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	81, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 176, 0, 0, 0, 2599, 1056, 0, 0, 0,
	0, 0, 0, 671, 813, 0, 116, 0, 1177, 0,
	1177, 1139, 1056, 0, 0, 0, 0, 813, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	0, 0, 3319, 0, 0, 0, 0, 0, 1177, 204,
	0, 0, 2614, 0, 205, 1060, 205, 205, 1060, 204,
	1060, 205, 0, 117, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	0, 0, 0, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 2787, 170, 0, 0, 0, 0, 0, 0,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 1060, 205, 205, 0, 1414, 1415, 0, 0, 0,
	0, 0, 1303, 0, 0, 0, 0, 205, 2205, 0,
	0, 0, 0, 0, 1056, 0, 0, 2684, 1139, 0,
	1139, 1417, 0, 0, 0, 0, 0, 0, 3173, 205,
	205, 205, 205, 0, 1060, 1060, 0, 0, 0, 1060,
	0, 0, 1060, 205, 205, 0, 0, 0, 1416, 0,
	0, 0, 1177, 1157, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1139, 1414, 1415,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1060, 0, 0, 0, 0, 0, 0, 2738, 0, 0,
	1139, 1916, 2745, 0, 1417, 0, 0, 2742, 2743, 205,
	0, 2746, 0, 0, 0, 2749, 0, 0, 1439, 1440,
	1441, 1442, 0, 0, 2753, 205, 0, 0, 1422, 0,
	0, 1416, 0, 2760, 0, 0, 2526, 0, 0, 1436,
	0, 1139, 0, 0, 0, 1157, 1157, 1157, 0, 1157,
	0, 0, 0, 0, 0, 0, 0, 2780, 0, 1444,
	1445, 1446, 0, 0, 0, 0, 0, 0, 1139, 0,
	0, 0, 0, 0, 0, 0, 2796, 2797, 0, 2798,
	2799, 2800, 0, 0, 2801, 2744, 0, 0, 2803, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1439, 1440, 1441, 1442, 0, 1139, 0, 0, 0,
	0, 1422, 1437, 0, 0, 0, 0, 0, 1139, 2831,
	2832, 0, 0, 0, 0, 1050, 0, 0, 0, 0,
	0, 0, 1168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1444, 1445, 1446, 0, 0, 2849, 0, 825,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 1252, 0,
	0, 2879, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2887, 2890, 0, 0,
	1276, 1276, 1276, 1168, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1307, 1308, 0, 2474, 2475, 2907,
	2492, 2493, 2494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	1060, 0, 205, 205, 0, 0, 0, 0, 0, 1060,
	205, 0, 0, 0, 0, 205, 0, 1438, 0, 0,
	0, 0, 0, 0, 0, 0, 848, 87, 2489, 0,
	1370, 0, 0, 1550, 0, 0, 0, 0, 0, 0,
	0, 0, 2956, 0, 0, 0, 1060, 1056, 0, 0,
	0, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423,
	1424, 0, 1139, 0, 0, 0, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 0, 0, 0,
	2988, 2989, 0, 0, 0, 1056, 2993, 2994, 0, 0,
	2480, 2997, 2998, 87, 0, 0, 0, 879, 3002, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3007, 0, 0,
	0, 0, 1414, 1415, 3011, 1427, 1425, 1426, 1418, 1419,
	1420, 1421, 1423, 1424, 0, 0, 203, 0, 0, 0,
	0, 0, 2495, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 0, 788, 582, 0, 0,
	0, 1060, 205, 0, 0, 808, 0, 0, 1060, 0,
	0, 0, 0, 0, 2490, 1416, 0, 1157, 0, 582,
	0, 0, 0, 1436, 0, 1056, 0, 0, 0, 0,
	0, 0, 1056, 0, 0, 983, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 205, 0,
	0, 0, 0, 1157, 205, 0, 1157, 1157, 1157, 0,
	0, 0, 0, 0, 0, 0, 0, 2890, 0, 2399,
	0, 0, 0, 205, 0, 205, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 1439, 1440, 1441, 1442, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2491, 1157, 1157, 0,
	1587, 0, 0, 0, 0, 0, 995, 0, 0, 0,
	0, 0, 0, 1596, 0, 0, 1444, 1445, 1446, 0,
	0, 0, 0, 1060, 0, 1060, 0, 0, 0, 0,
	1056, 1060, 0, 1056, 205, 2890, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 1060, 0, 0,
	0, 0, 0, 0, 205, 0, 3141, 3142, 3143, 205,
	205, 0, 205, 0, 205, 0, 205, 0, 205, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3151, 3152, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 1056, 0, 0, 3159, 0, 0, 1414,
	1415, 0, 0, 0, 1056, 0, 0, 2486, 2487, 2488,
	0, 0, 0, 0, 2485, 2483, 2484, 2476, 2477, 2478,
	2479, 2481, 2482, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 2890, 0, 0,
	0, 0, 0, 1443, 0, 3195, 0, 0, 0, 0,
	0, 0, 1416, 0, 0, 813, 0, 0, 0, 0,
	1436, 1438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2890, 0, 0, 2890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2890, 2890, 0, 0, 2474, 2475,
	0, 2492, 2493, 2494, 0, 0, 2392, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 1060, 1439, 1440, 1441, 1442, 0, 0, 1778, 0,
	0, 0, 1422, 0, 0, 1790, 0, 0, 0, 0,
	0, 0, 0, 0, 3261, 0, 0, 3264, 0, 0,
	0, 0, 0, 0, 1252, 0, 1809, 0, 1809, 2489,
	0, 0, 0, 1444, 1445, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 1060, 0, 0, 0, 0, 1437, 0, 0, 0,
	0, 0, 0, 0, 0, 1790, 0, 0, 1851, 0,
	0, 2480, 0, 0, 0, 1056, 0, 87, 0, 87,
	1157, 87, 813, 0, 0, 1864, 0, 0, 0, 0,
	0, 1870, 0, 1871, 0, 1872, 0, 1873, 2496, 1874,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1157, 1157, 1157, 0, 3364, 3364, 3364, 0, 0, 0,
	0, 0, 1889, 2495, 0, 0, 0, 0, 0, 0,
	1443, 0, 203, 3383, 203, 203, 0, 0, 0, 203,
	0, 0, 1056, 0, 0, 0, 0, 582, 1438, 0,
	0, 2890, 0, 2890, 0, 2490, 808, 87, 0, 0,
	0, 0, 0, 1060, 0, 87, 0, 3364, 0, 0,
	0, 0, 87, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	203, 203, 0, 0, 0, 0, 0, 883, 0, 205,
	0, 0, 1060, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 1060, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 203, 203,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 3364,
	0, 203, 203, 0, 205, 0, 0, 2491, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 1056, 0, 0, 0, 0, 1427, 1425, 1426, 1418,
	1419, 1420, 1421, 1423, 1424, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 205, 0, 205, 0, 205, 0,
	205, 205, 0, 0, 1060, 1060, 1060, 788, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 205, 0, 1477, 1157, 0, 1056, 0,
	1157, 0, 0, 203, 0, 715, 0, 745, 0, 0,
	0, 0, 0, 1486, 0, 0, 0, 1492, 0, 2148,
	0, 1056, 0, 0, 1157, 0, 0, 0, 0, 722,
	0, 205, 205, 205, 0, 205, 0, 0, 2486, 2487,
	2488, 751, 720, 0, 0, 2485, 2483, 2484, 2476, 2477,
	2478, 2479, 2481, 2482, 0, 0, 0, 0, 205, 0,
	0, 0, 1056, 0, 0, 721, 0, 0, 0, 0,
	723, 0, 0, 0, 752, 0, 0, 0, 0, 0,
	729, 730, 0, 0, 0, 0, 739, 0, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	724, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 1056, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 1578, 0, 1581, 0, 0, 0, 725, 0, 0,
	0, 0, 0, 0, 0, 719, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 726, 727, 0, 0, 1168, 0, 0, 0, 0,
	0, 0, 0, 0, 1157, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 0, 2278, 0, 0, 0, 0,
	1790, 0, 0, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 1580, 0, 995, 0, 0, 203, 0, 0,
	0, 747, 0, 0, 0, 0, 1060, 0, 0, 0,
	203, 1580, 2317, 0, 0, 1276, 0, 1276, 582, 1276,
	0, 1168, 1168, 582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2357, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 1157, 0, 0, 0, 0, 0, 0, 0,
	0, 1157, 1157, 0, 0, 0, 0, 1157, 741, 0,
	0, 0, 2374, 1168, 2376, 0, 0, 0, 735, 0,
	0, 0, 0, 0, 736, 0, 205, 0, 0, 0,
	0, 717, 0, 748, 0, 0, 0, 0, 0, 2390,
	0, 0, 0, 1056, 0, 0, 0, 718, 0, 0,
	0, 0, 0, 0, 205, 205, 205, 737, 0, 0,
	0, 734, 0, 205, 0, 753, 754, 0, 0, 0,
	0, 749, 0, 0, 0, 205, 1060, 0, 0, 738,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	582, 0, 1060, 205, 0, 1060, 1060, 1060, 0, 0,
	742, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1057, 0, 0, 1158, 0, 1057, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 203, 0, 0, 0,
	808, 0, 203, 0, 0, 0, 1060, 1060, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 203, 0, 203, 0, 203, 0, 0, 1158, 1158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 205, 1060, 205, 0, 0, 0, 0, 1414, 1415,
	0, 1447, 1448, 1449, 1457, 1458, 1459, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 1158, 1158, 1417, 0, 0, 1158, 1463, 0,
	1158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 203, 0, 0, 0, 0,
	0, 1416, 1060, 788, 0, 0, 788, 788, 0, 1436,
	0, 0, 203, 1060, 0, 0, 1433, 582, 203, 0,
	203, 0, 203, 0, 203, 0, 203, 0, 1158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 0, 0, 0, 2591, 0, 0,
	0, 1983, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1439, 1440, 1441, 1442, 808, 0, 0, 0, 0,
	0, 1422, 0, 0, 0, 2626, 1168, 2278, 1486, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1454, 0, 0, 1464, 0,
	0, 0, 1444, 1445, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 1460, 0, 1461, 0, 0, 0, 0,
	2662, 0, 1431, 1432, 2666, 0, 0, 0, 0, 0,
	0, 0, 0, 2673, 0, 0, 983, 1452, 0, 0,
	0, 0, 0, 0, 0, 1437, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1581, 0, 0, 1462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 87, 0, 0, 2716, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 205,
	0, 0, 2734, 0, 1168, 0, 0, 995, 0, 1443,
	0, 0, 0, 0, 1060, 205, 0, 0, 0, 1060,
	2740, 0, 0, 0, 0, 0, 0, 1438, 0, 0,
	0, 995, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	1060, 1060, 1455, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1057, 0,
	0, 1060, 0, 0, 0, 87, 0, 1158, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 0,
	87, 0, 87, 0, 0, 1453, 0, 0, 1428, 1429,
	1435, 1434, 1430, 1456, 0, 1427, 1425, 1426, 1418, 1419,
	1420, 1421, 1423, 1424, 0, 0, 0, 0, 3018, 0,
	0, 3017, 0, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 87, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	1060, 0, 203, 0, 87, 0, 582, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 0, 0, 1158,
	0, 0, 0, 205, 205, 1060, 1057, 1060, 0, 1060,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 203, 0, 203, 0, 203, 0, 203, 203,
	1060, 0, 0, 1060, 0, 0, 0, 0, 0, 2927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 2939, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1983, 0, 0, 0, 0, 0, 0, 0, 203,
	203, 203, 0, 203, 0, 0, 0, 0, 1060, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 2977,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1158, 0, 1158, 0, 0, 1060, 0, 0, 1158,
	0, 0, 0, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 0, 0, 1158, 1158, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 0, 0, 0, 205, 205,
	0, 0, 0, 0, 0, 0, 0, 983, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3086, 0, 0, 0,
	0, 0, 0, 0, 2278, 0, 0, 0, 0, 0,
	0, 0, 0, 995, 0, 0, 0, 0, 0, 0,
	205, 1060, 0, 0, 0, 0, 0, 0, 995, 0,
	1060, 1060, 0, 0, 0, 0, 1060, 0, 0, 1057,
	0, 0, 0, 0, 0, 0, 87, 0, 87, 0,
	0, 0, 0, 0, 0, 1414, 1415, 1580, 1447, 1448,
	1449, 1457, 1458, 1459, 0, 0, 0, 0, 0, 0,
	205, 0, 1060, 0, 1450, 0, 0, 87, 0, 87,
	205, 1417, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 1416, 0,
	0, 0, 0, 1057, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 1057,
	0, 808, 203, 203, 203, 0, 0, 0, 0, 0,
	0, 1580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 87, 0, 3180, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1439, 1440,
	1441, 1442, 0, 0, 0, 0, 0, 203, 1422, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 3218,
	203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 1464, 0, 0, 0, 1444,
	1445, 1446, 0, 0, 0, 0, 0, 0, 0, 3242,
	1168, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1460, 1057, 1461, 0, 0, 0, 0, 0, 0, 1431,
	1432, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 203,
	1158, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 1057, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	0, 3290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 0, 983, 983, 0, 0, 0, 0,
	0, 3325, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 3340, 1158, 1158, 1158, 0, 1158, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1414, 1415, 0, 1447, 1448, 1449, 1457,
	1458, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 995, 995, 0, 0, 1417,
	0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1416, 0, 0, 0,
	0, 0, 1453, 0, 1436, 1428, 1429, 1435, 1434, 1430,
	1456, 1433, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423,
	1424, 0, 0, 0, 0, 2462, 0, 0, 2463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1439, 1440, 1441, 1442,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 203, 0, 0,
	1454, 0, 0, 1464, 0, 0, 0, 1444, 1445, 1446,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	1461, 0, 0, 995, 0, 0, 0, 1431, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1451, 0, 0, 0, 0, 0, 983,
	0, 0, 0, 0, 0, 0, 0, 983, 0, 0,
	0, 0, 0, 1057, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1414, 1415, 0, 1447, 1448, 1449,
	1457, 1458, 1459, 0, 0, 0, 0, 1455, 0, 0,
	995, 87, 0, 1450, 0, 0, 87, 0, 995, 0,
	1417, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 1580, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 1158, 0, 0, 1416, 0, 0,
	0, 0, 1057, 0, 0, 1436, 0, 0, 0, 1057,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 0,
	1158, 203, 203, 1158, 1158, 1158, 0, 0, 0, 0,
	1453, 0, 0, 1428, 1429, 1435, 1434, 1430, 1456, 0,
	1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424, 0,
	0, 0, 0, 2015, 0, 0, 2016, 1439, 1440, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 0, 0, 0, 1158, 1158, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 1464, 0, 0, 0, 1444, 1445,
	1446, 0, 0, 0, 0, 0, 0, 1057, 0, 0,
	1057, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 1461, 0, 0, 0, 0, 0, 0, 1431, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 1983,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	1057, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 1057, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 203, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 1415, 1455, 1447,
	1448, 1449, 1457, 1458, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 1463, 1057, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 1416,
	0, 0, 0, 0, 0, 0, 0, 1436, 203, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1453, 0, 0, 1428, 1429, 1435, 1434, 1430, 1456,
	0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424,
	0, 0, 0, 0, 0, 0, 0, 3016, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 1439,
	1440, 1441, 1442, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1057, 0, 0, 0, 0, 1158, 0, 0,
	0, 0, 0, 1454, 0, 0, 1464, 0, 0, 0,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1158, 1158, 1158,
	0, 1460, 0, 1461, 0, 0, 0, 0, 0, 0,
	1431, 1432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 1057,
	1635, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 0, 1647, 1629,
	1636, 1619, 1657, 1656, 0, 0, 1621, 1620, 0, 0,
	0, 0, 0, 0, 1667, 1668, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1658, 1438, 1654, 1653, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1652, 0,
	0, 0, 0, 0, 0, 0, 1057, 0, 1057, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1651, 1649, 1650,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1631, 0, 0, 1158, 0, 1057, 0, 1158, 0, 0,
	0, 1640, 1634, 1642, 1644, 1645, 1646, 1641, 0, 1639,
	0, 0, 0, 0, 0, 0, 0, 0, 1057, 1663,
	1664, 1158, 0, 1453, 0, 0, 1428, 1429, 1435, 1434,
	1430, 1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 0, 0, 0, 0, 0, 0, 0, 2758,
	0, 0, 0, 1623, 0, 0, 0, 0, 0, 1057,
	0, 0, 0, 0, 0, 1655, 0, 0, 0, 1632,
	0, 1633, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1648,
	0, 0, 0, 1616, 1614, 1615, 1618, 1617, 0, 0,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1057, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1624, 1625,
	1627, 1628, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1643, 1626, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1666, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1158, 1622, 0, 1659, 1660, 1661, 1662, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1630, 0, 0, 0, 0, 1637, 1665,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1158,
	0, 0, 0, 0, 0, 0, 0, 0, 1158, 1158,
	0, 0, 0, 0, 1158, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1054, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1057, 213, 214, 215, 216, 217, 1061, 218, 1062, 1063,
	1064, 1065, 460, 1066, 1067, 1068, 1069, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 1070, 226,
	227, 228, 229, 230, 231, 1071, 1072, 232, 465, 466,
	467, 1073, 233, 468, 1074, 1059, 1075, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 1076, 243, 0,
	244, 245, 246, 1077, 934, 247, 248, 1078, 1079, 1081,
	1080, 1082, 1083, 1084, 249, 250, 251, 252, 253, 254,
	469, 470, 1085, 255, 1086, 257, 256, 1087, 258, 1088,
	1089, 259, 260, 261, 1090, 262, 1091, 263, 264, 1092,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 1093, 210, 1094, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 1095, 281, 1096, 1097,
	935, 282, 283, 1098, 284, 475, 1099, 476, 285, 1100,
	286, 287, 288, 289, 477, 478, 479, 337, 937, 290,
	291, 1101, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 1102, 936, 297, 480, 299, 298, 300, 301,
	302, 481, 1103, 482, 1104, 304, 938, 483, 939, 305,
	306, 307, 940, 308, 309, 0, 0, 310, 311, 312,
	313, 1105, 315, 314, 1106, 316, 484, 941, 317, 318,
	942, 1107, 319, 320, 1108, 1109, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 943,
	333, 334, 336, 335, 1110, 212, 944, 1111, 485, 486,
	338, 339, 1112, 340, 341, 342, 1113, 1114, 344, 345,
	346, 1115, 1116, 347, 487, 945, 348, 946, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 1117, 356, 357,
	489, 358, 490, 359, 1118, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 1119, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 1120, 382, 947, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 1121,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	1122, 409, 389, 390, 410, 948, 411, 493, 412, 413,
	1123, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 1124, 425, 426, 424, 1125, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 1126, 495, 496,
	497, 498, 1127, 440, 1128, 434, 435, 499, 436, 500,
	1129, 437, 438, 439, 0, 441, 442, 1130, 1131, 443,
	444, 445, 446, 448, 1132, 449, 1133, 447, 450, 451,
	452, 501, 502, 503, 1134, 454, 453, 504, 1135, 1136,
	1137, 1138, 455, 456, 505, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1054, 0, 0, 0, 0, 0, 0, 0, 2135, 0,
	0, 0, 0, 0, 0, 0, 2136, 213, 214, 215,
	216, 217, 1061, 218, 1062, 1063, 1064, 1065, 460, 1066,
	1067, 1068, 1069, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 1070, 226, 227, 228, 229, 230,
	231, 1071, 1072, 232, 465, 466, 467, 1073, 233, 468,
	1074, 1059, 1075, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1076, 243, 0, 244, 245, 246, 1077,
	934, 247, 248, 1078, 1079, 1081, 1080, 1082, 1083, 1084,
	249, 250, 251, 252, 253, 254, 469, 470, 1085, 255,
	1086, 257, 256, 1087, 258, 1088, 1089, 259, 260, 261,
	1090, 262, 1091, 263, 264, 1092, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 1093, 210, 1094,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 1095, 281, 1096, 1097, 935, 282, 283, 1098,
	284, 475, 1099, 476, 285, 1100, 286, 287, 288, 289,
	477, 478, 479, 337, 937, 290, 291, 1101, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 1102, 936,
	297, 480, 299, 298, 300, 301, 302, 481, 1103, 482,
	1104, 304, 938, 483, 939, 305, 306, 307, 940, 308,
	309, 0, 0, 310, 311, 312, 313, 1105, 315, 314,
	1106, 316, 484, 941, 317, 318, 942, 1107, 319, 320,
	1108, 1109, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 943, 333, 334, 336, 335,
	1110, 212, 944, 1111, 485, 486, 338, 339, 1112, 340,
	341, 342, 1113, 1114, 344, 345, 346, 1115, 1116, 347,
	487, 945, 348, 946, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 1117, 356, 357, 489, 358, 490, 359,
	1118, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 1119, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 1120, 382, 947,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 1121, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 1122, 409, 389, 390,
	410, 948, 411, 493, 412, 413, 1123, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 1124,
	425, 426, 424, 1125, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 1126, 495, 496, 497, 498, 1127, 440,
	1128, 434, 435, 499, 436, 500, 1129, 437, 438, 439,
	0, 441, 442, 1130, 1131, 443, 444, 445, 446, 448,
	1132, 449, 1133, 447, 450, 451, 452, 501, 502, 503,
	1134, 454, 453, 504, 1135, 1136, 1137, 1138, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 0, 1054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3042, 213, 214, 215, 216, 217,
	1061, 218, 1062, 1063, 1064, 1065, 460, 1066, 1067, 1068,
	1069, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 1070, 226, 227, 228, 229, 230, 231, 1071,
	1072, 232, 465, 466, 467, 1073, 233, 468, 1074, 1059,
	1075, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 1076, 243, 0, 244, 245, 246, 1077, 934, 247,
	248, 1078, 1079, 1081, 1080, 1082, 1083, 1084, 249, 250,
	251, 252, 253, 254, 469, 470, 1085, 255, 1086, 257,
	256, 1087, 258, 1088, 1089, 259, 260, 261, 1090, 262,
	1091, 263, 264, 1092, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 1093, 210, 1094, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	1095, 281, 1096, 1097, 935, 282, 283, 1098, 284, 475,
	1099, 476, 285, 1100, 286, 287, 288, 289, 477, 478,
	479, 337, 937, 290, 291, 1101, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 1102, 936, 297, 480,
	299, 298, 300, 301, 302, 481, 1103, 482, 1104, 304,
	938, 483, 939, 305, 306, 307, 940, 308, 309, 0,
	0, 310, 311, 312, 313, 1105, 315, 314, 1106, 316,
	484, 941, 317, 318, 942, 1107, 319, 320, 1108, 1109,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 943, 333, 334, 336, 335, 1110, 212,
	944, 1111, 485, 486, 338, 339, 1112, 340, 341, 342,
	1113, 1114, 344, 345, 346, 1115, 1116, 347, 487, 945,
	348, 946, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 1117, 356, 357, 489, 358, 490, 359, 1118, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	1119, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 1120, 382, 947, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 1121, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 1122, 409, 389, 390, 410, 948,
	411, 493, 412, 413, 1123, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 1124, 425, 426,
	424, 1125, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 1126, 495, 496, 497, 498, 1127, 440, 1128, 434,
	435, 499, 436, 500, 1129, 437, 438, 439, 0, 441,
	442, 1130, 1131, 443, 444, 445, 446, 448, 1132, 449,
	1133, 447, 450, 451, 452, 501, 502, 503, 1134, 454,
	453, 504, 1135, 1136, 1137, 1138, 455, 456, 505, 457,
	458, 459, 1054, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3147, 0, 213,
	214, 215, 216, 217, 1061, 218, 1062, 1063, 1064, 1065,
	460, 1066, 1067, 1068, 1069, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 1070, 226, 227, 228,
	229, 230, 231, 1071, 1072, 232, 465, 466, 467, 1073,
	233, 468, 1074, 1059, 1075, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 1076, 243, 0, 244, 245,
	246, 1077, 934, 247, 248, 1078, 1079, 1081, 1080, 1082,
	1083, 1084, 249, 250, 251, 252, 253, 254, 469, 470,
	1085, 255, 1086, 257, 256, 1087, 258, 1088, 1089, 259,
	260, 261, 1090, 262, 1091, 263, 264, 1092, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 1093,
	210, 1094, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 1095, 281, 1096, 1097, 935, 282,
	283, 1098, 284, 475, 1099, 476, 285, 1100, 286, 287,
	288, 289, 477, 478, 479, 337, 937, 290, 291, 1101,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	1102, 936, 297, 480, 299, 298, 300, 301, 302, 481,
	1103, 482, 1104, 304, 938, 483, 939, 305, 306, 307,
	940, 308, 309, 0, 0, 310, 311, 312, 313, 1105,
	315, 314, 1106, 316, 484, 941, 317, 318, 942, 1107,
	319, 320, 1108, 1109, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 943, 333, 334,
	336, 335, 1110, 212, 944, 1111, 485, 486, 338, 339,
	1112, 340, 341, 342, 1113, 1114, 344, 345, 346, 1115,
	1116, 347, 487, 945, 348, 946, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 1117, 356, 357, 489, 358,
	490, 359, 1118, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 1119, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 1120,
	382, 947, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 1121, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 1122, 409,
	389, 390, 410, 948, 411, 493, 412, 413, 1123, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 1124, 425, 426, 424, 1125, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 1126, 495, 496, 497, 498,
	1127, 440, 1128, 434, 435, 499, 436, 500, 1129, 437,
	438, 439, 0, 441, 442, 1130, 1131, 443, 444, 445,
	446, 448, 1132, 449, 1133, 447, 450, 451, 452, 501,
	502, 503, 1134, 454, 453, 504, 1135, 1136, 1137, 1138,
	455, 456, 505, 457, 458, 459, 1054, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2783, 0, 213, 214, 215, 216, 217, 1061, 218,
	1062, 1063, 1064, 1065, 460, 1066, 1067, 1068, 1069, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	1070, 226, 227, 228, 229, 230, 231, 1071, 1072, 232,
	465, 466, 467, 1073, 233, 468, 1074, 1059, 1075, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 1076,
	243, 0, 244, 245, 246, 1077, 934, 247, 248, 1078,
	1079, 1081, 1080, 1082, 1083, 1084, 249, 250, 251, 252,
	253, 254, 469, 470, 1085, 255, 1086, 257, 256, 1087,
	258, 1088, 1089, 259, 260, 261, 1090, 262, 1091, 263,
	264, 1092, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 1093, 210, 1094, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 1095, 281,
	1096, 1097, 935, 282, 283, 1098, 284, 475, 1099, 476,
	285, 1100, 286, 287, 288, 289, 477, 478, 479, 337,
	937, 290, 291, 1101, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 1102, 936, 297, 480, 299, 298,
	300, 301, 302, 481, 1103, 482, 1104, 304, 938, 483,
	939, 305, 306, 307, 940, 308, 309, 0, 0, 310,
	311, 312, 313, 1105, 315, 314, 1106, 316, 484, 941,
	317, 318, 942, 1107, 319, 320, 1108, 1109, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 943, 333, 334, 336, 335, 1110, 212, 944, 1111,
	485, 486, 338, 339, 1112, 340, 341, 342, 1113, 1114,
	344, 345, 346, 1115, 1116, 347, 487, 945, 348, 946,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 1117,
	356, 357, 489, 358, 490, 359, 1118, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 1119, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 1120, 382, 947, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 1121, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 1122, 409, 389, 390, 410, 948, 411, 493,
	412, 413, 1123, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 1124, 425, 426, 424, 1125,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 1126,
	495, 496, 497, 498, 1127, 440, 1128, 434, 435, 499,
	436, 500, 1129, 437, 438, 439, 0, 441, 442, 1130,
	1131, 443, 444, 445, 446, 448, 1132, 449, 1133, 447,
	450, 451, 452, 501, 502, 503, 1134, 454, 453, 504,
	1135, 1136, 1137, 1138, 455, 456, 505, 457, 458, 459,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2775, 0, 213, 214, 215,
	216, 217, 1061, 218, 1062, 1063, 1064, 1065, 460, 1066,
	1067, 1068, 1069, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 1070, 226, 227, 228, 229, 230,
	231, 1071, 1072, 232, 465, 466, 467, 1073, 233, 468,
	1074, 1059, 1075, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1076, 243, 0, 244, 245, 246, 1077,
	934, 247, 248, 1078, 1079, 1081, 1080, 1082, 1083, 1084,
	249, 250, 251, 252, 253, 254, 469, 470, 1085, 255,
	1086, 257, 256, 1087, 258, 1088, 1089, 259, 260, 261,
	1090, 262, 1091, 263, 264, 1092, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 1093, 210, 1094,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 1095, 281, 1096, 1097, 935, 282, 283, 1098,
	284, 475, 1099, 476, 285, 1100, 286, 287, 288, 289,
	477, 478, 479, 337, 937, 290, 291, 1101, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 1102, 936,
	297, 480, 299, 298, 300, 301, 302, 481, 1103, 482,
	1104, 304, 938, 483, 939, 305, 306, 307, 940, 308,
	309, 0, 0, 310, 311, 312, 313, 1105, 315, 314,
	1106, 316, 484, 941, 317, 318, 942, 1107, 319, 320,
	1108, 1109, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 943, 333, 334, 336, 335,
	1110, 212, 944, 1111, 485, 486, 338, 339, 1112, 340,
	341, 342, 1113, 1114, 344, 345, 346, 1115, 1116, 347,
	487, 945, 348, 946, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 1117, 356, 357, 489, 358, 490, 359,
	1118, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 1119, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 1120, 382, 947,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 1121, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 1122, 409, 389, 390,
	410, 948, 411, 493, 412, 413, 1123, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 1124,
	425, 426, 424, 1125, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 1126, 495, 496, 497, 498, 1127, 440,
	1128, 434, 435, 499, 436, 500, 1129, 437, 438, 439,
	0, 441, 442, 1130, 1131, 443, 444, 445, 446, 448,
	1132, 449, 1133, 447, 450, 451, 452, 501, 502, 503,
	1134, 454, 453, 504, 1135, 1136, 1137, 1138, 455, 456,
	505, 457, 458, 459, 1054, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2648,
	0, 213, 214, 215, 216, 217, 1061, 218, 1062, 1063,
	1064, 1065, 460, 1066, 1067, 1068, 1069, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 1070, 226,
	227, 228, 229, 230, 231, 1071, 1072, 232, 465, 466,
	467, 1073, 233, 468, 1074, 1059, 1075, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 1076, 243, 0,
	244, 245, 246, 1077, 934, 247, 248, 1078, 1079, 1081,
	1080, 1082, 1083, 1084, 249, 250, 251, 252, 253, 254,
	469, 470, 1085, 255, 1086, 257, 256, 1087, 258, 1088,
	1089, 259, 260, 261, 1090, 262, 1091, 263, 264, 1092,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 1093, 210, 1094, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 1095, 281, 1096, 1097,
	935, 282, 283, 1098, 284, 475, 1099, 476, 285, 1100,
	286, 287, 288, 289, 477, 478, 479, 337, 937, 290,
	291, 1101, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 1102, 936, 297, 480, 299, 298, 300, 301,
	302, 481, 1103, 482, 1104, 304, 938, 483, 939, 305,
	306, 307, 940, 308, 309, 0, 0, 310, 311, 312,
	313, 1105, 315, 314, 1106, 316, 484, 941, 317, 318,
	942, 1107, 319, 320, 1108, 1109, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 943,
	333, 334, 336, 335, 1110, 212, 944, 1111, 485, 486,
	338, 339, 1112, 340, 341, 342, 1113, 1114, 344, 345,
	346, 1115, 1116, 347, 487, 945, 348, 946, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 1117, 356, 357,
	489, 358, 490, 359, 1118, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 1119, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 1120, 382, 947, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 1121,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	1122, 409, 389, 390, 410, 948, 411, 493, 412, 413,
	1123, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 1124, 425, 426, 424, 1125, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 1126, 495, 496,
	497, 498, 1127, 440, 1128, 434, 435, 499, 436, 500,
	1129, 437, 438, 439, 0, 441, 442, 1130, 1131, 443,
	444, 445, 446, 448, 1132, 449, 1133, 447, 450, 451,
	452, 501, 502, 503, 1134, 454, 453, 504, 1135, 1136,
	1137, 1138, 455, 456, 505, 457, 458, 459, 1054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2028, 0, 213, 214, 215, 216, 217,
	1061, 218, 1062, 1063, 1064, 1065, 460, 1066, 1067, 1068,
	1069, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 1070, 226, 227, 228, 229, 230, 231, 1071,
	1072, 232, 465, 466, 467, 1073, 233, 468, 1074, 1059,
	1075, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 1076, 243, 0, 244, 245, 246, 1077, 934, 247,
	248, 1078, 1079, 1081, 1080, 1082, 1083, 1084, 249, 250,
	251, 252, 253, 254, 469, 470, 1085, 255, 1086, 257,
	256, 1087, 258, 1088, 1089, 259, 260, 261, 1090, 262,
	1091, 263, 264, 1092, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 1093, 210, 1094, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	1095, 281, 1096, 1097, 935, 282, 283, 1098, 284, 475,
	1099, 476, 285, 1100, 286, 287, 288, 289, 477, 478,
	479, 337, 937, 290, 291, 1101, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 1102, 936, 297, 480,
	299, 298, 300, 301, 302, 481, 1103, 482, 1104, 304,
	938, 483, 939, 305, 306, 307, 940, 308, 309, 0,
	0, 310, 311, 312, 313, 1105, 315, 314, 1106, 316,
	484, 941, 317, 318, 942, 1107, 319, 320, 1108, 1109,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 943, 333, 334, 336, 335, 1110, 212,
	944, 1111, 485, 486, 338, 339, 1112, 340, 341, 342,
	1113, 1114, 344, 345, 346, 1115, 1116, 347, 487, 945,
	348, 946, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 1117, 356, 357, 489, 358, 490, 359, 1118, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	1119, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 1120, 382, 947, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 1121, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 1122, 409, 389, 390, 410, 948,
	411, 493, 412, 413, 1123, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 1124, 425, 426,
	424, 1125, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 1126, 495, 496, 497, 498, 1127, 440, 1128, 434,
	435, 499, 436, 500, 1129, 437, 438, 439, 0, 441,
	442, 1130, 1131, 443, 444, 445, 446, 448, 1132, 449,
	1133, 447, 450, 451, 452, 501, 502, 503, 1134, 454,
	453, 504, 1135, 1136, 1137, 1138, 455, 456, 505, 457,
	458, 459, 1162, 0, 1054, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1761, 0, 0,
	0, 213, 214, 215, 216, 217, 1061, 218, 1062, 1063,
	1064, 1065, 460, 1066, 1067, 1068, 1069, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 1070, 226,
	227, 228, 229, 230, 231, 1071, 1072, 232, 465, 466,
	467, 1073, 233, 468, 1074, 1059, 1075, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 1076, 243, 0,
	244, 245, 246, 1077, 934, 247, 248, 1078, 1079, 1081,
	1080, 1082, 1083, 1084, 249, 250, 251, 252, 253, 254,
	469, 470, 1085, 255, 1086, 257, 256, 1087, 258, 1088,
	1089, 259, 260, 261, 1090, 262, 1091, 263, 264, 1092,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 1093, 210, 1094, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 1095, 281, 1096, 1097,
	935, 282, 283, 1098, 284, 475, 1099, 476, 285, 1100,
	286, 287, 288, 289, 477, 478, 479, 337, 937, 290,
	291, 1101, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 1102, 936, 297, 480, 299, 298, 300, 301,
	302, 481, 1103, 482, 1104, 304, 938, 483, 939, 305,
	306, 307, 940, 308, 309, 0, 0, 310, 311, 312,
	313, 1105, 315, 314, 1106, 316, 484, 941, 317, 318,
	942, 1107, 319, 320, 1108, 1109, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 943,
	333, 334, 336, 335, 1110, 212, 944, 1111, 485, 486,
	338, 339, 1112, 340, 341, 342, 1113, 1114, 344, 345,
	346, 1115, 1116, 347, 487, 945, 348, 946, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 1117, 356, 357,
	489, 358, 490, 359, 1118, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 1119, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 1120, 382, 947, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 1121,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	1122, 409, 389, 390, 410, 948, 411, 493, 412, 413,
	1123, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 1124, 425, 426, 424, 1125, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 1126, 495, 496,
	497, 498, 1127, 440, 1128, 434, 435, 499, 436, 500,
	1129, 437, 438, 439, 0, 441, 442, 1130, 1131, 443,
	444, 445, 446, 448, 1132, 449, 1133, 447, 450, 451,
	452, 501, 502, 503, 1134, 454, 453, 504, 1135, 1136,
	1137, 1138, 455, 456, 505, 457, 458, 459, 1051, 0,
	1054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 1061, 218, 1062, 1063, 1064, 1065, 460, 1066,
	1067, 1068, 1069, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 1070, 226, 227, 228, 229, 230,
	231, 1071, 1072, 232, 465, 466, 467, 1073, 233, 468,
	1074, 1059, 1075, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 1076, 243, 0, 244, 245, 246, 1077,
	934, 247, 248, 1078, 1079, 1081, 1080, 1082, 1083, 1084,
	249, 250, 251, 252, 253, 254, 469, 470, 1085, 255,
	1086, 257, 256, 1087, 258, 1088, 1089, 259, 260, 261,
	1090, 262, 1091, 263, 264, 1092, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 1093, 210, 1094,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 1095, 281, 1096, 1097, 935, 282, 283, 1098,
	284, 475, 1099, 476, 285, 1100, 286, 287, 288, 289,
	477, 478, 479, 337, 937, 290, 291, 1101, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 1102, 936,
	297, 480, 299, 298, 300, 301, 302, 481, 1103, 482,
	1104, 304, 938, 483, 939, 305, 306, 307, 940, 308,
	309, 0, 0, 310, 311, 312, 313, 1105, 315, 314,
	1106, 316, 484, 941, 317, 318, 942, 1107, 319, 320,
	1108, 1109, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 943, 333, 334, 336, 335,
	1110, 212, 944, 1111, 485, 486, 338, 339, 1112, 340,
	341, 342, 1113, 1114, 344, 345, 346, 1115, 1116, 347,
	487, 945, 348, 946, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 1117, 356, 357, 489, 358, 490, 359,
	1118, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 1119, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 1120, 382, 947,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 1121, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 1122, 409, 389, 390,
	410, 948, 411, 493, 412, 413, 1123, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 1124,
	425, 426, 424, 1125, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 1126, 495, 496, 497, 498, 1127, 440,
	1128, 434, 435, 499, 436, 500, 1129, 437, 438, 439,
	0, 441, 442, 1130, 1131, 443, 444, 445, 446, 448,
	1132, 449, 1133, 447, 450, 451, 452, 501, 502, 503,
	1134, 454, 453, 504, 1135, 1136, 1137, 1138, 455, 456,
	505, 457, 458, 459, 1054, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 1061, 218, 1062, 1063,
	1064, 1065, 460, 1066, 1067, 1068, 1069, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 1070, 226,
	227, 228, 229, 230, 231, 1071, 1072, 232, 465, 466,
	467, 1073, 233, 468, 1074, 1059, 1075, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 1076, 243, 0,
	244, 245, 246, 1077, 934, 247, 248, 1078, 1079, 1081,
	1080, 1082, 1083, 1084, 249, 250, 251, 252, 253, 254,
	469, 470, 1085, 255, 1086, 257, 256, 1087, 258, 1088,
	1089, 259, 260, 261, 1090, 262, 1091, 263, 264, 1092,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 1093, 210, 1094, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 1095, 281, 1096, 1097,
	935, 282, 283, 1098, 284, 475, 1099, 476, 285, 1100,
	286, 287, 288, 289, 477, 478, 479, 337, 937, 290,
	291, 1101, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 1102, 936, 297, 480, 299, 298, 300, 301,
	302, 481, 1103, 482, 1104, 304, 938, 483, 939, 305,
	306, 307, 940, 308, 309, 0, 0, 310, 311, 312,
	313, 1105, 315, 314, 1106, 316, 484, 941, 317, 318,
	942, 1107, 319, 320, 1108, 1109, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 943,
	333, 334, 336, 335, 1110, 212, 944, 1111, 485, 486,
	338, 339, 1112, 340, 341, 342, 1113, 1114, 344, 345,
	346, 1115, 1116, 347, 487, 945, 348, 946, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 1117, 356, 357,
	489, 358, 490, 359, 1118, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 1119, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 1120, 382, 947, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 1121,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	1122, 409, 389, 390, 410, 948, 411, 493, 412, 413,
	1123, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 1124, 425, 426, 424, 1125, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 1126, 495, 496,
	497, 498, 1127, 440, 1128, 434, 435, 499, 436, 500,
	1129, 437, 438, 439, 0, 441, 442, 1130, 1131, 443,
	444, 445, 446, 448, 1132, 449, 1133, 447, 450, 451,
	452, 501, 502, 503, 1134, 454, 453, 504, 1135, 1136,
	1137, 1138, 455, 456, 505, 457, 458, 459, 2004, 0,
	876, 833, 834, 835, 831, 832, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 2001, 218, 0, 0, 0, 0, 925, 850,
	0, 0, 0, 219, 220, 221, 222, 461, 891, 870,
	902, 860, 901, 900, 0, 226, 862, 861, 229, 230,
	231, 852, 924, 232, 960, 961, 467, 0, 233, 931,
	0, 914, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	934, 247, 248, 917, 915, 916, 921, 919, 918, 920,
	249, 250, 251, 252, 905, 254, 898, 897, 822, 255,
	0, 257, 256, 0, 258, 2002, 0, 259, 896, 261,
	0, 262, 0, 263, 264, 0, 828, 265, 266, 268,
	271, 267, 272, 273, 274, 951, 952, 841, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 895, 893, 894,
	0, 280, 0, 281, 0, 0, 935, 282, 283, 0,
	284, 958, 0, 851, 285, 0, 286, 287, 288, 289,
	926, 927, 930, 337, 937, 290, 291, 0, 292, 293,
	872, 0, 0, 0, 211, 294, 296, 303, 0, 936,
	297, 884, 875, 886, 888, 889, 890, 885, 0, 877,
	0, 304, 938, 928, 939, 305, 306, 307, 940, 910,
	911, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 959, 941, 317, 318, 942, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 864, 330, 943, 333, 334, 336, 335,
	819, 212, 944, 842, 929, 899, 338, 339, 0, 873,
	341, 874, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 945, 348, 946, 953, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 954, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 892,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 947,
	383, 384, 385, 386, 829, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 865, 866,
	868, 869, 400, 404, 407, 408, 922, 409, 389, 390,
	410, 948, 411, 887, 867, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 933, 418, 419, 420, 955, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 863, 0, 906, 907, 908, 909, 0, 440,
	0, 434, 435, 956, 436, 957, 840, 437, 438, 439,
	0, 441, 442, 0, 823, 443, 444, 445, 446, 448,
	923, 449, 0, 871, 450, 451, 452, 501, 903, 950,
	2000, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 820, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 816, 817, 2003,
	0, 0, 0, 0, 0, 0, 846, 1999, 0, 0,
	809, 844, 876, 833, 834, 835, 831, 832, 845, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	925, 850, 0, 0, 0, 219, 220, 221, 222, 461,
	891, 870, 902, 860, 901, 900, 0, 226, 862, 861,
	229, 230, 231, 852, 924, 232, 960, 961, 467, 0,
	233, 931, 0, 914, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 934, 247, 248, 917, 915, 916, 921, 919,
	918, 920, 249, 250, 251, 252, 905, 254, 898, 897,
	822, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	896, 261, 0, 262, 0, 263, 264, 0, 828, 265,
	266, 268, 271, 267, 272, 273, 274, 951, 952, 841,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 895,
	893, 894, 0, 280, 0, 281, 0, 0, 935, 282,
	283, 0, 284, 958, 0, 851, 285, 0, 286, 287,
	288, 289, 926, 927, 930, 337, 937, 290, 291, 0,
	292, 293, 872, 0, 0, 0, 211, 294, 296, 303,
	0, 936, 297, 884, 875, 886, 888, 889, 890, 885,
	0, 877, 0, 304, 938, 928, 939, 305, 306, 307,
	940, 910, 911, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 959, 941, 317, 318, 942, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 864, 330, 943, 333, 334,
	336, 335, 819, 212, 944, 842, 929, 899, 338, 339,
	0, 873, 341, 874, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 945, 348, 946, 953, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 954, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 892, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 947, 383, 384, 385, 386, 829, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 176, 405, 406,
	865, 866, 868, 869, 400, 404, 407, 408, 922, 409,
	389, 390, 410, 948, 411, 887, 867, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 933, 418, 419, 420,
	955, 0, 425, 426, 424, 178, 427, 428, 429, 430,
	431, 269, 432, 270, 863, 0, 906, 907, 908, 909,
	0, 440, 0, 434, 435, 956, 436, 957, 840, 437,
	438, 439, 0, 441, 442, 0, 823, 443, 444, 445,
	446, 448, 923, 449, 0, 871, 450, 451, 452, 1301,
	903, 950, 0, 454, 453, 504, 0, 0, 0, 170,
	455, 456, 505, 457, 458, 459, 820, 171, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 0, 816,
	817, 876, 833, 834, 835, 831, 832, 845, 1491, 1489,
	0, 0, 0, 844, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 925,
	850, 0, 0, 0, 219, 220, 221, 222, 461, 891,
	870, 902, 860, 901, 900, 0, 226, 862, 861, 229,
	230, 231, 852, 924, 232, 960, 961, 467, 0, 233,
	931, 0, 914, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 934, 247, 248, 917, 915, 916, 921, 919, 918,
	920, 249, 250, 251, 252, 905, 254, 898, 897, 822,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 896,
	261, 0, 262, 0, 263, 264, 0, 828, 265, 266,
	268, 271, 267, 272, 273, 274, 951, 952, 841, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 895, 893,
	894, 0, 280, 0, 281, 0, 0, 935, 282, 283,
	0, 284, 958, 0, 851, 285, 0, 286, 287, 288,
	289, 926, 927, 930, 337, 937, 290, 291, 0, 292,
	293, 872, 0, 0, 0, 211, 294, 296, 303, 0,
	936, 297, 884, 875, 886, 888, 889, 890, 885, 0,
	877, 0, 304, 938, 928, 939, 305, 306, 307, 940,
	910, 911, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 959, 941, 317, 318, 942, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 864, 330, 943, 333, 334, 336,
	335, 819, 212, 944, 842, 929, 899, 338, 339, 0,
	873, 341, 874, 0, 0, 344, 345, 346, 0, 0,
	347, 487, 945, 348, 946, 953, 349, 343, 350, 351,
	352, 353, 354, 355, 0, 356, 357, 954, 358, 490,
	359, 0, 360, 0, 361, 362, 363, 364, 365, 366,
	892, 367, 368, 0, 369, 370, 371, 372, 373, 0,
	375, 376, 377, 374, 378, 379, 380, 381, 0, 382,
	947, 383, 384, 385, 386, 829, 387, 0, 388, 392,
	393, 394, 395, 396, 397, 398, 176, 405, 406, 865,
	866, 868, 869, 400, 404, 407, 408, 922, 409, 389,
	390, 410, 948, 411, 887, 867, 413, 0, 423, 414,
	415, 416, 391, 417, 421, 933, 418, 419, 420, 955,
	0, 425, 426, 424, 178, 427, 428, 429, 430, 431,
	269, 432, 270, 863, 0, 906, 907, 908, 909, 0,
	440, 0, 434, 435, 956, 436, 957, 840, 437, 438,
	439, 0, 441, 442, 0, 823, 443, 444, 445, 446,
	448, 923, 449, 0, 871, 450, 451, 452, 1301, 903,
	950, 0, 454, 453, 504, 0, 0, 0, 170, 455,
	456, 505, 457, 458, 459, 820, 171, 0, 0, 0,
	0, 0, 0, 818, 0, 0, 0, 0, 816, 817,
	876, 833, 834, 835, 831, 832, 845, 1491, 2412, 0,
	0, 0, 844, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 925, 850,
	0, 0, 0, 219, 220, 221, 222, 461, 891, 870,
	902, 860, 901, 900, 0, 226, 862, 861, 229, 230,
	231, 852, 924, 232, 960, 961, 467, 0, 233, 931,
	0, 914, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	934, 247, 248, 917, 915, 916, 921, 919, 918, 920,
	249, 250, 251, 252, 905, 254, 898, 897, 822, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 896, 261,
	0, 262, 0, 263, 264, 0, 828, 265, 266, 268,
	271, 267, 272, 273, 274, 951, 952, 841, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 895, 893, 894,
	0, 280, 0, 281, 0, 0, 935, 282, 283, 0,
	284, 958, 0, 851, 285, 0, 286, 287, 288, 289,
	926, 927, 930, 337, 937, 290, 291, 0, 292, 293,
	872, 0, 0, 0, 211, 294, 296, 303, 0, 936,
	297, 884, 875, 886, 888, 889, 890, 885, 0, 877,
	0, 304, 938, 928, 939, 305, 306, 307, 940, 910,
	911, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 959, 941, 317, 318, 942, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 864, 330, 943, 333, 334, 336, 335,
	819, 212, 944, 842, 929, 899, 338, 339, 0, 873,
	341, 874, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 945, 348, 946, 953, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 954, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 892,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 947,
	383, 384, 385, 386, 829, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 176, 405, 406, 865, 866,
	868, 869, 400, 404, 407, 408, 922, 409, 389, 390,
	410, 948, 411, 887, 867, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 933, 418, 419, 420, 955, 0,
	425, 426, 424, 178, 427, 428, 429, 430, 431, 269,
	432, 270, 863, 0, 906, 907, 908, 909, 0, 440,
	0, 434, 435, 956, 436, 957, 840, 437, 438, 439,
	0, 441, 442, 0, 823, 443, 444, 445, 446, 448,
	923, 449, 0, 871, 450, 451, 452, 1301, 903, 950,
	0, 454, 453, 504, 0, 0, 0, 170, 455, 456,
	505, 457, 458, 459, 820, 171, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 816, 817, 876,
	833, 834, 835, 831, 832, 845, 1491, 1489, 0, 0,
	0, 844, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 925, 850, 0,
	0, 0, 219, 220, 221, 222, 461, 891, 870, 902,
	860, 901, 900, 2089, 226, 862, 861, 229, 230, 231,
	852, 924, 232, 960, 961, 467, 0, 233, 931, 0,
	914, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 934,
	247, 248, 917, 915, 916, 921, 919, 918, 920, 249,
	250, 251, 252, 905, 254, 898, 897, 822, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 896, 261, 0,
	262, 0, 263, 264, 0, 828, 265, 266, 268, 271,
	267, 272, 273, 274, 951, 952, 841, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 895, 893, 894, 0,
	280, 0, 281, 0, 2094, 935, 282, 283, 0, 284,
	958, 0, 851, 285, 0, 286, 287, 288, 289, 926,
	927, 930, 337, 937, 290, 291, 0, 292, 293, 872,
	0, 0, 0, 211, 294, 296, 303, 0, 936, 297,
	884, 875, 886, 888, 889, 890, 885, 0, 877, 0,
	304, 938, 928, 939, 305, 306, 307, 940, 910, 911,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 2090,
	316, 959, 941, 317, 318, 942, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 864, 330, 943, 333, 334, 336, 335, 819,
	212, 944, 842, 929, 899, 338, 339, 0, 873, 341,
	874, 0, 0, 344, 345, 346, 0, 0, 347, 487,
	945, 348, 946, 953, 349, 343, 350, 351, 352, 353,
	354, 355, 0, 356, 357, 954, 358, 490, 359, 0,
	360, 0, 361, 362, 363, 364, 365, 366, 892, 367,
	368, 0, 369, 370, 371, 372, 373, 0, 375, 376,
	377, 374, 378, 379, 380, 381, 0, 382, 947, 383,
	384, 385, 386, 829, 387, 0, 388, 392, 393, 394,
	395, 396, 397, 398, 0, 405, 406, 865, 866, 868,
	869, 400, 404, 407, 408, 922, 409, 389, 390, 410,
	948, 411, 887, 867, 413, 0, 423, 414, 415, 416,
	391, 417, 421, 933, 418, 419, 420, 955, 0, 425,
	426, 424, 0, 427, 428, 429, 430, 431, 269, 432,
	270, 863, 0, 906, 907, 908, 909, 0, 440, 2091,
	434, 435, 956, 436, 957, 840, 437, 438, 439, 0,
	441, 442, 0, 823, 443, 444, 445, 446, 448, 923,
	449, 0, 871, 450, 451, 452, 501, 903, 950, 0,
	454, 453, 504, 0, 0, 0, 0, 455, 456, 505,
	457, 458, 459, 820, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 816, 817, 0, 0,
	0, 0, 0, 0, 0, 846, 0, 0, 0, 812,
	844, 876, 833, 834, 835, 831, 832, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 925,
	850, 0, 0, 0, 219, 220, 221, 222, 461, 891,
	870, 902, 860, 901, 900, 0, 226, 862, 861, 229,
	230, 231, 852, 924, 232, 960, 961, 467, 0, 233,
	931, 0, 914, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 934, 247, 248, 917, 915, 916, 921, 919, 918,
	920, 249, 250, 251, 252, 905, 254, 898, 897, 822,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 896,
	261, 0, 262, 0, 263, 264, 0, 828, 265, 266,
	268, 271, 267, 272, 273, 274, 951, 952, 841, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 895, 893,
	894, 0, 280, 0, 281, 0, 0, 935, 282, 283,
	0, 284, 958, 0, 851, 285, 0, 286, 287, 288,
	289, 926, 927, 930, 337, 937, 290, 291, 0, 292,
	293, 872, 0, 0, 0, 211, 294, 296, 303, 0,
	936, 297, 884, 875, 886, 888, 889, 890, 885, 0,
	877, 0, 304, 938, 928, 939, 305, 306, 307, 940,
	910, 911, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 959, 941, 317, 318, 942, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 864, 330, 943, 333, 334, 336,
	335, 819, 212, 944, 842, 929, 899, 338, 339, 0,
	873, 341, 874, 824, 0, 344, 345, 346, 0, 0,
	347, 487, 945, 348, 946, 953, 349, 343, 350, 351,
	352, 353, 354, 355, 0, 356, 357, 954, 358, 490,
	359, 0, 360, 0, 361, 362, 363, 364, 365, 366,
	892, 367, 368, 0, 369, 370, 371, 372, 373, 0,
	375, 376, 377, 374, 378, 379, 380, 381, 0, 382,
	947, 383, 384, 385, 386, 829, 387, 0, 388, 392,
	393, 394, 395, 396, 397, 398, 0, 405, 406, 865,
	866, 868, 869, 400, 404, 407, 408, 922, 409, 389,
	390, 410, 948, 411, 887, 867, 413, 0, 423, 414,
	415, 416, 391, 417, 421, 933, 418, 419, 420, 955,
	0, 425, 426, 424, 0, 427, 428, 429, 430, 431,
	269, 432, 270, 863, 0, 906, 907, 908, 909, 0,
	440, 0, 434, 435, 956, 436, 957, 840, 437, 438,
	439, 0, 441, 442, 0, 823, 443, 444, 445, 446,
	448, 923, 449, 0, 871, 450, 451, 452, 501, 903,
	950, 0, 454, 453, 504, 0, 0, 0, 0, 455,
	456, 505, 457, 458, 459, 820, 0, 0, 0, 0,
	0, 0, 0, 818, 0, 0, 0, 0, 816, 817,
	876, 833, 834, 835, 831, 832, 845, 846, 0, 0,
	0, 0, 844, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 925, 850,
	0, 0, 0, 219, 220, 221, 222, 461, 891, 870,
	902, 860, 901, 900, 0, 226, 862, 861, 229, 230,
	231, 852, 924, 232, 960, 961, 467, 0, 233, 931,
	0, 914, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 3337, 246, 0,
	934, 247, 248, 917, 915, 916, 921, 919, 918, 920,
	249, 250, 251, 252, 905, 254, 898, 897, 822, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 896, 261,
	0, 262, 0, 263, 264, 0, 828, 265, 266, 268,
	271, 267, 272, 273, 274, 951, 952, 841, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 895, 893, 894,
	0, 280, 0, 281, 0, 0, 935, 282, 283, 0,
	284, 958, 0, 851, 285, 0, 286, 287, 288, 289,
	926, 927, 930, 337, 937, 290, 291, 0, 292, 293,
	872, 0, 0, 0, 211, 294, 296, 303, 0, 936,
	297, 884, 875, 886, 888, 889, 890, 885, 0, 877,
	0, 304, 938, 928, 939, 305, 306, 307, 940, 910,
	911, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 959, 941, 317, 318, 942, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 864, 330, 943, 333, 334, 336, 335,
	819, 212, 944, 842, 929, 899, 338, 339, 0, 873,
	341, 874, 824, 0, 344, 345, 346, 0, 0, 347,
	487, 945, 348, 946, 953, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 954, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 892,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 947,
	383, 384, 385, 386, 829, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 865, 866,
	868, 869, 400, 404, 407, 408, 922, 409, 389, 390,
	410, 948, 411, 887, 867, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 933, 418, 419, 420, 955, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 863, 0, 906, 907, 908, 909, 0, 440,
	0, 434, 435, 956, 436, 957, 840, 437, 438, 439,
	0, 441, 442, 0, 823, 443, 444, 445, 446, 448,
	923, 449, 0, 871, 450, 451, 452, 501, 903, 950,
	0, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 820, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 816, 817, 876,
	833, 834, 835, 831, 832, 845, 846, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 925, 850, 0,
	0, 0, 219, 220, 221, 222, 461, 891, 870, 902,
	860, 901, 900, 0, 226, 862, 861, 229, 230, 231,
	852, 924, 232, 960, 961, 467, 0, 233, 931, 0,
	914, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 3203, 246, 0, 934,
	247, 248, 917, 915, 916, 921, 919, 918, 920, 249,
	250, 251, 252, 905, 254, 898, 897, 822, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 896, 261, 0,
	262, 0, 263, 264, 0, 828, 265, 266, 268, 271,
	267, 272, 273, 274, 951, 952, 841, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 895, 893, 894, 0,
	280, 0, 281, 0, 0, 935, 282, 283, 0, 284,
	958, 0, 851, 285, 0, 286, 287, 288, 289, 926,
	927, 930, 337, 937, 290, 291, 0, 292, 293, 872,
	0, 0, 0, 211, 294, 296, 303, 0, 936, 297,
	884, 875, 886, 888, 889, 890, 885, 0, 877, 0,
	304, 938, 928, 939, 305, 306, 307, 940, 910, 911,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 959, 941, 317, 318, 942, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 864, 330, 943, 333, 334, 336, 335, 819,
	212, 944, 842, 929, 899, 338, 339, 0, 873, 341,
	874, 824, 0, 344, 345, 346, 0, 0, 347, 487,
	945, 348, 946, 953, 349, 343, 350, 351, 352, 353,
	354, 355, 0, 356, 357, 954, 358, 490, 359, 0,
	360, 0, 361, 362, 363, 364, 365, 366, 892, 367,
	368, 0, 369, 370, 371, 372, 373, 0, 375, 376,
	377, 374, 378, 379, 380, 381, 0, 382, 947, 383,
	384, 385, 386, 829, 387, 0, 388, 392, 393, 394,
	395, 396, 397, 398, 0, 405, 406, 865, 866, 868,
	869, 400, 404, 407, 408, 922, 409, 389, 390, 410,
	948, 411, 887, 867, 413, 0, 423, 414, 415, 416,
	391, 417, 421, 933, 418, 419, 420, 955, 0, 425,
	426, 424, 0, 427, 428, 429, 430, 431, 269, 432,
	270, 863, 0, 906, 907, 908, 909, 0, 440, 0,
	434, 435, 956, 436, 957, 840, 437, 438, 439, 0,
	441, 442, 0, 823, 443, 444, 445, 446, 448, 923,
	449, 0, 871, 450, 451, 452, 501, 903, 950, 0,
	454, 453, 504, 0, 0, 0, 0, 455, 456, 505,
	457, 458, 459, 820, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 816, 817, 876, 833,
	834, 835, 831, 832, 845, 846, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 925, 850, 0, 0,
	0, 219, 220, 221, 222, 461, 891, 870, 902, 860,
	901, 900, 0, 226, 862, 861, 229, 230, 231, 852,
	924, 232, 960, 961, 467, 0, 233, 931, 0, 914,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 934, 247,
	248, 917, 915, 916, 921, 919, 918, 920, 249, 250,
	251, 252, 905, 254, 898, 897, 822, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 896, 261, 0, 262,
	0, 263, 264, 0, 828, 265, 266, 268, 271, 267,
	272, 273, 274, 951, 952, 841, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 895, 893, 894, 0, 280,
	0, 281, 0, 0, 935, 282, 283, 0, 284, 958,
	0, 851, 285, 0, 286, 287, 288, 289, 926, 927,
	930, 337, 937, 290, 291, 0, 292, 293, 872, 0,
	0, 0, 211, 294, 296, 303, 0, 936, 297, 884,
	875, 886, 888, 889, 890, 885, 0, 877, 0, 304,
	938, 928, 939, 305, 306, 307, 940, 910, 911, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	959, 941, 317, 318, 942, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 864, 330, 943, 333, 334, 336, 335, 819, 2950,
	944, 842, 929, 899, 338, 339, 0, 873, 341, 874,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 945,
	348, 946, 953, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 954, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 892, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 947, 383, 384,
	385, 386, 829, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 865, 866, 868, 869,
	400, 404, 407, 408, 922, 409, 389, 390, 410, 948,
	411, 887, 867, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 933, 418, 419, 420, 955, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	863, 0, 906, 907, 908, 909, 0, 440, 0, 434,
	435, 956, 436, 957, 840, 437, 438, 439, 0, 441,
	442, 0, 823, 443, 444, 445, 446, 448, 923, 449,
	0, 871, 450, 451, 452, 501, 903, 950, 0, 454,
	453, 504, 0, 0, 0, 0, 455, 456, 505, 457,
	458, 459, 820, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 816, 817, 1551, 0, 0,
	0, 0, 0, 0, 846, 0, 0, 0, 0, 844,
	876, 833, 834, 835, 831, 832, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 925, 850,
	0, 0, 0, 219, 220, 221, 222, 461, 891, 870,
	902, 860, 901, 900, 0, 226, 862, 861, 229, 230,
	231, 852, 924, 232, 960, 961, 467, 0, 233, 931,
	0, 914, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	934, 247, 248, 917, 915, 916, 921, 919, 918, 920,
	249, 250, 251, 252, 905, 254, 898, 897, 822, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 896, 261,
	0, 262, 0, 263, 264, 0, 828, 265, 266, 268,
	271, 267, 272, 273, 274, 951, 952, 841, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 895, 893, 894,
	0, 280, 0, 281, 0, 0, 935, 282, 283, 0,
	284, 958, 0, 851, 285, 0, 286, 287, 288, 289,
	926, 927, 930, 337, 937, 290, 291, 0, 292, 293,
	872, 0, 0, 0, 211, 294, 296, 303, 0, 936,
	297, 884, 875, 886, 888, 889, 890, 885, 0, 877,
	0, 304, 938, 928, 939, 305, 306, 307, 940, 910,
	911, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 959, 941, 317, 318, 942, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 864, 330, 943, 333, 334, 336, 335,
	819, 212, 944, 842, 929, 899, 338, 339, 0, 873,
	341, 874, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 945, 348, 946, 953, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 954, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 892,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 947,
	383, 384, 385, 386, 829, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 865, 866,
	868, 869, 400, 404, 407, 408, 922, 409, 389, 390,
	410, 948, 411, 887, 867, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 933, 418, 419, 420, 955, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 863, 0, 906, 907, 908, 909, 0, 440,
	0, 434, 435, 956, 436, 957, 840, 437, 438, 439,
	0, 441, 442, 0, 823, 443, 444, 445, 446, 448,
	923, 449, 0, 871, 450, 451, 452, 501, 903, 950,
	2762, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 820, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 816, 817, 876,
	833, 834, 835, 831, 832, 845, 846, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 925, 850, 0,
	0, 0, 219, 220, 221, 222, 461, 891, 870, 902,
	860, 901, 900, 0, 226, 862, 861, 229, 230, 231,
	852, 924, 232, 960, 961, 467, 0, 233, 931, 0,
	914, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 934,
	247, 248, 917, 915, 916, 921, 919, 918, 920, 249,
	250, 251, 252, 905, 254, 898, 897, 822, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 896, 261, 0,
	262, 0, 263, 264, 0, 828, 265, 266, 268, 271,
	267, 272, 273, 274, 951, 952, 841, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 895, 893, 894, 0,
	280, 0, 281, 0, 0, 935, 282, 283, 0, 284,
	958, 0, 851, 285, 0, 286, 287, 288, 289, 926,
	927, 930, 337, 937, 290, 291, 0, 292, 293, 872,
	0, 0, 0, 1918, 294, 296, 303, 0, 936, 297,
	884, 875, 886, 888, 889, 890, 885, 0, 877, 0,
	304, 938, 928, 939, 305, 306, 307, 940, 910, 911,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 959, 941, 317, 318, 942, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 864, 330, 943, 333, 334, 336, 335, 819,
	212, 944, 842, 929, 899, 338, 339, 0, 873, 341,
	874, 0, 0, 344, 345, 346, 0, 0, 347, 487,
	945, 348, 946, 953, 349, 343, 350, 351, 352, 353,
	354, 355, 0, 356, 357, 954, 358, 490, 359, 1917,
	360, 0, 361, 362, 363, 364, 365, 366, 892, 367,
	368, 0, 369, 370, 371, 372, 373, 0, 375, 376,
	377, 374, 378, 379, 380, 381, 0, 382, 947, 383,
	384, 385, 386, 829, 387, 0, 388, 392, 393, 394,
	395, 396, 397, 398, 0, 405, 406, 865, 866, 868,
	869, 400, 404, 407, 408, 922, 409, 389, 390, 410,
	948, 411, 887, 867, 413, 0, 423, 414, 415, 416,
	391, 417, 421, 933, 418, 419, 420, 955, 0, 425,
	426, 424, 0, 427, 428, 429, 430, 431, 269, 432,
	270, 863, 0, 906, 907, 908, 909, 0, 440, 0,
	434, 435, 956, 436, 957, 840, 437, 438, 439, 0,
	441, 442, 0, 823, 443, 444, 445, 446, 448, 923,
	449, 0, 871, 450, 451, 452, 501, 903, 950, 0,
	454, 453, 504, 0, 0, 0, 0, 455, 456, 505,
	457, 458, 459, 820, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 816, 817, 876, 833,
	834, 835, 831, 832, 845, 846, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 925, 850, 0, 0,
	0, 219, 220, 221, 222, 461, 891, 870, 902, 860,
	901, 900, 0, 226, 862, 861, 229, 230, 231, 852,
	924, 232, 960, 961, 467, 0, 233, 931, 0, 914,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 934, 247,
	248, 917, 915, 916, 921, 919, 918, 920, 249, 250,
	251, 252, 905, 254, 898, 897, 822, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 896, 261, 0, 262,
	0, 263, 264, 0, 828, 265, 266, 268, 271, 267,
	272, 273, 274, 951, 952, 841, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 895, 893, 894, 0, 280,
	0, 281, 0, 0, 935, 282, 283, 0, 284, 958,
	0, 851, 285, 0, 286, 287, 288, 289, 926, 927,
	930, 337, 937, 290, 291, 0, 292, 293, 872, 0,
	0, 0, 211, 294, 296, 303, 0, 936, 297, 884,
	875, 886, 888, 889, 890, 885, 0, 877, 0, 304,
	938, 928, 939, 305, 306, 307, 940, 910, 911, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	959, 941, 317, 318, 942, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 864, 330, 943, 333, 334, 336, 335, 819, 212,
	944, 842, 929, 899, 338, 339, 0, 873, 341, 874,
	824, 0, 344, 345, 346, 0, 0, 347, 487, 945,
	348, 946, 953, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 954, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 892, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 947, 383, 384,
	385, 386, 829, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 865, 866, 868, 869,
	400, 404, 407, 408, 922, 409, 389, 390, 410, 948,
	411, 887, 867, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 933, 418, 419, 420, 955, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	863, 0, 906, 907, 908, 909, 0, 440, 0, 434,
	435, 956, 436, 957, 840, 437, 438, 439, 0, 441,
	442, 0, 823, 443, 444, 445, 446, 448, 923, 449,
	0, 871, 450, 451, 452, 501, 903, 950, 0, 454,
	453, 504, 0, 0, 0, 0, 455, 456, 505, 457,
	458, 459, 820, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 816, 817, 876, 833, 834,
	835, 831, 832, 845, 846, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 925, 850, 0, 0, 0,
	219, 220, 221, 222, 461, 891, 870, 902, 860, 901,
	900, 0, 226, 862, 861, 229, 230, 231, 852, 924,
	232, 960, 961, 467, 0, 233, 931, 0, 914, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 934, 247, 248,
	917, 915, 916, 921, 919, 918, 920, 249, 250, 251,
	252, 905, 254, 898, 897, 822, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 896, 261, 0, 262, 0,
	263, 264, 0, 828, 265, 266, 268, 271, 267, 272,
	273, 274, 951, 952, 841, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 895, 893, 894, 0, 280, 0,
	281, 0, 0, 935, 282, 283, 0, 284, 958, 0,
	851, 285, 0, 286, 287, 288, 289, 926, 927, 930,
	337, 937, 290, 291, 0, 292, 293, 872, 0, 0,
	0, 211, 294, 296, 303, 0, 936, 297, 884, 875,
	886, 888, 889, 890, 885, 0, 877, 0, 304, 938,
	928, 939, 305, 306, 307, 940, 910, 911, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 959,
	941, 317, 318, 942, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	864, 330, 943, 333, 334, 336, 335, 819, 212, 944,
	842, 929, 899, 338, 339, 0, 873, 341, 874, 0,
	0, 344, 345, 346, 0, 0, 347, 487, 945, 348,
	946, 953, 349, 343, 350, 351, 352, 353, 354, 355,
	0, 356, 357, 954, 358, 490, 359, 0, 360, 0,
	361, 362, 363, 364, 365, 366, 892, 367, 368, 0,
	369, 370, 371, 372, 373, 0, 375, 376, 377, 374,
	378, 379, 380, 381, 0, 382, 947, 383, 384, 385,
	386, 829, 387, 0, 388, 392, 393, 394, 395, 396,
	397, 398, 0, 405, 406, 865, 866, 868, 869, 400,
	404, 407, 408, 922, 409, 389, 390, 410, 948, 411,
	887, 867, 413, 0, 423, 414, 415, 416, 391, 417,
	421, 933, 418, 419, 420, 955, 0, 425, 426, 424,
	0, 427, 428, 429, 430, 431, 269, 432, 270, 863,
	0, 906, 907, 908, 909, 0, 440, 0, 434, 435,
	956, 436, 957, 840, 437, 438, 439, 0, 441, 442,
	0, 823, 443, 444, 445, 446, 448, 923, 449, 0,
	871, 450, 451, 452, 501, 903, 950, 0, 454, 453,
	504, 0, 0, 0, 0, 455, 456, 505, 457, 458,
	459, 820, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 816, 817, 1551, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 0, 0, 844, 876,
	833, 834, 835, 831, 832, 845, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 925, 850, 0,
	0, 0, 219, 220, 221, 222, 461, 891, 870, 902,
	860, 901, 900, 0, 226, 862, 861, 229, 230, 231,
	852, 924, 232, 960, 961, 467, 0, 233, 931, 0,
	914, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 934,
	247, 248, 917, 915, 916, 921, 919, 918, 920, 249,
	250, 251, 252, 905, 254, 898, 897, 822, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 896, 261, 0,
	262, 0, 263, 264, 0, 828, 265, 266, 268, 271,
	267, 272, 273, 274, 951, 952, 841, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 895, 893, 894, 0,
	280, 0, 281, 0, 2094, 935, 282, 283, 0, 284,
	958, 0, 851, 285, 0, 286, 287, 288, 289, 926,
	927, 930, 337, 937, 290, 291, 0, 292, 293, 872,
	0, 0, 0, 211, 294, 296, 303, 0, 936, 297,
	884, 875, 886, 888, 889, 890, 885, 0, 877, 0,
	304, 938, 928, 939, 305, 306, 307, 940, 910, 911,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 959, 941, 317, 318, 942, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 864, 330, 943, 333, 334, 336, 335, 819,
	212, 944, 842, 929, 899, 338, 339, 0, 873, 341,
	874, 0, 0, 344, 345, 346, 0, 0, 347, 487,
	945, 348, 946, 953, 349, 343, 350, 351, 352, 353,
	354, 355, 0, 356, 357, 954, 358, 490, 359, 0,
	360, 0, 361, 362, 363, 364, 365, 366, 892, 367,
	368, 0, 369, 370, 371, 372, 373, 0, 375, 376,
	377, 374, 378, 379, 380, 381, 0, 382, 947, 383,
	384, 385, 386, 829, 387, 0, 388, 392, 393, 394,
	395, 396, 397, 398, 0, 405, 406, 865, 866, 868,
	869, 400, 404, 407, 408, 922, 409, 389, 390, 410,
	948, 411, 887, 867, 413, 0, 423, 414, 415, 416,
	391, 417, 421, 933, 418, 419, 420, 955, 0, 425,
	426, 424, 0, 427, 428, 429, 430, 431, 269, 432,
	270, 863, 0, 906, 907, 908, 909, 0, 440, 0,
	434, 435, 956, 436, 957, 840, 437, 438, 439, 0,
	441, 442, 0, 823, 443, 444, 445, 446, 448, 923,
	449, 0, 871, 450, 451, 452, 501, 903, 950, 0,
	454, 453, 504, 0, 0, 0, 0, 455, 456, 505,
	457, 458, 459, 820, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 816, 817, 876, 833,
	834, 835, 831, 832, 845, 846, 0, 0, 0, 0,
	844, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 925, 850, 0, 0,
	0, 219, 220, 221, 222, 461, 891, 870, 902, 860,
	901, 900, 0, 226, 862, 861, 229, 230, 231, 852,
	924, 232, 960, 961, 467, 0, 233, 931, 0, 914,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 934, 247,
	248, 917, 915, 916, 921, 919, 918, 920, 249, 250,
	251, 252, 905, 254, 898, 897, 822, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 896, 261, 0, 262,
	0, 263, 264, 0, 828, 265, 266, 268, 271, 267,
	272, 273, 274, 951, 952, 841, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 895, 893, 894, 0, 280,
	0, 281, 0, 0, 935, 282, 283, 0, 284, 958,
	0, 851, 285, 0, 286, 287, 288, 289, 926, 927,
	930, 337, 937, 290, 291, 0, 292, 293, 872, 0,
	0, 0, 211, 294, 296, 303, 0, 936, 297, 884,
	875, 886, 888, 889, 890, 885, 0, 877, 0, 304,
	938, 928, 939, 305, 306, 307, 940, 910, 911, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	959, 941, 317, 318, 942, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 864, 330, 943, 333, 334, 336, 335, 819, 212,
	944, 842, 929, 899, 338, 339, 0, 873, 341, 874,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 945,
	348, 946, 953, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 954, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 892, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 947, 383, 384,
	385, 386, 829, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 865, 866, 868, 869,
	400, 404, 407, 408, 922, 409, 389, 390, 410, 948,
	411, 887, 867, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 933, 418, 419, 420, 955, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	863, 0, 906, 907, 908, 909, 0, 440, 0, 434,
	435, 956, 436, 957, 840, 437, 438, 439, 0, 441,
	442, 0, 823, 443, 444, 445, 446, 448, 923, 449,
	0, 871, 450, 451, 452, 501, 903, 950, 0, 454,
	453, 504, 0, 0, 0, 0, 455, 456, 505, 457,
	458, 459, 820, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 816, 817, 0, 0, 0,
	0, 0, 0, 0, 846, 1489, 0, 0, 2099, 844,
	876, 833, 834, 835, 831, 832, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 925, 850,
	0, 0, 0, 219, 220, 221, 222, 461, 891, 870,
	902, 860, 901, 900, 0, 226, 862, 861, 229, 230,
	231, 852, 924, 232, 960, 961, 467, 0, 233, 931,
	0, 914, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	934, 247, 248, 917, 915, 916, 921, 919, 918, 920,
	249, 250, 251, 252, 905, 254, 898, 897, 822, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 896, 261,
	0, 262, 0, 263, 264, 0, 828, 265, 266, 268,
	271, 267, 272, 273, 274, 951, 952, 841, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 895, 893, 894,
	0, 280, 0, 281, 0, 0, 935, 282, 283, 0,
	284, 958, 0, 851, 285, 0, 286, 287, 288, 289,
	926, 927, 930, 337, 937, 290, 291, 0, 292, 293,
	872, 0, 0, 0, 211, 294, 296, 303, 0, 936,
	297, 884, 875, 886, 888, 889, 890, 885, 0, 877,
	0, 304, 938, 928, 939, 305, 306, 307, 940, 910,
	911, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 959, 941, 317, 318, 942, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 864, 330, 943, 333, 334, 336, 335,
	819, 212, 944, 842, 929, 899, 338, 339, 0, 873,
	341, 874, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 945, 348, 946, 953, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 954, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 892,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 947,
	383, 384, 385, 386, 829, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 865, 866,
	868, 869, 400, 404, 407, 408, 922, 409, 389, 390,
	410, 948, 411, 887, 867, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 933, 418, 419, 420, 955, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 863, 0, 906, 907, 908, 909, 0, 440,
	0, 434, 435, 956, 436, 957, 840, 437, 438, 439,
	0, 441, 442, 0, 823, 443, 444, 445, 446, 448,
	923, 449, 0, 871, 450, 451, 452, 501, 903, 950,
	0, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 820, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 816, 817, 0,
	0, 0, 0, 0, 0, 0, 846, 0, 0, 0,
	2097, 844, 876, 833, 834, 835, 831, 832, 845, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	925, 850, 0, 0, 0, 219, 220, 221, 222, 461,
	891, 870, 902, 860, 901, 900, 0, 226, 862, 861,
	229, 230, 231, 852, 924, 232, 960, 961, 467, 0,
	233, 931, 0, 914, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 934, 247, 248, 917, 915, 916, 921, 919,
	918, 920, 249, 250, 251, 252, 905, 254, 898, 897,
	822, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	896, 261, 0, 262, 0, 263, 264, 0, 828, 265,
	266, 268, 271, 267, 272, 273, 274, 951, 952, 841,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 895,
	893, 894, 0, 280, 0, 281, 0, 0, 935, 282,
	283, 0, 284, 958, 0, 851, 285, 0, 286, 287,
	288, 289, 926, 927, 930, 337, 937, 290, 291, 0,
	292, 293, 872, 0, 0, 0, 211, 294, 296, 303,
	0, 936, 297, 884, 875, 886, 888, 889, 890, 885,
	0, 877, 0, 304, 938, 928, 939, 305, 306, 307,
	940, 910, 911, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 959, 941, 317, 318, 942, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 864, 330, 943, 333, 334,
	336, 335, 819, 212, 944, 842, 929, 899, 338, 339,
	0, 873, 341, 874, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 945, 348, 946, 953, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 954, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 892, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 947, 383, 384, 385, 386, 829, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	865, 866, 868, 869, 400, 404, 407, 408, 922, 409,
	389, 390, 410, 948, 411, 887, 867, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 933, 418, 419, 420,
	955, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 863, 0, 906, 907, 908, 909,
	0, 440, 0, 434, 435, 956, 436, 957, 840, 437,
	438, 439, 0, 441, 442, 0, 823, 443, 444, 445,
	446, 448, 923, 449, 0, 871, 450, 451, 452, 501,
	903, 950, 0, 454, 453, 504, 0, 0, 0, 0,
	455, 456, 505, 457, 458, 459, 820, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 0, 0, 816,
	817, 0, 0, 0, 0, 0, 0, 0, 846, 0,
	0, 0, 2085, 844, 876, 833, 834, 835, 831, 832,
	845, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 925, 850, 0, 0, 0, 219, 220, 221,
	222, 461, 891, 870, 902, 860, 901, 900, 0, 226,
	862, 861, 229, 230, 231, 852, 924, 232, 960, 961,
	467, 0, 233, 931, 0, 914, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 934, 247, 248, 917, 915, 916,
	921, 919, 918, 920, 249, 250, 251, 252, 905, 254,
	898, 897, 822, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 896, 261, 0, 262, 0, 263, 264, 0,
	828, 265, 266, 268, 271, 267, 272, 273, 274, 951,
	952, 841, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 895, 893, 894, 0, 280, 0, 281, 0, 0,
	935, 282, 283, 0, 284, 958, 0, 851, 285, 0,
	286, 287, 288, 289, 926, 927, 930, 337, 937, 290,
	291, 0, 292, 293, 872, 0, 0, 0, 211, 294,
	296, 303, 0, 936, 297, 884, 875, 886, 888, 889,
	890, 885, 0, 877, 0, 304, 938, 928, 939, 305,
	306, 307, 940, 910, 911, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 959, 941, 317, 318,
	942, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 864, 330, 943,
	333, 334, 336, 335, 819, 212, 944, 842, 929, 899,
	338, 339, 0, 873, 341, 874, 0, 0, 344, 345,
	346, 0, 0, 347, 487, 945, 348, 946, 953, 349,
	343, 350, 351, 352, 353, 354, 355, 0, 356, 357,
	954, 358, 490, 359, 0, 360, 0, 361, 362, 363,
	364, 365, 366, 892, 367, 368, 0, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 0, 382, 947, 383, 384, 385, 386, 829, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 0,
	405, 406, 865, 866, 868, 869, 400, 404, 407, 408,
	922, 409, 389, 390, 410, 948, 411, 887, 867, 413,
	0, 423, 414, 415, 416, 391, 417, 421, 933, 418,
	419, 420, 955, 0, 425, 426, 424, 0, 427, 428,
	429, 430, 431, 269, 432, 270, 863, 0, 906, 907,
	908, 909, 0, 440, 0, 434, 435, 956, 436, 957,
	840, 437, 438, 439, 0, 441, 442, 0, 823, 443,
	444, 445, 446, 448, 923, 449, 0, 871, 450, 451,
	452, 501, 903, 950, 0, 454, 453, 504, 0, 0,
	0, 0, 455, 456, 505, 457, 458, 459, 820, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 0,
	0, 816, 817, 0, 0, 0, 0, 0, 0, 0,
	846, 0, 0, 0, 2074, 844, 876, 833, 834, 835,
	831, 832, 845, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 925, 850, 0, 0, 0, 219,
	220, 221, 222, 461, 891, 870, 902, 860, 901, 900,
	0, 226, 862, 861, 229, 230, 231, 852, 924, 232,
	960, 961, 467, 0, 233, 931, 0, 914, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 934, 247, 248, 917,
	915, 916, 921, 919, 918, 920, 249, 250, 251, 252,
	905, 254, 898, 897, 822, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 896, 261, 0, 262, 0, 263,
	264, 0, 828, 265, 266, 268, 271, 267, 272, 273,
	274, 951, 952, 841, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 895, 893, 894, 0, 280, 0, 281,
	0, 0, 935, 282, 283, 0, 284, 958, 0, 851,
	285, 0, 286, 287, 288, 289, 926, 927, 930, 337,
	937, 290, 291, 0, 292, 293, 872, 0, 0, 0,
	211, 294, 296, 303, 0, 936, 297, 884, 875, 886,
	888, 889, 890, 885, 0, 877, 0, 304, 938, 928,
	939, 305, 306, 307, 940, 910, 911, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 959, 941,
	317, 318, 942, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 864,
	330, 943, 333, 334, 336, 335, 819, 212, 944, 842,
	929, 899, 338, 339, 0, 873, 341, 874, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 945, 348, 946,
	953, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 954, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 892, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 947, 383, 384, 385, 386,
	829, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 865, 866, 868, 869, 400, 404,
	407, 408, 922, 409, 389, 390, 410, 948, 411, 887,
	867, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	933, 418, 419, 420, 955, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 863, 0,
	906, 907, 908, 909, 0, 440, 0, 434, 435, 956,
	436, 957, 840, 437, 438, 439, 0, 441, 442, 0,
	823, 443, 444, 445, 446, 448, 923, 449, 0, 871,
	450, 451, 452, 501, 903, 950, 0, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	820, 0, 0, 0, 0, 0, 0, 0, 818, 0,
	0, 0, 0, 816, 817, 0, 0, 0, 0, 0,
	0, 0, 846, 0, 0, 0, 2072, 844, 2064, 833,
	834, 835, 831, 832, 845, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 925, 850, 0, 0,
	0, 219, 220, 221, 222, 461, 891, 870, 902, 860,
	901, 900, 0, 226, 862, 861, 229, 230, 231, 852,
	924, 232, 960, 961, 467, 0, 233, 931, 0, 914,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 934, 247,
	248, 917, 915, 916, 921, 919, 918, 920, 249, 250,
	251, 252, 905, 2067, 898, 897, 822, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 896, 261, 0, 262,
	0, 263, 264, 0, 828, 265, 266, 268, 271, 267,
	272, 273, 274, 951, 952, 841, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 895, 893, 894, 0, 280,
	0, 281, 0, 0, 935, 282, 283, 0, 284, 958,
	0, 851, 285, 0, 286, 287, 288, 2068, 926, 927,
	930, 337, 937, 290, 291, 0, 292, 293, 872, 0,
	0, 0, 211, 294, 296, 303, 0, 936, 297, 884,
	875, 886, 888, 889, 890, 885, 0, 877, 0, 304,
	938, 928, 939, 305, 306, 307, 940, 910, 911, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	959, 941, 317, 318, 942, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 2069, 2066,
	331, 864, 330, 943, 333, 334, 336, 335, 819, 212,
	944, 842, 929, 899, 338, 339, 0, 873, 341, 874,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 945,
	348, 946, 953, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 954, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 892, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 947, 383, 384,
	385, 386, 829, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 2070, 0, 405, 406, 865, 866, 868, 869,
	400, 404, 407, 408, 922, 409, 389, 390, 410, 948,
	411, 887, 867, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 933, 418, 419, 420, 955, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	863, 0, 906, 907, 908, 909, 0, 440, 0, 434,
	435, 956, 436, 957, 840, 437, 438, 439, 0, 441,
	442, 0, 823, 443, 444, 445, 446, 448, 923, 449,
	0, 871, 450, 451, 452, 501, 903, 950, 0, 454,
	453, 504, 0, 0, 0, 0, 455, 456, 505, 457,
	2065, 459, 820, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 816, 817, 0, 0, 0,
	0, 0, 0, 0, 846, 0, 0, 0, 2061, 844,
	2064, 833, 834, 835, 831, 832, 845, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 925, 850,
	0, 0, 0, 219, 220, 221, 222, 461, 891, 870,
	902, 860, 901, 900, 0, 226, 862, 861, 229, 230,
	231, 852, 924, 232, 960, 961, 467, 0, 233, 931,
	0, 914, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	934, 247, 248, 917, 915, 916, 921, 919, 918, 920,
	249, 250, 251, 252, 905, 2067, 898, 897, 822, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 896, 261,
	0, 262, 0, 263, 264, 0, 828, 265, 266, 268,
	271, 267, 272, 273, 274, 951, 952, 841, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 895, 893, 894,
	0, 280, 0, 281, 0, 0, 935, 282, 283, 0,
	284, 958, 0, 851, 285, 0, 286, 287, 288, 2068,
	926, 927, 930, 337, 937, 290, 291, 0, 292, 293,
	872, 0, 0, 0, 211, 294, 296, 303, 0, 936,
	297, 884, 875, 886, 888, 889, 890, 885, 0, 877,
	0, 304, 938, 928, 939, 305, 306, 307, 940, 910,
	911, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 959, 941, 317, 318, 942, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	2069, 2066, 331, 864, 330, 943, 333, 334, 336, 335,
	819, 212, 944, 842, 929, 899, 338, 339, 0, 873,
	341, 874, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 945, 348, 946, 953, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 954, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 892,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 947,
	383, 384, 385, 386, 829, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 2070, 0, 405, 406, 865, 866,
	868, 869, 400, 404, 407, 408, 922, 409, 389, 390,
	410, 948, 411, 887, 867, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 933, 418, 419, 420, 955, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 863, 0, 906, 907, 908, 909, 0, 440,
	0, 434, 435, 956, 436, 957, 840, 437, 438, 439,
	0, 441, 442, 0, 823, 443, 444, 445, 446, 448,
	923, 449, 0, 871, 450, 451, 452, 501, 903, 950,
	0, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 2065, 459, 820, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 816, 817, 876,
	833, 834, 835, 831, 832, 845, 846, 0, 0, 0,
	0, 844, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 925, 850, 0,
	0, 0, 219, 220, 221, 222, 461, 891, 870, 902,
	860, 901, 900, 0, 226, 862, 861, 229, 230, 231,
	852, 924, 232, 960, 961, 467, 0, 233, 931, 0,
	914, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 934,
	247, 248, 917, 915, 916, 921, 919, 918, 920, 249,
	250, 251, 252, 905, 254, 898, 897, 822, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 896, 261, 0,
	262, 0, 263, 264, 0, 828, 265, 266, 268, 271,
	267, 272, 273, 274, 951, 952, 841, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 895, 893, 894, 0,
	280, 0, 281, 0, 0, 935, 282, 283, 0, 284,
	958, 0, 851, 285, 0, 286, 287, 288, 289, 926,
	927, 930, 337, 937, 290, 291, 0, 292, 293, 872,
	0, 0, 0, 211, 294, 296, 303, 0, 936, 297,
	884, 875, 886, 888, 889, 890, 885, 0, 877, 0,
	304, 938, 928, 939, 305, 306, 307, 940, 910, 911,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 959, 941, 317, 318, 942, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 864, 330, 943, 333, 334, 336, 335, 819,
	212, 944, 842, 929, 899, 338, 339, 0, 873, 341,
	874, 0, 0, 344, 345, 346, 0, 0, 347, 487,
	945, 348, 946, 953, 349, 343, 350, 351, 352, 353,
	354, 355, 0, 356, 357, 954, 358, 490, 359, 0,
	360, 0, 361, 362, 363, 364, 365, 366, 892, 367,
	368, 0, 369, 370, 371, 372, 373, 0, 375, 376,
	377, 374, 378, 379, 380, 381, 0, 382, 947, 383,
	384, 385, 386, 829, 387, 0, 388, 392, 393, 394,
	395, 396, 397, 398, 0, 405, 406, 865, 866, 868,
	869, 400, 404, 407, 408, 922, 409, 389, 390, 410,
	948, 411, 887, 867, 413, 0, 423, 414, 415, 416,
	391, 417, 421, 933, 418, 419, 420, 955, 0, 425,
	426, 424, 0, 427, 428, 429, 430, 431, 269, 432,
	270, 863, 0, 906, 907, 908, 909, 0, 440, 0,
	434, 435, 956, 436, 957, 840, 437, 438, 439, 0,
	441, 442, 0, 823, 443, 444, 445, 446, 448, 923,
	449, 0, 871, 450, 451, 452, 501, 903, 950, 0,
	454, 453, 504, 0, 0, 0, 0, 455, 456, 505,
	457, 458, 459, 820, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 0, 0, 0, 816, 817, 0, 0,
	0, 0, 0, 1497, 0, 846, 0, 0, 0, 0,
	844, 876, 833, 834, 835, 831, 832, 845, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 1905, 218, 0, 0, 0, 0, 925,
	850, 0, 0, 0, 219, 220, 221, 222, 461, 891,
	870, 902, 860, 901, 900, 0, 226, 862, 861, 229,
	230, 231, 852, 924, 232, 960, 961, 467, 0, 233,
	931, 0, 914, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 934, 247, 248, 917, 915, 916, 921, 919, 918,
	920, 249, 250, 251, 252, 905, 254, 898, 897, 822,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 896,
	261, 0, 262, 0, 263, 264, 0, 828, 265, 266,
	268, 271, 267, 272, 273, 274, 951, 952, 841, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 895, 893,
	894, 0, 280, 0, 281, 0, 0, 935, 282, 283,
	0, 284, 958, 0, 851, 285, 0, 286, 287, 288,
	289, 926, 927, 930, 337, 937, 290, 291, 0, 292,
	293, 872, 0, 0, 0, 211, 294, 296, 303, 0,
	936, 297, 884, 875, 886, 888, 889, 890, 885, 0,
	877, 0, 304, 938, 928, 939, 305, 306, 307, 940,
	910, 911, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 959, 941, 317, 318, 942, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 864, 330, 943, 333, 334, 336,
	335, 819, 212, 944, 842, 929, 899, 338, 339, 0,
	873, 341, 874, 0, 0, 344, 345, 346, 0, 0,
	347, 487, 945, 348, 946, 953, 349, 343, 350, 351,
	352, 353, 354, 355, 0, 356, 357, 954, 358, 490,
	359, 0, 360, 0, 361, 362, 363, 364, 365, 366,
	892, 367, 368, 0, 369, 370, 371, 372, 373, 0,
	375, 376, 377, 374, 378, 379, 380, 381, 0, 382,
	947, 383, 384, 385, 386, 829, 387, 0, 388, 392,
	393, 394, 395, 396, 397, 398, 0, 405, 406, 865,
	866, 868, 869, 400, 404, 407, 408, 922, 409, 389,
	390, 410, 948, 411, 887, 867, 413, 0, 423, 414,
	415, 416, 391, 417, 421, 933, 418, 419, 420, 955,
	0, 425, 426, 424, 0, 427, 428, 429, 430, 431,
	269, 432, 270, 863, 0, 906, 907, 908, 909, 0,
	440, 0, 434, 435, 956, 436, 957, 840, 437, 438,
	439, 0, 441, 442, 0, 823, 443, 444, 445, 446,
	448, 923, 449, 0, 871, 450, 451, 452, 501, 903,
	950, 0, 454, 453, 504, 0, 0, 0, 0, 455,
	456, 505, 457, 458, 459, 820, 0, 0, 0, 0,
	0, 0, 0, 818, 0, 0, 0, 0, 816, 817,
	0, 0, 0, 0, 0, 0, 0, 846, 0, 0,
	0, 1191, 844, 876, 833, 834, 835, 831, 832, 845,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 925, 850, 0, 0, 0, 219, 220, 221, 222,
	461, 891, 870, 902, 860, 901, 900, 0, 226, 862,
	861, 229, 230, 231, 852, 924, 232, 960, 961, 467,
	0, 233, 931, 0, 914, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 934, 247, 248, 917, 915, 916, 921,
	919, 918, 920, 249, 250, 251, 252, 905, 254, 898,
	897, 822, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 896, 261, 0, 262, 0, 263, 264, 0, 828,
	265, 266, 268, 271, 267, 272, 273, 274, 951, 952,
	841, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	895, 893, 894, 0, 280, 0, 281, 0, 0, 935,
	282, 283, 0, 284, 958, 0, 851, 285, 0, 286,
	287, 288, 289, 1190, 927, 930, 337, 937, 290, 291,
	0, 292, 293, 872, 0, 0, 0, 211, 294, 296,
	303, 0, 936, 297, 884, 875, 886, 888, 889, 890,
	885, 0, 877, 0, 304, 938, 928, 939, 305, 306,
	307, 940, 910, 911, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 959, 941, 317, 318, 942,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 864, 330, 943, 333,
	334, 336, 335, 819, 212, 944, 842, 929, 899, 338,
	339, 0, 873, 341, 874, 0, 0, 344, 345, 346,
	0, 0, 347, 487, 945, 348, 946, 953, 349, 343,
	350, 351, 352, 353, 354, 355, 0, 356, 357, 954,
	358, 490, 359, 0, 360, 0, 361, 362, 363, 364,
	365, 366, 892, 367, 368, 0, 369, 370, 371, 372,
	373, 0, 375, 376, 377, 374, 378, 379, 380, 381,
	0, 382, 947, 383, 384, 385, 386, 829, 387, 0,
	388, 392, 393, 394, 395, 396, 397, 398, 0, 405,
	406, 865, 866, 868, 869, 400, 404, 407, 408, 922,
	409, 389, 390, 410, 948, 411, 887, 867, 413, 0,
	423, 414, 415, 416, 391, 417, 421, 933, 418, 419,
	420, 955, 0, 425, 426, 424, 0, 427, 428, 429,
	430, 431, 269, 432, 270, 863, 0, 906, 907, 908,
	909, 0, 440, 0, 434, 435, 956, 436, 957, 840,
	437, 438, 439, 0, 441, 442, 0, 823, 443, 444,
	445, 446, 448, 923, 449, 0, 871, 450, 451, 452,
	501, 903, 950, 0, 454, 453, 504, 0, 0, 0,
	0, 455, 456, 505, 457, 458, 459, 820, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	816, 817, 0, 0, 0, 0, 0, 0, 0, 846,
	0, 0, 0, 1185, 844, 876, 833, 834, 835, 831,
	832, 845, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 925, 850, 0, 0, 0, 219, 220,
	221, 222, 461, 891, 870, 902, 860, 901, 900, 0,
	226, 862, 861, 229, 230, 231, 852, 924, 232, 960,
	961, 467, 0, 233, 931, 0, 914, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 934, 247, 248, 917, 915,
	916, 921, 919, 918, 920, 249, 250, 251, 252, 905,
	254, 898, 897, 822, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 896, 261, 0, 262, 0, 263, 264,
	0, 828, 265, 266, 268, 271, 267, 272, 273, 274,
	951, 952, 841, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 895, 893, 894, 0, 280, 0, 281, 0,
	0, 935, 282, 283, 0, 284, 958, 0, 851, 285,
	0, 286, 287, 288, 289, 1184, 927, 930, 337, 937,
	290, 291, 0, 292, 293, 872, 0, 0, 0, 211,
	294, 296, 303, 0, 936, 297, 884, 875, 886, 888,
	889, 890, 885, 0, 877, 0, 304, 938, 928, 939,
	305, 306, 307, 940, 910, 911, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 959, 941, 317,
	318, 942, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 864, 330,
	943, 333, 334, 336, 335, 819, 212, 944, 842, 929,
	899, 338, 339, 0, 873, 341, 874, 0, 0, 344,
	345, 346, 0, 0, 347, 487, 945, 348, 946, 953,
	349, 343, 350, 351, 352, 353, 354, 355, 0, 356,
	357, 954, 358, 490, 359, 0, 360, 0, 361, 362,
	363, 364, 365, 366, 892, 367, 368, 0, 369, 370,
	371, 372, 373, 0, 375, 376, 377, 374, 378, 379,
	380, 381, 0, 382, 947, 383, 384, 385, 386, 829,
	387, 0, 388, 392, 393, 394, 395, 396, 397, 398,
	0, 405, 406, 865, 866, 868, 869, 400, 404, 407,
	408, 922, 409, 389, 390, 410, 948, 411, 887, 867,
	413, 0, 423, 414, 415, 416, 391, 417, 421, 933,
	418, 419, 420, 955, 0, 425, 426, 424, 0, 427,
	428, 429, 430, 431, 269, 432, 270, 863, 0, 906,
	907, 908, 909, 0, 440, 0, 434, 435, 956, 436,
	957, 840, 437, 438, 439, 0, 441, 442, 0, 823,
	443, 444, 445, 446, 448, 923, 449, 0, 871, 450,
	451, 452, 501, 903, 950, 0, 454, 453, 504, 0,
	0, 0, 0, 455, 456, 505, 457, 458, 459, 820,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 816, 817, 0, 0, 0, 0, 0, 0,
	0, 846, 0, 0, 0, 1180, 844, 876, 833, 834,
	835, 831, 832, 845, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 925, 850, 0, 0, 0,
	219, 220, 221, 222, 461, 891, 870, 902, 860, 901,
	900, 0, 226, 862, 861, 229, 230, 231, 852, 924,
	232, 960, 961, 467, 0, 233, 931, 0, 914, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 934, 247, 248,
	917, 915, 916, 921, 919, 918, 920, 249, 250, 251,
	252, 905, 254, 898, 897, 822, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 896, 261, 0, 262, 0,
	263, 264, 0, 828, 265, 266, 268, 271, 267, 272,
	273, 274, 951, 952, 841, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 895, 893, 894, 0, 280, 0,
	281, 0, 0, 935, 282, 283, 0, 284, 958, 0,
	851, 285, 0, 286, 287, 288, 289, 926, 927, 930,
	337, 937, 290, 291, 0, 292, 293, 872, 0, 0,
	0, 211, 294, 296, 303, 0, 936, 297, 884, 875,
	886, 888, 889, 890, 885, 0, 877, 0, 304, 938,
	928, 939, 305, 306, 307, 940, 910, 911, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 959,
	941, 317, 318, 942, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	864, 330, 943, 333, 334, 336, 335, 819, 212, 944,
	842, 929, 899, 338, 339, 0, 873, 341, 874, 0,
	0, 344, 345, 346, 0, 0, 347, 487, 945, 348,
	946, 953, 349, 343, 350, 351, 352, 353, 354, 355,
	0, 356, 357, 954, 358, 490, 359, 0, 360, 0,
	361, 362, 363, 364, 365, 366, 892, 367, 368, 0,
	369, 370, 371, 372, 373, 0, 375, 376, 377, 374,
	378, 379, 380, 381, 0, 382, 947, 383, 384, 385,
	386, 829, 387, 0, 388, 392, 393, 394, 395, 396,
	397, 398, 0, 405, 406, 865, 866, 868, 869, 400,
	404, 407, 408, 922, 409, 389, 390, 410, 948, 411,
	887, 867, 413, 0, 423, 414, 415, 416, 391, 417,
	421, 933, 418, 419, 420, 955, 0, 425, 426, 424,
	0, 427, 428, 429, 430, 431, 269, 432, 270, 863,
	0, 906, 907, 908, 909, 0, 440, 0, 434, 435,
	956, 436, 957, 840, 437, 438, 439, 0, 441, 442,
	0, 823, 443, 444, 445, 446, 448, 923, 449, 0,
	871, 450, 451, 452, 501, 903, 950, 0, 454, 453,
	504, 0, 0, 0, 0, 455, 456, 505, 457, 458,
	459, 820, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 816, 817, 876, 833, 834, 835,
	831, 832, 845, 846, 0, 0, 0, 0, 844, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 925, 850, 0, 0, 0, 219,
	220, 221, 222, 461, 891, 870, 902, 860, 901, 900,
	0, 226, 862, 861, 229, 230, 231, 852, 924, 232,
	960, 961, 467, 0, 233, 931, 0, 914, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 934, 247, 248, 917,
	915, 916, 921, 919, 918, 920, 249, 250, 251, 252,
	905, 254, 898, 897, 822, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 896, 261, 0, 262, 0, 263,
	264, 0, 828, 265, 266, 268, 271, 267, 272, 273,
	274, 951, 952, 841, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 895, 893, 894, 0, 280, 0, 281,
	0, 0, 935, 282, 283, 0, 284, 958, 0, 851,
	285, 0, 286, 287, 288, 289, 926, 927, 930, 337,
	937, 290, 291, 0, 292, 293, 872, 0, 0, 0,
	211, 294, 296, 303, 0, 936, 297, 884, 875, 886,
	888, 889, 890, 885, 0, 877, 0, 304, 938, 928,
	939, 305, 306, 307, 940, 910, 911, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 959, 941,
	317, 318, 942, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 864,
	330, 943, 333, 334, 336, 335, 819, 212, 944, 842,
	929, 899, 338, 339, 0, 873, 341, 874, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 945, 348, 946,
	953, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 954, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 892, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 947, 383, 384, 385, 386,
	829, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 865, 866, 868, 869, 400, 404,
	407, 408, 922, 409, 389, 390, 410, 948, 411, 887,
	867, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	933, 418, 419, 420, 955, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 863, 0,
	906, 907, 908, 909, 0, 440, 0, 434, 435, 956,
	436, 957, 840, 437, 438, 439, 0, 441, 442, 0,
	823, 443, 444, 445, 446, 448, 923, 449, 0, 871,
	450, 451, 452, 501, 903, 950, 0, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	820, 0, 0, 0, 0, 0, 0, 0, 818, 0,
	0, 0, 0, 816, 817, 876, 833, 834, 835, 831,
	832, 845, 846, 0, 0, 0, 0, 844, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 925, 850, 0, 0, 0, 219, 220,
	221, 222, 461, 891, 870, 902, 860, 901, 900, 0,
	226, 862, 861, 229, 230, 231, 852, 924, 232, 960,
	961, 467, 0, 233, 931, 0, 914, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 934, 247, 3363, 917, 915,
	916, 921, 919, 918, 920, 249, 250, 251, 252, 905,
	254, 898, 897, 822, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 896, 261, 0, 262, 0, 263, 264,
	0, 828, 265, 266, 268, 271, 267, 272, 273, 274,
	951, 952, 841, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 895, 893, 894, 0, 280, 0, 281, 0,
	0, 935, 282, 283, 0, 284, 958, 0, 851, 285,
	0, 286, 287, 288, 289, 926, 927, 930, 337, 937,
	290, 291, 0, 292, 293, 872, 0, 0, 0, 211,
	294, 296, 303, 0, 936, 297, 884, 875, 886, 888,
	889, 890, 885, 0, 877, 0, 304, 938, 928, 939,
	305, 306, 307, 940, 910, 911, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 959, 941, 317,
	318, 942, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 864, 330,
	943, 333, 334, 336, 335, 819, 212, 944, 842, 929,
	899, 338, 339, 0, 873, 341, 874, 0, 0, 344,
	345, 346, 0, 0, 347, 487, 945, 348, 946, 953,
	349, 343, 350, 351, 352, 353, 354, 355, 0, 356,
	357, 954, 358, 490, 359, 0, 360, 0, 361, 362,
	363, 364, 365, 366, 892, 367, 368, 0, 369, 370,
	371, 372, 373, 0, 375, 376, 377, 374, 378, 379,
	380, 381, 0, 382, 947, 383, 384, 385, 386, 829,
	387, 0, 388, 392, 393, 394, 395, 396, 397, 398,
	0, 405, 406, 865, 866, 868, 869, 400, 404, 407,
	408, 922, 409, 389, 390, 410, 948, 411, 887, 867,
	413, 0, 423, 414, 415, 416, 391, 417, 421, 933,
	418, 419, 420, 955, 0, 425, 426, 424, 0, 427,
	428, 429, 430, 431, 269, 432, 270, 863, 0, 906,
	907, 908, 909, 0, 440, 0, 434, 435, 956, 436,
	957, 840, 437, 438, 439, 0, 3362, 442, 0, 823,
	443, 444, 445, 446, 448, 923, 449, 0, 871, 450,
	451, 452, 501, 903, 950, 0, 454, 453, 504, 0,
	0, 0, 0, 455, 456, 505, 457, 458, 459, 820,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 0,
	0, 0, 816, 817, 876, 833, 834, 835, 831, 832,
	845, 846, 0, 0, 0, 0, 844, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 925, 850, 0, 0, 0, 219, 220, 221,
	222, 3361, 891, 870, 902, 860, 901, 900, 0, 226,
	862, 861, 229, 230, 231, 852, 924, 232, 960, 961,
	467, 0, 233, 931, 0, 914, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 934, 247, 3363, 917, 915, 916,
	921, 919, 918, 920, 249, 250, 251, 252, 905, 254,
	898, 897, 822, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 896, 261, 0, 262, 0, 263, 264, 0,
	828, 265, 266, 268, 271, 267, 272, 273, 274, 951,
	952, 841, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 895, 893, 894, 0, 280, 0, 281, 0, 0,
	935, 282, 283, 0, 284, 958, 0, 851, 285, 0,
	286, 287, 288, 289, 926, 927, 930, 337, 937, 290,
	291, 0, 292, 293, 872, 0, 0, 0, 211, 294,
	296, 303, 0, 936, 297, 884, 875, 886, 888, 889,
	890, 885, 0, 877, 0, 304, 938, 928, 939, 305,
	306, 307, 940, 910, 911, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 959, 941, 317, 318,
	942, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 864, 330, 943,
	333, 334, 336, 335, 819, 212, 944, 842, 929, 899,
	338, 339, 0, 873, 341, 874, 0, 0, 344, 345,
	346, 0, 0, 347, 487, 945, 348, 946, 953, 349,
	343, 350, 351, 352, 353, 354, 355, 0, 356, 357,
	954, 358, 490, 359, 0, 360, 0, 361, 362, 363,
	364, 365, 366, 892, 367, 368, 0, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 0, 382, 947, 383, 384, 385, 386, 829, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 0,
	405, 406, 865, 866, 868, 869, 400, 404, 407, 408,
	922, 409, 389, 390, 410, 948, 411, 887, 867, 413,
	0, 423, 414, 415, 416, 391, 417, 421, 933, 418,
	419, 420, 955, 0, 425, 426, 424, 0, 427, 428,
	429, 430, 431, 269, 432, 270, 863, 0, 906, 907,
	908, 909, 0, 440, 0, 434, 435, 956, 436, 957,
	840, 437, 438, 439, 0, 3362, 442, 0, 823, 443,
	444, 445, 446, 448, 923, 449, 0, 871, 450, 451,
	452, 501, 903, 950, 0, 454, 453, 504, 0, 0,
	0, 0, 455, 456, 505, 457, 458, 459, 820, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 0,
	0, 816, 817, 876, 833, 834, 835, 831, 832, 845,
	846, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 925, 850, 0, 0, 0, 219, 220, 221, 222,
	461, 891, 870, 902, 860, 901, 900, 0, 226, 862,
	861, 229, 230, 231, 852, 924, 232, 960, 961, 467,
	0, 233, 931, 0, 914, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 934, 247, 248, 917, 915, 916, 921,
	919, 918, 920, 249, 250, 251, 252, 905, 254, 898,
	897, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 896, 261, 0, 262, 0, 263, 264, 0, 828,
	265, 266, 268, 271, 267, 272, 273, 274, 951, 952,
	841, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	895, 893, 894, 0, 280, 0, 281, 0, 0, 935,
	282, 283, 0, 284, 958, 0, 851, 285, 0, 286,
	287, 288, 289, 926, 927, 930, 337, 937, 290, 291,
	0, 292, 293, 872, 0, 0, 0, 211, 294, 296,
	303, 0, 936, 297, 884, 875, 886, 888, 889, 890,
	885, 0, 877, 0, 304, 938, 928, 939, 305, 306,
	307, 940, 910, 911, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 959, 941, 317, 318, 942,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 864, 330, 943, 333,
	334, 336, 335, 0, 212, 944, 842, 929, 899, 338,
	339, 0, 873, 341, 874, 0, 0, 344, 345, 346,
	0, 0, 347, 487, 945, 348, 946, 953, 349, 343,
	350, 351, 352, 353, 354, 355, 0, 356, 357, 954,
	358, 490, 359, 0, 360, 0, 361, 362, 363, 364,
	365, 366, 892, 367, 368, 0, 369, 370, 371, 372,
	373, 0, 375, 376, 377, 374, 378, 379, 380, 381,
	0, 382, 947, 383, 384, 385, 386, 829, 387, 0,
	388, 392, 393, 394, 395, 396, 397, 398, 0, 405,
	406, 865, 866, 868, 869, 400, 404, 407, 408, 922,
	409, 389, 390, 410, 948, 411, 887, 867, 413, 0,
	423, 414, 415, 416, 391, 417, 421, 933, 418, 419,
	420, 955, 0, 425, 426, 424, 0, 427, 428, 429,
	430, 431, 269, 432, 270, 863, 0, 906, 907, 908,
	909, 0, 440, 0, 434, 435, 956, 436, 957, 840,
	437, 438, 439, 0, 441, 442, 0, 0, 443, 444,
	445, 446, 448, 923, 449, 0, 871, 450, 451, 452,
	501, 903, 950, 0, 454, 453, 504, 0, 0, 0,
	0, 455, 456, 505, 457, 458, 459, 876, 833, 834,
	835, 831, 832, 845, 0, 2082, 0, 0, 0, 0,
	2080, 2081, 0, 0, 213, 214, 215, 216, 217, 846,
	218, 0, 0, 0, 844, 925, 850, 0, 0, 0,
	219, 220, 221, 222, 0, 891, 870, 902, 860, 901,
	900, 0, 226, 862, 861, 229, 230, 231, 852, 924,
	232, 960, 961, 467, 0, 233, 931, 0, 914, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 934, 247, 3363,
	917, 915, 916, 921, 919, 918, 920, 249, 250, 251,
	252, 905, 254, 898, 897, 822, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 896, 261, 0, 262, 0,
	263, 264, 0, 828, 265, 266, 268, 271, 267, 272,
	273, 274, 951, 952, 841, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 895, 893, 894, 0, 280, 0,
	281, 0, 0, 935, 282, 283, 0, 284, 958, 0,
	851, 285, 0, 286, 287, 288, 289, 926, 927, 930,
	337, 0, 290, 291, 0, 292, 293, 872, 0, 0,
	0, 211, 294, 296, 303, 0, 936, 297, 884, 875,
	886, 888, 889, 890, 885, 0, 877, 0, 304, 0,
	928, 0, 305, 306, 307, 940, 910, 911, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 959,
	941, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	864, 330, 943, 333, 334, 336, 335, 819, 212, 0,
	842, 929, 899, 338, 339, 0, 873, 341, 874, 0,
	0, 344, 345, 346, 0, 0, 347, 487, 945, 348,
	946, 953, 349, 343, 350, 351, 352, 353, 354, 355,
	0, 356, 357, 954, 358, 490, 359, 0, 360, 0,
	361, 362, 363, 364, 365, 366, 892, 367, 368, 0,
	369, 370, 371, 372, 373, 0, 375, 376, 377, 374,
	378, 379, 380, 381, 0, 382, 947, 383, 384, 385,
	386, 829, 387, 0, 388, 392, 393, 394, 395, 396,
	397, 398, 0, 405, 406, 865, 866, 868, 869, 400,
	404, 407, 408, 922, 409, 389, 390, 410, 0, 411,
	887, 867, 413, 0, 423, 414, 415, 416, 391, 417,
	421, 933, 418, 419, 420, 955, 0, 425, 426, 424,
	0, 427, 428, 429, 430, 431, 269, 432, 270, 863,
	0, 906, 907, 908, 909, 0, 440, 0, 434, 435,
	956, 436, 957, 840, 437, 438, 439, 0, 3362, 442,
	0, 823, 443, 444, 445, 446, 448, 923, 449, 0,
	871, 450, 451, 452, 501, 903, 950, 0, 454, 453,
	504, 0, 0, 0, 0, 455, 456, 505, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	809, 0, 997, 0, 816, 817, 0, 0, 0, 0,
	0, 0, 0, 846, 0, 0, 0, 0, 844, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	925, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 924, 232, 465, 466, 467, 0,
	233, 931, 0, 914, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 934, 247, 248, 917, 915, 916, 921, 919,
	918, 920, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 951, 952, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 935, 282,
	283, 0, 284, 958, 0, 476, 285, 0, 286, 287,
	288, 289, 926, 927, 930, 337, 937, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 936, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 938, 928, 939, 305, 306, 307,
	940, 308, 309, 0, 0, 310, 311, 312, 313, 984,
	315, 314, 0, 316, 959, 941, 317, 318, 942, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 943, 333, 334,
	336, 335, 0, 212, 944, 0, 929, 486, 338, 339,
	0, 340, 341, 342, 0, 989, 344, 345, 346, 0,
	0, 347, 487, 945, 348, 946, 953, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 954, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 947, 383, 384, 385, 386, 492, 991, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 176, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 922, 409,
	389, 390, 410, 948, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	955, 0, 425, 426, 424, 178, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 956, 436, 957, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 923, 449, 0, 447, 450, 451, 452, 1301,
	502, 503, 0, 454, 453, 504, 997, 0, 0, 170,
	455, 456, 505, 457, 458, 459, 0, 171, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 925, 0, 981, 0, 1583, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 924, 232,
	465, 466, 467, 0, 233, 931, 0, 914, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 934, 247, 248, 917,
	915, 916, 921, 919, 918, 920, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 951, 952, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 935, 282, 283, 0, 284, 958, 0, 476,
	285, 0, 286, 287, 288, 289, 926, 927, 930, 337,
	937, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 936, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 938, 928,
	939, 305, 306, 307, 940, 308, 309, 0, 0, 310,
	311, 312, 313, 984, 315, 314, 0, 316, 959, 941,
	317, 318, 942, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 943, 333, 334, 336, 335, 0, 212, 944, 0,
	929, 486, 338, 339, 0, 340, 341, 342, 0, 989,
	344, 345, 346, 0, 0, 347, 487, 945, 348, 946,
	953, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 954, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 947, 383, 384, 385, 386,
	492, 991, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 176, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 922, 409, 389, 390, 410, 948, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 955, 0, 425, 426, 424, 178,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 956,
	436, 957, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 923, 449, 0, 447,
	450, 451, 452, 1301, 502, 503, 0, 454, 453, 504,
	0, 0, 0, 170, 455, 456, 505, 457, 458, 459,
	0, 171, 0, 0, 2519, 0, 997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	981, 0, 1583, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 925, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 924, 232,
	465, 466, 467, 0, 233, 931, 0, 914, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 934, 247, 248, 917,
	915, 916, 921, 919, 918, 920, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 951, 952, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 935, 282, 283, 0, 284, 958, 0, 476,
	285, 0, 286, 287, 288, 289, 926, 927, 930, 337,
	937, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 936, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 938, 928,
	939, 305, 306, 307, 940, 308, 309, 0, 0, 310,
	311, 312, 313, 984, 315, 314, 0, 316, 959, 941,
	317, 318, 942, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 943, 333, 334, 336, 335, 0, 212, 944, 0,
	929, 486, 338, 339, 0, 340, 341, 342, 0, 989,
	344, 345, 346, 0, 0, 347, 487, 945, 348, 946,
	953, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 954, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 947, 383, 384, 385, 386,
	492, 991, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 922, 409, 389, 390, 410, 948, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 955, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 956,
	436, 957, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 923, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 454, 453, 504,
	0, 980, 0, 997, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	981, 925, 986, 0, 0, 0, 219, 220, 221, 222,
	461, 462, 223, 463, 224, 225, 464, 0, 226, 227,
	228, 229, 230, 231, 0, 924, 232, 465, 466, 467,
	0, 233, 931, 0, 914, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 934, 247, 248, 917, 915, 916, 921,
	919, 918, 920, 249, 250, 251, 252, 253, 254, 469,
	470, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 471,
	265, 266, 268, 271, 267, 272, 273, 274, 951, 952,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	474, 278, 279, 0, 280, 0, 281, 0, 0, 935,
	282, 283, 0, 284, 958, 0, 476, 285, 0, 286,
	287, 288, 289, 926, 927, 930, 337, 937, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 211, 294, 296,
	303, 0, 936, 297, 480, 299, 298, 300, 301, 302,
	481, 0, 482, 0, 304, 938, 928, 939, 305, 306,
	307, 940, 308, 309, 0, 0, 310, 311, 312, 313,
	984, 315, 314, 0, 316, 959, 941, 317, 318, 942,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 943, 333,
	334, 336, 335, 0, 212, 944, 0, 929, 486, 338,
	339, 0, 340, 341, 342, 0, 989, 344, 345, 346,
	0, 0, 347, 487, 945, 348, 946, 953, 349, 343,
	350, 351, 352, 353, 354, 355, 0, 356, 357, 954,
	358, 490, 359, 0, 360, 0, 361, 362, 363, 364,
	365, 366, 491, 367, 368, 0, 369, 370, 371, 372,
	373, 0, 375, 376, 377, 374, 378, 379, 380, 381,
	0, 382, 947, 383, 384, 385, 386, 492, 991, 0,
	388, 392, 393, 394, 395, 396, 397, 398, 0, 405,
	406, 399, 401, 402, 403, 400, 404, 407, 408, 922,
	409, 389, 390, 410, 948, 411, 493, 412, 413, 0,
	423, 414, 415, 416, 391, 417, 421, 422, 418, 419,
	420, 955, 0, 425, 426, 424, 0, 427, 428, 429,
	430, 431, 269, 432, 270, 433, 0, 495, 496, 497,
	498, 0, 440, 0, 434, 435, 956, 436, 957, 0,
	437, 438, 439, 0, 441, 442, 0, 0, 443, 444,
	445, 446, 448, 923, 449, 0, 447, 450, 451, 452,
	501, 502, 503, 0, 454, 453, 504, 997, 0, 0,
	0, 455, 456, 505, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 925, 0, 981, 0, 986,
	219, 220, 221, 222, 461, 462, 223, 463, 224, 225,
	464, 0, 226, 227, 228, 229, 230, 231, 0, 924,
	232, 465, 466, 467, 0, 233, 931, 0, 914, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 934, 247, 248,
	917, 915, 916, 921, 919, 918, 920, 249, 250, 251,
	252, 253, 254, 469, 470, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 471, 265, 266, 268, 271, 267, 272,
	273, 274, 951, 952, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 474, 278, 279, 0, 280, 0,
	281, 0, 0, 935, 282, 283, 0, 284, 958, 0,
	476, 285, 0, 286, 287, 288, 289, 926, 927, 930,
	337, 937, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 211, 294, 296, 303, 0, 936, 297, 480, 299,
	298, 300, 301, 302, 481, 0, 482, 0, 304, 938,
	928, 939, 305, 306, 307, 940, 308, 309, 0, 0,
	310, 311, 312, 313, 984, 315, 314, 0, 316, 959,
	941, 317, 318, 942, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 943, 333, 334, 336, 335, 0, 212, 944,
	0, 929, 486, 338, 339, 0, 340, 341, 342, 0,
	989, 344, 345, 346, 0, 0, 347, 487, 945, 348,
	946, 953, 349, 343, 350, 351, 352, 353, 354, 355,
	0, 356, 357, 954, 358, 490, 359, 0, 360, 0,
	361, 362, 363, 364, 365, 366, 491, 367, 368, 0,
	369, 370, 371, 372, 373, 0, 375, 376, 377, 374,
	378, 379, 380, 381, 0, 382, 947, 383, 384, 385,
	386, 492, 991, 0, 388, 392, 393, 394, 395, 396,
	397, 398, 0, 405, 406, 399, 401, 402, 403, 400,
	404, 407, 408, 922, 409, 389, 390, 410, 948, 411,
	493, 412, 413, 0, 423, 414, 415, 416, 391, 417,
	421, 422, 418, 419, 420, 955, 0, 425, 426, 424,
	0, 427, 428, 429, 430, 431, 269, 432, 270, 433,
	0, 495, 496, 497, 498, 0, 440, 0, 434, 435,
	956, 436, 957, 0, 437, 438, 439, 0, 441, 442,
	0, 0, 443, 444, 445, 446, 448, 923, 449, 0,
	447, 450, 451, 452, 501, 502, 503, 0, 454, 453,
	504, 997, 0, 0, 0, 455, 456, 505, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 925,
	0, 981, 0, 986, 219, 220, 221, 222, 461, 462,
	223, 463, 224, 225, 464, 0, 226, 227, 228, 229,
	230, 231, 0, 924, 232, 465, 466, 467, 0, 233,
	931, 0, 914, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 934, 247, 248, 917, 915, 916, 921, 919, 918,
	920, 249, 250, 251, 252, 253, 254, 469, 470, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 471, 265, 266,
	268, 271, 267, 272, 273, 274, 951, 952, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 474, 278,
	279, 0, 280, 0, 281, 0, 0, 935, 282, 283,
	0, 284, 958, 0, 476, 285, 0, 286, 287, 288,
	289, 926, 927, 930, 337, 937, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 0,
	936, 297, 480, 299, 298, 300, 301, 302, 481, 0,
	482, 0, 304, 938, 928, 939, 305, 306, 307, 940,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 959, 941, 317, 318, 942, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 943, 333, 334, 336,
	335, 0, 212, 944, 0, 929, 486, 338, 339, 0,
	340, 341, 342, 0, 0, 344, 345, 346, 0, 0,
	347, 487, 945, 348, 946, 953, 349, 343, 350, 351,
	352, 353, 354, 355, 0, 356, 357, 954, 358, 490,
	359, 0, 360, 0, 361, 362, 363, 364, 365, 366,
	491, 367, 368, 0, 369, 370, 371, 372, 373, 0,
	375, 376, 377, 374, 378, 379, 380, 381, 0, 382,
	947, 383, 384, 385, 386, 492, 991, 0, 388, 392,
	393, 394, 395, 396, 397, 398, 0, 405, 406, 399,
	401, 402, 403, 400, 404, 407, 408, 922, 409, 389,
	390, 410, 948, 411, 493, 412, 413, 0, 423, 414,
	415, 416, 391, 417, 421, 422, 418, 419, 420, 955,
	0, 425, 426, 424, 0, 427, 428, 429, 430, 431,
	269, 432, 270, 433, 0, 495, 496, 497, 498, 0,
	440, 0, 434, 435, 956, 436, 957, 0, 437, 438,
	439, 0, 441, 442, 0, 0, 443, 444, 445, 446,
	448, 923, 449, 0, 447, 450, 451, 452, 501, 502,
	503, 0, 454, 453, 504, 809, 0, 1155, 0, 455,
	456, 505, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 460, 0, 1478, 0, 0,
	219, 220, 221, 222, 461, 462, 223, 463, 224, 225,
	464, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 465, 466, 467, 0, 233, 468, 0, 1059, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 934, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 469, 470, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 471, 265, 266, 268, 271, 267, 272,
	273, 274, 472, 473, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 474, 278, 279, 0, 280, 0,
	281, 0, 0, 935, 282, 283, 0, 284, 475, 0,
	476, 285, 0, 286, 287, 288, 289, 477, 478, 479,
	337, 937, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 936, 297, 480, 299,
	298, 300, 301, 302, 481, 0, 482, 0, 304, 938,
	483, 939, 305, 306, 307, 940, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 484,
	941, 317, 318, 942, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 943, 333, 334, 336, 335, 0, 0, 944,
	0, 485, 486, 338, 339, 0, 340, 341, 342, 0,
	0, 344, 345, 346, 0, 0, 347, 487, 945, 348,
	946, 488, 349, 343, 350, 351, 352, 353, 354, 355,
	0, 356, 357, 489, 358, 490, 359, 0, 360, 0,
	361, 362, 363, 364, 365, 366, 491, 367, 368, 0,
	369, 370, 371, 372, 373, 0, 375, 376, 377, 374,
	378, 379, 380, 381, 0, 382, 947, 383, 384, 385,
	386, 492, 387, 0, 388, 392, 393, 394, 395, 396,
	397, 398, 176, 405, 406, 399, 401, 402, 403, 400,
	404, 407, 408, 0, 409, 389, 390, 410, 948, 411,
	493, 412, 413, 0, 423, 414, 415, 416, 391, 417,
	421, 422, 418, 419, 420, 494, 0, 425, 426, 424,
	178, 427, 428, 429, 430, 431, 269, 432, 270, 433,
	0, 495, 496, 497, 498, 0, 440, 0, 434, 435,
	499, 436, 500, 0, 437, 438, 439, 0, 441, 442,
	0, 0, 443, 444, 445, 446, 448, 0, 449, 0,
	447, 450, 451, 452, 1301, 502, 503, 0, 454, 453,
	504, 1298, 0, 1155, 170, 455, 456, 505, 457, 458,
	459, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 460, 0, 148, 0, 0, 219, 220, 221, 222,
	461, 462, 223, 463, 224, 225, 464, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 465, 466, 467,
	0, 233, 468, 0, 1059, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 934, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 469,
	470, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 471,
	265, 266, 268, 271, 267, 272, 273, 274, 472, 473,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	474, 278, 279, 0, 280, 0, 281, 0, 0, 935,
	282, 283, 0, 284, 475, 0, 476, 285, 0, 286,
	287, 288, 289, 477, 478, 479, 337, 937, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 936, 297, 480, 299, 298, 300, 301, 302,
	481, 0, 482, 0, 304, 938, 483, 939, 305, 306,
	307, 940, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 484, 941, 317, 318, 942,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 943, 333,
	334, 336, 335, 0, 0, 944, 0, 485, 486, 338,
	339, 0, 340, 341, 342, 0, 0, 344, 345, 346,
	0, 0, 347, 487, 945, 348, 946, 488, 349, 343,
	350, 351, 352, 353, 354, 355, 0, 356, 357, 489,
	358, 490, 359, 0, 360, 0, 361, 362, 363, 364,
	365, 366, 491, 367, 368, 0, 369, 370, 371, 372,
	373, 0, 375, 376, 377, 374, 378, 379, 380, 381,
	0, 382, 947, 383, 384, 385, 386, 492, 387, 0,
	388, 392, 393, 394, 395, 396, 397, 398, 176, 405,
	406, 399, 401, 402, 403, 400, 404, 407, 408, 0,
	409, 389, 390, 410, 948, 411, 493, 412, 413, 0,
	423, 414, 415, 416, 391, 417, 421, 422, 418, 419,
	420, 494, 0, 425, 426, 424, 178, 427, 428, 429,
	430, 431, 269, 432, 270, 433, 0, 495, 496, 497,
	498, 0, 440, 0, 434, 435, 499, 436, 500, 0,
	437, 438, 439, 0, 441, 442, 0, 0, 443, 444,
	445, 446, 448, 0, 449, 0, 447, 450, 451, 452,
	1301, 502, 503, 0, 454, 453, 504, 0, 0, 0,
	170, 455, 456, 505, 457, 458, 459, 0, 171, 0,
	0, 0, 0, 1155, 1154, 0, 0, 0, 0, 1152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 148,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 460, 0, 0, 0, 0, 219, 220, 221, 222,
	461, 462, 223, 463, 224, 225, 464, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 465, 466, 467,
	0, 233, 468, 0, 1059, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 934, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 469,
	470, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 471,
	265, 266, 268, 271, 267, 272, 273, 274, 472, 473,
	0, 210, 0, 0, 0, 0, 0, 275, 276, 277,
	474, 278, 279, 0, 280, 0, 281, 0, 0, 935,
	282, 283, 0, 284, 475, 0, 476, 285, 0, 286,
	287, 288, 289, 477, 478, 479, 337, 937, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 936, 297, 480, 299, 298, 300, 301, 302,
	481, 0, 482, 0, 304, 938, 483, 939, 305, 306,
	307, 940, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 484, 941, 317, 318, 942,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 943, 333,
	334, 336, 335, 0, 0, 944, 0, 485, 486, 338,
	339, 0, 340, 341, 342, 0, 0, 344, 345, 346,
	0, 0, 347, 487, 945, 348, 946, 488, 349, 343,
	350, 351, 352, 353, 354, 355, 0, 356, 357, 489,
	358, 490, 359, 0, 360, 0, 361, 362, 363, 364,
	365, 366, 491, 367, 368, 0, 369, 370, 371, 372,
	373, 0, 375, 376, 377, 374, 378, 379, 380, 381,
	0, 382, 947, 383, 384, 385, 386, 492, 387, 0,
	388, 392, 393, 394, 395, 396, 397, 398, 0, 405,
	406, 399, 401, 402, 403, 400, 404, 407, 408, 0,
	409, 389, 390, 410, 948, 411, 493, 412, 413, 0,
	423, 414, 415, 416, 391, 417, 421, 422, 418, 419,
	420, 494, 0, 425, 426, 424, 0, 427, 428, 429,
	430, 431, 269, 432, 270, 433, 0, 495, 496, 497,
	498, 0, 440, 0, 434, 435, 499, 436, 500, 0,
	437, 438, 439, 0, 441, 442, 0, 0, 443, 444,
	445, 446, 448, 0, 449, 0, 447, 450, 451, 452,
	501, 502, 503, 0, 454, 453, 504, 0, 0, 0,
	0, 455, 456, 505, 457, 458, 459, 1155, 1154, 0,
	0, 0, 0, 1152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 2711,
	218, 0, 0, 0, 0, 460, 0, 0, 0, 0,
	219, 220, 221, 222, 461, 462, 223, 463, 224, 225,
	464, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 465, 466, 467, 0, 233, 468, 0, 1059, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 934, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 469, 470, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 471, 265, 266, 268, 271, 267, 272,
	273, 274, 472, 473, 0, 210, 0, 0, 0, 0,
	0, 275, 276, 277, 474, 278, 279, 0, 280, 0,
	281, 0, 0, 935, 282, 283, 0, 284, 475, 0,
	476, 285, 0, 286, 287, 288, 289, 477, 478, 479,
	337, 937, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 936, 297, 480, 299,
	298, 300, 301, 302, 481, 0, 482, 0, 304, 938,
	483, 939, 305, 306, 307, 940, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 484,
	941, 317, 318, 942, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 943, 333, 334, 336, 335, 0, 0, 944,
	0, 485, 486, 338, 339, 0, 340, 341, 342, 0,
	0, 344, 345, 346, 0, 0, 347, 487, 945, 348,
	946, 488, 349, 343, 350, 351, 352, 353, 354, 355,
	0, 356, 357, 489, 358, 490, 359, 0, 360, 0,
	361, 362, 363, 364, 365, 366, 491, 367, 368, 0,
	369, 370, 371, 372, 373, 0, 375, 376, 377, 374,
	378, 379, 380, 381, 0, 382, 947, 383, 384, 385,
	386, 492, 387, 0, 388, 392, 393, 394, 395, 396,
	397, 398, 0, 405, 406, 399, 401, 402, 403, 400,
	404, 407, 408, 0, 409, 389, 390, 410, 948, 411,
	493, 412, 413, 0, 423, 414, 415, 416, 391, 417,
	421, 422, 418, 419, 420, 494, 0, 425, 426, 424,
	0, 427, 428, 429, 430, 431, 269, 432, 270, 433,
	0, 495, 496, 497, 498, 0, 440, 0, 434, 435,
	499, 436, 500, 0, 437, 438, 439, 0, 441, 442,
	0, 0, 443, 444, 445, 446, 448, 0, 449, 0,
	447, 450, 451, 452, 501, 502, 503, 0, 454, 453,
	504, 997, 0, 0, 0, 455, 456, 505, 457, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 925,
	0, 0, 0, 1305, 219, 220, 221, 222, 461, 462,
	223, 463, 224, 225, 464, 0, 226, 227, 228, 229,
	230, 231, 0, 924, 232, 465, 466, 467, 0, 233,
	931, 0, 914, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 934, 247, 248, 917, 915, 916, 921, 919, 918,
	920, 249, 250, 251, 252, 253, 254, 469, 470, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 471, 265, 266,
	268, 271, 267, 272, 273, 274, 951, 952, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 474, 278,
	279, 0, 280, 0, 281, 0, 0, 935, 282, 283,
	0, 284, 958, 0, 476, 285, 0, 286, 287, 288,
	289, 926, 927, 930, 337, 937, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 0,
	936, 297, 480, 299, 298, 300, 301, 302, 481, 0,
	482, 0, 304, 938, 928, 939, 305, 306, 307, 940,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 959, 941, 317, 318, 942, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 943, 333, 334, 336,
	335, 0, 212, 944, 0, 929, 486, 338, 339, 0,
	340, 341, 342, 0, 0, 344, 345, 346, 0, 0,
	347, 487, 945, 348, 946, 953, 349, 343, 350, 351,
	352, 353, 354, 355, 0, 356, 357, 954, 358, 490,
	359, 0, 360, 0, 361, 362, 363, 364, 365, 366,
	491, 367, 368, 0, 369, 370, 371, 372, 373, 0,
	375, 376, 377, 374, 378, 379, 380, 381, 0, 382,
	947, 383, 384, 385, 386, 492, 387, 0, 388, 392,
	393, 394, 395, 396, 397, 398, 0, 405, 406, 399,
	401, 402, 403, 400, 404, 407, 408, 922, 409, 389,
	390, 410, 948, 411, 493, 412, 413, 0, 423, 414,
	415, 416, 391, 417, 421, 422, 418, 419, 420, 955,
	0, 425, 426, 424, 0, 427, 428, 429, 430, 431,
	269, 432, 270, 433, 0, 495, 496, 497, 498, 0,
	440, 0, 434, 435, 956, 436, 957, 0, 437, 438,
	439, 0, 441, 442, 0, 0, 443, 444, 445, 446,
	448, 923, 449, 0, 447, 450, 451, 452, 501, 502,
	503, 0, 454, 453, 504, 809, 0, 207, 0, 455,
	456, 505, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 460, 0, 0, 0, 0,
	219, 220, 221, 222, 461, 462, 223, 463, 224, 225,
	464, 0, 226, 227, 228, 229, 230, 231, 0, 0,
	232, 465, 466, 467, 0, 233, 468, 0, 0, 0,
	234, 235, 236, 237, 238, 0, 240, 241, 242, 239,
	0, 243, 0, 244, 245, 246, 0, 0, 247, 248,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 251,
	252, 253, 254, 469, 470, 0, 255, 0, 257, 256,
	0, 258, 0, 0, 259, 260, 261, 0, 262, 0,
	263, 264, 0, 471, 265, 266, 268, 271, 267, 272,
	273, 274, 472, 473, 0, 0, 0, 0, 0, 0,
	0, 275, 276, 277, 474, 278, 279, 0, 280, 0,
	281, 0, 0, 0, 282, 283, 0, 284, 475, 0,
	476, 285, 0, 286, 287, 288, 289, 477, 478, 479,
	337, 0, 290, 291, 0, 292, 293, 295, 0, 0,
	0, 0, 294, 296, 303, 0, 0, 297, 480, 299,
	298, 300, 301, 302, 481, 0, 482, 0, 304, 0,
	483, 0, 305, 306, 307, 0, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 315, 314, 0, 316, 484,
	0, 317, 318, 0, 0, 319, 320, 0, 0, 321,
	322, 0, 323, 324, 326, 328, 325, 327, 329, 331,
	332, 330, 0, 333, 334, 336, 335, 0, 0, 0,
	0, 485, 486, 338, 339, 0, 340, 341, 342, 0,
	0, 344, 345, 346, 0, 0, 347, 487, 0, 348,
	0, 488, 349, 343, 350, 351, 352, 353, 354, 355,
	0, 356, 357, 489, 358, 490, 359, 0, 360, 0,
	361, 362, 363, 364, 365, 366, 491, 367, 368, 0,
	369, 370, 371, 372, 373, 0, 375, 376, 377, 374,
	378, 379, 380, 381, 0, 382, 0, 383, 384, 385,
	386, 492, 387, 0, 388, 392, 393, 394, 395, 396,
	397, 398, 176, 405, 406, 399, 401, 402, 403, 400,
	404, 407, 408, 0, 409, 389, 390, 410, 0, 411,
	493, 412, 413, 0, 423, 414, 415, 416, 391, 417,
	421, 422, 418, 419, 420, 494, 0, 425, 426, 424,
	178, 427, 428, 429, 430, 431, 269, 432, 270, 433,
	0, 495, 496, 497, 498, 0, 440, 0, 434, 435,
	499, 436, 500, 0, 437, 438, 439, 0, 441, 442,
	0, 0, 443, 444, 445, 446, 448, 0, 449, 0,
	447, 450, 451, 452, 1301, 502, 503, 0, 454, 453,
	504, 207, 0, 0, 170, 455, 456, 505, 457, 458,
	459, 0, 171, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 460,
	0, 0, 0, 148, 219, 220, 221, 222, 461, 462,
	223, 463, 224, 225, 464, 0, 226, 227, 228, 229,
	230, 231, 0, 0, 232, 465, 466, 467, 0, 233,
	468, 0, 0, 0, 234, 235, 236, 237, 238, 0,
	240, 241, 242, 239, 0, 243, 0, 244, 245, 246,
	0, 0, 247, 248, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 251, 252, 253, 254, 469, 470, 0,
	255, 0, 257, 256, 0, 258, 0, 0, 259, 260,
	261, 0, 262, 0, 263, 264, 0, 471, 265, 266,
	268, 271, 267, 272, 273, 274, 472, 473, 0, 210,
	0, 0, 0, 0, 0, 275, 276, 277, 474, 278,
	279, 0, 280, 0, 281, 0, 0, 0, 282, 283,
	0, 284, 475, 0, 476, 285, 0, 286, 287, 288,
	289, 477, 478, 479, 337, 0, 290, 291, 0, 292,
	293, 295, 0, 0, 0, 211, 294, 296, 303, 0,
	0, 297, 480, 299, 298, 300, 301, 302, 481, 0,
	482, 0, 304, 0, 483, 0, 305, 306, 307, 0,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 315,
	314, 0, 316, 484, 0, 317, 318, 0, 0, 319,
	320, 0, 0, 321, 322, 0, 323, 324, 326, 328,
	325, 327, 329, 331, 332, 330, 0, 333, 334, 336,
	335, 0, 212, 0, 0, 485, 486, 338, 339, 0,
	340, 341, 342, 0, 0, 344, 345, 346, 0, 0,
	347, 487, 0, 348, 0, 488, 349, 343, 350, 351,
	352, 353, 354, 355, 0, 356, 357, 489, 358, 490,
	359, 0, 360, 0, 361, 362, 363, 364, 365, 366,
	491, 367, 368, 0, 369, 370, 371, 372, 373, 0,
	375, 376, 377, 374, 378, 379, 380, 381, 0, 382,
	0, 383, 384, 385, 386, 492, 387, 0, 388, 392,
	393, 394, 395, 396, 397, 398, 0, 405, 406, 399,
	401, 402, 403, 400, 404, 407, 408, 0, 409, 389,
	390, 410, 0, 411, 493, 412, 413, 0, 423, 414,
	415, 416, 391, 417, 421, 422, 418, 419, 420, 494,
	0, 425, 426, 424, 0, 427, 428, 429, 430, 431,
	269, 432, 270, 433, 0, 495, 496, 497, 498, 0,
	440, 0, 434, 435, 499, 436, 500, 0, 437, 438,
	439, 0, 441, 442, 0, 0, 443, 444, 445, 446,
	448, 0, 449, 0, 447, 450, 451, 452, 501, 502,
	503, 0, 454, 453, 504, 207, 0, 0, 0, 455,
	456, 505, 457, 458, 459, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 460, 0, 0, 0, 1588, 219, 220,
	221, 222, 461, 462, 223, 463, 224, 225, 464, 0,
	226, 227, 228, 229, 230, 231, 0, 0, 232, 465,
	466, 467, 0, 233, 468, 0, 0, 0, 234, 235,
	236, 237, 238, 0, 240, 241, 242, 239, 0, 243,
	0, 244, 245, 246, 0, 0, 247, 248, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 251, 252, 253,
	254, 469, 470, 0, 255, 0, 257, 256, 0, 258,
	0, 0, 259, 260, 261, 0, 262, 0, 263, 264,
	0, 471, 265, 266, 268, 271, 267, 272, 273, 274,
	472, 473, 0, 210, 0, 0, 0, 0, 0, 275,
	276, 277, 474, 278, 279, 0, 280, 0, 281, 0,
	0, 0, 282, 283, 0, 284, 475, 0, 476, 285,
	0, 286, 287, 288, 289, 477, 478, 479, 337, 0,
	290, 291, 0, 292, 293, 295, 0, 0, 0, 211,
	294, 296, 303, 0, 0, 297, 480, 299, 298, 300,
	301, 302, 481, 0, 482, 0, 304, 0, 483, 0,
	305, 306, 307, 0, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 315, 314, 0, 316, 484, 0, 317,
	318, 0, 0, 319, 320, 0, 0, 321, 322, 0,
	323, 324, 326, 328, 325, 327, 329, 331, 332, 330,
	0, 333, 334, 336, 335, 0, 212, 0, 0, 485,
	486, 338, 339, 0, 340, 341, 342, 0, 0, 344,
	345, 346, 0, 0, 347, 487, 0, 348, 0, 488,
	349, 343, 350, 351, 352, 353, 354, 355, 0, 356,
	357, 489, 358, 490, 359, 0, 360, 0, 361, 362,
	363, 364, 365, 366, 491, 367, 368, 0, 369, 370,
	371, 372, 373, 0, 375, 376, 377, 374, 378, 379,
	380, 381, 0, 382, 0, 383, 384, 385, 386, 492,
	387, 0, 388, 392, 393, 394, 395, 396, 397, 398,
	0, 405, 406, 399, 401, 402, 403, 400, 404, 407,
	408, 0, 409, 389, 390, 410, 0, 411, 493, 412,
	413, 0, 423, 414, 415, 416, 391, 417, 421, 422,
	418, 419, 420, 494, 0, 425, 426, 424, 0, 427,
	428, 429, 430, 431, 269, 432, 270, 433, 0, 495,
	496, 497, 498, 0, 440, 0, 434, 435, 499, 436,
	500, 0, 437, 438, 439, 0, 441, 442, 0, 0,
	443, 444, 445, 446, 448, 0, 449, 0, 447, 450,
	451, 452, 501, 502, 503, 0, 454, 453, 504, 207,
	0, 0, 0, 455, 456, 505, 457, 458, 459, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 460, 0, 2663,
	0, 0, 219, 220, 221, 222, 461, 462, 223, 463,
	224, 225, 464, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 465, 466, 467, 0, 233, 468, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 251, 252, 253, 254, 469, 470, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 471, 265, 266, 268, 271,
	267, 272, 273, 274, 472, 473, 0, 0, 0, 0,
	0, 0, 0, 275, 276, 277, 474, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	475, 0, 476, 285, 0, 286, 287, 288, 289, 477,
	478, 479, 337, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 0, 294, 296, 303, 0, 0, 297,
	480, 299, 298, 300, 301, 302, 481, 0, 482, 0,
	304, 0, 483, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 484, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	0, 0, 0, 485, 486, 338, 339, 0, 340, 341,
	342, 0, 0, 344, 345, 346, 0, 0, 347, 487,
	0, 348, 0, 488, 349, 343, 350, 351, 352, 353,
	354, 355, 0, 356, 357, 489, 358, 490, 359, 0,
	360, 0, 361, 362, 363, 364, 365, 366, 491, 367,
	368, 0, 369, 370, 371, 372, 373, 0, 375, 376,
	377, 374, 378, 379, 380, 381, 0, 382, 0, 383,
	384, 385, 386, 492, 387, 0, 388, 392, 393, 394,
	395, 396, 397, 398, 0, 405, 406, 399, 401, 402,
	403, 400, 404, 407, 408, 0, 409, 389, 390, 410,
	0, 411, 493, 412, 413, 0, 423, 414, 415, 416,
	391, 417, 421, 422, 418, 419, 420, 494, 0, 425,
	426, 424, 0, 427, 428, 429, 430, 431, 269, 432,
	270, 433, 0, 495, 496, 497, 498, 0, 440, 0,
	434, 435, 499, 436, 500, 0, 437, 438, 439, 0,
	441, 442, 0, 0, 443, 444, 445, 446, 448, 0,
	449, 0, 447, 450, 451, 452, 501, 502, 503, 0,
	454, 453, 504, 207, 0, 0, 0, 455, 456, 505,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 460, 0, 0, 0, 2313, 219, 220, 221, 222,
	461, 462, 223, 463, 224, 225, 464, 0, 226, 227,
	228, 229, 230, 231, 0, 0, 232, 465, 466, 467,
	0, 233, 468, 0, 0, 0, 234, 235, 236, 237,
	238, 0, 240, 241, 242, 239, 0, 243, 0, 244,
	245, 246, 0, 0, 247, 248, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 251, 252, 253, 254, 469,
	470, 0, 255, 0, 257, 256, 0, 258, 0, 0,
	259, 260, 261, 0, 262, 0, 263, 264, 0, 471,
	265, 266, 268, 271, 267, 272, 273, 274, 472, 473,
	0, 0, 0, 0, 0, 0, 0, 275, 276, 277,
	474, 278, 279, 0, 280, 0, 281, 0, 0, 0,
	282, 283, 0, 284, 475, 0, 476, 285, 0, 286,
	287, 288, 289, 477, 478, 479, 337, 0, 290, 291,
	0, 292, 293, 295, 0, 0, 0, 0, 294, 296,
	303, 0, 0, 297, 480, 299, 298, 300, 301, 302,
	481, 0, 482, 0, 304, 0, 483, 0, 305, 306,
	307, 0, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 315, 314, 0, 316, 484, 0, 317, 318, 0,
	0, 319, 320, 0, 0, 321, 322, 0, 323, 324,
	326, 328, 325, 327, 329, 331, 332, 330, 0, 333,
	334, 336, 335, 0, 0, 0, 0, 485, 486, 338,
	339, 0, 340, 341, 342, 0, 0, 344, 345, 346,
	0, 0, 347, 487, 0, 348, 0, 488, 349, 343,
	350, 351, 352, 353, 354, 355, 0, 356, 357, 489,
	358, 490, 359, 0, 360, 0, 361, 362, 363, 364,
	365, 366, 491, 367, 368, 0, 369, 370, 371, 372,
	373, 0, 375, 376, 377, 374, 378, 379, 380, 381,
	0, 382, 0, 383, 384, 385, 386, 492, 387, 0,
	388, 392, 393, 394, 395, 396, 397, 398, 0, 405,
	406, 399, 401, 402, 403, 400, 404, 407, 408, 0,
	409, 389, 390, 410, 0, 411, 493, 412, 413, 0,
	423, 414, 415, 416, 391, 417, 421, 422, 418, 419,
	420, 494, 0, 425, 426, 424, 0, 427, 428, 429,
	430, 431, 269, 432, 270, 433, 0, 495, 496, 497,
	498, 0, 440, 0, 434, 435, 499, 436, 500, 0,
	437, 438, 439, 0, 441, 442, 0, 0, 443, 444,
	445, 446, 448, 0, 449, 0, 447, 450, 451, 452,
	501, 502, 503, 0, 454, 453, 504, 683, 0, 574,
	0, 455, 456, 505, 457, 458, 459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 460, 0, 2786,
	0, 0, 219, 220, 221, 222, 461, 462, 223, 463,
	224, 225, 464, 0, 226, 227, 228, 229, 230, 231,
	0, 0, 232, 465, 466, 467, 0, 233, 468, 0,
	0, 0, 234, 235, 236, 237, 238, 0, 240, 241,
	242, 239, 0, 243, 0, 244, 245, 246, 0, 0,
	247, 248, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 580, 252, 253, 254, 469, 470, 0, 255, 0,
	257, 256, 0, 258, 0, 0, 259, 260, 261, 0,
	262, 0, 263, 264, 0, 471, 265, 266, 268, 271,
	267, 272, 273, 274, 472, 473, 0, 210, 0, 0,
	0, 0, 0, 275, 276, 277, 474, 278, 279, 0,
	280, 0, 281, 0, 0, 0, 282, 283, 0, 284,
	475, 0, 476, 285, 0, 286, 287, 288, 289, 477,
	478, 479, 337, 0, 290, 291, 0, 292, 293, 295,
	0, 0, 0, 211, 294, 296, 303, 0, 0, 297,
	480, 299, 298, 300, 301, 302, 481, 0, 482, 0,
	304, 0, 483, 0, 305, 306, 307, 0, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 315, 314, 0,
	316, 484, 0, 317, 318, 0, 0, 319, 320, 0,
	0, 321, 322, 0, 323, 324, 326, 328, 325, 327,
	329, 331, 332, 330, 0, 333, 334, 336, 335, 0,
	212, 0, 0, 485, 486, 338, 339, 0, 340, 341,
	342, 0, 0, 344, 345, 346, 0, 0, 347, 487,
	0, 348, 0, 488, 349, 343, 350, 351, 352, 353,
	354, 355, 0, 356, 357, 489, 358, 490, 359, 0,
	360, 0, 361, 362, 363, 364, 365, 366, 491, 367,
	368, 0, 369, 370, 371, 372, 373, 0, 375, 376,
	377, 374, 378, 379, 380, 381, 0, 382, 0, 383,
	384, 385, 386, 492, 387, 0, 388, 392, 393, 394,
	395, 396, 397, 398, 0, 405, 406, 399, 401, 402,
	403, 400, 404, 407, 408, 0, 409, 389, 390, 410,
	0, 411, 493, 412, 413, 0, 423, 414, 415, 416,
	391, 417, 421, 422, 418, 419, 420, 494, 0, 425,
	426, 424, 579, 427, 428, 429, 430, 431, 269, 432,
	270, 433, 0, 495, 496, 497, 498, 0, 440, 0,
	434, 435, 499, 436, 500, 0, 437, 438, 439, 0,
	441, 442, 0, 0, 443, 444, 445, 446, 448, 0,
	449, 0, 447, 450, 451, 452, 501, 502, 503, 0,
	454, 453, 504, 0, 573, 0, 574, 455, 456, 505,
	457, 458, 459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 583, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 580, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 579,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 574, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 583, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 580, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 1868, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 579,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 574, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 583, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 580, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 579,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 207, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 583, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	1328, 0, 1155, 1154, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 583, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 1059, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 934, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	210, 0, 0, 0, 0, 0, 1327, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 935, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 477, 478, 479, 337, 937, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 936, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 938, 483, 939, 305, 306, 307,
	940, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 941, 317, 318, 942, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 943, 333, 334,
	336, 335, 0, 0, 944, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 945, 348, 946, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 1326,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 947, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 948, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 0, 454, 453, 504, 0, 0, 0, 0,
	455, 456, 505, 457, 458, 459, 1296, 0, 1155, 1154,
	0, 0, 0, 0, 1152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 460, 0, 0, 0,
	0, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 465, 466, 467, 0, 233, 468, 0, 1059,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 934, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 469, 470, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	0, 281, 0, 0, 935, 282, 283, 0, 284, 475,
	0, 476, 285, 0, 286, 287, 288, 289, 1295, 478,
	479, 337, 937, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 936, 297, 480,
	299, 298, 300, 301, 302, 481, 0, 482, 0, 304,
	938, 483, 939, 305, 306, 307, 940, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	484, 941, 317, 318, 942, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 943, 333, 334, 336, 335, 0, 0,
	944, 0, 485, 486, 338, 339, 0, 340, 341, 342,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 945,
	348, 946, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 489, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 947, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 0, 409, 389, 390, 410, 948,
	411, 493, 412, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 0, 495, 496, 497, 498, 0, 440, 0, 434,
	435, 499, 436, 500, 0, 437, 438, 439, 0, 441,
	442, 0, 0, 443, 444, 445, 446, 448, 0, 449,
	0, 447, 450, 451, 452, 501, 502, 503, 0, 454,
	453, 504, 0, 0, 0, 0, 455, 456, 505, 457,
	458, 459, 1292, 0, 1155, 1154, 0, 0, 0, 0,
	1152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 465, 466,
	467, 0, 233, 468, 0, 1059, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 934, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	469, 470, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 0, 281, 0, 0,
	935, 282, 283, 0, 284, 475, 0, 476, 285, 0,
	286, 287, 288, 289, 1291, 478, 479, 337, 937, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 936, 297, 480, 299, 298, 300, 301,
	302, 481, 0, 482, 0, 304, 938, 483, 939, 305,
	306, 307, 940, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 484, 941, 317, 318,
	942, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 943,
	333, 334, 336, 335, 0, 0, 944, 0, 485, 486,
	338, 339, 0, 340, 341, 342, 0, 0, 344, 345,
	346, 0, 0, 347, 487, 945, 348, 946, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 0, 356, 357,
	489, 358, 490, 359, 0, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 0, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 0, 382, 947, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 0,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	0, 409, 389, 390, 410, 948, 411, 493, 412, 413,
	0, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 0, 425, 426, 424, 0, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 0, 495, 496,
	497, 498, 0, 440, 0, 434, 435, 499, 436, 500,
	0, 437, 438, 439, 0, 441, 442, 0, 0, 443,
	444, 445, 446, 448, 0, 449, 0, 447, 450, 451,
	452, 501, 502, 503, 0, 454, 453, 504, 0, 0,
	0, 0, 455, 456, 505, 457, 458, 459, 1230, 0,
	1155, 1154, 0, 0, 0, 0, 1152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 1059, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	934, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 935, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	1229, 478, 479, 337, 937, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 936,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 938, 483, 939, 305, 306, 307, 940, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 941, 317, 318, 942, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 943, 333, 334, 336, 335,
	0, 0, 944, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 945, 348, 946, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 947,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 948, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	0, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 1227, 0, 1155, 1154, 0, 0,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 1059, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 934, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 935, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 1226, 478, 479, 337,
	937, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 936, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 938, 483,
	939, 305, 306, 307, 940, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 941,
	317, 318, 942, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 943, 333, 334, 336, 335, 0, 0, 944, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 945, 348, 946,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 947, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 948, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	1148, 0, 1155, 1154, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 1059, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 934, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 935, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 1150, 478, 479, 337, 937, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 936, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 938, 483, 939, 305, 306, 307,
	940, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 941, 317, 318, 942, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 943, 333, 334,
	336, 335, 0, 0, 944, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 945, 348, 946, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 947, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 948, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 0, 454, 453, 504, 0, 0, 0, 0,
	455, 456, 505, 457, 458, 459, 1155, 1154, 0, 0,
	0, 0, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 1059, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 934, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 935, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	937, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 936, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 938, 483,
	939, 305, 306, 307, 940, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 941,
	317, 318, 942, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 943, 333, 334, 336, 335, 0, 0, 944, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 945, 348, 946,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 947, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 948, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 454, 453, 504,
	1155, 1154, 0, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 1059, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	934, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 935, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 937, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 936,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 938, 483, 939, 305, 306, 307, 940, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 941, 317, 318, 942, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 943, 333, 334, 336, 335,
	0, 0, 944, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 945, 348, 946, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 947,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 948, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	1155, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 1059, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	934, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 935, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 937, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 936,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 938, 483, 939, 305, 306, 307, 940, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 941, 317, 318, 942, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 943, 333, 334, 336, 335,
	0, 0, 944, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 945, 348, 946, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 947,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 948, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 2206, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 2203, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 2348, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 2209, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 2345, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 2347, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 2344, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	2208, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 2346, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 2206, 233, 468,
	0, 0, 2200, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 2203, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 2209, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	2199, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	2208, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 2207, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	0, 454, 453, 504, 1372, 0, 207, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 1375, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 1373,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 1374, 453, 504,
	1143, 0, 207, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 1145, 478, 479, 337, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 0, 483, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 989, 344, 345, 346, 0,
	0, 347, 487, 0, 348, 0, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 0, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 0, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 0, 454, 453, 504, 1140, 0, 207, 0,
	455, 456, 505, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 460, 0, 0, 0,
	0, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 465, 466, 467, 0, 233, 468, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 469, 470, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 475,
	0, 476, 285, 0, 286, 287, 288, 289, 1142, 478,
	479, 337, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 0, 297, 480,
	299, 298, 300, 301, 302, 481, 0, 482, 0, 304,
	0, 483, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	484, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 212,
	0, 0, 485, 486, 338, 339, 0, 340, 341, 342,
	0, 989, 344, 345, 346, 0, 0, 347, 487, 0,
	348, 0, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 489, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 0, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 0, 409, 389, 390, 410, 0,
	411, 493, 412, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 0, 495, 496, 497, 498, 0, 440, 0, 434,
	435, 499, 436, 500, 0, 437, 438, 439, 0, 441,
	442, 0, 0, 443, 444, 445, 446, 448, 0, 449,
	0, 447, 450, 451, 452, 501, 502, 503, 0, 454,
	453, 504, 1047, 0, 207, 0, 455, 456, 505, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 465, 466,
	467, 0, 233, 468, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	469, 470, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 475, 0, 476, 285, 0,
	286, 287, 288, 289, 1049, 478, 479, 337, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 0, 0, 297, 480, 299, 298, 300, 301,
	302, 481, 0, 482, 0, 304, 0, 483, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 484, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 212, 0, 0, 485, 486,
	338, 339, 0, 340, 341, 342, 0, 989, 344, 345,
	346, 0, 0, 347, 487, 0, 348, 0, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 0, 356, 357,
	489, 358, 490, 359, 0, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 0, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 0, 382, 0, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 0,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	0, 409, 389, 390, 410, 0, 411, 493, 412, 413,
	0, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 0, 425, 426, 424, 0, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 0, 495, 496,
	497, 498, 0, 440, 0, 434, 435, 499, 436, 500,
	0, 437, 438, 439, 0, 441, 442, 0, 0, 443,
	444, 445, 446, 448, 0, 449, 0, 447, 450, 451,
	452, 501, 502, 503, 0, 454, 453, 504, 536, 0,
	207, 0, 455, 456, 505, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	535, 217, 525, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 528,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 529,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 530, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	0, 454, 453, 504, 524, 0, 207, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 525, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 528, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 529, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 530, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 207, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 989,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 454, 453, 504,
	2277, 0, 207, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 477, 478, 479, 337, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 0, 483, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 0, 348, 0, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 0, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 0, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 0, 454, 453, 504, 1852, 0, 207, 0,
	455, 456, 505, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 460, 0, 0, 0,
	0, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 465, 466, 467, 0, 233, 468, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 469, 470, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 475,
	0, 476, 285, 0, 286, 287, 288, 289, 477, 478,
	479, 337, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 0, 297, 480,
	299, 298, 300, 301, 302, 481, 0, 482, 0, 304,
	0, 483, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	484, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 212,
	0, 0, 485, 486, 338, 339, 0, 340, 341, 342,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 0,
	348, 0, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 489, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 0, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 0, 409, 389, 390, 410, 0,
	411, 493, 412, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 0, 495, 496, 497, 498, 0, 440, 0, 434,
	435, 499, 436, 500, 0, 437, 438, 439, 0, 441,
	442, 0, 0, 443, 444, 445, 446, 448, 0, 449,
	0, 447, 450, 451, 452, 501, 502, 503, 207, 454,
	453, 504, 0, 0, 0, 0, 455, 456, 505, 457,
	458, 459, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 460, 0, 0, 0,
	0, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 465, 466, 467, 0, 233, 468, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 469, 470, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 475,
	0, 476, 285, 0, 286, 287, 288, 289, 477, 478,
	479, 337, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 0, 297, 480,
	299, 298, 300, 301, 302, 481, 0, 482, 0, 304,
	0, 483, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	484, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 212,
	0, 0, 485, 486, 338, 339, 0, 340, 341, 342,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 0,
	348, 0, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 489, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 0, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 0, 409, 389, 390, 410, 0,
	411, 493, 412, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 0, 425, 426,
	424, 1789, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 0, 495, 496, 497, 498, 0, 440, 0, 434,
	435, 499, 436, 500, 0, 437, 438, 439, 0, 441,
	442, 0, 0, 443, 444, 445, 446, 448, 0, 449,
	0, 447, 450, 451, 452, 501, 502, 503, 0, 454,
	453, 504, 1782, 0, 207, 0, 455, 456, 505, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 465, 466,
	467, 0, 233, 468, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	469, 470, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 475, 0, 476, 285, 0,
	286, 287, 288, 289, 1781, 478, 479, 337, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 0, 0, 297, 480, 299, 298, 300, 301,
	302, 481, 0, 482, 0, 304, 0, 483, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 484, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 212, 0, 0, 485, 486,
	338, 339, 0, 340, 341, 342, 0, 0, 344, 345,
	346, 0, 0, 347, 487, 0, 348, 0, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 0, 356, 357,
	489, 358, 490, 359, 0, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 0, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 0, 382, 0, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 0,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	0, 409, 389, 390, 410, 0, 411, 493, 412, 413,
	0, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 0, 425, 426, 424, 0, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 0, 495, 496,
	497, 498, 0, 440, 0, 434, 435, 499, 436, 500,
	0, 437, 438, 439, 0, 441, 442, 0, 0, 443,
	444, 445, 446, 448, 0, 449, 0, 447, 450, 451,
	452, 501, 502, 503, 0, 454, 453, 504, 1777, 0,
	207, 0, 455, 456, 505, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	1779, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	0, 454, 453, 504, 1285, 0, 207, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 1284, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 454, 453, 504,
	1282, 0, 207, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	210, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 1281, 478, 479, 337, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 211, 294, 296, 303,
	0, 0, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 0, 483, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 212, 0, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 0, 348, 0, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 0, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 0, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 0, 454, 453, 504, 1279, 0, 207, 0,
	455, 456, 505, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 460, 0, 0, 0,
	0, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 465, 466, 467, 0, 233, 468, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 469, 470, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 0, 210, 0, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 475,
	0, 476, 285, 0, 286, 287, 288, 289, 1278, 478,
	479, 337, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 211, 294, 296, 303, 0, 0, 297, 480,
	299, 298, 300, 301, 302, 481, 0, 482, 0, 304,
	0, 483, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	484, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 212,
	0, 0, 485, 486, 338, 339, 0, 340, 341, 342,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 0,
	348, 0, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 489, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 0, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 0, 409, 389, 390, 410, 0,
	411, 493, 412, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 0, 495, 496, 497, 498, 0, 440, 0, 434,
	435, 499, 436, 500, 0, 437, 438, 439, 0, 441,
	442, 0, 0, 443, 444, 445, 446, 448, 0, 449,
	0, 447, 450, 451, 452, 501, 502, 503, 0, 454,
	453, 504, 1275, 0, 207, 0, 455, 456, 505, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 465, 466,
	467, 0, 233, 468, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	469, 470, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 0, 210, 0, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 475, 0, 476, 285, 0,
	286, 287, 288, 289, 1274, 478, 479, 337, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 211, 294,
	296, 303, 0, 0, 297, 480, 299, 298, 300, 301,
	302, 481, 0, 482, 0, 304, 0, 483, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 484, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 212, 0, 0, 485, 486,
	338, 339, 0, 340, 341, 342, 0, 0, 344, 345,
	346, 0, 0, 347, 487, 0, 348, 0, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 0, 356, 357,
	489, 358, 490, 359, 0, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 0, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 0, 382, 0, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 0,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	0, 409, 389, 390, 410, 0, 411, 493, 412, 413,
	0, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 0, 425, 426, 424, 0, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 0, 495, 496,
	497, 498, 0, 440, 0, 434, 435, 499, 436, 500,
	0, 437, 438, 439, 0, 441, 442, 0, 0, 443,
	444, 445, 446, 448, 0, 449, 0, 447, 450, 451,
	452, 501, 502, 503, 0, 454, 453, 504, 1250, 0,
	207, 0, 455, 456, 505, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 210, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 211, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 212, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	0, 454, 453, 504, 1165, 0, 207, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 1167, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 207, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 210, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	211, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 212, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 207, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 528, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 529, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 530, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 454, 453, 504,
	675, 0, 207, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 477, 478, 479, 337, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 674, 304, 0, 483, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 0, 348, 0, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 0, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 0, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 673, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 0, 454, 453, 504, 513, 0, 207, 0,
	455, 456, 505, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	512, 218, 0, 0, 0, 0, 460, 0, 0, 0,
	0, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 465, 466, 467, 0, 233, 468, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 469, 470, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 475,
	0, 476, 285, 0, 286, 287, 288, 289, 477, 478,
	479, 337, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 480,
	299, 298, 300, 301, 302, 481, 0, 482, 0, 304,
	0, 483, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	484, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 485, 486, 338, 339, 0, 340, 341, 342,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 0,
	348, 0, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 489, 358, 490, 511, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 0, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 0, 409, 389, 390, 410, 0,
	411, 493, 412, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 0, 495, 496, 497, 498, 0, 440, 0, 434,
	435, 499, 436, 500, 0, 437, 438, 439, 0, 441,
	442, 0, 0, 443, 444, 445, 446, 448, 0, 449,
	0, 447, 450, 451, 452, 501, 502, 503, 207, 454,
	453, 504, 0, 0, 0, 0, 455, 456, 505, 457,
	458, 459, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 460, 0, 2140, 0,
	0, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 465, 466, 467, 0, 233, 468, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 469, 470, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 475,
	0, 476, 285, 0, 286, 287, 288, 289, 477, 478,
	479, 337, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 480,
	299, 298, 300, 301, 302, 481, 0, 482, 0, 304,
	0, 483, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	484, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 485, 486, 338, 339, 0, 340, 341, 342,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 0,
	348, 0, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 489, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 0, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 0, 409, 389, 390, 410, 0,
	411, 493, 412, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 0, 495, 496, 497, 498, 0, 440, 0, 434,
	435, 499, 436, 500, 0, 437, 438, 439, 0, 441,
	442, 0, 0, 443, 444, 445, 446, 448, 0, 449,
	0, 447, 450, 451, 452, 501, 502, 503, 0, 454,
	453, 504, 207, 2335, 0, 0, 455, 456, 505, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 477, 478, 479, 337, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 0, 483, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 0, 348, 0, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 0, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 0, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 207, 454, 453, 504, 0, 0, 0, 0,
	455, 456, 505, 457, 458, 459, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	2909, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 477, 478, 479, 337, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 0, 483, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 0, 348, 0, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 0, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 0, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 0, 454, 453, 504, 207, 2335, 0, 0,
	455, 456, 505, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 2332, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 207, 454, 453, 504,
	0, 0, 0, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 213, 214, 215, 216, 217, 1858, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 454, 453, 504,
	1850, 0, 207, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 477, 478, 479, 337, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 0, 483, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 0, 348, 0, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 0, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 0, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 0, 454, 453, 504, 556, 0, 207, 0,
	455, 456, 505, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 460, 0, 0, 0,
	0, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 465, 466, 1025, 0, 233, 468, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 469, 470, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 475,
	0, 476, 285, 0, 286, 287, 288, 289, 477, 478,
	479, 337, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 480,
	299, 298, 300, 301, 302, 481, 0, 482, 0, 304,
	0, 483, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	484, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 557, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 485, 486, 338, 339, 0, 340, 341, 342,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 0,
	348, 0, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 489, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 0, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 553, 395,
	396, 397, 398, 0, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 0, 409, 389, 390, 410, 0,
	411, 493, 412, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 0, 552, 496, 497, 498, 0, 440, 0, 434,
	435, 499, 436, 500, 0, 437, 438, 439, 0, 441,
	442, 0, 0, 443, 444, 445, 446, 448, 0, 449,
	0, 447, 450, 451, 452, 501, 502, 503, 0, 454,
	453, 504, 1801, 0, 207, 0, 455, 456, 505, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 465, 466,
	467, 0, 233, 468, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	469, 470, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 475, 0, 476, 285, 0,
	286, 287, 288, 289, 1800, 478, 479, 337, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 480, 299, 298, 300, 301,
	302, 481, 0, 482, 0, 304, 0, 483, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 484, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 485, 486,
	338, 339, 0, 340, 341, 342, 0, 0, 344, 345,
	346, 0, 0, 347, 487, 0, 348, 0, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 0, 356, 357,
	489, 358, 490, 359, 0, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 0, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 0, 382, 0, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 0,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	0, 409, 389, 390, 410, 0, 411, 493, 412, 413,
	0, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 0, 425, 426, 424, 0, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 0, 495, 496,
	497, 498, 0, 440, 0, 434, 435, 499, 436, 500,
	0, 437, 438, 439, 0, 441, 442, 0, 0, 443,
	444, 445, 446, 448, 0, 449, 0, 447, 450, 451,
	452, 501, 502, 503, 0, 454, 453, 504, 556, 0,
	207, 0, 455, 456, 505, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 546, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 557, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	553, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 1304, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 552, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	0, 454, 453, 504, 1289, 0, 207, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 233, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	243, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 1288, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 320, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	330, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	492, 387, 0, 388, 392, 393, 394, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	407, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	495, 496, 497, 498, 0, 440, 0, 434, 435, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 454, 453, 504,
	1238, 0, 207, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 1237, 478, 479, 337, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 0, 483, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 0, 348, 0, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 0, 383, 384, 385, 386, 492, 387, 0, 388,
	392, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 0, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 0, 454, 453, 504, 1222, 0, 207, 0,
	455, 456, 505, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 460, 0, 0, 0,
	0, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 465, 466, 467, 0, 233, 468, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 469, 470, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 475,
	0, 476, 285, 0, 286, 287, 288, 289, 477, 478,
	479, 337, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 480,
	299, 298, 300, 301, 302, 481, 0, 482, 0, 304,
	0, 483, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	484, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 485, 486, 338, 339, 0, 340, 341, 342,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 0,
	348, 0, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 489, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 0, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 0, 409, 389, 390, 410, 0,
	411, 493, 412, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 0, 495, 496, 497, 498, 0, 440, 0, 434,
	435, 499, 436, 500, 0, 437, 438, 439, 0, 441,
	442, 0, 0, 443, 444, 445, 446, 448, 0, 449,
	0, 447, 450, 451, 452, 501, 502, 503, 0, 454,
	453, 504, 1159, 0, 207, 0, 455, 456, 505, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 465, 466,
	467, 0, 233, 468, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	469, 470, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 475, 0, 476, 285, 0,
	286, 287, 288, 289, 477, 478, 479, 337, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 480, 299, 298, 300, 301,
	302, 481, 0, 482, 0, 304, 0, 483, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 484, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 485, 486,
	338, 339, 0, 340, 341, 342, 0, 0, 344, 345,
	346, 0, 0, 347, 487, 0, 348, 0, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 0, 356, 357,
	489, 358, 490, 359, 0, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 0, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 0, 382, 0, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 0,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	0, 409, 389, 390, 410, 0, 411, 493, 412, 413,
	0, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 0, 425, 426, 424, 0, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 0, 495, 496,
	497, 498, 0, 440, 0, 434, 435, 499, 436, 500,
	0, 437, 438, 439, 0, 441, 442, 0, 0, 443,
	444, 445, 446, 448, 0, 449, 0, 447, 450, 451,
	452, 501, 502, 503, 0, 454, 453, 504, 556, 0,
	207, 0, 455, 456, 505, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 1025, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 557, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	553, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 552, 496, 497, 498, 0, 440,
	0, 434, 1026, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 1008, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	0, 454, 453, 504, 556, 0, 207, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 460, 0, 0, 0, 0, 219,
	220, 221, 222, 461, 462, 223, 463, 224, 225, 464,
	0, 226, 227, 228, 229, 230, 231, 0, 0, 232,
	465, 466, 467, 0, 546, 468, 0, 0, 0, 234,
	235, 236, 237, 238, 0, 240, 241, 242, 239, 0,
	544, 0, 244, 245, 246, 0, 0, 247, 248, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 251, 252,
	253, 254, 469, 470, 0, 255, 0, 257, 256, 0,
	258, 0, 0, 259, 260, 261, 0, 262, 0, 263,
	264, 0, 471, 265, 266, 268, 271, 267, 272, 273,
	274, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	275, 276, 277, 474, 278, 279, 0, 280, 0, 281,
	0, 0, 0, 282, 283, 0, 284, 475, 0, 476,
	285, 0, 286, 287, 288, 289, 477, 478, 479, 337,
	0, 290, 291, 0, 292, 293, 295, 0, 0, 0,
	0, 294, 296, 303, 0, 0, 297, 480, 299, 298,
	300, 301, 302, 481, 0, 482, 0, 304, 0, 483,
	0, 305, 306, 307, 0, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 315, 314, 0, 316, 484, 0,
	317, 318, 0, 0, 319, 545, 0, 0, 321, 322,
	0, 323, 324, 326, 328, 325, 327, 329, 331, 332,
	557, 0, 333, 334, 336, 335, 0, 0, 0, 0,
	485, 486, 338, 339, 0, 340, 341, 342, 0, 0,
	344, 345, 346, 0, 0, 347, 487, 0, 348, 0,
	488, 349, 343, 350, 351, 352, 353, 354, 355, 0,
	356, 357, 489, 358, 490, 359, 0, 360, 0, 361,
	362, 363, 364, 365, 366, 491, 367, 368, 0, 369,
	370, 371, 372, 373, 0, 375, 376, 377, 374, 378,
	379, 380, 381, 0, 382, 0, 383, 384, 385, 386,
	547, 387, 0, 388, 392, 393, 553, 395, 396, 397,
	398, 0, 405, 406, 399, 401, 402, 403, 400, 404,
	548, 408, 0, 409, 389, 390, 410, 0, 411, 493,
	412, 413, 0, 423, 414, 415, 416, 391, 417, 421,
	422, 418, 419, 420, 494, 0, 425, 426, 424, 0,
	427, 428, 429, 430, 431, 269, 432, 270, 433, 0,
	552, 496, 497, 498, 0, 440, 0, 434, 550, 499,
	436, 500, 0, 437, 438, 439, 0, 441, 442, 0,
	0, 443, 444, 445, 446, 448, 0, 449, 0, 447,
	450, 451, 452, 501, 502, 503, 0, 454, 453, 504,
	540, 0, 207, 0, 455, 456, 505, 457, 458, 459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	460, 0, 0, 0, 0, 219, 220, 221, 222, 461,
	462, 223, 463, 224, 225, 464, 0, 226, 227, 228,
	229, 230, 231, 0, 0, 232, 465, 466, 467, 0,
	233, 468, 0, 0, 0, 234, 235, 236, 237, 238,
	0, 240, 241, 242, 239, 0, 243, 0, 244, 245,
	246, 0, 0, 247, 248, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 251, 252, 253, 254, 469, 470,
	0, 255, 0, 257, 256, 0, 258, 0, 0, 259,
	260, 261, 0, 262, 0, 263, 264, 0, 471, 265,
	266, 268, 271, 267, 272, 273, 274, 472, 473, 0,
	0, 0, 0, 0, 0, 0, 275, 276, 277, 474,
	278, 279, 0, 280, 0, 281, 0, 0, 0, 282,
	283, 0, 284, 475, 0, 476, 285, 0, 286, 287,
	288, 289, 477, 478, 479, 337, 0, 290, 291, 0,
	292, 293, 295, 0, 0, 0, 0, 294, 296, 303,
	0, 0, 297, 480, 299, 298, 300, 301, 302, 481,
	0, 482, 0, 304, 0, 483, 0, 305, 306, 307,
	0, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	315, 314, 0, 316, 484, 0, 317, 318, 0, 0,
	319, 320, 0, 0, 321, 322, 0, 323, 324, 326,
	328, 325, 327, 329, 331, 332, 330, 0, 333, 334,
	336, 335, 0, 0, 0, 0, 485, 486, 338, 339,
	0, 340, 341, 342, 0, 0, 344, 345, 346, 0,
	0, 347, 487, 0, 348, 0, 488, 349, 343, 350,
	351, 352, 353, 354, 355, 0, 356, 357, 489, 358,
	490, 359, 0, 360, 0, 361, 362, 363, 364, 365,
	366, 491, 367, 368, 0, 369, 370, 371, 372, 373,
	0, 375, 376, 377, 374, 378, 379, 380, 381, 0,
	382, 0, 383, 384, 385, 386, 492, 387, 0, 388,
	541, 393, 394, 395, 396, 397, 398, 0, 405, 406,
	399, 401, 402, 403, 400, 404, 407, 408, 0, 409,
	389, 390, 410, 0, 411, 493, 412, 413, 0, 423,
	414, 415, 416, 391, 417, 421, 422, 418, 419, 420,
	494, 0, 425, 426, 424, 0, 427, 428, 429, 430,
	431, 269, 432, 270, 433, 0, 495, 496, 497, 498,
	0, 440, 0, 434, 435, 499, 436, 500, 0, 437,
	438, 439, 0, 441, 442, 0, 0, 443, 444, 445,
	446, 448, 0, 449, 0, 447, 450, 451, 452, 501,
	502, 503, 0, 454, 453, 504, 538, 0, 207, 0,
	455, 456, 505, 457, 458, 459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 460, 0, 0, 0,
	0, 219, 220, 221, 222, 461, 462, 223, 463, 224,
	225, 464, 0, 226, 227, 228, 229, 230, 231, 0,
	0, 232, 465, 466, 467, 0, 233, 468, 0, 0,
	0, 234, 235, 236, 237, 238, 0, 240, 241, 242,
	239, 0, 243, 0, 244, 245, 246, 0, 0, 247,
	248, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	251, 252, 253, 254, 469, 470, 0, 255, 0, 257,
	256, 0, 258, 0, 0, 259, 260, 261, 0, 262,
	0, 263, 264, 0, 471, 265, 266, 268, 271, 267,
	272, 273, 274, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 275, 276, 277, 474, 278, 279, 0, 280,
	0, 281, 0, 0, 0, 282, 283, 0, 284, 475,
	0, 476, 285, 0, 286, 287, 288, 289, 477, 478,
	479, 337, 0, 290, 291, 0, 292, 293, 295, 0,
	0, 0, 0, 294, 296, 303, 0, 0, 297, 480,
	299, 298, 300, 301, 302, 481, 0, 482, 0, 304,
	0, 483, 0, 305, 306, 307, 0, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 315, 314, 0, 316,
	484, 0, 317, 318, 0, 0, 319, 320, 0, 0,
	321, 322, 0, 323, 324, 326, 328, 325, 327, 329,
	331, 332, 330, 0, 333, 334, 336, 335, 0, 0,
	0, 0, 485, 486, 338, 339, 0, 340, 341, 342,
	0, 0, 344, 345, 346, 0, 0, 347, 487, 0,
	348, 0, 488, 349, 343, 350, 351, 352, 353, 354,
	355, 0, 356, 357, 489, 358, 490, 359, 0, 360,
	0, 361, 362, 363, 364, 365, 366, 491, 367, 368,
	0, 369, 370, 371, 372, 373, 0, 375, 376, 377,
	374, 378, 379, 380, 381, 0, 382, 0, 383, 384,
	385, 386, 492, 387, 0, 388, 392, 393, 394, 395,
	396, 397, 398, 0, 405, 406, 399, 401, 402, 403,
	400, 404, 407, 408, 0, 409, 389, 390, 410, 0,
	411, 493, 412, 413, 0, 423, 414, 415, 416, 391,
	417, 421, 422, 418, 419, 420, 494, 0, 425, 426,
	424, 0, 427, 428, 429, 430, 431, 269, 432, 270,
	433, 0, 495, 496, 497, 498, 0, 440, 0, 434,
	435, 499, 436, 500, 0, 437, 438, 439, 0, 441,
	442, 0, 0, 443, 444, 445, 446, 448, 0, 449,
	0, 447, 450, 451, 452, 501, 502, 503, 0, 454,
	453, 504, 532, 0, 207, 0, 455, 456, 505, 457,
	458, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 460, 0, 0, 0, 0, 219, 220, 221,
	222, 461, 462, 223, 463, 224, 225, 464, 0, 226,
	227, 228, 229, 230, 231, 0, 0, 232, 465, 466,
	467, 0, 233, 468, 0, 0, 0, 234, 235, 236,
	237, 238, 0, 240, 241, 242, 239, 0, 243, 0,
	244, 245, 246, 0, 0, 247, 248, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 251, 252, 253, 254,
	469, 470, 0, 255, 0, 257, 256, 0, 258, 0,
	0, 259, 260, 261, 0, 262, 0, 263, 264, 0,
	471, 265, 266, 268, 271, 267, 272, 273, 274, 472,
	473, 0, 0, 0, 0, 0, 0, 0, 275, 276,
	277, 474, 278, 279, 0, 280, 0, 281, 0, 0,
	0, 282, 283, 0, 284, 475, 0, 476, 285, 0,
	286, 287, 288, 289, 477, 478, 479, 337, 0, 290,
	291, 0, 292, 293, 295, 0, 0, 0, 0, 294,
	296, 303, 0, 0, 297, 480, 299, 298, 300, 301,
	302, 481, 0, 482, 0, 304, 0, 483, 0, 305,
	306, 307, 0, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 315, 314, 0, 316, 484, 0, 317, 318,
	0, 0, 319, 320, 0, 0, 321, 322, 0, 323,
	324, 326, 328, 325, 327, 329, 331, 332, 330, 0,
	333, 334, 336, 335, 0, 0, 0, 0, 485, 486,
	338, 339, 0, 340, 341, 342, 0, 0, 344, 345,
	346, 0, 0, 347, 487, 0, 348, 0, 488, 349,
	343, 350, 351, 352, 353, 354, 355, 0, 356, 357,
	489, 358, 490, 359, 0, 360, 0, 361, 362, 363,
	364, 365, 366, 491, 367, 368, 0, 369, 370, 371,
	372, 373, 0, 375, 376, 377, 374, 378, 379, 380,
	381, 0, 382, 0, 383, 384, 385, 386, 492, 387,
	0, 388, 392, 393, 394, 395, 396, 397, 398, 0,
	405, 406, 399, 401, 402, 403, 400, 404, 407, 408,
	0, 409, 389, 390, 410, 0, 411, 493, 412, 413,
	0, 423, 414, 415, 416, 391, 417, 421, 422, 418,
	419, 420, 494, 0, 425, 426, 424, 0, 427, 428,
	429, 430, 431, 269, 432, 270, 433, 0, 495, 496,
	497, 498, 0, 440, 0, 434, 435, 499, 436, 500,
	0, 437, 438, 439, 0, 441, 442, 0, 0, 443,
	444, 445, 446, 448, 0, 449, 0, 447, 450, 451,
	452, 501, 502, 503, 0, 454, 453, 504, 508, 0,
	207, 0, 455, 456, 505, 457, 458, 459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	2608, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	2606, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	2594, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	2295, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 541, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	1813, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 0, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	1258, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	1200, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 285, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 352,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 364, 365, 366, 491,
	963, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 387, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	207, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 219, 220, 221, 222, 461, 462, 223,
	463, 224, 225, 464, 0, 226, 227, 228, 229, 230,
	231, 0, 0, 232, 465, 466, 467, 0, 233, 468,
	0, 0, 0, 234, 235, 236, 237, 238, 0, 240,
	241, 242, 239, 0, 243, 0, 244, 245, 246, 0,
	0, 247, 248, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 251, 252, 253, 254, 469, 470, 0, 255,
	0, 257, 256, 0, 258, 0, 0, 259, 260, 261,
	0, 262, 0, 263, 264, 0, 471, 265, 266, 268,
	271, 267, 272, 273, 274, 472, 473, 0, 0, 0,
	0, 0, 0, 0, 275, 276, 277, 474, 278, 279,
	0, 280, 0, 281, 0, 0, 0, 282, 283, 0,
	284, 475, 0, 476, 0, 0, 286, 287, 288, 289,
	477, 478, 479, 337, 0, 290, 291, 0, 292, 293,
	295, 0, 0, 0, 0, 294, 296, 303, 0, 0,
	297, 480, 299, 298, 300, 301, 302, 481, 0, 482,
	0, 304, 0, 483, 0, 305, 306, 307, 0, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 315, 314,
	0, 316, 484, 0, 317, 318, 0, 0, 319, 320,
	0, 0, 321, 322, 0, 323, 324, 326, 328, 325,
	327, 329, 331, 332, 330, 0, 333, 334, 336, 335,
	0, 0, 0, 0, 485, 486, 338, 339, 0, 340,
	341, 342, 0, 0, 344, 345, 346, 0, 0, 347,
	487, 0, 348, 0, 488, 349, 343, 350, 351, 0,
	353, 354, 355, 0, 356, 357, 489, 358, 490, 359,
	0, 360, 0, 361, 362, 363, 0, 365, 366, 491,
	367, 368, 0, 369, 370, 371, 372, 373, 0, 375,
	376, 377, 374, 378, 379, 380, 381, 0, 382, 0,
	383, 384, 385, 386, 492, 0, 0, 388, 392, 393,
	394, 395, 396, 397, 398, 0, 405, 406, 399, 401,
	402, 403, 400, 404, 407, 408, 0, 409, 389, 390,
	410, 0, 411, 493, 412, 413, 0, 423, 414, 415,
	416, 391, 417, 421, 422, 418, 419, 420, 494, 0,
	425, 426, 424, 0, 427, 428, 429, 430, 431, 269,
	432, 270, 433, 0, 495, 496, 497, 498, 0, 440,
	0, 434, 435, 499, 436, 500, 0, 437, 438, 439,
	0, 441, 442, 0, 0, 443, 444, 445, 446, 448,
	0, 449, 0, 447, 450, 451, 452, 501, 502, 503,
	0, 454, 453, 504, 0, 0, 0, 0, 455, 456,
	505, 457, 458, 459, 1414, 1415, 0, 1447, 1448, 1449,
	1457, 1458, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1416, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	1414, 1415, 1433, 1447, 1448, 1449, 1457, 1458, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1416, 0, 0, 0, 1439, 1440, 1441,
	1442, 1436, 0, 0, 0, 0, 0, 1422, 1433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1454, 0, 0, 1464, 0, 0, 0, 1444, 1445,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 1461, 0, 1439, 1440, 1441, 1442, 0, 1431, 1432,
	0, 0, 0, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 1454, 0, 0,
	1464, 0, 0, 0, 1444, 1445, 1446, 0, 658, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 1460, 0, 1461, 0, 0,
	0, 640, 0, 0, 1431, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 641, 0, 0, 1443, 0, 0, 0, 0,
	0, 642, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 643, 0, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 663, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 0, 644, 0, 0,
	1414, 1415, 0, 1447, 1448, 1449, 1457, 1458, 1459, 0,
	0, 1443, 0, 0, 645, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 1438,
	1463, 0, 0, 0, 646, 0, 0, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1416, 1455, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 662, 0, 0, 0, 1433, 0,
	0, 1453, 0, 0, 1428, 1429, 1435, 1434, 1430, 1456,
	0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424,
	0, 0, 0, 0, 0, 0, 0, 2465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1439, 1440, 1441, 1442, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1453, 0, 0,
	1428, 1429, 1435, 1434, 1430, 1456, 0, 1427, 1425, 1426,
	1418, 1419, 1420, 1421, 1423, 1424, 649, 1454, 0, 0,
	1464, 0, 0, 2464, 1444, 1445, 1446, 0, 0, 0,
	0, 0, 666, 650, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 1461, 0, 0,
	0, 0, 0, 0, 1431, 1432, 0, 0, 0, 0,
	665, 0, 0, 0, 0, 0, 0, 651, 0, 1452,
	652, 0, 0, 0, 0, 0, 660, 1437, 0, 0,
	0, 0, 0, 653, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 0, 654, 661, 0, 0, 0, 0, 0, 0,
	0, 0, 655, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 657, 0, 0, 0, 0, 656,
	1414, 1415, 0, 1447, 1448, 1449, 1457, 1458, 1459, 0,
	664, 1443, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 659, 0, 0, 0, 0, 1417, 0, 0, 1438,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1416, 1455, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 1414, 1415, 1433, 1447,
	1448, 1449, 1457, 1458, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1416,
	0, 0, 0, 1439, 1440, 1441, 1442, 1436, 0, 0,
	0, 0, 0, 1422, 1433, 0, 0, 1453, 0, 0,
	1428, 1429, 1435, 1434, 1430, 1456, 0, 1427, 1425, 1426,
	1418, 1419, 1420, 1421, 1423, 1424, 0, 1454, 0, 0,
	1464, 0, 0, 2461, 1444, 1445, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 1461, 0, 1439,
	1440, 1441, 1442, 0, 1431, 1432, 0, 0, 0, 1422,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 1454, 0, 0, 1464, 0, 0, 0,
	1444, 1445, 1446, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 1460, 0, 1461, 0, 0, 0, 0, 0, 0,
	1431, 1432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 1447,
	1448, 1449, 1457, 1458, 1459, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 1438, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1416,
	1455, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 1453, 0, 0,
	1428, 1429, 1435, 1434, 1430, 1456, 0, 1427, 1425, 1426,
	1418, 1419, 1420, 1421, 1423, 1424, 0, 0, 0, 0,
	0, 0, 0, 2460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1439,
	1440, 1441, 1442, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 1453, 0, 0, 1428, 1429, 1435, 1434,
	1430, 1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 0, 1454, 0, 0, 1464, 0, 0, 2459,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1461, 0, 0, 0, 0, 0, 0,
	1431, 1432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 1447,
	1448, 1449, 1457, 1458, 1459, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 1438, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1416,
	1455, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 1414, 1415, 1433, 1447, 1448, 1449, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1416, 0, 0, 0, 1439,
	1440, 1441, 1442, 1436, 0, 0, 0, 0, 0, 1422,
	1433, 0, 0, 1453, 0, 0, 1428, 1429, 1435, 1434,
	1430, 1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 0, 1454, 0, 0, 1464, 0, 0, 2016,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1461, 0, 1439, 1440, 1441, 1442, 0,
	1431, 1432, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 1454,
	0, 0, 1464, 0, 0, 0, 1444, 1445, 1446, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 1460, 0, 1461,
	0, 0, 0, 0, 0, 0, 1431, 1432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1414, 1415, 0, 1447, 1448, 1449,
	1457, 1458, 1459, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	1417, 1438, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 1416, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 1433, 1453, 0, 0, 1428, 1429, 1435, 1434,
	1430, 1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 0, 0, 0, 0, 3320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 1440, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1422, 0, 1453,
	0, 0, 1428, 1429, 1435, 1434, 1430, 1456, 0, 1427,
	1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424, 0, 0,
	0, 1454, 3316, 0, 1464, 0, 0, 0, 1444, 1445,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 1461, 0, 0, 0, 0, 0, 0, 1431, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 1447,
	1448, 1449, 1457, 1458, 1459, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 1417, 1438, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1416,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 1414, 1415, 1433, 1447, 1448, 1449, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1416, 0, 0, 0, 1439,
	1440, 1441, 1442, 1436, 0, 0, 0, 0, 0, 1422,
	1433, 1453, 0, 0, 1428, 1429, 1435, 1434, 1430, 1456,
	0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424,
	0, 0, 0, 1454, 3248, 0, 1464, 0, 0, 0,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1461, 0, 1439, 1440, 1441, 1442, 0,
	1431, 1432, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 1454,
	0, 0, 1464, 0, 0, 0, 1444, 1445, 1446, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 1460, 0, 1461,
	0, 0, 0, 0, 0, 0, 1431, 1432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1414, 1415, 0, 1447, 1448, 1449,
	1457, 1458, 1459, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	1417, 1438, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 1416, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 1433, 1453, 0, 0, 1428, 1429, 1435, 1434,
	1430, 1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 0, 0, 0, 0, 3247, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 1440, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1422, 0, 1453,
	0, 0, 1428, 1429, 1435, 1434, 1430, 1456, 0, 1427,
	1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424, 0, 0,
	0, 1454, 3150, 0, 1464, 0, 0, 0, 1444, 1445,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 1461, 0, 0, 0, 0, 0, 0, 1431, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 1447,
	1448, 1449, 1457, 1458, 1459, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 1417, 1438, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1416,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 1414, 1415, 1433, 1447, 1448, 1449, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1416, 0, 0, 0, 1439,
	1440, 1441, 1442, 1436, 0, 0, 0, 0, 0, 1422,
	1433, 1453, 0, 0, 1428, 1429, 1435, 1434, 1430, 1456,
	0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424,
	0, 0, 0, 1454, 3069, 0, 1464, 0, 0, 0,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1461, 0, 1439, 1440, 1441, 1442, 0,
	1431, 1432, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 1454,
	0, 0, 1464, 0, 0, 0, 1444, 1445, 1446, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 1460, 0, 1461,
	0, 0, 0, 0, 0, 0, 1431, 1432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1414, 1415, 0, 1447, 1448, 1449,
	1457, 1458, 1459, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	1417, 1438, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 1416, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 1433, 1453, 0, 0, 1428, 1429, 1435, 1434,
	1430, 1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 0, 0, 0, 0, 3021, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 1440, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1422, 0, 1453,
	0, 0, 1428, 1429, 1435, 1434, 1430, 1456, 0, 1427,
	1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424, 0, 0,
	0, 1454, 3020, 0, 1464, 0, 0, 0, 1444, 1445,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 1461, 0, 0, 0, 0, 0, 0, 1431, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 1447,
	1448, 1449, 1457, 1458, 1459, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 1417, 1438, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 1416,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 1414, 1415, 1433, 1447, 1448, 1449, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1416, 0, 0, 0, 1439,
	1440, 1441, 1442, 1436, 0, 0, 0, 0, 0, 1422,
	1433, 1453, 0, 0, 1428, 1429, 1435, 1434, 1430, 1456,
	0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424,
	0, 0, 0, 1454, 3019, 0, 1464, 0, 0, 0,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1461, 0, 1439, 1440, 1441, 1442, 0,
	1431, 1432, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 1454,
	0, 0, 1464, 0, 0, 0, 1444, 1445, 1446, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 1460, 0, 1461,
	0, 0, 0, 0, 0, 0, 1431, 1432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1414, 1415, 0, 1447, 1448, 1449,
	1457, 1458, 1459, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	1417, 1438, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 1416, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 1433, 1453, 0, 0, 1428, 1429, 1435, 1434,
	1430, 1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 0, 0, 0, 0, 2985, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 1440, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1422, 0, 1453,
	0, 0, 1428, 1429, 1435, 1434, 1430, 1456, 0, 1427,
	1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424, 0, 0,
	0, 1454, 2793, 0, 1464, 0, 0, 0, 1444, 1445,
	1446, 0, 0, 0, 0, 1414, 1415, 0, 1447, 1448,
	1449, 1457, 1458, 1459, 0, 0, 0, 0, 0, 1460,
	0, 1461, 0, 0, 0, 0, 0, 0, 1431, 1432,
	0, 1417, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 1416, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 1462,
	0, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1414, 1415, 0, 1447, 1448, 1449,
	1457, 1458, 1459, 0, 0, 1443, 0, 0, 1439, 1440,
	1441, 1442, 0, 1450, 0, 0, 0, 0, 1422, 0,
	1417, 0, 0, 1438, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1454, 0, 0, 1464, 0, 1416, 1455, 1444,
	1445, 1446, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 0, 0, 0,
	0, 0, 1437, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 1440, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1422, 3411, 0,
	0, 1453, 0, 0, 1428, 1429, 1435, 1434, 1430, 1456,
	0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424,
	0, 1454, 2416, 0, 1464, 0, 0, 0, 1444, 1445,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 1460,
	0, 1461, 0, 0, 0, 0, 0, 0, 1431, 1432,
	0, 0, 0, 0, 1438, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 1455,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3410, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1414, 1415, 0, 1447, 1448, 1449,
	1457, 1458, 1459, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 2387, 0,
	1417, 0, 1453, 1438, 1463, 1428, 1429, 1435, 1434, 1430,
	1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423,
	1424, 0, 0, 0, 0, 0, 0, 1416, 1455, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1439, 1440, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1422, 0, 0,
	0, 1453, 0, 0, 1428, 1429, 1435, 1434, 1430, 1456,
	0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424,
	0, 1454, 0, 0, 1464, 0, 0, 0, 1444, 1445,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 1461, 0, 0, 0, 0, 0, 0, 1431, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1414, 1415, 0, 1447, 1448, 1449,
	1457, 1458, 1459, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 1438, 1463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1416, 1455, 0,
	0, 0, 0, 2107, 0, 1436, 0, 0, 0, 0,
	1414, 1415, 1433, 1447, 1448, 1449, 1457, 1458, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 2106, 0, 0, 1417, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1416, 0, 0, 0, 1439, 1440, 1441,
	1442, 1436, 0, 0, 0, 0, 0, 1422, 1433, 2504,
	0, 1453, 2503, 0, 1428, 1429, 1435, 1434, 1430, 1456,
	0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424,
	0, 1454, 0, 0, 1464, 0, 0, 0, 1444, 1445,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 1461, 0, 1439, 1440, 1441, 1442, 0, 1431, 1432,
	0, 0, 0, 1422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 0, 0, 0, 0, 0, 0,
	0, 1437, 0, 0, 0, 0, 0, 1454, 0, 0,
	1464, 0, 0, 0, 1444, 1445, 1446, 0, 0, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 1460, 0, 1461, 0, 0,
	0, 0, 0, 0, 1431, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 1438, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1455, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1414, 1415, 0, 1447, 1448, 1449, 1457, 1458, 1459, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 1438,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1416, 1455, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 1453, 0, 0, 1428, 1429, 1435, 1434, 1430, 1456,
	0, 1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1439, 1440, 1441, 1442, 0, 0, 0,
	0, 0, 0, 1422, 0, 0, 0, 1453, 0, 0,
	1428, 1429, 1435, 1434, 1430, 1456, 0, 1427, 1425, 1426,
	1418, 1419, 1420, 1421, 1423, 1424, 0, 1454, 0, 0,
	1464, 0, 0, 0, 1444, 1445, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 1461, 0, 0,
	0, 0, 0, 0, 1431, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 806, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1414, 1415, 0, 1447, 1448, 1449, 1457, 1458, 1459, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 1438,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1416, 1455, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 1414, 1415, 1433, 1447,
	1448, 1449, 1457, 1458, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1416,
	0, 0, 0, 1439, 1440, 1441, 1442, 1436, 0, 0,
	0, 0, 0, 1422, 1433, 0, 0, 1453, 0, 0,
	1428, 1429, 1435, 1434, 1430, 1456, 0, 1427, 1425, 1426,
	1418, 1419, 1420, 1421, 1423, 1424, 0, 1454, 0, 0,
	1464, 0, 0, 0, 1444, 1445, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 1461, 0, 1439,
	1440, 1441, 1442, 0, 1431, 1432, 0, 0, 0, 1422,
	0, 0, 0, 0, 2510, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 1437, 0, 0,
	0, 0, 0, 1454, 0, 0, 1464, 0, 0, 0,
	1444, 1445, 1446, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 1460, 0, 1461, 0, 0, 0, 0, 0, 0,
	1431, 1432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1455, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 1447,
	1448, 1449, 1457, 1458, 1459, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 1450, 2781, 0, 0, 2505,
	0, 0, 1417, 0, 0, 1438, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1416,
	1455, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 1453, 0, 0,
	1428, 1429, 1435, 1434, 1430, 1456, 0, 1427, 1425, 1426,
	1418, 1419, 1420, 1421, 1423, 1424, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1439,
	1440, 1441, 1442, 0, 0, 0, 0, 0, 0, 1422,
	0, 0, 0, 1453, 0, 0, 1428, 1429, 1435, 1434,
	1430, 1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 0, 1454, 0, 0, 1464, 0, 0, 0,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1461, 0, 0, 0, 0, 0, 0,
	1431, 1432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1414, 1415, 0, 1447,
	1448, 1449, 1457, 1458, 1459, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 1438, 1463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1416,
	1455, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 1414, 1415, 1433, 1447, 1448, 1449, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 2458, 0, 0, 1417, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1416, 0, 0, 0, 1439,
	1440, 1441, 1442, 1436, 0, 0, 0, 0, 0, 1422,
	1433, 0, 0, 1453, 0, 0, 1428, 1429, 1435, 1434,
	1430, 1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 0, 1454, 0, 0, 1464, 0, 0, 0,
	1444, 1445, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1460, 0, 1461, 0, 1439, 1440, 1441, 1442, 0,
	1431, 1432, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 0, 0, 0, 0,
	0, 0, 0, 1437, 0, 0, 0, 0, 0, 1454,
	0, 0, 1464, 0, 0, 0, 1444, 1445, 1446, 0,
	0, 1462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1451, 1460, 0, 1461,
	0, 0, 0, 0, 0, 0, 1431, 1432, 0, 0,
	0, 0, 2472, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	0, 0, 0, 0, 0, 1438, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1455, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1414, 1415, 0, 1447, 1448, 1449, 1457, 1458,
	1459, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 1438, 1463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1416, 1455, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 1453, 0, 0, 1428, 1429, 1435, 1434,
	1430, 1456, 0, 1427, 1425, 1426, 1418, 1419, 1420, 1421,
	1423, 1424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1439, 1440, 1441, 1442, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 0, 1453,
	0, 0, 1428, 1429, 1435, 1434, 1430, 1456, 0, 1427,
	1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424, 0, 1454,
	0, 0, 1464, 0, 0, 0, 1444, 1445, 1446, 0,
	0, 0, 0, 1414, 1415, 0, 1447, 1448, 1449, 1457,
	1458, 1459, 0, 0, 0, 0, 0, 1460, 0, 1461,
	0, 0, 1450, 0, 0, 0, 1431, 1432, 0, 1417,
	0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 1416, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 1462, 0, 0,
	0, 1433, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 1439, 1440, 1441, 1442,
	0, 0, 0, 0, 0, 0, 1422, 0, 0, 0,
	0, 1438, 0, 0, 0, 0, 0, 0, 0, 1414,
	1415, 0, 1447, 1448, 1449, 1457, 1458, 1459, 0, 0,
	1454, 0, 0, 1464, 0, 0, 1455, 1444, 1445, 1446,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	1461, 0, 0, 0, 0, 0, 0, 1431, 1432, 0,
	0, 0, 1416, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 1452, 0, 0, 0, 0, 1433, 0, 0,
	1437, 0, 0, 598, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 599, 0, 0, 1453,
	0, 0, 1428, 1429, 1435, 1434, 1430, 1456, 0, 1427,
	1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424, 0, 0,
	0, 0, 1439, 1440, 1441, 1442, 0, 600, 619, 0,
	0, 0, 1422, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 0, 601, 0,
	0, 602, 0, 0, 0, 0, 1454, 0, 0, 1464,
	0, 0, 1438, 1444, 1445, 1446, 0, 625, 0, 0,
	0, 0, 0, 603, 0, 0, 0, 0, 0, 0,
	0, 0, 623, 0, 1460, 0, 1461, 1455, 0, 0,
	0, 0, 0, 1431, 1432, 0, 0, 0, 0, 604,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	0, 0, 0, 0, 0, 0, 1437, 0, 0, 605,
	0, 0, 606, 629, 0, 0, 0, 632, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 0, 1428, 1429, 1435, 1434, 1430, 1456, 0,
	1427, 1425, 1426, 1418, 1419, 1420, 1421, 1423, 1424, 0,
	1443, 0, 0, 0, 628, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 1455, 0, 0, 0, 0, 0, 0,
	0, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 631, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 612, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 0, 0, 0, 0, 0, 1453, 0, 0, 1428,
	1429, 1435, 1434, 1430, 1456, 618, 1427, 1425, 1426, 1418,
	1419, 1420, 1421, 1423, 1424, 0, 0, 614, 0, 0,
	627, 0, 626, 0, 0, 0, 0, 615, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	0, 0, 0, 0, 622, 0, 0, 0, 0, 633,
	0, 630, 0, 0, 0, 620,
}
var sqlPact = [...]int{

	3703, -1000, -1000, -1000, -1000, -1000, -1000, 267, 266, 261,
	260, 259, 258, 257, 255, 253, -1000, -1000, -1000, 252,
	-1000, -1000, 251, -1000, 248, 247, 244, 243, -1000, 241,
	240, -1000, -1000, -1000, -1000, 239, 194, 188, 49022, 1647,
	58556, 50264, 1727, 2110, 43632, 58140, 43216, 57724, 57308, 179,
	-1000, 56892, 177, 176, 174, -1000, -1000, 167, 1363, 35282,
	163, 160, 157, 1794, 154, 153, -1000, 151, -1000, 69811,
	1236, -1000, 150, 149, -1000, 63726, 304, 49848, 2044, 145,
	144, 34865, 2041, -1000, -1000, 1553, -1000, -1000, 141, 137,
	136, 134, 133, 130, 123, 120, 111, -1000, 108, 94,
	91, 88, 86, 85, 84, 82, 79, 77, 76, 75,
	74, 73, 72, 70, 69, -1000, 6603, 1515, 1375, 1366,
	1342, 1324, 1364, 864, 67, 66, 65, 62, 56, 55,
	-1000, -1000, 54, 52, 51, 47, -1000, 45, 44, 146,
	43, 40, 37, 36, 28, 2114, 2028, 1323, 607, 16637,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	62656, 58966, 24, -141, 23, -1000, 2362, 887, 29449, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 476,
	-1000, -1000, -1000, 320, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1625, 676, -1000, -1000,
	-1000, 56476, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	58966, -1000, 1644, -48, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 675, -1000, 1639, 249, 1532, -1000, -1000, -1000, -1000,
	-1000, 58966, -1000, -1000, 2675, 2670, 1520, 674, 56066, -1000,
	1190, -1000, 820, 19284, -1000, 1029, -1000, 19284, 315, -1000,
	-1000, -1000, -1000, -1000, 42800, 13566, 42384, 41968, 39068, 55650,
	13140, 48612, 1047, -1000, -1000, -1000, -1000, -1000, 5, 36512,
	58966, -1000, 312, -1000, -1000, -1000, -1000, -1000, -1000, 25573,
	557, 25121, 632, 24669, 629, -1000, -1000, -1000, -1000, 2667,
	2666, 926, 2665, 2315, 62246, 1390, 2663, 1314, 982, 868,
	2662, 2659, 2654, 2653, 2651, 2648, 2647, 1189, 55234, 2062,
	38642, 38216, 49022, 49022, 1852, 54818, -1000, -1000, 1103, 1089,
	-1000, -1000, -1000, -1000, 2184, 2102, 2064, 48196, -1000, -1000,
	2646, 2644, 2643, 2642, 2640, 61836, 1358, 2638, 1776, 2636,
	2634, 2628, 2625, 2624, 2622, 2620, 2618, 2617, -1000, 47780,
	47364, 46948, 46532, 54402, 37790, 37364, -1000, -1000, -1000, 31109,
	4922, 53986, 31963, 49022, 49022, -1000, -1000, 26012, 95, -1000,
	-1000, -1000, 2022, -1000, 26012, 95, -1000, 2052, 1442, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1645, 1293, 2494,
	36938, 1508, 1180, 2183, 2610, 1793, 2179, 2171, 2167, 2163,
	2157, 1275, 1814, 1247, 1257, 2149, 2141, 2512, 1486, 41552,
	2605, 2604, 2337, 2112, 2021, -1000, -1000, -1000, -1000, 1215,
	-1000, -1000, -1000, -1000, -1000, 44042, -1000, -1000, 1024, -1000,
	-1000, 1024, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1046,
	61016, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1351, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1802, -1000, 1496, -1000, -1000,
	2602, 2028, 1799, 2340, 2340, 2340, 2373, 445, 436, -1000,
	146, -1000, -1000, 69411, -1000, -1000, 26012, 26012, 26012, 26012,
	26012, 1471, -1000, 673, -1000, -1000, 714, -1000, 672, 606,
	-1000, -1000, -1000, -1000, -1000, -1000, 671, 2515, -1000, 883,
	-1000, -1000, -1000, -1000, 2487, -1000, 15746, -1000, -1000, -1000,
	457, 670, 26012, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 311,
	829, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 591, 1376, 589, 589, 589,
	-1000, -1000, 861, -1000, -1000, -1000, 318, 587, 305, 585,
	-1000, -1000, -1000, -1000, 2048, 669, 668, -1000, 667, 665,
	664, -1000, -1000, -1000, 663, 662, 661, 660, 655, 646,
	645, 644, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 859,
	-1000, 642, 641, 639, 636, 634, 631, 630, 625, 624,
	-1000, -1000, 3, 58966, -1000, 476, 3, -1000, -1000, 619,
	-1000, 19723, 19723, 19723, -1000, -1000, 1632, 26012, -1000, 2305,
	-1000, 456, -231, 793, 30277, -1000, 28602, 793, 724, 33207,
	-1000, 2019, -1000, -1000, 614, 308, -1000, -1000, 2012, 58966,
	13990, 58966, 49022, 49022, -1000, 2259, 26012, -1000, -1000, 39492,
	36102, 58966, 49432, 2438, 9216, 36102, 58966, 2047, -1000, -1000,
	-1000, 58966, -1000, 26012, -1000, 2430, 1151, -6, -1000, -1000,
	-1000, -1000, -1000, -1000, 1761, 1786, 980, 1676, 1155, -1000,
	19284, 2308, -1000, -1000, -1000, 306, 13990, -1000, 1367, 2228,
	1090, -1000, 1671, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1328, 2227, -1000, 1473, 2223, 1321, -1000, -1000, 845,
	2220, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1555, -1000, -1000, 2329, -1000, -1000, 1749, 2219, -152, -1000,
	-1000, 39492, 36512, 1, -1000, -1000, -43, -1000, 12714, 69411,
	-1000, -1000, -1000, 69411, 803, -1000, -1000, 2216, -1000, 69411,
	788, -1000, -1000, 2211, -1000, -1000, -1000, 2600, -1000, 2599,
	1725, 2597, 2590, 2589, -1000, 1159, 1353, 2588, -1000, 2583,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 46116, 45700, 867,
	-1000, 1628, -1000, -1000, 45284, 840, 1721, -1000, -1000, 1720,
	-1000, 858, -1000, 2582, 53570, 1877, 840, 1718, -1000, -1000,
	-1000, -1000, -1000, 49022, -1000, 49022, -1000, 49022, -1000, 1165,
	-1000, 61426, -231, -1000, -1000, -1000, -1000, -1000, 2204, 2581,
	2580, 2579, -1000, 58966, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 182, 2202, -1000, -1000, 182, 2193, -1000,
	182, 2191, -1000, 164, 2190, -1000, -1000, 1568, 2172, -1000,
	-101, 2169, -1000, -1000, -101, 2158, -1000, -7, -1000, -1000,
	-1000, 887, -1000, 30693, 53154, 39492, 834, 666, 610, 69411,
	-1000, 39492, 69411, -1000, 45284, -1000, 52738, 44874, -1000, -1000,
	1094, 1796, -1000, -1000, -1000, -1000, 39492, 39492, -1000, 52322,
	-1000, 1522, 1235, 2338, 49022, -1000, -1000, 2045, -1000, 35692,
	49022, -1000, 49022, -1000, 49022, -1000, 49022, -1000, 49022, -1000,
	2577, 2576, 2573, 2181, 1373, 1362, 58966, -1000, -1000, 2345,
	58966, -1000, 58966, -1000, -1000, -1000, 1760, -1000, -1000, -1000,
	-1000, 49022, -1000, -1000, -1000, -1000, -1000, -1000, 2043, -1000,
	1299, -1000, 1078, -1000, -1000, 205, -1000, -1000, -6, -1000,
	61016, -1000, -1000, 2028, 1799, -1000, 58966, -1000, -1000, -1000,
	2028, 1657, 1844, 24217, 1850, 26012, 146, -1000, -1000, 146,
	146, 18845, -1000, -1000, 9216, 9216, 13990, 1060, 26012, 26012,
	26012, 26012, 26012, 26012, 26012, 26012, 26012, 26012, 26012, 26012,
	26012, 26012, 26012, 26012, 26012, 26012, 26012, 26012, 26012, 26012,
	26012, 26012, 26012, 26012, 26012, 26012, 26012, 26012, 26012, 26012,
	26012, 26012, 26012, 1739, 26012, 1044, 26012, 26012, 26012, 26012,
	1613, -1000, -1000, 1482, 512, 1511, -1000, 2473, 2473, 2473,
	69728, 69728, 577, 2571, 714, -1000, 26012, -1000, 95, 26012,
	14416, -1000, 2505, 1135, -1000, -1000, 436, 8342, 1703, -1000,
	433, 14868, -1000, -1000, -1000, 15746, 606, 23765, 26012, 853,
	69411, 12290, 2051, 1935, -1000, 2504, -1000, -1000, 2491, -1000,
	-1000, -1000, -1000, 2491, 1054, 1053, 2501, -1000, 2491, 2491,
	602, 755, 751, 749, 746, 626, 26012, 26012, 26012, 26012,
	26012, 26012, 26012, 26012, -1000, 23326, 22874, 22422, 27329, 21970,
	26012, 16185, 21518, 21066, 58966, 3, 2429, 26012, 124, -1000,
	67879, -1000, 124, 124, 601, -8, 69411, 1866, 1866, 29863,
	1484, 1504, 1504, 1504, -1000, 599, 688, 19, 18, 16,
	-1000, -1000, 15, 14, 793, 9730, 50674, 1509, 793, 793,
	292, 314, 432, 28188, 2305, 50674, -1000, -1000, 49022, 598,
	14416, 13990, 1122, -16, 283, 1829, 1828, 1804, -1000, 1241,
	-20, 834, 1043, -42, -1000, 4547, -22, -1000, 1107, -1000,
	-1000, -1000, -1000, 175, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 857, 596, 592, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 591, 1376, 589, 589, 589, -1000, -1000, -1000, 318,
	587, 305, 585, -1000, -1000, -1000, -1000, -1000, -1000, 2011,
	-43, 49432, 787, -31, 972, -6, -1000, 1024, -1000, 1217,
	-1000, -1000, -1000, -1000, -1000, -1000, 1106, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2514, -1000, 2478, -1000, -1000, 2500,
	2, -1000, -1000, 13990, -1000, -17, 1333, -1000, 41136, 2332,
	2331, 2324, 1148, -1000, 1132, 2367, 44042, 2400, 49, -1000,
	2009, -1000, -1000, 818, 1298, 1040, 44042, 1473, -1000, 9216,
	-1000, 1897, 2366, 1175, 1160, 1175, 1175, 1158, -1000, 44042,
	1037, 1420, 39492, -1000, 1036, -1000, -21, 2398, 29, -1000,
	2005, 1034, -1000, -1000, 49022, 13990, 791, 1, 36512, 58966,
	272, -1000, 26012, 95, 26012, 95, -1000, -1000, 2156, -1000,
	-1000, -1000, 2567, 1347, 1774, -1000, -1000, -1000, 584, 1711,
	1473, 1709, -1000, -1000, 44458, 2004, 58966, 1833, -3, 49022,
	-1000, -1000, 1408, -1000, 2153, 2148, 609, 2566, -1000, 1616,
	1708, -1000, -1000, -1000, 60606, 1045, 2145, 850, 125, 2423,
	125, 34035, -1000, 58966, -1000, 58966, -1000, -1000, -1000, 2564,
	-1000, 49022, -1000, -1000, 49022, -1000, 49022, -1000, 49022, -1000,
	49022, 49022, -1000, 58966, 39492, 39492, 39492, 4612, 40316, -33,
	428, -1000, 51912, 58966, 894, 40726, 58966, -200, 834, 791,
	-1000, 791, -1000, 49022, 2042, -1000, -1000, -1000, -1000, -1000,
	-1000, 2559, 2553, -1000, 839, -1000, 58966, -1000, 58966, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1196, -1000,
	2036, -1000, 2033, -1000, 42, -1000, -1000, -1000, -1000, -1000,
	1772, 49022, 49022, 49022, -1000, 44042, -1000, -1000, 2028, -1000,
	-1000, -1000, -1000, -1000, 69411, -1000, 509, -1000, -1000, 69411,
	1246, 1840, -1000, 1840, -2, -1000, 67533, 1800, 49022, -1000,
	-1000, -1000, -1000, -1000, 816, 750, 750, 1033, 1033, 1033,
	1033, 2419, 4270, 4665, 3740, 4024, 4024, 4024, 4024, 4024,
	4024, 4024, 4024, 705, 245, 245, 705, 705, 705, 705,
	705, 245, 245, 245, 4024, 4024, 4024, 69728, 69582, 6108,
	26012, 26012, 1032, 1454, 512, 5861, 26012, 238, 238, 238,
	238, -1000, 1264, -1000, -1000, -1000, -1000, 2001, 583, 27329,
	27329, -1000, -1000, -1000, -1000, 15307, 26012, -1000, -1000, -1000,
	-1000, 20614, -1000, -1000, 66973, -242, 427, -216, -9, -1000,
	26012, 26012, 26012, 415, -1000, 413, -1000, -1000, 1030, -1000,
	1027, 1026, 1025, -1000, 582, 270, 26012, 58966, -1000, 64455,
	687, -183, -1000, -52, 1162, -1000, 26012, 250, -1000, 1479,
	581, 579, 412, -57, -1000, 402, 813, 797, 401, 400,
	399, 26012, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 69131, 64175, 64109, 63829, 7984, 63549, 63483, -59,
	397, -1000, 1999, -216, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 396, -1000, 395, -1000, 69065, -216, 393, 6207, -1000,
	27329, 27329, 27329, -1000, 391, -1000, 67813, -1000, 68785, 20175,
	20175, 20175, 390, 68505, 26012, -216, -61, -1000, -63, -1000,
	-1000, 565, -68, 850, 19723, 29032, 13990, -1000, 850, 850,
	26012, -1000, 26012, 1809, -1000, -1000, -1000, 1808, 1758, 1866,
	29863, -1000, -1000, -1000, -1000, 50674, 690, 793, -1000, -1000,
	-1000, -1000, -1000, 50674, -1000, 2487, 1914, -1000, -1000, -1000,
	58966, 476, -1000, 50674, 50674, 13990, 793, -1000, 387, 32377,
	-9, 147, -1000, -1000, 13990, 1931, 1931, 1931, -1000, -1000,
	1998, 58966, 2454, -1000, 1391, -1000, 9216, -1000, 710, 1006,
	-1000, 2498, 559, -1000, 2491, 2491, 58966, 109, 19284, -1000,
	1024, -1000, -1000, 1237, -1000, 1369, -1000, 1010, -1000, -1000,
	-1000, 19284, -1000, 1356, 58966, 58966, 49022, -1000, -1000, 1707,
	60196, 1704, 9216, 58966, -1000, -1000, 558, 555, 1798, 1797,
	58966, 58966, 59786, 59376, 58966, 1404, 26012, 1494, 1267, 95,
	-1000, 95, 548, 1102, 49022, 49022, 49022, 1320, -1000, -1000,
	-1000, -1000, -1000, 49022, -1000, -1000, 2497, -1000, 1175, -1000,
	-1000, -1000, 1175, 1473, 1303, 49022, 39492, 844, 58966, 1424,
	95, -1000, 95, 544, 13990, 1378, -1000, 1881, -1000, -1000,
	-1000, 11866, 69411, -1000, 69411, -1000, 58966, -1000, 865, 58966,
	40726, 833, 2137, -1000, 1473, 2133, 476, -1000, -1000, 33621,
	-43, 834, 39492, 49022, -3, 39492, 39492, 39492, 2551, 543,
	2546, -1000, 49022, 2132, 1603, 1702, 2117, 754, 58966, 1487,
	-1000, 26012, 1337, -1000, 32793, 880, 58966, 1301, 102, -1000,
	-1000, -1000, 32, 58966, -1000, 2544, -1000, -1000, 182, 182,
	182, -1000, 164, 1568, -1000, -101, -101, -1000, -1000, 4612,
	834, -5, 539, -1000, 780, 779, 31539, 39492, -70, -1000,
	-1000, -1000, -1000, -1000, 49022, 58966, 659, 1861, 58966, -74,
	-1000, 110, -1000, 834, -1000, -1000, 842, -1000, 1073, -1000,
	-1000, -1000, -43, -43, -1000, 1191, 1178, 58966, -1000, 13990,
	58966, 49022, 13990, 49022, -1000, -1000, -1000, -1000, -1000, 1246,
	-1000, 26012, -1000, -1000, -1000, 18845, -1000, -1000, -1000, 49022,
	-209, 26012, 26012, 5437, 5354, 26012, 27329, 27329, -1000, 26012,
	3702, -1000, -1000, -1000, -1000, -1000, 1989, 537, 26012, 9216,
	4774, 3991, -1000, 385, 8995, 705, -1000, 26012, -1000, 373,
	18406, -1000, 68159, -29, -29, -1000, 2513, 1737, 1446, 1315,
	1216, 2495, 11442, -216, -84, -1000, -1000, 709, -1000, 2239,
	-1000, 26012, 68439, 11018, -1000, 34449, 851, 1487, -1000, -1000,
	2491, 810, -1000, -1000, -1000, 810, -1000, 66691, 9216, 9216,
	26012, 26012, -1000, 26012, 26012, 26012, -1000, -1000, 26012, -1000,
	-1000, 1988, 26012, -1000, 9216, 9216, 27329, 27329, 27329, 27329,
	27329, 27329, 27329, 27329, 27329, 27329, 27329, 27329, 27329, 27329,
	27329, 27329, 27329, 27329, 27329, 1792, 27329, 2470, 2470, 2470,
	-1000, 2026, 1988, 26012, 26012, 9216, 366, 365, 362, -1000,
	26012, -216, -1000, -1000, 4612, -1000, 1912, -1000, -78, -1000,
	2305, -1000, -1000, 1912, 1912, -85, 69411, 29863, 29863, -1000,
	535, 26012, 1807, -1000, 685, -1000, -86, -1000, 50674, -1000,
	684, -237, -1000, 774, -1000, -1000, -1000, -1000, 476, -1000,
	-1000, -1000, 103, 50674, -1000, -90, -1000, 2416, 361, 13990,
	-1000, -1000, -1000, -1000, -1000, -1000, 95, -43, 1527, 2511,
	-1000, 2492, 704, 683, 358, 2491, 357, 356, -43, 58966,
	-1000, -6, -1000, -1000, -1000, 26012, -1000, -1000, 2330, 1022,
	1011, -1000, 2131, -1000, 1696, -1000, 871, -1000, 1285, -1000,
	26012, 26012, 534, 533, 1413, 2543, 2123, 1568, 2116, 1568,
	-1000, -1000, 824, -1000, 69411, 532, 531, -1000, -17, 1310,
	-1000, -1000, 26012, 26012, 51498, -1000, 2329, 2329, -1000, 1004,
	-1000, -1000, -1000, 1473, 1003, -1000, -1000, 1405, -1000, -1000,
	-1000, -1000, 26012, -1000, -21, 1002, 834, 1986, -1000, 2541,
	2540, 2539, 355, -32, -1000, 2413, 1651, 58966, 49022, 49022,
	2409, 811, -1000, 2487, -1000, -1000, -1000, -1000, 840, -1000,
	-1000, 2536, -1000, 891, 13990, 49022, 2100, 1768, 754, 39906,
	-1000, 840, 1844, -1000, 69411, -1000, 1301, 17954, 2327, -91,
	-1000, -1000, -1000, 850, 34035, 29863, 26012, 2535, -92, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 51088, 51088, 39492,
	39492, 39492, 834, 58966, 58966, 40726, 2534, 530, 58966, 58966,
	529, -1000, 58966, 58966, 2533, -1000, -1000, 1519, 49022, -1000,
	-1000, 839, -1000, -1000, 1427, 1670, 1427, 1535, 66625, -1000,
	2352, 13990, 2415, 238, 26012, 26012, 416, 471, 389, 238,
	26012, 26012, 9216, 67144, -103, 26012, 26012, -1000, 26012, 682,
	69411, 2510, 26012, 354, 353, 352, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 351, -1000, -1000, -1000, -1000, -1000,
	69411, 26012, 96, -1000, -1000, -1000, 63066, -1000, 26012, 347,
	341, -1000, -1000, -1000, 339, 337, 8663, 7107, 66343, 66061,
	65995, 69411, 2026, 69411, -1000, -1000, 783, 783, 1144, 1144,
	1144, 1144, 2470, 879, 910, 499, 211, 211, 211, 430,
	657, 657, 211, 211, 211, 1973, 1803, 527, 5696, -1000,
	-1000, 69411, 69411, 335, -1000, -1000, -1000, -216, 333, 1904,
	2365, -1000, 29863, 1904, 1904, -1000, -1000, 1758, 58966, 69411,
	29863, -231, -1000, 2487, -1000, -1000, 1914, -1000, 10166, -1000,
	13990, -1000, -1000, 32377, -1000, 525, -1000, 50, -1000, -1000,
	-1000, 681, 2531, 694, -1000, 329, -1000, -1000, -43, 69411,
	58966, 58966, 58966, 2099, -1000, 2025, -1000, 65713, -104, -1000,
	67533, 26012, 58966, -1000, 1402, 1843, 909, -1000, 58966, -1000,
	58966, -1000, -1000, 58966, 58966, 49022, -105, 69411, -47, -1000,
	772, -1000, -1000, 49022, 49022, 39492, -109, 13990, -1000, 39492,
	-1000, -1000, -1000, 1856, 95, -1000, 2530, 522, 1473, 95,
	-1000, 1513, -1000, 680, -1000, -1000, 521, 58966, 1565, 520,
	13990, 1770, 754, 39906, -1000, 1045, 1301, -1000, -1000, -83,
	-1000, 526, 95, 1487, -1000, -100, 69411, -1000, 768, -1000,
	-110, -1000, -1000, 328, -1000, 2298, 2297, -1000, -1000, 26012,
	519, 517, 58966, 2296, -1000, -1000, 1621, -1000, -1000, -1000,
	-1000, 13990, 1295, -1000, -1000, -1000, -1000, 2352, 238, 238,
	26012, 26012, 26012, 238, 67144, -115, -1000, 238, 238, -216,
	-1000, -1000, 68159, -1000, -1000, -1000, -1000, 69411, 10594, 1435,
	-1000, 65431, -1000, -1000, -1000, -1000, 26012, 26012, -1000, -1000,
	-1000, -1000, -1000, 27329, 1964, 515, 9216, -1000, -1000, 847,
	26012, 26012, 2305, 847, 847, -1000, -119, -1000, 793, -1000,
	-1000, -1000, 2487, 50, -1000, 2529, 13990, 691, -1000, 2528,
	-1000, -1000, -1000, -1000, 58966, -1000, 58966, -1000, 13990, 58966,
	1967, 1690, -1000, -1000, 1789, 513, 27329, 49022, 781, 1937,
	1409, 26012, -1000, -124, -125, 1688, -1000, -1000, 1687, 26012,
	-1000, 9216, 1568, 1568, -126, -131, -1000, 999, 58966, 17515,
	-1000, -1000, -1000, 978, -1000, -101, 1424, 1886, 837, -1000,
	40726, 833, -1000, -1000, 832, -1000, 26012, -1000, 49022, 26012,
	1546, -1000, 754, 39906, -1000, 2117, -1000, 2252, 58966, 2323,
	-1000, 1844, 512, -1000, 834, 507, 506, -132, 26012, 26012,
	-140, 505, -114, -1000, 740, 469, -1000, -1000, 49022, 49022,
	-1000, 238, 238, 238, -1000, 327, -1000, -1000, 1487, 2357,
	-1000, 65365, 65083, 3948, 27329, 9216, -146, -1000, 58966, 69411,
	-216, -1000, -1000, -1000, 50674, 678, -1000, 2522, -1000, -1000,
	1754, -1000, -1000, -1000, 58966, 1695, -1000, -1000, 26012, 5696,
	504, 26012, -1000, -1000, 1853, 1980, 1856, 502, -1000, -1000,
	-1000, -1000, 1330, -1000, -1000, 69411, 2341, -1000, -1000, 498,
	496, 487, 738, 1954, -1000, 484, 833, -1000, 1465, -1000,
	1876, 325, 2407, 832, -1000, 2485, -1000, -147, 891, -153,
	49022, 39906, -1000, 1768, 1048, -154, 58966, 1301, -1000, -1000,
	39492, 39492, 1409, -155, -159, -1000, 39492, 1621, -1000, 58966,
	-1000, 58966, -1000, -1000, -1000, 1345, 26012, -1000, -1000, 3948,
	-160, -1000, -136, -1000, 2406, -1000, -1000, -1000, -1000, -1000,
	2096, 64801, 1744, 58966, 64735, 1959, -1000, -1000, 1424, 58966,
	49022, 890, 13990, 1427, 1427, 26012, 17076, 1455, 26012, -1000,
	49022, -1000, 2291, 1856, 95, -1000, -1000, 1409, 481, 1409,
	480, -1000, 1770, 1146, -1000, 850, -1000, -1000, -161, -165,
	1856, 1409, -1000, -166, -1000, -167, -173, 322, 26890, 26890,
	26890, -216, -1000, 58966, 479, 2055, -1000, 1542, 1418, 126,
	912, -1000, -1000, 1937, -174, 476, -1000, 26012, -1000, -184,
	-1000, 878, -189, -1000, 863, -191, -1000, 1945, -1000, -199,
	475, -1000, 1424, 837, 1856, 26012, 1856, 26012, -1000, 34035,
	-1000, 834, 834, 1424, 1856, 834, -1000, -1000, -1000, -1000,
	-1000, 27753, 1530, 1260, 67253, -1000, -1000, -1000, -1000, 58966,
	-1000, 1545, 1544, 1207, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1744, 69411, -1000, 1427, 1885, -1000, 1427, 1944,
	-1000, 1440, -1000, 58966, 833, -1000, 1424, -206, 1424, -211,
	-193, -1000, -1000, -1000, 1424, -1000, 2444, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2277, -1000, 900, 1466, 1466, 1542,
	-1000, 468, -1000, 451, -1000, -212, -1000, 849, 1409, 849,
	1409, -1000, -1000, 26451, -1000, 2458, -1000, -1000, 1831, -1000,
	1937, 26012, 26012, 1564, -1000, 2519, 1856, -1000, 1856, -1000,
	-1000, -1000, -1000, -1000, -217, -219, -1000, -1000, -1000, -1000,
	1424, 1424, 1424, 977, 849, 849, -1000, 450, -1000, -1000,
	26012, -223, 1424, -1000,
}
var sqlPgo = [...]int{

	0, 3200, 3198, 3196, 3195, 3193, 3191, 3190, 3188, 3187,
	3186, 3183, 3182, 3181, 3179, 3178, 3174, 3171, 3170, 3169,
	3164, 3162, 3161, 3158, 3157, 3156, 3155, 3154, 3153, 3152,
	3150, 3149, 3146, 3143, 3141, 3134, 3132, 3131, 3130, 3129,
	3127, 3126, 3125, 3123, 40, 3122, 3121, 3118, 3115, 3113,
	3112, 3111, 3110, 3108, 3107, 3105, 3102, 3099, 3098, 3097,
	3096, 3094, 36, 3092, 209, 3091, 3086, 3084, 3082, 3081,
	3079, 3075, 3074, 3073, 3071, 207, 3070, 128, 3067, 3066,
	3065, 3064, 3063, 206, 3062, 3061, 3056, 3053, 3052, 3051,
	3048, 3042, 3037, 44, 3033, 3032, 3029, 3027, 3024, 3023,
	3022, 3021, 3019, 3017, 188, 3016, 204, 3012, 3005, 3004,
	3003, 3001, 3000, 2998, 2996, 2991, 2989, 2984, 2983, 2980,
	2979, 2978, 2976, 2975, 2972, 2971, 2970, 2962, 2960, 2959,
	2958, 2957, 210, 143, 2952, 2950, 203, 200, 2949, 2948,
	92, 97, 26, 2940, 87, 119, 184, 5766, 177, 2937,
	2929, 2928, 2927, 2926, 70, 131, 132, 126, 129, 146,
	2924, 2923, 74, 57, 32, 28, 98, 2922, 2921, 2919,
	2028, 89, 2917, 2913, 198, 182, 2909, 893, 2908, 133,
	108, 122, 64, 88, 2907, 112, 22, 2903, 144, 67,
	2900, 123, 72, 31, 5847, 5030, 2898, 80, 215, 76,
	202, 165, 159, 166, 158, 124, 100, 2897, 189, 2894,
	68, 151, 2892, 2891, 2889, 62, 147, 12, 6, 125,
	9, 96, 15, 2886, 8, 2885, 2884, 2880, 2879, 25,
	120, 2878, 53, 56, 2877, 38, 61, 161, 2876, 170,
	2875, 93, 2874, 194, 153, 149, 14, 179, 2873, 2872,
	2871, 2870, 2869, 94, 24, 95, 2868, 2867, 110, 180,
	2866, 34, 140, 65, 102, 214, 103, 168, 84, 174,
	136, 176, 2865, 2864, 2863, 139, 2860, 2858, 121, 169,
	2857, 2856, 212, 35, 54, 181, 55, 2855, 2854, 118,
	2853, 152, 2852, 2851, 2848, 211, 134, 162, 10, 73,
	91, 20, 11, 175, 116, 81, 79, 2847, 3085, 337,
	1204, 2845, 114, 85, 43, 90, 127, 197, 50, 2844,
	2843, 1055, 2842, 2840, 2839, 2837, 138, 2836, 2813, 2808,
	109, 58, 77, 2805, 2798, 111, 63, 142, 199, 75,
	167, 164, 191, 2797, 135, 2795, 37, 104, 2794, 150,
	192, 156, 2793, 436, 115, 2792, 163, 2791, 2786, 2785,
	2780, 51, 2779, 2777, 272, 2776, 113, 2775, 2774, 141,
	154, 178, 101, 30, 2772, 71, 29, 2771, 148, 33,
	2770, 276, 86, 0, 6477, 4739, 3680, 2769, 2529, 2766,
	157, 105, 2764, 2763, 2762, 2761, 23, 13, 3, 7,
	16, 17, 781, 229, 2760, 2755, 83, 99, 106, 2753,
	213, 173, 2752, 2751, 2750, 69, 2749, 21, 2746, 19,
	2741, 2733, 27, 2, 2728, 2727, 187, 2726, 186, 2725,
	2722, 2429, 2718, 195, 2717, 117, 2707, 130, 160, 2706,
	2701, 2698, 2697, 193, 2694, 196, 2693, 4, 18, 1,
	2687, 2686, 2685, 155, 5, 2239, 2684, 2683, 59, 145,
	66, 2681, 2678, 137,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 32, 32, 10,
	10, 9, 9, 9, 11, 11, 6, 6, 6, 6,
	6, 6, 6, 6, 13, 13, 23, 23, 14, 25,
	433, 433, 17, 27, 18, 28, 12, 435, 435, 435,
	435, 21, 19, 19, 29, 29, 143, 143, 143, 143,
	16, 16, 24, 24, 156, 156, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 432, 432, 158,
	158, 157, 153, 153, 436, 436, 159, 159, 159, 161,
	161, 33, 33, 91, 91, 91, 144, 84, 84, 84,
	84, 84, 84, 84, 84, 79, 79, 381, 381, 382,
	382, 139, 139, 140, 140, 140, 140, 141, 141, 142,
	142, 142, 47, 35, 35, 35, 35, 35, 35, 35,
	36, 36, 36, 36, 37, 37, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 45, 45, 45, 45,
	133, 133, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 441, 441, 442, 442, 443, 443, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 59, 59, 231, 231, 209, 209, 60,
	60, 60, 61, 61, 62, 62, 49, 49, 428, 428,
	244, 244, 348, 348, 64, 64, 65, 65, 65, 65,
	65, 65, 66, 66, 66, 66, 66, 66, 66, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 73,
	73, 73, 74, 74, 74, 71, 71, 71, 69, 69,
	69, 68, 68, 68, 72, 72, 72, 70, 70, 70,
	245, 245, 75, 75, 75, 75, 75, 75, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 350, 350, 76, 76, 76, 319, 319, 80, 80,
	80, 276, 276, 81, 81, 81, 81, 81, 82, 82,
	82, 82, 92, 92, 92, 92, 431, 431, 237, 237,
	174, 174, 174, 174, 87, 87, 87, 87, 88, 88,
	88, 89, 89, 138, 138, 98, 98, 98, 98, 98,
	97, 97, 97, 97, 97, 97, 39, 39, 39, 40,
	40, 41, 41, 42, 42, 43, 43, 44, 44, 44,
	44, 44, 100, 100, 437, 437, 102, 99, 99, 99,
	101, 101, 101, 101, 103, 104, 104, 104, 104, 104,
	104, 105, 105, 375, 375, 252, 252, 373, 373, 389,
	389, 374, 374, 213, 213, 213, 213, 213, 214, 214,
	214, 380, 380, 380, 380, 380, 380, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 123, 123, 123, 132,
	132, 132, 132, 132, 132, 132, 125, 125, 125, 115,
	115, 107, 107, 107, 107, 111, 111, 111, 111, 111,
	108, 108, 112, 112, 114, 114, 116, 116, 116, 116,
	116, 116, 109, 109, 109, 109, 118, 118, 118, 118,
	282, 282, 282, 117, 117, 334, 334, 128, 128, 128,
	128, 128, 128, 333, 333, 124, 124, 124, 124, 127,
	127, 127, 127, 266, 266, 121, 121, 121, 122, 122,
	122, 126, 126, 129, 129, 129, 129, 110, 110, 110,
	446, 446, 446, 130, 130, 120, 120, 131, 131, 131,
	131, 131, 131, 131, 131, 119, 119, 119, 434, 434,
	113, 429, 429, 426, 426, 426, 426, 426, 426, 426,
	427, 427, 430, 430, 85, 85, 85, 54, 54, 447,
	447, 447, 55, 55, 448, 448, 448, 445, 445, 445,
	445, 445, 445, 445, 445, 215, 215, 216, 216, 300,
	300, 300, 300, 300, 217, 217, 160, 160, 160, 220,
	221, 221, 218, 218, 219, 219, 219, 223, 223, 222,
	225, 225, 224, 299, 394, 394, 395, 395, 395, 395,
	395, 395, 395, 396, 396, 396, 396, 396, 396, 396,
	396, 396, 396, 392, 392, 392, 393, 390, 390, 391,
	391, 391, 391, 449, 449, 449, 449, 449, 449, 450,
	450, 298, 298, 229, 229, 397, 397, 397, 397, 398,
	398, 398, 398, 398, 401, 400, 399, 399, 399, 399,
	399, 329, 329, 329, 58, 58, 58, 263, 263, 262,
	262, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 135, 135, 56, 56, 56,
	166, 166, 53, 53, 53, 452, 452, 57, 57, 57,
	453, 453, 63, 63, 63, 63, 63, 63, 52, 52,
	52, 52, 52, 454, 454, 283, 283, 281, 281, 235,
	235, 336, 178, 178, 154, 154, 154, 20, 22, 22,
	15, 15, 30, 30, 31, 31, 26, 26, 438, 438,
	439, 439, 86, 86, 90, 90, 90, 96, 96, 134,
	134, 134, 134, 134, 134, 134, 34, 34, 34, 34,
	46, 46, 46, 46, 94, 456, 456, 456, 95, 95,
	455, 455, 173, 173, 173, 173, 175, 175, 295, 295,
	296, 296, 457, 457, 297, 297, 297, 297, 168, 167,
	169, 169, 51, 51, 51, 162, 162, 163, 163, 164,
	164, 165, 165, 458, 458, 83, 83, 83, 137, 137,
	208, 208, 291, 291, 291, 230, 230, 183, 183, 294,
	294, 292, 292, 292, 292, 261, 261, 261, 136, 136,
	240, 240, 254, 254, 255, 255, 345, 345, 256, 93,
	93, 147, 147, 145, 145, 145, 145, 145, 145, 459,
	459, 146, 146, 146, 148, 148, 148, 148, 148, 148,
	148, 151, 151, 151, 151, 152, 152, 152, 150, 150,
	408, 408, 408, 410, 410, 411, 407, 407, 409, 409,
	451, 451, 265, 265, 265, 227, 228, 226, 226, 460,
	460, 233, 233, 232, 234, 234, 335, 335, 335, 259,
	259, 259, 259, 286, 286, 284, 284, 285, 285, 287,
	287, 288, 288, 288, 289, 289, 290, 290, 258, 258,
	315, 315, 149, 149, 149, 239, 239, 239, 241, 241,
	306, 306, 306, 306, 306, 306, 307, 307, 305, 305,
	305, 305, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 338, 338, 242, 242, 339, 293, 293, 424, 424,
	424, 425, 425, 332, 332, 340, 340, 340, 340, 340,
	340, 330, 330, 331, 331, 346, 347, 347, 269, 269,
	269, 269, 267, 267, 270, 270, 270, 270, 268, 268,
	341, 341, 341, 341, 260, 260, 342, 342, 342, 343,
	301, 302, 302, 351, 351, 351, 351, 351, 366, 238,
	238, 238, 238, 238, 461, 461, 352, 352, 352, 352,
	352, 352, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 356, 356, 356, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 365, 365, 365, 365, 365,
	357, 357, 362, 362, 363, 363, 363, 358, 359, 364,
	364, 364, 364, 462, 462, 368, 368, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 354, 354, 354, 361,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 277, 277, 278, 278, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 310, 310, 310, 310, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 402, 402, 402, 402, 402, 402, 402, 402, 405,
	405, 406, 406, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 412, 412, 413, 413, 415, 415, 416, 416,
	417, 418, 418, 418, 419, 420, 420, 414, 414, 421,
	421, 421, 421, 422, 422, 423, 423, 423, 423, 423,
	321, 321, 322, 322, 328, 328, 328, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 176, 176, 176, 176, 176, 250, 250,
	248, 248, 248, 251, 251, 249, 249, 247, 247, 246,
	246, 318, 318, 316, 316, 320, 320, 271, 271, 367,
	367, 367, 367, 367, 367, 367, 272, 272, 272, 280,
	273, 273, 274, 274, 274, 274, 274, 312, 313, 275,
	275, 275, 314, 314, 323, 327, 327, 326, 325, 325,
	324, 324, 303, 303, 304, 304, 257, 257, 463, 463,
	253, 253, 344, 344, 344, 344, 211, 211, 243, 243,
	210, 210, 203, 203, 204, 204, 204, 204, 236, 236,
	369, 369, 369, 370, 371, 372, 317, 193, 192, 180,
	181, 191, 190, 189, 179, 182, 186, 187, 188, 184,
	185, 199, 198, 197, 195, 196, 349, 205, 205, 206,
	206, 206, 207, 207, 207, 207, 177, 177, 200, 200,
	201, 202, 202, 194, 194, 194, 170, 170, 170, 171,
	171, 172, 172, 379, 379, 377, 377, 377, 378, 378,
	378, 378, 376, 376, 376, 376, 376, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 385, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 388, 388,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 4, 6, 1,
	3, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 6, 4, 6, 6, 6,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 7, 4, 7, 5, 3, 5, 7,
	4, 12, 4, 12, 1, 3, 5, 5, 2, 5,
	3, 6, 4, 6, 5, 6, 6, 4, 8, 3,
	4, 3, 6, 4, 3, 1, 3, 2, 1, 1,
	3, 1, 3, 2, 2, 0, 1, 1, 0, 2,
	0, 7, 2, 5, 6, 2, 1, 6, 4, 9,
	7, 12, 12, 12, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 5, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 6, 3,
	1, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 3, 3, 4, 3, 4, 7, 4, 4, 4,
	3, 5, 7, 4, 3, 3, 4, 3, 3, 3,
	3, 3, 2, 0, 1, 0, 1, 0, 3, 3,
	3, 3, 3, 6, 4, 4, 4, 3, 5, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 1, 1,
	2, 1, 2, 7, 3, 2, 0, 1, 3, 3,
	1, 0, 1, 2, 2, 1, 6, 5, 1, 2,
	1, 3, 2, 0, 8, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 2, 2, 5, 3, 6, 3, 1, 1,
	2, 1, 1, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 2, 1,
	2, 1, 3, 5, 7, 2, 3, 0, 3, 5,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 3, 3,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 5,
	4, 6, 4, 3, 0, 1, 3, 2, 4, 2,
	4, 1, 6, 3, 1, 1, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 1, 3, 2, 1, 3,
	1, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 5, 7, 3, 3,
	3, 3, 4, 4, 3, 4, 4, 3, 4, 4,
	5, 3, 2, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 3, 4, 4, 5,
	0, 1, 1, 3, 4, 1, 0, 5, 4, 6,
	4, 6, 4, 1, 0, 3, 4, 4, 5, 7,
	5, 3, 3, 2, 0, 4, 2, 3, 4, 2,
	3, 3, 3, 4, 3, 3, 3, 3, 4, 3,
	1, 1, 1, 2, 3, 2, 3, 6, 6, 7,
	9, 7, 9, 3, 4, 5, 5, 3, 1, 1,
	5, 2, 0, 1, 1, 1, 1, 3, 2, 2,
	2, 1, 2, 0, 3, 3, 2, 10, 13, 0,
	2, 3, 9, 12, 0, 2, 3, 1, 1, 2,
	2, 2, 2, 1, 0, 1, 0, 1, 3, 1,
	1, 1, 1, 3, 8, 0, 1, 1, 0, 2,
	1, 0, 1, 0, 9, 9, 3, 1, 3, 7,
	1, 3, 11, 3, 2, 0, 3, 1, 2, 2,
	3, 2, 6, 2, 1, 1, 2, 4, 2, 5,
	5, 5, 2, 8, 9, 6, 5, 3, 1, 5,
	8, 5, 11, 0, 1, 3, 3, 2, 2, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 5, 8, 4, 1, 0, 1,
	2, 2, 1, 2, 3, 2, 2, 3, 2, 2,
	2, 2, 2, 3, 1, 4, 2, 4, 7, 3,
	3, 0, 3, 6, 3, 1, 1, 8, 7, 5,
	0, 1, 6, 7, 6, 5, 3, 4, 14, 17,
	14, 17, 4, 0, 2, 2, 0, 1, 0, 1,
	3, 2, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 1, 3, 1, 3, 8,
	5, 3, 4, 3, 0, 2, 2, 0, 10, 3,
	2, 0, 1, 3, 1, 1, 3, 3, 5, 1,
	1, 3, 3, 2, 3, 4, 3, 4, 5, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 5, 1, 0, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 1, 1, 1, 3, 2, 4,
	4, 0, 8, 4, 3, 4, 1, 5, 3, 4,
	5, 1, 5, 1, 3, 2, 0, 3, 0, 2,
	3, 1, 3, 2, 0, 3, 5, 6, 4, 6,
	4, 3, 2, 1, 0, 5, 1, 0, 2, 2,
	2, 1, 1, 0, 1, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 1, 0, 2, 5, 7, 2, 1, 1, 2,
	4, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 5, 4, 1, 2, 1, 4, 1, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 2, 5,
	1, 4, 2, 5, 1, 4, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 1, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 1, 2, 2, 2,
	4, 3, 5, 6, 8, 6, 6, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 8, 6, 4, 6,
	6, 6, 4, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	1, 2, 3, 2, 3, 2, 3, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 1, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	3, 1, 1, 1, 1, 5, 3, 1, 1, 3,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 453, -77, -47, -45, -80, -81, -65,
	-79, -82, -76, -92, -96, -86, -98, -134, -3, -33,
	-35, -48, -64, -66, -75, -84, -83, -85, -87, -91,
	-90, -39, -93, -97, -106, -135, -136, -137, 81, 68,
	121, 103, 108, 127, 153, 283, 312, 322, 306, -101,
	-102, 341, -34, -46, -95, -94, -4, -10, 27, 39,
	-36, -37, -38, 53, -56, -53, -50, -59, -440, 83,
	-409, -67, -70, -72, -444, 113, 126, 170, 275, -88,
	-89, 308, 310, -41, -40, 122, -145, -147, -99, -100,
	-138, -107, -108, -109, -110, -111, -112, -113, -114, -115,
	-116, -117, -118, -119, -120, -121, -122, -123, -124, -125,
	-126, -127, -128, -129, -130, -131, 344, 391, 40, 353,
	69, 116, 316, 21, -5, -6, -7, -8, -9, -11,
	-22, -49, -51, -52, -54, -55, -63, -57, -58, -408,
	-68, -69, -71, -73, -74, 307, -148, -146, 450, 403,
	-13, -17, -18, -14, -16, -19, -15, -23, -27, -28,
	-25, -24, -26, -29, -30, -31, -32, -20, -21, -12,
	421, 429, -151, -149, -150, -152, 329, 411, 367, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, -195,
	-200, -201, -202, -194, -170, -385, -388, 4, -383, -386,
	132, 178, 245, 21, 22, 23, 24, 25, 27, 37,
	38, 39, 40, 43, 45, 46, 49, 50, 51, 52,
	53, 54, 57, 62, 67, 68, 69, 70, 71, 76,
	73, 74, 75, 78, 80, 81, 82, 85, 86, 94,
	95, 96, 97, 98, 99, 103, 106, 105, 108, 111,
	112, 113, 115, 117, 118, 121, 122, 125, 123, 373,
	375, 124, 126, 127, 128, 138, 139, 140, 142, 143,
	145, 147, 151, 152, 154, 158, 160, 161, 162, 163,
	169, 170, 172, 173, 179, 174, 180, 184, 187, 186,
	188, 189, 190, 181, 195, 199, 200, 201, 203, 204,
	207, 208, 209, 210, 213, 212, 215, 218, 219, 222,
	223, 226, 227, 229, 230, 233, 231, 234, 232, 235,
	238, 236, 237, 240, 241, 243, 242, 167, 250, 251,
	253, 254, 255, 270, 258, 259, 260, 263, 266, 269,
	271, 272, 273, 274, 275, 276, 278, 279, 281, 283,
	285, 287, 288, 289, 290, 291, 292, 294, 295, 297,
	298, 299, 300, 301, 306, 303, 304, 305, 307, 308,
	309, 310, 312, 314, 315, 316, 317, 319, 321, 342,
	343, 355, 322, 323, 324, 325, 326, 327, 328, 332,
	336, 333, 334, 335, 337, 330, 331, 338, 339, 341,
	344, 346, 348, 349, 352, 353, 354, 356, 359, 360,
	361, 357, 358, 351, 366, 364, 365, 368, 369, 370,
	371, 372, 374, 376, 385, 386, 388, 391, 392, 393,
	383, 395, 396, 399, 400, 401, 402, 407, 403, 405,
	408, 409, 410, 416, 415, 422, 423, 425, 426, 427,
	32, 41, 42, 44, 47, 58, 59, 60, 63, 100,
	101, 120, 129, 130, 141, 155, 157, 164, 165, 166,
	185, 191, 193, 197, 216, 248, 249, 264, 268, 280,
	282, 293, 318, 347, 362, 378, 379, 380, 381, 387,
	389, 411, 412, 413, 417, 424, 256, -188, 2, -170,
	-170, 283, 26, 2, 26, 279, 331, 369, 371, 2,
	194, 2, -431, -237, 2, 26, -174, -170, 83, 153,
	329, -188, 2, -431, -237, 24, 2, -170, 2, -175,
	2, 322, -170, 453, 78, 223, 62, 318, 338, -104,
	386, -103, 378, 324, -105, -375, 2, 238, -170, 453,
	453, 453, 453, 2, 367, 273, 415, 330, 404, 96,
	290, 178, -426, 2, 4, -386, -383, -204, -203, 367,
	96, -202, -194, 443, -201, 453, 453, 453, 2, 200,
	201, 289, 288, 338, 339, 453, 453, 453, 2, 25,
	56, 77, 80, 102, 128, 148, 151, 261, -441, 230,
	270, 287, 324, 337, 366, 376, 388, -445, 354, 57,
	404, -452, 393, 111, -281, 96, 371, 369, 223, 152,
	400, 314, 156, 398, 106, 184, 402, 401, 453, 453,
	25, 56, 65, 80, 111, 128, 148, 151, -443, 270,
	287, 321, 324, 337, 366, 376, 393, 388, 2, 415,
	330, 367, 178, 96, 404, 314, 286, -77, 2, 450,
	29, 341, -144, 367, 194, 2, -170, 200, 201, 2,
	453, 453, -426, 2, 200, 201, 2, 57, 326, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 2, -132, 338, 354, 162,
	39, 62, 26, 67, 97, 154, 178, 179, 208, 77,
	78, -282, -334, -333, 368, 325, 331, 364, 386, 83,
	405, 315, 427, -434, 123, 4, 96, 238, 340, 378,
	223, 38, 71, 372, 373, -451, 2, 367, -455, 2,
	386, 386, 2, -455, 2, -455, 2, -173, 2, 386,
	382, -456, 386, 424, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, -146, -148, -147, 453,
	453, 453, 453, 453, -132, 338, 2, 62, 26, -459,
	146, -232, -233, 397, 192, 119, 262, -145, -147, 2,
	-408, -373, 2, -308, -389, -310, 441, 442, 436, 244,
	428, -321, 102, 398, 256, -388, -311, -323, 120, 318,
	-251, 8, 9, 5, 6, 7, -177, -353, -317, -361,
	390, 131, 247, -207, 455, 10, 450, -405, -147, -322,
	33, 157, 55, -377, -206, -355, -363, -359, -360, -461,
	45, 51, 50, 376, 237, 332, 333, 348, 334, 335,
	43, 407, 174, 253, 255, 186, 4, 193, -205, -194,
	-402, -403, -383, -384, 185, 191, 187, 347, 188, 189,
	190, 42, 293, 142, 143, 141, 112, 101, 100, 249,
	47, 46, 44, 412, -364, 98, 378, 379, 380, 381,
	203, 204, -170, -385, 65, 88, 89, 87, 92, 91,
	93, 90, 340, 404, 56, 32, 164, 165, 197, 248,
	166, 63, -404, 358, 84, 150, 183, 168, 196, 198,
	202, 217, 220, 239, 246, 265, 267, 313, 345, -462,
	413, 129, 130, 268, 280, 362, 387, 389, 155, 216,
	58, 59, -410, 294, -411, -188, -410, 453, 453, 454,
	453, -226, -227, -228, 2, 26, 109, 450, 2, -337,
	2, 448, -341, -147, 211, -340, 450, -338, -195, 257,
	-406, 319, -402, -403, -177, -194, -206, 4, -229, 450,
	452, 96, 367, 66, 2, -276, 450, -170, 26, -144,
	256, 382, 454, -319, 450, 256, 149, 259, -170, 2,
	2, 342, 2, 450, -104, 60, 386, -296, 2, -297,
	-167, -168, -169, -346, 199, 285, 292, 430, 427, -373,
	-437, 149, 433, 382, -373, -252, 452, 2, -341, 164,
	-195, 2, -192, -376, 4, -383, -386, -384, -387, 65,
	-385, 26, 28, 29, 30, 31, 33, 34, 35, 36,
	48, 55, 56, 61, 64, 66, 77, 83, 87, 88,
	90, 89, 91, 92, 93, 102, 104, 107, 109, 110,
	114, 116, 119, 131, 133, 146, 148, 149, 153, 156,
	159, 171, 182, 192, 194, 211, 214, 221, 224, 225,
	244, 247, 252, 256, 257, 261, 262, 277, 284, 296,
	311, 329, 340, 350, 363, 367, 377, 382, 384, 390,
	397, 398, 404, 406, 414, 418, 419, 420, 421, -388,
	2, -341, 164, 2, -197, 164, -341, -200, 2, -381,
	164, -379, 10, -378, 5, 4, -383, -386, -384, 2,
	-179, -170, 2, -191, -376, 2, -210, 164, -195, -196,
	-200, 382, 454, -243, -203, -204, -236, -170, 452, -308,
	2, -93, 2, -308, 164, 2, -93, 164, 2, -308,
	164, 2, -93, 164, 2, 2, 2, 388, 2, 80,
	164, -170, 367, 95, 2, 305, -442, 321, 392, 415,
	2, 2, 2, 2, 2, 2, 2, 367, 330, -453,
	294, -184, 2, -170, 146, -381, 164, 2, -381, 164,
	2, -198, -200, -198, 178, 195, -179, 164, 2, 371,
	369, 371, 369, 149, 2, 194, 2, 194, 2, -342,
	2, -343, -195, 2, 2, 2, 2, 2, 164, -170,
	367, 95, 2, 210, 2, 2, 2, 2, 2, 2,
	2, 2, 2, -245, 164, 2, -195, -245, 164, 2,
	-245, 164, 2, -211, 164, 2, -210, -179, 164, 2,
	-382, 164, 2, -381, -382, 164, 2, -350, 2, -349,
	-378, 411, -77, 450, 338, 450, -381, -195, -195, -308,
	-93, 149, -308, -93, 146, 2, 96, 367, -132, 2,
	146, 406, 2, 8, 2, -381, 291, 138, 2, 342,
	2, 62, -282, 427, 149, 2, 2, -429, 2, 256,
	149, 2, 149, 2, 149, 2, 149, 2, 149, 2,
	288, 339, 201, 385, 209, 124, 149, -266, 2, 421,
	149, 2, 149, 2, 5, 2, 199, 285, 355, 2,
	-195, -446, 2, 367, 415, 330, 2, 2, 73, 74,
	149, 2, 149, 427, 2, -260, -341, -295, -296, -295,
	382, -175, -459, -232, -233, -132, 342, 2, 2, -459,
	-259, -284, -285, 221, 133, 252, -265, 26, 109, -265,
	-265, 49, 451, 451, 11, 12, 64, 37, 441, 442,
	443, 444, 144, 445, 446, 439, 440, 438, 431, 432,
	435, 205, 206, 79, 434, 433, 72, 228, 320, 134,
	135, 136, 137, 302, 175, 176, 177, 14, 15, 16,
	30, 261, 220, 428, 168, 345, 436, 17, 18, 19,
	196, 198, 246, 41, 171, -176, -212, -308, -308, -308,
	-308, -308, 267, 450, -257, -303, 448, -147, 450, 450,
	450, 5, 450, 5, -372, 8, -147, -308, -321, 451,
	-249, 450, -147, -321, -316, 450, 318, 448, 450, -324,
	-308, 452, -412, 422, -357, 450, 282, -356, 450, -356,
	-356, 416, -354, 450, 429, 423, 450, -354, 450, 450,
	146, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 416, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 454, -410, -229, 450, -253, -344,
	-308, 443, -253, -253, 256, -246, -308, 84, -269, 202,
	239, 150, 217, 313, 183, -372, -78, -64, -75, -83,
	-93, -106, -136, -137, -305, 455, -332, 429, -147, -338,
	-194, -147, -340, 450, -337, -332, 443, -195, 450, 149,
	450, 452, 149, -236, -376, -179, -195, -205, -206, 108,
	-246, -381, -426, -236, -174, 34, -318, -351, -352, -365,
	-353, -362, -358, -361, 298, 299, 297, 301, 300, 45,
	51, 50, 376, 237, 332, 333, 348, 334, 335, 43,
	407, 174, 253, 255, 186, 4, 44, 412, -364, 193,
	185, 191, 187, 347, 188, 189, 190, 42, 293, 142,
	143, 141, 112, 101, 100, 249, 47, 46, 98, 378,
	379, 380, 381, 203, 204, 413, 358, 58, 59, -426,
	-236, 146, -375, -246, 34, -296, 2, -457, 454, 219,
	-214, 227, 243, 161, 257, 425, 250, -380, 5, 4,
	-317, -329, 102, 223, -361, 9, 442, -369, 8, 441,
	-374, -373, 86, 452, -376, -156, 303, -155, 23, 27,
	113, 409, 125, -219, 180, 273, 120, 351, -433, -435,
	323, 374, 375, 75, 250, 303, 120, -262, -264, 34,
	94, 241, 269, 52, 172, 232, 233, 353, 417, 120,
	303, 421, 120, -435, 303, -435, -158, 351, -433, -435,
	323, 303, -157, -219, 120, 455, -381, -243, 454, 454,
	-376, 443, 120, 120, 120, 120, 2, 2, 244, 2,
	2, 2, 151, -445, -443, 2, 2, 2, -195, 164,
	-197, 164, 2, -200, 415, -231, 256, -428, -244, 367,
	-195, -166, -407, 421, 244, 244, 34, 450, 2, -181,
	164, 2, -171, -170, 178, -407, 244, -342, -208, -195,
	-208, 341, -188, 34, -305, 120, 2, 2, 2, -170,
	-159, 454, 54, 309, 120, -159, 120, -159, 120, -159,
	454, 120, -159, 120, 454, 120, 120, 451, 454, -350,
	-381, -142, 421, 149, 83, 450, 450, -382, -428, -179,
	2, -195, 2, 367, 203, -381, -381, -375, 26, 343,
	2, 288, 339, 74, -195, -430, 146, -427, 314, -426,
	-195, -195, -195, -195, -195, 2, 2, 2, 146, 2,
	385, 2, 385, 2, -170, 68, -170, -170, 219, -195,
	146, 367, 178, 367, -159, 454, -175, -459, -259, -375,
	-459, -285, -284, -287, -308, 26, -290, 140, 240, -308,
	-310, -146, -146, -146, -234, -335, -308, 284, 178, -366,
	-351, -351, -193, -376, 378, -308, -308, -308, -308, -308,
	-308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
	-308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
	-308, -308, -308, -308, -308, -308, -308, -308, -308, -308,
	220, 168, 345, 41, 171, -308, 382, -308, -308, -308,
	-308, 236, 244, 247, 390, 131, 399, 109, 250, -463,
	363, 36, -314, -147, -250, 450, -328, 31, 350, 26,
	-321, 450, 2, -303, -308, -304, -247, -246, -246, 451,
	414, 26, 109, 443, 2, 8, -277, -279, 426, 235,
	99, 163, 234, -278, 328, 451, 454, 34, 451, -308,
	-247, -320, -316, -246, -327, -326, 418, -376, 443, -413,
	139, 156, 8, -370, 8, -370, 378, 378, 8, -370,
	-370, 450, 451, 2, 451, 2, 451, 2, 451, 2,
	451, 2, -308, -308, -308, -308, -308, -308, -308, -246,
	-271, 2, -367, -246, 4, 426, 235, 99, 163, 234,
	328, -271, 2, -272, 2, -308, -246, -273, -309, -310,
	441, 442, 436, -321, -274, 2, -308, -247, -308, 48,
	214, 384, -275, -308, 149, -246, -246, 2, -246, 2,
	-411, 34, -246, -239, 454, 149, 34, 4, -239, -239,
	450, 451, 454, -270, 160, 231, 226, -270, -337, -269,
	202, -267, 265, -267, -267, -424, 450, 449, 453, 453,
	453, 453, 453, -332, -180, 448, 456, -376, -331, -330,
	34, -188, 263, -332, -332, 452, 451, -331, -195, 450,
	-246, -376, 356, 451, 452, 196, 196, 196, 319, 451,
	-142, 382, 421, -77, 258, 451, 454, -238, 33, 448,
	-279, 450, -368, 416, 450, 450, 149, -237, -437, 451,
	386, -297, -213, 292, 349, 304, 336, 365, 9, 8,
	8, 454, -376, 454, -438, 77, 382, 66, -299, 164,
	66, -390, -182, 77, -391, -170, 61, 398, 284, 148,
	-438, 77, -438, 77, 77, 341, 354, 49, -341, 37,
	-93, 215, 149, 427, 367, 178, 382, -341, -264, -351,
	94, 232, 233, 49, -371, -369, 442, -371, 49, -371,
	-371, -371, 421, -197, -341, 382, 274, -381, 382, 454,
	37, -93, 215, 149, 382, -210, -180, -347, -346, -203,
	-170, 452, -308, -93, -308, -93, 120, 2, -453, 210,
	450, -229, 244, -263, -262, 244, -199, 2, -195, 149,
	-236, -348, 194, 454, -244, 274, 120, 120, 450, 117,
	290, 2, 256, 244, -181, 164, -162, 370, 120, -302,
	-301, 419, -291, -93, 450, 102, 34, -291, -254, -255,
	-345, -256, -182, 450, -188, -170, 2, -195, -245, -245,
	-245, -210, -211, -179, -381, -382, -382, -77, -349, 451,
	451, -141, 260, -140, -170, 5, -144, 406, -216, -300,
	-299, -392, -393, -390, 220, 178, 398, 195, 132, -230,
	-183, -182, -142, -346, -142, -347, -347, -195, 146, 2,
	2, -266, -236, -236, 338, 146, 146, 452, -266, 290,
	96, 367, 273, 178, -195, -210, -195, -341, -459, -288,
	-369, 450, -289, 318, 319, 454, -154, 35, 107, 207,
	-195, 427, 118, -308, -308, 382, -463, 363, -314, 118,
	-308, 236, 247, 390, 131, 399, 109, 250, 149, 450,
	-309, -309, 451, -248, -308, -308, 449, 458, 451, -460,
	454, -232, -308, -246, -246, 451, 451, 382, 382, 382,
	382, 450, 452, -246, -236, 449, 449, 454, 451, -325,
	-326, 114, -308, 452, -418, 266, 450, 450, 451, 451,
	454, 451, 427, 427, 451, 451, 451, -308, 34, 454,
	454, 454, 451, 454, 454, 454, 451, 451, 149, 451,
	451, -280, 277, 451, 11, 12, 441, 442, 443, 444,
	144, 445, 446, 439, 440, 438, 431, 432, 433, 72,
	228, 320, 14, 15, 16, 196, 171, -309, -309, -309,
	451, -312, -313, 149, 146, 34, -275, -275, -275, 451,
	149, -246, 451, 451, 450, 451, -302, -344, -241, 2,
	-337, -190, -376, -302, -302, -246, -308, 202, 202, -268,
	406, 256, -270, -337, -330, 451, -425, -372, -332, -331,
	-372, -307, -306, 147, 35, 107, 242, 167, -188, -229,
	-331, -331, -376, -332, 451, -242, -339, -406, -460, 452,
	-376, -133, 5, 247, -133, -133, 149, -236, 24, 278,
	-351, 448, 449, 8, 8, 450, -370, -370, -236, 149,
	-373, -296, 396, 70, 292, 378, -373, -155, 303, -182,
	-182, -195, 244, -299, 164, -161, 244, -351, -189, -170,
	450, 450, 207, 207, -182, -189, 164, -182, 164, -189,
	-189, -432, 292, 251, -308, 222, 290, 245, -156, 303,
	-93, -93, 450, -437, 406, 108, -195, -210, -199, 303,
	-205, -371, -371, -262, 303, -197, -381, 421, -179, -157,
	-93, -93, 450, -180, -158, 303, -139, 173, 443, -170,
	415, -170, -215, -216, -170, -447, 423, 421, 120, 120,
	-229, -209, -195, 448, -142, -381, -195, -381, -381, -381,
	2, 450, 2, -195, 120, 256, 244, -163, 115, -458,
	433, -179, -233, -232, -308, -261, -294, 311, 256, -230,
	411, -188, -261, -240, 454, 149, 433, 452, -230, 2,
	-159, -159, -159, -159, -159, -77, -142, 454, 450, 433,
	433, 450, -381, -381, 451, 454, -195, -181, 178, 178,
	-187, -171, 451, 454, 452, -142, -42, 421, 367, 338,
	338, -170, -191, -179, -195, -192, -210, -289, -308, -335,
	-195, 455, -308, -308, 118, 118, -308, -309, -309, -308,
	118, 149, 450, -308, -318, 30, 30, 451, 454, -304,
	-308, 451, 414, -460, -460, -460, 5, 235, 163, 234,
	-278, 234, -278, -278, 8, 443, -376, 451, -316, 116,
	-308, 377, -376, 443, -419, -185, 450, -170, 419, -232,
	-370, -354, -354, 451, -366, -351, -308, -308, -308, -308,
	-308, -308, -312, -308, -366, -351, -309, -309, -309, -309,
	-309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
	-309, -309, -309, -309, -309, 109, 244, 250, -309, -313,
	-312, -308, -308, -351, 451, 451, 451, -246, -77, -258,
	156, -347, 454, -258, -258, 451, -337, -337, 450, -308,
	202, 449, 451, 454, -331, 449, 454, 457, 433, -229,
	452, -330, 451, 454, -293, 34, 451, -376, -93, 259,
	5, 8, 448, 449, 451, -370, 451, 451, -236, -308,
	382, 382, 120, 244, 408, -394, -391, -308, -235, -336,
	-308, 450, 450, -153, 113, 341, -439, 2, 120, -159,
	120, -159, 425, 450, 450, 382, -246, -308, -143, 102,
	-375, -435, -435, 382, 382, 274, -246, 382, -142, 149,
	2, 2, 2, 451, 34, 254, -170, -195, -197, 34,
	-60, 421, -346, -372, -166, 2, -283, 406, -180, -195,
	120, -164, 213, -458, -379, -407, -286, -284, -261, -253,
	245, 76, 451, -302, -255, -241, -308, 2, 451, -140,
	-141, -381, -381, -381, -142, -144, -144, -300, 2, 450,
	-181, -171, 450, -144, -183, 2, 260, -195, -266, -221,
	-220, 273, 250, -221, 257, 451, -154, -180, -308, -308,
	118, 30, 30, -308, -308, -318, 451, -308, -308, -246,
	449, 5, -308, 451, 451, 451, 451, -308, 452, -420,
	-170, -308, 451, 451, 451, 451, 454, 454, 451, 451,
	451, 451, -313, 149, 109, 250, 450, 451, 451, -315,
	159, 49, -337, -315, -315, -268, -236, -337, -305, -372,
	-306, -180, 448, -376, -339, 450, 452, 449, 2, 448,
	451, -182, -182, -299, 120, -395, 77, -396, 64, 132,
	83, 244, 247, 398, 284, 61, 102, 296, 34, 451,
	451, 454, -154, -235, -236, 244, 360, 102, 244, 102,
	95, 393, -182, -189, -236, -236, -195, 451, 454, 433,
	-199, -197, -381, 451, -180, -382, -217, 181, -93, 2,
	450, -229, -263, -93, 260, 449, 450, -170, 256, 450,
	-180, -165, 212, -458, -379, -162, -261, -292, 450, 256,
	-93, -233, 433, 451, 451, 95, 95, -235, 450, 450,
	-236, 95, -43, -44, 178, 77, 276, -192, 367, 178,
	-154, -308, -308, -308, 451, -460, -376, 443, -414, 273,
	451, -308, -308, -309, 149, 450, -318, -415, 420, -308,
	-246, -415, -415, 451, -332, -372, 2, 448, 2, -299,
	-189, -193, -186, -170, 132, 164, 247, 207, 450, -309,
	-195, 450, 2, -449, 104, 182, -298, -450, 82, 361,
	-336, 451, 451, 247, 247, -308, -351, -159, -159, 451,
	451, 382, -375, 81, -373, 382, -218, -219, 171, -448,
	421, -215, -447, -61, -62, 383, -346, -235, -195, -235,
	256, -458, -379, -163, 110, -236, 77, -286, -314, -142,
	450, 450, 451, -235, -235, 451, 450, 454, 26, 450,
	26, 450, -195, -210, 451, -233, 49, 451, 451, -309,
	-318, 451, -416, -417, -185, -331, 449, 2, -396, -186,
	244, -308, -172, 450, -308, 182, 105, 169, -217, 450,
	296, -178, 64, 450, 450, 450, 433, 149, 450, -447,
	271, 95, 241, 451, 34, -62, 9, 451, -283, 451,
	-195, -379, -164, 401, 245, 451, -189, -261, -382, -382,
	-298, 451, 451, -382, -44, -236, -236, -421, 290, 319,
	158, -246, 451, 454, 34, 120, 451, -397, 229, -170,
	451, 105, 169, -218, -236, -195, -436, 406, -193, -223,
	-222, -220, -225, -224, -220, -246, -373, 81, 271, -246,
	-195, 95, -217, -93, -298, 450, -298, 450, -165, 341,
	-301, 451, 451, -217, -298, 451, 451, 451, 451, -422,
	-423, 41, 395, 86, -308, -422, -422, -417, -419, 132,
	-398, -401, -400, 256, 346, 150, 272, 451, 360, 417,
	-449, 451, -229, -308, 451, 454, 411, 451, 454, 411,
	451, 149, 451, 450, -218, -448, -217, -235, -217, -235,
	-254, -142, -142, -218, -217, -142, -423, 281, 145, 318,
	281, 145, -186, -400, 256, -401, 256, 401, 106, -397,
	-222, 171, -224, 149, 271, -236, -447, -218, 451, -218,
	451, -302, -218, 30, -399, 241, 309, 54, 341, -399,
	-398, 450, 450, 451, -454, 419, -298, -454, -298, -423,
	22, 247, 102, -449, -246, -246, -160, 54, 309, 2,
	-217, -217, 451, 451, -218, -218, -218, 382, -454, -454,
	450, -246, 451, -218,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 348, 349,
	351, 352, 353, 355, 356, 358, 360, 362, 364, 365,
	367, 369, 370, 371, 372, 373, 375, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 435,
	437, 0, 869, 871, 873, 875, 27, 28, 0, 0,
	173, 175, 177, 0, 202, 204, 206, 207, 209, -2,
	0, 302, 303, 305, 307, -2, -2, 0, 0, 424,
	426, 0, 0, 446, 447, 0, 959, -2, 440, 442,
	444, 507, 509, 511, 513, 515, 517, 519, 520, 522,
	524, 526, 528, 530, 532, 534, 536, 538, 540, 542,
	544, 546, 548, 550, 552, 554, -2, -2, -2, 0,
	-2, -2, -2, 887, 31, 33, 35, 37, 39, 41,
	59, 258, 259, 261, 263, 265, 268, 269, 271, 998,
	309, 311, 313, 315, 317, 0, -2, 1012, 0, 0,
	43, 44, 45, 46, 47, 48, 49, 66, 67, 68,
	69, 70, 71, 72, 52, 54, 55, 61, 62, 64,
	0, 0, 974, 976, 978, 980, -2, 0, 0, 7,
	9, 11, 13, 15, 17, 19, 21, 23, 350, 354,
	357, 359, 361, 363, 366, 368, 374, 376, 378, 764,
	1604, 1618, 1619, 1620, 1623, 1624, 1625, 1626, 1627, 1628,
	1957, 2037, 2038, 1647, 1648, 1649, 1650, 1651, 1652, 1653,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673,
	1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683,
	1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693,
	1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
	1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723,
	1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
	1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753,
	1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
	1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813,
	1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
	1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 0, 402, 400, 1598,
	403, 1793, 405, 407, 296, 297, 298, 299, 300, 301,
	0, 156, 0, 417, 411, 416, 418, 420, 421, 422,
	423, 397, 395, 0, 417, 1650, 415, 867, 868, 862,
	863, 1826, 897, 436, -2, -2, -2, 1926, -2, 468,
	-2, 475, 1929, 1828, 478, 0, 480, -2, 483, 870,
	872, 874, 29, 30, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 142, -2, -2, -2, -2, 0, 0,
	1685, 1574, 1620, 1577, 1572, 174, 176, 178, 179, 0,
	0, 0, 0, 0, 0, 203, 205, 208, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 820, 0, 0,
	0, 0, 0, 0, 0, 0, 687, 688, 0, 0,
	693, 815, 816, 837, 0, 0, 0, 0, 304, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 308, 0,
	0, 0, 0, 0, 0, 0, 236, 342, 343, 0,
	999, 0, 0, 0, 0, 154, 146, 0, 0, 676,
	425, 427, 0, 145, 0, 0, 866, 0, 0, 441,
	443, 445, 508, 510, 512, 514, 516, 518, 521, 523,
	525, 527, 529, 531, 533, 535, 537, 539, 541, 543,
	545, 547, 549, 551, 553, 555, 556, 0, 0, 0,
	0, -2, -2, 0, -2, -2, 0, 0, 0, 0,
	0, 0, 0, 0, -2, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 559, 561, 562, 563, 0,
	602, 605, 613, 658, 659, 0, 806, 1000, 899, 877,
	890, 899, 879, 880, 881, 882, 883, 888, 889, 892,
	0, 884, 885, 886, 32, 34, 36, 38, 40, 42,
	260, 262, 264, 266, 270, 272, -2, 972, 973, 310,
	312, 314, 316, 318, 428, 0, 430, 0, 560, 963,
	0, -2, 0, 1004, 1004, 1004, 0, 0, 973, 971,
	0, 433, 434, 487, 488, 1237, 0, 0, 0, 0,
	0, 1472, 1321, 0, 489, -2, 1352, 1354, 1905, 1926,
	1471, 1356, 1357, 1358, 1359, 1360, 0, 0, 1363, 0,
	1365, 1366, 1367, 1368, 0, 1370, 0, 1374, 1375, 1376,
	0, 1910, 1551, 1616, -2, 1142, 1143, 1144, 1145, 1146,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1612, 0,
	1443, 1390, -2, 1637, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1694, -2, -2, -2,
	-2, -2, -2, -2, 1198, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1940, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 0, 1894, 1911, 1912, 1917, 1919,
	1913, 1902, 1413, -2, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1199,
	-2, 1906, 1907, 1922, 1923, 1928, 1933, 1934, 1909, 1918,
	-2, -2, 990, 1801, 993, 764, 991, 975, 977, 0,
	979, 0, 0, 0, 984, 1007, 1005, 0, 1043, 988,
	989, 999, 1061, 1084, 0, 1066, 0, 1084, 1110, 0,
	1071, 1821, 1391, 1392, 0, 1620, 1617, -2, 0, 0,
	0, 0, 0, 0, 199, 398, 0, 404, 406, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 438,
	439, 0, 463, 0, 467, 1901, -2, -2, 471, 900,
	904, 905, 906, 907, 0, 0, 0, 0, 0, 477,
	0, 0, 464, 465, 481, 484, 0, 50, 0, 1911,
	1110, 51, 0, 1588, 1642, 1643, 1644, 1645, 1646, 1940,
	1956, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036,
	53, 0, 1911, 56, 0, 1911, 0, -2, 60, 0,
	1911, 157, 158, 1633, 1634, 1638, 1639, 1640, 1641, 63,
	0, 1594, 65, 0, 1591, 73, 0, 1911, 0, 1571,
	-2, 0, 0, 668, 1568, 1573, 669, 1578, 0, 180,
	181, 182, 183, 184, 1911, 186, 187, 0, 189, 190,
	1911, 192, 193, 0, 195, 211, 212, 0, 214, 0,
	1911, 0, 0, 0, 220, -2, 237, 0, 234, 0,
	224, 225, 227, 228, 229, 230, 231, 0, 0, 0,
	821, 276, 274, 1599, 0, -2, 1911, 809, 812, 1911,
	814, 826, 1602, 0, -2, 0, 997, 1911, 914, 689,
	690, 691, 692, 0, 295, 0, 927, 0, 929, 0,
	949, 1116, 1061, 238, 239, 240, 241, 242, 1911, 0,
	0, 0, 247, 0, 249, 250, 251, 252, 253, 254,
	255, 256, 257, 138, 1911, 321, 340, 138, 1911, 324,
	138, 1911, 327, 138, 1911, 330, 1566, 138, 1911, 333,
	334, 1911, 336, 159, 337, 1911, 339, 0, -2, 391,
	1606, -2, 345, 0, -2, 0, 171, 0, 0, 674,
	675, 0, 864, 865, 0, 448, 0, 0, 557, 558,
	0, 0, 568, 569, 570, 571, 1799, 1709, 574, 0,
	577, -2, 0, 0, 0, 581, 583, 673, 585, 0,
	0, 587, 0, 589, 0, 591, 0, 593, 0, 595,
	-2, -2, -2, 0, 0, 0, 0, 621, 622, 0,
	0, 627, 0, 630, 631, 632, 0, 634, 635, 636,
	637, 0, 639, 640, -2, -2, 644, 646, 0, 653,
	0, 657, 0, 564, 565, 138, 1114, 876, -2, 878,
	0, 894, 966, -2, 0, 429, 0, 432, 970, 964,
	969, 1021, 1022, 0, 0, 0, 0, 1002, 1003, 0,
	0, 0, 961, 962, 0, 0, 0, 0, 1477, 1478,
	1479, 1480, 1481, 1482, 1485, 1486, 1483, 1484, 1487, 1488,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 1491, 1492,
	0, 0, 1494, 0, 1496, 0, 0, 0, 0, 0,
	0, 1300, 1302, 1559, 0, 0, 1493, 1242, 1243, 1244,
	1279, 1280, 0, 0, 1353, 1556, 1555, 1355, 0, 1508,
	0, 1362, 0, 1234, 1369, 1585, -2, 0, 1472, 1503,
	0, 0, 1377, 1378, 1379, 0, 0, 1508, 0, 0,
	1550, 0, 1445, 0, 1178, 0, 1179, 1180, 0, 1181,
	1182, 1195, 1208, 0, 0, 0, 0, 1212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1200, 0, 0, 0, 1531, -2,
	0, 0, 0, 0, 0, 992, 0, 0, 1047, 1560,
	1564, 1565, 1047, 1047, 0, 0, 1509, 1107, 1107, 0,
	0, 1103, 1103, 1103, 1101, 1078, 0, 379, 381, 383,
	385, 386, 387, 389, 1084, 0, 1094, 0, 1084, 1084,
	0, -2, 1066, 0, 0, 1094, 1111, 1112, 0, 0,
	0, 0, 0, 0, 1621, 0, 0, 0, 1608, 0,
	0, 171, 0, 409, 419, 999, 0, 1511, 1133, 1127,
	1136, 1137, 1138, 1139, 1185, 1186, 1187, 1188, 1189, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, -2, 1196, 1198, 1219,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1191, 0, 1166, 1166, 1166, 1183, 1184, 1207, 1218,
	1210, 1218, 1214, 1134, 1135, 1201, 1202, 1203, 1204, 0,
	413, 0, 0, 0, 0, -2, 473, 0, 902, 0,
	908, 498, 499, 500, 910, 911, 0, 476, 501, 502,
	503, 504, 505, 506, 0, 781, 0, 783, 1580, 0,
	474, 491, 479, 0, 485, 74, 859, 104, 0, 859,
	859, 0, 0, 125, 0, 0, 0, 0, 0, 92,
	100, 80, 81, 0, 0, 0, 0, 57, 789, 0,
	792, 0, 0, 0, 0, 0, 0, 0, 804, 0,
	0, 0, 0, 91, 0, 86, 76, 0, 0, 94,
	102, 0, 129, 131, 0, 0, 1097, 667, 0, 0,
	1621, 1576, 0, 0, 0, 0, 213, 215, 0, 217,
	218, 219, 0, 820, 0, 226, 223, 267, 764, 1911,
	788, 1911, 786, 1603, 0, 0, 0, 293, 288, 0,
	290, 807, 0, 996, 0, 0, 0, 0, 827, 0,
	1911, 832, 1590, 1629, 1630, 916, 0, 1122, 0, 930,
	0, 0, 1117, 0, 1119, 0, 244, 245, 246, 0,
	319, 0, 136, 137, 0, 322, 0, 325, 0, 328,
	0, 0, 331, 0, 0, 0, 0, 999, 0, 0,
	0, 148, 0, 0, 0, 0, 0, 171, 171, 1097,
	450, 1097, 452, 0, 0, 572, 573, 575, 576, 578,
	579, -2, -2, 654, 624, 584, 0, 661, 1817, 671,
	586, 588, 590, 592, 594, 597, 616, 604, 0, 608,
	0, 610, 0, 612, 624, 623, 625, 628, 633, 638,
	0, 0, 0, 0, 805, 0, 893, 967, 969, 431,
	965, 1019, 1020, 1025, 1029, 1030, 1033, 1036, 1037, 1027,
	1237, 985, 986, 987, 1013, 1014, 846, 0, 2037, 1238,
	1128, 1239, 1240, 1587, 0, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1254, -2, -2, -2, -2, -2,
	-2, -2, -2, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
	1270, 1271, 1272, 1273, -2, -2, -2, 1277, 1278, -2,
	1495, 1497, 0, 1559, 0, -2, 0, -2, -2, -2,
	-2, 1297, 0, 1299, 1304, 1306, 1308, 0, 0, 0,
	0, 1558, 1318, 1542, 1543, 0, 0, 1474, 1475, 1476,
	1303, 0, 1322, 1557, 1554, 0, 0, 1507, 1010, 1381,
	0, 0, 0, 0, 1388, 0, 1586, 1233, 1220, 1221,
	1222, 1223, 1224, 1225, 1235, 1373, 1505, 0, 1504, 0,
	0, 0, 1515, 0, 1549, 1545, 0, 1609, 1615, 1453,
	0, 0, 0, 0, 1583, 0, 0, 0, 0, 0,
	0, 0, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421,
	1422, 1423, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1425, 0, 1518, -2, -2, -2, -2, -2, -2,
	-2, 0, 1427, 0, 1429, 1509, 1528, 0, 0, 1323,
	0, 0, 0, 1472, 0, 1432, 1509, 1536, 0, 0,
	0, 0, 0, 1509, 0, 1541, 0, 1439, 0, 1441,
	994, 0, 0, 1122, 0, 0, 0, 1563, 1122, 1122,
	0, 1042, 0, 0, 1104, 1105, 1106, 0, 0, 1107,
	0, 1098, 1102, 1099, 1100, 0, 0, 1084, 380, 382,
	384, 388, 390, 1094, 1058, 0, 0, 1589, 1064, 1093,
	0, 764, 1083, 1094, 1094, 0, -2, 1068, 0, 0,
	1010, -2, 172, 763, 0, 0, 0, 0, 399, 401,
	0, 0, 0, 393, 0, 396, 0, 1123, 1126, 0,
	1140, 0, 0, -2, 0, 0, 0, 0, 0, 466,
	0, 901, 909, 0, 495, 0, 497, 0, 782, 1582,
	1581, 0, 486, 0, 0, 0, 0, 858, 108, 1911,
	0, 140, 0, 0, 748, 1595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 790, 791,
	793, 799, 801, 0, 795, 1584, 0, 796, 0, 798,
	800, 802, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 1570, 162, 1096, 1569,
	1579, 0, 185, 188, 191, 194, 0, 221, 0, 0,
	696, 679, 0, 784, 787, 0, 764, 819, 1601, 0,
	275, 171, 0, 0, 289, 0, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 1911, 918, 924, 0, 1012,
	1121, 0, 947, 932, 0, 0, 0, 947, 951, 952,
	954, 955, 0, 0, 1118, 0, 248, 341, 138, 138,
	138, 1567, 138, 138, 160, 335, 338, 344, 392, 999,
	171, 169, 1780, 167, 164, 166, 0, 0, 0, 697,
	699, 700, 701, 702, 0, 1630, 0, 1738, 1630, 0,
	935, 937, 143, 171, 287, 449, 454, 566, 0, 599,
	618, 580, 672, 670, 607, 0, 0, 0, 620, 0,
	0, 0, 0, 0, 655, 656, 660, 1115, 968, 0,
	1031, 0, 1028, 1034, 1035, 0, 1016, 844, 845, 0,
	0, 0, 0, -2, -2, 0, 0, 0, 1319, 0,
	-2, 1298, 1301, 1305, 1307, 1309, 0, 0, 0, 0,
	0, 0, 1498, 0, 1500, 1320, 1552, 1555, 1470, 0,
	0, 1009, 1010, 1010, 1010, 1387, 0, 0, 0, 0,
	0, 0, 0, 1506, 0, 1513, 1514, 0, 1380, 0,
	1546, 0, 0, 0, 1389, 0, 0, 0, 1190, 1164,
	0, 1218, 1216, 1217, 1211, 1218, 1215, 0, 0, 0,
	0, 0, 1408, 0, 0, 0, 1412, 1424, 0, 1426,
	1428, 0, 0, 1430, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1326, 1327, 1328,
	1431, 1534, 1535, 0, 0, 0, 0, 0, 0, 1437,
	0, 1540, 1438, 1440, 999, 1044, 1039, 1561, 1097, 1046,
	1048, 1562, 1592, 1039, 1039, 0, 1510, 0, 0, 1088,
	0, 0, 0, 1090, 0, 1079, 0, 1081, 1094, 1063,
	0, 0, 1056, 0, 1052, 1053, 1054, 1055, 764, 1092,
	1065, 1069, 1609, 0, 1113, 0, 1073, 1076, 0, 0,
	1622, 196, 200, 201, 197, 198, 0, 408, 0, 0,
	1512, 0, 1129, 0, 0, 0, 0, 0, 412, 0,
	462, -2, 493, 494, 496, 0, 492, 105, 859, 0,
	0, 850, 0, 110, 1911, 119, 0, 725, 0, 1593,
	0, 0, 0, 0, 861, 0, 1911, 138, 1911, 138,
	121, 124, 0, 128, 126, 0, 0, 716, 75, 859,
	78, 84, 0, 0, 0, 90, 0, 0, 852, 0,
	794, 797, 803, 58, 0, 854, 848, 0, 847, 130,
	79, 85, 0, 856, 77, 0, 171, 0, 1575, 0,
	0, 0, 0, 695, -2, 0, 0, 0, 0, 0,
	0, 281, 277, 0, 286, 292, 291, 810, -2, 813,
	822, 0, 824, 836, 0, 0, 0, 920, 924, 0,
	923, 997, 1024, 1011, 1120, 925, 947, 0, 0, 0,
	934, 931, 928, 1122, 0, 0, 0, 0, 0, 243,
	320, 323, 326, 329, 332, 346, 147, 0, 0, 0,
	0, 0, 171, 0, 0, 0, 0, 0, 1630, 1630,
	0, 1597, 0, 0, 0, 144, 451, 0, 0, 609,
	611, 624, 647, 648, 711, 0, 711, 0, 0, 1015,
	846, 0, 1241, 1282, 0, 0, -2, 0, 0, 1286,
	0, 0, 0, -2, 0, 0, 0, 1499, 1501, 0,
	1554, 1382, 0, 0, 0, 0, 1364, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 0, 1371, 1372, 1473, 1516, 1544,
	1548, 0, 1610, 1614, 1451, 1452, 1456, 1600, 0, 0,
	0, 1209, 1213, 1393, 0, 0, 0, 0, 0, 0,
	0, 1517, 1527, 1529, 1324, 1325, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, -2, -2, -2, 1342,
	1343, 1344, -2, -2, -2, 0, 0, 0, 1530, 1532,
	1533, 1537, 1538, 0, 1434, 1435, 1436, 1539, 0, 1041,
	0, 1045, 0, 1041, 1041, 1006, 1086, 0, 0, 1109,
	0, 1061, 1080, 0, 1070, 1059, 0, 1060, 0, 1091,
	0, 1067, 1072, 0, 1075, 0, 1382, -2, 155, 410,
	394, 0, 0, 1131, 1141, 0, 1193, 1197, 414, 1095,
	0, 0, 0, 0, 139, 723, 747, 0, 0, 839,
	846, 0, 0, 112, 0, 0, 0, 120, 0, 117,
	0, 123, 127, 0, 0, 0, 0, 87, 88, 89,
	0, 93, 95, 0, 0, 0, 0, 0, 141, 0,
	216, 818, 222, 705, 0, 680, 0, 764, 788, 0,
	273, 0, 280, 0, 808, 823, 0, 0, 0, 0,
	0, 922, 924, 0, 915, 916, 947, 1023, 926, 945,
	-2, 944, 0, 1012, 953, 950, 956, 957, 0, 168,
	0, 163, 165, 0, 150, 0, 0, 698, 703, 0,
	0, 0, 0, 0, 936, 938, 0, 567, 619, 649,
	710, 0, 0, 651, 1026, 1032, 1017, 846, 1284, 1288,
	0, 0, 0, 1290, -2, 0, 1312, -2, -2, 1502,
	1553, 1361, 1010, 1383, 1385, 1386, 1236, 1547, 0, 1458,
	1455, 0, 1442, 1165, 1403, 1404, 0, 0, 1407, 1409,
	1410, 1411, 1526, 0, 0, 0, 0, 1433, 995, 1447,
	0, 0, 1049, 1447, 1447, 1087, 0, 1089, 1084, 1082,
	1057, 1050, 0, 1610, 1074, 0, 0, 1124, 1130, 0,
	1192, 106, 107, 109, 0, 724, 0, 727, 0, 0,
	0, 0, 734, 735, 0, 0, 0, 0, 0, 753,
	762, 0, 841, 0, 0, 0, 114, 133, 0, 0,
	860, 0, 138, 138, 0, 0, 851, 0, 0, 0,
	853, 855, 849, 0, 857, 161, 713, 0, 684, 681,
	696, 679, 785, 817, 0, 278, 0, 835, 0, 0,
	0, 912, 924, 0, 917, 918, 294, 0, 0, 0,
	933, 1024, 0, 170, 171, 0, 0, 0, 0, 0,
	0, 0, 453, 455, 0, 0, 461, 709, 0, 0,
	1018, 1292, -2, -2, 1313, 0, 1611, 1613, 1012, 0,
	1444, 0, 0, -2, 0, 0, 0, 981, 0, 1040,
	1038, 982, 983, 1108, 1094, 0, 1077, 0, 1132, 111,
	0, 728, 729, 1596, 731, 0, 733, 736, 0, 738,
	1632, 0, 742, 749, 754, 0, 705, 0, 759, 760,
	840, 751, 0, 113, 115, 132, 843, 116, 122, 0,
	0, 0, 0, 1679, 97, 0, 679, 712, 0, 682,
	0, 0, 0, 279, 282, 0, 285, 0, 836, 0,
	0, 0, 919, 920, 0, 0, 0, 947, 958, 149,
	0, 0, 762, 0, 0, 746, 0, 0, 457, 0,
	459, 0, 650, 652, 1384, 1462, 0, 1405, 1406, -2,
	0, 1350, 1446, 1448, 0, 1062, 1051, 1125, 726, 730,
	0, 0, 768, 0, 0, 0, 757, 758, 713, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 677,
	0, 685, 0, 705, 0, 283, 284, 762, 0, 762,
	0, 921, 922, 0, 940, 941, 943, 948, 0, 0,
	705, 762, 745, 0, 456, 0, 0, 0, 0, 0,
	0, 1457, 1351, 0, 0, 0, 737, 773, 0, 0,
	0, 755, 756, 753, 0, 764, 118, 0, 842, 0,
	717, 0, 0, 720, 0, 0, 98, 1679, 96, 0,
	0, 686, 713, 684, 705, 0, 705, 0, 913, 0,
	942, 171, 171, 713, 705, 171, 458, 460, 1454, 1459,
	1463, -2, 1875, 1682, 0, 1460, 1461, 1449, 1450, 0,
	739, 769, 770, 0, 765, 766, 767, 1631, 740, 741,
	750, 761, 768, 134, 714, 0, 0, 715, 0, 0,
	101, 0, 103, 0, 679, 683, 713, 0, 713, 0,
	1122, 151, 152, 743, 713, 153, 0, 1465, 1466, 1467,
	1468, 1469, 732, 771, 0, 772, 0, 0, 0, 773,
	718, 0, 721, 0, 99, 0, 678, 833, 762, 833,
	762, 939, 744, 0, 774, 0, 777, 778, 0, 775,
	753, 0, 0, 708, 828, 0, 705, 830, 705, 1464,
	776, 779, 780, 752, 0, 0, 704, 706, 707, 834,
	713, 713, 713, 0, 833, 833, 719, 0, 829, 831,
	0, 0, 713, 722,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 439, 3, 445, 440, 3,
	450, 451, 443, 441, 454, 442, 452, 444, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 458, 3,
	431, 433, 432, 435, 455, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 448, 3, 449, 446, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 456, 438, 457, 436,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 434, 57774, 437,
	57775, 447, 57776, 453, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1051
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1056
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1061
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1072
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1081
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1082
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1141
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1142
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1153
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1168
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1172
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1176
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1187
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1199
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1218
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1248
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1252
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1256
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1262
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1266
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1272
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1282
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1292
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1303
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1310
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1322
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1329
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1337
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1342
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1346
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1351
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1357
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1365
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1374
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1386
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1394
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1405
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1409
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1413
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1423
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1428
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1439
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1443
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1449
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1460
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1470
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1475
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1480
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1485
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1490
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1495
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1500
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1504
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1507
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1516
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1528
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1538
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1545
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1548
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1555
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1564
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1573
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1578
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1585
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1593
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1594
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1598
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1602
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1608
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1616
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = nil
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1626
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = nil
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1637
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1641
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1645
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1651
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1655
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1681
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1684
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1707
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1711
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1714
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1718
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 147:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1755
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1760
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1764
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1770
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1775
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1780
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1785
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1789
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1805
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1808
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1812
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1816
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1824
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1828
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1834
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1838
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1852
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1862
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1872
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1876
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1880
		{
			sqlVAL.union.val = nil
		}
	case 172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1886
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1899
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1900
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1901
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1902
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1912
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1920
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1922
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1925
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1935
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1944
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1952
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1954
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1958
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1961
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1971
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1980
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1988
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1990
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1994
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1997
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2005
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2009
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2024
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2030
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2035
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2047
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2048
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2050
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2051
		{
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2052
		{
			return helpWith(sqllex, "CREATE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2056
		{
			return unimplemented(sqllex, "create cast")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2057
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2062
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2063
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2064
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2065
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2066
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2067
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			return unimplemented(sqllex, "create operator")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2069
		{
			return unimplemented(sqllex, "create publication")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2070
		{
			return unimplemented(sqllex, "create rule")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2071
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2072
		{
			return unimplemented(sqllex, "create server")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2073
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2074
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2075
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2078
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2079
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2082
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2083
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2086
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2087
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2090
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2095
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2096
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2097
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2098
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2099
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2100
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2101
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2102
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2103
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2104
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2105
		{
			return unimplemented(sqllex, "drop server")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2106
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2107
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2108
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2109
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2113
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2114
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2115
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2116
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2118
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2119
		{
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2120
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2121
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2131
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2139
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2143
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2147
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2157
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2166
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2173
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2179
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2185
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2189
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2200
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2212
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2220
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2228
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2242
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2248
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2259
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2263
		{

			sqlVAL.union.val = nil
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2277
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2287
		{
			return helpWith(sqllex, "DELETE")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2294
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2297
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2298
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2299
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2300
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2301
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2310
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2311
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2312
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2313
		{
			return helpWith(sqllex, "DROP")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2316
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2317
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2318
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2319
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2320
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2328
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2332
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2335
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2343
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2347
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2350
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2358
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2362
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2365
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2373
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2381
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2388
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2396
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2404
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2411
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2419
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2423
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2426
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2434
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2438
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2441
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2445
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2450
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2473
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2476
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2478
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2482
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2486
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2493
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2497
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2500
		{
			return helpWith(sqllex, "DELETE")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2502
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2503
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2504
		{
			return helpWith(sqllex, "INSERT")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2505
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2508
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2511
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2516
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2517
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2518
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2523
		{
			return helpWith(sqllex, "DELETE")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2524
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2525
		{
			return helpWith(sqllex, "INSERT")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2527
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2531
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2532
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2536
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2540
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2550
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2558
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2566
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2570
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2574
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2584
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2591
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2599
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2603
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2607
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2617
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2621
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2625
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2629
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2632
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2652
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2656
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2660
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2663
		{
			return helpWith(sqllex, "GRANT")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2683
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2687
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2691
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2694
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2699
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2703
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2713
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2717
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2731
		{
			return helpWith(sqllex, "RESET")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2732
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2740
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2744
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2747
		{
			return helpWith(sqllex, "RESET")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2755
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2758
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2769
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2772
		{
			return helpWith(sqllex, "USE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2776
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2777
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2778
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2779
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2783
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2784
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2785
		{
			return helpWith(sqllex, "USE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2801
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2816
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2819
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2837
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2845
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2849
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2853
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2859
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2869
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2873
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2877
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2881
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2896
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2899
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2909
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2925
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2929
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2934
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2951
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2954
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2956
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2959
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2963
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2982
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2989
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2995
		{
			return unimplemented(sqllex, "set from current")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2996
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3004
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3009
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3016
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3020
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3026
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3030
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3037
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3068
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3072
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3076
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3080
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3084
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3090
		{
			sqlVAL.union.val = tree.Low
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3094
		{
			sqlVAL.union.val = tree.Normal
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = tree.High
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3109
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3113
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3117
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3122
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3126
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3140
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3141
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3142
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3143
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3144
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3146
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3147
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3148
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3149
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3150
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3151
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3152
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3153
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3154
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3155
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3156
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3157
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3158
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3159
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3160
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3161
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3162
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3164
		{
			return helpWith(sqllex, "SHOW")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3171
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3172
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3173
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3184
		{
			sqlVAL.str = "client_encoding"
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3187
		{
			sqlVAL.str = "timezone"
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3188
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3202
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3206
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3221
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3229
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3237
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3244
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3252
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3259
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3269
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3273
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3276
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3278
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3281
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3289
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3292
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3300
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3303
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3316
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3324
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3337
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3340
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3342
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3353
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3358
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3361
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3369
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3372
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3374
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3377
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3381
		{
			sqlVAL.union.val = true
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3383
		{
			sqlVAL.union.val = true
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3385
		{
			sqlVAL.union.val = false
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3393
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3396
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3399
		{
			sqlVAL.union.val = true
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = false
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3409
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3412
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3414
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3417
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3419
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3423
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3426
		{
			sqlVAL.union.val = true
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3427
		{
			sqlVAL.union.val = false
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3435
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3438
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3440
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3443
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3451
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3461
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3471
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3474
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3477
		{
			sqlVAL.union.val = true
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3478
		{
			sqlVAL.union.val = false
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3485
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3489
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3492
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3499
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3506
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3513
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3517
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3525
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3530
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3535
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3539
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3547
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3551
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3555
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3568
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3571
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3579
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3582
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3586
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3590
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3594
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3602
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3610
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3617
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3624
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3628
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3639
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3647
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3655
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3662
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3667
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3787
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3791
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3795
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3834
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3838
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3843
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3847
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3863
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3867
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3879
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3888
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3891
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3927
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3940
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3954
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3955
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3956
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3960
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3972
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3985
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3986
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3987
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4001
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4002
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4003
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4004
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4005
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4006
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4007
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4008
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4013
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4019
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4029
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4035
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4038
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4042
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4051
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4058
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4063
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4068
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4074
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4081
		{
			sqlVAL.str = ""
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4088
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4094
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4101
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4108
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4114
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4118
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4124
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4134
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 722:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4144
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4158
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4169
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4173
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4179
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4183
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4187
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4191
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4195
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4199
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4203
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4225
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4229
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4233
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4237
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4241
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4245
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4255
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4259
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4263
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 743:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4270
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4280
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4292
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4302
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4314
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4319
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4325
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4331
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4342
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4352
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4364
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4365
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4366
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4367
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4368
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4369
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4386
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4390
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4396
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4400
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4420
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4424
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4428
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4432
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4441
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4445
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4449
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4453
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4457
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4463
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4469
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4477
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4481
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4489
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4493
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4499
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4503
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4509
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4528
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4533
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4537
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4541
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4548
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4549
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4551
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4552
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4553
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4556
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4558
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4560
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4562
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4563
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4565
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4566
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4568
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4570
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4578
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4581
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4589
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4593
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4596
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4600
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4604
		{
			sqlVAL.union.val = nil
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4614
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4618
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4621
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4626
		{
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4627
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4635
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4643
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4644
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4647
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4648
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4654
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4656
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4658
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4660
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4662
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4664
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4680
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4694
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4709
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4723
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4737
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4740
		{
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4741
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4745
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4760
		{
			sqlVAL.union.val = false
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4766
		{
			sqlVAL.union.val = true
		}
	case 838:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4770
		{
			sqlVAL.union.val = false
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4776
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4789
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4800
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4801
		{
			sqlVAL.str = ""
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4809
		{
			sqlVAL.union.val = tree.Descending
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4813
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 847:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4819
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4826
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4830
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4836
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4842
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4850
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4856
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4864
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4870
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4878
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4882
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4887
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4888
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4891
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4892
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4900
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4903
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4913
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4922
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4925
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4933
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4936
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4940
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4941
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4942
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4958
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4961
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4963
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4966
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4976
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4979
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4981
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4984
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4988
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4993
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4994
		{
		}
	case 887:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4995
		{
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5003
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5010
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5013
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5014
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5018
		{
			sqlVAL.str = ""
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5022
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5026
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5030
		{
			sqlVAL.str = ""
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5036
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5040
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5046
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5050
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5056
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5060
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5073
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5075
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5079
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5084
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5088
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5092
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5104
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5110
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5114
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 912:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5124
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5134
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5144
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5148
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5152
		{
			sqlVAL.str = ""
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5158
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5162
		{
			sqlVAL.str = ""
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5168
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5172
		{
			sqlVAL.str = ""
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5178
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5182
		{
			sqlVAL.str = ""
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5187
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5188
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5200
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5214
		{
			return helpWith(sqllex, "INSERT")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5225
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5232
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5236
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5245
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5252
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5256
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5260
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5266
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5290
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 939:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5298
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5304
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5307
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5308
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5310
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5316
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5321
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5325
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 948:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5342
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5353
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5357
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5358
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5362
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5379
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5382
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 958:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5386
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5429
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5435
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5439
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5454
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5458
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5462
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5466
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5470
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5474
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5479
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5480
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5485
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5520
		{
			return helpWith(sqllex, "SELECT")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5521
		{
			return helpWith(sqllex, "VALUES")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5522
		{
			return helpWith(sqllex, "TABLE")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5544
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5557
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5571
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5583
		{
			return helpWith(sqllex, "SELECT")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5587
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5596
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5605
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5620
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5627
		{
			return helpWith(sqllex, "TABLE")
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5639
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5643
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5647
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5651
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5655
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5661
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5669
		{
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5670
		{
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5674
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5678
		{
			sqlVAL.union.val = nil
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5683
		{
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5684
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5688
		{
			sqlVAL.union.val = true
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5692
		{
			sqlVAL.union.val = false
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5696
		{
			sqlVAL.union.val = false
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5702
		{
			sqlVAL.union.val = true
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5713
		{
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5714
		{
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5717
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5718
		{
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5722
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5732
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5738
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5748
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5752
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5757
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5772
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5781
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5792
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5796
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5805
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5811
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5818
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5825
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5834
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5838
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5842
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5848
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5849
		{
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5852
		{
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5853
		{
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5870
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5874
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5880
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5884
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5903
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5906
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5908
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5920
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5923
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5925
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5931
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5941
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5945
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5950
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5955
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5961
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5966
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5973
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5978
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5989
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5993
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5997
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6005
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6036
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6050
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6060
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6068
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6077
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6081
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6085
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6096
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6120
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6130
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6136
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6142
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6148
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6150
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6153
		{
			sqlVAL.union.val = nil
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6154
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6155
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6159
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6169
		{
			sqlVAL.union.val = true
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6173
		{
			sqlVAL.union.val = false
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6193
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6197
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6201
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6205
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6209
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6213
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6219
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6223
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6230
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6236
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6243
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6249
		{
			sqlVAL.str = tree.AstFull
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6253
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6257
		{
			sqlVAL.str = tree.AstRight
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6261
		{
			sqlVAL.str = tree.AstInner
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6267
		{
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6268
		{
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6289
		{
			sqlVAL.str = tree.AstHash
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6293
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6297
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.str = ""
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6314
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6318
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6324
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6325
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6326
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6330
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6335
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6349
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6353
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6359
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6367
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6377
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6384
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6396
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6409
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6417
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6418
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6426
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6432
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6439
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6440
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6442
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6450
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6451
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6462
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6463
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6480
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6484
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6488
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6492
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6496
		{
			sqlVAL.union.val = types.String
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = types.Name
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6504
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6513
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6517
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6521
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6525
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6529
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6533
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6537
		{
			sqlVAL.union.val = types.INet
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6541
		{
			sqlVAL.union.val = types.Oid
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6545
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6549
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6553
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6584
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6592
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6600
		{
			sqlVAL.union.val = nil
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6607
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6611
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6615
		{
			sqlVAL.union.val = types.Int2
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6619
		{
			sqlVAL.union.val = types.Int2
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6623
		{
			sqlVAL.union.val = types.Int4
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6627
		{
			sqlVAL.union.val = types.Int
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6631
		{
			sqlVAL.union.val = types.Int
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6635
		{
			sqlVAL.union.val = types.Int
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6639
		{
			sqlVAL.union.val = types.Float4
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6643
		{
			sqlVAL.union.val = types.Float4
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6647
		{
			sqlVAL.union.val = types.Float
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6651
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6655
		{
			sqlVAL.union.val = types.Float
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6659
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6667
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6675
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6683
		{
			sqlVAL.union.val = types.Bool
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6687
		{
			sqlVAL.union.val = types.Bool
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = types.RegType
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6716
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6729
		{
			sqlVAL.union.val = types.Float
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6735
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6741
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6749
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6753
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6763
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6775
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6781
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6785
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6789
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6793
		{
			sqlVAL.union.val = types.String
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6802
		{
			sqlVAL.union.val = true
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6803
		{
			sqlVAL.union.val = false
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = types.Date
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6812
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6817
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6824
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6825
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6827
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6835
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6847
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6851
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6860
		{
			sqlVAL.union.val = true
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6861
		{
			sqlVAL.union.val = false
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6862
		{
			sqlVAL.union.val = false
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = types.Interval
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6872
		{
			sqlVAL.union.val = tree.Year
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6876
		{
			sqlVAL.union.val = tree.Month
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6880
		{
			sqlVAL.union.val = tree.Day
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6884
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6888
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6892
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6898
		{
			sqlVAL.union.val = tree.Month
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6902
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6906
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6910
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6918
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6929
		{
			sqlVAL.union.val = nil
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6935
		{
			sqlVAL.union.val = tree.Second
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6938
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6962
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6966
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6973
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6982
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6987
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6991
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6995
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6999
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7003
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7007
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7011
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7015
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7019
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7023
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7027
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7031
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7035
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7043
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7047
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7051
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7055
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7059
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7063
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7067
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7071
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7075
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7079
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7083
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7111
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7115
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7119
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7123
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7127
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7131
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7135
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7139
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7143
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7163
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7167
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7171
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7226
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7228
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7232
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7236
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7240
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7244
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7248
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7252
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7256
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7260
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7268
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7272
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7284
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7288
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7292
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7309
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7314
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7326
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7330
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7334
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7338
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7342
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7346
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7350
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7354
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7358
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7362
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7366
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7370
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7374
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7378
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7382
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7386
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7390
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7394
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7398
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7402
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7406
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7410
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7414
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7418
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7422
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7426
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7430
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7434
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7492
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7496
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7500
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7504
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7508
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7513
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7515
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7519
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7522
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7524
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7528
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7532
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7536
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7540
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7549
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7556
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7560
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7564
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7588
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7592
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7596
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7599
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7600
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7610
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7613
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7624
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7631
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7645
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7647
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7651
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7665
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7669
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7675
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7679
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7683
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7691
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7695
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7699
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7711
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7715
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7719
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7733
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7735
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7738
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7740
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7743
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7745
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7748
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7750
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7753
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7755
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7758
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7760
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7763
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7765
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7768
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7770
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7774
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7777
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7778
		{
			return unimplemented(sqllex, "treat")
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7792
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7796
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7799
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7801
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7804
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7809
		{
			return unimplemented(sqllex, "within group")
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7810
		{
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7814
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7825
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7829
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7835
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7839
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7845
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7853
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7857
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.str = ""
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7894
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7923
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7930
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7936
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7949
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7996
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8012
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8016
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8023
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8035
		{
			sqlVAL.union.val = tree.Any
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8039
		{
			sqlVAL.union.val = tree.Some
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = tree.All
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = tree.Div
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8057
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8058
		{
			sqlVAL.union.val = tree.LT
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8059
		{
			sqlVAL.union.val = tree.GT
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = tree.LE
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = tree.GE
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8063
		{
			sqlVAL.union.val = tree.NE
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8067
		{
			sqlVAL.union.val = tree.Like
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8068
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8069
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8070
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8093
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8097
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8103
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8107
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8111
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8132
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8136
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8143
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8149
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8159
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8169
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8173
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8179
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8189
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8193
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8215
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8219
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8223
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8236
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8240
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8257
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8269
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8273
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8279
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8285
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8291
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8295
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8299
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8305
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8324
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8334
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8340
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8357
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8361
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8368
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8374
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8383
		{
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8384
		{
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8388
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8392
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8398
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8407
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8411
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8415
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8423
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8437
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8456
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8464
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8487
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8496
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8500
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8504
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8508
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8514
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8526
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8530
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8539
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8550
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8559
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8567
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8664
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8671
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8675
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8679
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8701
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8714
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8732
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8745
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8752
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8777
		{
			sqlVAL.str = ""
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8783
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8787
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
