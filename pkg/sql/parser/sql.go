// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:64

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:579
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9473

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	-2, 1031,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 69,
	179, 870,
	196, 870,
	211, 242,
	288, 242,
	296, 710,
	323, 242,
	332, 710,
	369, 710,
	392, 242,
	416, 710,
	-2, 0,
	-1, 75,
	211, 246,
	-2, 0,
	-1, 76,
	106, 1031,
	185, 1031,
	402, 1031,
	403, 1031,
	-2, 0,
	-1, 87,
	119, 1005,
	134, 1005,
	193, 1005,
	222, 1005,
	253, 1005,
	263, 1005,
	397, 1005,
	-2, 992,
	-1, 117,
	124, 632,
	202, 624,
	210, 632,
	290, 618,
	341, 618,
	385, 632,
	-2, 0,
	-1, 118,
	4, 1033,
	21, 1033,
	22, 1033,
	23, 1033,
	24, 1033,
	25, 1033,
	27, 1033,
	32, 1033,
	37, 1033,
	38, 1033,
	39, 1033,
	40, 1033,
	41, 1033,
	42, 1033,
	43, 1033,
	44, 1033,
	45, 1033,
	46, 1033,
	47, 1033,
	49, 1033,
	50, 1033,
	51, 1033,
	52, 1033,
	53, 1033,
	54, 1033,
	57, 1033,
	58, 1033,
	59, 1033,
	60, 1033,
	62, 1033,
	63, 1033,
	67, 1033,
	68, 1033,
	69, 1033,
	70, 1033,
	71, 1033,
	73, 1033,
	74, 1033,
	75, 1033,
	76, 1033,
	78, 1033,
	80, 1033,
	81, 1033,
	82, 1033,
	85, 1033,
	86, 1033,
	94, 1033,
	95, 1033,
	96, 1033,
	97, 1033,
	98, 1033,
	99, 1033,
	100, 1033,
	101, 1033,
	103, 1033,
	105, 1033,
	106, 1033,
	108, 1033,
	111, 1033,
	112, 1033,
	113, 1033,
	115, 1033,
	117, 1033,
	118, 1033,
	120, 1033,
	121, 1033,
	122, 1033,
	123, 1033,
	124, 1033,
	125, 1033,
	126, 1033,
	127, 1033,
	128, 1033,
	129, 1033,
	130, 1033,
	131, 1033,
	133, 1033,
	139, 1033,
	140, 1033,
	141, 1033,
	142, 1033,
	143, 1033,
	144, 1033,
	146, 1033,
	148, 1033,
	152, 1033,
	153, 1033,
	155, 1033,
	156, 1033,
	158, 1033,
	159, 1033,
	161, 1033,
	162, 1033,
	163, 1033,
	164, 1033,
	165, 1033,
	166, 1033,
	167, 1033,
	168, 1033,
	170, 1033,
	171, 1033,
	173, 1033,
	174, 1033,
	175, 1033,
	179, 1033,
	180, 1033,
	181, 1033,
	182, 1033,
	185, 1033,
	186, 1033,
	187, 1033,
	188, 1033,
	189, 1033,
	190, 1033,
	191, 1033,
	192, 1033,
	194, 1033,
	196, 1033,
	198, 1033,
	200, 1033,
	201, 1033,
	202, 1033,
	204, 1033,
	205, 1033,
	208, 1033,
	209, 1033,
	210, 1033,
	211, 1033,
	213, 1033,
	214, 1033,
	216, 1033,
	217, 1033,
	219, 1033,
	220, 1033,
	223, 1033,
	224, 1033,
	227, 1033,
	228, 1033,
	230, 1033,
	231, 1033,
	232, 1033,
	233, 1033,
	234, 1033,
	235, 1033,
	236, 1033,
	237, 1033,
	238, 1033,
	239, 1033,
	241, 1033,
	242, 1033,
	243, 1033,
	244, 1033,
	246, 1033,
	249, 1033,
	250, 1033,
	251, 1033,
	252, 1033,
	254, 1033,
	255, 1033,
	256, 1033,
	258, 1033,
	259, 1033,
	260, 1033,
	261, 1033,
	264, 1033,
	265, 1033,
	267, 1033,
	269, 1033,
	270, 1033,
	271, 1033,
	272, 1033,
	273, 1033,
	274, 1033,
	275, 1033,
	276, 1033,
	277, 1033,
	278, 1033,
	280, 1033,
	281, 1033,
	282, 1033,
	283, 1033,
	284, 1033,
	285, 1033,
	287, 1033,
	289, 1033,
	290, 1033,
	291, 1033,
	292, 1033,
	293, 1033,
	294, 1033,
	295, 1033,
	296, 1033,
	297, 1033,
	299, 1033,
	300, 1033,
	301, 1033,
	302, 1033,
	303, 1033,
	305, 1033,
	306, 1033,
	307, 1033,
	308, 1033,
	309, 1033,
	310, 1033,
	311, 1033,
	312, 1033,
	314, 1033,
	316, 1033,
	317, 1033,
	318, 1033,
	319, 1033,
	320, 1033,
	321, 1033,
	323, 1033,
	324, 1033,
	325, 1033,
	326, 1033,
	327, 1033,
	328, 1033,
	329, 1033,
	330, 1033,
	332, 1033,
	333, 1033,
	334, 1033,
	335, 1033,
	336, 1033,
	337, 1033,
	338, 1033,
	339, 1033,
	340, 1033,
	341, 1033,
	343, 1033,
	344, 1033,
	345, 1033,
	346, 1033,
	348, 1033,
	349, 1033,
	350, 1033,
	351, 1033,
	353, 1033,
	354, 1033,
	355, 1033,
	356, 1033,
	357, 1033,
	358, 1033,
	359, 1033,
	360, 1033,
	361, 1033,
	362, 1033,
	363, 1033,
	364, 1033,
	366, 1033,
	367, 1033,
	368, 1033,
	370, 1033,
	371, 1033,
	372, 1033,
	373, 1033,
	374, 1033,
	375, 1033,
	376, 1033,
	378, 1033,
	379, 1033,
	380, 1033,
	381, 1033,
	383, 1033,
	385, 1033,
	386, 1033,
	387, 1033,
	388, 1033,
	389, 1033,
	391, 1033,
	392, 1033,
	393, 1033,
	395, 1033,
	396, 1033,
	399, 1033,
	400, 1033,
	401, 1033,
	402, 1033,
	403, 1033,
	404, 1033,
	406, 1033,
	408, 1033,
	409, 1033,
	410, 1033,
	411, 1033,
	412, 1033,
	413, 1033,
	414, 1033,
	416, 1033,
	417, 1033,
	418, 1033,
	423, 1033,
	424, 1033,
	425, 1033,
	426, 1033,
	427, 1033,
	428, 1033,
	-2, 0,
	-1, 119,
	1, 923,
	200, 923,
	287, 923,
	294, 923,
	431, 923,
	454, 923,
	-2, 0,
	-1, 121,
	1, 923,
	454, 923,
	-2, 0,
	-1, 122,
	1, 923,
	454, 923,
	-2, 0,
	-1, 123,
	1, 927,
	454, 927,
	-2, 0,
	-1, 147,
	119, 1004,
	134, 1004,
	193, 1004,
	222, 1004,
	253, 1004,
	263, 1004,
	397, 1004,
	-2, 1001,
	-1, 179,
	4, 1040,
	5, 1040,
	6, 1040,
	7, 1040,
	8, 1040,
	9, 1040,
	10, 1040,
	21, 1040,
	22, 1040,
	23, 1040,
	24, 1040,
	25, 1040,
	27, 1040,
	32, 1040,
	33, 1040,
	37, 1040,
	38, 1040,
	39, 1040,
	40, 1040,
	41, 1040,
	42, 1040,
	43, 1040,
	44, 1040,
	45, 1040,
	46, 1040,
	47, 1040,
	49, 1040,
	50, 1040,
	51, 1040,
	52, 1040,
	53, 1040,
	54, 1040,
	55, 1040,
	56, 1040,
	57, 1040,
	58, 1040,
	59, 1040,
	60, 1040,
	62, 1040,
	63, 1040,
	65, 1040,
	67, 1040,
	68, 1040,
	69, 1040,
	70, 1040,
	71, 1040,
	73, 1040,
	74, 1040,
	75, 1040,
	76, 1040,
	78, 1040,
	80, 1040,
	81, 1040,
	82, 1040,
	84, 1040,
	85, 1040,
	86, 1040,
	87, 1040,
	88, 1040,
	89, 1040,
	90, 1040,
	91, 1040,
	92, 1040,
	93, 1040,
	94, 1040,
	95, 1040,
	96, 1040,
	97, 1040,
	98, 1040,
	99, 1040,
	100, 1040,
	101, 1040,
	102, 1040,
	103, 1040,
	105, 1040,
	106, 1040,
	108, 1040,
	111, 1040,
	112, 1040,
	113, 1040,
	115, 1040,
	117, 1040,
	118, 1040,
	120, 1040,
	121, 1040,
	122, 1040,
	123, 1040,
	124, 1040,
	125, 1040,
	126, 1040,
	127, 1040,
	128, 1040,
	129, 1040,
	130, 1040,
	131, 1040,
	132, 1040,
	133, 1040,
	139, 1040,
	140, 1040,
	141, 1040,
	142, 1040,
	143, 1040,
	144, 1040,
	146, 1040,
	148, 1040,
	151, 1040,
	152, 1040,
	153, 1040,
	155, 1040,
	156, 1040,
	158, 1040,
	159, 1040,
	161, 1040,
	162, 1040,
	163, 1040,
	164, 1040,
	165, 1040,
	166, 1040,
	167, 1040,
	168, 1040,
	169, 1040,
	170, 1040,
	171, 1040,
	173, 1040,
	174, 1040,
	175, 1040,
	179, 1040,
	180, 1040,
	181, 1040,
	182, 1040,
	184, 1040,
	185, 1040,
	186, 1040,
	187, 1040,
	188, 1040,
	189, 1040,
	190, 1040,
	191, 1040,
	192, 1040,
	194, 1040,
	196, 1040,
	197, 1040,
	198, 1040,
	199, 1040,
	200, 1040,
	201, 1040,
	202, 1040,
	203, 1040,
	204, 1040,
	205, 1040,
	208, 1040,
	209, 1040,
	210, 1040,
	211, 1040,
	213, 1040,
	214, 1040,
	216, 1040,
	217, 1040,
	218, 1040,
	219, 1040,
	220, 1040,
	221, 1040,
	223, 1040,
	224, 1040,
	227, 1040,
	228, 1040,
	230, 1040,
	231, 1040,
	232, 1040,
	233, 1040,
	234, 1040,
	235, 1040,
	236, 1040,
	237, 1040,
	238, 1040,
	239, 1040,
	240, 1040,
	241, 1040,
	242, 1040,
	243, 1040,
	244, 1040,
	245, 1040,
	246, 1040,
	247, 1040,
	248, 1040,
	249, 1040,
	250, 1040,
	251, 1040,
	252, 1040,
	254, 1040,
	255, 1040,
	256, 1040,
	259, 1040,
	260, 1040,
	261, 1040,
	264, 1040,
	265, 1040,
	266, 1040,
	267, 1040,
	268, 1040,
	269, 1040,
	270, 1040,
	271, 1040,
	272, 1040,
	273, 1040,
	274, 1040,
	275, 1040,
	276, 1040,
	277, 1040,
	278, 1040,
	280, 1040,
	281, 1040,
	282, 1040,
	283, 1040,
	284, 1040,
	285, 1040,
	287, 1040,
	289, 1040,
	290, 1040,
	291, 1040,
	292, 1040,
	293, 1040,
	294, 1040,
	295, 1040,
	296, 1040,
	297, 1040,
	299, 1040,
	300, 1040,
	301, 1040,
	302, 1040,
	303, 1040,
	305, 1040,
	306, 1040,
	307, 1040,
	308, 1040,
	309, 1040,
	310, 1040,
	311, 1040,
	312, 1040,
	314, 1040,
	315, 1040,
	316, 1040,
	317, 1040,
	318, 1040,
	319, 1040,
	320, 1040,
	321, 1040,
	323, 1040,
	324, 1040,
	325, 1040,
	326, 1040,
	327, 1040,
	328, 1040,
	329, 1040,
	330, 1040,
	332, 1040,
	333, 1040,
	334, 1040,
	335, 1040,
	336, 1040,
	337, 1040,
	338, 1040,
	339, 1040,
	340, 1040,
	341, 1040,
	342, 1040,
	343, 1040,
	344, 1040,
	345, 1040,
	346, 1040,
	347, 1040,
	348, 1040,
	349, 1040,
	350, 1040,
	351, 1040,
	353, 1040,
	354, 1040,
	355, 1040,
	356, 1040,
	357, 1040,
	358, 1040,
	359, 1040,
	360, 1040,
	361, 1040,
	362, 1040,
	363, 1040,
	364, 1040,
	366, 1040,
	367, 1040,
	368, 1040,
	370, 1040,
	371, 1040,
	372, 1040,
	373, 1040,
	374, 1040,
	375, 1040,
	376, 1040,
	378, 1040,
	379, 1040,
	380, 1040,
	381, 1040,
	383, 1040,
	385, 1040,
	386, 1040,
	387, 1040,
	388, 1040,
	389, 1040,
	390, 1040,
	391, 1040,
	392, 1040,
	393, 1040,
	395, 1040,
	396, 1040,
	398, 1040,
	399, 1040,
	400, 1040,
	401, 1040,
	402, 1040,
	403, 1040,
	404, 1040,
	405, 1040,
	406, 1040,
	408, 1040,
	409, 1040,
	410, 1040,
	411, 1040,
	412, 1040,
	413, 1040,
	414, 1040,
	416, 1040,
	417, 1040,
	418, 1040,
	423, 1040,
	424, 1040,
	425, 1040,
	426, 1040,
	427, 1040,
	428, 1040,
	429, 1040,
	437, 1040,
	442, 1040,
	443, 1040,
	444, 1040,
	451, 1040,
	456, 1040,
	-2, 0,
	-1, 548,
	150, 1707,
	382, 1707,
	434, 1707,
	453, 1707,
	-2, 0,
	-1, 549,
	150, 1784,
	382, 1784,
	434, 1784,
	453, 1784,
	-2, 0,
	-1, 550,
	150, 1697,
	382, 1697,
	434, 1697,
	453, 1697,
	-2, 0,
	-1, 552,
	150, 1872,
	382, 1872,
	434, 1872,
	453, 1872,
	-2, 0,
	-1, 554,
	150, 1899,
	382, 1899,
	434, 1899,
	453, 1899,
	-2, 0,
	-1, 561,
	150, 1794,
	382, 1794,
	434, 1794,
	453, 1794,
	-2, 491,
	-1, 578,
	453, 1656,
	455, 1656,
	-2, 679,
	-1, 579,
	453, 1658,
	455, 1658,
	-2, 680,
	-1, 580,
	453, 1657,
	455, 1657,
	-2, 681,
	-1, 581,
	455, 1603,
	-2, 682,
	-1, 726,
	290, 619,
	341, 619,
	-2, 0,
	-1, 727,
	290, 618,
	341, 618,
	-2, 571,
	-1, 730,
	1, 642,
	450, 642,
	452, 642,
	454, 642,
	-2, 0,
	-1, 731,
	1, 678,
	147, 678,
	450, 678,
	452, 678,
	454, 678,
	-2, 0,
	-1, 740,
	1, 642,
	450, 642,
	452, 642,
	454, 642,
	-2, 0,
	-1, 741,
	1, 644,
	450, 644,
	452, 644,
	454, 644,
	-2, 0,
	-1, 742,
	1, 647,
	450, 647,
	452, 647,
	454, 647,
	-2, 0,
	-1, 746,
	1, 661,
	450, 661,
	452, 661,
	454, 661,
	-2, 0,
	-1, 747,
	1, 663,
	450, 663,
	452, 663,
	454, 663,
	-2, 0,
	-1, 790,
	134, 1042,
	222, 1042,
	253, 1042,
	-2, 1001,
	-1, 805,
	134, 1041,
	222, 1041,
	253, 1041,
	-2, 1001,
	-1, 829,
	453, 1655,
	-2, 499,
	-1, 858,
	451, 1647,
	-2, 1638,
	-1, 864,
	5, 1177,
	-2, 1688,
	-1, 865,
	5, 1178,
	-2, 1692,
	-1, 866,
	5, 1179,
	-2, 1691,
	-1, 867,
	5, 1180,
	-2, 1897,
	-1, 868,
	5, 1181,
	-2, 1796,
	-1, 869,
	5, 1182,
	-2, 1864,
	-1, 870,
	5, 1183,
	-2, 1866,
	-1, 871,
	5, 1184,
	-2, 1877,
	-1, 872,
	5, 1185,
	-2, 1867,
	-1, 873,
	5, 1186,
	-2, 1868,
	-1, 874,
	5, 1187,
	-2, 1687,
	-1, 875,
	5, 1188,
	-2, 1912,
	-1, 876,
	5, 1189,
	-2, 1759,
	-1, 877,
	5, 1190,
	-2, 1804,
	-1, 878,
	5, 1191,
	-2, 1806,
	-1, 879,
	5, 1192,
	-2, 1763,
	-1, 880,
	5, 1193,
	451, 1665,
	-2, 1656,
	-1, 881,
	5, 1249,
	451, 1249,
	-2, 1947,
	-1, 886,
	451, 1666,
	-2, 1657,
	-1, 888,
	5, 1197,
	-2, 1945,
	-1, 889,
	5, 1198,
	-2, 1946,
	-1, 890,
	5, 1199,
	-2, 1762,
	-1, 891,
	5, 1200,
	-2, 1958,
	-1, 892,
	5, 1201,
	-2, 1764,
	-1, 893,
	5, 1202,
	-2, 1765,
	-1, 894,
	5, 1203,
	-2, 1766,
	-1, 895,
	5, 1204,
	-2, 1927,
	-1, 896,
	5, 1205,
	-2, 1956,
	-1, 897,
	5, 1206,
	-2, 1742,
	-1, 898,
	5, 1207,
	-2, 1743,
	-1, 899,
	5, 1221,
	-2, 1939,
	-1, 901,
	5, 1196,
	-2, 1935,
	-1, 902,
	5, 1196,
	-2, 1934,
	-1, 903,
	5, 1196,
	-2, 1951,
	-1, 904,
	5, 1213,
	-2, 1929,
	-1, 905,
	5, 1214,
	-2, 1689,
	-1, 906,
	5, 1224,
	-2, 1928,
	-1, 907,
	5, 1226,
	-2, 1967,
	-1, 909,
	5, 1237,
	-2, 1717,
	-1, 910,
	5, 1248,
	-2, 1960,
	-1, 911,
	5, 1240,
	-2, 1961,
	-1, 912,
	5, 1248,
	-2, 1962,
	-1, 913,
	5, 1244,
	-2, 1963,
	-1, 914,
	5, 1164,
	-2, 1772,
	-1, 915,
	5, 1165,
	-2, 1773,
	-1, 916,
	453, 1653,
	-2, 1637,
	-1, 917,
	451, 1987,
	-2, 1654,
	-1, 937,
	5, 1232,
	-2, 1887,
	-1, 954,
	5, 1231,
	-2, 1968,
	-1, 964,
	5, 1233,
	417, 1233,
	-2, 1930,
	-1, 965,
	5, 1234,
	417, 1234,
	-2, 1931,
	-1, 1001,
	451, 1665,
	-2, 1656,
	-1, 1030,
	150, 1899,
	382, 1899,
	434, 1899,
	453, 1899,
	-2, 0,
	-1, 1031,
	1, 479,
	454, 479,
	-2, 935,
	-1, 1151,
	305, 1634,
	444, 1634,
	-2, 1633,
	-1, 1174,
	456, 1634,
	-2, 1635,
	-1, 1209,
	296, 710,
	416, 710,
	-2, 241,
	-1, 1229,
	276, 1029,
	-2, 843,
	-1, 1238,
	257, 1660,
	-2, 0,
	-1, 1302,
	1, 356,
	450, 356,
	452, 356,
	454, 356,
	-2, 1003,
	-1, 1305,
	4, 1966,
	11, 1966,
	12, 1966,
	14, 1966,
	15, 1966,
	16, 1966,
	17, 1966,
	18, 1966,
	19, 1966,
	21, 1966,
	22, 1966,
	23, 1966,
	24, 1966,
	25, 1966,
	27, 1966,
	30, 1966,
	32, 1966,
	34, 1966,
	37, 1966,
	38, 1966,
	39, 1966,
	40, 1966,
	41, 1966,
	42, 1966,
	43, 1966,
	44, 1966,
	45, 1966,
	46, 1966,
	47, 1966,
	49, 1966,
	50, 1966,
	51, 1966,
	52, 1966,
	53, 1966,
	54, 1966,
	57, 1966,
	58, 1966,
	59, 1966,
	60, 1966,
	62, 1966,
	63, 1966,
	64, 1966,
	67, 1966,
	68, 1966,
	69, 1966,
	70, 1966,
	71, 1966,
	72, 1966,
	73, 1966,
	74, 1966,
	75, 1966,
	76, 1966,
	78, 1966,
	79, 1966,
	80, 1966,
	81, 1966,
	82, 1966,
	84, 1966,
	85, 1966,
	86, 1966,
	94, 1966,
	95, 1966,
	96, 1966,
	97, 1966,
	98, 1966,
	99, 1966,
	100, 1966,
	101, 1966,
	103, 1966,
	105, 1966,
	106, 1966,
	108, 1966,
	111, 1966,
	112, 1966,
	113, 1966,
	115, 1966,
	117, 1966,
	118, 1966,
	120, 1966,
	121, 1966,
	122, 1966,
	123, 1966,
	124, 1966,
	125, 1966,
	126, 1966,
	127, 1966,
	128, 1966,
	129, 1966,
	130, 1966,
	131, 1966,
	135, 1966,
	136, 1966,
	137, 1966,
	138, 1966,
	139, 1966,
	140, 1966,
	141, 1966,
	142, 1966,
	143, 1966,
	144, 1966,
	145, 1966,
	146, 1966,
	148, 1966,
	151, 1966,
	152, 1966,
	153, 1966,
	155, 1966,
	156, 1966,
	158, 1966,
	159, 1966,
	161, 1966,
	162, 1966,
	163, 1966,
	164, 1966,
	165, 1966,
	166, 1966,
	167, 1966,
	168, 1966,
	169, 1966,
	170, 1966,
	171, 1966,
	172, 1966,
	173, 1966,
	174, 1966,
	175, 1966,
	176, 1966,
	177, 1966,
	178, 1966,
	180, 1966,
	181, 1966,
	182, 1966,
	184, 1966,
	185, 1966,
	186, 1966,
	187, 1966,
	188, 1966,
	189, 1966,
	190, 1966,
	191, 1966,
	192, 1966,
	194, 1966,
	196, 1966,
	197, 1966,
	198, 1966,
	199, 1966,
	200, 1966,
	201, 1966,
	202, 1966,
	203, 1966,
	204, 1966,
	205, 1966,
	206, 1966,
	207, 1966,
	208, 1966,
	209, 1966,
	210, 1966,
	211, 1966,
	213, 1966,
	214, 1966,
	216, 1966,
	217, 1966,
	218, 1966,
	219, 1966,
	220, 1966,
	221, 1966,
	223, 1966,
	224, 1966,
	227, 1966,
	228, 1966,
	229, 1966,
	230, 1966,
	231, 1966,
	232, 1966,
	233, 1966,
	234, 1966,
	235, 1966,
	236, 1966,
	237, 1966,
	238, 1966,
	239, 1966,
	240, 1966,
	241, 1966,
	242, 1966,
	243, 1966,
	244, 1966,
	247, 1966,
	249, 1966,
	250, 1966,
	251, 1966,
	252, 1966,
	254, 1966,
	255, 1966,
	256, 1966,
	259, 1966,
	260, 1966,
	261, 1966,
	262, 1966,
	264, 1966,
	265, 1966,
	267, 1966,
	269, 1966,
	270, 1966,
	271, 1966,
	272, 1966,
	273, 1966,
	274, 1966,
	275, 1966,
	276, 1966,
	277, 1966,
	278, 1966,
	280, 1966,
	281, 1966,
	282, 1966,
	283, 1966,
	284, 1966,
	285, 1966,
	287, 1966,
	289, 1966,
	290, 1966,
	291, 1966,
	292, 1966,
	293, 1966,
	294, 1966,
	295, 1966,
	296, 1966,
	297, 1966,
	299, 1966,
	300, 1966,
	301, 1966,
	302, 1966,
	303, 1966,
	304, 1966,
	305, 1966,
	306, 1966,
	307, 1966,
	308, 1966,
	309, 1966,
	310, 1966,
	311, 1966,
	312, 1966,
	314, 1966,
	315, 1966,
	316, 1966,
	317, 1966,
	318, 1966,
	319, 1966,
	320, 1966,
	321, 1966,
	322, 1966,
	323, 1966,
	324, 1966,
	325, 1966,
	326, 1966,
	327, 1966,
	328, 1966,
	329, 1966,
	330, 1966,
	332, 1966,
	333, 1966,
	334, 1966,
	335, 1966,
	336, 1966,
	337, 1966,
	338, 1966,
	339, 1966,
	340, 1966,
	341, 1966,
	343, 1966,
	344, 1966,
	345, 1966,
	346, 1966,
	347, 1966,
	348, 1966,
	349, 1966,
	350, 1966,
	351, 1966,
	353, 1966,
	354, 1966,
	355, 1966,
	356, 1966,
	357, 1966,
	358, 1966,
	359, 1966,
	360, 1966,
	361, 1966,
	362, 1966,
	363, 1966,
	364, 1966,
	366, 1966,
	367, 1966,
	368, 1966,
	370, 1966,
	371, 1966,
	372, 1966,
	373, 1966,
	374, 1966,
	375, 1966,
	376, 1966,
	378, 1966,
	379, 1966,
	380, 1966,
	381, 1966,
	383, 1966,
	385, 1966,
	386, 1966,
	387, 1966,
	388, 1966,
	389, 1966,
	391, 1966,
	392, 1966,
	393, 1966,
	395, 1966,
	396, 1966,
	399, 1966,
	400, 1966,
	401, 1966,
	402, 1966,
	403, 1966,
	404, 1966,
	406, 1966,
	408, 1966,
	409, 1966,
	410, 1966,
	411, 1966,
	412, 1966,
	413, 1966,
	414, 1966,
	416, 1966,
	417, 1966,
	418, 1966,
	423, 1966,
	424, 1966,
	425, 1966,
	426, 1966,
	427, 1966,
	428, 1966,
	429, 1966,
	430, 1966,
	432, 1966,
	433, 1966,
	434, 1966,
	435, 1966,
	436, 1966,
	437, 1966,
	439, 1966,
	440, 1966,
	441, 1966,
	442, 1966,
	443, 1966,
	444, 1966,
	445, 1966,
	446, 1966,
	447, 1966,
	449, 1966,
	452, 1966,
	453, 1966,
	455, 1966,
	456, 1966,
	-2, 0,
	-1, 1308,
	150, 1872,
	382, 1872,
	434, 1872,
	453, 1872,
	-2, 0,
	-1, 1335,
	290, 619,
	341, 619,
	-2, 0,
	-1, 1358,
	1, 614,
	450, 614,
	452, 614,
	454, 614,
	-2, 0,
	-1, 1359,
	1, 633,
	450, 633,
	452, 633,
	454, 633,
	-2, 0,
	-1, 1360,
	1, 621,
	450, 621,
	452, 621,
	454, 621,
	-2, 0,
	-1, 1381,
	1, 1919,
	450, 1919,
	452, 1919,
	453, 1919,
	454, 1919,
	-2, 659,
	-1, 1382,
	1, 1870,
	450, 1870,
	452, 1870,
	453, 1870,
	454, 1870,
	-2, 660,
	-1, 1395,
	1, 930,
	454, 930,
	-2, 935,
	-1, 1400,
	134, 1041,
	222, 1041,
	253, 1041,
	-2, 1001,
	-1, 1493,
	119, 1005,
	134, 1005,
	193, 1005,
	222, 1005,
	253, 1005,
	263, 1005,
	397, 1005,
	-2, 1405,
	-1, 1546,
	452, 1538,
	-2, 0,
	-1, 1588,
	119, 1005,
	134, 1005,
	193, 1005,
	222, 1005,
	253, 1005,
	263, 1005,
	397, 1005,
	-2, 1114,
	-1, 1643,
	451, 1236,
	-2, 1224,
	-1, 1682,
	1, 481,
	454, 481,
	-2, 935,
	-1, 1871,
	1, 616,
	450, 616,
	452, 616,
	454, 616,
	-2, 0,
	-1, 1872,
	1, 635,
	450, 635,
	452, 635,
	454, 635,
	-2, 0,
	-1, 1951,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1285,
	-1, 1952,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1286,
	-1, 1953,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1287,
	-1, 1954,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1288,
	-1, 1955,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1289,
	-1, 1956,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1290,
	-1, 1957,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1291,
	-1, 1958,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1292,
	-1, 1970,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1304,
	-1, 1971,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1305,
	-1, 1972,
	14, 0,
	15, 0,
	16, 0,
	79, 0,
	206, 0,
	207, 0,
	432, 0,
	433, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1306,
	-1, 1975,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1311,
	-1, 1981,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1315,
	-1, 1983,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1323,
	-1, 1984,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1324,
	-1, 1985,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1325,
	-1, 1986,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1326,
	-1, 2080,
	5, 1193,
	150, 1549,
	451, 1665,
	-2, 1656,
	-1, 2081,
	150, 1550,
	-2, 1923,
	-1, 2082,
	150, 1551,
	-2, 1793,
	-1, 2083,
	150, 1552,
	-2, 1718,
	-1, 2084,
	150, 1553,
	-2, 1753,
	-1, 2085,
	150, 1554,
	-2, 1791,
	-1, 2086,
	150, 1555,
	-2, 1863,
	-1, 2162,
	1, 1115,
	84, 1115,
	119, 1115,
	134, 1115,
	147, 1115,
	151, 1115,
	157, 1115,
	160, 1115,
	184, 1115,
	193, 1115,
	203, 1115,
	218, 1115,
	222, 1115,
	240, 1115,
	253, 1115,
	257, 1115,
	263, 1115,
	313, 1115,
	315, 1115,
	397, 1115,
	407, 1115,
	420, 1115,
	421, 1115,
	422, 1115,
	431, 1115,
	450, 1115,
	452, 1115,
	454, 1115,
	455, 1115,
	-2, 1114,
	-1, 2167,
	451, 1639,
	-2, 1651,
	-1, 2189,
	451, 1235,
	-2, 1225,
	-1, 2420,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1313,
	-1, 2421,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1317,
	-1, 2427,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1319,
	-1, 2608,
	200, 935,
	287, 935,
	294, 935,
	431, 935,
	-2, 478,
	-1, 2698,
	276, 1029,
	-2, 843,
	-1, 2776,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1321,
	-1, 2783,
	197, 0,
	199, 0,
	247, 0,
	-2, 1340,
	-1, 2846,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1369,
	-1, 2847,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1370,
	-1, 2848,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1371,
	-1, 2852,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1375,
	-1, 2853,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1376,
	-1, 2854,
	14, 0,
	15, 0,
	16, 0,
	432, 0,
	433, 0,
	434, 0,
	-2, 1377,
	-1, 2897,
	451, 1640,
	-2, 1652,
	-1, 2985,
	453, 2069,
	-2, 978,
	-1, 3030,
	197, 0,
	199, 0,
	247, 0,
	-2, 1341,
	-1, 3033,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1344,
	-1, 3034,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1346,
	-1, 3189,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1345,
	-1, 3190,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1347,
	-1, 3200,
	197, 0,
	-2, 1378,
	-1, 3303,
	197, 0,
	-2, 1379,
	-1, 3419,
	41, 0,
	169, 0,
	221, 0,
	347, 0,
	429, 0,
	437, 0,
	-2, 1926,
}

const sqlPrivate = 57344

const sqlLast = 71966

var sqlAct = [...]int{

	886, 3505, 3133, 3230, 3418, 3233, 3428, 2319, 3255, 3495,
	3372, 3385, 3429, 2111, 1180, 2685, 3430, 3397, 2328, 2918,
	3262, 2814, 3417, 1002, 3307, 3219, 2320, 3388, 3016, 3180,
	3157, 2971, 2625, 1938, 2714, 3267, 2976, 3092, 2154, 211,
	815, 211, 211, 1613, 1155, 211, 211, 211, 211, 211,
	843, 1408, 211, 2981, 1998, 1294, 2709, 2958, 1290, 3204,
	580, 2681, 2707, 2919, 2413, 2316, 1056, 806, 2360, 2569,
	994, 2362, 559, 908, 1583, 2293, 2296, 2291, 211, 2153,
	1148, 2529, 580, 2583, 2556, 2150, 3015, 1342, 1591, 1581,
	1850, 2370, 1037, 1811, 676, 2359, 2351, 2545, 1555, 2353,
	1800, 2329, 1808, 1491, 1801, 2220, 1727, 2869, 3064, 2277,
	2528, 2029, 2155, 1736, 814, 140, 2448, 1935, 2011, 3308,
	2049, 2218, 1931, 2409, 2252, 1501, 1167, 1614, 1754, 1519,
	882, 2294, 1044, 4, 1395, 1712, 2157, 1714, 1556, 1761,
	1995, 2588, 2129, 3256, 2041, 2253, 2683, 2369, 1157, 1303,
	1287, 1223, 2322, 581, 1277, 2210, 1797, 1033, 803, 205,
	204, 582, 2023, 2363, 1514, 989, 32, 986, 527, 1565,
	2119, 86, 2012, 2108, 211, 211, 968, 511, 2076, 2137,
	1482, 1409, 535, 147, 1407, 1796, 1301, 576, 148, 553,
	1817, 140, 1253, 621, 543, 1177, 1726, 652, 842, 530,
	991, 37, 966, 1413, 36, 34, 26, 24, 22, 721,
	671, 1394, 737, 1235, 2886, 538, 2444, 2887, 1851, 585,
	588, 1831, 3533, 1831, 2321, 2128, 3524, 1041, 3523, 2128,
	841, 2128, 1831, 3504, 203, 3491, 1768, 2272, 3106, 2325,
	3489, 585, 588, 3106, 3452, 1829, 3450, 3453, 2128, 2128,
	2724, 1843, 2026, 2239, 3448, 3445, 179, 2128, 3446, 2723,
	3442, 3439, 1582, 3443, 1768, 805, 2771, 1041, 858, 686,
	983, 3415, 852, 87, 1768, 1421, 1422, 3414, 3413, 1764,
	1768, 1843, 1164, 2501, 2502, 3410, 3409, 3367, 1843, 1843,
	2182, 2872, 3357, 3356, 181, 3106, 3106, 3350, 810, 3344,
	1768, 1424, 3106, 3342, 3305, 3288, 3106, 2182, 1768, 3285,
	969, 969, 3106, 3247, 1015, 3246, 1768, 2027, 1768, 3239,
	3238, 811, 1768, 3106, 791, 810, 2606, 3210, 1423, 790,
	1768, 3191, 3178, 2121, 2182, 1843, 1443, 180, 3169, 3130,
	3123, 2736, 2128, 2128, 3368, 1421, 1422, 173, 3105, 87,
	3032, 3106, 179, 2182, 2993, 174, 798, 2752, 2987, 2956,
	2892, 2752, 2957, 2893, 2882, 1421, 1422, 2883, 179, 2875,
	2807, 1424, 2128, 1768, 2463, 2795, 149, 970, 2128, 2464,
	1020, 2751, 3026, 672, 2752, 972, 973, 1016, 2028, 2025,
	181, 1424, 2743, 2542, 2540, 2744, 2128, 2128, 1423, 1446,
	1447, 1448, 1449, 1198, 2539, 2178, 181, 2128, 58, 1429,
	674, 2493, 2476, 792, 2128, 2477, 2465, 2507, 1423, 2128,
	59, 2349, 812, 2195, 1847, 2181, 2128, 2175, 2182, 2169,
	2128, 3291, 1768, 180, 63, 1843, 2127, 2872, 1768, 2128,
	1451, 1452, 1453, 173, 1846, 1421, 1422, 1847, 58, 180,
	1000, 174, 2120, 3124, 987, 1768, 2744, 2501, 2502, 173,
	59, 2267, 2209, 1685, 69, 2736, 2303, 174, 179, 1421,
	1422, 1424, 149, 2412, 63, 1767, 1344, 2207, 1832, 1429,
	1832, 1551, 1176, 2030, 2501, 2502, 2725, 1705, 149, 1832,
	2128, 1492, 2148, 1444, 75, 1424, 2147, 2146, 1423, 1429,
	2145, 2517, 885, 85, 69, 2726, 181, 2394, 76, 2144,
	1451, 1452, 1453, 974, 971, 797, 211, 2447, 2516, 179,
	796, 795, 1423, 794, 793, 211, 789, 788, 787, 786,
	785, 1192, 784, 783, 75, 782, 781, 780, 779, 2501,
	2502, 778, 719, 85, 718, 717, 211, 716, 76, 180,
	715, 714, 77, 211, 3081, 2723, 713, 181, 712, 173,
	711, 710, 709, 1444, 708, 707, 1197, 174, 1450, 211,
	1059, 211, 211, 1160, 211, 1059, 211, 706, 705, 1429,
	2024, 704, 703, 702, 211, 211, 1445, 701, 2324, 700,
	699, 2507, 77, 698, 2518, 697, 696, 695, 1043, 694,
	180, 693, 1048, 1429, 2187, 685, 684, 3435, 643, 211,
	1451, 1452, 1453, 642, 601, 1492, 600, 599, 2507, 1013,
	591, 3043, 1839, 211, 1830, 1160, 1160, 211, 211, 1186,
	211, 1016, 2890, 1911, 1170, 590, 589, 2753, 2120, 149,
	566, 565, 211, 564, 563, 547, 201, 200, 199, 1057,
	211, 198, 197, 196, 1168, 195, 1445, 194, 78, 193,
	192, 191, 190, 1444, 211, 211, 211, 211, 211, 1160,
	1160, 189, 188, 2507, 1160, 2517, 211, 1160, 211, 211,
	2180, 2501, 2502, 187, 997, 1016, 186, 185, 184, 1031,
	146, 81, 183, 82, 1191, 182, 2586, 2470, 78, 2459,
	2281, 2170, 2517, 1434, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 1431, 179, 2511, 2503, 2504, 2505, 2506, 2508, 2509,
	2161, 2309, 1522, 2067, 675, 1298, 1160, 117, 1521, 1710,
	146, 81, 179, 82, 76, 813, 1052, 1179, 1145, 1150,
	1584, 1598, 1028, 585, 588, 1178, 211, 1522, 2065, 1525,
	181, 884, 179, 1521, 2063, 2061, 1445, 2517, 2059, 1508,
	211, 1185, 1420, 1190, 675, 1196, 1182, 117, 2518, 1853,
	181, 1050, 118, 1004, 1520, 211, 1425, 1426, 1427, 1428,
	1430, 1431, 3416, 3338, 3298, 150, 3294, 3292, 3229, 140,
	181, 2501, 2502, 180, 3170, 2518, 1425, 1426, 1427, 1428,
	1430, 1431, 3085, 173, 3063, 1503, 1151, 3062, 1306, 3050,
	1174, 174, 118, 180, 3049, 2507, 3165, 3048, 3047, 1281,
	1284, 3041, 1304, 173, 3040, 150, 3039, 2955, 1365, 840,
	2907, 174, 673, 180, 2906, 2904, 1852, 2896, 2866, 2865,
	2864, 1237, 2791, 173, 2787, 811, 2747, 2581, 2536, 1314,
	2518, 174, 149, 1503, 2527, 2500, 1317, 2497, 1401, 2496,
	179, 1236, 1236, 2494, 2483, 2482, 2481, 87, 2478, 87,
	2475, 87, 149, 1434, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 1431, 2453, 2452, 2445, 2512, 2510, 2511, 2503, 2504,
	2505, 2506, 2508, 2509, 2350, 2162, 2310, 2034, 181, 2517,
	1420, 1174, 1427, 1428, 1430, 1431, 1805, 1400, 1490, 982,
	3531, 1773, 1240, 2510, 2511, 2503, 2504, 2505, 2506, 2508,
	2509, 1706, 2254, 1771, 1419, 2507, 3503, 1393, 2501, 2502,
	2408, 3502, 1322, 996, 1504, 2562, 1502, 3451, 179, 1003,
	1336, 180, 2816, 3405, 3403, 3335, 812, 87, 3332, 1399,
	1291, 173, 3329, 117, 3328, 87, 3327, 3323, 179, 174,
	3317, 3289, 87, 3284, 1406, 3283, 2001, 3225, 211, 1398,
	2503, 2504, 2505, 2506, 2508, 2509, 181, 1396, 3202, 2184,
	149, 3175, 3174, 3155, 2007, 3152, 3146, 3080, 3061, 3007,
	3004, 2934, 2518, 1553, 211, 1562, 181, 2933, 791, 2922,
	2921, 1421, 1422, 790, 211, 1059, 211, 211, 211, 1402,
	3164, 998, 1416, 1417, 1160, 580, 211, 211, 1600, 180,
	580, 211, 811, 2878, 1607, 2782, 211, 1424, 2754, 173,
	1610, 2737, 2701, 2671, 2650, 1677, 2628, 174, 2627, 180,
	2602, 1680, 1524, 2600, 2541, 2474, 2473, 2458, 2436, 173,
	2290, 1059, 1526, 1523, 1423, 2308, 1515, 174, 149, 1512,
	2191, 2190, 2507, 2165, 179, 2142, 1592, 1516, 1517, 1620,
	2126, 2057, 1486, 1597, 1554, 1559, 1560, 1550, 149, 1549,
	1421, 1422, 1548, 1547, 1601, 1708, 1546, 792, 1545, 1572,
	1544, 1543, 1645, 1701, 1542, 1421, 1422, 1540, 1679, 1539,
	140, 1538, 181, 1537, 969, 1484, 1424, 1536, 1535, 2512,
	2510, 2511, 2503, 2504, 2505, 2506, 2508, 2509, 2628, 1534,
	1533, 1424, 1532, 1493, 1531, 1530, 1529, 1499, 1528, 1505,
	1711, 1487, 1485, 1423, 1480, 1429, 1027, 1854, 1604, 1018,
	1010, 3310, 3151, 3082, 3036, 180, 2903, 2885, 1423, 2881,
	2462, 2143, 1577, 3214, 3084, 173, 1589, 2902, 2501, 2502,
	1731, 1504, 811, 174, 2598, 1682, 1451, 1452, 1453, 1483,
	1552, 1593, 3330, 2066, 585, 588, 1160, 211, 1705, 585,
	588, 1705, 1045, 1059, 149, 1683, 1047, 1580, 1704, 1586,
	1579, 1578, 1576, 1575, 1574, 1032, 1720, 2710, 2064, 1705,
	2653, 3168, 1609, 3125, 2062, 2060, 2888, 1676, 2058, 2739,
	2738, 3295, 3293, 1038, 1429, 1041, 1611, 3268, 1584, 1444,
	2480, 2479, 211, 211, 2505, 2506, 2508, 2509, 2418, 211,
	1696, 1695, 1391, 2241, 1705, 1702, 1042, 3228, 1046, 211,
	2256, 1697, 1535, 1335, 2966, 1451, 1452, 1453, 211, 1617,
	211, 1691, 211, 1041, 1535, 2932, 211, 1000, 87, 1000,
	1522, 1585, 1769, 1588, 1366, 1041, 1521, 776, 211, 1510,
	2687, 1751, 2686, 1343, 1753, 1851, 1605, 1758, 3263, 1344,
	1735, 1802, 2947, 2936, 2757, 2665, 1749, 3205, 1602, 3506,
	2321, 2026, 2189, 2818, 3436, 2042, 1541, 1518, 1444, 2468,
	1039, 2679, 1793, 1789, 1213, 3447, 777, 1040, 1160, 211,
	1160, 3444, 1445, 211, 1762, 2914, 1160, 2719, 1326, 211,
	3382, 211, 211, 1806, 3478, 2972, 2357, 3349, 1699, 3477,
	1179, 1160, 1160, 2610, 211, 3116, 585, 588, 1178, 211,
	1297, 1201, 1211, 638, 2196, 1814, 1823, 3528, 580, 211,
	3437, 211, 772, 211, 1489, 211, 2027, 211, 981, 2503,
	2504, 2505, 2506, 2508, 2509, 211, 2222, 1757, 211, 770,
	211, 1857, 1766, 809, 1900, 768, 766, 763, 3254, 211,
	1898, 3249, 2949, 1038, 2945, 2213, 2944, 2911, 2213, 1363,
	2910, 1445, 1821, 1038, 809, 2185, 2211, 2457, 211, 2211,
	2456, 804, 2455, 1782, 211, 756, 1867, 1856, 1783, 2454,
	1728, 1212, 1364, 2422, 1047, 2274, 1781, 633, 2266, 1692,
	1646, 825, 639, 2263, 1059, 2244, 2177, 2028, 2025, 1982,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 1724, 1397,
	1816, 1175, 1819, 2612, 1041, 2053, 2052, 808, 567, 1940,
	1700, 1246, 1319, 1245, 2225, 2317, 1304, 1792, 2758, 1729,
	1730, 1918, 1244, 1324, 1243, 819, 1046, 1731, 808, 1909,
	1039, 1863, 1620, 1620, 1047, 1362, 1915, 1040, 1265, 811,
	1039, 3186, 1876, 3348, 2203, 2599, 1725, 1040, 632, 2168,
	2243, 997, 3235, 997, 1848, 1645, 1645, 1908, 1028, 2652,
	2013, 2014, 1207, 1939, 1858, 1224, 2232, 585, 588, 1059,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 810, 2013, 2039,
	3112, 3407, 2030, 2231, 2924, 1997, 1046, 1834, 1997, 1593,
	1836, 1431, 760, 1838, 2005, 1883, 1871, 1841, 810, 2003,
	1404, 1222, 573, 1820, 2760, 2759, 1320, 1358, 2391, 1936,
	1937, 209, 211, 1870, 2075, 2030, 2079, 2079, 2092, 1913,
	2013, 1334, 2174, 2112, 2114, 1877, 1916, 3469, 2118, 1026,
	2801, 2410, 2411, 3433, 2716, 3518, 1209, 1722, 1221, 1731,
	812, 2662, 2657, 1059, 211, 1748, 1914, 1872, 2043, 2094,
	1917, 2224, 1912, 211, 2509, 2260, 211, 791, 1359, 1059,
	791, 791, 1927, 1859, 2042, 1928, 1929, 3324, 2674, 1337,
	1224, 2166, 1706, 2254, 1041, 1706, 2254, 1733, 1008, 2024,
	3477, 2798, 2611, 1715, 1041, 575, 751, 1716, 670, 3142,
	2038, 2163, 1513, 1706, 2254, 631, 691, 630, 1910, 641,
	640, 2051, 2717, 523, 2596, 2946, 2055, 2056, 802, 2640,
	1361, 807, 1617, 1617, 1722, 2134, 2149, 811, 1390, 2609,
	2159, 2160, 2009, 3110, 634, 2030, 1722, 518, 1706, 1703,
	811, 3185, 807, 3103, 811, 3365, 2305, 2036, 2167, 211,
	2242, 2264, 1007, 800, 1344, 751, 792, 1907, 969, 792,
	792, 2639, 2799, 1344, 1831, 3434, 3484, 1760, 2716, 2176,
	3100, 2935, 829, 2223, 2212, 3017, 3196, 802, 2133, 3393,
	2642, 1059, 1005, 1717, 3334, 1479, 211, 1759, 752, 2103,
	569, 2472, 2087, 1325, 211, 1719, 2138, 140, 2116, 2033,
	2124, 2125, 774, 2644, 1376, 211, 773, 2135, 574, 2158,
	996, 3101, 996, 801, 1999, 1755, 2179, 810, 211, 2139,
	2140, 1160, 1264, 764, 2925, 1875, 1589, 1899, 812, 764,
	765, 764, 811, 1897, 211, 1059, 1729, 1730, 211, 211,
	3432, 1493, 3150, 3236, 3012, 1493, 1206, 752, 571, 2643,
	3111, 1721, 3143, 2186, 2214, 2899, 1021, 2030, 1620, 3020,
	2208, 3431, 3476, 1756, 211, 1346, 211, 2397, 1524, 211,
	3474, 3273, 1715, 3468, 3154, 2705, 1716, 592, 3363, 1752,
	2300, 1645, 2194, 2312, 211, 568, 2960, 1795, 998, 1321,
	998, 211, 2275, 211, 1412, 211, 1516, 1517, 2261, 1715,
	1561, 211, 3519, 1716, 211, 1000, 211, 3364, 211, 987,
	211, 211, 2197, 211, 1160, 1160, 1160, 2193, 1160, 2246,
	2276, 572, 211, 211, 2424, 211, 211, 1996, 2278, 1000,
	2004, 753, 570, 1588, 211, 2247, 1993, 2255, 2257, 2258,
	2259, 1019, 2226, 2228, 1722, 1014, 211, 211, 211, 2217,
	2400, 211, 1403, 211, 3096, 87, 211, 3097, 211, 1991,
	211, 2234, 1717, 2238, 2433, 2386, 1869, 2387, 2341, 761,
	2345, 2346, 2245, 1333, 1719, 2646, 3498, 692, 211, 211,
	211, 1025, 211, 1153, 3182, 2262, 2314, 2431, 510, 1717,
	753, 1179, 519, 3059, 2271, 3099, 2199, 585, 588, 2279,
	1411, 1719, 1373, 3018, 2288, 211, 2385, 3102, 2201, 2283,
	3467, 2285, 2332, 1732, 1693, 3241, 3240, 2356, 2373, 2375,
	2374, 1832, 2278, 3513, 2278, 2304, 3223, 3314, 2589, 2334,
	1721, 140, 2382, 1479, 754, 1229, 1232, 2402, 1617, 2376,
	2202, 2377, 2327, 2913, 520, 2399, 2706, 2371, 1690, 2623,
	2347, 2619, 1151, 2200, 2323, 1006, 2323, 1721, 2338, 2395,
	2339, 2342, 2340, 2396, 1987, 2855, 1304, 2348, 1174, 87,
	755, 2358, 1988, 2313, 3115, 1989, 593, 594, 1994, 2295,
	1718, 3114, 521, 2292, 522, 1815, 3181, 1310, 1410, 1374,
	1979, 799, 2428, 754, 2797, 1804, 1803, 1777, 1923, 3373,
	87, 2450, 2451, 2429, 211, 2425, 2434, 3098, 1904, 1568,
	1323, 1411, 751, 3336, 1688, 87, 2460, 87, 2461, 1412,
	1347, 1686, 2977, 1722, 3158, 2289, 1267, 3261, 1737, 755,
	1689, 3259, 3224, 2571, 802, 3060, 1329, 2630, 2407, 997,
	2398, 2629, 1571, 2405, 1174, 1174, 1741, 2416, 2130, 2404,
	1722, 1864, 2446, 2248, 2615, 2880, 2555, 3103, 2554, 1375,
	87, 2136, 87, 997, 3496, 596, 595, 690, 1360, 3512,
	2173, 2172, 2171, 2302, 808, 1238, 1569, 3319, 3231, 829,
	3134, 1713, 1174, 829, 3100, 3183, 1252, 3093, 1738, 87,
	2423, 1143, 1239, 1059, 2538, 2343, 1143, 2543, 1924, 1410,
	3091, 2856, 2550, 2551, 752, 2572, 3095, 2857, 683, 2748,
	2552, 1813, 211, 1174, 2132, 597, 598, 1990, 1977, 2131,
	211, 1980, 1250, 3481, 3113, 3101, 1992, 211, 2676, 2384,
	211, 211, 1059, 3497, 3257, 3065, 525, 3376, 2388, 2870,
	2389, 1059, 2390, 811, 3320, 2430, 2570, 3221, 211, 2047,
	1388, 2576, 1370, 3483, 2432, 2467, 3094, 3232, 2566, 1718,
	3337, 3449, 2594, 211, 2531, 3499, 2574, 1742, 2577, 2578,
	1976, 2590, 2549, 1570, 1368, 3331, 3201, 2605, 1357, 3222,
	2547, 211, 211, 211, 3058, 1355, 1718, 211, 2565, 1353,
	211, 2951, 2249, 2250, 1351, 2560, 2530, 211, 211, 211,
	211, 211, 3377, 1620, 2585, 2607, 2584, 2580, 1349, 3321,
	1341, 2579, 2781, 211, 211, 211, 2564, 2593, 2613, 2495,
	2587, 2435, 211, 1999, 2561, 2567, 1645, 1743, 1744, 2544,
	2632, 2299, 2636, 2637, 211, 1160, 1739, 211, 2273, 1620,
	1339, 2573, 1495, 1248, 1493, 1059, 1500, 753, 2559, 2533,
	2534, 2535, 1059, 2240, 2192, 2620, 1896, 211, 1599, 1596,
	211, 211, 1645, 2575, 1740, 1389, 688, 689, 3096, 1315,
	211, 3097, 2655, 1160, 211, 804, 1160, 1160, 1160, 1251,
	2597, 2603, 2604, 211, 2591, 2592, 2393, 2392, 996, 211,
	2690, 2656, 2379, 1906, 1880, 211, 1978, 211, 1387, 1678,
	1369, 2608, 2616, 2617, 211, 1527, 1318, 681, 682, 3099,
	1228, 2046, 996, 3427, 2663, 1249, 2624, 2614, 2631, 3129,
	2634, 3102, 1367, 1720, 1608, 3122, 1356, 1160, 1160, 524,
	2672, 2587, 2721, 1354, 3370, 211, 211, 1352, 3089, 211,
	2645, 762, 1350, 2975, 2651, 2930, 2928, 2912, 1720, 1745,
	754, 2659, 2658, 2704, 2689, 2660, 1348, 2712, 1340, 2688,
	1000, 2809, 2694, 2661, 987, 211, 998, 1059, 211, 211,
	1059, 211, 2647, 2648, 2673, 1000, 2649, 2667, 2246, 987,
	2318, 1762, 2684, 1617, 2307, 2306, 755, 211, 1338, 1762,
	998, 1247, 2286, 1845, 1844, 1842, 1840, 1837, 1835, 1833,
	1824, 1895, 1774, 1772, 1000, 2668, 2669, 1763, 1564, 2670,
	1750, 2735, 1746, 916, 1747, 1734, 2371, 1723, 2708, 1617,
	3277, 3098, 2414, 1606, 3478, 2371, 3399, 1414, 3177, 2766,
	1059, 3172, 2750, 2720, 140, 2755, 2765, 3171, 2746, 2372,
	1709, 1059, 2718, 211, 1203, 978, 1168, 3279, 1174, 1057,
	2784, 2727, 207, 2734, 513, 514, 2213, 1620, 531, 513,
	531, 541, 546, 767, 769, 562, 811, 2211, 1792, 979,
	2213, 2230, 2213, 207, 2986, 1568, 1878, 1731, 87, 87,
	1645, 2229, 87, 2227, 1385, 1386, 1765, 2793, 2794, 1873,
	1605, 680, 3326, 2762, 2415, 207, 1421, 1422, 3300, 3066,
	2767, 2251, 2233, 1418, 2268, 2769, 1620, 1620, 1571, 2806,
	1415, 87, 87, 2270, 2237, 87, 526, 1421, 1422, 2666,
	2812, 2867, 1620, 1620, 2269, 2236, 1143, 1566, 2235, 1645,
	1645, 3369, 3339, 2789, 2964, 2959, 211, 2800, 2802, 2803,
	3511, 2895, 1569, 1424, 2326, 1645, 1645, 2117, 1681, 1423,
	1612, 211, 980, 1620, 2729, 2730, 2731, 1059, 2732, 2733,
	2808, 2819, 2815, 537, 1567, 3494, 829, 812, 2820, 2889,
	1423, 2711, 1143, 2824, 2884, 2595, 1645, 211, 2821, 2832,
	2859, 3341, 2822, 1936, 2825, 2501, 2502, 513, 513, 2834,
	1492, 2908, 87, 3037, 997, 207, 1421, 1422, 1328, 1936,
	2835, 2205, 2204, 2050, 1327, 1174, 2901, 2804, 2278, 997,
	2860, 2205, 2601, 2876, 2877, 2206, 2054, 2048, 2021, 1372,
	1849, 2900, 1371, 211, 2796, 2871, 140, 1490, 2873, 2874,
	2863, 1488, 3520, 3311, 2937, 3215, 2897, 1617, 997, 1570,
	3213, 1865, 1866, 3145, 3083, 2868, 3010, 3003, 2992, 2970,
	2763, 2954, 2953, 2952, 2927, 2948, 2728, 2702, 211, 211,
	211, 2700, 2381, 2891, 2380, 2336, 2311, 2287, 2008, 1894,
	1893, 1892, 1827, 1826, 1825, 1059, 211, 1807, 1785, 1784,
	1160, 1780, 1779, 1778, 1776, 1775, 1617, 1617, 1405, 1384,
	1383, 1276, 1275, 2905, 211, 2941, 1274, 1273, 1272, 1271,
	2988, 2916, 1617, 1617, 1143, 1620, 1270, 211, 211, 1160,
	1160, 1160, 1269, 211, 211, 211, 1268, 1266, 211, 211,
	2983, 1261, 211, 211, 2979, 1160, 1260, 1259, 1645, 211,
	2898, 2942, 2943, 1617, 2982, 2978, 2950, 1258, 1257, 1220,
	2963, 1219, 1059, 1218, 1217, 2246, 1216, 1215, 1214, 1208,
	1202, 1200, 1199, 1024, 2967, 1023, 953, 863, 1684, 775,
	2973, 625, 759, 3234, 1378, 74, 1210, 2968, 612, 2969,
	68, 2926, 3035, 3381, 2638, 1879, 1345, 1881, 2563, 2141,
	3011, 3362, 2624, 2547, 87, 2984, 2980, 211, 3044, 2471,
	3306, 3195, 2990, 1000, 1000, 2989, 3031, 987, 987, 2045,
	1509, 70, 2999, 1620, 2995, 3022, 2994, 3000, 3001, 851,
	3002, 936, 3006, 3141, 3009, 2332, 3008, 3140, 3090, 3014,
	3005, 2915, 2361, 3019, 3138, 3137, 1645, 3023, 818, 1062,
	1694, 857, 1707, 2188, 2078, 1616, 87, 860, 1618, 862,
	861, 1619, 1511, 996, 2371, 859, 1615, 2301, 1926, 211,
	2929, 2330, 2931, 1255, 738, 739, 1564, 1698, 996, 1059,
	2002, 1059, 2040, 3071, 2466, 1506, 831, 853, 2037, 1017,
	830, 2006, 2568, 2715, 2894, 3163, 1922, 2406, 1919, 628,
	2498, 211, 211, 211, 3057, 1617, 2022, 996, 1009, 2100,
	1495, 2093, 2089, 211, 1792, 1392, 1481, 2331, 1049, 211,
	834, 211, 2000, 1497, 211, 211, 211, 3109, 2440, 2722,
	2582, 3108, 2183, 3396, 1930, 211, 211, 1160, 3119, 3120,
	1059, 998, 1160, 1568, 1794, 977, 3075, 976, 211, 1011,
	975, 3067, 3070, 3118, 2584, 3387, 998, 2099, 680, 3072,
	3078, 3073, 3384, 211, 3076, 1143, 1059, 3079, 2682, 1160,
	1687, 3088, 3068, 3069, 2198, 3107, 1571, 3074, 1473, 1022,
	2691, 847, 1173, 1000, 2548, 998, 562, 987, 2749, 1225,
	3325, 1472, 771, 3316, 1036, 1566, 1035, 3132, 211, 1034,
	2622, 2095, 207, 1617, 207, 207, 3162, 1165, 1059, 207,
	1569, 3126, 3176, 3160, 3173, 3517, 3127, 207, 1181, 3136,
	2923, 178, 3086, 3087, 3159, 3131, 175, 177, 176, 3148,
	3147, 2939, 1567, 2675, 1059, 90, 3161, 35, 17, 116,
	3117, 115, 1205, 114, 113, 112, 3167, 997, 997, 2558,
	1143, 3156, 111, 110, 109, 108, 1227, 107, 106, 105,
	207, 207, 104, 1165, 103, 102, 101, 100, 99, 3135,
	3207, 98, 1059, 97, 3184, 207, 96, 95, 3187, 94,
	211, 2265, 211, 1263, 1059, 211, 93, 1057, 92, 91,
	558, 555, 50, 211, 49, 3203, 3192, 207, 207, 207,
	207, 1165, 1620, 89, 88, 16, 33, 1570, 14, 562,
	54, 207, 207, 3193, 3217, 211, 3144, 3218, 3208, 3209,
	55, 3149, 13, 29, 1143, 1645, 30, 80, 79, 28,
	15, 1000, 27, 211, 25, 987, 11, 211, 3211, 1000,
	1143, 8, 7, 987, 3166, 211, 10, 1573, 3216, 12,
	1160, 3193, 1000, 3265, 145, 211, 3252, 1620, 3260, 144,
	3237, 73, 3270, 1939, 143, 3272, 72, 142, 141, 3278,
	1792, 3212, 71, 23, 2344, 9, 211, 211, 137, 207,
	1645, 3266, 2965, 3258, 3286, 3287, 67, 3250, 139, 138,
	64, 136, 135, 207, 3275, 65, 211, 134, 3264, 2557,
	133, 66, 211, 132, 21, 3274, 5, 53, 546, 2982,
	6, 3280, 211, 3281, 3276, 3179, 2756, 997, 83, 84,
	31, 62, 87, 61, 60, 20, 3322, 87, 52, 19,
	169, 168, 167, 3269, 3243, 3297, 3304, 3313, 166, 161,
	3309, 160, 165, 1620, 163, 3312, 162, 164, 159, 131,
	87, 3282, 1143, 3299, 171, 170, 157, 153, 2684, 3290,
	152, 3333, 156, 158, 211, 1160, 1645, 155, 154, 151,
	211, 172, 130, 57, 1160, 1160, 129, 128, 127, 126,
	1160, 3355, 1617, 125, 211, 56, 211, 18, 2, 1,
	0, 0, 3340, 3343, 0, 0, 996, 996, 3360, 0,
	3361, 0, 3351, 3347, 3366, 3352, 1143, 0, 211, 3346,
	0, 3359, 0, 0, 211, 211, 0, 1059, 0, 0,
	0, 3378, 0, 0, 0, 211, 211, 0, 3379, 3353,
	3354, 3400, 0, 3390, 0, 3358, 3394, 1617, 3402, 0,
	3404, 0, 0, 0, 0, 0, 3386, 3389, 3411, 3269,
	3383, 0, 3412, 3244, 3245, 0, 0, 0, 0, 211,
	0, 3391, 0, 0, 0, 997, 0, 3408, 3406, 0,
	0, 0, 3438, 997, 998, 998, 0, 3423, 3424, 0,
	0, 3426, 0, 3425, 0, 0, 997, 0, 0, 0,
	0, 0, 0, 0, 3440, 3456, 1939, 3458, 211, 3454,
	0, 513, 0, 0, 0, 3464, 0, 2099, 2099, 0,
	3463, 1174, 3455, 3457, 3466, 3459, 3460, 0, 211, 0,
	0, 0, 207, 1617, 207, 0, 0, 207, 0, 0,
	0, 1999, 0, 3475, 0, 0, 3473, 1181, 0, 1165,
	207, 3479, 211, 3472, 211, 3480, 0, 3398, 207, 1181,
	531, 2095, 2095, 207, 1181, 3488, 3485, 3490, 3492, 562,
	3487, 3486, 3386, 3493, 3482, 3389, 996, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3501, 0, 3500, 0,
	0, 0, 3508, 1563, 0, 3507, 0, 3509, 0, 3510,
	3461, 3462, 0, 0, 3465, 3514, 3401, 0, 0, 0,
	3521, 0, 3522, 0, 0, 0, 3515, 3516, 2099, 2099,
	2099, 0, 0, 0, 0, 0, 0, 3529, 3530, 2332,
	3525, 3526, 3527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3534, 0, 0, 3532, 0, 0, 0, 0,
	0, 0, 0, 0, 998, 0, 0, 0, 0, 0,
	0, 0, 2095, 2095, 2095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3398, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2437, 2438, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2664, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 0, 996, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2695, 817, 996, 2697, 2698, 2699, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 207, 0, 0, 0,
	0, 0, 207, 0, 1143, 0, 0, 0, 0, 0,
	0, 0, 1812, 0, 0, 0, 2524, 2525, 2526, 0,
	0, 207, 0, 207, 0, 207, 0, 2741, 2742, 513,
	0, 0, 998, 0, 0, 0, 0, 0, 0, 0,
	998, 1828, 0, 1143, 0, 0, 0, 0, 0, 0,
	0, 0, 1143, 998, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 829, 0, 0, 0,
	0, 0, 562, 0, 0, 0, 680, 0, 0, 829,
	0, 0, 207, 0, 1165, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 0, 0,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 207, 207, 0, 207, 0, 207, 0, 207, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 1901, 0,
	0, 1902, 0, 1903, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 0, 0, 1143, 0, 0, 0,
	0, 0, 0, 1143, 0, 0, 0, 0, 0, 0,
	0, 546, 0, 0, 0, 2099, 2099, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2095,
	2095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2099, 2099, 2099, 2099, 2099,
	2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099, 2099,
	2099, 2099, 2099, 2099, 0, 2099, 0, 0, 1143, 0,
	0, 1143, 0, 0, 2501, 2502, 0, 2519, 2520, 2521,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2095,
	2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095,
	2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095, 0, 2095,
	0, 0, 0, 0, 0, 513, 0, 0, 0, 1421,
	1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	207, 1143, 0, 2777, 2778, 2516, 0, 0, 1457, 0,
	0, 0, 1143, 0, 0, 1424, 0, 513, 0, 1470,
	0, 0, 0, 0, 207, 0, 513, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 817, 1423, 0, 0, 817, 0, 0, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2996,
	2997, 2998, 0, 0, 0, 0, 0, 1183, 2507, 1187,
	0, 1193, 0, 2836, 2837, 2838, 2839, 2840, 2841, 2842,
	2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852,
	2853, 2854, 0, 2858, 0, 2523, 0, 0, 0, 0,
	0, 0, 531, 1446, 1447, 1448, 1449, 2501, 2502, 0,
	2519, 2520, 2521, 1429, 0, 0, 0, 0, 1143, 0,
	2522, 0, 0, 0, 0, 0, 3028, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 2221,
	1471, 0, 0, 0, 1451, 1452, 1453, 207, 0, 0,
	0, 0, 2517, 0, 0, 1313, 0, 0, 207, 0,
	0, 0, 1316, 0, 0, 1467, 0, 1468, 2516, 0,
	0, 207, 0, 0, 1438, 1439, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 0, 0, 207, 0, 1459,
	0, 207, 2280, 0, 59, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 1469, 0, 207, 0, 1181,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 1143, 1812, 69, 0,
	0, 2507, 0, 0, 2221, 2518, 513, 0, 2335, 0,
	0, 0, 0, 0, 207, 0, 0, 207, 0, 207,
	0, 207, 0, 207, 207, 0, 1165, 3128, 75, 0,
	0, 0, 1450, 0, 0, 2354, 680, 85, 2221, 2221,
	0, 0, 76, 0, 0, 0, 0, 207, 0, 0,
	1445, 0, 0, 2522, 1474, 1475, 1476, 1477, 1478, 207,
	1165, 207, 0, 1143, 1181, 0, 1181, 0, 0, 1165,
	0, 1165, 0, 1165, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 1494, 2517, 77, 0, 0, 0,
	1507, 207, 207, 207, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 0, 0,
	0, 0, 0, 0, 0, 2513, 2514, 2515, 207, 0,
	0, 0, 2512, 2510, 2511, 2503, 2504, 2505, 2506, 2508,
	2509, 1424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 1423, 0,
	1435, 1436, 1442, 1441, 1437, 1463, 1443, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 2518, 0,
	1143, 0, 1143, 3051, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1557,
	1557, 1557, 2780, 0, 0, 0, 0, 1181, 0, 0,
	2099, 0, 0, 0, 146, 81, 0, 82, 0, 1446,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 0, 1429,
	0, 1143, 0, 0, 0, 0, 179, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 675, 0,
	0, 117, 0, 2099, 2095, 0, 0, 1143, 0, 0,
	1451, 1452, 1453, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 181, 0, 0, 0, 2513, 2514,
	2515, 0, 0, 0, 0, 2512, 2510, 2511, 2503, 2504,
	2505, 2506, 2508, 2509, 0, 207, 118, 2095, 0, 1143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	207, 0, 0, 1444, 0, 513, 0, 180, 0, 0,
	0, 0, 0, 513, 0, 1143, 0, 173, 0, 0,
	513, 0, 0, 513, 513, 174, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1181, 0, 2099, 0, 0, 149, 0, 0, 0,
	0, 0, 0, 1143, 0, 0, 1181, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 0, 0, 3200, 0,
	0, 0, 0, 0, 2221, 2221, 207, 0, 1450, 0,
	2221, 0, 0, 2626, 0, 0, 0, 2095, 0, 0,
	2221, 2626, 2221, 2626, 2626, 0, 1445, 829, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 207, 207, 1421,
	1422, 3226, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	1165, 0, 0, 0, 0, 1424, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2678, 0, 0, 2680, 2221, 0, 0, 0, 0, 0,
	0, 0, 1423, 207, 0, 0, 0, 207, 0, 0,
	1443, 0, 0, 0, 0, 0, 207, 1440, 0, 0,
	0, 0, 1165, 0, 0, 0, 58, 0, 2221, 0,
	513, 0, 0, 0, 0, 0, 0, 2221, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3303, 63, 1434, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 1431, 0, 0, 0, 0, 0, 0, 207, 1812,
	0, 0, 1812, 1446, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 69, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2761, 0,
	0, 1165, 207, 0, 207, 0, 0, 1461, 0, 0,
	1471, 0, 75, 0, 1451, 1452, 1453, 0, 0, 0,
	207, 85, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1143, 0,
	0, 0, 829, 0, 1438, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 1920, 0, 1925, 1444, 0, 0,
	77, 0, 1932, 0, 0, 0, 2817, 0, 0, 1941,
	1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
	1972, 1973, 1974, 1975, 0, 1981, 0, 1983, 1984, 1985,
	1986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2010, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1494, 0, 0, 0, 2035, 0, 207, 207,
	1445, 0, 0, 2501, 2502, 0, 2519, 2520, 2521, 513,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 3027, 0, 513, 1462, 0, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 0, 0, 0, 0, 2091, 0,
	2102, 2104, 2109, 0, 0, 0, 0, 0, 146, 81,
	1181, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2516, 0, 0, 0, 0, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 675, 0, 0, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 181, 0,
	1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0, 0,
	118, 2961, 207, 207, 0, 0, 0, 2507, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 207,
	0, 180, 0, 0, 0, 0, 0, 0, 917, 0,
	0, 173, 0, 0, 0, 0, 0, 2221, 207, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2354, 2354, 0, 0, 0, 0, 680, 680, 2221, 2522,
	1307, 1812, 1812, 0, 124, 680, 2221, 208, 0, 0,
	58, 0, 207, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 119, 0, 0, 0, 0, 208, 0,
	0, 2517, 0, 0, 0, 0, 63, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 39, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 69, 0, 0, 0,
	3045, 0, 0, 0, 0, 2282, 0, 2284, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 42, 0, 0, 0, 0, 75, 0, 0, 122,
	0, 0, 0, 0, 40, 85, 0, 0, 0, 0,
	76, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2518, 0, 207, 0, 0, 0,
	0, 0, 1181, 0, 207, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2221, 2221, 2221, 0, 0, 0,
	0, 0, 0, 883, 0, 0, 1181, 0, 0, 0,
	0, 0, 2221, 0, 2626, 0, 0, 1181, 1181, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2221, 206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3153, 0, 0, 0,
	0, 0, 0, 586, 2513, 2514, 2515, 0, 0, 0,
	0, 2512, 2510, 2511, 2503, 2504, 2505, 2506, 2508, 2509,
	0, 0, 0, 0, 0, 586, 0, 0, 0, 0,
	78, 1181, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2420, 2421, 0, 0, 0, 0, 2427, 0, 0, 0,
	0, 48, 146, 81, 0, 82, 0, 46, 0, 0,
	0, 123, 0, 0, 0, 2441, 2442, 47, 0, 0,
	0, 2035, 0, 0, 179, 0, 0, 0, 0, 0,
	2449, 0, 0, 0, 0, 0, 51, 0, 0, 117,
	0, 0, 2501, 2502, 0, 2519, 2520, 2521, 120, 0,
	0, 0, 0, 2221, 0, 2626, 2469, 0, 3220, 0,
	0, 2786, 181, 0, 0, 999, 207, 0, 0, 0,
	0, 2484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 150, 0, 0,
	0, 0, 0, 2516, 0, 180, 3220, 0, 0, 0,
	2221, 0, 0, 0, 0, 173, 0, 0, 207, 2109,
	2109, 2109, 0, 174, 0, 0, 0, 0, 1181, 0,
	0, 0, 0, 0, 1557, 0, 0, 0, 0, 0,
	0, 0, 2553, 0, 149, 0, 0, 3, 0, 207,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2817,
	0, 0, 0, 0, 0, 513, 2507, 0, 2501, 2502,
	0, 2519, 2520, 2521, 0, 3220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2785, 0, 0,
	0, 0, 0, 1421, 1422, 0, 0, 0, 817, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 0, 0, 2522, 1424,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 2516,
	0, 0, 0, 2626, 0, 0, 2641, 208, 1064, 208,
	208, 1064, 0, 1064, 208, 0, 1423, 1181, 0, 1181,
	2517, 0, 208, 0, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3374, 0, 0, 0, 0, 0, 1181, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 2221,
	0, 0, 0, 1064, 1064, 208, 208, 0, 0, 0,
	2775, 0, 2507, 0, 0, 0, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 1446, 1447, 1448,
	1449, 0, 2817, 0, 0, 2713, 0, 1429, 0, 0,
	0, 0, 208, 208, 208, 208, 0, 1064, 1064, 0,
	0, 0, 1064, 2518, 0, 1064, 208, 208, 0, 0,
	0, 0, 0, 0, 2522, 0, 0, 0, 1451, 1452,
	1453, 2221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3220, 0, 0, 0, 0, 2517, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1181, 0, 2221, 0, 0,
	0, 1444, 2768, 0, 208, 0, 1932, 0, 0, 0,
	0, 0, 2772, 2773, 0, 0, 2776, 0, 208, 0,
	2779, 0, 0, 0, 0, 0, 0, 0, 0, 2783,
	0, 0, 206, 0, 206, 206, 0, 0, 2790, 206,
	0, 2553, 0, 2513, 2514, 2515, 0, 586, 0, 0,
	2512, 2510, 2511, 2503, 2504, 2505, 2506, 2508, 2509, 0,
	0, 0, 2810, 0, 0, 0, 0, 0, 0, 2518,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 2826, 2827, 0, 2828, 2829, 2830, 0, 0, 2831,
	206, 206, 0, 2833, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 1421, 1422, 2861, 2862, 0, 206, 206, 206,
	206, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	1470, 206, 206, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 2879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 1423, 0, 0, 1440, 2513,
	2514, 2515, 0, 1443, 0, 0, 2512, 2510, 2511, 2503,
	2504, 2505, 2506, 2508, 2509, 0, 0, 0, 0, 0,
	1421, 1422, 0, 0, 212, 0, 2909, 0, 0, 206,
	0, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	0, 2917, 2920, 206, 0, 0, 1424, 0, 0, 2774,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 0, 1429, 2938, 1446, 1447, 1448, 1449,
	0, 0, 208, 1423, 0, 0, 1429, 0, 0, 0,
	0, 1443, 0, 1064, 579, 208, 208, 0, 1461, 0,
	0, 1471, 1064, 208, 0, 1451, 1452, 1453, 208, 0,
	0, 0, 0, 0, 0, 0, 579, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 2426, 0, 1064,
	1557, 0, 0, 0, 0, 0, 0, 0, 0, 2991,
	1459, 0, 0, 0, 1446, 1447, 1448, 1449, 1444, 0,
	0, 0, 0, 0, 1429, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1451, 1452, 1453, 3024, 3025,
	0, 0, 0, 0, 3029, 3030, 0, 0, 0, 3033,
	3034, 0, 0, 0, 0, 0, 3038, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 3042, 0, 0, 0, 0,
	0, 0, 3046, 0, 0, 1450, 0, 0, 1444, 0,
	0, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 1064, 208, 1421, 1422, 0, 0,
	0, 1064, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 1587, 0, 999, 0, 0, 206, 0, 0,
	1421, 1422, 1424, 0, 0, 0, 0, 0, 0, 0,
	206, 1587, 0, 0, 0, 0, 0, 0, 586, 0,
	208, 208, 0, 586, 0, 0, 1424, 208, 0, 1423,
	0, 0, 0, 1450, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 208, 0, 208, 0,
	208, 1445, 0, 1423, 0, 2920, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 1460, 0,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	1446, 1447, 1448, 1449, 0, 0, 1064, 2419, 1064, 0,
	1429, 0, 0, 0, 1064, 0, 0, 208, 0, 0,
	208, 0, 887, 0, 1446, 1447, 1448, 1449, 0, 1064,
	1064, 0, 0, 0, 1429, 0, 0, 208, 2920, 0,
	0, 1451, 1452, 1453, 0, 0, 208, 208, 0, 208,
	0, 208, 0, 208, 0, 208, 0, 0, 0, 0,
	3188, 3189, 3190, 0, 0, 1451, 1452, 1453, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 208, 0, 0,
	586, 0, 0, 0, 0, 3198, 3199, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 3206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 662, 1064, 0, 0, 206, 206, 0, 0, 992,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	2920, 0, 0, 0, 644, 0, 0, 0, 3242, 0,
	0, 206, 0, 206, 0, 206, 3248, 0, 0, 817,
	0, 0, 0, 3253, 0, 0, 0, 0, 202, 1450,
	0, 0, 0, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 646, 0, 2920, 1445, 0, 2920,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 1064, 2920, 2920,
	0, 1445, 0, 0, 1060, 667, 0, 1161, 0, 1060,
	0, 0, 206, 0, 0, 206, 0, 0, 0, 0,
	648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 649, 0,
	0, 586, 206, 0, 206, 0, 206, 0, 206, 3315,
	206, 0, 3318, 0, 0, 0, 0, 0, 650, 1161,
	1161, 651, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 206, 0, 0, 2501, 2502, 0, 2519, 2520,
	2521, 0, 0, 0, 208, 0, 0, 1064, 666, 0,
	0, 0, 0, 0, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 1161, 1161, 0, 0, 0, 1161, 0,
	0, 1161, 0, 0, 0, 0, 0, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	1161, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	653, 0, 0, 0, 0, 0, 0, 3422, 3422, 3422,
	0, 0, 0, 0, 0, 0, 0, 670, 654, 1064,
	0, 0, 0, 0, 0, 0, 3441, 0, 0, 2507,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 669, 0, 2920, 0, 2920,
	0, 0, 655, 0, 0, 656, 208, 0, 0, 1064,
	0, 664, 0, 3422, 0, 0, 0, 0, 657, 0,
	0, 0, 208, 1064, 2501, 2502, 208, 2519, 2520, 2521,
	999, 2522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 658, 665, 0,
	0, 0, 208, 0, 999, 659, 0, 208, 0, 206,
	0, 0, 0, 2517, 0, 0, 0, 661, 0, 0,
	0, 0, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 668, 2516, 0, 0, 3422, 208,
	0, 0, 208, 0, 208, 663, 208, 0, 208, 208,
	0, 0, 1064, 1064, 1064, 0, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 208, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 0, 208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 0, 0, 1162, 2518, 1061, 2507, 0,
	0, 0, 0, 0, 0, 0, 208, 208, 208, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 1162, 1162, 1060,
	0, 206, 0, 0, 0, 0, 0, 0, 1161, 579,
	0, 0, 0, 0, 579, 0, 0, 206, 0, 0,
	0, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2517, 0, 0, 0, 0, 0, 0, 0,
	0, 1162, 1162, 0, 0, 1060, 1162, 206, 1054, 1162,
	0, 0, 206, 0, 0, 1172, 2513, 2514, 2515, 0,
	0, 0, 0, 2512, 2510, 2511, 2503, 2504, 2505, 2506,
	2508, 2509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 0, 0, 206, 0, 206,
	0, 206, 0, 206, 206, 0, 0, 0, 1162, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 0,
	0, 0, 1464, 1465, 1466, 0, 0, 206, 0, 0,
	0, 1256, 0, 0, 0, 2518, 0, 0, 0, 206,
	0, 206, 1424, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 1280, 1280, 1280, 1172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1311, 1312, 1423,
	0, 206, 206, 206, 0, 206, 0, 1443, 0, 0,
	1161, 1064, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 1377, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 2513, 2514, 2515, 0, 0,
	1429, 0, 2512, 2510, 2511, 2503, 2504, 2505, 2506, 2508,
	2509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 0, 0, 1461, 0, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 208, 208, 208, 0, 0, 0, 0, 0, 0,
	208, 0, 1161, 0, 1161, 0, 0, 720, 0, 751,
	1161, 0, 208, 1064, 0, 0, 1459, 0, 0, 0,
	0, 0, 0, 1064, 1444, 1161, 1161, 0, 0, 0,
	1064, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 757, 725, 0, 0, 0, 208, 0,
	0, 1064, 208, 0, 1064, 1064, 1064, 0, 0, 0,
	0, 208, 0, 0, 0, 0, 0, 726, 0, 0,
	0, 0, 728, 0, 0, 999, 758, 1061, 0, 0,
	0, 0, 735, 736, 0, 0, 1162, 0, 745, 0,
	999, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 752, 730, 0, 0, 1064, 1064, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 1445, 1060, 1587,
	0, 0, 0, 1061, 0, 0, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 1064, 0, 208, 1064, 208,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 208, 206, 0, 724, 0,
	0, 0, 0, 1594, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 733, 1603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 206, 206, 0,
	0, 0, 0, 1060, 0, 1587, 0, 0, 1064, 0,
	0, 0, 0, 0, 734, 0, 0, 206, 0, 1064,
	0, 0, 0, 0, 1460, 0, 0, 0, 0, 756,
	0, 0, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 0, 753, 0, 0, 0, 1162, 0,
	0, 0, 0, 206, 0, 1061, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1060, 0, 0, 0, 0, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 747, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 1064, 0, 0, 742, 0,
	0, 0, 0, 0, 0, 722, 0, 754, 0, 0,
	0, 0, 206, 0, 206, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 0, 0, 602, 0, 0, 0,
	206, 743, 0, 0, 0, 740, 0, 0, 0, 0,
	1162, 0, 1162, 755, 0, 0, 0, 0, 1162, 603,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1787, 0, 1162, 1162, 1060, 0, 0, 1799, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 623, 0, 0, 0, 0, 0, 1256, 0, 1818,
	0, 1818, 0, 748, 0, 0, 0, 208, 208, 0,
	0, 605, 0, 0, 606, 1161, 0, 0, 0, 0,
	0, 0, 0, 1064, 208, 0, 0, 0, 1064, 1060,
	629, 0, 0, 0, 0, 0, 607, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 1064, 1064,
	0, 0, 0, 608, 0, 0, 1061, 0, 1799, 0,
	0, 1861, 0, 1064, 0, 0, 0, 208, 999, 999,
	0, 0, 0, 609, 0, 0, 610, 633, 1874, 0,
	1064, 636, 0, 0, 0, 0, 0, 0, 1884, 0,
	1886, 0, 1888, 0, 1890, 0, 1891, 0, 1161, 1161,
	1161, 0, 1161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1905, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 632, 0,
	0, 0, 0, 0, 0, 613, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 611, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 1064, 0, 1064,
	0, 0, 206, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 615, 0, 1061, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 999, 0,
	635, 0, 0, 0, 208, 0, 0, 0, 0, 0,
	616, 0, 0, 208, 208, 1064, 0, 0, 1064, 0,
	1064, 0, 0, 617, 0, 0, 0, 0, 0, 0,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 0, 1064, 0, 0, 1064, 0, 0,
	0, 0, 618, 0, 0, 631, 0, 630, 0, 0,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 637, 0, 634, 0, 1064, 0, 0, 624,
	0, 0, 0, 0, 0, 2164, 0, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 0, 0,
	0, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1060, 0, 0,
	0, 0, 0, 1162, 0, 0, 999, 0, 0, 0,
	1064, 0, 0, 0, 999, 0, 0, 1061, 0, 0,
	0, 0, 1064, 0, 0, 0, 0, 1587, 0, 0,
	0, 208, 0, 0, 0, 0, 1060, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 206,
	0, 0, 0, 208, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 1162, 1162, 1162, 0,
	1162, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 208, 208, 0, 0, 0, 0,
	0, 0, 0, 1172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1060,
	0, 0, 0, 2298, 0, 0, 1060, 0, 1799, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1161, 0, 0,
	1161, 1161, 1161, 0, 0, 0, 0, 0, 0, 0,
	2337, 0, 0, 1280, 0, 1280, 0, 1280, 0, 1172,
	1172, 0, 208, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 1064, 1064, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 2378, 0, 0, 0, 0, 0, 0,
	0, 1161, 1161, 0, 0, 2383, 206, 1172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 208, 0, 0, 0, 2401, 1172, 2403,
	0, 1060, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 2417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1060, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1061, 1457, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	1423, 0, 0, 0, 1061, 0, 0, 0, 1443, 0,
	0, 0, 0, 1061, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 1060, 0, 0, 0, 0, 0, 0, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 0, 1162, 1471, 0,
	0, 0, 1451, 1452, 1453, 0, 0, 1061, 0, 0,
	0, 0, 0, 0, 1061, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 1468, 0, 0, 0, 0,
	0, 0, 1438, 1439, 0, 1162, 0, 0, 1162, 1162,
	1162, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 2618, 0, 0, 1444, 0, 0, 0, 1060,
	0, 0, 0, 0, 1161, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 2654, 1172, 2298, 0, 0, 0, 1458, 1162,
	1162, 0, 0, 1161, 1161, 1161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 0, 0, 1061,
	1450, 0, 1061, 0, 0, 0, 0, 0, 0, 2692,
	0, 0, 0, 2696, 0, 0, 0, 0, 1445, 0,
	0, 0, 2703, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 1470,
	0, 0, 1061, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 2745, 0, 0, 0, 0, 0,
	0, 0, 1423, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2764, 0,
	1172, 0, 0, 1060, 0, 1060, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 2770, 0, 1435, 1436,
	1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 0, 0, 0, 3053, 0,
	0, 3052, 0, 1446, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 0, 1429, 0, 0, 0, 0, 0, 0,
	0, 1161, 0, 0, 1060, 0, 1161, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 1061,
	1471, 0, 0, 0, 1451, 1452, 1453, 0, 0, 0,
	1060, 0, 0, 1161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 1468, 0, 0,
	0, 0, 0, 0, 1438, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 1060, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 1060, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1060, 1061, 0, 0,
	0, 0, 1162, 0, 0, 0, 0, 0, 1060, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1445, 1162, 1162, 1162, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1162, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2962, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2974, 0, 0, 0, 1421,
	1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 1424, 0, 1460, 0, 1470,
	1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 3013, 0,
	2489, 0, 1423, 2490, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 1440, 0, 0,
	0, 1061, 0, 1061, 0, 0, 0, 0, 0, 1161,
	0, 0, 0, 0, 0, 0, 0, 0, 1161, 1161,
	0, 0, 0, 0, 1161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 1447, 1448, 1449, 0, 0, 1162,
	0, 1060, 1061, 1429, 1162, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 1061, 0,
	1471, 1162, 0, 0, 1451, 1452, 1453, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	0, 0, 0, 0, 0, 1467, 0, 1468, 0, 0,
	1457, 0, 0, 0, 1438, 1439, 0, 1424, 0, 0,
	1061, 1470, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 1423, 3121, 1061, 0, 0, 0,
	0, 0, 1443, 0, 2298, 1469, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 0, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	0, 0, 1471, 0, 0, 1462, 1451, 1452, 1453, 0,
	0, 0, 1162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 3227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 0, 0,
	1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0, 0,
	2031, 0, 0, 2032, 3271, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1162, 0, 0,
	0, 0, 0, 0, 1450, 0, 1162, 1162, 0, 0,
	0, 0, 1162, 0, 0, 3296, 1172, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 1061,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 1058, 0,
	0, 0, 0, 0, 3380, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3395, 216, 217, 218, 219, 220,
	1065, 221, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072,
	1073, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 1074, 229, 230, 231, 232, 233, 234, 1075,
	1076, 235, 469, 470, 471, 1077, 236, 472, 1078, 1063,
	1079, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 1080, 246, 0, 247, 248, 249, 1081, 938, 250,
	251, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 252, 253,
	254, 255, 256, 257, 473, 474, 1089, 258, 1090, 260,
	259, 1091, 261, 1092, 1093, 262, 263, 264, 1094, 265,
	1095, 266, 267, 1096, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 1097, 213, 1098, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1099, 284, 1100, 1101, 939, 285, 286, 1102, 287,
	479, 1103, 480, 288, 1104, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 1105, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 1106, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 1107, 486, 1108,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 1109, 318, 317, 1110,
	319, 488, 945, 320, 321, 946, 1111, 322, 323, 1112,
	1113, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 1114,
	215, 948, 1115, 489, 490, 341, 342, 1116, 343, 344,
	345, 1117, 1118, 347, 348, 349, 1119, 1120, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 1121, 360, 361, 493, 362, 494, 363,
	1122, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 1123, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 1124, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 1125, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 1126, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 1127, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 1128,
	429, 430, 428, 1129, 431, 432, 433, 434, 435, 272,
	436, 1130, 499, 500, 501, 502, 1131, 443, 1132, 437,
	438, 503, 439, 504, 1133, 440, 441, 442, 0, 444,
	445, 1134, 1135, 446, 447, 448, 449, 450, 452, 1136,
	453, 1137, 451, 454, 455, 456, 505, 506, 507, 1138,
	458, 457, 508, 1139, 1140, 1141, 1142, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 0, 0, 2151, 0, 0, 0, 0, 0, 0,
	0, 2152, 216, 217, 218, 219, 220, 1065, 221, 1066,
	1067, 1068, 1069, 464, 1070, 1071, 1072, 1073, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 1074,
	229, 230, 231, 232, 233, 234, 1075, 1076, 235, 469,
	470, 471, 1077, 236, 472, 1078, 1063, 1079, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 1080, 246,
	0, 247, 248, 249, 1081, 938, 250, 251, 1082, 1083,
	1085, 1084, 1086, 1087, 1088, 252, 253, 254, 255, 256,
	257, 473, 474, 1089, 258, 1090, 260, 259, 1091, 261,
	1092, 1093, 262, 263, 264, 1094, 265, 1095, 266, 267,
	1096, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 1097, 213, 1098, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 1099, 284,
	1100, 1101, 939, 285, 286, 1102, 287, 479, 1103, 480,
	288, 1104, 289, 290, 291, 292, 481, 482, 483, 340,
	941, 293, 294, 1105, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 1106, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 1107, 486, 1108, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 1109, 318, 317, 1110, 319, 488, 945,
	320, 321, 946, 1111, 322, 323, 1112, 1113, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 1114, 215, 948, 1115,
	489, 490, 341, 342, 1116, 343, 344, 345, 1117, 1118,
	347, 348, 349, 1119, 1120, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	1121, 360, 361, 493, 362, 494, 363, 1122, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 1123,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 1124, 386, 951, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 1125, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 1126, 413, 393, 394, 414, 952, 415,
	497, 416, 417, 1127, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 1128, 429, 430, 428,
	1129, 431, 432, 433, 434, 435, 272, 436, 1130, 499,
	500, 501, 502, 1131, 443, 1132, 437, 438, 503, 439,
	504, 1133, 440, 441, 442, 0, 444, 445, 1134, 1135,
	446, 447, 448, 449, 450, 452, 1136, 453, 1137, 451,
	454, 455, 456, 505, 506, 507, 1138, 458, 457, 508,
	1139, 1140, 1141, 1142, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3077, 216, 217, 218, 219, 220, 1065, 221, 1066, 1067,
	1068, 1069, 464, 1070, 1071, 1072, 1073, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 1074, 229,
	230, 231, 232, 233, 234, 1075, 1076, 235, 469, 470,
	471, 1077, 236, 472, 1078, 1063, 1079, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 1080, 246, 0,
	247, 248, 249, 1081, 938, 250, 251, 1082, 1083, 1085,
	1084, 1086, 1087, 1088, 252, 253, 254, 255, 256, 257,
	473, 474, 1089, 258, 1090, 260, 259, 1091, 261, 1092,
	1093, 262, 263, 264, 1094, 265, 1095, 266, 267, 1096,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 1097, 213, 1098, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1099, 284, 1100,
	1101, 939, 285, 286, 1102, 287, 479, 1103, 480, 288,
	1104, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 1105, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 1106, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 1107, 486, 1108, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 1109, 318, 317, 1110, 319, 488, 945, 320,
	321, 946, 1111, 322, 323, 1112, 1113, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 1114, 215, 948, 1115, 489,
	490, 341, 342, 1116, 343, 344, 345, 1117, 1118, 347,
	348, 349, 1119, 1120, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 1121,
	360, 361, 493, 362, 494, 363, 1122, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 1123, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 1124, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 1125, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 1126, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 1127, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 1128, 429, 430, 428, 1129,
	431, 432, 433, 434, 435, 272, 436, 1130, 499, 500,
	501, 502, 1131, 443, 1132, 437, 438, 503, 439, 504,
	1133, 440, 441, 442, 0, 444, 445, 1134, 1135, 446,
	447, 448, 449, 450, 452, 1136, 453, 1137, 451, 454,
	455, 456, 505, 506, 507, 1138, 458, 457, 508, 1139,
	1140, 1141, 1142, 459, 460, 509, 461, 462, 463, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3194, 0, 216, 217, 218, 219,
	220, 1065, 221, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 1074, 229, 230, 231, 232, 233, 234,
	1075, 1076, 235, 469, 470, 471, 1077, 236, 472, 1078,
	1063, 1079, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 1080, 246, 0, 247, 248, 249, 1081, 938,
	250, 251, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 252,
	253, 254, 255, 256, 257, 473, 474, 1089, 258, 1090,
	260, 259, 1091, 261, 1092, 1093, 262, 263, 264, 1094,
	265, 1095, 266, 267, 1096, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 1097, 213, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 939, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 1106, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 945, 320, 321, 946, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1114, 215, 948, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 1121, 360, 361, 493, 362, 494,
	363, 1122, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 1123, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 1124, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 1125, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 1126, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 1127, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	1128, 429, 430, 428, 1129, 431, 432, 433, 434, 435,
	272, 436, 1130, 499, 500, 501, 502, 1131, 443, 1132,
	437, 438, 503, 439, 504, 1133, 440, 441, 442, 0,
	444, 445, 1134, 1135, 446, 447, 448, 449, 450, 452,
	1136, 453, 1137, 451, 454, 455, 456, 505, 506, 507,
	1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459, 460,
	509, 461, 462, 463, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2813,
	0, 216, 217, 218, 219, 220, 1065, 221, 1066, 1067,
	1068, 1069, 464, 1070, 1071, 1072, 1073, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 1074, 229,
	230, 231, 232, 233, 234, 1075, 1076, 235, 469, 470,
	471, 1077, 236, 472, 1078, 1063, 1079, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 1080, 246, 0,
	247, 248, 249, 1081, 938, 250, 251, 1082, 1083, 1085,
	1084, 1086, 1087, 1088, 252, 253, 254, 255, 256, 257,
	473, 474, 1089, 258, 1090, 260, 259, 1091, 261, 1092,
	1093, 262, 263, 264, 1094, 265, 1095, 266, 267, 1096,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 1097, 213, 1098, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1099, 284, 1100,
	1101, 939, 285, 286, 1102, 287, 479, 1103, 480, 288,
	1104, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 1105, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 1106, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 1107, 486, 1108, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 1109, 318, 317, 1110, 319, 488, 945, 320,
	321, 946, 1111, 322, 323, 1112, 1113, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 1114, 215, 948, 1115, 489,
	490, 341, 342, 1116, 343, 344, 345, 1117, 1118, 347,
	348, 349, 1119, 1120, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 1121,
	360, 361, 493, 362, 494, 363, 1122, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 1123, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 1124, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 1125, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 1126, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 1127, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 1128, 429, 430, 428, 1129,
	431, 432, 433, 434, 435, 272, 436, 1130, 499, 500,
	501, 502, 1131, 443, 1132, 437, 438, 503, 439, 504,
	1133, 440, 441, 442, 0, 444, 445, 1134, 1135, 446,
	447, 448, 449, 450, 452, 1136, 453, 1137, 451, 454,
	455, 456, 505, 506, 507, 1138, 458, 457, 508, 1139,
	1140, 1141, 1142, 459, 460, 509, 461, 462, 463, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2805, 0, 216, 217, 218, 219,
	220, 1065, 221, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 1074, 229, 230, 231, 232, 233, 234,
	1075, 1076, 235, 469, 470, 471, 1077, 236, 472, 1078,
	1063, 1079, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 1080, 246, 0, 247, 248, 249, 1081, 938,
	250, 251, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 252,
	253, 254, 255, 256, 257, 473, 474, 1089, 258, 1090,
	260, 259, 1091, 261, 1092, 1093, 262, 263, 264, 1094,
	265, 1095, 266, 267, 1096, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 1097, 213, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 939, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 1106, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 945, 320, 321, 946, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1114, 215, 948, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 1121, 360, 361, 493, 362, 494,
	363, 1122, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 1123, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 1124, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 1125, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 1126, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 1127, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	1128, 429, 430, 428, 1129, 431, 432, 433, 434, 435,
	272, 436, 1130, 499, 500, 501, 502, 1131, 443, 1132,
	437, 438, 503, 439, 504, 1133, 440, 441, 442, 0,
	444, 445, 1134, 1135, 446, 447, 448, 449, 450, 452,
	1136, 453, 1137, 451, 454, 455, 456, 505, 506, 507,
	1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459, 460,
	509, 461, 462, 463, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2677,
	0, 216, 217, 218, 219, 220, 1065, 221, 1066, 1067,
	1068, 1069, 464, 1070, 1071, 1072, 1073, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 1074, 229,
	230, 231, 232, 233, 234, 1075, 1076, 235, 469, 470,
	471, 1077, 236, 472, 1078, 1063, 1079, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 1080, 246, 0,
	247, 248, 249, 1081, 938, 250, 251, 1082, 1083, 1085,
	1084, 1086, 1087, 1088, 252, 253, 254, 255, 256, 257,
	473, 474, 1089, 258, 1090, 260, 259, 1091, 261, 1092,
	1093, 262, 263, 264, 1094, 265, 1095, 266, 267, 1096,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 1097, 213, 1098, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 1099, 284, 1100,
	1101, 939, 285, 286, 1102, 287, 479, 1103, 480, 288,
	1104, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 1105, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 1106, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 1107, 486, 1108, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 1109, 318, 317, 1110, 319, 488, 945, 320,
	321, 946, 1111, 322, 323, 1112, 1113, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 1114, 215, 948, 1115, 489,
	490, 341, 342, 1116, 343, 344, 345, 1117, 1118, 347,
	348, 349, 1119, 1120, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 1121,
	360, 361, 493, 362, 494, 363, 1122, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 1123, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 1124, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 1125, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 1126, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 1127, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 1128, 429, 430, 428, 1129,
	431, 432, 433, 434, 435, 272, 436, 1130, 499, 500,
	501, 502, 1131, 443, 1132, 437, 438, 503, 439, 504,
	1133, 440, 441, 442, 0, 444, 445, 1134, 1135, 446,
	447, 448, 449, 450, 452, 1136, 453, 1137, 451, 454,
	455, 456, 505, 506, 507, 1138, 458, 457, 508, 1139,
	1140, 1141, 1142, 459, 460, 509, 461, 462, 463, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2044, 0, 216, 217, 218, 219,
	220, 1065, 221, 1066, 1067, 1068, 1069, 464, 1070, 1071,
	1072, 1073, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 1074, 229, 230, 231, 232, 233, 234,
	1075, 1076, 235, 469, 470, 471, 1077, 236, 472, 1078,
	1063, 1079, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 1080, 246, 0, 247, 248, 249, 1081, 938,
	250, 251, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 252,
	253, 254, 255, 256, 257, 473, 474, 1089, 258, 1090,
	260, 259, 1091, 261, 1092, 1093, 262, 263, 264, 1094,
	265, 1095, 266, 267, 1096, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 1097, 213, 1098,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 1099, 284, 1100, 1101, 939, 285, 286, 1102,
	287, 479, 1103, 480, 288, 1104, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 1105, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 1106, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 1107, 486,
	1108, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 1109, 318, 317,
	1110, 319, 488, 945, 320, 321, 946, 1111, 322, 323,
	1112, 1113, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	1114, 215, 948, 1115, 489, 490, 341, 342, 1116, 343,
	344, 345, 1117, 1118, 347, 348, 349, 1119, 1120, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 1121, 360, 361, 493, 362, 494,
	363, 1122, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 1123, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 1124, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 1125, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 1126, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 1127, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	1128, 429, 430, 428, 1129, 431, 432, 433, 434, 435,
	272, 436, 1130, 499, 500, 501, 502, 1131, 443, 1132,
	437, 438, 503, 439, 504, 1133, 440, 441, 442, 0,
	444, 445, 1134, 1135, 446, 447, 448, 449, 450, 452,
	1136, 453, 1137, 451, 454, 455, 456, 505, 506, 507,
	1138, 458, 457, 508, 1139, 1140, 1141, 1142, 459, 460,
	509, 461, 462, 463, 1166, 0, 1058, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1770,
	0, 0, 0, 216, 217, 218, 219, 220, 1065, 221,
	1066, 1067, 1068, 1069, 464, 1070, 1071, 1072, 1073, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	1074, 229, 230, 231, 232, 233, 234, 1075, 1076, 235,
	469, 470, 471, 1077, 236, 472, 1078, 1063, 1079, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 1080,
	246, 0, 247, 248, 249, 1081, 938, 250, 251, 1082,
	1083, 1085, 1084, 1086, 1087, 1088, 252, 253, 254, 255,
	256, 257, 473, 474, 1089, 258, 1090, 260, 259, 1091,
	261, 1092, 1093, 262, 263, 264, 1094, 265, 1095, 266,
	267, 1096, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 1097, 213, 1098, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 1099,
	284, 1100, 1101, 939, 285, 286, 1102, 287, 479, 1103,
	480, 288, 1104, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 1105, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 1106, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 1107, 486, 1108, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 1109, 318, 317, 1110, 319, 488,
	945, 320, 321, 946, 1111, 322, 323, 1112, 1113, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 1114, 215, 948,
	1115, 489, 490, 341, 342, 1116, 343, 344, 345, 1117,
	1118, 347, 348, 349, 1119, 1120, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 1121, 360, 361, 493, 362, 494, 363, 1122, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	1123, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 1124, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 1125, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 1126, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 1127, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 1128, 429, 430,
	428, 1129, 431, 432, 433, 434, 435, 272, 436, 1130,
	499, 500, 501, 502, 1131, 443, 1132, 437, 438, 503,
	439, 504, 1133, 440, 441, 442, 0, 444, 445, 1134,
	1135, 446, 447, 448, 449, 450, 452, 1136, 453, 1137,
	451, 454, 455, 456, 505, 506, 507, 1138, 458, 457,
	508, 1139, 1140, 1141, 1142, 459, 460, 509, 461, 462,
	463, 1055, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 1065, 221, 1066, 1067, 1068,
	1069, 464, 1070, 1071, 1072, 1073, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 1074, 229, 230,
	231, 232, 233, 234, 1075, 1076, 235, 469, 470, 471,
	1077, 236, 472, 1078, 1063, 1079, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 1080, 246, 0, 247,
	248, 249, 1081, 938, 250, 251, 1082, 1083, 1085, 1084,
	1086, 1087, 1088, 252, 253, 254, 255, 256, 257, 473,
	474, 1089, 258, 1090, 260, 259, 1091, 261, 1092, 1093,
	262, 263, 264, 1094, 265, 1095, 266, 267, 1096, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 1097, 213, 1098, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 1099, 284, 1100, 1101,
	939, 285, 286, 1102, 287, 479, 1103, 480, 288, 1104,
	289, 290, 291, 292, 481, 482, 483, 340, 941, 293,
	294, 1105, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 1106, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 1107, 486, 1108, 307, 942, 487, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 1109, 318, 317, 1110, 319, 488, 945, 320, 321,
	946, 1111, 322, 323, 1112, 1113, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 1114, 215, 948, 1115, 489, 490,
	341, 342, 1116, 343, 344, 345, 1117, 1118, 347, 348,
	349, 1119, 1120, 350, 491, 949, 351, 950, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 1121, 360,
	361, 493, 362, 494, 363, 1122, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 1123, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 1124, 386, 951, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	1125, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 1126, 413, 393, 394, 414, 952, 415, 497, 416,
	417, 1127, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 1128, 429, 430, 428, 1129, 431,
	432, 433, 434, 435, 272, 436, 1130, 499, 500, 501,
	502, 1131, 443, 1132, 437, 438, 503, 439, 504, 1133,
	440, 441, 442, 0, 444, 445, 1134, 1135, 446, 447,
	448, 449, 450, 452, 1136, 453, 1137, 451, 454, 455,
	456, 505, 506, 507, 1138, 458, 457, 508, 1139, 1140,
	1141, 1142, 459, 460, 509, 461, 462, 463, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	1065, 221, 1066, 1067, 1068, 1069, 464, 1070, 1071, 1072,
	1073, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 1074, 229, 230, 231, 232, 233, 234, 1075,
	1076, 235, 469, 470, 471, 1077, 236, 472, 1078, 1063,
	1079, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 1080, 246, 0, 247, 248, 249, 1081, 938, 250,
	251, 1082, 1083, 1085, 1084, 1086, 1087, 1088, 252, 253,
	254, 255, 256, 257, 473, 474, 1089, 258, 1090, 260,
	259, 1091, 261, 1092, 1093, 262, 263, 264, 1094, 265,
	1095, 266, 267, 1096, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 1097, 213, 1098, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 1099, 284, 1100, 1101, 939, 285, 286, 1102, 287,
	479, 1103, 480, 288, 1104, 289, 290, 291, 292, 481,
	482, 483, 340, 941, 293, 294, 1105, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 1106, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 1107, 486, 1108,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 1109, 318, 317, 1110,
	319, 488, 945, 320, 321, 946, 1111, 322, 323, 1112,
	1113, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 1114,
	215, 948, 1115, 489, 490, 341, 342, 1116, 343, 344,
	345, 1117, 1118, 347, 348, 349, 1119, 1120, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 1121, 360, 361, 493, 362, 494, 363,
	1122, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 1123, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 1124, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 1125, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 1126, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 1127, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 1128,
	429, 430, 428, 1129, 431, 432, 433, 434, 435, 272,
	436, 1130, 499, 500, 501, 502, 1131, 443, 1132, 437,
	438, 503, 439, 504, 1133, 440, 441, 442, 0, 444,
	445, 1134, 1135, 446, 447, 448, 449, 450, 452, 1136,
	453, 1137, 451, 454, 455, 456, 505, 506, 507, 1138,
	458, 457, 508, 1139, 1140, 1141, 1142, 459, 460, 509,
	461, 462, 463, 2020, 0, 880, 837, 838, 839, 835,
	836, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 2017, 221, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 222, 223,
	224, 225, 465, 895, 874, 906, 864, 905, 904, 0,
	229, 866, 865, 232, 233, 234, 856, 928, 235, 964,
	965, 471, 0, 236, 935, 0, 918, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 921, 919,
	920, 925, 923, 922, 924, 252, 253, 254, 255, 909,
	257, 902, 901, 826, 258, 0, 260, 259, 0, 261,
	2018, 0, 262, 900, 264, 0, 265, 0, 266, 267,
	0, 832, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 955, 956, 845, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	214, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 215, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 958, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 896, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 833, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 869, 870, 872, 873, 404,
	408, 411, 412, 926, 413, 393, 394, 414, 952, 415,
	891, 871, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 937, 422, 423, 424, 959, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 2016, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 2019, 0, 0, 0, 0,
	0, 0, 850, 2015, 0, 0, 813, 848, 880, 837,
	838, 839, 835, 836, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 0, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 1305, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 824, 174, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 1498, 1496, 0, 0, 0,
	848, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 0, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 1305, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 824, 174, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 1498, 2439, 0, 0, 0,
	848, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 0, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 1305, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 824, 174, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 880, 837,
	838, 839, 835, 836, 849, 1498, 1496, 0, 0, 0,
	848, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 2105, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 2110, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 2106,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 2107, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 816,
	848, 880, 837, 838, 839, 835, 836, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 828, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 880, 837, 838, 839, 835, 836, 849, 850, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 3392, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 828, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 880, 837, 838, 839, 835, 836, 849, 850, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 3251, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 828, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 880, 837, 838, 839, 835, 836, 849, 850, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 930, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 2985, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 1558, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 0, 848, 880, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 2792, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 880, 837, 838, 839, 835, 836,
	849, 850, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 1934,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 1933, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 880, 837, 838, 839, 835, 836,
	849, 850, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 828, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 880, 837, 838, 839, 835, 836,
	849, 850, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 1558, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 2110, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 0, 0, 0,
	0, 0, 0, 0, 850, 1496, 0, 0, 2115, 848,
	880, 837, 838, 839, 835, 836, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 929, 854,
	0, 0, 0, 222, 223, 224, 225, 465, 895, 874,
	906, 864, 905, 904, 0, 229, 866, 865, 232, 233,
	234, 856, 928, 235, 964, 965, 471, 0, 236, 935,
	0, 918, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 921, 919, 920, 925, 923, 922, 924,
	252, 253, 254, 255, 909, 257, 902, 901, 826, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 900, 264,
	0, 265, 0, 266, 267, 0, 832, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 955, 956, 845, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 899, 897,
	898, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 962, 0, 855, 288, 0, 289, 290, 291,
	292, 930, 931, 934, 340, 941, 293, 294, 0, 295,
	296, 876, 0, 0, 0, 214, 297, 299, 306, 0,
	940, 300, 888, 879, 890, 892, 893, 894, 889, 0,
	881, 0, 307, 942, 932, 943, 308, 309, 310, 944,
	914, 915, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 963, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 868, 333, 947, 336, 337, 339,
	338, 823, 215, 948, 846, 933, 903, 341, 342, 0,
	877, 344, 878, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 957, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 958, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 896, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 833, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	869, 870, 872, 873, 404, 408, 411, 412, 926, 413,
	393, 394, 414, 952, 415, 891, 871, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 937, 422, 423, 424,
	959, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 867, 0, 910, 911, 912, 913, 0, 443,
	0, 437, 438, 960, 439, 961, 844, 440, 441, 442,
	0, 444, 445, 0, 827, 446, 447, 448, 449, 450,
	452, 927, 453, 0, 875, 454, 455, 456, 505, 907,
	954, 0, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 824, 0, 0, 0, 0,
	0, 0, 0, 822, 0, 0, 0, 0, 820, 821,
	0, 0, 0, 0, 0, 0, 0, 850, 0, 0,
	0, 2113, 848, 880, 837, 838, 839, 835, 836, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 854, 0, 0, 0, 222, 223, 224, 225,
	465, 895, 874, 906, 864, 905, 904, 0, 229, 866,
	865, 232, 233, 234, 856, 928, 235, 964, 965, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 909, 257, 902,
	901, 826, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 900, 264, 0, 265, 0, 266, 267, 0, 832,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 845, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 899, 897, 898, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 855, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 876, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 888, 879, 890, 892, 893,
	894, 889, 0, 881, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 914, 915, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 868, 333, 947,
	336, 337, 339, 338, 823, 215, 948, 846, 933, 903,
	341, 342, 0, 877, 344, 878, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 896, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 833,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 869, 870, 872, 873, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 891, 871,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 937,
	422, 423, 424, 959, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 867, 0, 910, 911, 912,
	913, 0, 443, 0, 437, 438, 960, 439, 961, 844,
	440, 441, 442, 0, 444, 445, 0, 827, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 875, 454, 455,
	456, 505, 907, 954, 0, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 824, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 820, 821, 0, 0, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 2101, 848, 880, 837, 838, 839,
	835, 836, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 929, 854, 0, 0, 0, 222,
	223, 224, 225, 465, 895, 874, 906, 864, 905, 904,
	0, 229, 866, 865, 232, 233, 234, 856, 928, 235,
	964, 965, 471, 0, 236, 935, 0, 918, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 921,
	919, 920, 925, 923, 922, 924, 252, 253, 254, 255,
	909, 257, 902, 901, 826, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 900, 264, 0, 265, 0, 266,
	267, 0, 832, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 955, 956, 845, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 899, 897, 898, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 962, 0,
	855, 288, 0, 289, 290, 291, 292, 930, 931, 934,
	340, 941, 293, 294, 0, 295, 296, 876, 0, 0,
	0, 214, 297, 299, 306, 0, 940, 300, 888, 879,
	890, 892, 893, 894, 889, 0, 881, 0, 307, 942,
	932, 943, 308, 309, 310, 944, 914, 915, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 963,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	868, 333, 947, 336, 337, 339, 338, 823, 215, 948,
	846, 933, 903, 341, 342, 0, 877, 344, 878, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 957, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 958, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 896, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 833, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 869, 870, 872, 873,
	404, 408, 411, 412, 926, 413, 393, 394, 414, 952,
	415, 891, 871, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 937, 422, 423, 424, 959, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 867, 0,
	910, 911, 912, 913, 0, 443, 0, 437, 438, 960,
	439, 961, 844, 440, 441, 442, 0, 444, 445, 0,
	827, 446, 447, 448, 449, 450, 452, 927, 453, 0,
	875, 454, 455, 456, 505, 907, 954, 0, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 824, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 820, 821, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 2090, 848, 880,
	837, 838, 839, 835, 836, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 929, 854, 0,
	0, 0, 222, 223, 224, 225, 465, 895, 874, 906,
	864, 905, 904, 0, 229, 866, 865, 232, 233, 234,
	856, 928, 235, 964, 965, 471, 0, 236, 935, 0,
	918, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 921, 919, 920, 925, 923, 922, 924, 252,
	253, 254, 255, 909, 257, 902, 901, 826, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 900, 264, 0,
	265, 0, 266, 267, 0, 832, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 955, 956, 845, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 899, 897, 898,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 962, 0, 855, 288, 0, 289, 290, 291, 292,
	930, 931, 934, 340, 941, 293, 294, 0, 295, 296,
	876, 0, 0, 0, 214, 297, 299, 306, 0, 940,
	300, 888, 879, 890, 892, 893, 894, 889, 0, 881,
	0, 307, 942, 932, 943, 308, 309, 310, 944, 914,
	915, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 963, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 868, 333, 947, 336, 337, 339, 338,
	823, 215, 948, 846, 933, 903, 341, 342, 0, 877,
	344, 878, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 957, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 958, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	896, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 833, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 869,
	870, 872, 873, 404, 408, 411, 412, 926, 413, 393,
	394, 414, 952, 415, 891, 871, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 937, 422, 423, 424, 959,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 867, 0, 910, 911, 912, 913, 0, 443, 0,
	437, 438, 960, 439, 961, 844, 440, 441, 442, 0,
	444, 445, 0, 827, 446, 447, 448, 449, 450, 452,
	927, 453, 0, 875, 454, 455, 456, 505, 907, 954,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 824, 0, 0, 0, 0, 0,
	0, 0, 822, 0, 0, 0, 0, 820, 821, 0,
	0, 0, 0, 0, 0, 0, 850, 0, 0, 0,
	2088, 848, 2080, 837, 838, 839, 835, 836, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	929, 854, 0, 0, 0, 222, 223, 224, 225, 465,
	895, 874, 906, 864, 905, 904, 0, 229, 866, 865,
	232, 233, 234, 856, 928, 235, 964, 965, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 909, 2083, 902, 901,
	826, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	900, 264, 0, 265, 0, 266, 267, 0, 832, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	845, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 2084, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 2085, 2082, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 215, 948, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 896, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 833, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 2086, 0,
	409, 410, 869, 870, 872, 873, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 952, 415, 891, 871, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 937, 422,
	423, 424, 959, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 444, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 2081, 463, 824, 0, 0,
	0, 0, 0, 0, 0, 822, 0, 0, 0, 0,
	820, 821, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 2077, 848, 2080, 837, 838, 839, 835,
	836, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 222, 223,
	224, 225, 465, 895, 874, 906, 864, 905, 904, 0,
	229, 866, 865, 232, 233, 234, 856, 928, 235, 964,
	965, 471, 0, 236, 935, 0, 918, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 921, 919,
	920, 925, 923, 922, 924, 252, 253, 254, 255, 909,
	2083, 902, 901, 826, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 900, 264, 0, 265, 0, 266, 267,
	0, 832, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 955, 956, 845, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 2084, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	214, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 2085, 2082, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 215, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 958, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 896, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 833, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 2086, 0, 409, 410, 869, 870, 872, 873, 404,
	408, 411, 412, 926, 413, 393, 394, 414, 952, 415,
	891, 871, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 937, 422, 423, 424, 959, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 2081, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 880, 837, 838, 839, 835,
	836, 849, 850, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 929, 854, 0, 0, 0, 222, 223,
	224, 225, 465, 895, 874, 906, 864, 905, 904, 0,
	229, 866, 865, 232, 233, 234, 856, 928, 235, 964,
	965, 471, 0, 236, 935, 0, 918, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 921, 919,
	920, 925, 923, 922, 924, 252, 253, 254, 255, 909,
	257, 902, 901, 826, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 900, 264, 0, 265, 0, 266, 267,
	0, 832, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 955, 956, 845, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 899, 897, 898, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 962, 0, 855,
	288, 0, 289, 290, 291, 292, 930, 931, 934, 340,
	941, 293, 294, 0, 295, 296, 876, 0, 0, 0,
	214, 297, 299, 306, 0, 940, 300, 888, 879, 890,
	892, 893, 894, 889, 0, 881, 0, 307, 942, 932,
	943, 308, 309, 310, 944, 914, 915, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 963, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 868,
	333, 947, 336, 337, 339, 338, 823, 215, 948, 846,
	933, 903, 341, 342, 0, 877, 344, 878, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	957, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 958, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 896, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 833, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 869, 870, 872, 873, 404,
	408, 411, 412, 926, 413, 393, 394, 414, 952, 415,
	891, 871, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 937, 422, 423, 424, 959, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 867, 0, 910,
	911, 912, 913, 0, 443, 0, 437, 438, 960, 439,
	961, 844, 440, 441, 442, 0, 444, 445, 0, 827,
	446, 447, 448, 449, 450, 452, 927, 453, 0, 875,
	454, 455, 456, 505, 907, 954, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	824, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 0, 0, 820, 821, 0, 0, 0, 0, 0,
	1504, 0, 850, 0, 0, 0, 0, 848, 880, 837,
	838, 839, 835, 836, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	1921, 221, 0, 0, 0, 0, 929, 854, 0, 0,
	0, 222, 223, 224, 225, 465, 895, 874, 906, 864,
	905, 904, 0, 229, 866, 865, 232, 233, 234, 856,
	928, 235, 964, 965, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 909, 257, 902, 901, 826, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 900, 264, 0, 265,
	0, 266, 267, 0, 832, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 845, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 899, 897, 898, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 855, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 876,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	888, 879, 890, 892, 893, 894, 889, 0, 881, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 914, 915,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 868, 333, 947, 336, 337, 339, 338, 823,
	215, 948, 846, 933, 903, 341, 342, 0, 877, 344,
	878, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 896,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 833, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 869, 870,
	872, 873, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 891, 871, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 937, 422, 423, 424, 959, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	867, 0, 910, 911, 912, 913, 0, 443, 0, 437,
	438, 960, 439, 961, 844, 440, 441, 442, 0, 444,
	445, 0, 827, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 875, 454, 455, 456, 505, 907, 954, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 824, 0, 0, 0, 0, 0, 0,
	0, 822, 0, 0, 0, 0, 820, 821, 0, 0,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 1195,
	848, 880, 837, 838, 839, 835, 836, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 929,
	854, 0, 0, 0, 222, 223, 224, 225, 465, 895,
	874, 906, 864, 905, 904, 0, 229, 866, 865, 232,
	233, 234, 856, 928, 235, 964, 965, 471, 0, 236,
	935, 0, 918, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 921, 919, 920, 925, 923, 922,
	924, 252, 253, 254, 255, 909, 257, 902, 901, 826,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 900,
	264, 0, 265, 0, 266, 267, 0, 832, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 955, 956, 845,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 899,
	897, 898, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 962, 0, 855, 288, 0, 289, 290,
	291, 292, 1194, 931, 934, 340, 941, 293, 294, 0,
	295, 296, 876, 0, 0, 0, 214, 297, 299, 306,
	0, 940, 300, 888, 879, 890, 892, 893, 894, 889,
	0, 881, 0, 307, 942, 932, 943, 308, 309, 310,
	944, 914, 915, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 963, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 868, 333, 947, 336, 337,
	339, 338, 823, 215, 948, 846, 933, 903, 341, 342,
	0, 877, 344, 878, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 957, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 958,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 896, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 833, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 869, 870, 872, 873, 404, 408, 411, 412, 926,
	413, 393, 394, 414, 952, 415, 891, 871, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 937, 422, 423,
	424, 959, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 867, 0, 910, 911, 912, 913, 0,
	443, 0, 437, 438, 960, 439, 961, 844, 440, 441,
	442, 0, 444, 445, 0, 827, 446, 447, 448, 449,
	450, 452, 927, 453, 0, 875, 454, 455, 456, 505,
	907, 954, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 824, 0, 0, 0,
	0, 0, 0, 0, 822, 0, 0, 0, 0, 820,
	821, 0, 0, 0, 0, 0, 0, 0, 850, 0,
	0, 0, 1189, 848, 880, 837, 838, 839, 835, 836,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 854, 0, 0, 0, 222, 223, 224,
	225, 465, 895, 874, 906, 864, 905, 904, 0, 229,
	866, 865, 232, 233, 234, 856, 928, 235, 964, 965,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 909, 257,
	902, 901, 826, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 900, 264, 0, 265, 0, 266, 267, 0,
	832, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 845, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 899, 897, 898, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 855, 288,
	0, 289, 290, 291, 292, 1188, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 876, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 888, 879, 890, 892,
	893, 894, 889, 0, 881, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 914, 915, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 868, 333,
	947, 336, 337, 339, 338, 823, 215, 948, 846, 933,
	903, 341, 342, 0, 877, 344, 878, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 896, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	833, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 869, 870, 872, 873, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 891,
	871, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	937, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 867, 0, 910, 911,
	912, 913, 0, 443, 0, 437, 438, 960, 439, 961,
	844, 440, 441, 442, 0, 444, 445, 0, 827, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 875, 454,
	455, 456, 505, 907, 954, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 824,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 820, 821, 0, 0, 0, 0, 0, 0,
	0, 850, 0, 0, 0, 1184, 848, 880, 837, 838,
	839, 835, 836, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 3421,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 3420, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 3419, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 3421,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 826, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 823, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 3420, 445,
	0, 827, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 824, 0, 0, 0, 0, 0, 0, 0,
	822, 0, 0, 0, 0, 820, 821, 880, 837, 838,
	839, 835, 836, 849, 850, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 854, 0, 0, 0,
	222, 223, 224, 225, 465, 895, 874, 906, 864, 905,
	904, 0, 229, 866, 865, 232, 233, 234, 856, 928,
	235, 964, 965, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 909, 257, 902, 901, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 900, 264, 0, 265, 0,
	266, 267, 0, 832, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 845, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 899, 897, 898, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 855, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 876, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 888,
	879, 890, 892, 893, 894, 889, 0, 881, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 914, 915, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 868, 333, 947, 336, 337, 339, 338, 0, 215,
	948, 846, 933, 903, 341, 342, 0, 877, 344, 878,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 896, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 833, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 869, 870, 872,
	873, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 891, 871, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 937, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 867,
	0, 910, 911, 912, 913, 0, 443, 0, 437, 438,
	960, 439, 961, 844, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 875, 454, 455, 456, 505, 907, 954, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 880, 837, 838, 839, 835, 836, 849, 0,
	2098, 0, 0, 0, 0, 2096, 2097, 0, 0, 216,
	217, 218, 219, 220, 850, 221, 0, 0, 0, 848,
	929, 854, 0, 0, 0, 222, 223, 224, 225, 0,
	895, 874, 906, 864, 905, 904, 0, 229, 866, 865,
	232, 233, 234, 856, 928, 235, 964, 965, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 3421, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 909, 257, 902, 901,
	826, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	900, 264, 0, 265, 0, 266, 267, 0, 832, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	845, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	899, 897, 898, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 855, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 0, 293, 294,
	0, 295, 296, 876, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 888, 879, 890, 892, 893, 894,
	889, 0, 881, 0, 307, 0, 932, 0, 308, 309,
	310, 944, 914, 915, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 868, 333, 947, 336,
	337, 339, 338, 823, 215, 0, 846, 933, 903, 341,
	342, 0, 877, 344, 878, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 896, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 833, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 869, 870, 872, 873, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 0, 415, 891, 871, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 937, 422,
	423, 424, 959, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 867, 0, 910, 911, 912, 913,
	0, 443, 0, 437, 438, 960, 439, 961, 844, 440,
	441, 442, 0, 3420, 445, 0, 827, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 875, 454, 455, 456,
	505, 907, 954, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 813, 0, 1001, 0,
	820, 821, 0, 0, 0, 0, 0, 0, 0, 850,
	0, 0, 0, 0, 848, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 929, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	928, 235, 469, 470, 471, 0, 236, 935, 0, 918,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 921, 919, 920, 925, 923, 922, 924, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 955, 956, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	962, 0, 480, 288, 0, 289, 290, 291, 292, 930,
	931, 934, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 932, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 988, 318, 317, 0,
	319, 963, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	215, 948, 0, 933, 490, 341, 342, 0, 343, 344,
	345, 0, 993, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 957, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 958, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 496, 995, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 179, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 926, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 959, 0,
	429, 430, 428, 181, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 960, 439, 961, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 927,
	453, 0, 451, 454, 455, 456, 1305, 506, 507, 0,
	458, 457, 508, 1001, 0, 0, 173, 459, 460, 509,
	461, 462, 463, 0, 174, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 929, 0, 985, 0, 1590, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 928, 235, 469, 470, 471,
	0, 236, 935, 0, 918, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 938, 250, 251, 921, 919, 920, 925,
	923, 922, 924, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 955,
	956, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	939, 285, 286, 0, 287, 962, 0, 480, 288, 0,
	289, 290, 291, 292, 930, 931, 934, 340, 941, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 940, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 942, 932, 943, 308,
	309, 310, 944, 311, 312, 0, 0, 313, 314, 315,
	316, 988, 318, 317, 0, 319, 963, 945, 320, 321,
	946, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 947,
	336, 337, 339, 338, 0, 215, 948, 0, 933, 490,
	341, 342, 0, 343, 344, 345, 0, 993, 347, 348,
	349, 0, 0, 350, 491, 949, 351, 950, 957, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 958, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 951, 387, 388, 389, 390, 496,
	995, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	179, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 926, 413, 393, 394, 414, 952, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 959, 0, 429, 430, 428, 181, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 960, 439, 961, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 927, 453, 0, 451, 454, 455,
	456, 1305, 506, 507, 0, 458, 457, 508, 0, 0,
	0, 173, 459, 460, 509, 461, 462, 463, 0, 174,
	0, 0, 2546, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	1590, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 928, 235, 469, 470,
	471, 0, 236, 935, 0, 918, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 921, 919, 920,
	925, 923, 922, 924, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	955, 956, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 962, 0, 480, 288,
	0, 289, 290, 291, 292, 930, 931, 934, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 932, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 988, 318, 317, 0, 319, 963, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 215, 948, 0, 933,
	490, 341, 342, 0, 343, 344, 345, 0, 993, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 957,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 958, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 995, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 926, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 959, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 960, 439, 961,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 927, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	984, 0, 1001, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 985,
	929, 990, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 928, 235, 469, 470, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 480, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	988, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 215, 948, 0, 933, 490, 341,
	342, 0, 343, 344, 345, 0, 993, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 995,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 959, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 960, 439, 961, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1001, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 0, 985, 0, 990,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 928,
	235, 469, 470, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 480, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 988, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 215,
	948, 0, 933, 490, 341, 342, 0, 343, 344, 345,
	0, 993, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 496, 995, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	960, 439, 961, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1001, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	929, 0, 985, 0, 990, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 928, 235, 469, 470, 471, 0,
	236, 935, 0, 918, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 921, 919, 920, 925, 923,
	922, 924, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 955, 956,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 962, 0, 480, 288, 0, 289,
	290, 291, 292, 930, 931, 934, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 932, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 963, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 215, 948, 0, 933, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 957, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	958, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 995,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	926, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 959, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 960, 439, 961, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 927, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 813, 0, 1159,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 1485,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1063, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 179, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 181, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 1305, 506, 507,
	0, 458, 457, 508, 1302, 0, 1159, 173, 459, 460,
	509, 461, 462, 463, 0, 174, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 149, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 1063, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 938, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 939, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 941, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 940, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 942,
	487, 943, 308, 309, 310, 944, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	945, 320, 321, 946, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 947, 336, 337, 339, 338, 0, 0, 948,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 949, 351,
	950, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 951, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 179, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 952,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 181, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 1305, 506, 507, 0, 458, 457,
	508, 0, 0, 0, 173, 459, 460, 509, 461, 462,
	463, 0, 174, 0, 0, 0, 0, 1159, 1158, 0,
	0, 0, 0, 1156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 1063, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 487, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 0,
	948, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 1159, 1158, 0, 0, 0, 0, 1156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 2740, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 1063, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 0, 948, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1001, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 929, 0, 0, 0, 1309,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 928,
	235, 469, 470, 471, 0, 236, 935, 0, 918, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 938, 250, 251,
	921, 919, 920, 925, 923, 922, 924, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 955, 956, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 939, 285, 286, 0, 287, 962,
	0, 480, 288, 0, 289, 290, 291, 292, 930, 931,
	934, 340, 941, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 940, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	942, 932, 943, 308, 309, 310, 944, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	963, 945, 320, 321, 946, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 947, 336, 337, 339, 338, 0, 215,
	948, 0, 933, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 949,
	351, 950, 957, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 958, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 951, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 926, 413, 393, 394, 414,
	952, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 959, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	960, 439, 961, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 927, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 813, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 179, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 181,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 1305, 506, 507, 0, 458, 457, 508, 210,
	0, 0, 173, 459, 460, 509, 461, 462, 463, 0,
	174, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 149, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 210, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 1595, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 210,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 2693,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 210, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 2333, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 210,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 2816, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 687, 0, 578, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 1855, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 584, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 583, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 0, 577, 0, 578, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 587, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 584, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 583,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 578, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 587, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 584, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 1882, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	583, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 578, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 587, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 584, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 583, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 587, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 1332, 0, 1159, 1158, 0, 0, 0, 0,
	1156, 0, 0, 0, 0, 0, 0, 587, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 1063, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 1331,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 0, 948, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 1330, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 1300,
	0, 1159, 1158, 0, 0, 0, 0, 1156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 1063, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 938, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 939, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1299, 482, 483, 340, 941, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 940, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 942, 487, 943, 308, 309, 310,
	944, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 945, 320, 321, 946, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 947, 336, 337,
	339, 338, 0, 0, 948, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 949, 351, 950, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 951, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 952, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 1296, 0, 1159, 1158,
	0, 0, 0, 0, 1156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 1063,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 938, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 939, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1295,
	482, 483, 340, 941, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 940, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 942, 487, 943, 308, 309, 310, 944, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 945, 320, 321, 946, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 947, 336, 337, 339, 338, 0,
	0, 948, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	949, 351, 950, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 951,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 952, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 1234, 0, 1159, 1158, 0, 0, 0,
	0, 1156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 1063, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 938, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 939, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1233, 482, 483, 340,
	941, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 940, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 942, 487,
	943, 308, 309, 310, 944, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 945,
	320, 321, 946, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 947, 336, 337, 339, 338, 0, 0, 948, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 949, 351, 950,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 951, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 952, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	1231, 0, 1159, 1158, 0, 0, 0, 0, 1156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 1063, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 938, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 939,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1230, 482, 483, 340, 941, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 940, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 942, 487, 943, 308, 309,
	310, 944, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 945, 320, 321, 946,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 947, 336,
	337, 339, 338, 0, 0, 948, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 949, 351, 950, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 951, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 952, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 1152, 0, 1159,
	1158, 0, 0, 0, 0, 1156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1063, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	1154, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1159, 1158, 0, 0, 0, 0,
	1156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 1063, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 938, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 939, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 941,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 940, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 942, 487, 943,
	308, 309, 310, 944, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 945, 320,
	321, 946, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	947, 336, 337, 339, 338, 0, 0, 948, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 949, 351, 950, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 951, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 952, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1159,
	1158, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	1063, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 938,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 939, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 941, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 940,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 942, 487, 943, 308, 309, 310, 944, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 945, 320, 321, 946, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 947, 336, 337, 339, 338,
	0, 0, 948, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 949, 351, 950, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	951, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 952, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	1159, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 1063, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	938, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 939, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 941, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	940, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 942, 487, 943, 308, 309, 310, 944,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 945, 320, 321, 946, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 947, 336, 337, 339,
	338, 0, 0, 948, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 949, 351, 950, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 951, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 952, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 2222, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 2219, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	2368, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 2225, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 2365, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 2367, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 2364, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 2224, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 2366, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 210, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 2222,
	236, 472, 0, 0, 2216, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 2219, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 2225, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 2215, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 2224, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 2223, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1379, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 1382, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 1380, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 1381, 457, 508, 1147, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1149, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	993, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 1144, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 213, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 1146, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 214, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 215, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 993, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1051, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1053, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 993, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 540, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 539, 220, 529,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 532, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 533, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 534, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 528, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 529, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 532, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 533, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 534, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 993,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	2297, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1862, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 1798, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 1791, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1790, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1786, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 213, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1788, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 214,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 215, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1289,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1288, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1286, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 213, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 1285,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 214, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	215, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1283, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 213, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 1282, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	214, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 215, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	1279, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 213, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 1278, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 214, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 215, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 0, 458, 457, 508, 1254, 0, 210,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1169, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 213, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1171, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 214, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 215, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 213, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 214, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 215,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 532, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 533, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 534, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 1889, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 213, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 214, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 215, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 1887, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 213,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 214, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 215, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 1885, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	213, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 214, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 215, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 679, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 678,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 677, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 2368, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 3139, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 517, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 516, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 515, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 2156, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 210, 2355, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 2940, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 210, 2355,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 2352, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 1868, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 1860, 0, 210, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 481, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 0, 458, 457,
	508, 560, 0, 210, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 1029,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 561, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 557, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 556, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 1810, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 1809, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 560, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 550, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 561, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 557,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 1308, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 556, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 1293, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 1292, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 1242,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 1241, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 1226, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 0,
	458, 457, 508, 1163, 0, 210, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 0, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 413, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 0, 458, 457, 508,
	560, 0, 210, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 1029, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 481, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 561, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 557, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 556, 500, 501, 502,
	0, 443, 0, 437, 1030, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 1012, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 481, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 0, 458, 457, 508, 560, 0,
	210, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 550, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 548, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 481, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	549, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 561, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 551, 391, 0, 392,
	396, 397, 557, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 552, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 556, 500, 501, 502, 0, 443,
	0, 437, 554, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 0, 458, 457, 508, 544, 0, 210, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 481, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 545, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 0, 458,
	457, 508, 542, 0, 210, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 396, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 0, 458, 457, 508, 536,
	0, 210, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 481, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 0, 458, 457, 508, 512, 0, 210, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	371, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 288, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 355,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 368, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 391, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	210, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 0, 0, 0, 216, 217, 218,
	219, 220, 0, 221, 0, 0, 0, 0, 464, 0,
	0, 0, 0, 222, 223, 224, 225, 465, 466, 226,
	467, 227, 228, 468, 0, 229, 230, 231, 232, 233,
	234, 0, 0, 235, 469, 470, 471, 0, 236, 472,
	0, 0, 0, 237, 238, 239, 240, 241, 0, 243,
	244, 245, 242, 0, 246, 0, 247, 248, 249, 0,
	0, 250, 251, 0, 0, 0, 0, 0, 0, 0,
	252, 253, 254, 255, 256, 257, 473, 474, 0, 258,
	0, 260, 259, 0, 261, 0, 0, 262, 263, 264,
	0, 265, 0, 266, 267, 0, 475, 268, 269, 271,
	273, 270, 274, 275, 276, 277, 476, 477, 0, 0,
	0, 0, 0, 0, 0, 278, 279, 280, 478, 281,
	282, 0, 283, 0, 284, 0, 0, 0, 285, 286,
	0, 287, 479, 0, 480, 288, 0, 289, 290, 291,
	292, 2635, 482, 483, 340, 0, 293, 294, 0, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 484, 302, 301, 303, 304, 305, 485, 0,
	486, 0, 307, 0, 487, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 488, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 489, 490, 341, 342, 0,
	343, 344, 345, 0, 0, 347, 348, 349, 0, 0,
	350, 491, 0, 351, 0, 492, 352, 346, 353, 354,
	355, 356, 357, 358, 359, 0, 360, 361, 493, 362,
	494, 363, 0, 364, 0, 365, 366, 367, 368, 369,
	370, 495, 371, 372, 0, 373, 374, 375, 376, 377,
	0, 379, 380, 381, 378, 382, 383, 384, 385, 0,
	386, 0, 387, 388, 389, 390, 496, 391, 0, 392,
	396, 397, 398, 399, 400, 401, 402, 0, 409, 410,
	403, 405, 406, 407, 404, 408, 411, 412, 0, 413,
	393, 394, 414, 0, 415, 497, 416, 417, 0, 427,
	418, 419, 420, 395, 421, 425, 426, 422, 423, 424,
	498, 0, 429, 430, 428, 0, 431, 432, 433, 434,
	435, 272, 436, 0, 499, 500, 501, 502, 0, 443,
	0, 437, 438, 503, 439, 504, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 450,
	452, 0, 453, 0, 451, 454, 455, 456, 505, 506,
	507, 210, 458, 457, 508, 0, 0, 0, 0, 459,
	460, 509, 461, 462, 463, 0, 0, 0, 216, 217,
	218, 219, 220, 0, 221, 0, 0, 0, 0, 464,
	0, 0, 0, 0, 222, 223, 224, 225, 465, 466,
	226, 467, 227, 228, 468, 0, 229, 230, 231, 232,
	233, 234, 0, 0, 235, 469, 470, 471, 0, 236,
	472, 0, 0, 0, 237, 238, 239, 240, 241, 0,
	243, 244, 245, 242, 0, 246, 0, 247, 248, 249,
	0, 0, 250, 251, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 254, 255, 256, 257, 473, 474, 0,
	258, 0, 260, 259, 0, 261, 0, 0, 262, 263,
	264, 0, 265, 0, 266, 267, 0, 475, 268, 269,
	271, 273, 270, 274, 275, 276, 277, 476, 477, 0,
	0, 0, 0, 0, 0, 0, 278, 279, 280, 478,
	281, 282, 0, 283, 0, 284, 0, 0, 0, 285,
	286, 0, 287, 479, 0, 480, 288, 0, 289, 290,
	291, 292, 2633, 482, 483, 340, 0, 293, 294, 0,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 484, 302, 301, 303, 304, 305, 485,
	0, 486, 0, 307, 0, 487, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 488, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 489, 490, 341, 342,
	0, 343, 344, 345, 0, 0, 347, 348, 349, 0,
	0, 350, 491, 0, 351, 0, 492, 352, 346, 353,
	354, 355, 356, 357, 358, 359, 0, 360, 361, 493,
	362, 494, 363, 0, 364, 0, 365, 366, 367, 368,
	369, 370, 495, 371, 372, 0, 373, 374, 375, 376,
	377, 0, 379, 380, 381, 378, 382, 383, 384, 385,
	0, 386, 0, 387, 388, 389, 390, 496, 391, 0,
	392, 396, 397, 398, 399, 400, 401, 402, 0, 409,
	410, 403, 405, 406, 407, 404, 408, 411, 412, 0,
	413, 393, 394, 414, 0, 415, 497, 416, 417, 0,
	427, 418, 419, 420, 395, 421, 425, 426, 422, 423,
	424, 498, 0, 429, 430, 428, 0, 431, 432, 433,
	434, 435, 272, 436, 0, 499, 500, 501, 502, 0,
	443, 0, 437, 438, 503, 439, 504, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	450, 452, 0, 453, 0, 451, 454, 455, 456, 505,
	506, 507, 210, 458, 457, 508, 0, 0, 0, 0,
	459, 460, 509, 461, 462, 463, 0, 0, 0, 216,
	217, 218, 219, 220, 0, 221, 0, 0, 0, 0,
	464, 0, 0, 0, 0, 222, 223, 224, 225, 465,
	466, 226, 467, 227, 228, 468, 0, 229, 230, 231,
	232, 233, 234, 0, 0, 235, 469, 470, 471, 0,
	236, 472, 0, 0, 0, 237, 238, 239, 240, 241,
	0, 243, 244, 245, 242, 0, 246, 0, 247, 248,
	249, 0, 0, 250, 251, 0, 0, 0, 0, 0,
	0, 0, 252, 253, 254, 255, 256, 257, 473, 474,
	0, 258, 0, 260, 259, 0, 261, 0, 0, 262,
	263, 264, 0, 265, 0, 266, 267, 0, 475, 268,
	269, 271, 273, 270, 274, 275, 276, 277, 476, 477,
	0, 0, 0, 0, 0, 0, 0, 278, 279, 280,
	478, 281, 282, 0, 283, 0, 284, 0, 0, 0,
	285, 286, 0, 287, 479, 0, 480, 288, 0, 289,
	290, 291, 292, 2621, 482, 483, 340, 0, 293, 294,
	0, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 484, 302, 301, 303, 304, 305,
	485, 0, 486, 0, 307, 0, 487, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 488, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 489, 490, 341,
	342, 0, 343, 344, 345, 0, 0, 347, 348, 349,
	0, 0, 350, 491, 0, 351, 0, 492, 352, 346,
	353, 354, 355, 356, 357, 358, 359, 0, 360, 361,
	493, 362, 494, 363, 0, 364, 0, 365, 366, 367,
	368, 369, 370, 495, 371, 372, 0, 373, 374, 375,
	376, 377, 0, 379, 380, 381, 378, 382, 383, 384,
	385, 0, 386, 0, 387, 388, 389, 390, 496, 391,
	0, 392, 396, 397, 398, 399, 400, 401, 402, 0,
	409, 410, 403, 405, 406, 407, 404, 408, 411, 412,
	0, 413, 393, 394, 414, 0, 415, 497, 416, 417,
	0, 427, 418, 419, 420, 395, 421, 425, 426, 422,
	423, 424, 498, 0, 429, 430, 428, 0, 431, 432,
	433, 434, 435, 272, 436, 0, 499, 500, 501, 502,
	0, 443, 0, 437, 438, 503, 439, 504, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 450, 452, 0, 453, 0, 451, 454, 455, 456,
	505, 506, 507, 210, 458, 457, 508, 0, 0, 0,
	0, 459, 460, 509, 461, 462, 463, 0, 0, 0,
	216, 217, 218, 219, 220, 0, 221, 0, 0, 0,
	0, 464, 0, 0, 0, 0, 222, 223, 224, 225,
	465, 466, 226, 467, 227, 228, 468, 0, 229, 230,
	231, 232, 233, 234, 0, 0, 235, 469, 470, 471,
	0, 236, 472, 0, 0, 0, 237, 238, 239, 240,
	241, 0, 243, 244, 245, 242, 0, 246, 0, 247,
	248, 249, 0, 0, 250, 251, 0, 0, 0, 0,
	0, 0, 0, 252, 253, 254, 255, 256, 257, 473,
	474, 0, 258, 0, 260, 259, 0, 261, 0, 0,
	262, 263, 264, 0, 265, 0, 266, 267, 0, 475,
	268, 269, 271, 273, 270, 274, 275, 276, 277, 476,
	477, 0, 0, 0, 0, 0, 0, 0, 278, 279,
	280, 478, 281, 282, 0, 283, 0, 284, 0, 0,
	0, 285, 286, 0, 287, 479, 0, 480, 288, 0,
	289, 290, 291, 292, 2315, 482, 483, 340, 0, 293,
	294, 0, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 484, 302, 301, 303, 304,
	305, 485, 0, 486, 0, 307, 0, 487, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 488, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 489, 490,
	341, 342, 0, 343, 344, 345, 0, 0, 347, 348,
	349, 0, 0, 350, 491, 0, 351, 0, 492, 352,
	346, 353, 354, 355, 356, 357, 358, 359, 0, 360,
	361, 493, 362, 494, 363, 0, 364, 0, 365, 366,
	367, 368, 369, 370, 495, 371, 372, 0, 373, 374,
	375, 376, 377, 0, 379, 380, 381, 378, 382, 383,
	384, 385, 0, 386, 0, 387, 388, 389, 390, 496,
	391, 0, 392, 396, 397, 398, 399, 400, 401, 402,
	0, 409, 410, 403, 405, 406, 407, 404, 408, 411,
	412, 0, 413, 393, 394, 414, 0, 415, 497, 416,
	417, 0, 427, 418, 419, 420, 395, 421, 425, 426,
	422, 423, 424, 498, 0, 429, 430, 428, 0, 431,
	432, 433, 434, 435, 272, 436, 0, 499, 500, 501,
	502, 0, 443, 0, 437, 438, 503, 439, 504, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 450, 452, 0, 453, 0, 451, 454, 455,
	456, 505, 506, 507, 210, 458, 457, 508, 0, 0,
	0, 0, 459, 460, 509, 461, 462, 463, 0, 0,
	0, 216, 217, 218, 219, 220, 0, 221, 0, 0,
	0, 0, 464, 0, 0, 0, 0, 222, 223, 224,
	225, 465, 466, 226, 467, 227, 228, 468, 0, 229,
	230, 231, 232, 233, 234, 0, 0, 235, 469, 470,
	471, 0, 236, 472, 0, 0, 0, 237, 238, 239,
	240, 241, 0, 243, 244, 245, 242, 0, 246, 0,
	247, 248, 249, 0, 0, 250, 251, 0, 0, 0,
	0, 0, 0, 0, 252, 253, 254, 255, 256, 257,
	473, 474, 0, 258, 0, 260, 259, 0, 261, 0,
	0, 262, 263, 264, 0, 265, 0, 266, 267, 0,
	475, 268, 269, 271, 273, 270, 274, 275, 276, 277,
	476, 477, 0, 0, 0, 0, 0, 0, 0, 278,
	279, 280, 478, 281, 282, 0, 283, 0, 284, 0,
	0, 0, 285, 286, 0, 287, 479, 0, 480, 288,
	0, 289, 290, 291, 292, 481, 482, 483, 340, 0,
	293, 294, 0, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 484, 302, 301, 303,
	304, 305, 485, 0, 486, 0, 307, 0, 487, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 488, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 489,
	490, 341, 342, 0, 343, 344, 345, 0, 0, 347,
	348, 349, 0, 0, 350, 491, 0, 351, 0, 492,
	352, 346, 353, 354, 355, 356, 357, 358, 359, 0,
	360, 361, 493, 362, 494, 363, 0, 364, 0, 365,
	366, 367, 368, 369, 370, 495, 371, 372, 0, 373,
	374, 375, 376, 377, 0, 379, 380, 381, 378, 382,
	383, 384, 385, 0, 386, 0, 387, 388, 389, 390,
	496, 391, 0, 392, 545, 397, 398, 399, 400, 401,
	402, 0, 409, 410, 403, 405, 406, 407, 404, 408,
	411, 412, 0, 413, 393, 394, 414, 0, 415, 497,
	416, 417, 0, 427, 418, 419, 420, 395, 421, 425,
	426, 422, 423, 424, 498, 0, 429, 430, 428, 0,
	431, 432, 433, 434, 435, 272, 436, 0, 499, 500,
	501, 502, 0, 443, 0, 437, 438, 503, 439, 504,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 450, 452, 0, 453, 0, 451, 454,
	455, 456, 505, 506, 507, 210, 458, 457, 508, 0,
	0, 0, 0, 459, 460, 509, 461, 462, 463, 0,
	0, 0, 216, 217, 218, 219, 220, 0, 221, 0,
	0, 0, 0, 464, 0, 1822, 0, 0, 222, 223,
	224, 225, 465, 466, 226, 467, 227, 228, 468, 0,
	229, 230, 231, 232, 233, 234, 0, 0, 235, 469,
	470, 471, 0, 236, 472, 0, 0, 0, 237, 238,
	239, 240, 241, 0, 243, 244, 245, 242, 0, 246,
	0, 247, 248, 249, 0, 0, 250, 251, 0, 0,
	0, 0, 0, 0, 0, 252, 253, 254, 255, 256,
	257, 473, 474, 0, 258, 0, 260, 259, 0, 261,
	0, 0, 262, 263, 264, 0, 265, 0, 266, 267,
	0, 475, 268, 269, 271, 273, 270, 274, 275, 276,
	277, 476, 477, 0, 0, 0, 0, 0, 0, 0,
	278, 279, 280, 478, 281, 282, 0, 283, 0, 284,
	0, 0, 0, 285, 286, 0, 287, 479, 0, 480,
	288, 0, 289, 290, 291, 292, 481, 482, 483, 340,
	0, 293, 294, 0, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 484, 302, 301,
	303, 304, 305, 485, 0, 486, 0, 307, 0, 487,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 488, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	489, 490, 341, 342, 0, 343, 344, 345, 0, 0,
	347, 348, 349, 0, 0, 350, 491, 0, 351, 0,
	492, 352, 346, 353, 354, 355, 356, 357, 358, 359,
	0, 360, 361, 493, 362, 494, 363, 0, 364, 0,
	365, 366, 367, 368, 369, 370, 495, 371, 372, 0,
	373, 374, 375, 376, 377, 0, 379, 380, 381, 378,
	382, 383, 384, 385, 0, 386, 0, 387, 388, 389,
	390, 496, 391, 0, 392, 396, 397, 398, 399, 400,
	401, 402, 0, 409, 410, 403, 405, 406, 407, 404,
	408, 411, 412, 0, 0, 393, 394, 414, 0, 415,
	497, 416, 417, 0, 427, 418, 419, 420, 395, 421,
	425, 426, 422, 423, 424, 498, 0, 429, 430, 428,
	0, 431, 432, 433, 434, 435, 272, 436, 0, 499,
	500, 501, 502, 0, 443, 0, 437, 438, 503, 439,
	504, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 450, 452, 0, 453, 0, 451,
	454, 455, 456, 505, 506, 507, 210, 458, 457, 508,
	0, 0, 0, 0, 459, 460, 509, 461, 462, 463,
	0, 0, 0, 216, 217, 218, 219, 220, 0, 221,
	0, 0, 0, 0, 464, 0, 0, 0, 0, 222,
	223, 224, 225, 465, 466, 226, 467, 227, 228, 468,
	0, 229, 230, 231, 232, 233, 234, 0, 0, 235,
	469, 470, 471, 0, 236, 472, 0, 0, 0, 237,
	238, 239, 240, 241, 0, 243, 244, 245, 242, 0,
	246, 0, 247, 248, 249, 0, 0, 250, 251, 0,
	0, 0, 0, 0, 0, 0, 252, 253, 254, 255,
	256, 257, 473, 474, 0, 258, 0, 260, 259, 0,
	261, 0, 0, 262, 263, 264, 0, 265, 0, 266,
	267, 0, 475, 268, 269, 271, 273, 270, 274, 275,
	276, 277, 476, 477, 0, 0, 0, 0, 0, 0,
	0, 278, 279, 280, 478, 281, 282, 0, 283, 0,
	284, 0, 0, 0, 285, 286, 0, 287, 479, 0,
	480, 288, 0, 289, 290, 291, 292, 1262, 482, 483,
	340, 0, 293, 294, 0, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 484, 302,
	301, 303, 304, 305, 485, 0, 486, 0, 307, 0,
	487, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 488,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 489, 490, 341, 342, 0, 343, 344, 345, 0,
	0, 347, 348, 349, 0, 0, 350, 491, 0, 351,
	0, 492, 352, 346, 353, 354, 355, 356, 357, 358,
	359, 0, 360, 361, 493, 362, 494, 363, 0, 364,
	0, 365, 366, 367, 368, 369, 370, 495, 371, 372,
	0, 373, 374, 375, 376, 377, 0, 379, 380, 381,
	378, 382, 383, 384, 385, 0, 386, 0, 387, 388,
	389, 390, 496, 391, 0, 392, 396, 397, 398, 399,
	400, 401, 402, 0, 409, 410, 403, 405, 406, 407,
	404, 408, 411, 412, 0, 413, 393, 394, 414, 0,
	415, 497, 416, 417, 0, 427, 418, 419, 420, 395,
	421, 425, 426, 422, 423, 424, 498, 0, 429, 430,
	428, 0, 431, 432, 433, 434, 435, 272, 436, 0,
	499, 500, 501, 502, 0, 443, 0, 437, 438, 503,
	439, 504, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 450, 452, 0, 453, 0,
	451, 454, 455, 456, 505, 506, 507, 210, 458, 457,
	508, 0, 0, 0, 0, 459, 460, 509, 461, 462,
	463, 0, 0, 0, 216, 217, 218, 219, 220, 0,
	221, 0, 0, 0, 0, 464, 0, 0, 0, 0,
	222, 223, 224, 225, 465, 466, 226, 467, 227, 228,
	468, 0, 229, 230, 231, 232, 233, 234, 0, 0,
	235, 469, 470, 471, 0, 236, 472, 0, 0, 0,
	237, 238, 239, 240, 241, 0, 243, 244, 245, 242,
	0, 246, 0, 247, 248, 249, 0, 0, 250, 251,
	0, 0, 0, 0, 0, 0, 0, 252, 253, 254,
	255, 256, 257, 473, 474, 0, 258, 0, 260, 259,
	0, 261, 0, 0, 262, 263, 264, 0, 265, 0,
	266, 267, 0, 475, 268, 269, 271, 273, 270, 274,
	275, 276, 277, 476, 477, 0, 0, 0, 0, 0,
	0, 0, 278, 279, 280, 478, 281, 282, 0, 283,
	0, 284, 0, 0, 0, 285, 286, 0, 287, 479,
	0, 480, 288, 0, 289, 290, 291, 292, 1204, 482,
	483, 340, 0, 293, 294, 0, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 484,
	302, 301, 303, 304, 305, 485, 0, 486, 0, 307,
	0, 487, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	488, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 489, 490, 341, 342, 0, 343, 344, 345,
	0, 0, 347, 348, 349, 0, 0, 350, 491, 0,
	351, 0, 492, 352, 346, 353, 354, 355, 356, 357,
	358, 359, 0, 360, 361, 493, 362, 494, 363, 0,
	364, 0, 365, 366, 367, 368, 369, 370, 495, 371,
	372, 0, 373, 374, 375, 376, 377, 0, 379, 380,
	381, 378, 382, 383, 384, 385, 0, 386, 0, 387,
	388, 389, 390, 496, 391, 0, 392, 396, 397, 398,
	399, 400, 401, 402, 0, 409, 410, 403, 405, 406,
	407, 404, 408, 411, 412, 0, 413, 393, 394, 414,
	0, 415, 497, 416, 417, 0, 427, 418, 419, 420,
	395, 421, 425, 426, 422, 423, 424, 498, 0, 429,
	430, 428, 0, 431, 432, 433, 434, 435, 272, 436,
	0, 499, 500, 501, 502, 0, 443, 0, 437, 438,
	503, 439, 504, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 450, 452, 0, 453,
	0, 451, 454, 455, 456, 505, 506, 507, 210, 458,
	457, 508, 0, 0, 0, 0, 459, 460, 509, 461,
	462, 463, 0, 0, 0, 216, 217, 218, 219, 220,
	0, 221, 0, 0, 0, 0, 464, 0, 0, 0,
	0, 222, 223, 224, 225, 465, 466, 226, 467, 227,
	228, 468, 0, 229, 230, 231, 232, 233, 234, 0,
	0, 235, 469, 470, 471, 0, 236, 472, 0, 0,
	0, 237, 238, 239, 240, 241, 0, 243, 244, 245,
	242, 0, 246, 0, 247, 248, 249, 0, 0, 250,
	251, 0, 0, 0, 0, 0, 0, 0, 252, 253,
	254, 255, 256, 257, 473, 474, 0, 258, 0, 260,
	259, 0, 261, 0, 0, 262, 263, 264, 0, 265,
	0, 266, 267, 0, 475, 268, 269, 271, 273, 270,
	274, 275, 276, 277, 476, 477, 0, 0, 0, 0,
	0, 0, 0, 278, 279, 280, 478, 281, 282, 0,
	283, 0, 284, 0, 0, 0, 285, 286, 0, 287,
	479, 0, 480, 288, 0, 289, 290, 291, 292, 481,
	482, 483, 340, 0, 293, 294, 0, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	484, 302, 301, 303, 304, 305, 485, 0, 486, 0,
	307, 0, 487, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 488, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 489, 490, 341, 342, 0, 343, 344,
	345, 0, 0, 347, 348, 349, 0, 0, 350, 491,
	0, 351, 0, 492, 352, 346, 353, 354, 355, 356,
	357, 358, 359, 0, 360, 361, 493, 362, 494, 363,
	0, 364, 0, 365, 366, 367, 368, 369, 370, 495,
	967, 372, 0, 373, 374, 375, 376, 377, 0, 379,
	380, 381, 378, 382, 383, 384, 385, 0, 386, 0,
	387, 388, 389, 390, 496, 391, 0, 392, 396, 397,
	398, 399, 400, 401, 402, 0, 409, 410, 403, 405,
	406, 407, 404, 408, 411, 412, 0, 413, 393, 394,
	414, 0, 415, 497, 416, 417, 0, 427, 418, 419,
	420, 395, 421, 425, 426, 422, 423, 424, 498, 0,
	429, 430, 428, 0, 431, 432, 433, 434, 435, 272,
	436, 0, 499, 500, 501, 502, 0, 443, 0, 437,
	438, 503, 439, 504, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 450, 452, 0,
	453, 0, 451, 454, 455, 456, 505, 506, 507, 210,
	458, 457, 508, 0, 0, 0, 0, 459, 460, 509,
	461, 462, 463, 0, 0, 0, 216, 217, 218, 219,
	220, 0, 221, 0, 0, 0, 0, 464, 0, 0,
	0, 0, 222, 223, 224, 225, 465, 466, 226, 467,
	227, 228, 468, 0, 229, 230, 231, 232, 233, 234,
	0, 0, 235, 469, 470, 471, 0, 236, 472, 0,
	0, 0, 237, 238, 239, 240, 241, 0, 243, 244,
	245, 242, 0, 246, 0, 247, 248, 249, 0, 0,
	250, 251, 0, 0, 0, 0, 0, 0, 0, 252,
	253, 254, 255, 256, 257, 473, 474, 0, 258, 0,
	260, 259, 0, 261, 0, 0, 262, 263, 264, 0,
	265, 0, 266, 267, 0, 475, 268, 269, 271, 273,
	270, 274, 275, 276, 277, 476, 477, 0, 0, 0,
	0, 0, 0, 0, 278, 279, 280, 478, 281, 282,
	0, 283, 0, 284, 0, 0, 0, 285, 286, 0,
	287, 479, 0, 480, 0, 0, 289, 290, 291, 292,
	481, 482, 483, 340, 0, 293, 294, 0, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 484, 302, 301, 303, 304, 305, 485, 0, 486,
	0, 307, 0, 487, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 488, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 489, 490, 341, 342, 0, 343,
	344, 345, 0, 0, 347, 348, 349, 0, 0, 350,
	491, 0, 351, 0, 492, 352, 346, 353, 354, 0,
	356, 357, 358, 359, 0, 360, 361, 493, 362, 494,
	363, 0, 364, 0, 365, 366, 367, 0, 369, 370,
	495, 371, 372, 0, 373, 374, 375, 376, 377, 0,
	379, 380, 381, 378, 382, 383, 384, 385, 0, 386,
	0, 387, 388, 389, 390, 496, 0, 0, 392, 396,
	397, 398, 399, 400, 401, 402, 0, 409, 410, 403,
	405, 406, 407, 404, 408, 411, 412, 0, 413, 393,
	394, 414, 0, 415, 497, 416, 417, 0, 427, 418,
	419, 420, 395, 421, 425, 426, 422, 423, 424, 498,
	0, 429, 430, 428, 0, 431, 432, 433, 434, 435,
	272, 436, 0, 499, 500, 501, 502, 0, 443, 0,
	437, 438, 503, 439, 504, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 450, 452,
	0, 453, 0, 451, 454, 455, 456, 505, 506, 507,
	0, 458, 457, 508, 0, 0, 0, 0, 459, 460,
	509, 461, 462, 463, 1421, 1422, 0, 1454, 1455, 1456,
	1464, 1465, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 1470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 1447,
	1448, 1449, 0, 0, 1423, 0, 0, 0, 1429, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 1471, 0, 0, 0, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 1468, 0, 0, 0, 0, 0, 0, 1438,
	1439, 0, 0, 0, 0, 1446, 1447, 1448, 1449, 0,
	0, 0, 0, 0, 1459, 1429, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	1469, 0, 1471, 0, 0, 0, 1451, 1452, 1453, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 1450, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1445, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464,
	1465, 1466, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 1445, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1423, 1462, 0, 0,
	0, 0, 1460, 0, 1443, 1435, 1436, 1442, 1441, 1437,
	1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430,
	1431, 0, 0, 0, 0, 0, 0, 0, 2788, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 1446, 1447, 1448,
	1449, 0, 1424, 0, 0, 0, 1470, 1429, 0, 1460,
	0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 1423,
	0, 1461, 0, 0, 1471, 2492, 0, 1443, 1451, 1452,
	1453, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 1468, 0, 0, 0, 0, 0, 0, 1438, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 0,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 0, 0, 0, 0, 1469,
	1429, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1461, 0, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 1468, 0, 1450, 0, 0, 0,
	0, 1438, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1445, 0, 1459, 0, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1462,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 1445, 1470, 0,
	0, 1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463,
	0, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	0, 1423, 1462, 0, 0, 0, 0, 2491, 0, 1443,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 1454, 1455,
	1456, 1464, 1465, 1466, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 1423, 0,
	0, 0, 1429, 0, 1460, 0, 1443, 1435, 1436, 1442,
	1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 0, 0, 0, 1461, 0, 0, 1471,
	2488, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 0, 0,
	0, 0, 0, 1438, 1439, 0, 0, 0, 0, 1446,
	1447, 1448, 1449, 0, 0, 0, 0, 0, 1459, 1429,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1461, 1469, 0, 1471, 0, 0, 0,
	1451, 1452, 1453, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 1468, 0, 0, 0, 0, 0, 0,
	1438, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 1450, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 1445, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1423, 1462, 0, 0, 0, 0, 1460, 0, 1443, 1435,
	1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 0, 0, 0,
	0, 0, 2487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 1446, 1447, 1448, 1449, 0, 1424, 0, 0, 0,
	1470, 1429, 0, 1460, 0, 0, 1435, 1436, 1442, 1441,
	1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 1431, 0, 1423, 0, 1461, 0, 0, 1471, 2486,
	0, 1443, 1451, 1452, 1453, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 1468, 0, 0, 0, 0,
	0, 0, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 0, 1469, 1429, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	1450, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	1459, 0, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1462, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465,
	1466, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 1457, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 1445, 1470, 0, 0, 1460, 0, 0, 1435, 1436,
	1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 1423, 1462, 0, 0, 0,
	0, 2032, 0, 1443, 0, 0, 0, 0, 0, 0,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1446, 1447, 1448, 1449,
	0, 0, 1423, 0, 0, 0, 1429, 0, 1460, 0,
	1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	1461, 3375, 0, 1471, 0, 0, 0, 1451, 1452, 1453,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	1468, 0, 0, 0, 0, 0, 0, 1438, 1439, 0,
	0, 0, 0, 1446, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 1459, 1429, 0, 0, 0, 0, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1461, 1469, 0,
	1471, 0, 0, 0, 1451, 1452, 1453, 0, 0, 0,
	0, 0, 0, 1458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 1468, 0, 0,
	0, 0, 0, 0, 1438, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 1450, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1445, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 0, 1462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	1457, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	1445, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1423, 1462, 0, 0, 0, 0,
	1460, 0, 1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440,
	1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0,
	0, 0, 0, 3371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456,
	1464, 1465, 1466, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1457, 0, 1446, 1447, 1448, 1449, 0,
	1424, 0, 0, 0, 1470, 1429, 0, 1460, 0, 0,
	1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 0, 1423, 0, 1461,
	3302, 0, 1471, 0, 0, 1443, 1451, 1452, 1453, 0,
	0, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 1468,
	0, 0, 0, 0, 0, 0, 1438, 1439, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1459, 0, 0, 0, 0, 0, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 1446, 1447,
	1448, 1449, 0, 0, 0, 0, 0, 1469, 1429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1461, 0, 0, 1471, 0, 0, 0, 1451,
	1452, 1453, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 1468, 0, 1450, 0, 0, 0, 0, 1438,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 1459, 0, 0, 0, 0, 0,
	0, 0, 1444, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1462, 0, 0,
	1469, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 1445, 1470, 0, 0, 1460,
	0, 0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434,
	1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 1423,
	1462, 0, 3301, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 0, 1454, 1455, 1456, 1464,
	1465, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 1470, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 0, 1423, 0, 0, 0,
	1429, 0, 1460, 0, 1443, 1435, 1436, 1442, 1441, 1437,
	1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430,
	1431, 0, 0, 0, 1461, 3197, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 1468, 0, 0, 0, 0, 0,
	0, 1438, 1439, 0, 0, 0, 0, 1446, 1447, 1448,
	1449, 0, 0, 0, 0, 0, 1459, 1429, 0, 0,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1461, 1469, 0, 1471, 0, 0, 0, 1451, 1452,
	1453, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 1468, 0, 0, 0, 0, 0, 0, 1438, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1459, 0, 0, 0, 0, 0, 1450,
	0, 1444, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1458, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1421, 1422, 0, 1454, 1455,
	1456, 1464, 1465, 1466, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 1457, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 1445, 1470, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1423, 1462,
	0, 0, 0, 0, 1460, 0, 1443, 1435, 1436, 1442,
	1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 0, 0, 0, 0, 3104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 1446,
	1447, 1448, 1449, 0, 1424, 0, 0, 0, 1470, 1429,
	0, 1460, 0, 0, 1435, 1436, 1442, 1441, 1437, 1463,
	0, 1434, 1432, 1433, 1425, 1426, 1427, 1428, 1430, 1431,
	0, 1423, 0, 1461, 3056, 0, 1471, 0, 0, 1443,
	1451, 1452, 1453, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 0, 1468, 0, 0, 0, 0, 0, 0,
	1438, 1439, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 1469, 1429, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1461, 0, 0, 1471,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 1450, 0,
	0, 0, 0, 1438, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1445, 0, 1459, 0,
	0, 0, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1462, 0, 0, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 1445,
	1470, 0, 0, 1460, 0, 0, 1435, 1436, 1442, 1441,
	1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427, 1428,
	1430, 1431, 0, 1423, 1462, 0, 3055, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	1423, 0, 0, 0, 1429, 0, 1460, 0, 1443, 1435,
	1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 0, 1461, 3054,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 1446, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	1459, 1429, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 1469, 0, 1471, 0,
	0, 0, 1451, 1452, 1453, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 1468, 0, 0, 0, 0,
	0, 0, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 1450, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 1445, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1423, 1462, 0, 0, 0, 0, 1460, 0,
	1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	0, 3021, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 0, 1429, 0, 1460, 0, 0, 1435, 1436,
	1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 0, 0, 1461, 2823, 0,
	1471, 0, 0, 0, 1451, 1452, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 1468, 0, 0,
	0, 0, 0, 0, 1438, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 0, 1470, 0,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1423, 0, 0, 0, 1462, 0, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1457, 0, 0,
	0, 0, 2414, 0, 1424, 0, 0, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 0, 0,
	0, 1423, 1429, 3471, 0, 0, 0, 1460, 0, 1443,
	1435, 1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 1461, 0, 2443, 1471,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 0,
	0, 0, 0, 0, 2415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 0, 0,
	0, 0, 0, 1438, 1439, 0, 0, 0, 0, 0,
	0, 0, 1446, 1447, 1448, 1449, 0, 0, 1459, 0,
	0, 0, 1429, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 1461, 0, 0, 1471,
	0, 0, 0, 1451, 1452, 1453, 0, 0, 0, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 1468, 0, 0, 0,
	3470, 0, 0, 1438, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1459, 0,
	0, 1450, 0, 0, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1445,
	0, 0, 0, 0, 1469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 0, 0, 0, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2123, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 1457, 0, 0, 0,
	2122, 0, 0, 1424, 0, 0, 0, 1470, 0, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1423, 0, 0, 0, 1462, 0, 1460, 0, 1443, 1435,
	1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	1423, 1429, 0, 0, 0, 0, 1460, 0, 1443, 1435,
	1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425,
	1426, 1427, 1428, 1430, 1431, 1461, 0, 0, 1471, 0,
	0, 0, 1451, 1452, 1453, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 1468, 0, 0, 0, 0,
	0, 0, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 1446, 1447, 1448, 1449, 0, 0, 1459, 0, 0,
	0, 1429, 0, 2531, 0, 1444, 2530, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 0, 1461, 0, 0, 1471, 0,
	0, 0, 1451, 1452, 1453, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 1468, 0, 0, 0, 0,
	0, 0, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	1450, 0, 0, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1445, 0,
	0, 0, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 1462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1421, 1422, 0, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 1470, 0, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1423,
	0, 0, 0, 1462, 0, 1460, 0, 1443, 1435, 1436,
	1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 0, 1421, 1422, 0, 1454,
	1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 1470, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 0, 0, 0, 0, 1423,
	1429, 0, 0, 0, 0, 1460, 0, 1443, 1435, 1436,
	1442, 1441, 1437, 1463, 1440, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 1461, 0, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 1468, 0, 0, 0, 0, 0,
	0, 1438, 1439, 0, 0, 0, 0, 0, 0, 0,
	1446, 1447, 1448, 1449, 0, 0, 1459, 0, 0, 0,
	1429, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1469, 0, 1461, 0, 0, 1471, 0, 0,
	0, 1451, 1452, 1453, 0, 0, 0, 1458, 810, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 1468, 0, 0, 0, 0, 0,
	0, 1438, 1439, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1459, 0, 0, 1450,
	0, 0, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1458, 0, 0,
	0, 0, 1462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1462, 0, 1460, 0, 0, 1435, 1436, 1442,
	1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2811, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	1470, 0, 0, 0, 1460, 0, 0, 1435, 1436, 1442,
	1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426, 1427,
	1428, 1430, 1431, 1423, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 1421, 1422, 0,
	1454, 1455, 1456, 1464, 1465, 1466, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1457, 0, 0, 0,
	2532, 0, 0, 1424, 0, 0, 0, 1470, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	1423, 0, 0, 0, 1429, 0, 0, 0, 1443, 2537,
	0, 0, 0, 0, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 1446, 1447, 1448, 1449, 0, 0, 0, 0, 0,
	1459, 1429, 0, 0, 0, 0, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1461, 1469, 0, 1471, 0,
	0, 0, 1451, 1452, 1453, 0, 0, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 0, 1468, 0, 0, 0, 0,
	0, 0, 1438, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1459, 0, 0,
	0, 0, 0, 1450, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 1469, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 1445, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1423, 1462, 0, 0, 0, 0, 1460, 0,
	1443, 1435, 1436, 1442, 1441, 1437, 1463, 1440, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1446, 1447, 1448, 1449, 0, 0, 0,
	0, 0, 0, 1429, 0, 1460, 0, 0, 1435, 1436,
	1442, 1441, 1437, 1463, 0, 1434, 1432, 1433, 1425, 1426,
	1427, 1428, 1430, 1431, 0, 0, 0, 1461, 0, 0,
	1471, 0, 0, 0, 1451, 1452, 1453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 1468, 0, 0,
	0, 0, 0, 0, 1438, 1439, 0, 0, 0, 0,
	1421, 1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 1459,
	0, 0, 0, 0, 0, 0, 0, 1444, 0, 1457,
	0, 0, 0, 2485, 0, 0, 1424, 0, 0, 0,
	1470, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 2499, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1421,
	1422, 0, 1454, 1455, 1456, 1464, 1465, 1466, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 1457, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 1470,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1446, 1447, 1448, 1449, 0, 0,
	0, 0, 1423, 0, 1429, 1462, 0, 0, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1461, 0,
	0, 1471, 0, 0, 0, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 1468, 0,
	0, 0, 0, 0, 0, 1438, 1439, 0, 0, 0,
	0, 0, 0, 1446, 1447, 1448, 1449, 0, 0, 0,
	1459, 0, 0, 1429, 0, 0, 0, 1460, 1444, 0,
	1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 1469, 1461, 0, 0,
	1471, 0, 0, 0, 1451, 1452, 1453, 0, 0, 0,
	0, 1458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 0, 1468, 0, 0,
	0, 0, 0, 0, 1438, 1439, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1459,
	0, 0, 0, 1450, 0, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1458, 0, 0, 0, 0, 0, 1462, 0, 0, 0,
	0, 0, 0, 0, 0, 1642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1654, 1636, 1643, 1626, 1664, 1663, 0,
	1445, 1628, 1627, 0, 0, 0, 0, 0, 0, 1674,
	1675, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 1460, 0,
	0, 1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432,
	1433, 1425, 1426, 1427, 1428, 1430, 1431, 0, 0, 1665,
	0, 1661, 1660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1658, 1656, 1657, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1460, 0, 0,
	1435, 1436, 1442, 1441, 1437, 1463, 0, 1434, 1432, 1433,
	1425, 1426, 1427, 1428, 1430, 1431, 1638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1647, 1641, 1649,
	1651, 1652, 1653, 1648, 0, 1646, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1670, 1671, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1630,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1662, 0, 0, 0, 1639, 0, 1640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1655, 0, 0, 0,
	1623, 1621, 1622, 1625, 1624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1631, 1632, 1634, 1635, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1650, 1633, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1629, 0, 1666,
	1667, 1668, 1669, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1637,
	0, 0, 0, 0, 1644, 1672,
}
var sqlPact = [...]int{

	5173, -1000, -1000, -1000, -1000, -1000, -1000, 241, 238, 234,
	233, 232, 229, 218, 217, 208, -1000, -1000, -1000, 207,
	-1000, -1000, 206, -1000, 205, 203, 201, 199, -1000, 198,
	197, -1000, -1000, -1000, -1000, 194, 193, 192, 49703, 1661,
	60904, 52592, 1641, 2164, 44300, 60487, 43883, 60070, 59653, 191,
	-1000, 59236, 190, 189, 187, -1000, -1000, 186, 1446, 35930,
	182, 181, 166, 1805, 163, 162, -1000, 160, -1000, 7774,
	1237, -1000, 159, 154, -1000, 6579, 381, 51764, 2136, 152,
	151, 35512, 2095, -1000, -1000, 1579, -1000, -1000, 147, 145,
	143, 142, 141, 139, 136, 135, 133, -1000, 129, 128,
	127, 124, 123, 111, 110, 108, 107, 106, 104, 102,
	97, 96, 93, 91, 90, 88, -1000, 7415, 1530, 1375,
	1374, 1373, 1367, 1350, 881, 87, 84, 83, 82, 81,
	79, -1000, -1000, 78, 76, 75, 74, -1000, 73, 72,
	188, 70, 69, 67, 66, 61, 1681, 2158, 1275, 733,
	16827, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 65014, 61315, 60, -69, 59, -1000, 2473,
	907, 29668, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 488, -1000, -1000, -1000, 320, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1616, 689, -1000, -1000, -1000, 58819, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 61315, -1000, 1618, -68, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 688, -1000, 1614, 230, 1526,
	-1000, -1000, -1000, -1000, -1000, 61315, -1000, -1000, 2783, 2781,
	1567, 685, 58408, -1000, 1193, -1000, 808, 19480, -1000, 1032,
	-1000, 19480, 318, -1000, -1000, -1000, -1000, -1000, 43466, 13749,
	43049, 42632, 39725, 57991, 13322, 49292, 1059, -1000, -1000, -1000,
	-1000, -1000, 27, 37163, 61315, -1000, 313, -1000, -1000, -1000,
	-1000, -1000, -1000, 25783, 627, 25330, 529, 24877, 401, -1000,
	-1000, -1000, -1000, 2780, 2779, 953, 2778, 2394, 64603, 1407,
	2777, 1269, 1019, 888, 2776, 2775, 2774, 2772, 2771, 2769,
	2767, 1209, 57574, 2193, 39298, 38871, 49703, 49703, 1926, 57157,
	-1000, -1000, 1091, 1080, -1000, -1000, -1000, -1000, 2271, 2150,
	2114, 48875, -1000, -1000, 2766, 2765, 2755, 2754, 2749, 64192,
	1383, 2745, 1845, 2744, 2740, 2734, 2727, 2726, 2725, 2724,
	2720, 2719, -1000, 48458, 48041, 47624, 47207, 56740, 38444, 38017,
	-1000, -1000, -1000, 31332, 4739, 56323, 32188, 49703, 49703, -1000,
	-1000, 26223, -75, -1000, -1000, -1000, 2149, -1000, 26223, -75,
	-1000, 2189, 1450, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2038, 1316, 2626, 37590, 1559, 1181, 2268, 2238,
	1271, 1793, 2236, 2222, 2217, 2213, 2206, 1257, 1896, 1265,
	1262, 2202, 2180, 2647, 1732, 42215, 2718, 2717, 2441, 2178,
	2145, -1000, -1000, -1000, -1000, 1230, -1000, -1000, -1000, 44711,
	-1000, -1000, 1013, -1000, -1000, 1013, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1057, 63370, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1254, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1622,
	-1000, 1538, -1000, -1000, 2716, 2158, 1796, 2431, 2431, 2431,
	2484, 472, 448, -1000, 188, -1000, -1000, 71278, -1000, -1000,
	26223, 26223, 26223, 26223, 26223, 1447, -1000, 683, -1000, -1000,
	720, -1000, 681, 621, -1000, -1000, -1000, -1000, -1000, -1000,
	680, 2656, -1000, 903, -1000, -1000, -1000, -1000, 2612, -1000,
	15934, -1000, -1000, -1000, 485, 678, 26223, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 306, 846, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 608,
	1348, 605, 605, 605, -1000, -1000, 880, -1000, -1000, -1000,
	323, 602, 298, 601, -1000, -1000, -1000, -1000, 2188, 677,
	675, -1000, 674, 673, 671, -1000, -1000, -1000, 669, 668,
	657, 656, 652, 650, 648, 646, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 879, -1000, 643, 640, 639, 637, 635,
	632, 631, 628, 626, -1000, -1000, 26, 61315, -1000, 488,
	26, -1000, -1000, 623, -1000, 19920, 19920, 19920, -1000, -1000,
	1573, 26223, -1000, 2354, -1000, 607, -194, 788, 30498, -1000,
	28819, 788, 727, 33435, -1000, 2139, -1000, -1000, 622, 288,
	-1000, -1000, 2138, 61315, 14174, 61315, 49703, 49703, -1000, 2345,
	26223, -1000, -1000, 40150, 36752, 61315, 50114, 2546, 71551, 36752,
	61315, 2182, -1000, -1000, -1000, 61315, -1000, 26223, -1000, 2544,
	1183, 8, -1000, -1000, -1000, -1000, -1000, -1000, 1831, 1816,
	993, 1693, 1226, -1000, 19480, 2384, -1000, -1000, -1000, 276,
	14174, -1000, 1806, 2327, 1085, -1000, 1692, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1312, 2325, -1000, 2024, 2324,
	1280, -1000, -1000, 864, 2320, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1504, -1000, -1000, 2432, -1000, -1000,
	1392, 2317, -177, -1000, -1000, 40150, 37163, 20, -1000, -1000,
	0, -1000, 12895, 71278, -1000, -1000, -1000, 71278, 803, -1000,
	-1000, 2313, -1000, 71278, 791, -1000, -1000, 2312, -1000, -1000,
	-1000, 2713, -1000, 2712, 1782, 2711, 2710, 2709, -1000, 1264,
	1340, 2707, -1000, 2706, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 46790, 46373, 886, -1000, 1560, -1000, -1000, 45956, 859,
	1781, -1000, -1000, 1780, -1000, 872, -1000, 2705, 55906, 1962,
	859, 1770, -1000, -1000, -1000, -1000, -1000, 49703, -1000, 49703,
	-1000, 49703, -1000, 1200, -1000, 63781, -194, -1000, -1000, -1000,
	-1000, -1000, 2310, 2702, 2701, 2700, -1000, 61315, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 169, 2309, -1000,
	-1000, 169, 2308, -1000, 169, 2307, -1000, 167, 2306, -1000,
	-1000, 1640, 2305, -1000, -20, 2304, -1000, -1000, -20, 2303,
	-1000, -8, -1000, -1000, -1000, 907, -1000, 30915, 55489, 40150,
	853, 686, 35095, 71278, -1000, 40150, 71278, -1000, 45956, -1000,
	55072, 45545, -1000, -1000, 1102, 1877, -1000, -1000, -1000, -1000,
	40150, 40150, -1000, 54655, -1000, 1551, 1246, 2445, 49703, -1000,
	1386, -1000, -1000, -1000, 2438, 2177, -1000, 36341, 51347, -1000,
	50936, -1000, 50525, -1000, 49703, -1000, 49703, -1000, 2699, 2698,
	2697, 2284, 1378, 1372, 61315, -1000, -1000, 61315, -1000, 61315,
	-1000, -1000, -1000, 1818, -1000, -1000, -1000, -1000, 49703, -1000,
	-1000, -1000, -1000, -1000, -1000, 2176, -1000, 1318, -1000, 1100,
	-1000, -1000, 178, -1000, -1000, 8, -1000, 63370, -1000, -1000,
	2158, 1796, -1000, 61315, -1000, -1000, -1000, 2158, 1571, 1907,
	24424, 1887, 26223, 188, -1000, -1000, 188, 188, 19040, -1000,
	-1000, 71551, 71551, 14174, 1071, 26223, 26223, 26223, 26223, 26223,
	26223, 26223, 26223, 26223, 26223, 26223, 26223, 26223, 26223, 26223,
	26223, 26223, 26223, 26223, 26223, 26223, 26223, 26223, 26223, 26223,
	26223, 26223, 26223, 26223, 26223, 26223, 26223, 26223, 26223, 26223,
	1979, 26223, 1047, 26223, 26223, 26223, 26223, 1757, -1000, -1000,
	1492, 515, 1508, -1000, 2615, 2615, 2615, 5999, 5999, 533,
	2696, 720, -1000, 26223, -1000, -75, 26223, 14601, -1000, 2640,
	1192, -1000, -1000, 448, 9288, 1695, -1000, 445, 15054, -1000,
	-1000, -1000, 15934, 621, 23971, 26223, 876, 71278, 12470, 2201,
	2022, -1000, 2639, -1000, -1000, 2625, -1000, -1000, -1000, -1000,
	2625, 1068, 1067, 2638, -1000, 2625, 2625, 620, 756, 753,
	752, 746, 721, 26223, 26223, 26223, 26223, 26223, 26223, 26223,
	26223, -1000, 23531, 23078, 22625, 27543, 22172, 26223, 16374, 21719,
	21266, 61315, 26, 2543, 26223, 183, -1000, 69816, -1000, 183,
	183, 619, -16, 71278, 1917, 1917, 30083, 1888, 1460, 1460,
	1460, -1000, 614, 701, 55, 46, 43, -1000, -1000, 42,
	38, 788, 9904, 53003, 1475, 788, 788, 267, 310, 443,
	28404, 2354, 53003, -1000, -1000, 49703, 612, 14601, 14174, 1131,
	-23, 248, 1905, 1904, 1903, -1000, 1241, -25, 853, 1044,
	-17, -1000, 421, -27, -1000, 946, -1000, -1000, -1000, -1000,
	153, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 875, 610, 609, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 608, 1348,
	605, 605, 605, -1000, -1000, -1000, 323, 602, 298, 601,
	-1000, -1000, -1000, -1000, -1000, -1000, 2134, 0, 50114, 804,
	-29, 958, 8, -1000, 1013, -1000, 1632, -1000, -1000, -1000,
	-1000, -1000, -1000, 1117, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2652, -1000, 2623, -1000, -1000, 2637, 22, -1000, -1000,
	14174, -1000, 7, 1322, -1000, 41798, 2436, 2434, 2424, 1180,
	-1000, 1150, 2483, 44711, 2521, 2518, 37, -1000, 2133, -1000,
	-1000, 805, 1311, 1043, 44711, 2024, -1000, 71551, -1000, 1989,
	2482, 1170, 1191, 1170, 1170, 1173, -1000, 44711, 1041, 1405,
	40150, -1000, 1036, -1000, 6, 2497, 2517, 21, -1000, 2118,
	1033, -1000, -1000, 49703, 14174, 784, 20, 37163, 61315, 247,
	-1000, 26223, -75, 26223, -75, -1000, -1000, 2302, -1000, -1000,
	-1000, 2695, 1314, 1844, -1000, -1000, -1000, 599, 1768, 2024,
	1764, -1000, -1000, 45128, 2111, 61315, 1908, 11, 49703, -1000,
	-1000, 1400, -1000, 2295, 2294, 604, 2694, -1000, 1556, 1758,
	-1000, -1000, -1000, 62959, 1083, 2290, 870, 137, 2540, 137,
	34265, -1000, 61315, -1000, 61315, -1000, -1000, -1000, 2693, -1000,
	49703, -1000, -1000, 49703, -1000, 49703, -1000, 49703, -1000, 49703,
	49703, -1000, 61315, 40150, 40150, 40150, 4175, 40976, -31, 442,
	-1000, 54244, 61315, 919, 41387, 61315, 2374, -204, 853, 784,
	-1000, 784, -1000, 49703, 2175, -1000, -1000, -1000, -1000, -1000,
	-1000, 2692, 2690, -1000, 857, 49703, 61315, 49703, -1000, -1000,
	61315, -1000, 61315, -1000, -1000, 61315, -1000, 61315, -1000, 61315,
	-1000, -1000, -1000, -1000, -1000, 1208, -1000, 2170, -1000, 2169,
	-1000, 54, -1000, -1000, -1000, -1000, 1701, 49703, 49703, 49703,
	-1000, 44711, -1000, -1000, 2158, -1000, -1000, -1000, -1000, -1000,
	71278, -1000, 479, -1000, -1000, 71278, 1251, 1911, -1000, 1911,
	18, -1000, 69537, 1869, 49703, -1000, -1000, -1000, -1000, -1000,
	800, 458, 458, 1084, 1084, 1084, 1084, 2536, 1069, 334,
	990, 7205, 7205, 7205, 7205, 7205, 7205, 7205, 7205, 434,
	354, 354, 434, 434, 434, 434, 434, 354, 354, 354,
	7205, 7205, 7205, 5999, 9460, 6349, 26223, 26223, 1031, 1489,
	515, 6089, 26223, 6325, 6325, 6325, 6325, -1000, 1785, -1000,
	-1000, -1000, -1000, 2101, 597, 27543, 27543, -1000, -1000, -1000,
	-1000, 15494, 26223, -1000, -1000, -1000, -1000, 20813, -1000, -1000,
	69178, -243, 432, -207, 62, -1000, 26223, 26223, 26223, 431,
	-1000, 430, -1000, -1000, 1027, -1000, 1020, 1018, 1015, -1000,
	596, 246, 26223, 61315, -1000, 66946, 700, -76, -1000, -36,
	1185, -1000, 26223, 244, -1000, 1454, 595, 594, 418, -40,
	-1000, 416, 793, 792, 414, 413, 412, 26223, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 71199, 66664,
	66587, 66305, 8898, 66202, 65920, -41, 411, -1000, 2099, -207,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 407, -1000, 405,
	-1000, 70998, -207, 403, 3943, -1000, 27543, 27543, 27543, -1000,
	402, -1000, 69896, -1000, 70716, 20373, 20373, 20373, 396, 70639,
	26223, -207, -48, -1000, -58, -1000, -1000, 593, -59, 870,
	19920, 29250, 14174, -1000, 870, 870, 26223, -1000, 26223, 1885,
	-1000, -1000, -1000, 1883, 2802, 1917, 30083, -1000, -1000, -1000,
	-1000, 53003, 483, 788, -1000, -1000, -1000, -1000, -1000, 53003,
	-1000, 2612, 2028, -1000, -1000, -1000, 61315, 488, -1000, 53003,
	53003, 14174, 788, -1000, 395, 32603, 62, 243, -1000, -1000,
	14174, 1953, 1953, 1953, -1000, -1000, 2097, 61315, 2581, -1000,
	1364, -1000, 71551, -1000, 715, 1035, -1000, 2634, 589, -1000,
	2625, 2625, 61315, 176, 19480, -1000, 1013, -1000, -1000, 1263,
	-1000, 1328, -1000, 1065, -1000, -1000, -1000, 19480, -1000, 1779,
	61315, 61315, 49703, -1000, -1000, 1736, 62548, 1734, 71551, 61315,
	-1000, -1000, 587, 585, 1863, 1859, 61315, 61315, 62137, 61726,
	61315, 1397, 26223, 1487, 1600, -75, -75, -1000, -1000, -75,
	583, 1092, 49703, 49703, 49703, 1277, -1000, -1000, -1000, -1000,
	-1000, 49703, -1000, -1000, 2633, -1000, 1170, -1000, -1000, -1000,
	1170, 2024, 1276, 49703, 40150, 863, 61315, 1380, -75, -75,
	-1000, -1000, -75, 582, 14174, 1303, -1000, 1984, -1000, -1000,
	-1000, 12045, 71278, -1000, 71278, -1000, 61315, -1000, 885, 61315,
	41387, 848, 2269, -1000, 2024, 2264, 488, -1000, -1000, 33850,
	0, 853, 40150, 49703, 11, 40150, 40150, 40150, 2689, 581,
	2685, -1000, 49703, 2263, 1548, 1731, 2333, 763, 61315, 1484,
	-1000, 26223, 1385, -1000, 33020, 905, 61315, 1261, 100, -1000,
	-1000, -1000, 52, 61315, -1000, 2684, -1000, -1000, 169, 169,
	169, -1000, 167, 1640, -1000, -20, -20, -1000, -1000, 4175,
	853, 10, 580, -1000, 776, 775, 31763, 40150, -60, -1000,
	-1000, -1000, -1000, -1000, 49703, 61315, 667, 1960, 61315, -71,
	-1000, 184, 577, -1000, 853, -1000, -1000, 862, -1000, 1089,
	-1000, -1000, -1000, -1000, -1000, -1000, 0, 0, -1000, -1000,
	-1000, -1000, 1205, 1204, 61315, -1000, 14174, 61315, 49703, 14174,
	49703, -1000, -1000, -1000, -1000, -1000, 1251, -1000, 26223, -1000,
	-1000, -1000, 19040, -1000, -1000, -1000, 49703, -190, 26223, 26223,
	6011, 5672, 26223, 27543, 27543, -1000, 26223, 4354, -1000, -1000,
	-1000, -1000, -1000, 2092, 574, 26223, 71551, 5647, 5511, -1000,
	392, 65843, 434, -1000, 26223, -1000, 390, 18600, -1000, 70175,
	35, -77, -1000, 2649, 1788, 1457, 1335, 1225, 2629, 11620,
	-207, -82, -1000, -1000, 712, -1000, 2275, -1000, 26223, 70255,
	11195, -1000, 34680, 873, 1484, -1000, -1000, 2625, 836, -1000,
	-1000, -1000, 836, -1000, 68896, 71551, 71551, 26223, 26223, -1000,
	26223, 26223, 26223, -1000, -1000, 26223, -1000, -1000, 2076, 26223,
	-1000, 71551, 71551, 27543, 27543, 27543, 27543, 27543, 27543, 27543,
	27543, 27543, 27543, 27543, 27543, 27543, 27543, 27543, 27543, 27543,
	27543, 27543, 1886, 27543, 2604, 2604, 2604, -1000, 2047, 2076,
	26223, 26223, 71551, 388, 387, 386, -1000, 26223, -207, -1000,
	-1000, 4175, -1000, 2012, -1000, -164, -1000, 2354, -1000, -1000,
	2012, 2012, -83, 71278, 30083, 30083, -1000, 572, 26223, 1882,
	-1000, 699, -1000, -88, -1000, 53003, -1000, 697, -241, -1000,
	772, -1000, -1000, -1000, -1000, 488, -1000, -1000, -1000, 179,
	53003, -1000, -92, -1000, 2537, 385, 14174, -1000, -1000, -1000,
	-1000, -1000, -1000, -75, 0, 1525, 2646, -1000, 2628, 708,
	696, 383, 2625, 382, 378, 0, 61315, -1000, 8, -1000,
	-1000, -1000, 26223, -1000, -1000, 2420, 1008, 1005, -1000, 2257,
	-1000, 1728, -1000, 906, -1000, 1305, -1000, 26223, 26223, 549,
	548, 1411, 2682, 2256, 1640, 2255, 1640, -1000, -1000, 829,
	-1000, 71278, 546, 540, -1000, 7, 1319, 861, -1000, -1000,
	26223, 26223, 53829, -1000, 2432, 2432, -1000, 1004, -1000, -1000,
	-1000, 2024, 1002, -1000, -1000, 1369, -1000, -1000, 860, -1000,
	-1000, 26223, -1000, 6, 1000, 853, 2071, -1000, 2681, 2680,
	2679, 375, -93, 1, 71551, 2531, 1561, 61315, 49703, 49703,
	2530, 822, -1000, 2612, -1000, -1000, -1000, -1000, 859, -1000,
	-1000, 2677, -1000, 918, 14174, 49703, 2253, 1838, 763, 40565,
	-1000, 859, 1907, 71278, -1000, 1261, 18147, 2428, -94, -1000,
	-1000, -1000, 870, 34265, 30083, 26223, 2676, -98, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 53418, 53418, 40150, 40150,
	40150, 853, 61315, 61315, 41387, 2675, 539, 61315, 61315, 538,
	-1000, 61315, 61315, 2674, 40150, -1000, -1000, 1513, 49703, -1000,
	-1000, 857, -1000, -1000, 1431, 1682, 1431, 1531, 68819, -1000,
	2417, 14174, 2515, 6325, 26223, 26223, 264, 4992, 4116, 6325,
	26223, 26223, 71551, 4678, -102, 26223, 26223, -1000, 26223, 694,
	71278, 2618, 26223, 374, 372, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 369, -1000, -1000, -1000, -1000, -1000,
	71278, 26223, 168, -1000, -1000, -1000, 65425, -1000, 26223, 366,
	365, -1000, -1000, -1000, 362, 357, 3988, 8576, 68537, 68434,
	68152, 71278, 2047, 71278, -1000, -1000, 780, 780, 1147, 1147,
	1147, 1147, 2604, 272, 528, 473, 446, 446, 446, 670,
	917, 917, 446, 446, 446, 2064, 1814, 537, 6734, -1000,
	-1000, 71278, 71278, 355, -1000, -1000, -1000, -207, 352, 2005,
	2480, -1000, 30083, 2005, 2005, -1000, -1000, 2802, 61315, 71278,
	30083, -194, -1000, 2612, -1000, -1000, 2028, -1000, 10341, -1000,
	14174, -1000, -1000, 32603, -1000, 536, -1000, 101, -1000, -1000,
	-1000, 693, 2672, 705, -1000, 350, -1000, -1000, 0, 71278,
	61315, 61315, 61315, 2248, -1000, 2053, -1000, 68075, -104, -1000,
	69537, 26223, 61315, -1000, 1418, 1909, 942, -1000, 61315, -1000,
	61315, -1000, -1000, 61315, 61315, 49703, 2229, -112, 71278, -2,
	-1000, 769, -1000, -1000, 49703, 49703, 40150, 2223, -113, 14174,
	-1000, 40150, -1000, -1000, -1000, 1928, -1000, 52175, 1496, -75,
	-1000, 2671, 535, 2024, -75, -1000, 1511, -1000, 692, -1000,
	-1000, 534, 61315, 1547, 532, 14174, 1841, 763, 40565, -1000,
	1083, 1261, -1000, -1000, -3, -1000, 559, -75, 1484, -1000,
	-18, 71278, -1000, 767, -1000, -114, -1000, -1000, 342, -1000,
	2372, 2366, -1000, -1000, 26223, 531, 530, 61315, 2363, -1000,
	-1000, -120, 1837, -1000, -1000, -1000, -1000, 14174, 1302, -1000,
	-1000, -1000, -1000, 2417, 6325, 6325, 26223, 26223, 26223, 6325,
	4678, -121, -1000, 6325, 6325, -207, -1000, -1000, 70175, -1000,
	-1000, -1000, 71278, 10770, 1432, -1000, 67793, -1000, -1000, -1000,
	-1000, 26223, 26223, -1000, -1000, -1000, -1000, -1000, 27543, 2056,
	527, 71551, -1000, -1000, 866, 26223, 26223, 2354, 866, 866,
	-1000, -125, -1000, 788, -1000, -1000, -1000, 2612, 101, -1000,
	2668, 14174, 704, -1000, 2663, -1000, -1000, -1000, -1000, 61315,
	-1000, 61315, -1000, 14174, 61315, 2044, 1708, -1000, -1000, 1854,
	516, 27543, 49703, 786, 2004, 1410, 26223, -1000, -132, -133,
	1698, -1000, -1000, 1697, 26223, -1000, 71551, 1640, 1640, -137,
	-139, -1000, 26223, 999, 61315, 17707, -1000, -1000, -1000, 26223,
	996, -1000, -20, 1380, 1992, -1000, -1000, -1000, -1000, 1853,
	-1000, -1000, 61315, 1849, 856, -1000, 41387, 848, -1000, -1000,
	834, -1000, 26223, -1000, 49703, 26223, 1544, -1000, 763, 40565,
	-1000, 2333, -1000, 2340, 61315, 2400, -1000, 1907, 515, -1000,
	853, 514, 512, -143, 26223, 26223, -147, 510, 853, -24,
	-1000, 761, 760, -1000, -1000, 49703, 49703, -1000, 6325, 6325,
	6325, -1000, 332, -1000, -1000, 1484, 2479, -1000, 67690, 67408,
	6913, 27543, 71551, -148, -1000, 61315, 71278, -207, -1000, -1000,
	-1000, 53003, 691, -1000, 2661, -1000, -1000, 1639, -1000, -1000,
	-1000, 61315, 1712, -1000, -1000, 26223, 6734, 509, 26223, -1000,
	-1000, 1924, 2069, 1928, 506, -1000, -1000, -1000, -1000, 1309,
	-1000, -1000, 71278, 2458, -1000, -1000, 505, 503, 71278, 501,
	738, 2055, -1000, 71278, 497, 848, -1000, 1442, 1496, 494,
	-1000, -1000, -1000, 1948, 331, 2528, 834, -1000, 2602, -1000,
	-149, 918, -153, 49703, 40565, -1000, 1838, 1081, -155, 61315,
	1261, -1000, -1000, 40150, 40150, 1410, -159, -160, -1000, 40150,
	-1000, 1837, -1000, 61315, -1000, 61315, -1000, -1000, -1000, 1516,
	26223, -1000, -1000, 6913, -165, -1000, -111, -1000, 2527, -1000,
	-1000, -1000, -1000, -1000, 2244, 67331, 1799, 61315, 67049, 2062,
	-1000, -1000, 1380, 61315, 49703, 913, 14174, 1431, 1431, 26223,
	17267, 1437, 26223, -1000, 49703, 61315, -1000, 2361, 1928, -75,
	-1000, -1000, 1410, 493, 1410, 492, -1000, 1841, 1178, -1000,
	870, -1000, -1000, -166, -167, 1928, 1410, -1000, -174, -1000,
	-175, -181, 330, 27103, 27103, 27103, -207, -1000, 61315, 491,
	2210, -1000, 1534, 1422, 155, 932, -1000, -1000, 2004, -191,
	488, -1000, 26223, -1000, -192, -1000, 899, -197, -1000, 893,
	-198, -1000, 2041, -1000, -206, 486, -208, -1000, -1000, -1000,
	1380, 856, 1928, 26223, 1928, 26223, -1000, 34265, -1000, 853,
	853, 1380, 1928, 853, -1000, -1000, -1000, -1000, -1000, 27968,
	1657, 1247, 69457, -1000, -1000, -1000, -1000, 61315, -1000, 1543,
	1535, 1218, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1799, 71278, -1000, 1431, 1981, -1000, 1431, 2033, -1000, 1424,
	-1000, 61315, -1000, 61315, 848, -1000, 1380, -212, 1380, -217,
	-196, -1000, -1000, -1000, 1380, -1000, 2565, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2348, -1000, 927, 1852, 1852, 1534,
	-1000, 480, -1000, 475, -1000, -219, -1000, -1000, 869, 1410,
	869, 1410, -1000, -1000, 26663, -1000, 2548, -1000, -1000, 1851,
	-1000, 2004, 26223, 26223, 1521, -1000, 2660, 1928, -1000, 1928,
	-1000, -1000, -1000, -1000, -1000, -224, -226, -1000, -1000, -1000,
	-1000, 1380, 1380, 1380, 965, 869, 869, -1000, 459, -1000,
	-1000, 26223, -230, 1380, -1000,
}
var sqlPgo = [...]int{

	0, 3299, 3298, 3297, 3295, 3293, 3289, 3288, 3287, 3286,
	3283, 3282, 3281, 3279, 3278, 3277, 3273, 3272, 3270, 3267,
	3266, 3265, 3264, 3259, 3258, 3257, 3256, 3254, 3252, 3251,
	3249, 3248, 3242, 3241, 3240, 3239, 3238, 3235, 3234, 3233,
	3231, 3230, 3229, 3228, 3226, 3225, 29, 3220, 3217, 3216,
	3214, 3213, 3211, 3210, 3207, 3205, 3202, 3201, 3200, 3199,
	3198, 3196, 3192, 3191, 35, 3188, 208, 3185, 3183, 3182,
	3178, 3177, 3176, 3174, 3171, 3169, 3164, 207, 3159, 133,
	3157, 3156, 3152, 3151, 3146, 206, 3144, 3142, 3140, 3139,
	3138, 3137, 3136, 3133, 3132, 166, 3130, 3120, 3118, 3116,
	3115, 3114, 3113, 3104, 3102, 3101, 189, 3100, 205, 3099,
	3098, 3096, 3089, 3087, 3086, 3083, 3081, 3078, 3077, 3076,
	3075, 3074, 3072, 3069, 3068, 3067, 3065, 3064, 3063, 3062,
	3055, 3054, 3053, 3051, 3049, 209, 141, 3048, 3047, 204,
	201, 3045, 3043, 99, 96, 90, 3041, 94, 171, 188,
	272, 183, 3038, 3037, 3036, 3031, 3030, 64, 137, 135,
	139, 128, 245, 3025, 3010, 65, 62, 36, 30, 100,
	3009, 3006, 3004, 2443, 93, 3003, 3002, 199, 194, 3001,
	829, 3000, 282, 85, 102, 121, 91, 2999, 119, 25,
	2998, 136, 32, 2994, 126, 66, 33, 5363, 6589, 2992,
	80, 213, 76, 234, 160, 159, 161, 153, 130, 268,
	2991, 190, 2990, 58, 150, 2988, 2984, 2980, 61, 146,
	77, 2978, 2, 8, 143, 28, 86, 11, 2972, 27,
	2965, 2960, 2957, 2955, 23, 147, 2954, 116, 67, 2944,
	19, 2943, 14, 168, 2942, 170, 97, 2940, 2939, 195,
	156, 154, 13, 172, 2938, 2933, 2932, 2930, 2928, 98,
	18, 101, 2927, 2926, 107, 184, 2925, 34, 131, 75,
	113, 203, 87, 179, 84, 169, 142, 178, 2922, 2921,
	2919, 173, 2918, 2916, 111, 162, 2910, 2909, 212, 31,
	51, 181, 53, 2908, 2907, 123, 2906, 152, 2905, 2904,
	2903, 211, 134, 157, 5, 68, 95, 26, 7, 180,
	118, 89, 69, 2902, 3493, 1589, 1465, 2900, 110, 81,
	54, 108, 125, 198, 43, 2899, 2898, 1421, 2897, 2896,
	2895, 2894, 144, 2892, 2890, 2887, 112, 38, 74, 2885,
	2884, 122, 63, 17, 88, 200, 83, 165, 167, 192,
	2883, 138, 2881, 92, 109, 2877, 149, 186, 127, 2876,
	230, 129, 2875, 164, 2872, 2871, 2870, 2869, 50, 2868,
	2867, 73, 2865, 117, 2864, 2863, 145, 120, 124, 103,
	40, 2862, 72, 79, 2861, 148, 44, 2860, 1340, 55,
	0, 6482, 5158, 6104, 2859, 1551, 2858, 163, 105, 2855,
	2854, 2852, 71, 2851, 57, 2848, 2847, 37, 2843, 10,
	6, 9, 16, 12, 751, 502, 2841, 2839, 70, 104,
	114, 2831, 202, 176, 2830, 2829, 2821, 59, 2820, 24,
	2819, 21, 2818, 2811, 22, 4, 2809, 2808, 187, 2807,
	185, 2806, 2805, 2546, 2804, 196, 106, 2803, 132, 155,
	2801, 2800, 2798, 2796, 197, 2795, 193, 2794, 15, 20,
	3, 2793, 2792, 2791, 151, 1, 2371, 2789, 2788, 56,
	158, 2787, 2786, 140,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 7, 7, 8, 8, 8, 34, 34,
	10, 10, 9, 9, 9, 11, 11, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 13, 13, 24, 24,
	14, 14, 26, 26, 15, 15, 27, 27, 445, 445,
	18, 29, 19, 30, 12, 446, 446, 446, 446, 22,
	20, 20, 31, 31, 146, 146, 146, 146, 17, 17,
	25, 25, 159, 159, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 444, 444, 161, 161, 160,
	156, 156, 447, 447, 162, 162, 162, 164, 164, 35,
	35, 93, 93, 93, 147, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 81, 81, 388, 388, 389, 389,
	142, 142, 143, 143, 143, 143, 144, 144, 145, 145,
	145, 49, 37, 37, 37, 37, 37, 37, 37, 38,
	38, 38, 38, 39, 39, 39, 39, 39, 39, 40,
	40, 40, 40, 40, 40, 47, 47, 47, 47, 136,
	136, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 452, 452, 453, 453, 454, 454, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 61, 61, 236, 236, 212, 212, 62, 62,
	62, 63, 63, 64, 64, 51, 51, 440, 440, 250,
	250, 355, 355, 66, 66, 67, 67, 67, 67, 67,
	67, 68, 68, 68, 68, 68, 68, 68, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 75, 75,
	75, 76, 76, 76, 73, 73, 73, 71, 71, 71,
	70, 70, 70, 74, 74, 74, 72, 72, 72, 251,
	251, 77, 77, 77, 77, 77, 77, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	357, 357, 78, 78, 78, 325, 325, 82, 82, 82,
	282, 282, 83, 83, 83, 83, 83, 84, 84, 84,
	84, 94, 94, 94, 94, 443, 443, 243, 243, 177,
	177, 177, 177, 89, 89, 89, 89, 90, 90, 90,
	91, 91, 141, 141, 100, 100, 100, 100, 100, 99,
	99, 99, 99, 99, 99, 41, 41, 41, 42, 42,
	43, 43, 44, 44, 45, 45, 46, 46, 46, 46,
	46, 102, 102, 448, 448, 104, 101, 101, 101, 103,
	103, 103, 103, 105, 106, 106, 106, 106, 106, 106,
	107, 107, 382, 382, 258, 258, 380, 380, 396, 396,
	381, 381, 216, 216, 216, 216, 216, 217, 217, 217,
	387, 387, 387, 387, 387, 387, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 126, 126, 126,
	135, 135, 135, 135, 135, 135, 135, 128, 128, 128,
	117, 117, 109, 109, 109, 109, 113, 113, 113, 113,
	113, 110, 110, 119, 119, 119, 119, 114, 114, 116,
	116, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	111, 111, 111, 111, 121, 121, 121, 121, 288, 288,
	288, 120, 120, 340, 340, 131, 131, 131, 131, 131,
	131, 339, 339, 127, 127, 127, 127, 130, 130, 130,
	130, 272, 272, 124, 124, 124, 125, 125, 125, 129,
	129, 132, 132, 132, 132, 112, 112, 112, 457, 457,
	457, 133, 133, 123, 123, 134, 134, 134, 134, 134,
	134, 134, 134, 122, 122, 122, 115, 441, 441, 438,
	438, 438, 438, 438, 438, 438, 439, 439, 442, 442,
	87, 87, 87, 56, 56, 458, 458, 458, 57, 57,
	459, 459, 459, 456, 456, 456, 456, 456, 456, 456,
	456, 218, 218, 219, 219, 306, 306, 306, 306, 306,
	222, 222, 163, 163, 163, 225, 226, 226, 223, 223,
	224, 224, 224, 228, 228, 227, 230, 230, 229, 305,
	403, 403, 405, 405, 405, 405, 405, 405, 405, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 401,
	401, 401, 402, 397, 397, 398, 398, 398, 398, 220,
	220, 221, 221, 221, 221, 399, 400, 241, 241, 343,
	404, 404, 406, 406, 408, 460, 460, 460, 460, 460,
	460, 461, 461, 304, 304, 234, 234, 409, 409, 409,
	409, 410, 410, 410, 410, 410, 413, 412, 411, 411,
	411, 411, 411, 335, 335, 335, 60, 60, 60, 269,
	269, 268, 268, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 138, 138, 58,
	58, 58, 169, 169, 55, 55, 55, 463, 463, 59,
	59, 59, 464, 464, 65, 65, 65, 65, 65, 65,
	54, 54, 54, 54, 54, 465, 465, 289, 289, 287,
	287, 240, 240, 342, 181, 181, 157, 157, 157, 21,
	23, 23, 16, 16, 32, 32, 33, 33, 28, 28,
	449, 449, 450, 450, 88, 88, 92, 92, 92, 98,
	98, 137, 137, 137, 137, 137, 137, 137, 36, 36,
	36, 36, 48, 48, 48, 48, 96, 467, 467, 467,
	97, 97, 466, 466, 176, 176, 176, 176, 178, 178,
	301, 301, 302, 302, 468, 468, 303, 303, 303, 303,
	171, 170, 172, 172, 53, 53, 53, 165, 165, 166,
	166, 167, 167, 168, 168, 469, 469, 85, 85, 85,
	140, 140, 211, 211, 297, 297, 297, 235, 235, 186,
	186, 300, 300, 298, 298, 298, 298, 267, 267, 267,
	139, 139, 248, 248, 260, 260, 261, 261, 352, 352,
	262, 95, 95, 150, 150, 148, 148, 148, 148, 148,
	148, 470, 470, 149, 149, 149, 151, 151, 151, 151,
	151, 151, 151, 154, 154, 154, 154, 155, 155, 155,
	153, 153, 420, 420, 420, 422, 422, 423, 419, 419,
	421, 421, 462, 462, 271, 271, 271, 232, 233, 231,
	231, 238, 238, 237, 239, 239, 341, 341, 341, 265,
	265, 265, 265, 292, 292, 290, 290, 291, 291, 293,
	293, 294, 294, 294, 295, 295, 296, 296, 264, 264,
	321, 321, 152, 152, 152, 245, 245, 245, 246, 246,
	312, 312, 312, 312, 312, 312, 313, 313, 311, 311,
	311, 311, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 345, 345, 247, 247, 346, 299, 299, 436, 436,
	436, 437, 437, 338, 338, 347, 347, 347, 347, 347,
	347, 336, 336, 337, 337, 353, 354, 354, 275, 275,
	275, 275, 273, 273, 276, 276, 276, 276, 274, 274,
	348, 348, 348, 348, 266, 266, 349, 349, 349, 350,
	307, 308, 308, 358, 358, 358, 358, 358, 373, 244,
	244, 244, 244, 244, 471, 471, 359, 359, 359, 359,
	359, 359, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 363, 363, 363, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 372, 372, 372, 372, 372,
	364, 364, 369, 369, 370, 370, 370, 365, 366, 371,
	371, 371, 371, 472, 472, 375, 375, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 361, 361, 361, 368,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 283, 283, 284, 284, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 316, 316, 316, 316, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 414, 414, 414, 414, 414, 414, 414, 414, 417,
	417, 418, 418, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 424, 424, 425, 425, 427, 427, 428, 428,
	429, 430, 430, 430, 431, 432, 432, 426, 426, 433,
	433, 433, 433, 434, 434, 435, 435, 435, 435, 435,
	327, 327, 328, 328, 334, 334, 334, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 179, 179, 179, 179, 179, 256, 256,
	254, 254, 254, 257, 257, 255, 255, 253, 253, 252,
	252, 324, 324, 322, 322, 326, 326, 277, 277, 374,
	374, 374, 374, 374, 374, 374, 278, 278, 278, 286,
	279, 279, 280, 280, 280, 280, 280, 318, 319, 281,
	281, 281, 320, 320, 329, 333, 333, 332, 331, 331,
	330, 330, 309, 309, 310, 310, 263, 263, 473, 473,
	259, 259, 351, 351, 351, 351, 214, 214, 249, 249,
	213, 213, 206, 206, 207, 207, 207, 207, 242, 242,
	376, 376, 376, 377, 378, 379, 323, 196, 195, 183,
	184, 194, 193, 192, 182, 185, 189, 190, 191, 187,
	188, 202, 201, 200, 198, 199, 356, 208, 208, 209,
	209, 209, 210, 210, 210, 210, 180, 180, 203, 203,
	204, 205, 205, 197, 197, 197, 173, 173, 173, 174,
	174, 175, 175, 386, 386, 384, 384, 384, 385, 385,
	385, 385, 383, 383, 383, 383, 383, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
	393, 391, 391, 391, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 391, 392, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 394, 394,
	394, 394, 394, 394, 394, 394, 394, 394, 395, 395,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 0, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 1, 3, 4, 6,
	1, 3, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 9, 6, 9, 6, 5, 6, 5, 1, 1,
	5, 5, 6, 6, 4, 4, 4, 4, 3, 4,
	4, 7, 4, 7, 5, 3, 5, 7, 4, 12,
	4, 12, 1, 3, 5, 5, 2, 5, 3, 6,
	4, 6, 5, 6, 6, 4, 8, 3, 4, 3,
	6, 4, 3, 1, 3, 2, 1, 1, 3, 1,
	3, 2, 2, 0, 1, 1, 0, 2, 0, 7,
	2, 5, 6, 2, 1, 6, 4, 9, 7, 12,
	12, 12, 9, 2, 7, 2, 1, 1, 1, 3,
	3, 0, 3, 1, 3, 1, 1, 3, 2, 5,
	0, 5, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 3, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 3, 5, 3, 6, 6, 6, 3, 1,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	3, 3, 4, 3, 4, 7, 4, 4, 4, 3,
	5, 7, 4, 3, 3, 4, 3, 3, 3, 3,
	3, 2, 0, 1, 0, 1, 0, 3, 3, 3,
	3, 3, 6, 4, 4, 4, 3, 5, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 4, 1, 1, 2,
	1, 2, 7, 3, 2, 0, 1, 3, 3, 1,
	0, 1, 2, 2, 1, 6, 5, 1, 2, 1,
	3, 2, 0, 8, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 6, 3, 1, 1, 2,
	1, 1, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 2, 1, 2,
	1, 3, 5, 7, 2, 3, 0, 3, 5, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 4, 7,
	2, 6, 4, 7, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 5, 4,
	6, 4, 3, 0, 1, 3, 2, 4, 2, 4,
	1, 6, 3, 1, 1, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 1, 3, 2, 1, 3, 1,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 5, 7, 3,
	3, 3, 3, 4, 4, 3, 4, 4, 3, 4,
	4, 5, 3, 5, 5, 5, 3, 3, 3, 4,
	3, 4, 3, 5, 4, 5, 3, 4, 5, 3,
	4, 3, 4, 3, 3, 4, 4, 5, 0, 1,
	1, 3, 4, 1, 0, 5, 4, 6, 4, 6,
	4, 1, 0, 3, 4, 4, 5, 7, 5, 3,
	3, 2, 0, 4, 2, 3, 4, 2, 3, 3,
	3, 4, 3, 3, 3, 3, 4, 3, 1, 1,
	1, 2, 3, 2, 3, 6, 6, 7, 9, 7,
	9, 3, 4, 5, 5, 3, 5, 2, 0, 1,
	1, 1, 1, 3, 2, 2, 2, 1, 2, 0,
	3, 3, 2, 10, 13, 0, 2, 3, 9, 12,
	0, 2, 3, 1, 1, 2, 2, 2, 2, 1,
	0, 1, 0, 1, 3, 1, 1, 1, 1, 3,
	8, 0, 1, 1, 0, 2, 1, 0, 1, 0,
	9, 9, 3, 1, 3, 7, 1, 3, 11, 3,
	2, 0, 3, 1, 2, 2, 3, 2, 6, 2,
	1, 1, 2, 4, 2, 5, 5, 5, 2, 8,
	9, 6, 5, 3, 1, 5, 8, 5, 11, 3,
	0, 2, 4, 3, 3, 1, 5, 1, 3, 1,
	2, 0, 1, 2, 2, 0, 1, 3, 3, 2,
	2, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 5, 8, 4, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 1, 4, 2, 4,
	7, 3, 3, 0, 3, 6, 3, 1, 1, 8,
	7, 5, 0, 1, 6, 7, 6, 5, 3, 4,
	14, 17, 14, 17, 4, 0, 2, 2, 0, 1,
	0, 1, 3, 2, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 0,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 0, 1, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 3, 4, 3, 0, 2, 2, 0,
	10, 3, 2, 0, 1, 3, 1, 1, 3, 3,
	5, 1, 1, 3, 3, 2, 3, 4, 3, 4,
	5, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 4, 2, 5, 3, 2, 0, 1, 3,
	3, 5, 1, 1, 1, 1, 1, 3, 2, 4,
	4, 0, 8, 4, 3, 4, 1, 5, 3, 4,
	5, 1, 5, 1, 3, 2, 0, 3, 0, 2,
	3, 1, 3, 2, 0, 3, 5, 6, 4, 6,
	4, 3, 2, 1, 0, 5, 1, 0, 2, 2,
	2, 1, 1, 0, 1, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 1, 0, 2, 5, 7, 2, 1, 1, 2,
	4, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 5, 4, 1, 2, 1, 4, 1, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 2, 5,
	1, 4, 2, 5, 1, 4, 3, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 1, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 5, 4, 6, 3, 5, 4, 6, 4,
	6, 5, 7, 3, 3, 3, 3, 3, 4, 3,
	2, 4, 2, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	4, 1, 3, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	1, 5, 5, 3, 1, 1, 1, 2, 2, 2,
	4, 3, 5, 6, 8, 6, 5, 4, 3, 4,
	1, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 8, 6, 4, 6,
	6, 6, 4, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 1, 1, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	1, 2, 3, 2, 3, 2, 3, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 1, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 1, 2, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	3, 1, 1, 1, 1, 5, 3, 1, 1, 3,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 7, 1, 7, 5, 3, 1, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 454, -79, -49, -47, -82, -83, -67,
	-81, -84, -78, -94, -98, -88, -100, -137, -3, -35,
	-37, -50, -66, -68, -77, -86, -85, -87, -89, -93,
	-92, -41, -95, -99, -108, -138, -139, -140, 81, 68,
	121, 103, 108, 128, 154, 285, 314, 324, 308, -103,
	-104, 343, -36, -48, -97, -96, -4, -10, 27, 39,
	-38, -39, -40, 53, -58, -55, -52, -61, -451, 83,
	-421, -69, -72, -74, -455, 113, 127, 171, 277, -90,
	-91, 310, 312, -43, -42, 122, -148, -150, -101, -102,
	-141, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, -125, -126, -127,
	-128, -129, -130, -131, -132, -133, -134, 346, 391, 40,
	355, 69, 116, 318, 21, -5, -6, -7, -8, -9,
	-11, -23, -51, -53, -54, -56, -57, -65, -59, -60,
	-420, -70, -71, -73, -75, -76, 309, -151, -149, 451,
	404, -13, -18, -19, -14, -15, -17, -20, -16, -24,
	-29, -30, -26, -27, -25, -28, -31, -32, -33, -34,
	-21, -22, -12, 422, 430, -154, -152, -153, -155, 331,
	412, 369, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, -198, -203, -204, -205, -197, -173, -392, -395,
	4, -390, -393, 133, 179, 246, 21, 22, 23, 24,
	25, 27, 37, 38, 39, 40, 43, 45, 46, 49,
	50, 51, 52, 53, 54, 57, 62, 67, 68, 69,
	70, 71, 76, 73, 74, 75, 78, 80, 81, 82,
	85, 86, 94, 95, 96, 97, 98, 99, 103, 106,
	105, 108, 111, 112, 113, 115, 117, 118, 121, 122,
	125, 123, 375, 124, 126, 127, 128, 129, 139, 140,
	141, 143, 144, 146, 148, 152, 153, 155, 159, 161,
	162, 163, 164, 170, 171, 173, 174, 180, 175, 181,
	185, 188, 187, 189, 190, 191, 182, 196, 200, 201,
	202, 204, 205, 208, 209, 210, 211, 214, 213, 216,
	219, 220, 223, 224, 227, 228, 230, 231, 234, 232,
	235, 233, 236, 239, 237, 238, 241, 242, 244, 243,
	168, 251, 252, 254, 255, 256, 271, 259, 260, 261,
	264, 267, 270, 272, 273, 274, 275, 276, 277, 278,
	280, 281, 283, 285, 287, 289, 290, 291, 292, 293,
	294, 296, 297, 299, 300, 301, 302, 303, 308, 305,
	306, 307, 309, 310, 311, 312, 314, 316, 317, 318,
	319, 321, 323, 344, 345, 357, 324, 325, 326, 327,
	328, 329, 330, 334, 338, 335, 336, 337, 339, 332,
	333, 340, 341, 343, 346, 348, 350, 351, 354, 355,
	356, 358, 361, 362, 363, 359, 360, 353, 368, 366,
	367, 370, 371, 372, 373, 374, 376, 385, 386, 388,
	391, 392, 393, 383, 395, 396, 399, 400, 401, 402,
	403, 408, 404, 406, 409, 410, 411, 417, 416, 423,
	424, 426, 427, 428, 32, 41, 42, 44, 47, 58,
	59, 60, 63, 100, 101, 120, 130, 131, 142, 156,
	158, 165, 166, 167, 186, 192, 194, 198, 217, 249,
	250, 265, 269, 282, 284, 295, 320, 349, 364, 378,
	379, 380, 381, 387, 389, 412, 413, 414, 418, 425,
	257, -191, 2, -173, -173, 285, 26, 2, 26, 281,
	333, 371, 373, 2, 195, 2, -443, -243, 2, 26,
	-177, -173, 83, 154, 331, -191, 2, -443, -243, 24,
	2, -173, 2, -178, 2, 324, -173, 454, 78, 224,
	62, 320, 340, -106, 386, -105, 378, 326, -107, -382,
	2, 239, -173, 454, 454, 454, 454, 2, 369, 274,
	416, 332, 405, 96, 292, 179, -438, 2, 4, -393,
	-390, -207, -206, 369, 96, -205, -197, 444, -204, 454,
	454, 454, 2, 201, 202, 291, 290, 340, 341, 454,
	454, 454, 2, 25, 56, 77, 80, 102, 129, 149,
	152, 262, -452, 231, 271, 289, 326, 339, 368, 376,
	388, -456, 356, 57, 405, -463, 393, 111, -287, 96,
	373, 371, 224, 153, 400, 316, 157, 398, 106, 185,
	403, 402, 454, 454, 25, 56, 65, 80, 111, 129,
	149, 152, -454, 271, 289, 323, 326, 339, 368, 376,
	393, 388, 2, 416, 332, 369, 179, 96, 405, 316,
	288, -79, 2, 451, 29, 343, -147, 369, 195, 2,
	-173, 201, 202, 2, 454, 454, -438, 2, 201, 202,
	2, 57, 328, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	2, -135, 340, 356, 163, 39, 62, 26, 67, 275,
	97, 155, 179, 180, 209, 77, 78, -288, -340, -339,
	370, 327, 333, 366, 386, 83, 406, 317, 428, 293,
	123, 4, 96, 239, 342, 378, 224, 38, 71, -462,
	2, 369, -466, 2, 386, 386, 2, -466, 2, -466,
	2, -176, 2, 386, 382, -467, 386, 425, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	-149, -151, -150, 454, 454, 454, 454, 454, -135, 340,
	2, 62, 26, -470, 147, -237, -238, 397, 193, 119,
	263, -148, -150, 2, -420, -380, 2, -314, -396, -316,
	442, 443, 437, 245, 429, -327, 102, 398, 257, -395,
	-317, -329, 120, 320, -257, 8, 9, 5, 6, 7,
	-180, -360, -323, -368, 390, 132, 248, -210, 456, 10,
	451, -417, -150, -328, 33, 158, 55, -384, -209, -362,
	-370, -366, -367, -471, 45, 51, 50, 376, 238, 334,
	335, 350, 336, 337, 43, 408, 175, 254, 256, 187,
	4, 194, -208, -197, -414, -415, -390, -391, 186, 192,
	188, 349, 189, 190, 191, 42, 295, 143, 144, 142,
	112, 101, 100, 250, 47, 46, 44, 413, -371, 98,
	378, 379, 380, 381, 204, 205, -173, -392, 65, 88,
	89, 87, 92, 91, 93, 90, 342, 405, 56, 32,
	165, 166, 198, 249, 167, 63, -416, 360, 84, 151,
	184, 169, 197, 199, 203, 218, 221, 240, 247, 266,
	268, 315, 347, -472, 414, 130, 131, 269, 282, 364,
	387, 389, 156, 217, 58, 59, -422, 296, -423, -191,
	-422, 454, 454, 455, 454, -231, -232, -233, 2, 26,
	109, 451, 2, -344, 2, 449, -348, -150, 212, -347,
	451, -345, -198, 258, -418, 321, -414, -415, -180, -197,
	-209, 4, -234, 451, 453, 96, 369, 66, 2, -282,
	451, -173, 26, -147, 257, 382, 455, -325, 451, 257,
	150, 260, -173, 2, 2, 344, 2, 451, -106, 60,
	386, -302, 2, -303, -170, -171, -172, -353, 200, 287,
	294, 431, 428, -380, -448, 150, 434, 382, -380, -258,
	453, 2, -348, 165, -198, 2, -195, -383, 4, -390,
	-393, -391, -394, 65, -392, 26, 28, 29, 30, 31,
	33, 34, 35, 36, 48, 55, 56, 61, 64, 66,
	77, 83, 87, 88, 90, 89, 91, 92, 93, 102,
	104, 107, 109, 110, 114, 116, 119, 132, 134, 147,
	149, 150, 154, 157, 160, 172, 183, 193, 195, 212,
	215, 222, 225, 226, 245, 248, 253, 257, 258, 262,
	263, 279, 286, 298, 313, 331, 342, 352, 365, 369,
	377, 382, 384, 390, 397, 398, 405, 407, 415, 419,
	420, 421, 422, -395, 2, -348, 165, 2, -200, 165,
	-348, -203, 2, -388, 165, -386, 10, -385, 5, 4,
	-390, -393, -391, 2, -182, -173, 2, -194, -383, 2,
	-213, 165, -198, -199, -203, 382, 455, -249, -206, -207,
	-242, -173, 453, -314, 2, -95, 2, -314, 165, 2,
	-95, 165, 2, -314, 165, 2, -95, 165, 2, 2,
	2, 388, 2, 80, 165, -173, 369, 95, 2, 307,
	-453, 323, 392, 416, 2, 2, 2, 2, 2, 2,
	2, 369, 332, -464, 296, -187, 2, -173, 147, -388,
	165, 2, -388, 165, 2, -201, -203, -201, 179, 196,
	-182, 165, 2, 373, 371, 373, 371, 150, 2, 195,
	2, 195, 2, -349, 2, -350, -198, 2, 2, 2,
	2, 2, 165, -173, 369, 95, 2, 211, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -251, 165, 2,
	-198, -251, 165, 2, -251, 165, 2, -214, 165, 2,
	-213, -182, 165, 2, -389, 165, 2, -388, -389, 165,
	2, -357, 2, -356, -385, 412, -79, 451, 340, 451,
	-388, -198, -198, -314, -95, 150, -314, -95, 147, 2,
	96, 369, -135, 2, 147, 407, 2, 8, 2, -388,
	293, 139, 2, 344, 2, 62, -288, 428, 150, 2,
	150, 2, -272, 2, 422, -441, 2, 257, 150, 2,
	150, 2, 150, 2, 150, 2, 150, 2, 290, 341,
	202, 385, 210, 124, 150, -272, 2, 150, 2, 150,
	2, 5, 2, 200, 287, 357, 2, -198, -457, 2,
	369, 416, 332, 2, 2, 73, 74, 150, 2, 150,
	428, 2, -266, -348, -301, -302, -301, 382, -178, -470,
	-237, -238, -135, 344, 2, 2, -470, -265, -290, -291,
	222, 134, 253, -271, 26, 109, -271, -271, 49, 452,
	452, 11, 12, 64, 37, 442, 443, 444, 445, 145,
	446, 447, 440, 441, 439, 432, 433, 436, 206, 207,
	79, 435, 434, 72, 229, 322, 135, 136, 137, 138,
	304, 176, 177, 178, 14, 15, 16, 30, 262, 221,
	429, 169, 347, 437, 17, 18, 19, 197, 199, 247,
	41, 172, -179, -215, -314, -314, -314, -314, -314, 268,
	451, -263, -309, 449, -150, 451, 451, 451, 5, 451,
	5, -379, 8, -150, -314, -327, 452, -255, 451, -150,
	-327, -322, 451, 320, 449, 451, -330, -314, 453, -424,
	423, -364, 451, 284, -363, 451, -363, -363, 417, -361,
	451, 430, 424, 451, -361, 451, 451, 147, 451, 451,
	451, 451, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 417, 451, 451, 451, 451, 451, 451, 451, 451,
	451, 455, -422, -234, 451, -259, -351, -314, 444, -259,
	-259, 257, -252, -314, 84, -275, 203, 240, 151, 218,
	315, 184, -379, -80, -66, -77, -85, -95, -108, -139,
	-140, -311, 456, -338, 430, -150, -345, -197, -150, -347,
	451, -344, -338, 444, -198, 451, 150, 451, 453, 150,
	-242, -383, -182, -198, -208, -209, 108, -252, -388, -438,
	-242, -177, 34, -324, -358, -359, -372, -360, -369, -365,
	-368, 300, 301, 299, 303, 302, 45, 51, 50, 376,
	238, 334, 335, 350, 336, 337, 43, 408, 175, 254,
	256, 187, 4, 44, 413, -371, 194, 186, 192, 188,
	349, 189, 190, 191, 42, 295, 143, 144, 142, 112,
	101, 100, 250, 47, 46, 98, 378, 379, 380, 381,
	204, 205, 414, 360, 58, 59, -438, -242, 147, -382,
	-252, 34, -302, 2, -468, 455, 220, -217, 228, 244,
	162, 258, 426, 251, -387, 5, 4, -323, -335, 102,
	224, -368, 9, 443, -376, 8, 442, -381, -380, 86,
	453, -383, -159, 305, -158, 23, 27, 113, 410, 125,
	-224, 181, 274, 120, 353, 401, -445, -446, 325, 374,
	375, 75, 251, 305, 120, -268, -270, 34, 94, 242,
	270, 52, 173, 233, 234, 355, 418, 120, 305, 422,
	120, -446, 305, -446, -161, 353, 401, -445, -446, 325,
	305, -160, -224, 120, 456, -388, -249, 455, 455, -383,
	444, 120, 120, 120, 120, 2, 2, 245, 2, 2,
	2, 152, -456, -454, 2, 2, 2, -198, 165, -200,
	165, 2, -203, 416, -236, 257, -440, -250, 369, -198,
	-169, -419, 422, 245, 245, 34, 451, 2, -184, 165,
	2, -174, -173, 179, -419, 245, -349, -211, -198, -211,
	343, -191, 34, -311, 120, 2, 2, 2, -173, -162,
	455, 54, 311, 120, -162, 120, -162, 120, -162, 455,
	120, -162, 120, 455, 120, 120, 452, 455, -357, -388,
	-145, 422, 150, 83, 451, 451, -147, -389, -440, -182,
	2, -198, 2, 369, 204, -388, -388, -382, 26, 345,
	2, 290, 341, 74, -198, 369, 96, 179, 68, -442,
	147, -439, 316, -438, -198, 96, -198, 96, -198, 96,
	-198, -198, 2, 2, 2, 147, 2, 385, 2, 385,
	2, -173, -173, -173, 220, -198, 147, 369, 179, 369,
	-162, 455, -178, -470, -265, -382, -470, -291, -290, -293,
	-314, 26, -296, 141, 241, -314, -316, -149, -149, -149,
	-239, -341, -314, 286, 179, -373, -358, -358, -196, -383,
	378, -314, -314, -314, -314, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, -314, -314, -314, -314,
	-314, -314, -314, -314, -314, -314, 221, 169, 347, 41,
	172, -314, 382, -314, -314, -314, -314, 237, 245, 248,
	390, 132, 399, 109, 251, -473, 365, 36, -320, -150,
	-256, 451, -334, 31, 352, 26, -327, 451, 2, -309,
	-314, -310, -253, -252, -252, 452, 415, 26, 109, 444,
	2, 8, -283, -285, 427, 236, 99, 164, 235, -284,
	330, 452, 455, 34, 452, -314, -253, -326, -322, -252,
	-333, -332, 419, -383, 444, -425, 140, 157, 8, -377,
	8, -377, 378, 378, 8, -377, -377, 451, 452, 2,
	452, 2, 452, 2, 452, 2, 452, 2, -314, -314,
	-314, -314, -314, -314, -314, -252, -277, 2, -374, -252,
	4, 427, 236, 99, 164, 235, 330, -277, 2, -278,
	2, -314, -252, -279, -315, -316, 442, 443, 437, -327,
	-280, 2, -314, -253, -314, 48, 215, 384, -281, -314,
	150, -252, -252, 2, -252, 2, -423, 34, -252, -245,
	455, 150, 34, 4, -245, -245, 451, 452, 455, -276,
	161, 232, 227, -276, -344, -275, 203, -273, 266, -273,
	-273, -436, 451, 450, 454, 454, 454, 454, 454, -338,
	-183, 449, 457, -383, -337, -336, 34, -191, 264, -338,
	-338, 453, 452, -337, -198, 451, -252, -383, 358, 452,
	453, 197, 197, 197, 321, 452, -145, 382, 422, -79,
	259, 452, 455, -244, 33, 449, -285, 451, -375, 417,
	451, 451, 150, -243, -448, 452, 386, -303, -216, 294,
	351, 306, 338, 367, 9, 8, 8, 455, -383, 455,
	-449, 77, 382, 66, -305, 165, 66, -397, -185, 77,
	-398, -173, 61, 398, 286, 149, -449, 77, -449, 77,
	77, 343, 356, 49, -348, 37, 37, 26, -95, 216,
	150, 428, 369, 179, 382, -348, -270, -358, 94, 233,
	234, 49, -378, -376, 443, -378, 49, -378, -378, -378,
	422, -200, -348, 382, 276, -388, 382, 455, 37, 37,
	26, -95, 216, 150, 382, -213, -183, -354, -353, -206,
	-173, 453, -314, -95, -314, -95, 120, 2, -464, 211,
	451, -220, 245, -269, -268, 245, -202, 2, -198, 150,
	-242, -355, 195, 455, -250, 276, 120, 120, 451, 117,
	292, 2, 257, 245, -184, 165, -165, 372, 120, -308,
	-307, 420, -297, -95, 451, 102, 34, -297, -260, -261,
	-352, -262, -185, 451, -191, -173, 2, -198, -251, -251,
	-251, -213, -214, -182, -388, -389, -389, -79, -356, 452,
	452, -144, 261, -143, -173, 5, -147, 407, -219, -306,
	-305, -401, -402, -397, 221, 179, 398, 196, 133, -235,
	-186, -185, 95, -145, -353, -145, -354, -354, -198, 147,
	2, 2, -272, -198, -182, -213, -242, -242, -182, -182,
	-182, 340, 147, 147, 453, -272, 292, 96, 369, 274,
	179, -198, -213, -198, -348, -470, -294, -376, 451, -295,
	320, 321, 455, -157, 35, 107, 208, -198, 428, 118,
	-314, -314, 382, -473, 365, -320, 118, -314, 237, 248,
	390, 132, 399, 109, 251, 150, 451, -315, -315, 452,
	-254, -314, -314, 450, 459, 452, -238, 455, -237, -314,
	-252, -252, 452, 452, 382, 382, 382, 382, 451, 453,
	-252, -242, 450, 450, 455, 452, -331, -332, 114, -314,
	453, -430, 267, 451, 451, 452, 452, 455, 452, 428,
	428, 452, 452, 452, -314, 34, 455, 455, 455, 452,
	455, 455, 455, 452, 452, 150, 452, 452, -286, 279,
	452, 11, 12, 442, 443, 444, 445, 145, 446, 447,
	440, 441, 439, 432, 433, 434, 72, 229, 322, 14,
	15, 16, 197, 172, -315, -315, -315, 452, -318, -319,
	150, 147, 34, -281, -281, -281, 452, 150, -252, 452,
	452, 451, 452, -308, -351, -246, 2, -344, -193, -383,
	-308, -308, -252, -314, 203, 203, -274, 407, 257, -276,
	-344, -336, 452, -437, -379, -338, -337, -379, -313, -312,
	148, 35, 107, 243, 168, -191, -234, -337, -337, -383,
	-338, 452, -247, -346, -418, -238, 453, -383, -136, 5,
	248, -136, -136, 150, -242, 24, 280, -358, 449, 450,
	8, 8, 451, -377, -377, -242, 150, -380, -302, 396,
	70, 294, 378, -380, -158, 305, -185, -185, -198, 245,
	-305, 165, -164, 245, -358, -192, -173, 451, 451, 208,
	208, -185, -192, 165, -185, 165, -192, -192, -444, 294,
	252, -314, 223, 292, 246, -159, 305, -95, -95, -95,
	451, -448, 407, 108, -198, -213, -202, 305, -208, -378,
	-378, -268, 305, -200, -388, 422, -182, -160, -95, -95,
	-95, 451, -183, -161, 305, -142, 174, 444, -173, 416,
	-173, -218, -221, -219, -185, -458, 424, 422, 120, 120,
	-234, -212, -198, 449, -145, -388, -198, -388, -388, -388,
	2, 451, 2, -198, 120, 257, 245, -166, 115, -469,
	434, -182, -238, -314, -267, -300, 313, 257, -235, 412,
	-191, -267, -248, 455, 150, 434, 453, -235, 2, -162,
	-162, -162, -162, -162, -79, -145, 455, 451, 434, 434,
	451, -388, -388, 452, 455, -198, -184, 179, 179, -190,
	-174, 452, 455, 453, 451, -145, -44, 422, 369, 340,
	340, -173, -194, -182, -198, -195, -213, -295, -314, -341,
	-198, 456, -314, -314, 118, 118, -314, -315, -315, -314,
	118, 150, 451, -314, -324, 30, 30, 452, 455, -310,
	-314, 452, 415, -238, -238, 452, 5, 236, 164, 235,
	-284, 235, -284, -284, 8, 444, -383, 452, -322, 116,
	-314, 377, -383, 444, -431, -188, 451, -173, 420, -237,
	-377, -361, -361, 452, -373, -358, -314, -314, -314, -314,
	-314, -314, -318, -314, -373, -358, -315, -315, -315, -315,
	-315, -315, -315, -315, -315, -315, -315, -315, -315, -315,
	-315, -315, -315, -315, -315, 109, 245, 251, -315, -319,
	-318, -314, -314, -358, 452, 452, 452, -252, -79, -264,
	157, -354, 455, -264, -264, 452, -344, -344, 451, -314,
	203, 450, 452, 455, -337, 450, 455, 458, 434, -234,
	453, -336, 452, 455, -299, 34, 452, -383, -95, 260,
	5, 8, 449, 450, 452, -377, 452, 452, -242, -314,
	382, 382, 120, 245, 409, -403, -398, -314, -240, -342,
	-314, 451, 451, -156, 113, 343, -450, 2, 120, -162,
	120, -162, 426, 451, 451, 382, 422, -252, -314, -146,
	102, -382, -446, -446, 382, 382, 276, 422, -252, 382,
	-145, 150, 2, 2, 2, 452, 452, 455, -404, 34,
	255, -173, -198, -200, 34, -62, 422, -353, -379, -169,
	2, -289, 407, -183, -198, 120, -167, 214, -469, -386,
	-419, -292, -290, -267, -259, 246, 76, 452, -308, -261,
	-246, -314, 2, 452, -143, -144, -388, -388, -388, -145,
	-147, -147, -306, 2, 451, -184, -174, 451, -147, -186,
	2, -389, 261, -198, -272, -226, -225, 274, 251, -226,
	258, 452, -157, -183, -314, -314, 118, 30, 30, -314,
	-314, -324, 452, -314, -314, -252, 450, 5, -314, 452,
	452, 452, -314, 453, -432, -173, -314, 452, 452, 452,
	452, 455, 455, 452, 452, 452, 452, -319, 150, 109,
	251, 451, 452, 452, -321, 160, 49, -344, -321, -321,
	-274, -242, -344, -311, -379, -312, -183, 449, -383, -346,
	451, 453, 450, 2, 449, 452, -185, -185, -305, 120,
	-405, 77, -407, 64, 133, 83, 245, 248, 398, 286,
	61, 102, 298, 34, 452, 452, 455, -157, -240, -242,
	245, 362, 102, 245, 102, 95, 393, -185, -192, -242,
	-242, -198, 126, 452, 455, 434, -202, -200, -388, 126,
	452, -183, -389, -222, 182, -185, -402, -399, -400, 286,
	-406, -408, 133, 286, -95, 2, 451, -220, -269, -95,
	261, 450, 451, -173, 257, 451, -183, -168, 213, -469,
	-386, -165, -267, -298, 451, 257, -95, -238, 434, 452,
	452, 95, 95, -240, 451, 451, -242, 95, 452, -45,
	-46, 179, 77, 278, -195, 369, 179, -157, -314, -314,
	-314, 452, -238, -383, 444, -426, 274, 452, -314, -314,
	-315, 150, 451, -324, -427, 421, -314, -252, -427, -427,
	452, -338, -379, 2, 449, 2, -305, -192, -196, -189,
	-173, 133, 165, 248, 208, 451, -315, -198, 451, 2,
	-460, 104, 183, -304, -461, 82, 363, -342, 452, 452,
	248, 248, -314, -358, -162, -162, 452, 452, -314, 382,
	-382, 81, -380, -314, 382, -223, -224, 172, -404, 208,
	-189, 208, -459, 422, -218, -458, -63, -64, 383, -353,
	-240, -198, -240, 257, -469, -386, -166, 110, -242, 77,
	-292, -320, -145, 451, 451, 452, -240, -240, 452, 451,
	-145, 455, 26, 451, 26, 451, -198, -213, 452, -238,
	49, 452, 452, -315, -324, 452, -428, -429, -188, -337,
	450, 2, -407, -189, 245, -314, -175, 451, -314, 183,
	105, 170, -222, 451, 298, -181, 64, 451, 451, 451,
	434, 150, 451, -458, 272, 451, 95, 242, 452, 34,
	-64, 9, 452, -289, 452, -198, -386, -167, 402, 246,
	452, -192, -267, -389, -389, -304, 452, 452, -389, -46,
	-242, -242, -433, 292, 321, 159, -252, 452, 455, 34,
	120, 452, -409, 230, -173, 452, 105, 170, -223, -242,
	-198, -447, 407, -196, -228, -227, -225, -230, -229, -225,
	-252, -380, 81, 272, -252, -198, -241, -343, -185, 95,
	-222, -95, -304, 451, -304, 451, -168, 343, -307, 452,
	452, -222, -304, 452, 452, 452, 452, -434, -435, 41,
	395, 86, -314, -434, -434, -429, -431, 133, -410, -413,
	-412, 257, 348, 151, 273, 452, 362, 418, -460, 452,
	-234, -314, 452, 455, 412, 452, 455, 412, 452, 150,
	452, 451, 452, 455, -223, -459, -222, -240, -222, -240,
	-260, -145, -145, -223, -222, -145, -435, 283, 146, 320,
	283, 146, -189, -412, 257, -413, 257, 402, 106, -409,
	-227, 172, -229, 150, 272, -242, -343, -458, -223, 452,
	-223, 452, -308, -223, 30, -411, 242, 311, 54, 343,
	-411, -410, 451, 451, 452, -465, 420, -304, -465, -304,
	-435, 22, 248, 102, -460, -252, -252, -163, 54, 311,
	2, -222, -222, 452, 452, -223, -223, -223, 382, -465,
	-465, 451, -252, 452, -223,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 357, 358,
	360, 361, 362, 364, 365, 367, 369, 371, 373, 374,
	376, 378, 379, 380, 381, 382, 384, 386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 444,
	446, 0, 901, 903, 905, 907, 27, 28, 0, 0,
	182, 184, 186, 0, 211, 213, 215, 216, 218, -2,
	0, 311, 312, 314, 316, -2, -2, 0, 0, 433,
	435, 0, 0, 455, 456, 0, 991, -2, 449, 451,
	453, 516, 518, 520, 522, 524, 526, 528, 529, 531,
	533, 535, 537, 539, 541, 543, 545, 547, 549, 551,
	553, 555, 557, 559, 561, 563, 565, -2, -2, -2,
	0, -2, -2, -2, 919, 31, 33, 35, 37, 39,
	41, 60, 267, 268, 270, 272, 274, 277, 278, 280,
	1030, 318, 320, 322, 324, 326, 0, -2, 1042, 0,
	0, 43, 44, 45, 46, 47, 48, 49, 50, 67,
	68, 69, 70, 71, 72, 73, 74, 53, 55, 56,
	62, 63, 65, 0, 0, 1006, 1008, 1010, 1012, -2,
	0, 0, 7, 9, 11, 13, 15, 17, 19, 21,
	23, 359, 363, 366, 368, 370, 372, 375, 377, 383,
	385, 387, 796, 1634, 1648, 1649, 1650, 1653, 1654, 1655,
	1656, 1657, 1658, 1988, 2068, 2069, 1677, 1678, 1679, 1680,
	1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690,
	1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	0, 411, 409, 1628, 412, 1824, 414, 416, 305, 306,
	307, 308, 309, 310, 0, 165, 0, 426, 420, 425,
	427, 429, 430, 431, 432, 406, 404, 0, 426, 1680,
	424, 899, 900, 894, 895, 1857, 929, 445, -2, -2,
	-2, 1957, -2, 477, -2, 484, 1960, 1859, 487, 0,
	489, -2, 492, 902, 904, 906, 29, 30, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 150, -2, -2,
	-2, -2, 0, 0, 1715, 1604, 1650, 1607, 1602, 183,
	185, 187, 188, 0, 0, 0, 0, 0, 0, 212,
	214, 217, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 244, 0, 0, 0, 0, 0, 0, 0,
	0, 852, 0, 0, 0, 0, 0, 0, 0, 0,
	703, 704, 0, 0, 709, 847, 848, 869, 0, 0,
	0, 0, 313, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	245, 351, 352, 0, 1031, 0, 0, 0, 0, 163,
	154, 0, 0, 692, 434, 436, 0, 153, 0, 0,
	898, 0, 0, 450, 452, 454, 517, 519, 521, 523,
	525, 527, 530, 532, 534, 536, 538, 540, 542, 544,
	546, 548, 550, 552, 554, 556, 558, 560, 562, 564,
	566, 567, 0, 0, 0, 0, -2, -2, 0, 0,
	-2, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, -2, -2, 0, 0, 0, -2, -2, 0, 0,
	0, 570, 572, 573, 574, 0, 620, 623, 631, 0,
	838, 1032, 931, 909, 922, 931, 911, 912, 913, 914,
	915, 920, 921, 924, 0, 916, 917, 918, 32, 34,
	36, 38, 40, 42, 269, 271, 273, 275, 279, 281,
	-2, 1004, 1005, 319, 321, 323, 325, 327, 437, 0,
	439, 0, 571, 995, 0, -2, 0, 1036, 1036, 1036,
	0, 0, 1005, 1003, 0, 442, 443, 496, 497, 1267,
	0, 0, 0, 0, 0, 1502, 1351, 0, 498, -2,
	1382, 1384, 1936, 1957, 1501, 1386, 1387, 1388, 1389, 1390,
	0, 0, 1393, 0, 1395, 1396, 1397, 1398, 0, 1400,
	0, 1404, 1405, 1406, 0, 1941, 1581, 1646, -2, 1172,
	1173, 1174, 1175, 1176, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1642, 0, 1473, 1420, -2, 1667, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1724, -2, -2, -2, -2, -2, -2, -2, 1228, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1971, 1424,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 0, 1925,
	1942, 1943, 1948, 1950, 1944, 1933, 1443, -2, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1229, -2, 1937, 1938, 1953, 1954, 1959,
	1964, 1965, 1940, 1949, -2, -2, 1022, 1832, 1025, 796,
	1023, 1007, 1009, 0, 1011, 0, 0, 0, 1016, 1039,
	1037, 0, 1073, 1020, 1021, 1031, 1091, 1114, 0, 1096,
	0, 1114, 1140, 0, 1101, 1852, 1421, 1422, 0, 1650,
	1647, -2, 0, 0, 0, 0, 0, 0, 208, 407,
	0, 413, 415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 447, 448, 0, 472, 0, 476, 1932,
	-2, -2, 480, 932, 936, 937, 938, 939, 0, 0,
	0, 0, 0, 486, 0, 0, 473, 474, 490, 493,
	0, 51, 0, 1942, 1140, 52, 0, 1618, 1672, 1673,
	1674, 1675, 1676, 1971, 1987, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,
	2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
	2064, 2065, 2066, 2067, 54, 0, 1942, 57, 0, 1942,
	0, -2, 61, 0, 1942, 166, 167, 1663, 1664, 1668,
	1669, 1670, 1671, 64, 0, 1624, 66, 0, 1621, 75,
	0, 1942, 0, 1601, -2, 0, 0, 684, 1598, 1603,
	685, 1608, 0, 189, 190, 191, 192, 193, 1942, 195,
	196, 0, 198, 199, 1942, 201, 202, 0, 204, 220,
	221, 0, 223, 0, 1942, 0, 0, 0, 229, -2,
	246, 0, 243, 0, 233, 234, 236, 237, 238, 239,
	240, 0, 0, 0, 853, 285, 283, 1629, 0, -2,
	1942, 841, 844, 1942, 846, 858, 1632, 0, -2, 0,
	1029, 1942, 946, 705, 706, 707, 708, 0, 304, 0,
	959, 0, 961, 0, 981, 1146, 1091, 247, 248, 249,
	250, 251, 1942, 0, 0, 0, 256, 0, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 146, 1942, 330,
	349, 146, 1942, 333, 146, 1942, 336, 146, 1942, 339,
	1596, 146, 1942, 342, 343, 1942, 345, 168, 346, 1942,
	348, 0, -2, 400, 1636, -2, 354, 0, -2, 0,
	180, 0, 0, 690, 691, 0, 896, 897, 0, 457,
	0, 0, 568, 569, 0, 0, 579, 580, 581, 582,
	1830, 1739, 585, 0, 588, -2, 0, 0, 0, 592,
	0, 596, 597, 598, 0, 689, 600, 0, 0, 602,
	0, 606, 0, 609, 0, 611, 0, 613, -2, -2,
	-2, 0, 0, 0, 0, 639, 640, 0, 645, 0,
	648, 649, 650, 0, 652, 653, 654, 655, 0, 657,
	658, -2, -2, 662, 664, 0, 671, 0, 675, 0,
	575, 576, 146, 1144, 908, -2, 910, 0, 926, 998,
	-2, 0, 438, 0, 441, 1002, 996, 1001, 1051, 1052,
	0, 0, 0, 0, 1034, 1035, 0, 0, 0, 993,
	994, 0, 0, 0, 0, 1507, 1508, 1509, 1510, 1511,
	1512, 1515, 1516, 1513, 1514, 1517, 1518, 0, 0, 0,
	0, 0, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1520, 1521, 1522, 0, 0, 1524,
	0, 1526, 0, 0, 0, 0, 0, 0, 1330, 1332,
	1589, 0, 0, 1523, 1272, 1273, 1274, 1309, 1310, 0,
	0, 1383, 1586, 1585, 1385, 0, 1538, 0, 1392, 0,
	1264, 1399, 1615, -2, 0, 1502, 1533, 0, 0, 1407,
	1408, 1409, 0, 0, 1538, 0, 0, 1580, 0, 1475,
	0, 1208, 0, 1209, 1210, 0, 1211, 1212, 1225, 1238,
	0, 0, 0, 0, 1242, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1230, 0, 0, 0, 1561, -2, 0, 0, 0,
	0, 0, 1024, 0, 0, 1077, 1590, 1594, 1595, 1077,
	1077, 0, 0, 1539, 1137, 1137, 0, 0, 1133, 1133,
	1133, 1131, 1108, 0, 388, 390, 392, 394, 395, 396,
	398, 1114, 0, 1124, 0, 1114, 1114, 0, -2, 1096,
	0, 0, 1124, 1141, 1142, 0, 0, 0, 0, 0,
	0, 1651, 0, 0, 0, 1638, 0, 0, 180, 0,
	418, 428, 1031, 0, 1541, 1163, 1157, 1166, 1167, 1168,
	1169, 1215, 1216, 1217, 1218, 1219, 1177, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
	1191, 1192, 1193, -2, 1226, 1228, 1249, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1221, 0,
	1196, 1196, 1196, 1213, 1214, 1237, 1248, 1240, 1248, 1244,
	1164, 1165, 1231, 1232, 1233, 1234, 0, 422, 0, 0,
	0, 0, -2, 482, 0, 934, 0, 940, 507, 508,
	509, 942, 943, 0, 485, 510, 511, 512, 513, 514,
	515, 0, 813, 0, 815, 1610, 0, 483, 500, 488,
	0, 494, 76, 891, 112, 0, 891, 891, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 100, 108, 88,
	89, 0, 0, 0, 0, 58, 821, 0, 824, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 99, 0, 94, 78, 0, 0, 0, 102, 110,
	0, 137, 139, 0, 0, 1127, 683, 0, 0, 1651,
	1606, 0, 0, 0, 0, 222, 224, 0, 226, 227,
	228, 0, 852, 0, 235, 232, 276, 770, 1942, 820,
	1942, 818, 1633, 0, 0, 0, 302, 297, 0, 299,
	839, 0, 1028, 0, 0, 0, 0, 859, 0, 1942,
	864, 1620, 1659, 1660, 948, 0, 1152, 0, 962, 0,
	0, 1147, 0, 1149, 0, 253, 254, 255, 0, 328,
	0, 144, 145, 0, 331, 0, 334, 0, 337, 0,
	0, 340, 0, 0, 0, 0, 1031, 0, 0, 0,
	156, 0, 0, 0, 0, 0, 0, 180, 180, 1127,
	459, 1127, 461, 0, 0, 583, 584, 586, 587, 589,
	590, -2, -2, 672, 642, 0, 0, 0, 641, 599,
	0, 677, 1848, 687, 601, 1715, 604, 1715, 607, 1715,
	610, 612, 615, 634, 622, 0, 626, 0, 628, 0,
	630, 642, 643, 646, 651, 656, 0, 0, 0, 0,
	837, 0, 925, 999, 1001, 440, 997, 1049, 1050, 1055,
	1059, 1060, 1063, 1066, 1067, 1057, 1267, 1017, 1018, 1019,
	1043, 1044, 878, 0, 2068, 1268, 1158, 1269, 1270, 1617,
	0, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, -2, -2, -2, -2, -2, -2, -2, -2, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	-2, -2, -2, 1307, 1308, -2, 1525, 1527, 0, 1589,
	0, -2, 0, -2, -2, -2, -2, 1327, 0, 1329,
	1334, 1336, 1338, 0, 0, 0, 0, 1588, 1348, 1572,
	1573, 0, 0, 1504, 1505, 1506, 1333, 0, 1352, 1587,
	1584, 0, 0, 1537, 1042, 1411, 0, 0, 0, 0,
	1418, 0, 1616, 1263, 1250, 1251, 1252, 1253, 1254, 1255,
	1265, 1403, 1535, 0, 1534, 0, 0, 0, 1545, 0,
	1579, 1575, 0, 1639, 1645, 1483, 0, 0, 0, 0,
	1613, 0, 0, 0, 0, 0, 0, 0, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1455, 0, 1548,
	-2, -2, -2, -2, -2, -2, -2, 0, 1457, 0,
	1459, 1539, 1558, 0, 0, 1353, 0, 0, 0, 1502,
	0, 1462, 1539, 1566, 0, 0, 0, 0, 0, 1539,
	0, 1571, 0, 1469, 0, 1471, 1026, 0, 0, 1152,
	0, 0, 0, 1593, 1152, 1152, 0, 1072, 0, 0,
	1134, 1135, 1136, 0, 0, 1137, 0, 1128, 1132, 1129,
	1130, 0, 0, 1114, 389, 391, 393, 397, 399, 1124,
	1088, 0, 0, 1619, 1094, 1123, 0, 796, 1113, 1124,
	1124, 0, -2, 1098, 0, 0, 1042, -2, 181, 795,
	0, 0, 0, 0, 408, 410, 0, 0, 0, 402,
	0, 405, 0, 1153, 1156, 0, 1170, 0, 0, -2,
	0, 0, 0, 0, 0, 475, 0, 933, 941, 0,
	504, 0, 506, 0, 814, 1612, 1611, 0, 495, 0,
	0, 0, 0, 890, 116, 1942, 0, 148, 0, 0,
	764, 1625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 90, 0,
	0, 0, 0, 0, 0, 0, 822, 823, 825, 831,
	833, 0, 827, 1614, 0, 828, 0, 830, 832, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 91, 0, 0, 0, 0, 1600, 171, 1126, 1599,
	1609, 0, 194, 197, 200, 203, 0, 230, 0, 0,
	712, 695, 0, 816, 819, 0, 796, 851, 1631, 0,
	284, 180, 0, 0, 298, 0, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 1942, 950, 956, 0, 1042,
	1151, 0, 979, 964, 0, 0, 0, 979, 983, 984,
	986, 987, 0, 0, 1148, 0, 257, 350, 146, 146,
	146, 1597, 146, 146, 169, 344, 347, 353, 401, 1031,
	180, 178, 1810, 176, 173, 175, 0, 0, 0, 713,
	715, 716, 717, 718, 0, 1660, 0, 1768, 1660, 0,
	967, 969, 0, 151, 180, 296, 458, 463, 577, 0,
	617, 636, 591, 593, 594, 595, 688, 686, 603, 605,
	608, 625, 0, 0, 0, 638, 0, 0, 0, 0,
	0, 673, 674, 676, 1145, 1000, 0, 1061, 0, 1058,
	1064, 1065, 0, 1046, 876, 877, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 1349, 0, -2, 1328, 1331,
	1335, 1337, 1339, 0, 0, 0, 0, 0, 0, 1528,
	0, 1530, 1350, 1582, 1585, 1500, 0, 0, 1041, 1042,
	1042, 0, 1417, 0, 0, 0, 0, 0, 0, 0,
	1536, 0, 1543, 1544, 0, 1410, 0, 1576, 0, 0,
	0, 1419, 0, 0, 0, 1220, 1194, 0, 1248, 1246,
	1247, 1241, 1248, 1245, 0, 0, 0, 0, 0, 1438,
	0, 0, 0, 1442, 1454, 0, 1456, 1458, 0, 0,
	1460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1356, 1357, 1358, 1461, 1564, 1565,
	0, 0, 0, 0, 0, 0, 1467, 0, 1570, 1468,
	1470, 1031, 1074, 1069, 1591, 1127, 1076, 1078, 1592, 1622,
	1069, 1069, 0, 1540, 0, 0, 1118, 0, 0, 0,
	1120, 0, 1109, 0, 1111, 1124, 1093, 0, 0, 1086,
	0, 1082, 1083, 1084, 1085, 796, 1122, 1095, 1099, 1639,
	0, 1143, 0, 1103, 1106, 0, 0, 1652, 205, 209,
	210, 206, 207, 0, 417, 0, 0, 1542, 0, 1159,
	0, 0, 0, 0, 0, 421, 0, 471, -2, 502,
	503, 505, 0, 501, 113, 891, 0, 0, 882, 0,
	118, 1942, 127, 0, 741, 0, 1623, 0, 0, 0,
	0, 893, 0, 1942, 146, 1942, 146, 129, 132, 0,
	136, 134, 0, 0, 732, 77, 891, 80, 84, 92,
	0, 0, 0, 98, 0, 0, 884, 0, 826, 829,
	835, 59, 0, 886, 880, 0, 879, 138, 82, 86,
	93, 0, 888, 79, 0, 180, 0, 1605, 0, 0,
	0, 0, 0, 711, 781, 0, 0, 0, 0, 0,
	0, 290, 286, 0, 295, 301, 300, 842, -2, 845,
	854, 0, 856, 868, 0, 0, 0, 952, 956, 0,
	955, 1029, 1054, 1150, 957, 979, 0, 0, 0, 966,
	963, 960, 1152, 0, 0, 0, 0, 0, 252, 329,
	332, 335, 338, 341, 355, 155, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 0, 0, 1660, 1660, 0,
	1627, 0, 0, 0, 0, 152, 460, 0, 0, 627,
	629, 642, 665, 666, 727, 0, 727, 0, 0, 1045,
	878, 0, 1271, 1312, 0, 0, -2, 0, 0, 1316,
	0, 0, 0, -2, 0, 0, 0, 1529, 1531, 0,
	1584, 1412, 0, 0, 0, 1416, 1394, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 0, 1401, 1402, 1503, 1546, 1574,
	1578, 0, 1640, 1644, 1481, 1482, 1486, 1630, 0, 0,
	0, 1239, 1243, 1423, 0, 0, 0, 0, 0, 0,
	0, 1547, 1557, 1559, 1354, 1355, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, -2, -2, -2, 1372,
	1373, 1374, -2, -2, -2, 0, 0, 0, 1560, 1562,
	1563, 1567, 1568, 0, 1464, 1465, 1466, 1569, 0, 1071,
	0, 1075, 0, 1071, 1071, 1038, 1116, 0, 0, 1139,
	0, 1091, 1110, 0, 1100, 1089, 0, 1090, 0, 1121,
	0, 1097, 1102, 0, 1105, 0, 1412, -2, 164, 419,
	403, 0, 0, 1161, 1171, 0, 1223, 1227, 423, 1125,
	0, 0, 0, 0, 147, 739, 763, 0, 0, 871,
	878, 0, 0, 120, 0, 0, 0, 128, 0, 125,
	0, 131, 135, 0, 0, 0, 0, 0, 95, 96,
	97, 0, 101, 103, 0, 0, 0, 0, 0, 0,
	149, 0, 225, 850, 231, 721, 769, 0, 771, 0,
	696, 0, 770, 820, 0, 282, 0, 289, 0, 840,
	855, 0, 0, 0, 0, 0, 954, 956, 0, 947,
	948, 979, 1053, 958, 977, -2, 976, 0, 1042, 985,
	982, 988, 989, 0, 177, 0, 172, 174, 0, 158,
	0, 0, 714, 719, 0, 0, 0, 0, 0, 968,
	970, 0, 0, 578, 637, 667, 726, 0, 0, 669,
	1056, 1062, 1047, 878, 1314, 1318, 0, 0, 0, 1320,
	-2, 0, 1342, -2, -2, 1532, 1583, 1391, 1042, 1413,
	1415, 1266, 1577, 0, 1488, 1485, 0, 1472, 1195, 1433,
	1434, 0, 0, 1437, 1439, 1440, 1441, 1556, 0, 0,
	0, 0, 1463, 1027, 1477, 0, 0, 1079, 1477, 1477,
	1117, 0, 1119, 1114, 1112, 1087, 1080, 0, 1640, 1104,
	0, 0, 1154, 1160, 0, 1222, 114, 115, 117, 0,
	740, 0, 743, 0, 0, 0, 0, 750, 751, 0,
	0, 0, 0, 0, 785, 794, 0, 873, 0, 0,
	0, 122, 141, 0, 0, 892, 0, 146, 146, 0,
	0, 883, 0, 0, 0, 0, 885, 887, 881, 0,
	0, 889, 170, 729, 0, 781, 773, 774, 775, 0,
	780, 782, 0, 0, 700, 697, 712, 695, 817, 849,
	0, 287, 0, 867, 0, 0, 0, 944, 956, 0,
	949, 950, 303, 0, 0, 0, 965, 1054, 0, 179,
	180, 0, 0, 0, 0, 0, 0, 0, 180, 462,
	464, 0, 0, 470, 725, 0, 0, 1048, 1322, -2,
	-2, 1343, 0, 1641, 1643, 1042, 0, 1474, 0, 0,
	-2, 0, 0, 0, 1013, 0, 1070, 1068, 1014, 1015,
	1138, 1124, 0, 1107, 0, 1162, 119, 0, 744, 745,
	1626, 747, 0, 749, 752, 0, 754, 1662, 0, 758,
	765, 786, 0, 721, 0, 791, 792, 872, 767, 0,
	121, 123, 140, 875, 124, 130, 0, 0, 81, 0,
	0, 1709, 105, 83, 0, 695, 728, 0, 772, 0,
	783, 784, 698, 0, 0, 0, 288, 291, 0, 294,
	0, 868, 0, 0, 0, 951, 952, 0, 0, 0,
	979, 990, 157, 0, 0, 794, 0, 0, 762, 0,
	162, 0, 466, 0, 468, 0, 668, 670, 1414, 1492,
	0, 1435, 1436, -2, 0, 1380, 1476, 1478, 0, 1092,
	1081, 1155, 742, 746, 0, 0, 800, 0, 0, 0,
	789, 790, 729, 0, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 693, 0, 0, 701, 0, 721, 0,
	292, 293, 794, 0, 794, 0, 953, 954, 0, 972,
	973, 975, 980, 0, 0, 721, 794, 761, 0, 465,
	0, 0, 0, 0, 0, 0, 1487, 1381, 0, 0,
	0, 753, 805, 0, 0, 0, 787, 788, 785, 0,
	796, 126, 0, 874, 0, 733, 0, 0, 736, 0,
	0, 106, 1709, 104, 0, 0, 0, 777, 779, 702,
	729, 700, 721, 0, 721, 0, 945, 0, 974, 180,
	180, 729, 721, 180, 467, 469, 1484, 1489, 1493, -2,
	1905, 1712, 0, 1490, 1491, 1479, 1480, 0, 755, 801,
	802, 0, 797, 798, 799, 1661, 756, 757, 766, 793,
	800, 142, 730, 0, 0, 731, 0, 0, 109, 0,
	111, 0, 776, 0, 695, 699, 729, 0, 729, 0,
	1152, 159, 160, 759, 729, 161, 0, 1495, 1496, 1497,
	1498, 1499, 748, 803, 0, 804, 0, 0, 0, 805,
	734, 0, 737, 0, 107, 0, 778, 694, 865, 794,
	865, 794, 971, 760, 0, 806, 0, 809, 810, 0,
	807, 785, 0, 0, 724, 860, 0, 721, 862, 721,
	1494, 808, 811, 812, 768, 0, 0, 720, 722, 723,
	866, 729, 729, 729, 0, 865, 865, 735, 0, 861,
	863, 0, 0, 729, 738,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 440, 3, 446, 441, 3,
	451, 452, 444, 442, 455, 443, 453, 445, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 459, 3,
	432, 434, 433, 436, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 449, 3, 450, 447, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 457, 439, 458, 437,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 435,
	57775, 438, 57776, 448, 57777, 454, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1054
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1059
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1063
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1064
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1065
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1075
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1090
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1091
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1093
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1147
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1148
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1159
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1174
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1178
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1182
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1193
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1205
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1224
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1257
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1261
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1265
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1271
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1275
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1281
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1290
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1301
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1305
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1311
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1319
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1329
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1333
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1343
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1354
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1361
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1373
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1380
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1388
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1393
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1397
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1402
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1408
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1416
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 101:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1425
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1437
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1445
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1456
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1460
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1464
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1468
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1474
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1479
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1490
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1494
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1500
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1504
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1511
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1516
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1521
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1526
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1531
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1536
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1541
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1546
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1551
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1556
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1570
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1582
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1592
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1599
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1602
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1609
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1618
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1632
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1639
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1647
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1662
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1670
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1674
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1680
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1684
		{
			sqlVAL.union.val = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1691
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1695
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1699
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1705
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1709
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1735
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1738
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1761
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1765
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1768
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1772
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1809
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1814
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1818
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1824
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1829
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1834
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1839
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1844
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1848
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1864
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1867
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1871
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1875
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1883
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1893
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1897
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1903
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1907
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1911
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1915
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1921
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1931
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 179:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1935
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1939
		{
			sqlVAL.union.val = nil
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1945
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1958
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1959
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1960
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1961
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1971
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1979
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1981
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1984
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1994
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2003
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2011
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2013
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2017
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2020
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2030
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2047
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2049
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2053
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2056
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2060
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2064
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2068
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2089
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2094
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2107
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2109
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2110
		{
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2111
		{
			return helpWith(sqllex, "CREATE")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2114
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{
			return unimplemented(sqllex, "create cast")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2116
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2118
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2119
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2120
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2121
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2122
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2123
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2124
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2125
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2126
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2127
		{
			return unimplemented(sqllex, "create operator")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2128
		{
			return unimplemented(sqllex, "create publication")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2129
		{
			return unimplemented(sqllex, "create rule")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2130
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2131
		{
			return unimplemented(sqllex, "create server")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2132
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2133
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2134
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2137
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2138
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2141
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2142
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2145
		{
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2146
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2149
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2150
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2151
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2152
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2154
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2155
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2156
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2157
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2158
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2159
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2161
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2162
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2163
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2164
		{
			return unimplemented(sqllex, "drop server")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2165
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2166
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2167
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2168
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2172
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2173
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2174
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2175
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2177
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2178
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2179
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2180
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2190
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2198
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2202
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2206
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2212
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2216
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2225
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2232
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2238
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2244
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2248
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2259
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2271
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2279
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2287
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2297
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2301
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2307
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2318
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2322
		{

			sqlVAL.union.val = nil
		}
	case 303:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2336
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2346
		{
			return helpWith(sqllex, "DELETE")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2353
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2356
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2357
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2358
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2359
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2360
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2369
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2370
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2371
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2372
		{
			return helpWith(sqllex, "DROP")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2375
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2376
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2377
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2378
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2379
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2387
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2391
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2394
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2402
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2406
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2409
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2417
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2421
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2424
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2432
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2440
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2447
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2455
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2463
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2470
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2478
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2482
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2485
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2493
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2497
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2500
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2504
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2509
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2532
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2535
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2537
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2541
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2545
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2552
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2556
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2559
		{
			return helpWith(sqllex, "DELETE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2561
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2562
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2563
		{
			return helpWith(sqllex, "INSERT")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2564
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2566
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2567
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2570
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2575
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2576
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2577
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2582
		{
			return helpWith(sqllex, "DELETE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2583
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2584
		{
			return helpWith(sqllex, "INSERT")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2586
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2590
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2591
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2595
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2609
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2617
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2625
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2629
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2633
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2643
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2650
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2658
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2662
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2666
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2676
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2680
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2684
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2688
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2691
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2711
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2715
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2719
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2722
		{
			return helpWith(sqllex, "GRANT")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2742
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2746
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2750
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2753
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2758
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2762
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2772
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2790
		{
			return helpWith(sqllex, "RESET")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2791
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2799
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2803
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2806
		{
			return helpWith(sqllex, "RESET")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2814
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2817
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2828
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2831
		{
			return helpWith(sqllex, "USE")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2835
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2836
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2837
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2838
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2842
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2843
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2844
		{
			return helpWith(sqllex, "USE")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2860
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2875
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2878
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2896
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2904
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2908
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2912
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2928
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2932
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2936
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2944
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2955
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2958
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2968
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2984
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2988
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2993
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3013
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3015
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3022
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3041
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3048
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3054
		{
			return unimplemented(sqllex, "set from current")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3055
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3063
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3068
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3075
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3085
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3089
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3096
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3117
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3121
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3127
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3131
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3135
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3139
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3143
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3149
		{
			sqlVAL.union.val = tree.Low
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3153
		{
			sqlVAL.union.val = tree.Normal
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3157
		{
			sqlVAL.union.val = tree.High
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3168
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3172
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3176
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3181
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3185
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3200
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3201
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3202
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3203
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3205
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3206
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3207
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3208
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3209
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3210
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3211
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3212
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3213
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3214
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3215
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3216
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3217
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3218
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3219
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3220
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3221
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3222
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3224
		{
			return helpWith(sqllex, "SHOW")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3231
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3232
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3233
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3244
		{
			sqlVAL.str = "client_encoding"
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3247
		{
			sqlVAL.str = "timezone"
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3248
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3262
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3266
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3270
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3281
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3289
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3297
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3304
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3312
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3319
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3329
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3333
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3338
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3349
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3352
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3360
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.unresolvedObjectName().String(), IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3364
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].str, IsDB: true}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3368
		{
			sqlVAL.union.val = &tree.ShowPartitions{Object: sqlDollar[5].union.newTableIndexName().String(), IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3371
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3379
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3382
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3395
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3403
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3411
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3414
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3416
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3420
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3424
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3429
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3436
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3444
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3447
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3449
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3452
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3460
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3463
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3465
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3468
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3472
		{
			sqlVAL.union.val = true
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3474
		{
			sqlVAL.union.val = true
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3476
		{
			sqlVAL.union.val = false
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3484
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3487
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3490
		{
			sqlVAL.union.val = true
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3491
		{
			sqlVAL.union.val = false
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3500
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3503
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3505
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3508
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3510
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3514
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3517
		{
			sqlVAL.union.val = true
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3518
		{
			sqlVAL.union.val = false
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3529
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3531
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3534
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3542
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3552
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3562
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3565
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3568
		{
			sqlVAL.union.val = true
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = false
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3576
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3580
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3583
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3590
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3594
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3597
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3604
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3608
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3616
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3621
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3626
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3630
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3642
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3646
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3659
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3662
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3670
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3673
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3677
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3681
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3685
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3693
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3701
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3708
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3715
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3719
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3730
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3735
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3738
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3742
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3749
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3754
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3874
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3878
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3882
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3921
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3925
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3930
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3934
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3943
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3950
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3954
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3966
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3975
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3978
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4014
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4026
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4039
		{
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4040
		{
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4041
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4045
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4056
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4068
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4069
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4070
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4084
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4085
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4086
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4087
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4088
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4089
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4090
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4091
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4096
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4102
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4106
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4112
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4118
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4121
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4125
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4134
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4141
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4146
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4151
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4157
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4164
		{
			sqlVAL.str = ""
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4171
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4177
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4184
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4191
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4197
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4201
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4207
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4227
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4241
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4256
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4262
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4266
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4270
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4274
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4278
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4282
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4286
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4304
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4308
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4312
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4316
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4320
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4324
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4328
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4338
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4342
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4346
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 759:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4353
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4363
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4375
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4385
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4397
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4402
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4408
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4414
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4425
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4435
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4449
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4453
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4459
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4469
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4480
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4484
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4491
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4518
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4524
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4528
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4534
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4538
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4544
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4549
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4550
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4551
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4552
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4553
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4554
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4571
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4575
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4581
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4585
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4605
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4609
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4613
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4617
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4626
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4630
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4634
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4638
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4642
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4648
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4654
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4662
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4666
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4670
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4674
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4678
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4684
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4688
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4694
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4713
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4718
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4722
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4726
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4729
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4733
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4734
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4736
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4737
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4738
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4741
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4743
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4745
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4747
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4748
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4750
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4751
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4753
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4755
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4766
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4774
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4778
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4781
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4785
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4789
		{
			sqlVAL.union.val = nil
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4799
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4803
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4806
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4811
		{
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4812
		{
		}
	case 849:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4820
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4828
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4829
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4832
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4833
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4839
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 855:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4841
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4843
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4845
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4847
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4849
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 860:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4865
		{
			table := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4879
		{
			table := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
//line sql-gen.y:4894
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
//line sql-gen.y:4908
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4922
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4925
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4926
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4930
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4945
		{
			sqlVAL.union.val = false
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4951
		{
			sqlVAL.union.val = true
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4955
		{
			sqlVAL.union.val = false
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4961
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4974
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4985
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4986
		{
			sqlVAL.str = ""
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4990
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4994
		{
			sqlVAL.union.val = tree.Descending
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4998
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 879:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5004
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5011
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5015
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5021
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5027
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5035
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5041
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5049
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5055
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5063
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5067
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5072
		{
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5073
		{
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5076
		{
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5077
		{
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5085
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5088
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5098
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5107
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5110
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5118
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5121
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5125
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5126
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5127
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5143
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5146
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5148
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5151
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5161
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5164
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5166
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5169
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5173
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5178
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5179
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5180
		{
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5188
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5195
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5198
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5199
		{
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5203
		{
			sqlVAL.str = ""
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5207
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5211
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5215
		{
			sqlVAL.str = ""
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5221
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5225
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5231
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5235
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5241
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5245
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5258
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5260
		{
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5264
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5269
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5273
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5277
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5283
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5289
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5295
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5299
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 944:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5309
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5319
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5329
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5333
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 948:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5337
		{
			sqlVAL.str = ""
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5343
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5347
		{
			sqlVAL.str = ""
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5353
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 952:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5357
		{
			sqlVAL.str = ""
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5367
		{
			sqlVAL.str = ""
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5372
		{
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5373
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5385
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5392
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5399
		{
			return helpWith(sqllex, "INSERT")
		}
	case 960:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5410
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5417
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5421
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5430
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5437
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5441
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5445
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5451
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5455
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5475
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 971:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5479
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5483
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5489
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5492
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5493
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 976:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5495
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5501
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5506
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 979:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5510
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 980:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5527
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5539
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5542
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5545
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5551
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5555
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5568
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5571
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 990:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5575
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5618
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5624
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5628
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5643
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5647
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5651
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5655
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5659
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5663
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5668
		{
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5669
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5674
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5709
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5710
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5711
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5733
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5746
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5772
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5785
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5794
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5809
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5816
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5828
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5832
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5836
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5840
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5850
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5858
		{
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5859
		{
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5863
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5867
		{
			sqlVAL.union.val = nil
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5872
		{
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5873
		{
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5877
		{
			sqlVAL.union.val = true
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5881
		{
			sqlVAL.union.val = false
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5885
		{
			sqlVAL.union.val = false
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5891
		{
			sqlVAL.union.val = true
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5897
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5902
		{
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5903
		{
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5907
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5911
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5917
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5923
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5927
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5933
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5937
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5942
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5957
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5966
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5977
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5981
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5990
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5996
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6003
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6010
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6019
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6027
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6033
		{
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6034
		{
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6037
		{
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6038
		{
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6055
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6059
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6065
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6069
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6088
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6091
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6093
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6105
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6108
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6110
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6116
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6120
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6126
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6130
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6135
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6140
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6146
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6151
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6158
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6163
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6174
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6178
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6182
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6190
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6221
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6235
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6245
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6253
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6262
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6266
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6270
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6281
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6311
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6321
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6323
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6327
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6333
		{
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6335
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6338
		{
			sqlVAL.union.val = nil
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6339
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6340
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6344
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6354
		{
			sqlVAL.union.val = true
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6358
		{
			sqlVAL.union.val = false
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6378
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6382
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6386
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6390
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6394
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6398
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6404
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6408
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6415
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6421
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6428
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6434
		{
			sqlVAL.str = tree.AstFull
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6438
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6442
		{
			sqlVAL.str = tree.AstRight
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6446
		{
			sqlVAL.str = tree.AstInner
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6452
		{
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6453
		{
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6474
		{
			sqlVAL.str = tree.AstHash
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6478
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6482
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6486
		{
			sqlVAL.str = ""
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6503
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6509
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6510
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6511
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6515
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6520
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6534
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6538
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6544
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6552
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6562
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6569
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6581
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6594
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6602
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6603
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6611
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6617
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6624
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6625
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6627
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6635
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6647
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6648
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6665
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6669
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6673
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6677
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6681
		{
			sqlVAL.union.val = types.String
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6685
		{
			sqlVAL.union.val = types.Name
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6689
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6706
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6710
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6714
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6718
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6722
		{
			sqlVAL.union.val = types.INet
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6726
		{
			sqlVAL.union.val = types.Oid
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6730
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6734
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6738
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6769
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6777
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6785
		{
			sqlVAL.union.val = nil
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6792
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6800
		{
			sqlVAL.union.val = types.Int2
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6804
		{
			sqlVAL.union.val = types.Int2
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = types.Int4
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6812
		{
			sqlVAL.union.val = types.Int
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6816
		{
			sqlVAL.union.val = types.Int
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6820
		{
			sqlVAL.union.val = types.Int
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6824
		{
			sqlVAL.union.val = types.Float4
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6828
		{
			sqlVAL.union.val = types.Float4
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6832
		{
			sqlVAL.union.val = types.Float
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6836
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = types.Float
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6844
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6852
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6860
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6868
		{
			sqlVAL.union.val = types.Bool
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6872
		{
			sqlVAL.union.val = types.Bool
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6879
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6883
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6887
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = types.RegType
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6901
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6914
		{
			sqlVAL.union.val = types.Float
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6920
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6926
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6934
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6938
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6942
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6948
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6966
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6970
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6974
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6978
		{
			sqlVAL.union.val = types.String
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6987
		{
			sqlVAL.union.val = true
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = false
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6993
		{
			sqlVAL.union.val = types.Date
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6997
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7002
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7009
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7010
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7012
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7020
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7036
		{
			prec := sqlDollar[3].union.int32()
			if !(prec == 6 || prec == 0) {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7045
		{
			sqlVAL.union.val = true
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7046
		{
			sqlVAL.union.val = false
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7047
		{
			sqlVAL.union.val = false
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7051
		{
			sqlVAL.union.val = types.Interval
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7057
		{
			sqlVAL.union.val = tree.Year
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7061
		{
			sqlVAL.union.val = tree.Month
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7065
		{
			sqlVAL.union.val = tree.Day
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7069
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7073
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7077
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7083
		{
			sqlVAL.union.val = tree.Month
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7087
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7091
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7095
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7099
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7103
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7107
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7114
		{
			sqlVAL.union.val = nil
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7120
		{
			sqlVAL.union.val = tree.Second
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7123
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7147
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7151
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7155
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7159
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7170
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7175
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7179
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7183
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7187
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7191
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7195
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7199
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7203
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7207
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7211
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7215
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7219
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7223
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7227
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7239
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7243
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7251
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7255
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7259
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7263
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7267
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7271
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7275
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7279
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7283
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7287
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7291
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7295
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7303
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7414
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7416
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7420
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7424
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7428
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7448
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7452
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7456
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7460
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7464
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7468
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7472
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7476
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7480
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7502
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7514
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7518
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7522
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7526
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7530
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7546
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7550
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7554
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7558
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7582
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7586
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7590
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7594
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7598
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7602
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7606
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7610
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7614
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7618
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7622
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7636
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7696
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7701
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7703
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7707
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7710
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7720
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7724
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7728
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7737
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7744
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7748
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7752
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7757
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7761
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7765
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7769
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7776
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7787
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7788
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7790
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7796
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7803
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7814
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7821
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7830
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7831
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7850
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7858
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7862
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7880
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7884
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7888
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7892
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7896
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7900
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7904
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7908
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7912
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7923
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7926
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7931
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7933
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7936
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7938
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7941
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7943
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7946
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7948
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7951
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7953
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7956
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7958
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7961
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7963
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7967
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7970
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7971
		{
			return unimplemented(sqllex, "treat")
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7973
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7977
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7981
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7985
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7992
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7994
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7997
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8002
		{
			return unimplemented(sqllex, "within group")
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8003
		{
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8007
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8018
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8022
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8038
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8081
		{
			sqlVAL.str = ""
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8087
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8091
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8102
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8109
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8123
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8129
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8142
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8174
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8178
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8189
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8205
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8209
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8216
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8228
		{
			sqlVAL.union.val = tree.Any
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8232
		{
			sqlVAL.union.val = tree.Some
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8236
		{
			sqlVAL.union.val = tree.All
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8241
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8242
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8244
		{
			sqlVAL.union.val = tree.Div
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8245
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8246
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8247
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8249
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8251
		{
			sqlVAL.union.val = tree.LT
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8252
		{
			sqlVAL.union.val = tree.GT
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8253
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = tree.LE
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8255
		{
			sqlVAL.union.val = tree.GE
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8256
		{
			sqlVAL.union.val = tree.NE
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8260
		{
			sqlVAL.union.val = tree.Like
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8263
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8290
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8296
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8315
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8319
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8325
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8329
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8336
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8342
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8352
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8356
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8362
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8366
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8372
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8382
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8386
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8412
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8429
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8433
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8450
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8462
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8466
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8472
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8478
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8484
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8488
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8492
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8498
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8510
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8533
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8544
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8550
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8554
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8567
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8576
		{
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8577
		{
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8581
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8585
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8591
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8600
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8604
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8608
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8616
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8620
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8626
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8630
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8649
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8657
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8680
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8689
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8693
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8701
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8707
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8719
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8723
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8732
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8743
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8752
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8760
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8857
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8864
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8868
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8872
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8886
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8890
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8894
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8907
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8925
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8938
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8945
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8970
		{
			sqlVAL.str = ""
		}
	case 1661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8976
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8980
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
