// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:24
package parser

import __yyfmt__ "fmt"

//line sql.y:24
import (
	"fmt"
	"strings"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:56

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: tblDef().
//
func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) normalizableTableNames() tree.NormalizableTableNames {
	return u.val.(tree.NormalizableTableNames)
}
func (u *sqlSymUnion) indexHints() *tree.IndexHints {
	return u.val.(*tree.IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) normalizableTableNameFromUnresolvedName() tree.NormalizableTableName {
	return tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) newNormalizableTableNameFromUnresolvedName() *tree.NormalizableTableName {
	return &tree.NormalizableTableName{TableNameReference: u.unresolvedName()}
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql.y:550
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const EMIT = lex.EMIT
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXPERIMENTAL_CHANGEFEED = lex.EXPERIMENTAL_CHANGEFEED
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GIN = lex.GIN
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"EMIT",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPERIMENTAL_CHANGEFEED",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GIN",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:8012

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 55,
	416, 55,
	-2, 868,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	164, 706,
	-2, 0,
	-1, 59,
	101, 868,
	170, 868,
	364, 868,
	365, 868,
	-2, 0,
	-1, 72,
	113, 842,
	126, 842,
	178, 842,
	204, 842,
	233, 842,
	241, 842,
	361, 842,
	-2, 831,
	-1, 107,
	194, 527,
	352, 527,
	-2, 0,
	-1, 112,
	4, 870,
	20, 870,
	21, 870,
	22, 870,
	23, 870,
	25, 870,
	30, 870,
	35, 870,
	36, 870,
	37, 870,
	38, 870,
	39, 870,
	40, 870,
	41, 870,
	42, 870,
	43, 870,
	44, 870,
	46, 870,
	47, 870,
	48, 870,
	49, 870,
	50, 870,
	51, 870,
	54, 870,
	55, 870,
	56, 870,
	58, 870,
	59, 870,
	63, 870,
	64, 870,
	65, 870,
	66, 870,
	67, 870,
	69, 870,
	70, 870,
	71, 870,
	72, 870,
	74, 870,
	76, 870,
	77, 870,
	80, 870,
	81, 870,
	82, 870,
	90, 870,
	91, 870,
	92, 870,
	93, 870,
	94, 870,
	95, 870,
	96, 870,
	97, 870,
	99, 870,
	101, 870,
	103, 870,
	106, 870,
	107, 870,
	109, 870,
	110, 870,
	114, 870,
	115, 870,
	116, 870,
	117, 870,
	118, 870,
	119, 870,
	120, 870,
	121, 870,
	122, 870,
	123, 870,
	131, 870,
	132, 870,
	133, 870,
	134, 870,
	135, 870,
	137, 870,
	139, 870,
	143, 870,
	145, 870,
	146, 870,
	148, 870,
	150, 870,
	151, 870,
	152, 870,
	153, 870,
	154, 870,
	155, 870,
	156, 870,
	157, 870,
	160, 870,
	165, 870,
	166, 870,
	167, 870,
	170, 870,
	171, 870,
	172, 870,
	173, 870,
	174, 870,
	175, 870,
	176, 870,
	177, 870,
	179, 870,
	181, 870,
	184, 870,
	185, 870,
	186, 870,
	188, 870,
	189, 870,
	192, 870,
	193, 870,
	194, 870,
	196, 870,
	197, 870,
	199, 870,
	201, 870,
	202, 870,
	205, 870,
	206, 870,
	209, 870,
	211, 870,
	214, 870,
	215, 870,
	216, 870,
	217, 870,
	218, 870,
	220, 870,
	221, 870,
	222, 870,
	223, 870,
	228, 870,
	229, 870,
	230, 870,
	231, 870,
	232, 870,
	234, 870,
	235, 870,
	237, 870,
	238, 870,
	239, 870,
	242, 870,
	243, 870,
	245, 870,
	247, 870,
	248, 870,
	249, 870,
	250, 870,
	251, 870,
	252, 870,
	253, 870,
	254, 870,
	256, 870,
	257, 870,
	258, 870,
	259, 870,
	260, 870,
	262, 870,
	263, 870,
	264, 870,
	265, 870,
	266, 870,
	267, 870,
	268, 870,
	269, 870,
	271, 870,
	272, 870,
	273, 870,
	274, 870,
	275, 870,
	277, 870,
	278, 870,
	279, 870,
	280, 870,
	281, 870,
	282, 870,
	283, 870,
	285, 870,
	287, 870,
	288, 870,
	289, 870,
	290, 870,
	291, 870,
	292, 870,
	294, 870,
	295, 870,
	296, 870,
	297, 870,
	298, 870,
	299, 870,
	300, 870,
	302, 870,
	303, 870,
	304, 870,
	305, 870,
	306, 870,
	307, 870,
	308, 870,
	309, 870,
	310, 870,
	312, 870,
	313, 870,
	314, 870,
	315, 870,
	317, 870,
	318, 870,
	319, 870,
	320, 870,
	322, 870,
	323, 870,
	324, 870,
	325, 870,
	326, 870,
	327, 870,
	328, 870,
	329, 870,
	330, 870,
	332, 870,
	333, 870,
	335, 870,
	336, 870,
	338, 870,
	339, 870,
	340, 870,
	341, 870,
	342, 870,
	343, 870,
	344, 870,
	345, 870,
	347, 870,
	348, 870,
	349, 870,
	352, 870,
	353, 870,
	354, 870,
	355, 870,
	357, 870,
	358, 870,
	359, 870,
	360, 870,
	363, 870,
	364, 870,
	365, 870,
	366, 870,
	368, 870,
	370, 870,
	371, 870,
	372, 870,
	373, 870,
	374, 870,
	375, 870,
	378, 870,
	379, 870,
	384, 870,
	385, 870,
	386, 870,
	387, 870,
	388, 870,
	389, 870,
	-2, 0,
	-1, 133,
	113, 841,
	126, 841,
	178, 841,
	204, 841,
	233, 841,
	241, 841,
	361, 841,
	-2, 834,
	-1, 138,
	1, 764,
	184, 764,
	262, 764,
	266, 764,
	415, 764,
	416, 764,
	-2, 0,
	-1, 140,
	1, 764,
	415, 764,
	416, 764,
	-2, 0,
	-1, 141,
	1, 764,
	415, 764,
	416, 764,
	-2, 0,
	-1, 142,
	1, 768,
	415, 768,
	416, 768,
	-2, 0,
	-1, 168,
	4, 877,
	5, 877,
	6, 877,
	7, 877,
	8, 877,
	9, 877,
	20, 877,
	21, 877,
	22, 877,
	23, 877,
	25, 877,
	30, 877,
	31, 877,
	35, 877,
	36, 877,
	37, 877,
	38, 877,
	39, 877,
	40, 877,
	41, 877,
	42, 877,
	43, 877,
	44, 877,
	46, 877,
	47, 877,
	48, 877,
	49, 877,
	50, 877,
	51, 877,
	52, 877,
	53, 877,
	54, 877,
	55, 877,
	56, 877,
	58, 877,
	59, 877,
	61, 877,
	63, 877,
	64, 877,
	65, 877,
	66, 877,
	67, 877,
	69, 877,
	70, 877,
	71, 877,
	72, 877,
	74, 877,
	76, 877,
	77, 877,
	79, 877,
	80, 877,
	81, 877,
	82, 877,
	83, 877,
	84, 877,
	85, 877,
	86, 877,
	88, 877,
	89, 877,
	90, 877,
	91, 877,
	92, 877,
	93, 877,
	94, 877,
	95, 877,
	96, 877,
	97, 877,
	98, 877,
	99, 877,
	101, 877,
	103, 877,
	106, 877,
	107, 877,
	109, 877,
	110, 877,
	114, 877,
	115, 877,
	116, 877,
	117, 877,
	118, 877,
	119, 877,
	120, 877,
	121, 877,
	122, 877,
	123, 877,
	124, 877,
	125, 877,
	131, 877,
	132, 877,
	133, 877,
	134, 877,
	135, 877,
	137, 877,
	139, 877,
	142, 877,
	143, 877,
	145, 877,
	146, 877,
	148, 877,
	150, 877,
	151, 877,
	152, 877,
	153, 877,
	154, 877,
	155, 877,
	156, 877,
	157, 877,
	158, 877,
	160, 877,
	165, 877,
	166, 877,
	167, 877,
	169, 877,
	170, 877,
	171, 877,
	172, 877,
	173, 877,
	174, 877,
	175, 877,
	176, 877,
	177, 877,
	179, 877,
	181, 877,
	182, 877,
	183, 877,
	184, 877,
	185, 877,
	186, 877,
	187, 877,
	188, 877,
	189, 877,
	192, 877,
	193, 877,
	194, 877,
	196, 877,
	197, 877,
	199, 877,
	200, 877,
	201, 877,
	202, 877,
	203, 877,
	205, 877,
	206, 877,
	209, 877,
	211, 877,
	212, 877,
	213, 877,
	214, 877,
	215, 877,
	216, 877,
	217, 877,
	218, 877,
	219, 877,
	220, 877,
	221, 877,
	222, 877,
	223, 877,
	224, 877,
	226, 877,
	227, 877,
	228, 877,
	229, 877,
	230, 877,
	231, 877,
	232, 877,
	234, 877,
	235, 877,
	238, 877,
	239, 877,
	242, 877,
	243, 877,
	244, 877,
	245, 877,
	246, 877,
	247, 877,
	248, 877,
	249, 877,
	250, 877,
	251, 877,
	252, 877,
	253, 877,
	254, 877,
	256, 877,
	257, 877,
	258, 877,
	259, 877,
	260, 877,
	262, 877,
	263, 877,
	264, 877,
	265, 877,
	266, 877,
	267, 877,
	268, 877,
	269, 877,
	271, 877,
	272, 877,
	273, 877,
	274, 877,
	275, 877,
	277, 877,
	278, 877,
	279, 877,
	280, 877,
	281, 877,
	282, 877,
	283, 877,
	285, 877,
	286, 877,
	287, 877,
	288, 877,
	289, 877,
	290, 877,
	291, 877,
	292, 877,
	294, 877,
	295, 877,
	296, 877,
	297, 877,
	298, 877,
	299, 877,
	300, 877,
	302, 877,
	303, 877,
	304, 877,
	305, 877,
	306, 877,
	307, 877,
	308, 877,
	309, 877,
	310, 877,
	311, 877,
	312, 877,
	313, 877,
	314, 877,
	315, 877,
	316, 877,
	317, 877,
	318, 877,
	319, 877,
	320, 877,
	322, 877,
	323, 877,
	324, 877,
	325, 877,
	326, 877,
	327, 877,
	328, 877,
	329, 877,
	330, 877,
	332, 877,
	333, 877,
	335, 877,
	336, 877,
	338, 877,
	339, 877,
	340, 877,
	341, 877,
	342, 877,
	343, 877,
	344, 877,
	345, 877,
	347, 877,
	348, 877,
	349, 877,
	352, 877,
	353, 877,
	354, 877,
	355, 877,
	356, 877,
	357, 877,
	358, 877,
	359, 877,
	360, 877,
	363, 877,
	364, 877,
	365, 877,
	366, 877,
	367, 877,
	368, 877,
	370, 877,
	371, 877,
	372, 877,
	373, 877,
	374, 877,
	375, 877,
	378, 877,
	379, 877,
	384, 877,
	385, 877,
	386, 877,
	387, 877,
	388, 877,
	389, 877,
	390, 877,
	398, 877,
	403, 877,
	404, 877,
	405, 877,
	412, 877,
	418, 877,
	-2, 0,
	-1, 171,
	1, 55,
	416, 55,
	-2, 868,
	-1, 203,
	414, 1435,
	417, 1435,
	-2, 567,
	-1, 204,
	414, 1437,
	417, 1437,
	-2, 568,
	-1, 205,
	414, 1436,
	417, 1436,
	-2, 569,
	-1, 206,
	417, 1377,
	-2, 570,
	-1, 597,
	141, 1547,
	350, 1547,
	395, 1547,
	414, 1547,
	-2, 0,
	-1, 598,
	141, 1473,
	350, 1473,
	395, 1473,
	414, 1473,
	-2, 0,
	-1, 600,
	141, 1620,
	350, 1620,
	395, 1620,
	414, 1620,
	-2, 0,
	-1, 602,
	141, 1648,
	350, 1648,
	395, 1648,
	414, 1648,
	-2, 0,
	-1, 609,
	141, 1552,
	350, 1552,
	395, 1552,
	414, 1552,
	-2, 403,
	-1, 643,
	1, 499,
	411, 499,
	413, 499,
	415, 499,
	416, 499,
	-2, 0,
	-1, 644,
	1, 566,
	138, 566,
	411, 566,
	413, 566,
	415, 566,
	416, 566,
	-2, 0,
	-1, 650,
	1, 513,
	411, 513,
	413, 513,
	415, 513,
	416, 513,
	-2, 0,
	-1, 652,
	1, 517,
	411, 517,
	413, 517,
	415, 517,
	416, 517,
	-2, 0,
	-1, 655,
	1, 528,
	411, 528,
	413, 528,
	415, 528,
	416, 528,
	-2, 0,
	-1, 656,
	1, 534,
	411, 534,
	413, 534,
	415, 534,
	416, 534,
	-2, 0,
	-1, 657,
	1, 537,
	411, 537,
	413, 537,
	415, 537,
	416, 537,
	-2, 0,
	-1, 661,
	1, 551,
	411, 551,
	413, 551,
	415, 551,
	416, 551,
	-2, 0,
	-1, 662,
	1, 553,
	411, 553,
	413, 553,
	415, 553,
	416, 553,
	-2, 0,
	-1, 688,
	126, 879,
	204, 879,
	233, 879,
	-2, 837,
	-1, 696,
	126, 878,
	204, 878,
	233, 878,
	-2, 835,
	-1, 723,
	412, 1720,
	-2, 1156,
	-1, 724,
	412, 1721,
	-2, 1157,
	-1, 755,
	412, 1429,
	-2, 1420,
	-1, 756,
	5, 1014,
	412, 1444,
	-2, 1435,
	-1, 757,
	412, 1445,
	-2, 1436,
	-1, 764,
	5, 998,
	-2, 1465,
	-1, 765,
	5, 999,
	-2, 1469,
	-1, 766,
	5, 1000,
	-2, 1468,
	-1, 767,
	5, 1001,
	-2, 1644,
	-1, 768,
	5, 1002,
	-2, 1554,
	-1, 769,
	5, 1003,
	-2, 1613,
	-1, 770,
	5, 1004,
	-2, 1615,
	-1, 771,
	5, 1005,
	-2, 1616,
	-1, 772,
	5, 1006,
	-2, 1617,
	-1, 773,
	5, 1007,
	-2, 1625,
	-1, 774,
	5, 1008,
	-2, 1656,
	-1, 775,
	5, 1009,
	-2, 1524,
	-1, 776,
	5, 1010,
	-2, 1464,
	-1, 777,
	5, 1011,
	-2, 1562,
	-1, 778,
	5, 1012,
	-2, 1563,
	-1, 779,
	5, 1013,
	-2, 1528,
	-1, 780,
	5, 1060,
	412, 1060,
	-2, 1689,
	-1, 797,
	5, 1035,
	-2, 1466,
	-1, 798,
	5, 1053,
	-2, 1493,
	-1, 800,
	5, 1027,
	-2, 1511,
	-1, 801,
	5, 1028,
	-2, 1512,
	-1, 802,
	5, 1019,
	-2, 1527,
	-1, 803,
	5, 1020,
	-2, 1529,
	-1, 804,
	5, 1021,
	-2, 1530,
	-1, 805,
	5, 1022,
	-2, 1531,
	-1, 806,
	5, 986,
	-2, 1537,
	-1, 807,
	5, 987,
	-2, 1538,
	-1, 808,
	5, 1050,
	-2, 1634,
	-1, 809,
	5, 1058,
	-2, 1646,
	-1, 810,
	5, 1025,
	-2, 1670,
	-1, 811,
	5, 1052,
	-2, 1671,
	-1, 812,
	5, 1034,
	-2, 1672,
	-1, 813,
	5, 1052,
	-2, 1673,
	-1, 814,
	5, 1052,
	-2, 1674,
	-1, 815,
	5, 1017,
	-2, 1677,
	-1, 816,
	5, 1017,
	-2, 1678,
	-1, 819,
	5, 1042,
	-2, 1682,
	-1, 821,
	5, 1018,
	-2, 1687,
	-1, 822,
	5, 1023,
	-2, 1688,
	-1, 824,
	5, 1017,
	-2, 1692,
	-1, 827,
	5, 1026,
	-2, 1697,
	-1, 828,
	5, 1024,
	-2, 1699,
	-1, 830,
	5, 1054,
	-2, 1701,
	-1, 831,
	5, 1056,
	-2, 1702,
	-1, 834,
	5, 1049,
	-2, 1706,
	-1, 903,
	412, 1444,
	-2, 1435,
	-1, 920,
	277, 1417,
	405, 1417,
	-2, 1416,
	-1, 1062,
	252, 866,
	-2, 692,
	-1, 1071,
	236, 1439,
	-2, 0,
	-1, 1114,
	1, 270,
	411, 270,
	413, 270,
	415, 270,
	416, 270,
	-2, 840,
	-1, 1117,
	4, 1705,
	10, 1705,
	11, 1705,
	13, 1705,
	14, 1705,
	15, 1705,
	16, 1705,
	17, 1705,
	18, 1705,
	20, 1705,
	21, 1705,
	22, 1705,
	23, 1705,
	25, 1705,
	28, 1705,
	30, 1705,
	32, 1705,
	35, 1705,
	36, 1705,
	37, 1705,
	38, 1705,
	39, 1705,
	40, 1705,
	41, 1705,
	42, 1705,
	43, 1705,
	44, 1705,
	46, 1705,
	47, 1705,
	48, 1705,
	49, 1705,
	50, 1705,
	51, 1705,
	54, 1705,
	55, 1705,
	56, 1705,
	58, 1705,
	59, 1705,
	60, 1705,
	63, 1705,
	64, 1705,
	65, 1705,
	66, 1705,
	67, 1705,
	68, 1705,
	69, 1705,
	70, 1705,
	71, 1705,
	72, 1705,
	74, 1705,
	75, 1705,
	76, 1705,
	77, 1705,
	79, 1705,
	80, 1705,
	81, 1705,
	82, 1705,
	90, 1705,
	91, 1705,
	92, 1705,
	93, 1705,
	94, 1705,
	95, 1705,
	96, 1705,
	97, 1705,
	99, 1705,
	101, 1705,
	103, 1705,
	106, 1705,
	107, 1705,
	109, 1705,
	110, 1705,
	114, 1705,
	115, 1705,
	116, 1705,
	117, 1705,
	118, 1705,
	119, 1705,
	120, 1705,
	121, 1705,
	122, 1705,
	123, 1705,
	127, 1705,
	128, 1705,
	129, 1705,
	130, 1705,
	131, 1705,
	132, 1705,
	133, 1705,
	134, 1705,
	135, 1705,
	136, 1705,
	137, 1705,
	139, 1705,
	142, 1705,
	143, 1705,
	145, 1705,
	146, 1705,
	148, 1705,
	150, 1705,
	151, 1705,
	152, 1705,
	153, 1705,
	154, 1705,
	155, 1705,
	156, 1705,
	157, 1705,
	158, 1705,
	159, 1705,
	160, 1705,
	161, 1705,
	162, 1705,
	163, 1705,
	165, 1705,
	166, 1705,
	167, 1705,
	169, 1705,
	170, 1705,
	171, 1705,
	172, 1705,
	173, 1705,
	174, 1705,
	175, 1705,
	176, 1705,
	177, 1705,
	179, 1705,
	181, 1705,
	182, 1705,
	183, 1705,
	184, 1705,
	185, 1705,
	186, 1705,
	187, 1705,
	188, 1705,
	189, 1705,
	190, 1705,
	191, 1705,
	192, 1705,
	193, 1705,
	194, 1705,
	196, 1705,
	197, 1705,
	199, 1705,
	200, 1705,
	201, 1705,
	202, 1705,
	203, 1705,
	205, 1705,
	206, 1705,
	209, 1705,
	210, 1705,
	211, 1705,
	214, 1705,
	215, 1705,
	216, 1705,
	217, 1705,
	218, 1705,
	219, 1705,
	220, 1705,
	221, 1705,
	222, 1705,
	223, 1705,
	226, 1705,
	228, 1705,
	229, 1705,
	230, 1705,
	231, 1705,
	232, 1705,
	234, 1705,
	235, 1705,
	238, 1705,
	239, 1705,
	240, 1705,
	242, 1705,
	243, 1705,
	245, 1705,
	247, 1705,
	248, 1705,
	249, 1705,
	250, 1705,
	251, 1705,
	252, 1705,
	253, 1705,
	254, 1705,
	256, 1705,
	257, 1705,
	258, 1705,
	259, 1705,
	260, 1705,
	262, 1705,
	263, 1705,
	264, 1705,
	265, 1705,
	266, 1705,
	267, 1705,
	268, 1705,
	269, 1705,
	271, 1705,
	272, 1705,
	273, 1705,
	274, 1705,
	275, 1705,
	276, 1705,
	277, 1705,
	278, 1705,
	279, 1705,
	280, 1705,
	281, 1705,
	282, 1705,
	283, 1705,
	285, 1705,
	286, 1705,
	287, 1705,
	288, 1705,
	289, 1705,
	290, 1705,
	291, 1705,
	292, 1705,
	293, 1705,
	294, 1705,
	295, 1705,
	296, 1705,
	297, 1705,
	298, 1705,
	299, 1705,
	300, 1705,
	302, 1705,
	303, 1705,
	304, 1705,
	305, 1705,
	306, 1705,
	307, 1705,
	308, 1705,
	309, 1705,
	310, 1705,
	312, 1705,
	313, 1705,
	314, 1705,
	315, 1705,
	316, 1705,
	317, 1705,
	318, 1705,
	319, 1705,
	320, 1705,
	322, 1705,
	323, 1705,
	324, 1705,
	325, 1705,
	326, 1705,
	327, 1705,
	328, 1705,
	329, 1705,
	330, 1705,
	332, 1705,
	333, 1705,
	335, 1705,
	336, 1705,
	338, 1705,
	339, 1705,
	340, 1705,
	341, 1705,
	342, 1705,
	343, 1705,
	344, 1705,
	345, 1705,
	347, 1705,
	348, 1705,
	349, 1705,
	352, 1705,
	353, 1705,
	354, 1705,
	355, 1705,
	357, 1705,
	358, 1705,
	359, 1705,
	360, 1705,
	363, 1705,
	364, 1705,
	365, 1705,
	366, 1705,
	368, 1705,
	370, 1705,
	371, 1705,
	372, 1705,
	373, 1705,
	374, 1705,
	375, 1705,
	378, 1705,
	379, 1705,
	384, 1705,
	385, 1705,
	386, 1705,
	387, 1705,
	388, 1705,
	389, 1705,
	390, 1705,
	391, 1705,
	393, 1705,
	394, 1705,
	395, 1705,
	396, 1705,
	397, 1705,
	398, 1705,
	400, 1705,
	401, 1705,
	402, 1705,
	403, 1705,
	404, 1705,
	405, 1705,
	406, 1705,
	407, 1705,
	408, 1705,
	410, 1705,
	413, 1705,
	414, 1705,
	417, 1705,
	418, 1705,
	-2, 0,
	-1, 1135,
	141, 1620,
	350, 1620,
	395, 1620,
	414, 1620,
	-2, 0,
	-1, 1160,
	141, 1648,
	350, 1648,
	395, 1648,
	414, 1648,
	-2, 0,
	-1, 1161,
	184, 776,
	262, 776,
	266, 776,
	-2, 390,
	-1, 1237,
	126, 878,
	204, 878,
	233, 878,
	-2, 838,
	-1, 1321,
	113, 842,
	126, 842,
	178, 842,
	204, 842,
	233, 842,
	241, 842,
	361, 842,
	-2, 1197,
	-1, 1367,
	413, 1312,
	-2, 0,
	-1, 1374,
	184, 776,
	262, 776,
	266, 776,
	-2, 771,
	-1, 1403,
	413, 1312,
	-2, 0,
	-1, 1411,
	113, 842,
	126, 842,
	178, 842,
	204, 842,
	233, 842,
	241, 842,
	361, 842,
	-2, 945,
	-1, 1606,
	184, 776,
	262, 776,
	266, 776,
	-2, 392,
	-1, 1714,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1095,
	-1, 1715,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1096,
	-1, 1716,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1097,
	-1, 1717,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1098,
	-1, 1718,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1099,
	-1, 1719,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1100,
	-1, 1720,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1101,
	-1, 1721,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1102,
	-1, 1733,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1114,
	-1, 1734,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1115,
	-1, 1735,
	13, 0,
	14, 0,
	15, 0,
	75, 0,
	190, 0,
	191, 0,
	393, 0,
	394, 0,
	395, 0,
	396, 0,
	397, 0,
	-2, 1116,
	-1, 1738,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1121,
	-1, 1744,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1123,
	-1, 1746,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1127,
	-1, 1747,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1128,
	-1, 1748,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1129,
	-1, 1749,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1130,
	-1, 1825,
	5, 1014,
	141, 1323,
	412, 1444,
	-2, 1435,
	-1, 1826,
	141, 1324,
	-2, 1666,
	-1, 1827,
	141, 1325,
	-2, 1551,
	-1, 1828,
	141, 1326,
	-2, 1494,
	-1, 1829,
	141, 1327,
	-2, 1519,
	-1, 1830,
	141, 1328,
	-2, 1550,
	-1, 1831,
	141, 1329,
	-2, 1612,
	-1, 1899,
	413, 1312,
	-2, 0,
	-1, 1909,
	1, 946,
	79, 946,
	113, 946,
	126, 946,
	142, 946,
	147, 946,
	149, 946,
	169, 946,
	178, 946,
	187, 946,
	200, 946,
	204, 946,
	219, 946,
	233, 946,
	236, 946,
	241, 946,
	284, 946,
	286, 946,
	361, 946,
	369, 946,
	381, 946,
	382, 946,
	392, 946,
	411, 946,
	413, 946,
	415, 946,
	416, 946,
	417, 946,
	-2, 945,
	-1, 1911,
	412, 1421,
	-2, 1433,
	-1, 1991,
	413, 1382,
	417, 1382,
	-2, 1409,
	-1, 2112,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1122,
	-1, 2113,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1124,
	-1, 2118,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1125,
	-1, 2136,
	246, 1283,
	-2, 1285,
	-1, 2345,
	252, 866,
	-2, 692,
	-1, 2408,
	184, 776,
	262, 776,
	266, 776,
	-2, 389,
	-1, 2423,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1126,
	-1, 2428,
	182, 0,
	183, 0,
	226, 0,
	-2, 1144,
	-1, 2437,
	246, 1284,
	-2, 1286,
	-1, 2486,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1174,
	-1, 2487,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1175,
	-1, 2488,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1176,
	-1, 2492,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1180,
	-1, 2493,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1181,
	-1, 2494,
	13, 0,
	14, 0,
	15, 0,
	393, 0,
	394, 0,
	395, 0,
	-2, 1182,
	-1, 2535,
	412, 1422,
	-2, 1434,
	-1, 2649,
	182, 0,
	183, 0,
	226, 0,
	-2, 1145,
	-1, 2652,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1148,
	-1, 2653,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1150,
	-1, 2798,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1149,
	-1, 2799,
	16, 0,
	17, 0,
	18, 0,
	38, 0,
	158, 0,
	159, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1151,
	-1, 2809,
	182, 0,
	-2, 1183,
	-1, 2898,
	182, 0,
	-2, 1184,
	-1, 2996,
	38, 0,
	158, 0,
	203, 0,
	316, 0,
	390, 0,
	398, 0,
	-2, 1669,
}

const sqlPrivate = 57344

const sqlLast = 56289

var sqlAct = [...]int{

	757, 1775, 2995, 2584, 3004, 2751, 3058, 2838, 2971, 2017,
	2972, 3005, 2958, 3006, 2974, 1046, 2827, 2062, 754, 2458,
	2994, 2902, 2025, 2766, 753, 2789, 2602, 2544, 2597, 1701,
	2706, 1537, 2106, 1240, 2359, 2607, 2721, 1028, 749, 1104,
	205, 1761, 2814, 2392, 2545, 479, 2014, 2352, 2212, 1538,
	2394, 1325, 479, 2364, 1989, 697, 1414, 2354, 2253, 479,
	933, 479, 1401, 1993, 479, 205, 924, 479, 479, 1410,
	1100, 2684, 731, 1893, 479, 1475, 1068, 939, 2623, 2229,
	474, 2026, 479, 1382, 1976, 1489, 1490, 1923, 2240, 1495,
	1107, 1486, 1438, 1692, 1904, 1498, 796, 528, 1774, 2148,
	1992, 705, 127, 2511, 2211, 2903, 1328, 1773, 2102, 1374,
	1914, 1687, 2363, 1631, 836, 1906, 917, 1460, 2270, 525,
	740, 1454, 2328, 1419, 549, 27, 1421, 1782, 1950, 1487,
	1383, 1862, 1800, 1758, 1951, 1163, 561, 1977, 1353, 1990,
	1794, 2752, 2019, 1355, 1097, 1087, 1996, 1115, 476, 894,
	206, 926, 207, 889, 1885, 1392, 1870, 1821, 1316, 871,
	607, 127, 587, 479, 479, 721, 1239, 133, 1630, 1241,
	748, 564, 601, 1505, 522, 71, 134, 201, 1373, 573,
	1032, 1084, 475, 635, 1245, 2135, 869, 2527, 462, 1903,
	2528, 701, 701, 1402, 479, 479, 479, 929, 479, 479,
	942, 942, 2064, 580, 2018, 2421, 1513, 1513, 1513, 479,
	479, 1978, 3085, 462, 3079, 3078, 1879, 3055, 1879, 1879,
	3052, 2720, 465, 2398, 1469, 2371, 3030, 886, 2182, 2183,
	2720, 2200, 2201, 2202, 696, 3024, 1525, 3023, 1978, 1879,
	2370, 1879, 575, 1463, 3020, 3017, 2648, 465, 3021, 3018,
	3014, 711, 2992, 2341, 1469, 2991, 1469, 1511, 2990, 1469,
	2989, 2953, 1525, 2514, 1525, 2054, 2940, 892, 2933, 936,
	1469, 2931, 2720, 127, 1872, 2720, 920, 2929, 872, 872,
	2900, 2720, 2046, 1879, 2054, 1035, 2197, 922, 2886, 2874,
	2869, 2954, 2631, 2720, 1469, 689, 27, 2867, 2182, 2183,
	2887, 2720, 2857, 2856, 688, 2849, 1469, 1469, 2848, 1469,
	2820, 702, 2720, 2800, 1469, 2746, 1469, 2054, 2742, 1879,
	706, 2719, 1879, 2651, 2621, 2720, 2613, 2054, 2614, 2523,
	2614, 2517, 2432, 2524, 2383, 1879, 1879, 1137, 2333, 2226,
	2177, 2546, 2176, 1879, 1879, 1525, 1879, 910, 914, 919,
	873, 2170, 1146, 1469, 2188, 2171, 755, 462, 2169, 1034,
	2139, 1033, 1879, 2514, 1256, 1257, 2140, 1879, 2147, 2073,
	2053, 2042, 1985, 1879, 2054, 1879, 1469, 1878, 1529, 1871,
	1609, 1879, 1530, 875, 1797, 876, 1256, 1257, 2631, 1259,
	1966, 465, 1912, 2499, 2434, 2333, 2105, 2084, 1468, 1378,
	2203, 1777, 1031, 1134, 1138, 171, 2372, 1133, 1132, 1131,
	1130, 1259, 1129, 1128, 1258, 1256, 1257, 1127, 1289, 1290,
	1291, 1299, 1300, 1301, 2188, 2373, 2699, 1628, 2198, 1126,
	1125, 1124, 168, 1292, 1123, 1122, 1258, 1514, 1514, 1514,
	1259, 1798, 1121, 1305, 1120, 1119, 1118, 877, 874, 695,
	2182, 2183, 694, 2200, 2201, 2202, 693, 692, 691, 687,
	686, 685, 684, 683, 682, 1258, 2182, 2183, 170, 2200,
	2201, 2202, 681, 1278, 680, 679, 678, 677, 673, 672,
	1275, 671, 633, 632, 2647, 631, 630, 168, 479, 479,
	1264, 479, 929, 929, 479, 629, 628, 479, 2198, 1138,
	479, 2370, 627, 1799, 1796, 169, 479, 626, 2197, 1896,
	625, 2199, 1264, 624, 623, 622, 479, 479, 479, 479,
	479, 929, 929, 170, 2197, 621, 620, 898, 929, 1469,
	619, 618, 1281, 1282, 1283, 1284, 617, 1286, 1287, 1288,
	616, 1264, 615, 135, 614, 613, 1326, 612, 1813, 611,
	1871, 746, 596, 595, 594, 593, 592, 1073, 591, 479,
	169, 1108, 513, 1296, 1306, 512, 1286, 1287, 1288, 162,
	479, 1061, 1521, 1512, 1671, 485, 2188, 163, 484, 483,
	1101, 2199, 1062, 1065, 704, 468, 1279, 1302, 1303, 1801,
	479, 467, 2188, 466, 191, 1273, 1274, 190, 135, 189,
	188, 479, 187, 186, 185, 184, 183, 1058, 1294, 182,
	181, 2194, 2195, 2196, 2022, 1279, 180, 179, 2193, 2191,
	2192, 2184, 2185, 2186, 2187, 2189, 2190, 178, 1138, 2182,
	2183, 1304, 177, 1409, 176, 175, 174, 173, 2203, 172,
	929, 143, 1902, 2658, 2615, 1293, 38, 2532, 2266, 2145,
	2198, 2094, 1986, 1981, 1634, 1252, 1811, 39, 138, 1086,
	1418, 1332, 1091, 1094, 1809, 1807, 2198, 2182, 2183, 1280,
	1177, 43, 1048, 1037, 3011, 479, 2993, 1795, 2976, 1116,
	2965, 1285, 2894, 2870, 2837, 45, 140, 2197, 2193, 2191,
	2192, 2184, 2185, 2186, 2187, 2189, 2190, 44, 1280, 50,
	2890, 2059, 2888, 702, 1256, 1257, 2783, 2683, 2682, 940,
	1029, 2774, 1161, 2182, 2183, 2681, 2674, 2670, 2669, 1171,
	51, 1297, 890, 1175, 53, 2668, 2664, 2663, 57, 1259,
	1185, 1323, 141, 2199, 2662, 2661, 2654, 58, 70, 2630,
	2628, 2531, 59, 2508, 1238, 2507, 2506, 2444, 2332, 2199,
	2265, 2336, 2256, 2222, 1258, 2188, 2210, 1260, 1261, 1262,
	1263, 1265, 1266, 2181, 2178, 60, 2175, 885, 2174, 2172,
	2153, 2182, 2183, 1158, 61, 2152, 1269, 1267, 1268, 1260,
	1261, 1262, 1263, 1265, 1266, 2136, 1909, 1252, 1237, 1336,
	1769, 1534, 1251, 2188, 1473, 1295, 3083, 1472, 1270, 1271,
	1277, 1276, 1272, 1298, 3066, 1269, 1267, 1268, 1260, 1261,
	1262, 1263, 1265, 1266, 1329, 3065, 1319, 168, 1047, 2460,
	1178, 2984, 2671, 1629, 1952, 2979, 2935, 2926, 1236, 2198,
	1264, 2925, 2101, 2194, 2195, 2196, 2921, 2920, 2914, 2188,
	2193, 2191, 2192, 2184, 2185, 2186, 2187, 2189, 2190, 2194,
	2195, 2196, 2905, 170, 2911, 2885, 2193, 2191, 2192, 2184,
	2185, 2186, 2187, 2189, 2190, 2884, 479, 2182, 2183, 1763,
	2833, 479, 2811, 689, 62, 2761, 2756, 2754, 2741, 2725,
	2679, 63, 688, 168, 1248, 1249, 1389, 2773, 1380, 2632,
	169, 1253, 2600, 2591, 2590, 2588, 2565, 2188, 479, 162,
	73, 136, 64, 2564, 65, 702, 66, 163, 2554, 2553,
	142, 1770, 2199, 2198, 2519, 67, 2427, 2389, 2387, 170,
	2317, 2301, 168, 2280, 2279, 2225, 2209, 2162, 2021, 2161,
	2158, 2132, 2127, 81, 1356, 1361, 107, 2061, 1899, 1890,
	1399, 1256, 1257, 1877, 1805, 139, 1481, 1343, 1342, 1341,
	1351, 2782, 2246, 1354, 1340, 1403, 169, 1381, 170, 1812,
	1357, 1372, 1408, 1386, 1387, 162, 1259, 1371, 1364, 1367,
	1366, 2198, 1365, 163, 1363, 1362, 1359, 1358, 112, 1349,
	1348, 1347, 1346, 1345, 1344, 1333, 872, 137, 1405, 1320,
	127, 1258, 892, 2188, 135, 169, 2199, 2182, 2183, 2280,
	1319, 1157, 1142, 1112, 162, 2656, 2627, 2526, 1400, 2522,
	2138, 1891, 163, 1329, 2182, 2183, 2385, 2056, 1317, 2193,
	2191, 2192, 2184, 2185, 2186, 2187, 2189, 2190, 1377, 1415,
	1174, 929, 479, 135, 2355, 1375, 4, 1628, 942, 2779,
	1619, 1618, 1433, 1628, 1625, 1412, 2634, 1437, 479, 942,
	479, 479, 1427, 2633, 2199, 2529, 1978, 1379, 205, 1628,
	2184, 2185, 2186, 2187, 2189, 2190, 1409, 1810, 1482, 1368,
	2072, 702, 479, 479, 1369, 1808, 1806, 1152, 1461, 479,
	1370, 479, 2863, 479, 1494, 1234, 2321, 479, 2891, 2316,
	2889, 1628, 1346, 2312, 2836, 1346, 2300, 2217, 2216, 1262,
	1263, 1265, 1266, 747, 2191, 2192, 2184, 2185, 2186, 2187,
	2189, 2190, 2215, 2111, 1528, 2071, 1602, 1170, 2563, 1615,
	867, 1466, 1338, 2188, 2064, 1535, 1491, 2400, 2311, 1450,
	1954, 2815, 2018, 2462, 1622, 1783, 479, 205, 479, 479,
	1352, 3012, 2143, 3022, 929, 3019, 205, 479, 2366, 2540,
	479, 479, 1182, 868, 2968, 1228, 479, 2598, 2047, 1604,
	1502, 521, 1500, 2192, 2184, 2185, 2186, 2187, 2189, 2190,
	492, 1478, 196, 2939, 2733, 3045, 2074, 884, 942, 2410,
	462, 1543, 1034, 1592, 1033, 1213, 1214, 3082, 479, 3013,
	1226, 1656, 2862, 479, 861, 3046, 1335, 2198, 205, 479,
	2861, 479, 1509, 479, 502, 479, 462, 479, 863, 1624,
	1596, 859, 1467, 1532, 465, 1563, 1925, 479, 2859, 479,
	1434, 2858, 1594, 2578, 2750, 2573, 857, 479, 479, 479,
	1227, 2572, 1086, 1668, 2537, 1485, 2536, 854, 2157, 1172,
	465, 520, 1623, 2156, 2155, 2154, 2114, 1431, 898, 2045,
	491, 2004, 898, 700, 715, 479, 1507, 1562, 1971, 942,
	1504, 1916, 2186, 2187, 2189, 2190, 1965, 1916, 1432, 1616,
	1606, 1961, 2568, 503, 1942, 1674, 1745, 1376, 1915, 1797,
	2199, 1857, 1030, 1856, 1173, 462, 1855, 1703, 1180, 2015,
	2893, 2413, 1148, 675, 462, 1543, 1543, 1975, 1669, 1928,
	1636, 570, 2583, 1050, 1663, 1627, 1693, 1700, 1158, 1061,
	1533, 1760, 2938, 1760, 1531, 2840, 1603, 1984, 699, 465,
	1935, 3008, 2386, 1593, 586, 2987, 1323, 1767, 465, 1934,
	1415, 1255, 1765, 942, 1756, 1787, 1798, 1508, 1209, 1266,
	585, 1620, 1632, 1212, 1641, 1665, 462, 1801, 1638, 1516,
	3037, 1819, 1518, 1422, 1754, 1520, 1423, 586, 519, 1523,
	1824, 1824, 2454, 2361, 1835, 1837, 2308, 1842, 2103, 2104,
	2950, 1562, 1562, 2402, 1865, 1647, 1429, 479, 3061, 479,
	465, 701, 1149, 1869, 3068, 1210, 1156, 2303, 1449, 1513,
	2184, 2185, 2186, 2187, 2189, 2190, 2057, 2951, 1799, 1796,
	1435, 1188, 2320, 942, 1844, 1672, 1667, 1480, 1820, 479,
	1673, 479, 2190, 689, 1783, 1691, 689, 689, 479, 942,
	1927, 2917, 1683, 479, 2556, 1684, 1685, 2411, 1778, 3009,
	518, 479, 1225, 1629, 1952, 1958, 1780, 479, 1424, 1629,
	1626, 1452, 1151, 1404, 1350, 2405, 1750, 890, 1801, 479,
	1882, 1426, 929, 2574, 1751, 1629, 1952, 1752, 3045, 2362,
	2006, 1757, 1962, 479, 942, 2292, 1854, 505, 504, 479,
	479, 1892, 1233, 2409, 1771, 1900, 1901, 3036, 1543, 1429,
	1768, 486, 479, 2124, 1801, 479, 1917, 1629, 1952, 1945,
	892, 2795, 511, 1670, 872, 702, 3010, 1428, 2806, 2291,
	702, 698, 1897, 2122, 2865, 1314, 2160, 2361, 1886, 479,
	892, 479, 1907, 479, 506, 197, 479, 1832, 479, 1181,
	479, 1926, 479, 479, 701, 479, 929, 929, 929, 920,
	1944, 929, 2404, 1972, 1929, 1931, 479, 1973, 1867, 1866,
	2636, 1655, 1963, 1875, 1876, 855, 2401, 1470, 3059, 2566,
	1883, 1887, 1888, 521, 1562, 1913, 865, 1939, 1476, 864,
	2003, 2622, 855, 1412, 469, 1959, 2040, 2041, 516, 1920,
	2841, 496, 1795, 1953, 1955, 1956, 1957, 856, 1049, 1147,
	1944, 1968, 1429, 1457, 1937, 2038, 1753, 198, 855, 702,
	1943, 2643, 2036, 1755, 489, 2119, 479, 2451, 3035, 3007,
	1908, 1453, 1960, 517, 1422, 192, 2120, 1423, 2298, 3060,
	2125, 2116, 741, 1759, 1222, 3069, 2039, 462, 2403, 1034,
	1514, 1979, 3044, 1607, 1766, 496, 2031, 1150, 676, 2557,
	2020, 127, 2020, 520, 2049, 942, 569, 479, 127, 3062,
	3042, 2765, 1254, 515, 1196, 479, 1167, 479, 489, 2043,
	2024, 465, 463, 2763, 2077, 1422, 1640, 477, 1423, 2452,
	495, 2033, 1189, 2034, 498, 2035, 2079, 2037, 479, 479,
	479, 524, 479, 565, 200, 2048, 524, 463, 2044, 565,
	583, 2067, 1116, 2068, 2058, 2012, 590, 1635, 199, 1424,
	665, 479, 1223, 2010, 610, 197, 2080, 1155, 2294, 1484,
	2060, 1388, 1426, 1425, 1145, 1136, 482, 1742, 2078, 1190,
	710, 1179, 1187, 665, 495, 1244, 2796, 1429, 2296, 2325,
	2088, 1357, 2089, 1364, 1168, 195, 2791, 1354, 1169, 1465,
	2063, 2851, 2066, 710, 2329, 2121, 1162, 1243, 3074, 2096,
	1424, 2850, 2123, 1459, 2075, 1801, 507, 470, 1428, 2831,
	898, 2908, 2539, 1426, 2677, 127, 1224, 2254, 2295, 127,
	193, 1458, 2495, 2276, 1921, 2130, 492, 198, 1702, 2272,
	898, 2729, 2133, 2091, 2013, 524, 524, 2093, 666, 1614,
	2732, 490, 2011, 904, 1503, 2117, 2959, 2731, 1455, 1493,
	196, 2150, 2151, 508, 2717, 1492, 1488, 1483, 2450, 1428,
	194, 666, 1946, 1679, 488, 1167, 477, 477, 477, 1456,
	934, 477, 1660, 2100, 1610, 1242, 487, 2790, 1243, 2714,
	492, 463, 1036, 1921, 2603, 2098, 471, 1740, 1743, 509,
	1395, 510, 2767, 1429, 1637, 490, 2832, 2282, 1612, 2281,
	2255, 497, 1784, 2146, 1244, 578, 491, 2109, 2243, 1881,
	2029, 2208, 1613, 1880, 200, 572, 493, 1398, 488, 1420,
	2715, 1865, 1865, 1865, 1988, 514, 2224, 3073, 199, 1987,
	487, 472, 1739, 699, 942, 1884, 2115, 1921, 1197, 2236,
	2227, 2678, 2496, 1168, 1429, 2234, 2235, 1169, 1396, 2497,
	479, 1680, 3, 479, 1083, 497, 1242, 2728, 1081, 2585,
	491, 479, 479, 942, 667, 195, 479, 2792, 2334, 2142,
	493, 1072, 1071, 2730, 479, 479, 479, 3049, 1167, 2753,
	479, 2324, 2263, 479, 1947, 1948, 2829, 667, 1911, 2231,
	479, 479, 479, 479, 479, 2685, 1439, 2238, 2239, 702,
	193, 2244, 2248, 479, 2512, 890, 2251, 554, 35, 1804,
	479, 553, 34, 1443, 1425, 519, 2330, 2830, 2762, 3051,
	1543, 2249, 479, 929, 2810, 890, 479, 2676, 1219, 892,
	196, 2277, 942, 2582, 1397, 2213, 479, 892, 892, 2264,
	194, 892, 942, 2273, 2245, 1741, 2710, 942, 1217, 2711,
	2426, 2219, 2220, 2221, 1440, 2173, 1168, 668, 2257, 479,
	1169, 479, 2228, 479, 1654, 1425, 479, 929, 929, 929,
	2126, 479, 1207, 479, 853, 552, 31, 479, 2065, 2302,
	668, 2262, 479, 2713, 479, 702, 2313, 518, 577, 551,
	77, 479, 2716, 669, 1970, 1941, 1562, 3003, 571, 2267,
	1474, 2278, 1061, 1232, 1205, 2318, 479, 1231, 929, 2284,
	1203, 2288, 2289, 2310, 1427, 1143, 669, 2214, 1444, 2368,
	1201, 2297, 2092, 2299, 908, 479, 479, 550, 76, 2087,
	2304, 2069, 1082, 2357, 1657, 1644, 1080, 2356, 2309, 1427,
	1595, 2391, 2250, 2305, 2314, 1199, 1061, 2306, 2335, 2307,
	2259, 2260, 2315, 1543, 2319, 479, 2338, 2344, 2345, 2346,
	477, 1056, 1339, 477, 2384, 1803, 477, 1218, 1461, 934,
	479, 2331, 1076, 2390, 1461, 1193, 1445, 1446, 477, 35,
	1079, 2380, 2343, 34, 2712, 1441, 2339, 1216, 477, 477,
	477, 477, 934, 2580, 2347, 547, 22, 1464, 2382, 2367,
	1653, 2397, 2956, 2374, 2085, 2703, 942, 2561, 548, 23,
	521, 1206, 1442, 546, 29, 858, 860, 545, 20, 2429,
	2559, 479, 2439, 2538, 2351, 516, 1543, 2349, 2016, 1562,
	2008, 610, 2353, 1391, 543, 19, 544, 18, 2007, 533,
	15, 2005, 477, 1204, 2408, 2406, 2407, 31, 2002, 1202,
	534, 16, 542, 56, 127, 541, 55, 702, 2412, 1200,
	517, 77, 1153, 1543, 1543, 2446, 2447, 2448, 2417, 532,
	54, 1527, 2415, 610, 1693, 2466, 1526, 2419, 540, 12,
	1524, 1543, 1543, 2470, 1198, 2509, 531, 49, 1447, 898,
	520, 2433, 1693, 2475, 1522, 1519, 1395, 898, 898, 76,
	515, 898, 1562, 2435, 538, 46, 1540, 2438, 539, 47,
	479, 1517, 1515, 1462, 1192, 1451, 2269, 1543, 2465, 1078,
	2501, 1921, 2463, 1398, 1448, 479, 2459, 942, 2505, 1436,
	1430, 2283, 1057, 2286, 530, 48, 2474, 2879, 2533, 1562,
	1562, 1393, 537, 7, 2472, 536, 6, 477, 2453, 2455,
	2456, 2375, 2376, 2377, 1396, 2378, 2379, 1562, 1562, 2551,
	2521, 535, 37, 2571, 1246, 2550, 1480, 22, 2500, 529,
	36, 3046, 2781, 1394, 2513, 2780, 1633, 2502, 2107, 2577,
	23, 2624, 2881, 2510, 1933, 29, 2530, 127, 2518, 20,
	2612, 2748, 1916, 1562, 479, 479, 881, 479, 2515, 2516,
	892, 2581, 479, 1932, 1974, 1969, 19, 1964, 18, 1940,
	942, 15, 942, 2070, 1916, 929, 2592, 2919, 882, 2534,
	1540, 1540, 16, 2365, 56, 1930, 2542, 55, 1600, 1601,
	560, 479, 2365, 2569, 2722, 1191, 2896, 2686, 1949, 2616,
	1397, 54, 1936, 2233, 1247, 2575, 1250, 2108, 1967, 2576,
	12, 2608, 1938, 2955, 2579, 2609, 2759, 2023, 49, 479,
	1944, 2009, 942, 479, 479, 942, 479, 1391, 2001, 2567,
	1868, 2604, 2261, 1605, 479, 1536, 46, 1256, 1257, 3057,
	47, 2605, 942, 2599, 890, 2601, 2589, 2594, 2231, 2381,
	2587, 2596, 890, 890, 2586, 2595, 890, 579, 883, 2525,
	3072, 2629, 2640, 2606, 2342, 2610, 48, 2182, 2183, 1256,
	1257, 2618, 2617, 2645, 7, 1256, 1257, 6, 1326, 2650,
	2626, 479, 2625, 2638, 2082, 2081, 1543, 1258, 892, 2457,
	1395, 2388, 1184, 37, 2635, 2082, 2641, 1183, 590, 2637,
	1259, 36, 2083, 524, 1834, 1793, 1221, 2659, 2449, 1220,
	1336, 2327, 1334, 2777, 2620, 2646, 2327, 1398, 1230, 1682,
	1229, 1215, 1211, 1208, 1407, 1258, 1194, 1154, 904, 1608,
	477, 866, 674, 2839, 2290, 1393, 1643, 1195, 1645, 2247,
	479, 2675, 1889, 2949, 2665, 2159, 2901, 2805, 1396, 1802,
	942, 479, 1337, 942, 52, 2547, 734, 479, 479, 479,
	2704, 2541, 1562, 1540, 2560, 1995, 2562, 1394, 1994, 945,
	1617, 758, 1823, 1694, 760, 479, 1541, 763, 762, 761,
	479, 1542, 479, 1360, 2242, 479, 479, 479, 479, 479,
	759, 2687, 2551, 479, 479, 929, 2692, 1539, 2550, 942,
	1113, 2726, 2027, 929, 2723, 2691, 2693, 2688, 2689, 653,
	1621, 479, 479, 1764, 1781, 2690, 2141, 1330, 726, 738,
	898, 2697, 2702, 2694, 737, 929, 1779, 2551, 1141, 725,
	2252, 892, 2760, 2550, 1397, 479, 2755, 2360, 2772, 2551,
	1678, 1845, 2749, 2099, 1675, 2550, 2558, 494, 2764, 2179,
	2727, 1111, 479, 479, 929, 929, 1851, 898, 1843, 1839,
	2736, 2737, 2771, 1235, 463, 1315, 2758, 2028, 1176, 2743,
	2794, 2369, 2747, 2770, 1061, 2442, 2701, 898, 2055, 942,
	1036, 2768, 477, 1479, 1686, 2745, 2757, 880, 2776, 898,
	463, 2769, 2778, 898, 879, 1921, 2785, 878, 898, 2797,
	2735, 2973, 2784, 2970, 1499, 1499, 2793, 2740, 2817, 1611,
	2744, 477, 2076, 477, 1308, 477, 730, 2241, 479, 524,
	942, 2232, 2337, 1054, 479, 1307, 479, 862, 942, 479,
	2910, 2812, 2029, 1166, 1165, 1164, 2804, 479, 1543, 2275,
	2696, 3067, 2918, 942, 2786, 2787, 2555, 2847, 898, 2967,
	167, 2818, 2819, 164, 166, 165, 2323, 2826, 2775, 2551,
	80, 33, 32, 2860, 106, 2550, 105, 2822, 610, 463,
	1036, 565, 2844, 104, 2843, 103, 2845, 102, 463, 1036,
	101, 2821, 934, 477, 479, 2842, 479, 2824, 610, 929,
	100, 99, 1543, 2551, 479, 2551, 2535, 98, 97, 2550,
	2551, 2550, 2866, 2853, 2868, 96, 2550, 95, 94, 2872,
	93, 92, 91, 90, 1562, 890, 942, 89, 88, 87,
	610, 86, 85, 84, 83, 477, 82, 606, 603, 79,
	463, 477, 2608, 477, 2882, 477, 479, 477, 2878, 477,
	78, 2883, 479, 2864, 2825, 2876, 30, 25, 110, 1658,
	479, 1659, 2552, 2892, 111, 2877, 24, 75, 74, 477,
	477, 477, 2913, 2899, 28, 17, 2907, 11, 1562, 2880,
	1543, 21, 2570, 132, 131, 130, 2906, 129, 128, 479,
	479, 2895, 14, 13, 2570, 125, 479, 610, 2570, 126,
	124, 898, 123, 2570, 2932, 2930, 122, 929, 2700, 121,
	1921, 120, 479, 2915, 2871, 929, 929, 2823, 10, 8,
	479, 109, 479, 9, 479, 2788, 2399, 68, 2952, 69,
	26, 2734, 2934, 2916, 42, 2937, 41, 40, 108, 2739,
	898, 940, 479, 2945, 1029, 479, 2924, 2942, 479, 2962,
	942, 158, 157, 890, 2943, 2944, 1562, 2977, 2978, 156,
	155, 152, 2975, 1921, 2980, 154, 2927, 151, 2982, 2981,
	153, 2983, 150, 2936, 119, 898, 160, 159, 2964, 2969,
	2988, 148, 146, 147, 2551, 479, 2365, 898, 149, 145,
	2550, 2986, 144, 2985, 161, 2946, 118, 2947, 117, 116,
	115, 114, 3000, 113, 5, 3002, 3001, 2, 2923, 1,
	479, 0, 3015, 0, 0, 3027, 3026, 3028, 479, 590,
	2963, 524, 2854, 2855, 0, 0, 0, 0, 0, 3034,
	2941, 0, 0, 2551, 479, 0, 904, 3032, 3033, 2550,
	3031, 2904, 3029, 1845, 1845, 0, 0, 0, 3043, 3041,
	3040, 524, 0, 524, 0, 1540, 904, 3048, 3047, 0,
	477, 0, 2975, 3053, 3054, 1924, 3050, 0, 0, 0,
	0, 3056, 2698, 477, 0, 1921, 0, 0, 0, 477,
	0, 0, 3064, 3063, 0, 3025, 0, 0, 0, 0,
	3071, 477, 0, 3070, 0, 0, 890, 3075, 3076, 0,
	1256, 1257, 0, 0, 3077, 477, 0, 898, 0, 0,
	0, 463, 1980, 3080, 3081, 3084, 0, 0, 0, 0,
	0, 3086, 0, 0, 1991, 1259, 0, 1036, 0, 0,
	0, 1845, 1845, 1845, 0, 2552, 0, 898, 0, 0,
	0, 898, 0, 898, 0, 0, 0, 0, 898, 0,
	1258, 1924, 556, 524, 0, 477, 0, 0, 477, 0,
	477, 0, 477, 39, 477, 477, 0, 934, 0, 0,
	2552, 0, 0, 0, 0, 0, 0, 43, 1924, 0,
	0, 0, 2552, 2717, 0, 0, 0, 0, 1540, 0,
	0, 0, 0, 2128, 2129, 0, 0, 0, 2802, 0,
	0, 0, 0, 0, 0, 555, 0, 0, 2714, 0,
	0, 2707, 0, 0, 0, 0, 1256, 1257, 0, 0,
	0, 0, 0, 0, 2705, 0, 1264, 0, 0, 2709,
	2922, 0, 0, 0, 557, 0, 0, 0, 565, 2802,
	0, 1259, 0, 58, 559, 0, 0, 1702, 59, 2715,
	898, 1286, 1287, 1288, 0, 0, 0, 0, 0, 0,
	0, 1540, 1702, 0, 0, 0, 1258, 0, 0, 0,
	0, 0, 708, 0, 665, 0, 2708, 0, 0, 477,
	61, 2205, 2206, 2207, 0, 0, 0, 1036, 0, 1036,
	0, 0, 0, 0, 710, 0, 0, 0, 1540, 1540,
	1279, 0, 2552, 0, 0, 0, 0, 480, 0, 0,
	477, 477, 477, 0, 477, 0, 1540, 1540, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 709, 0,
	0, 0, 2570, 477, 0, 1029, 2552, 0, 2552, 0,
	0, 0, 1264, 2552, 0, 0, 0, 204, 0, 0,
	0, 0, 1540, 0, 0, 0, 0, 0, 0, 2029,
	0, 0, 666, 0, 0, 0, 0, 1286, 1287, 1288,
	0, 898, 204, 0, 0, 2710, 0, 0, 2711, 0,
	62, 0, 0, 1280, 0, 0, 0, 0, 1390, 835,
	0, 0, 735, 72, 0, 0, 0, 0, 0, 0,
	1845, 1845, 0, 0, 0, 0, 0, 136, 64, 0,
	65, 0, 2713, 0, 0, 0, 1279, 0, 0, 0,
	0, 2716, 0, 0, 0, 0, 0, 0, 168, 0,
	0, 0, 0, 0, 0, 0, 2414, 0, 0, 558,
	0, 0, 107, 0, 0, 2570, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 1702,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 1845,
	1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845,
	1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845, 667, 1845,
	0, 1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 1280,
	0, 169, 0, 0, 930, 0, 0, 943, 943, 0,
	162, 0, 0, 2712, 0, 904, 0, 2552, 163, 0,
	690, 0, 0, 904, 904, 0, 713, 904, 703, 0,
	0, 0, 524, 0, 0, 524, 0, 0, 0, 135,
	0, 0, 0, 524, 524, 0, 0, 0, 524, 0,
	2424, 2425, 0, 0, 0, 0, 477, 1924, 2271, 0,
	0, 1540, 1924, 893, 72, 2271, 2552, 0, 0, 0,
	0, 0, 1924, 2271, 1924, 2271, 2271, 0, 0, 707,
	0, 668, 0, 0, 0, 477, 931, 0, 0, 944,
	944, 0, 1479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 477, 0, 0, 0, 934, 1260,
	1261, 1262, 1263, 1265, 1266, 0, 0, 669, 477, 2476,
	2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486,
	2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 0, 2498,
	0, 1499, 0, 1499, 0, 477, 2050, 0, 477, 0,
	0, 0, 0, 477, 0, 477, 0, 39, 0, 934,
	0, 0, 0, 0, 1924, 0, 524, 0, 0, 0,
	0, 43, 0, 1924, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1036, 0,
	1256, 1257, 0, 1289, 1290, 1291, 1299, 1300, 1301, 2051,
	0, 0, 0, 0, 0, 0, 0, 2395, 1036, 0,
	0, 0, 0, 0, 0, 1259, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2052, 0,
	0, 0, 0, 0, 0, 0, 0, 2416, 559, 0,
	1258, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 477, 0, 0, 1275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	930, 0, 0, 2461, 0, 0, 0, 1281, 1282, 1283,
	1284, 0, 0, 1540, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 930, 930,
	0, 0, 0, 0, 0, 930, 0, 0, 1296, 1306,
	0, 1286, 1287, 1288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1038,
	1040, 1043, 1302, 1303, 0, 0, 0, 1540, 0, 0,
	1273, 1274, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 931, 931, 1294, 0, 0, 904, 0, 0, 0,
	1279, 0, 524, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 64, 0, 65, 0, 1304, 524, 0, 1326,
	931, 931, 0, 0, 0, 0, 0, 931, 0, 0,
	703, 0, 168, 2549, 0, 0, 0, 556, 0, 0,
	0, 0, 0, 558, 0, 0, 107, 0, 39, 0,
	0, 0, 0, 1407, 0, 1540, 0, 930, 0, 0,
	0, 0, 43, 0, 0, 1407, 1285, 0, 170, 1407,
	1140, 1845, 0, 0, 1407, 0, 1144, 0, 0, 0,
	0, 0, 0, 1280, 0, 896, 1924, 1499, 0, 1499,
	555, 0, 0, 0, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 713, 169, 1297, 0, 713, 0,
	1845, 0, 0, 0, 162, 0, 0, 0, 0, 557,
	0, 0, 163, 1924, 904, 0, 0, 0, 58, 559,
	473, 0, 0, 59, 0, 0, 0, 0, 0, 931,
	0, 0, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 1036, 0, 556, 0, 934, 477, 0, 477, 0,
	0, 0, 0, 0, 39, 61, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	1295, 0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 0,
	1269, 1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 0,
	0, 0, 0, 0, 0, 1845, 555, 0, 690, 0,
	0, 0, 0, 2666, 0, 1309, 1310, 1311, 1312, 1313,
	0, 2809, 0, 0, 0, 0, 0, 0, 1322, 0,
	1318, 0, 1321, 0, 0, 557, 0, 0, 1331, 1327,
	0, 0, 0, 0, 58, 559, 0, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2834, 0, 0, 0, 0, 62, 0, 904, 0, 0,
	0, 0, 1036, 0, 0, 0, 0, 0, 0, 912,
	0, 61, 0, 524, 938, 0, 0, 0, 0, 1924,
	2271, 1924, 136, 64, 0, 65, 0, 0, 0, 0,
	2182, 2183, 0, 2200, 2201, 2202, 2549, 1036, 0, 0,
	0, 0, 1924, 168, 2271, 0, 0, 1036, 1036, 477,
	1924, 2271, 0, 0, 558, 477, 477, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2549, 0, 1036, 1991, 0, 0, 0, 0, 170,
	0, 0, 0, 2549, 0, 2898, 0, 0, 2197, 0,
	0, 0, 0, 0, 0, 0, 0, 1924, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1384, 1384, 1384,
	0, 62, 0, 0, 2395, 2395, 169, 0, 0, 0,
	0, 72, 0, 0, 1406, 162, 0, 0, 1411, 0,
	0, 0, 0, 163, 0, 0, 0, 0, 136, 64,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 2188, 0, 0, 168,
	0, 0, 0, 0, 0, 0, 0, 2090, 0, 0,
	558, 0, 0, 107, 0, 0, 0, 0, 930, 2204,
	524, 0, 0, 0, 0, 943, 1924, 0, 2271, 0,
	0, 2828, 0, 0, 0, 170, 943, 0, 0, 477,
	0, 0, 2203, 2549, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2198, 0, 169, 1407, 0, 0, 0, 2549, 0, 2549,
	0, 162, 0, 0, 2549, 0, 477, 0, 477, 163,
	0, 0, 0, 0, 0, 0, 1036, 1256, 1257, 0,
	931, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	135, 0, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 1259, 0, 204, 0, 0, 0, 0, 0,
	0, 930, 0, 204, 0, 0, 0, 0, 2461, 0,
	0, 0, 0, 1052, 524, 0, 0, 1258, 0, 1070,
	0, 0, 2828, 2199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 0, 0,
	0, 1090, 1090, 1090, 938, 0, 0, 0, 0, 0,
	0, 1924, 2271, 0, 0, 204, 1407, 0, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2271, 0, 0, 0, 0, 0,
	0, 0, 1036, 931, 1036, 0, 477, 0, 0, 0,
	0, 0, 0, 1264, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 2960, 0, 0, 1036, 0, 0,
	477, 713, 713, 0, 0, 0, 943, 944, 1286, 1287,
	1288, 0, 0, 2194, 2195, 2196, 0, 0, 2549, 0,
	2193, 2191, 2192, 2184, 2185, 2186, 2187, 2189, 2190, 0,
	0, 0, 0, 0, 0, 0, 0, 2461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1279, 0, 0,
	0, 0, 1036, 0, 0, 0, 0, 2549, 0, 0,
	1924, 1676, 0, 1681, 0, 0, 0, 0, 690, 1688,
	943, 690, 690, 0, 0, 0, 2828, 0, 944, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 0, 1744, 0, 1746, 1747, 1748,
	1749, 556, 0, 0, 0, 0, 0, 0, 0, 1762,
	1280, 0, 39, 0, 0, 0, 1772, 0, 0, 0,
	943, 0, 703, 1322, 0, 0, 43, 1321, 0, 0,
	0, 0, 944, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 0, 1814, 1815, 1816, 1817, 1818, 0, 0,
	0, 0, 0, 0, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1841, 0, 1853, 0, 0, 930,
	1858, 1863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 943, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 559, 0, 0, 893, 59, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 0, 944, 1268,
	1260, 1261, 1262, 1263, 1265, 1266, 0, 0, 0, 61,
	0, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	0, 0, 0, 930, 930, 930, 0, 0, 930, 1256,
	1257, 931, 1289, 1290, 1291, 1299, 1300, 1301, 0, 72,
	0, 0, 0, 944, 0, 0, 0, 1292, 0, 0,
	0, 1982, 1983, 0, 1259, 0, 0, 1305, 0, 0,
	0, 0, 0, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1258,
	0, 0, 0, 0, 0, 0, 0, 1278, 72, 0,
	72, 0, 0, 0, 1275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 931, 931, 0, 62,
	931, 0, 72, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 943, 0, 0, 0, 136, 64, 0, 65,
	0, 0, 0, 0, 0, 0, 1281, 1282, 1283, 1284,
	0, 0, 0, 0, 0, 1264, 0, 168, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 558, 0,
	0, 107, 0, 0, 0, 0, 0, 1296, 1306, 0,
	1286, 1287, 1288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 1302, 1303, 0, 0, 0, 0, 0, 0, 1273,
	1274, 0, 0, 0, 944, 1477, 0, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 1279,
	169, 0, 0, 0, 0, 0, 72, 0, 0, 162,
	72, 0, 0, 0, 0, 1304, 1506, 163, 1506, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1293,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1280, 0, 0, 0, 1598, 0, 2112, 2113,
	0, 0, 0, 0, 2118, 0, 1762, 0, 0, 0,
	0, 0, 0, 0, 0, 1297, 0, 0, 0, 0,
	0, 0, 0, 2131, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2137, 0, 1642, 0,
	0, 0, 2144, 0, 1648, 0, 1649, 2149, 1650, 0,
	1651, 943, 1652, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2163, 0, 0, 0, 0, 0,
	0, 0, 1661, 1070, 0, 0, 0, 0, 0, 0,
	943, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 0, 1269,
	1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 1322, 0,
	0, 0, 1321, 0, 0, 0, 2168, 0, 1863, 1863,
	1863, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1384, 0, 0, 944, 0, 893, 0, 0, 2237, 0,
	930, 0, 0, 893, 893, 0, 0, 893, 0, 943,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 943,
	0, 0, 944, 0, 943, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 930, 930, 0, 0, 0,
	0, 0, 0, 0, 2293, 0, 0, 0, 1256, 1257,
	0, 72, 0, 0, 1299, 1300, 1301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 1259, 0, 930, 1305, 0, 0, 0,
	72, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 944, 0, 1258, 0,
	0, 0, 0, 0, 0, 0, 1278, 0, 0, 0,
	0, 0, 0, 1910, 72, 0, 931, 931, 931, 0,
	0, 0, 72, 0, 0, 2182, 2183, 2358, 2200, 2201,
	2202, 0, 0, 0, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 2431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 931, 938, 0,
	0, 0, 0, 0, 0, 1281, 1282, 1283, 1284, 0,
	0, 0, 0, 943, 1264, 0, 0, 0, 0, 0,
	713, 713, 0, 2197, 1256, 1257, 0, 0, 0, 0,
	0, 0, 0, 713, 0, 0, 1296, 1306, 0, 1286,
	1287, 1288, 0, 0, 0, 72, 0, 0, 2032, 1259,
	2418, 1090, 0, 1090, 1688, 1090, 0, 938, 938, 0,
	2422, 0, 0, 2423, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 2428, 0, 0, 0, 0,
	0, 1294, 1278, 0, 2436, 0, 0, 0, 1279, 0,
	0, 2188, 2440, 0, 0, 944, 2237, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2467, 2468, 2469, 0, 0,
	0, 0, 2471, 0, 0, 0, 526, 0, 0, 2473,
	0, 0, 0, 0, 943, 0, 0, 2203, 0, 0,
	0, 1281, 1282, 1283, 1284, 0, 0, 0, 0, 556,
	1264, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	39, 0, 2503, 2504, 0, 2198, 0, 0, 0, 0,
	0, 1280, 2086, 0, 43, 1286, 1287, 1288, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2520, 0, 0, 1297, 0, 893, 0, 0, 0,
	0, 0, 555, 2095, 938, 2097, 0, 0, 0, 2182,
	2183, 0, 2200, 2201, 2202, 0, 944, 943, 0, 943,
	0, 0, 930, 0, 1279, 0, 2110, 2430, 2543, 0,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 559, 0, 0, 0, 59, 0, 0, 2199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2197, 1295, 943,
	0, 0, 943, 0, 0, 0, 1298, 61, 1269, 1267,
	1268, 1260, 1261, 1262, 1263, 1265, 1266, 0, 0, 943,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 944, 0, 0, 931, 0, 0, 1280, 0, 0,
	1384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2619, 0, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2194, 2195,
	2196, 944, 0, 0, 944, 2193, 2191, 2192, 2184, 2185,
	2186, 2187, 2189, 2190, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 2649, 0, 62, 0, 2652,
	2653, 2203, 0, 2655, 0, 0, 0, 0, 0, 0,
	2657, 0, 0, 0, 2660, 0, 0, 943, 0, 0,
	943, 0, 0, 0, 136, 64, 0, 65, 0, 2198,
	0, 2667, 0, 0, 1269, 1267, 1268, 1260, 1261, 1262,
	1263, 1265, 1266, 0, 0, 168, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 558, 0, 0, 107,
	0, 0, 930, 0, 0, 0, 943, 0, 2680, 2268,
	930, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 0, 893, 0, 0,
	0, 0, 930, 0, 0, 0, 0, 0, 1070, 944,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2199, 0, 0, 0, 0, 2724, 169, 0,
	0, 930, 930, 0, 0, 0, 0, 162, 0, 0,
	0, 2322, 0, 0, 0, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 943, 0, 944, 0,
	0, 0, 931, 0, 0, 0, 527, 0, 2340, 0,
	0, 0, 0, 0, 0, 0, 2348, 0, 2350, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 72, 943, 0, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 0, 0,
	0, 0, 0, 931, 931, 0, 0, 0, 0, 0,
	943, 0, 2194, 2195, 2196, 0, 2798, 2799, 0, 2193,
	2191, 2192, 2184, 2185, 2186, 2187, 2189, 2190, 944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2808, 0, 0, 0, 0, 2182, 2183, 0, 2200, 2201,
	2202, 0, 0, 0, 2816, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 2420, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	0, 0, 0, 943, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	2852, 0, 0, 2197, 0, 0, 0, 0, 0, 0,
	0, 1256, 1257, 0, 1289, 1290, 1291, 1299, 1300, 1301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1292,
	0, 0, 72, 0, 0, 0, 1259, 0, 931, 1305,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1256, 1257, 1762, 1289, 1290, 1291, 1299, 1300, 1301, 0,
	0, 1258, 0, 0, 930, 944, 0, 0, 1292, 1278,
	0, 2188, 930, 930, 0, 1259, 1275, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1258, 0, 2909, 0, 0, 2912, 0, 943, 1278, 0,
	0, 0, 0, 0, 0, 1275, 0, 2203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1281, 1282,
	1283, 1284, 0, 0, 0, 0, 0, 1264, 0, 0,
	0, 0, 0, 0, 0, 2198, 931, 0, 0, 0,
	0, 0, 0, 0, 931, 931, 0, 0, 0, 1296,
	1306, 0, 1286, 1287, 1288, 0, 0, 1281, 1282, 1283,
	1284, 0, 0, 0, 0, 0, 1264, 0, 0, 0,
	0, 0, 0, 1302, 1303, 0, 0, 0, 0, 944,
	0, 1273, 1274, 0, 0, 0, 0, 2593, 1296, 1306,
	0, 1286, 1287, 1288, 1294, 0, 0, 0, 0, 0,
	0, 1279, 0, 0, 0, 0, 0, 0, 0, 2999,
	2999, 0, 1302, 1303, 0, 0, 0, 1304, 2199, 0,
	1273, 1274, 0, 0, 0, 0, 0, 3016, 0, 0,
	0, 1293, 0, 1294, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 2639,
	0, 938, 0, 0, 0, 2999, 1304, 0, 0, 2642,
	0, 0, 0, 0, 0, 0, 0, 1285, 0, 0,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1285, 1297, 0, 0,
	0, 0, 1560, 0, 0, 0, 2999, 0, 2194, 2195,
	2196, 0, 0, 1280, 0, 2193, 2191, 2192, 2184, 2185,
	2186, 2187, 2189, 2190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1297, 1571, 1556, 1561,
	1544, 1581, 1580, 0, 0, 1546, 1545, 0, 0, 0,
	0, 0, 1589, 1588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1295, 0, 0, 1270, 1271, 1277, 1276, 1272, 1298,
	0, 1269, 1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266,
	0, 0, 1582, 0, 1578, 1577, 0, 0, 2167, 0,
	0, 0, 2738, 0, 1576, 0, 0, 0, 1070, 0,
	1295, 0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 0,
	1269, 1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 0,
	0, 1575, 1573, 1574, 0, 0, 0, 2166, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1564,
	1559, 1565, 1566, 1567, 1568, 1569, 0, 1563, 0, 0,
	0, 0, 0, 0, 0, 0, 1586, 1587, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1579, 0,
	0, 0, 1557, 1558, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2835, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1572, 0, 0, 0, 1697,
	1695, 1696, 1699, 1698, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2873,
	0, 2875, 1549, 1550, 1551, 1552, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1570, 1553, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1547, 0, 0, 1583, 1584, 1585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1554, 0,
	0, 0, 0, 1590, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2948,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2966, 251, 252, 253, 254, 946, 255,
	947, 948, 949, 950, 210, 951, 952, 953, 954, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 955,
	262, 263, 264, 265, 266, 267, 956, 957, 215, 216,
	217, 958, 268, 218, 959, 905, 960, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 961, 278, 0,
	279, 280, 962, 837, 281, 282, 283, 963, 964, 966,
	965, 967, 968, 969, 284, 285, 481, 286, 287, 288,
	219, 220, 970, 289, 971, 290, 972, 291, 973, 974,
	292, 293, 975, 294, 295, 976, 0, 977, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 978, 838,
	979, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 980, 308, 981, 982, 839, 309, 983, 310,
	225, 984, 226, 985, 311, 312, 313, 314, 315, 316,
	227, 228, 841, 986, 318, 0, 0, 0, 987, 317,
	319, 326, 988, 840, 320, 229, 322, 321, 323, 324,
	325, 230, 989, 231, 990, 327, 842, 843, 328, 329,
	330, 844, 331, 332, 0, 0, 333, 334, 335, 991,
	337, 336, 992, 232, 845, 338, 339, 846, 993, 340,
	341, 994, 995, 342, 0, 343, 907, 906, 344, 345,
	347, 348, 346, 847, 349, 350, 352, 351, 996, 997,
	848, 998, 233, 353, 234, 354, 355, 999, 356, 357,
	1000, 1001, 358, 359, 1002, 1003, 360, 235, 849, 361,
	850, 236, 362, 363, 364, 365, 366, 367, 368, 1004,
	369, 237, 370, 238, 371, 1005, 372, 373, 374, 375,
	376, 239, 377, 378, 1006, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 1007, 391,
	851, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 1008, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 1009, 416, 397, 398, 417,
	852, 418, 241, 419, 420, 1010, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 1011, 426, 242, 1012, 430,
	431, 1013, 432, 433, 434, 435, 436, 437, 438, 439,
	1014, 243, 244, 440, 1015, 1016, 441, 442, 245, 246,
	1017, 443, 444, 445, 446, 1018, 1019, 447, 448, 449,
	451, 1020, 452, 1021, 450, 453, 454, 455, 247, 248,
	1022, 1023, 456, 249, 1024, 1025, 1026, 1027, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 1894, 0, 0, 0, 0, 0,
	0, 0, 0, 1895, 251, 252, 253, 254, 946, 255,
	947, 948, 949, 950, 210, 951, 952, 953, 954, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 955,
	262, 263, 264, 265, 266, 267, 956, 957, 215, 216,
	217, 958, 268, 218, 959, 905, 960, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 961, 278, 0,
	279, 280, 962, 837, 281, 282, 283, 963, 964, 966,
	965, 967, 968, 969, 284, 285, 481, 286, 287, 288,
	219, 220, 970, 289, 971, 290, 972, 291, 973, 974,
	292, 293, 975, 294, 295, 976, 0, 977, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 978, 838,
	979, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 980, 308, 981, 982, 839, 309, 983, 310,
	225, 984, 226, 985, 311, 312, 313, 314, 315, 316,
	227, 228, 841, 986, 318, 0, 0, 0, 987, 317,
	319, 326, 988, 840, 320, 229, 322, 321, 323, 324,
	325, 230, 989, 231, 990, 327, 842, 843, 328, 329,
	330, 844, 331, 332, 0, 0, 333, 334, 335, 991,
	337, 336, 992, 232, 845, 338, 339, 846, 993, 340,
	341, 994, 995, 342, 0, 343, 907, 906, 344, 345,
	347, 348, 346, 847, 349, 350, 352, 351, 996, 997,
	848, 998, 233, 353, 234, 354, 355, 999, 356, 357,
	1000, 1001, 358, 359, 1002, 1003, 360, 235, 849, 361,
	850, 236, 362, 363, 364, 365, 366, 367, 368, 1004,
	369, 237, 370, 238, 371, 1005, 372, 373, 374, 375,
	376, 239, 377, 378, 1006, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 1007, 391,
	851, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 1008, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 1009, 416, 397, 398, 417,
	852, 418, 241, 419, 420, 1010, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 1011, 426, 242, 1012, 430,
	431, 1013, 432, 433, 434, 435, 436, 437, 438, 439,
	1014, 243, 244, 440, 1015, 1016, 441, 442, 245, 246,
	1017, 443, 444, 445, 446, 1018, 1019, 447, 448, 449,
	451, 1020, 452, 1021, 450, 453, 454, 455, 247, 248,
	1022, 1023, 456, 249, 1024, 1025, 1026, 1027, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2695, 251, 252, 253, 254, 946,
	255, 947, 948, 949, 950, 210, 951, 952, 953, 954,
	256, 257, 258, 211, 212, 259, 213, 260, 261, 214,
	955, 262, 263, 264, 265, 266, 267, 956, 957, 215,
	216, 217, 958, 268, 218, 959, 905, 960, 269, 270,
	271, 272, 273, 0, 275, 276, 277, 274, 961, 278,
	0, 279, 280, 962, 837, 281, 282, 283, 963, 964,
	966, 965, 967, 968, 969, 284, 285, 481, 286, 287,
	288, 219, 220, 970, 289, 971, 290, 972, 291, 973,
	974, 292, 293, 975, 294, 295, 976, 0, 977, 221,
	299, 296, 297, 300, 301, 298, 302, 222, 223, 978,
	838, 979, 0, 0, 0, 0, 303, 304, 224, 305,
	306, 0, 307, 980, 308, 981, 982, 839, 309, 983,
	310, 225, 984, 226, 985, 311, 312, 313, 314, 315,
	316, 227, 228, 841, 986, 318, 0, 0, 0, 987,
	317, 319, 326, 988, 840, 320, 229, 322, 321, 323,
	324, 325, 230, 989, 231, 990, 327, 842, 843, 328,
	329, 330, 844, 331, 332, 0, 0, 333, 334, 335,
	991, 337, 336, 992, 232, 845, 338, 339, 846, 993,
	340, 341, 994, 995, 342, 0, 343, 907, 906, 344,
	345, 347, 348, 346, 847, 349, 350, 352, 351, 996,
	997, 848, 998, 233, 353, 234, 354, 355, 999, 356,
	357, 1000, 1001, 358, 359, 1002, 1003, 360, 235, 849,
	361, 850, 236, 362, 363, 364, 365, 366, 367, 368,
	1004, 369, 237, 370, 238, 371, 1005, 372, 373, 374,
	375, 376, 239, 377, 378, 1006, 379, 380, 381, 382,
	383, 0, 385, 386, 384, 387, 388, 389, 390, 1007,
	391, 851, 392, 393, 394, 395, 240, 396, 0, 400,
	401, 402, 403, 404, 405, 406, 1008, 412, 413, 407,
	409, 410, 411, 408, 414, 415, 1009, 416, 397, 398,
	417, 852, 418, 241, 419, 420, 1010, 429, 421, 422,
	423, 399, 424, 427, 428, 425, 1011, 426, 242, 1012,
	430, 431, 1013, 432, 433, 434, 435, 436, 437, 438,
	439, 1014, 243, 244, 440, 1015, 1016, 441, 442, 245,
	246, 1017, 443, 444, 445, 446, 1018, 1019, 447, 448,
	449, 451, 1020, 452, 1021, 450, 453, 454, 455, 247,
	248, 1022, 1023, 456, 249, 1024, 1025, 1026, 1027, 457,
	458, 250, 459, 460, 461, 941, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2803, 251, 252, 253, 254, 946, 255, 947, 948, 949,
	950, 210, 951, 952, 953, 954, 256, 257, 258, 211,
	212, 259, 213, 260, 261, 214, 955, 262, 263, 264,
	265, 266, 267, 956, 957, 215, 216, 217, 958, 268,
	218, 959, 905, 960, 269, 270, 271, 272, 273, 0,
	275, 276, 277, 274, 961, 278, 0, 279, 280, 962,
	837, 281, 282, 283, 963, 964, 966, 965, 967, 968,
	969, 284, 285, 481, 286, 287, 288, 219, 220, 970,
	289, 971, 290, 972, 291, 973, 974, 292, 293, 975,
	294, 295, 976, 0, 977, 221, 299, 296, 297, 300,
	301, 298, 302, 222, 223, 978, 838, 979, 0, 0,
	0, 0, 303, 304, 224, 305, 306, 0, 307, 980,
	308, 981, 982, 839, 309, 983, 310, 225, 984, 226,
	985, 311, 312, 313, 314, 315, 316, 227, 228, 841,
	986, 318, 0, 0, 0, 987, 317, 319, 326, 988,
	840, 320, 229, 322, 321, 323, 324, 325, 230, 989,
	231, 990, 327, 842, 843, 328, 329, 330, 844, 331,
	332, 0, 0, 333, 334, 335, 991, 337, 336, 992,
	232, 845, 338, 339, 846, 993, 340, 341, 994, 995,
	342, 0, 343, 907, 906, 344, 345, 347, 348, 346,
	847, 349, 350, 352, 351, 996, 997, 848, 998, 233,
	353, 234, 354, 355, 999, 356, 357, 1000, 1001, 358,
	359, 1002, 1003, 360, 235, 849, 361, 850, 236, 362,
	363, 364, 365, 366, 367, 368, 1004, 369, 237, 370,
	238, 371, 1005, 372, 373, 374, 375, 376, 239, 377,
	378, 1006, 379, 380, 381, 382, 383, 0, 385, 386,
	384, 387, 388, 389, 390, 1007, 391, 851, 392, 393,
	394, 395, 240, 396, 0, 400, 401, 402, 403, 404,
	405, 406, 1008, 412, 413, 407, 409, 410, 411, 408,
	414, 415, 1009, 416, 397, 398, 417, 852, 418, 241,
	419, 420, 1010, 429, 421, 422, 423, 399, 424, 427,
	428, 425, 1011, 426, 242, 1012, 430, 431, 1013, 432,
	433, 434, 435, 436, 437, 438, 439, 1014, 243, 244,
	440, 1015, 1016, 441, 442, 245, 246, 1017, 443, 444,
	445, 446, 1018, 1019, 447, 448, 449, 451, 1020, 452,
	1021, 450, 453, 454, 455, 247, 248, 1022, 1023, 456,
	249, 1024, 1025, 1026, 1027, 457, 458, 250, 459, 460,
	461, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2443, 251, 252, 253,
	254, 946, 255, 947, 948, 949, 950, 210, 951, 952,
	953, 954, 256, 257, 258, 211, 212, 259, 213, 260,
	261, 214, 955, 262, 263, 264, 265, 266, 267, 956,
	957, 215, 216, 217, 958, 268, 218, 959, 905, 960,
	269, 270, 271, 272, 273, 0, 275, 276, 277, 274,
	961, 278, 0, 279, 280, 962, 837, 281, 282, 283,
	963, 964, 966, 965, 967, 968, 969, 284, 285, 481,
	286, 287, 288, 219, 220, 970, 289, 971, 290, 972,
	291, 973, 974, 292, 293, 975, 294, 295, 976, 0,
	977, 221, 299, 296, 297, 300, 301, 298, 302, 222,
	223, 978, 838, 979, 0, 0, 0, 0, 303, 304,
	224, 305, 306, 0, 307, 980, 308, 981, 982, 839,
	309, 983, 310, 225, 984, 226, 985, 311, 312, 313,
	314, 315, 316, 227, 228, 841, 986, 318, 0, 0,
	0, 987, 317, 319, 326, 988, 840, 320, 229, 322,
	321, 323, 324, 325, 230, 989, 231, 990, 327, 842,
	843, 328, 329, 330, 844, 331, 332, 0, 0, 333,
	334, 335, 991, 337, 336, 992, 232, 845, 338, 339,
	846, 993, 340, 341, 994, 995, 342, 0, 343, 907,
	906, 344, 345, 347, 348, 346, 847, 349, 350, 352,
	351, 996, 997, 848, 998, 233, 353, 234, 354, 355,
	999, 356, 357, 1000, 1001, 358, 359, 1002, 1003, 360,
	235, 849, 361, 850, 236, 362, 363, 364, 365, 366,
	367, 368, 1004, 369, 237, 370, 238, 371, 1005, 372,
	373, 374, 375, 376, 239, 377, 378, 1006, 379, 380,
	381, 382, 383, 0, 385, 386, 384, 387, 388, 389,
	390, 1007, 391, 851, 392, 393, 394, 395, 240, 396,
	0, 400, 401, 402, 403, 404, 405, 406, 1008, 412,
	413, 407, 409, 410, 411, 408, 414, 415, 1009, 416,
	397, 398, 417, 852, 418, 241, 419, 420, 1010, 429,
	421, 422, 423, 399, 424, 427, 428, 425, 1011, 426,
	242, 1012, 430, 431, 1013, 432, 433, 434, 435, 436,
	437, 438, 439, 1014, 243, 244, 440, 1015, 1016, 441,
	442, 245, 246, 1017, 443, 444, 445, 446, 1018, 1019,
	447, 448, 449, 451, 1020, 452, 1021, 450, 453, 454,
	455, 247, 248, 1022, 1023, 456, 249, 1024, 1025, 1026,
	1027, 457, 458, 250, 459, 460, 461, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2326, 251, 252, 253, 254, 946, 255, 947,
	948, 949, 950, 210, 951, 952, 953, 954, 256, 257,
	258, 211, 212, 259, 213, 260, 261, 214, 955, 262,
	263, 264, 265, 266, 267, 956, 957, 215, 216, 217,
	958, 268, 218, 959, 905, 960, 269, 270, 271, 272,
	273, 0, 275, 276, 277, 274, 961, 278, 0, 279,
	280, 962, 837, 281, 282, 283, 963, 964, 966, 965,
	967, 968, 969, 284, 285, 481, 286, 287, 288, 219,
	220, 970, 289, 971, 290, 972, 291, 973, 974, 292,
	293, 975, 294, 295, 976, 0, 977, 221, 299, 296,
	297, 300, 301, 298, 302, 222, 223, 978, 838, 979,
	0, 0, 0, 0, 303, 304, 224, 305, 306, 0,
	307, 980, 308, 981, 982, 839, 309, 983, 310, 225,
	984, 226, 985, 311, 312, 313, 314, 315, 316, 227,
	228, 841, 986, 318, 0, 0, 0, 987, 317, 319,
	326, 988, 840, 320, 229, 322, 321, 323, 324, 325,
	230, 989, 231, 990, 327, 842, 843, 328, 329, 330,
	844, 331, 332, 0, 0, 333, 334, 335, 991, 337,
	336, 992, 232, 845, 338, 339, 846, 993, 340, 341,
	994, 995, 342, 0, 343, 907, 906, 344, 345, 347,
	348, 346, 847, 349, 350, 352, 351, 996, 997, 848,
	998, 233, 353, 234, 354, 355, 999, 356, 357, 1000,
	1001, 358, 359, 1002, 1003, 360, 235, 849, 361, 850,
	236, 362, 363, 364, 365, 366, 367, 368, 1004, 369,
	237, 370, 238, 371, 1005, 372, 373, 374, 375, 376,
	239, 377, 378, 1006, 379, 380, 381, 382, 383, 0,
	385, 386, 384, 387, 388, 389, 390, 1007, 391, 851,
	392, 393, 394, 395, 240, 396, 0, 400, 401, 402,
	403, 404, 405, 406, 1008, 412, 413, 407, 409, 410,
	411, 408, 414, 415, 1009, 416, 397, 398, 417, 852,
	418, 241, 419, 420, 1010, 429, 421, 422, 423, 399,
	424, 427, 428, 425, 1011, 426, 242, 1012, 430, 431,
	1013, 432, 433, 434, 435, 436, 437, 438, 439, 1014,
	243, 244, 440, 1015, 1016, 441, 442, 245, 246, 1017,
	443, 444, 445, 446, 1018, 1019, 447, 448, 449, 451,
	1020, 452, 1021, 450, 453, 454, 455, 247, 248, 1022,
	1023, 456, 249, 1024, 1025, 1026, 1027, 457, 458, 250,
	459, 460, 461, 941, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1785, 251,
	252, 253, 254, 946, 255, 947, 948, 949, 950, 210,
	951, 952, 953, 954, 256, 257, 258, 211, 212, 259,
	213, 260, 261, 214, 955, 262, 263, 264, 265, 266,
	267, 956, 957, 215, 216, 217, 958, 268, 218, 959,
	905, 960, 269, 270, 271, 272, 273, 0, 275, 276,
	277, 274, 961, 278, 0, 279, 280, 962, 837, 281,
	282, 283, 963, 964, 966, 965, 967, 968, 969, 284,
	285, 481, 286, 287, 288, 219, 220, 970, 289, 971,
	290, 972, 291, 973, 974, 292, 293, 975, 294, 295,
	976, 0, 977, 221, 299, 296, 297, 300, 301, 298,
	302, 222, 223, 978, 838, 979, 0, 0, 0, 0,
	303, 304, 224, 305, 306, 0, 307, 980, 308, 981,
	982, 839, 309, 983, 310, 225, 984, 226, 985, 311,
	312, 313, 314, 315, 316, 227, 228, 841, 986, 318,
	0, 0, 0, 987, 317, 319, 326, 988, 840, 320,
	229, 322, 321, 323, 324, 325, 230, 989, 231, 990,
	327, 842, 843, 328, 329, 330, 844, 331, 332, 0,
	0, 333, 334, 335, 991, 337, 336, 992, 232, 845,
	338, 339, 846, 993, 340, 341, 994, 995, 342, 0,
	343, 907, 906, 344, 345, 347, 348, 346, 847, 349,
	350, 352, 351, 996, 997, 848, 998, 233, 353, 234,
	354, 355, 999, 356, 357, 1000, 1001, 358, 359, 1002,
	1003, 360, 235, 849, 361, 850, 236, 362, 363, 364,
	365, 366, 367, 368, 1004, 369, 237, 370, 238, 371,
	1005, 372, 373, 374, 375, 376, 239, 377, 378, 1006,
	379, 380, 381, 382, 383, 0, 385, 386, 384, 387,
	388, 389, 390, 1007, 391, 851, 392, 393, 394, 395,
	240, 396, 0, 400, 401, 402, 403, 404, 405, 406,
	1008, 412, 413, 407, 409, 410, 411, 408, 414, 415,
	1009, 416, 397, 398, 417, 852, 418, 241, 419, 420,
	1010, 429, 421, 422, 423, 399, 424, 427, 428, 425,
	1011, 426, 242, 1012, 430, 431, 1013, 432, 433, 434,
	435, 436, 437, 438, 439, 1014, 243, 244, 440, 1015,
	1016, 441, 442, 245, 246, 1017, 443, 444, 445, 446,
	1018, 1019, 447, 448, 449, 451, 1020, 452, 1021, 450,
	453, 454, 455, 247, 248, 1022, 1023, 456, 249, 1024,
	1025, 1026, 1027, 457, 458, 250, 459, 460, 461, 941,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1471, 251, 252, 253, 254, 946,
	255, 947, 948, 949, 950, 210, 951, 952, 953, 954,
	256, 257, 258, 211, 212, 259, 213, 260, 261, 214,
	955, 262, 263, 264, 265, 266, 267, 956, 957, 215,
	216, 217, 958, 268, 218, 959, 905, 960, 269, 270,
	271, 272, 273, 0, 275, 276, 277, 274, 961, 278,
	0, 279, 280, 962, 837, 281, 282, 283, 963, 964,
	966, 965, 967, 968, 969, 284, 285, 481, 286, 287,
	288, 219, 220, 970, 289, 971, 290, 972, 291, 973,
	974, 292, 293, 975, 294, 295, 976, 0, 977, 221,
	299, 296, 297, 300, 301, 298, 302, 222, 223, 978,
	838, 979, 0, 0, 0, 0, 303, 304, 224, 305,
	306, 0, 307, 980, 308, 981, 982, 839, 309, 983,
	310, 225, 984, 226, 985, 311, 312, 313, 314, 315,
	316, 227, 228, 841, 986, 318, 0, 0, 0, 987,
	317, 319, 326, 988, 840, 320, 229, 322, 321, 323,
	324, 325, 230, 989, 231, 990, 327, 842, 843, 328,
	329, 330, 844, 331, 332, 0, 0, 333, 334, 335,
	991, 337, 336, 992, 232, 845, 338, 339, 846, 993,
	340, 341, 994, 995, 342, 0, 343, 907, 906, 344,
	345, 347, 348, 346, 847, 349, 350, 352, 351, 996,
	997, 848, 998, 233, 353, 234, 354, 355, 999, 356,
	357, 1000, 1001, 358, 359, 1002, 1003, 360, 235, 849,
	361, 850, 236, 362, 363, 364, 365, 366, 367, 368,
	1004, 369, 237, 370, 238, 371, 1005, 372, 373, 374,
	375, 376, 239, 377, 378, 1006, 379, 380, 381, 382,
	383, 0, 385, 386, 384, 387, 388, 389, 390, 1007,
	391, 851, 392, 393, 394, 395, 240, 396, 0, 400,
	401, 402, 403, 404, 405, 406, 1008, 412, 413, 407,
	409, 410, 411, 408, 414, 415, 1009, 416, 397, 398,
	417, 852, 418, 241, 419, 420, 1010, 429, 421, 422,
	423, 399, 424, 427, 428, 425, 1011, 426, 242, 1012,
	430, 431, 1013, 432, 433, 434, 435, 436, 437, 438,
	439, 1014, 243, 244, 440, 1015, 1016, 441, 442, 245,
	246, 1017, 443, 444, 445, 446, 1018, 1019, 447, 448,
	449, 451, 1020, 452, 1021, 450, 453, 454, 455, 247,
	248, 1022, 1023, 456, 249, 1024, 1025, 1026, 1027, 457,
	458, 250, 459, 460, 461, 1792, 0, 756, 744, 745,
	742, 743, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 1789, 255, 0,
	0, 0, 0, 791, 736, 0, 0, 0, 256, 257,
	258, 211, 810, 776, 811, 764, 797, 812, 0, 262,
	766, 765, 265, 266, 267, 739, 790, 813, 814, 217,
	0, 268, 795, 0, 781, 0, 269, 270, 271, 272,
	273, 0, 275, 276, 277, 274, 0, 278, 0, 279,
	280, 0, 837, 281, 282, 283, 784, 782, 783, 787,
	0, 785, 786, 284, 285, 481, 286, 798, 288, 815,
	816, 722, 289, 0, 290, 0, 291, 1790, 0, 799,
	293, 0, 294, 295, 0, 0, 0, 727, 299, 296,
	297, 300, 301, 298, 302, 817, 818, 751, 838, 0,
	0, 0, 0, 0, 303, 304, 819, 800, 801, 0,
	307, 0, 308, 0, 0, 839, 309, 0, 310, 820,
	0, 226, 0, 311, 312, 313, 314, 315, 316, 792,
	794, 841, 0, 775, 0, 0, 0, 0, 317, 319,
	326, 0, 840, 320, 821, 779, 802, 803, 804, 805,
	822, 0, 780, 0, 327, 842, 843, 328, 329, 330,
	844, 806, 807, 0, 0, 333, 334, 335, 0, 337,
	336, 0, 823, 845, 338, 339, 846, 0, 340, 341,
	0, 0, 342, 0, 343, 724, 723, 344, 345, 347,
	768, 346, 847, 349, 350, 352, 351, 719, 0, 848,
	752, 793, 353, 824, 354, 355, 0, 777, 778, 0,
	0, 358, 359, 0, 0, 360, 235, 849, 361, 850,
	825, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	826, 370, 238, 371, 0, 372, 373, 374, 375, 376,
	827, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 384, 387, 388, 389, 390, 0, 391, 851,
	392, 393, 394, 395, 728, 396, 0, 400, 401, 402,
	403, 404, 405, 406, 0, 412, 413, 769, 770, 771,
	772, 408, 414, 415, 788, 416, 397, 398, 417, 852,
	418, 828, 773, 420, 0, 429, 421, 422, 423, 399,
	424, 427, 808, 425, 0, 426, 829, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 437, 767, 439, 0,
	830, 831, 809, 0, 0, 441, 442, 832, 833, 750,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 451,
	789, 452, 0, 774, 453, 454, 455, 247, 834, 1788,
	0, 456, 249, 0, 0, 0, 0, 457, 458, 250,
	459, 460, 461, 720, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 716, 717, 1791, 0,
	0, 0, 0, 0, 0, 729, 1786, 0, 0, 0,
	704, 732, 756, 744, 745, 742, 743, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 791, 736,
	0, 0, 0, 256, 257, 258, 211, 810, 776, 811,
	764, 797, 812, 0, 262, 766, 765, 265, 266, 267,
	739, 790, 813, 814, 217, 0, 268, 795, 0, 781,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 784, 782, 783, 787, 0, 785, 786, 284, 285,
	481, 286, 798, 288, 815, 816, 722, 289, 0, 290,
	0, 291, 0, 0, 799, 293, 0, 294, 295, 0,
	0, 0, 727, 299, 296, 297, 300, 301, 298, 302,
	817, 818, 751, 838, 0, 0, 0, 0, 0, 303,
	304, 819, 800, 801, 0, 307, 0, 308, 0, 0,
	839, 309, 0, 310, 820, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 792, 794, 841, 0, 775, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 821,
	779, 802, 803, 804, 805, 822, 0, 780, 0, 327,
	842, 843, 328, 329, 330, 844, 806, 807, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 823, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	724, 723, 344, 345, 347, 768, 346, 847, 349, 350,
	352, 351, 719, 0, 848, 752, 793, 353, 824, 354,
	355, 0, 777, 778, 0, 0, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 825, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 826, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 827, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 728,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 168,
	412, 413, 769, 770, 771, 772, 408, 414, 415, 788,
	416, 397, 398, 417, 852, 418, 828, 773, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 808, 425, 0,
	426, 829, 0, 430, 431, 170, 432, 433, 434, 435,
	436, 437, 767, 439, 0, 830, 831, 809, 0, 0,
	441, 442, 832, 833, 750, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 789, 452, 0, 774, 453,
	454, 455, 1117, 834, 0, 0, 456, 249, 0, 0,
	0, 162, 457, 458, 250, 459, 460, 461, 720, 163,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 716, 717, 756, 744, 745, 742, 743, 733, 0,
	1324, 0, 0, 0, 0, 0, 732, 0, 0, 251,
	252, 253, 254, 0, 255, 0, 0, 0, 0, 791,
	736, 0, 0, 0, 256, 257, 258, 211, 810, 776,
	811, 764, 797, 812, 0, 262, 766, 765, 265, 266,
	267, 739, 790, 813, 814, 217, 0, 268, 795, 0,
	781, 0, 269, 270, 271, 272, 273, 0, 275, 276,
	277, 274, 0, 278, 0, 279, 280, 0, 837, 281,
	282, 283, 784, 782, 783, 787, 0, 785, 786, 284,
	285, 481, 286, 798, 288, 815, 816, 722, 289, 0,
	290, 0, 291, 0, 0, 799, 293, 0, 294, 295,
	0, 0, 0, 727, 299, 296, 297, 300, 301, 298,
	302, 817, 818, 751, 838, 0, 0, 0, 0, 0,
	303, 304, 819, 800, 801, 0, 307, 0, 308, 0,
	0, 839, 309, 0, 310, 820, 0, 226, 0, 311,
	312, 313, 314, 315, 316, 792, 794, 841, 0, 775,
	0, 0, 0, 0, 317, 319, 326, 0, 840, 320,
	821, 779, 802, 803, 804, 805, 822, 0, 780, 0,
	327, 842, 843, 328, 329, 330, 844, 806, 807, 0,
	0, 333, 334, 335, 0, 337, 336, 0, 823, 845,
	338, 339, 846, 0, 340, 341, 0, 0, 342, 0,
	343, 724, 723, 344, 345, 347, 768, 346, 847, 349,
	350, 352, 351, 719, 0, 848, 752, 793, 353, 824,
	354, 355, 0, 777, 778, 0, 0, 358, 359, 0,
	0, 360, 235, 849, 361, 850, 825, 362, 363, 364,
	365, 366, 367, 368, 0, 369, 826, 370, 238, 371,
	0, 372, 373, 374, 375, 376, 827, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 384, 387,
	388, 389, 390, 0, 391, 851, 392, 393, 394, 395,
	728, 396, 0, 400, 401, 402, 403, 404, 405, 406,
	168, 412, 413, 769, 770, 771, 772, 408, 414, 415,
	788, 416, 397, 398, 417, 852, 418, 828, 773, 420,
	0, 429, 421, 422, 423, 399, 424, 427, 808, 425,
	0, 426, 829, 0, 430, 431, 170, 432, 433, 434,
	435, 436, 437, 767, 439, 0, 830, 831, 809, 0,
	0, 441, 442, 832, 833, 750, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 451, 789, 452, 0, 774,
	453, 454, 455, 1117, 834, 0, 0, 456, 249, 0,
	0, 0, 162, 457, 458, 250, 459, 460, 461, 720,
	163, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 716, 717, 756, 744, 745, 742, 743, 733,
	0, 1324, 0, 0, 0, 0, 0, 732, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	791, 736, 0, 0, 0, 256, 257, 258, 211, 810,
	776, 811, 764, 797, 812, 1859, 262, 766, 765, 265,
	266, 267, 739, 790, 813, 814, 217, 0, 268, 795,
	0, 781, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 837,
	281, 282, 283, 784, 782, 783, 787, 0, 785, 786,
	284, 285, 481, 286, 798, 288, 815, 816, 722, 289,
	0, 290, 0, 291, 0, 0, 799, 293, 0, 294,
	295, 0, 0, 0, 727, 299, 296, 297, 300, 301,
	298, 302, 817, 818, 751, 838, 0, 0, 0, 0,
	0, 303, 304, 819, 800, 801, 0, 307, 0, 308,
	0, 1864, 839, 309, 0, 310, 820, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 792, 794, 841, 0,
	775, 0, 0, 0, 0, 317, 319, 326, 0, 840,
	320, 821, 779, 802, 803, 804, 805, 822, 0, 780,
	0, 327, 842, 843, 328, 329, 330, 844, 806, 807,
	0, 0, 333, 334, 335, 0, 337, 336, 1860, 823,
	845, 338, 339, 846, 0, 340, 341, 0, 0, 342,
	0, 343, 724, 723, 344, 345, 347, 768, 346, 847,
	349, 350, 352, 351, 719, 0, 848, 752, 793, 353,
	824, 354, 355, 0, 777, 778, 0, 0, 358, 359,
	0, 0, 360, 235, 849, 361, 850, 825, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 826, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 827, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 851, 392, 393, 394,
	395, 728, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 769, 770, 771, 772, 408, 414,
	415, 788, 416, 397, 398, 417, 852, 418, 828, 773,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 808,
	425, 0, 426, 829, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 767, 439, 0, 830, 831, 809,
	0, 1861, 441, 442, 832, 833, 750, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 789, 452, 0,
	774, 453, 454, 455, 247, 834, 0, 0, 456, 249,
	0, 0, 0, 0, 457, 458, 250, 459, 460, 461,
	720, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 716, 717, 756, 744, 745, 742, 743,
	733, 0, 729, 0, 0, 0, 0, 0, 732, 0,
	0, 251, 252, 253, 254, 0, 255, 0, 0, 0,
	0, 791, 736, 0, 0, 0, 256, 257, 258, 211,
	810, 776, 811, 764, 797, 812, 0, 262, 766, 765,
	265, 266, 267, 739, 790, 813, 814, 217, 0, 268,
	795, 0, 781, 0, 269, 270, 271, 272, 273, 0,
	275, 276, 277, 274, 0, 278, 0, 279, 280, 0,
	837, 281, 282, 283, 784, 782, 783, 787, 0, 785,
	786, 284, 285, 481, 286, 798, 288, 815, 816, 722,
	289, 0, 290, 0, 291, 0, 0, 799, 293, 0,
	294, 295, 0, 0, 0, 727, 299, 296, 297, 300,
	301, 298, 302, 817, 818, 751, 838, 0, 0, 0,
	0, 0, 303, 304, 819, 800, 801, 0, 307, 0,
	308, 0, 0, 839, 309, 0, 310, 820, 0, 226,
	0, 311, 312, 313, 314, 315, 316, 792, 794, 841,
	0, 775, 0, 0, 0, 0, 317, 319, 326, 0,
	840, 320, 821, 779, 802, 803, 804, 805, 822, 0,
	780, 0, 327, 842, 843, 328, 329, 330, 844, 806,
	807, 0, 0, 333, 334, 335, 0, 337, 336, 0,
	823, 845, 338, 339, 846, 0, 340, 341, 0, 0,
	342, 0, 343, 724, 723, 344, 345, 347, 768, 346,
	847, 349, 350, 352, 351, 719, 2611, 848, 752, 793,
	353, 824, 354, 355, 0, 777, 778, 0, 0, 358,
	359, 0, 0, 360, 235, 849, 361, 850, 825, 362,
	363, 364, 365, 366, 367, 368, 0, 369, 826, 370,
	238, 371, 0, 372, 373, 374, 375, 376, 827, 377,
	378, 0, 379, 380, 381, 382, 383, 0, 385, 386,
	384, 387, 388, 389, 390, 0, 391, 851, 392, 393,
	394, 395, 728, 396, 0, 400, 401, 402, 403, 404,
	405, 406, 0, 412, 413, 769, 770, 771, 772, 408,
	414, 415, 788, 416, 397, 398, 417, 852, 418, 828,
	773, 420, 0, 429, 421, 422, 423, 399, 424, 427,
	808, 425, 0, 426, 829, 0, 430, 431, 0, 432,
	433, 434, 435, 436, 437, 767, 439, 0, 830, 831,
	809, 0, 0, 441, 442, 832, 833, 750, 443, 444,
	445, 446, 0, 0, 447, 448, 449, 451, 789, 452,
	0, 774, 453, 454, 455, 247, 834, 0, 0, 456,
	249, 0, 0, 0, 0, 457, 458, 250, 459, 460,
	461, 720, 0, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 716, 717, 1385, 756, 744, 745,
	742, 743, 733, 729, 0, 0, 0, 0, 0, 732,
	0, 0, 0, 251, 252, 253, 254, 0, 255, 0,
	0, 0, 0, 791, 736, 0, 0, 0, 256, 257,
	258, 211, 810, 776, 811, 764, 797, 812, 0, 262,
	766, 765, 265, 266, 267, 739, 790, 813, 814, 217,
	0, 268, 795, 0, 781, 0, 269, 270, 271, 272,
	273, 0, 275, 276, 277, 274, 0, 278, 0, 279,
	280, 0, 837, 281, 282, 283, 784, 782, 783, 787,
	0, 785, 786, 284, 285, 481, 286, 798, 288, 815,
	816, 722, 289, 0, 290, 0, 291, 0, 0, 799,
	293, 0, 294, 295, 0, 0, 0, 727, 299, 296,
	297, 300, 301, 298, 302, 817, 818, 751, 838, 0,
	0, 0, 0, 0, 303, 304, 819, 800, 801, 0,
	307, 0, 308, 0, 0, 839, 309, 0, 310, 820,
	0, 226, 0, 311, 312, 313, 314, 315, 316, 792,
	794, 841, 0, 775, 0, 0, 0, 1690, 317, 319,
	326, 0, 840, 320, 821, 779, 802, 803, 804, 805,
	822, 0, 780, 0, 327, 842, 843, 328, 329, 330,
	844, 806, 807, 0, 0, 333, 334, 335, 0, 337,
	336, 0, 823, 845, 338, 339, 846, 0, 340, 341,
	0, 0, 342, 0, 343, 724, 723, 344, 345, 347,
	768, 346, 847, 349, 350, 352, 351, 719, 0, 848,
	752, 793, 353, 824, 354, 355, 0, 777, 778, 0,
	0, 358, 359, 0, 0, 360, 235, 849, 361, 850,
	825, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	826, 370, 238, 371, 1689, 372, 373, 374, 375, 376,
	827, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 384, 387, 388, 389, 390, 0, 391, 851,
	392, 393, 394, 395, 728, 396, 0, 400, 401, 402,
	403, 404, 405, 406, 0, 412, 413, 769, 770, 771,
	772, 408, 414, 415, 788, 416, 397, 398, 417, 852,
	418, 828, 773, 420, 0, 429, 421, 422, 423, 399,
	424, 427, 808, 425, 0, 426, 829, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 437, 767, 439, 0,
	830, 831, 809, 0, 0, 441, 442, 832, 833, 750,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 451,
	789, 452, 0, 774, 453, 454, 455, 247, 834, 0,
	0, 456, 249, 0, 0, 0, 0, 457, 458, 250,
	459, 460, 461, 720, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 716, 717, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 0, 0,
	712, 732, 756, 744, 745, 742, 743, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 791, 736,
	0, 0, 0, 256, 257, 258, 211, 810, 776, 811,
	764, 797, 812, 0, 262, 766, 765, 265, 266, 267,
	739, 790, 813, 814, 217, 0, 268, 795, 0, 781,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 784, 782, 783, 787, 0, 785, 786, 284, 285,
	481, 286, 798, 288, 815, 816, 722, 289, 0, 290,
	0, 291, 0, 0, 799, 293, 0, 294, 295, 0,
	0, 0, 727, 299, 296, 297, 300, 301, 298, 302,
	817, 818, 751, 838, 0, 0, 0, 0, 0, 303,
	304, 819, 800, 801, 0, 307, 0, 308, 0, 0,
	839, 309, 0, 310, 820, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 792, 794, 841, 0, 775, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 821,
	779, 802, 803, 804, 805, 822, 0, 780, 0, 327,
	842, 843, 328, 329, 330, 844, 806, 807, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 823, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	724, 723, 344, 345, 347, 768, 346, 847, 349, 350,
	352, 351, 719, 0, 848, 752, 793, 353, 824, 354,
	355, 0, 777, 778, 714, 0, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 825, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 826, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 827, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 728,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 769, 770, 771, 772, 408, 414, 415, 788,
	416, 397, 398, 417, 852, 418, 828, 773, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 808, 425, 0,
	426, 829, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 767, 439, 0, 830, 831, 809, 0, 0,
	441, 442, 832, 833, 750, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 789, 452, 0, 774, 453,
	454, 455, 247, 834, 0, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 720, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 716, 717, 756, 744, 745, 742, 743, 733, 0,
	729, 0, 0, 0, 0, 0, 732, 0, 0, 251,
	252, 253, 254, 0, 255, 0, 0, 0, 0, 791,
	736, 0, 0, 0, 256, 257, 258, 211, 810, 776,
	811, 764, 797, 812, 0, 262, 766, 765, 265, 266,
	267, 739, 790, 813, 814, 217, 0, 268, 795, 0,
	781, 0, 269, 270, 271, 272, 273, 0, 275, 276,
	277, 274, 0, 278, 0, 279, 280, 0, 837, 281,
	282, 283, 784, 782, 783, 787, 0, 785, 786, 284,
	285, 481, 286, 798, 288, 815, 816, 722, 289, 0,
	290, 0, 291, 0, 0, 799, 293, 0, 294, 295,
	0, 0, 0, 727, 299, 296, 297, 300, 301, 298,
	302, 817, 818, 751, 838, 0, 0, 0, 0, 0,
	303, 304, 819, 800, 801, 0, 307, 0, 308, 0,
	0, 839, 309, 0, 310, 820, 0, 226, 0, 311,
	312, 313, 314, 315, 316, 792, 794, 841, 0, 775,
	0, 0, 0, 0, 317, 319, 326, 0, 840, 320,
	821, 779, 802, 803, 804, 805, 822, 0, 780, 0,
	327, 842, 843, 328, 329, 330, 844, 806, 807, 0,
	0, 333, 334, 335, 0, 337, 336, 0, 823, 845,
	338, 339, 846, 0, 340, 341, 0, 0, 342, 0,
	343, 724, 723, 344, 345, 347, 768, 346, 847, 349,
	350, 352, 351, 719, 0, 848, 752, 793, 353, 824,
	354, 355, 0, 777, 778, 0, 0, 358, 359, 0,
	0, 360, 235, 849, 361, 850, 825, 362, 363, 364,
	365, 366, 367, 368, 0, 369, 826, 370, 238, 371,
	0, 372, 373, 374, 375, 376, 827, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 384, 387,
	388, 389, 390, 0, 391, 851, 392, 393, 394, 395,
	728, 396, 0, 400, 401, 402, 403, 404, 405, 406,
	0, 412, 413, 769, 770, 771, 772, 408, 414, 415,
	788, 416, 397, 398, 417, 852, 418, 828, 773, 420,
	0, 429, 421, 422, 423, 399, 424, 427, 808, 425,
	0, 426, 829, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 437, 767, 439, 0, 830, 831, 809, 0,
	0, 441, 442, 832, 833, 750, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 451, 789, 452, 0, 774,
	453, 454, 455, 247, 834, 2445, 0, 456, 249, 0,
	0, 0, 0, 457, 458, 250, 459, 460, 461, 720,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 716, 717, 756, 744, 745, 742, 743, 733,
	0, 729, 0, 0, 0, 0, 0, 732, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	791, 736, 0, 0, 0, 256, 257, 258, 211, 810,
	776, 811, 764, 797, 812, 0, 262, 766, 765, 265,
	266, 267, 739, 790, 813, 814, 217, 0, 268, 795,
	0, 781, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 837,
	281, 282, 283, 784, 782, 783, 787, 0, 785, 786,
	284, 285, 481, 286, 798, 288, 815, 816, 722, 289,
	0, 290, 0, 291, 0, 0, 799, 293, 0, 294,
	295, 0, 0, 0, 727, 299, 296, 297, 300, 301,
	298, 302, 817, 818, 751, 838, 0, 0, 0, 0,
	0, 303, 304, 819, 800, 801, 0, 307, 0, 308,
	0, 0, 839, 309, 0, 310, 820, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 792, 794, 841, 0,
	775, 0, 0, 0, 0, 317, 319, 326, 0, 840,
	320, 821, 779, 802, 803, 804, 805, 822, 0, 780,
	0, 327, 842, 843, 328, 329, 330, 844, 806, 807,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 823,
	845, 338, 339, 846, 0, 340, 341, 0, 0, 342,
	0, 343, 724, 723, 344, 345, 347, 768, 346, 847,
	349, 350, 352, 351, 719, 0, 848, 752, 793, 353,
	824, 354, 355, 0, 777, 778, 714, 0, 358, 359,
	0, 0, 360, 235, 849, 361, 850, 825, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 826, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 827, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 851, 392, 393, 394,
	395, 728, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 769, 770, 771, 772, 408, 414,
	415, 788, 416, 397, 398, 417, 852, 418, 828, 773,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 808,
	425, 0, 426, 829, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 767, 439, 0, 830, 831, 809,
	0, 0, 441, 442, 832, 833, 750, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 789, 452, 0,
	774, 453, 454, 455, 247, 834, 0, 0, 456, 249,
	0, 0, 0, 0, 457, 458, 250, 459, 460, 461,
	720, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 716, 717, 0, 0, 0, 0, 0,
	0, 0, 729, 0, 0, 0, 0, 2258, 732, 756,
	744, 745, 742, 743, 733, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 0,
	255, 0, 0, 0, 0, 791, 736, 0, 0, 0,
	256, 257, 258, 211, 810, 776, 811, 764, 797, 812,
	0, 262, 766, 765, 265, 266, 267, 739, 790, 813,
	814, 217, 0, 268, 795, 0, 781, 0, 269, 270,
	271, 272, 273, 0, 275, 276, 277, 274, 0, 278,
	0, 279, 280, 0, 837, 281, 282, 283, 784, 782,
	783, 787, 0, 785, 786, 284, 285, 481, 286, 798,
	288, 815, 816, 722, 289, 0, 290, 0, 291, 0,
	0, 799, 293, 0, 294, 295, 0, 0, 0, 727,
	299, 296, 297, 300, 301, 298, 302, 817, 818, 751,
	838, 0, 0, 0, 0, 0, 303, 304, 819, 800,
	801, 0, 307, 0, 308, 0, 0, 839, 309, 0,
	310, 820, 0, 226, 0, 311, 312, 313, 314, 315,
	316, 792, 794, 841, 0, 775, 0, 0, 0, 0,
	317, 319, 326, 0, 840, 320, 821, 779, 802, 803,
	804, 805, 822, 0, 780, 0, 327, 842, 843, 328,
	329, 330, 844, 806, 807, 0, 0, 333, 334, 335,
	0, 337, 336, 0, 823, 845, 338, 339, 846, 0,
	340, 341, 0, 0, 342, 0, 343, 724, 723, 344,
	345, 347, 768, 346, 847, 349, 350, 352, 351, 719,
	0, 848, 752, 793, 353, 824, 354, 355, 0, 777,
	778, 0, 0, 358, 359, 0, 0, 360, 235, 849,
	361, 850, 825, 362, 363, 364, 365, 366, 367, 368,
	0, 369, 826, 370, 238, 371, 0, 372, 373, 374,
	375, 376, 827, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 384, 387, 388, 389, 390, 0,
	391, 851, 392, 393, 394, 395, 728, 396, 0, 400,
	401, 402, 403, 404, 405, 406, 0, 412, 413, 769,
	770, 771, 772, 408, 414, 415, 788, 416, 397, 398,
	417, 852, 418, 828, 773, 420, 0, 429, 421, 422,
	423, 399, 424, 427, 808, 425, 0, 426, 829, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 437, 767,
	439, 0, 830, 831, 809, 0, 0, 441, 442, 832,
	833, 750, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 451, 789, 452, 0, 774, 453, 454, 455, 247,
	834, 0, 0, 456, 249, 0, 0, 0, 0, 457,
	458, 250, 459, 460, 461, 720, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 716, 717,
	756, 744, 745, 742, 743, 733, 0, 729, 0, 0,
	0, 0, 0, 732, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 791, 736, 0, 0,
	0, 256, 257, 258, 211, 810, 776, 811, 764, 797,
	812, 0, 262, 766, 765, 265, 266, 267, 739, 790,
	813, 814, 217, 0, 268, 795, 0, 781, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 837, 281, 282, 283, 784,
	782, 783, 787, 0, 785, 786, 284, 285, 481, 286,
	798, 288, 815, 816, 722, 289, 0, 290, 0, 291,
	0, 0, 799, 293, 0, 294, 295, 0, 0, 0,
	727, 299, 296, 297, 300, 301, 298, 302, 817, 818,
	751, 838, 0, 0, 0, 0, 0, 303, 304, 819,
	800, 801, 0, 307, 0, 308, 0, 0, 839, 309,
	0, 310, 820, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 792, 794, 841, 0, 775, 0, 0, 0,
	0, 317, 319, 326, 0, 840, 320, 821, 779, 802,
	803, 804, 805, 822, 0, 780, 0, 327, 842, 843,
	328, 329, 330, 844, 806, 807, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 823, 845, 338, 339, 846,
	0, 340, 341, 0, 0, 342, 0, 343, 724, 723,
	344, 345, 347, 768, 346, 847, 349, 350, 352, 351,
	719, 0, 848, 752, 793, 353, 824, 354, 355, 0,
	777, 778, 0, 0, 358, 359, 0, 0, 360, 235,
	849, 361, 850, 825, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 826, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 827, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 851, 392, 393, 394, 395, 728, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	769, 770, 771, 772, 408, 414, 415, 788, 416, 397,
	398, 417, 852, 418, 828, 773, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 808, 425, 0, 426, 829,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	767, 439, 0, 830, 831, 809, 0, 0, 441, 442,
	832, 833, 750, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 789, 452, 0, 774, 453, 454, 455,
	247, 834, 0, 0, 456, 249, 0, 0, 0, 0,
	457, 458, 250, 459, 460, 461, 720, 0, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 0, 716,
	717, 1385, 756, 744, 745, 742, 743, 733, 729, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 791, 736,
	0, 0, 0, 256, 257, 258, 211, 810, 776, 811,
	764, 797, 812, 0, 262, 766, 765, 265, 266, 267,
	739, 790, 813, 814, 217, 0, 268, 795, 0, 781,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 784, 782, 783, 787, 0, 785, 786, 284, 285,
	481, 286, 798, 288, 815, 816, 722, 289, 0, 290,
	0, 291, 0, 0, 799, 293, 0, 294, 295, 0,
	0, 0, 727, 299, 296, 297, 300, 301, 298, 302,
	817, 818, 751, 838, 0, 0, 0, 0, 0, 303,
	304, 819, 800, 801, 0, 307, 0, 308, 0, 1864,
	839, 309, 0, 310, 820, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 792, 794, 841, 0, 775, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 821,
	779, 802, 803, 804, 805, 822, 0, 780, 0, 327,
	842, 843, 328, 329, 330, 844, 806, 807, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 823, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	724, 723, 344, 345, 347, 768, 346, 847, 349, 350,
	352, 351, 719, 0, 848, 752, 793, 353, 824, 354,
	355, 0, 777, 778, 0, 0, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 825, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 826, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 827, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 728,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 769, 770, 771, 772, 408, 414, 415, 788,
	416, 397, 398, 417, 852, 418, 828, 773, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 808, 425, 0,
	426, 829, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 767, 439, 0, 830, 831, 809, 0, 0,
	441, 442, 832, 833, 750, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 789, 452, 0, 774, 453,
	454, 455, 247, 834, 0, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 720, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 716, 717, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 0, 0, 1898, 732, 756, 744, 745,
	742, 743, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 0, 255, 0,
	0, 0, 0, 791, 736, 0, 0, 0, 256, 257,
	258, 211, 810, 776, 811, 764, 797, 812, 0, 262,
	766, 765, 265, 266, 267, 739, 790, 813, 814, 217,
	0, 268, 795, 0, 781, 0, 269, 270, 271, 272,
	273, 0, 275, 276, 277, 274, 0, 278, 0, 279,
	280, 0, 837, 281, 282, 283, 784, 782, 783, 787,
	0, 785, 786, 284, 285, 481, 286, 798, 288, 815,
	816, 722, 289, 0, 290, 0, 291, 0, 0, 799,
	293, 0, 294, 295, 0, 0, 0, 727, 299, 296,
	297, 300, 301, 298, 302, 817, 818, 751, 838, 0,
	0, 0, 0, 0, 303, 304, 819, 800, 801, 0,
	307, 0, 308, 0, 0, 839, 309, 0, 310, 820,
	0, 226, 0, 311, 312, 313, 314, 315, 316, 792,
	794, 841, 0, 775, 0, 0, 0, 0, 317, 319,
	326, 0, 840, 320, 821, 779, 802, 803, 804, 805,
	822, 0, 780, 0, 327, 842, 843, 328, 329, 330,
	844, 806, 807, 0, 0, 333, 334, 335, 0, 337,
	336, 0, 823, 845, 338, 339, 846, 0, 340, 341,
	0, 0, 342, 0, 343, 724, 723, 344, 345, 347,
	768, 346, 847, 349, 350, 352, 351, 719, 0, 848,
	752, 793, 353, 824, 354, 355, 0, 777, 778, 0,
	0, 358, 359, 0, 0, 360, 235, 849, 361, 850,
	825, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	826, 370, 238, 371, 0, 372, 373, 374, 375, 376,
	827, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 384, 387, 388, 389, 390, 0, 391, 851,
	392, 393, 394, 395, 728, 396, 0, 400, 401, 402,
	403, 404, 405, 406, 0, 412, 413, 769, 770, 771,
	772, 408, 414, 415, 788, 416, 397, 398, 417, 852,
	418, 828, 773, 420, 0, 429, 421, 422, 423, 399,
	424, 427, 808, 425, 0, 426, 829, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 437, 767, 439, 0,
	830, 831, 809, 0, 0, 441, 442, 832, 833, 750,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 451,
	789, 452, 0, 774, 453, 454, 455, 247, 834, 0,
	0, 456, 249, 0, 0, 0, 0, 457, 458, 250,
	459, 460, 461, 720, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 716, 717, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 0, 0,
	1852, 732, 756, 744, 745, 742, 743, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 791, 736,
	0, 0, 0, 256, 257, 258, 211, 810, 776, 811,
	764, 797, 812, 0, 262, 766, 765, 265, 266, 267,
	739, 790, 813, 814, 217, 0, 268, 795, 0, 781,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 784, 782, 783, 787, 0, 785, 786, 284, 285,
	481, 286, 798, 288, 815, 816, 722, 289, 0, 290,
	0, 291, 0, 0, 799, 293, 0, 294, 295, 0,
	0, 0, 727, 299, 296, 297, 300, 301, 298, 302,
	817, 818, 751, 838, 0, 0, 0, 0, 0, 303,
	304, 819, 800, 801, 0, 307, 0, 308, 0, 0,
	839, 309, 0, 310, 820, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 792, 794, 841, 0, 775, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 821,
	779, 802, 803, 804, 805, 822, 0, 780, 0, 327,
	842, 843, 328, 329, 330, 844, 806, 807, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 823, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	724, 723, 344, 345, 347, 768, 346, 847, 349, 350,
	352, 351, 719, 0, 848, 752, 793, 353, 824, 354,
	355, 0, 777, 778, 0, 0, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 825, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 826, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 827, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 728,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 769, 770, 771, 772, 408, 414, 415, 788,
	416, 397, 398, 417, 852, 418, 828, 773, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 808, 425, 0,
	426, 829, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 767, 439, 0, 830, 831, 809, 0, 0,
	441, 442, 832, 833, 750, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 789, 452, 0, 774, 453,
	454, 455, 247, 834, 0, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 720, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 716, 717, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 0, 0, 1840, 732, 756, 744, 745,
	742, 743, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 0, 255, 0,
	0, 0, 0, 791, 736, 0, 0, 0, 256, 257,
	258, 211, 810, 776, 811, 764, 797, 812, 0, 262,
	766, 765, 265, 266, 267, 739, 790, 813, 814, 217,
	0, 268, 795, 0, 781, 0, 269, 270, 271, 272,
	273, 0, 275, 276, 277, 274, 0, 278, 0, 279,
	280, 0, 837, 281, 282, 283, 784, 782, 783, 787,
	0, 785, 786, 284, 285, 481, 286, 798, 288, 815,
	816, 722, 289, 0, 290, 0, 291, 0, 0, 799,
	293, 0, 294, 295, 0, 0, 0, 727, 299, 296,
	297, 300, 301, 298, 302, 817, 818, 751, 838, 0,
	0, 0, 0, 0, 303, 304, 819, 800, 801, 0,
	307, 0, 308, 0, 0, 839, 309, 0, 310, 820,
	0, 226, 0, 311, 312, 313, 314, 315, 316, 792,
	794, 841, 0, 775, 0, 0, 0, 0, 317, 319,
	326, 0, 840, 320, 821, 779, 802, 803, 804, 805,
	822, 0, 780, 0, 327, 842, 843, 328, 329, 330,
	844, 806, 807, 0, 0, 333, 334, 335, 0, 337,
	336, 0, 823, 845, 338, 339, 846, 0, 340, 341,
	0, 0, 342, 0, 343, 724, 723, 344, 345, 347,
	768, 346, 847, 349, 350, 352, 351, 719, 0, 848,
	752, 793, 353, 824, 354, 355, 0, 777, 778, 0,
	0, 358, 359, 0, 0, 360, 235, 849, 361, 850,
	825, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	826, 370, 238, 371, 0, 372, 373, 374, 375, 376,
	827, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 384, 387, 388, 389, 390, 0, 391, 851,
	392, 393, 394, 395, 728, 396, 0, 400, 401, 402,
	403, 404, 405, 406, 0, 412, 413, 769, 770, 771,
	772, 408, 414, 415, 788, 416, 397, 398, 417, 852,
	418, 828, 773, 420, 0, 429, 421, 422, 423, 399,
	424, 427, 808, 425, 0, 426, 829, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 437, 767, 439, 0,
	830, 831, 809, 0, 0, 441, 442, 832, 833, 750,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 451,
	789, 452, 0, 774, 453, 454, 455, 247, 834, 0,
	0, 456, 249, 0, 0, 0, 0, 457, 458, 250,
	459, 460, 461, 720, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 716, 717, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 0, 0,
	1838, 732, 756, 744, 745, 742, 743, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 791, 736,
	0, 0, 0, 256, 257, 258, 211, 810, 776, 811,
	764, 797, 812, 0, 262, 766, 765, 265, 266, 267,
	739, 790, 813, 814, 217, 0, 268, 795, 0, 781,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 784, 782, 783, 787, 0, 785, 786, 284, 285,
	481, 286, 798, 288, 815, 816, 722, 289, 0, 290,
	0, 291, 0, 0, 799, 293, 0, 294, 295, 0,
	0, 0, 727, 299, 296, 297, 300, 301, 298, 302,
	817, 818, 751, 838, 0, 0, 0, 0, 0, 303,
	304, 819, 800, 801, 0, 307, 0, 308, 0, 0,
	839, 309, 0, 310, 820, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 792, 794, 841, 0, 775, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 821,
	779, 802, 803, 804, 805, 822, 0, 780, 0, 327,
	842, 843, 328, 329, 330, 844, 806, 807, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 823, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	724, 723, 344, 345, 347, 768, 346, 847, 349, 350,
	352, 351, 719, 0, 848, 752, 793, 353, 824, 354,
	355, 0, 777, 778, 0, 0, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 825, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 826, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 827, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 728,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 769, 770, 771, 772, 408, 414, 415, 788,
	416, 397, 398, 417, 852, 418, 828, 773, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 808, 425, 0,
	426, 829, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 767, 439, 0, 830, 831, 809, 0, 0,
	441, 442, 832, 833, 750, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 789, 452, 0, 774, 453,
	454, 455, 247, 834, 0, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 720, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 716, 717, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 0, 0, 1836, 732, 756, 744, 745,
	742, 743, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 0, 255, 0,
	0, 0, 0, 791, 736, 0, 0, 0, 256, 257,
	258, 211, 810, 776, 811, 764, 797, 812, 0, 262,
	766, 765, 265, 266, 267, 739, 790, 813, 814, 217,
	0, 268, 795, 0, 781, 0, 269, 270, 271, 272,
	273, 0, 275, 276, 277, 274, 0, 278, 0, 279,
	280, 0, 837, 281, 282, 283, 784, 782, 783, 787,
	0, 785, 786, 284, 285, 481, 286, 798, 288, 815,
	816, 722, 289, 0, 290, 0, 291, 0, 0, 799,
	293, 0, 294, 295, 0, 0, 0, 727, 299, 296,
	297, 300, 301, 298, 302, 817, 818, 751, 838, 0,
	0, 0, 0, 0, 303, 304, 819, 800, 801, 0,
	307, 0, 308, 0, 0, 839, 309, 0, 310, 820,
	0, 226, 0, 311, 312, 313, 314, 315, 316, 792,
	794, 841, 0, 775, 0, 0, 0, 0, 317, 319,
	326, 0, 840, 320, 821, 779, 802, 803, 804, 805,
	822, 0, 780, 0, 327, 842, 843, 328, 329, 330,
	844, 806, 807, 0, 0, 333, 334, 335, 0, 337,
	336, 0, 823, 845, 338, 339, 846, 0, 340, 341,
	0, 0, 342, 0, 343, 724, 723, 344, 345, 347,
	768, 346, 847, 349, 350, 352, 351, 719, 0, 848,
	752, 793, 353, 824, 354, 355, 0, 777, 778, 0,
	0, 358, 359, 0, 0, 360, 235, 849, 361, 850,
	825, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	826, 370, 238, 371, 0, 372, 373, 374, 375, 376,
	827, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 384, 387, 388, 389, 390, 0, 391, 851,
	392, 393, 394, 395, 728, 396, 0, 400, 401, 402,
	403, 404, 405, 406, 0, 412, 413, 769, 770, 771,
	772, 408, 414, 415, 788, 416, 397, 398, 417, 852,
	418, 828, 773, 420, 0, 429, 421, 422, 423, 399,
	424, 427, 808, 425, 0, 426, 829, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 437, 767, 439, 0,
	830, 831, 809, 0, 0, 441, 442, 832, 833, 750,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 451,
	789, 452, 0, 774, 453, 454, 455, 247, 834, 0,
	0, 456, 249, 0, 0, 0, 0, 457, 458, 250,
	459, 460, 461, 720, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 716, 717, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 0, 0,
	1833, 732, 1825, 744, 745, 742, 743, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 791, 736,
	0, 0, 0, 256, 257, 258, 211, 810, 776, 811,
	764, 797, 812, 0, 262, 766, 765, 265, 266, 267,
	739, 790, 813, 814, 217, 0, 268, 795, 0, 781,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 784, 782, 783, 787, 0, 785, 786, 284, 285,
	481, 286, 798, 1828, 815, 816, 722, 289, 0, 290,
	0, 291, 0, 0, 799, 293, 0, 294, 295, 0,
	0, 0, 727, 299, 296, 297, 300, 301, 298, 302,
	817, 818, 751, 838, 0, 0, 0, 0, 0, 303,
	304, 819, 800, 801, 0, 307, 0, 308, 0, 0,
	839, 309, 0, 310, 820, 0, 226, 0, 311, 312,
	1829, 314, 315, 316, 792, 794, 841, 0, 775, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 821,
	779, 802, 803, 804, 805, 822, 0, 780, 0, 327,
	842, 843, 328, 329, 330, 844, 806, 807, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 823, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	724, 723, 1830, 1827, 347, 768, 346, 847, 349, 350,
	352, 351, 719, 0, 848, 752, 793, 353, 824, 354,
	355, 0, 777, 778, 0, 0, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 825, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 826, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 827, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 728,
	396, 0, 400, 401, 402, 403, 404, 405, 1831, 0,
	412, 413, 769, 770, 771, 772, 408, 414, 415, 788,
	416, 397, 398, 417, 852, 418, 828, 773, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 808, 425, 0,
	426, 829, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 767, 439, 0, 830, 831, 809, 0, 0,
	441, 442, 832, 833, 750, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 789, 452, 0, 774, 453,
	454, 455, 247, 834, 0, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 1826, 461, 720, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 716, 717, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 0, 0, 1822, 732, 1825, 744, 745,
	742, 743, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 0, 255, 0,
	0, 0, 0, 791, 736, 0, 0, 0, 256, 257,
	258, 211, 810, 776, 811, 764, 797, 812, 0, 262,
	766, 765, 265, 266, 267, 739, 790, 813, 814, 217,
	0, 268, 795, 0, 781, 0, 269, 270, 271, 272,
	273, 0, 275, 276, 277, 274, 0, 278, 0, 279,
	280, 0, 837, 281, 282, 283, 784, 782, 783, 787,
	0, 785, 786, 284, 285, 481, 286, 798, 1828, 815,
	816, 722, 289, 0, 290, 0, 291, 0, 0, 799,
	293, 0, 294, 295, 0, 0, 0, 727, 299, 296,
	297, 300, 301, 298, 302, 817, 818, 751, 838, 0,
	0, 0, 0, 0, 303, 304, 819, 800, 801, 0,
	307, 0, 308, 0, 0, 839, 309, 0, 310, 820,
	0, 226, 0, 311, 312, 1829, 314, 315, 316, 792,
	794, 841, 0, 775, 0, 0, 0, 0, 317, 319,
	326, 0, 840, 320, 821, 779, 802, 803, 804, 805,
	822, 0, 780, 0, 327, 842, 843, 328, 329, 330,
	844, 806, 807, 0, 0, 333, 334, 335, 0, 337,
	336, 0, 823, 845, 338, 339, 846, 0, 340, 341,
	0, 0, 342, 0, 343, 724, 723, 1830, 1827, 347,
	768, 346, 847, 349, 350, 352, 351, 719, 0, 848,
	752, 793, 353, 824, 354, 355, 0, 777, 778, 0,
	0, 358, 359, 0, 0, 360, 235, 849, 361, 850,
	825, 362, 363, 364, 365, 366, 367, 368, 0, 369,
	826, 370, 238, 371, 0, 372, 373, 374, 375, 376,
	827, 377, 378, 0, 379, 380, 381, 382, 383, 0,
	385, 386, 384, 387, 388, 389, 390, 0, 391, 851,
	392, 393, 394, 395, 728, 396, 0, 400, 401, 402,
	403, 404, 405, 1831, 0, 412, 413, 769, 770, 771,
	772, 408, 414, 415, 788, 416, 397, 398, 417, 852,
	418, 828, 773, 420, 0, 429, 421, 422, 423, 399,
	424, 427, 808, 425, 0, 426, 829, 0, 430, 431,
	0, 432, 433, 434, 435, 436, 437, 767, 439, 0,
	830, 831, 809, 0, 0, 441, 442, 832, 833, 750,
	443, 444, 445, 446, 0, 0, 447, 448, 449, 451,
	789, 452, 0, 774, 453, 454, 455, 247, 834, 0,
	0, 456, 249, 0, 0, 0, 0, 457, 458, 250,
	459, 1826, 461, 720, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 716, 717, 756, 744,
	745, 742, 743, 733, 0, 729, 0, 0, 0, 0,
	0, 732, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 791, 736, 0, 0, 0, 256,
	257, 258, 211, 810, 776, 811, 764, 797, 812, 0,
	262, 766, 765, 265, 266, 267, 739, 790, 813, 814,
	217, 0, 268, 795, 0, 781, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 837, 281, 282, 283, 784, 782, 783,
	787, 0, 785, 786, 284, 285, 481, 286, 798, 288,
	815, 816, 722, 289, 0, 290, 0, 291, 0, 0,
	799, 293, 0, 294, 295, 0, 0, 0, 727, 299,
	296, 297, 300, 301, 298, 302, 817, 818, 751, 838,
	0, 0, 0, 0, 0, 303, 304, 819, 800, 801,
	0, 307, 0, 308, 0, 0, 839, 309, 0, 310,
	820, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	792, 794, 841, 0, 775, 0, 0, 0, 0, 317,
	319, 326, 0, 840, 320, 821, 779, 802, 803, 804,
	805, 822, 0, 780, 0, 327, 842, 843, 328, 329,
	330, 844, 806, 807, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 823, 845, 338, 339, 846, 0, 340,
	341, 0, 0, 342, 0, 343, 724, 723, 344, 345,
	347, 768, 346, 847, 349, 350, 352, 351, 719, 0,
	848, 752, 793, 353, 824, 354, 355, 0, 777, 778,
	0, 0, 358, 359, 0, 0, 360, 235, 849, 361,
	850, 825, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 826, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 827, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	851, 392, 393, 394, 395, 728, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 769, 770,
	771, 772, 408, 414, 415, 788, 416, 397, 398, 417,
	852, 418, 828, 773, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 808, 425, 0, 426, 829, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 767, 439,
	0, 830, 831, 809, 0, 0, 441, 442, 832, 833,
	750, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 789, 452, 0, 774, 453, 454, 455, 247, 834,
	0, 0, 456, 249, 0, 0, 0, 0, 457, 458,
	250, 459, 460, 461, 720, 0, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 716, 717, 0,
	0, 0, 0, 0, 1329, 0, 729, 0, 0, 0,
	0, 0, 732, 756, 744, 745, 742, 743, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 1677, 255, 0, 0, 0, 0, 791,
	736, 0, 0, 0, 256, 257, 258, 211, 810, 776,
	811, 764, 797, 812, 0, 262, 766, 765, 265, 266,
	267, 739, 790, 813, 814, 217, 0, 268, 795, 0,
	781, 0, 269, 270, 271, 272, 273, 0, 275, 276,
	277, 274, 0, 278, 0, 279, 280, 0, 837, 281,
	282, 283, 784, 782, 783, 787, 0, 785, 786, 284,
	285, 481, 286, 798, 288, 815, 816, 722, 289, 0,
	290, 0, 291, 0, 0, 799, 293, 0, 294, 295,
	0, 0, 0, 727, 299, 296, 297, 300, 301, 298,
	302, 817, 818, 751, 838, 0, 0, 0, 0, 0,
	303, 304, 819, 800, 801, 0, 307, 0, 308, 0,
	0, 839, 309, 0, 310, 820, 0, 226, 0, 311,
	312, 313, 314, 315, 316, 792, 794, 841, 0, 775,
	0, 0, 0, 0, 317, 319, 326, 0, 840, 320,
	821, 779, 802, 803, 804, 805, 822, 0, 780, 0,
	327, 842, 843, 328, 329, 330, 844, 806, 807, 0,
	0, 333, 334, 335, 0, 337, 336, 0, 823, 845,
	338, 339, 846, 0, 340, 341, 0, 0, 342, 0,
	343, 724, 723, 344, 345, 347, 768, 346, 847, 349,
	350, 352, 351, 719, 0, 848, 752, 793, 353, 824,
	354, 355, 0, 777, 778, 0, 0, 358, 359, 0,
	0, 360, 235, 849, 361, 850, 825, 362, 363, 364,
	365, 366, 367, 368, 0, 369, 826, 370, 238, 371,
	0, 372, 373, 374, 375, 376, 827, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 384, 387,
	388, 389, 390, 0, 391, 851, 392, 393, 394, 395,
	728, 396, 0, 400, 401, 402, 403, 404, 405, 406,
	0, 412, 413, 769, 770, 771, 772, 408, 414, 415,
	788, 416, 397, 398, 417, 852, 418, 828, 773, 420,
	0, 429, 421, 422, 423, 399, 424, 427, 808, 425,
	0, 426, 829, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 437, 767, 439, 0, 830, 831, 809, 0,
	0, 441, 442, 832, 833, 750, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 451, 789, 452, 0, 774,
	453, 454, 455, 247, 834, 0, 0, 456, 249, 0,
	0, 0, 0, 457, 458, 250, 459, 460, 461, 720,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 716, 717, 0, 0, 0, 0, 0, 0,
	0, 729, 0, 0, 0, 0, 1045, 732, 756, 744,
	745, 742, 743, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 791, 736, 0, 0, 0, 256,
	257, 258, 211, 810, 776, 811, 764, 797, 812, 0,
	262, 766, 765, 265, 266, 267, 739, 790, 813, 814,
	217, 0, 268, 795, 0, 781, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 837, 281, 282, 283, 784, 782, 783,
	787, 0, 785, 786, 284, 285, 481, 286, 798, 288,
	815, 816, 722, 289, 0, 290, 0, 291, 0, 0,
	799, 293, 0, 294, 295, 0, 0, 0, 727, 299,
	296, 297, 300, 301, 298, 302, 817, 818, 751, 838,
	0, 0, 0, 0, 0, 303, 304, 819, 800, 801,
	0, 307, 0, 308, 0, 0, 839, 309, 0, 310,
	820, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	1044, 794, 841, 0, 775, 0, 0, 0, 0, 317,
	319, 326, 0, 840, 320, 821, 779, 802, 803, 804,
	805, 822, 0, 780, 0, 327, 842, 843, 328, 329,
	330, 844, 806, 807, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 823, 845, 338, 339, 846, 0, 340,
	341, 0, 0, 342, 0, 343, 724, 723, 344, 345,
	347, 768, 346, 847, 349, 350, 352, 351, 719, 0,
	848, 752, 793, 353, 824, 354, 355, 0, 777, 778,
	0, 0, 358, 359, 0, 0, 360, 235, 849, 361,
	850, 825, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 826, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 827, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	851, 392, 393, 394, 395, 728, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 769, 770,
	771, 772, 408, 414, 415, 788, 416, 397, 398, 417,
	852, 418, 828, 773, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 808, 425, 0, 426, 829, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 767, 439,
	0, 830, 831, 809, 0, 0, 441, 442, 832, 833,
	750, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 789, 452, 0, 774, 453, 454, 455, 247, 834,
	0, 0, 456, 249, 0, 0, 0, 0, 457, 458,
	250, 459, 460, 461, 720, 0, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 716, 717, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 0, 0,
	0, 1042, 732, 756, 744, 745, 742, 743, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 0, 255, 0, 0, 0, 0, 791,
	736, 0, 0, 0, 256, 257, 258, 211, 810, 776,
	811, 764, 797, 812, 0, 262, 766, 765, 265, 266,
	267, 739, 790, 813, 814, 217, 0, 268, 795, 0,
	781, 0, 269, 270, 271, 272, 273, 0, 275, 276,
	277, 274, 0, 278, 0, 279, 280, 0, 837, 281,
	282, 283, 784, 782, 783, 787, 0, 785, 786, 284,
	285, 481, 286, 798, 288, 815, 816, 722, 289, 0,
	290, 0, 291, 0, 0, 799, 293, 0, 294, 295,
	0, 0, 0, 727, 299, 296, 297, 300, 301, 298,
	302, 817, 818, 751, 838, 0, 0, 0, 0, 0,
	303, 304, 819, 800, 801, 0, 307, 0, 308, 0,
	0, 839, 309, 0, 310, 820, 0, 226, 0, 311,
	312, 313, 314, 315, 316, 1041, 794, 841, 0, 775,
	0, 0, 0, 0, 317, 319, 326, 0, 840, 320,
	821, 779, 802, 803, 804, 805, 822, 0, 780, 0,
	327, 842, 843, 328, 329, 330, 844, 806, 807, 0,
	0, 333, 334, 335, 0, 337, 336, 0, 823, 845,
	338, 339, 846, 0, 340, 341, 0, 0, 342, 0,
	343, 724, 723, 344, 345, 347, 768, 346, 847, 349,
	350, 352, 351, 719, 0, 848, 752, 793, 353, 824,
	354, 355, 0, 777, 778, 0, 0, 358, 359, 0,
	0, 360, 235, 849, 361, 850, 825, 362, 363, 364,
	365, 366, 367, 368, 0, 369, 826, 370, 238, 371,
	0, 372, 373, 374, 375, 376, 827, 377, 378, 0,
	379, 380, 381, 382, 383, 0, 385, 386, 384, 387,
	388, 389, 390, 0, 391, 851, 392, 393, 394, 395,
	728, 396, 0, 400, 401, 402, 403, 404, 405, 406,
	0, 412, 413, 769, 770, 771, 772, 408, 414, 415,
	788, 416, 397, 398, 417, 852, 418, 828, 773, 420,
	0, 429, 421, 422, 423, 399, 424, 427, 808, 425,
	0, 426, 829, 0, 430, 431, 0, 432, 433, 434,
	435, 436, 437, 767, 439, 0, 830, 831, 809, 0,
	0, 441, 442, 832, 833, 750, 443, 444, 445, 446,
	0, 0, 447, 448, 449, 451, 789, 452, 0, 774,
	453, 454, 455, 247, 834, 0, 0, 456, 249, 0,
	0, 0, 0, 457, 458, 250, 459, 460, 461, 720,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 716, 717, 0, 0, 0, 0, 0, 0,
	0, 729, 0, 0, 0, 0, 1039, 732, 756, 744,
	745, 742, 743, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 791, 736, 0, 0, 0, 256,
	257, 258, 211, 810, 776, 811, 764, 797, 812, 0,
	262, 766, 765, 265, 266, 267, 739, 790, 813, 814,
	217, 0, 268, 795, 0, 781, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 837, 281, 282, 283, 784, 782, 783,
	787, 0, 785, 786, 284, 285, 481, 286, 798, 288,
	815, 816, 722, 289, 0, 290, 0, 291, 0, 0,
	799, 293, 0, 294, 295, 0, 0, 0, 727, 299,
	296, 297, 300, 301, 298, 302, 817, 818, 751, 838,
	0, 0, 0, 0, 0, 303, 304, 819, 800, 801,
	0, 307, 0, 308, 0, 0, 839, 309, 0, 310,
	820, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	792, 794, 841, 0, 775, 0, 0, 0, 0, 317,
	319, 326, 0, 840, 320, 821, 779, 802, 803, 804,
	805, 822, 0, 780, 0, 327, 842, 843, 328, 329,
	330, 844, 806, 807, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 823, 845, 338, 339, 846, 0, 340,
	341, 0, 0, 342, 0, 343, 724, 723, 344, 345,
	347, 768, 346, 847, 349, 350, 352, 351, 719, 0,
	848, 752, 793, 353, 824, 354, 355, 0, 777, 778,
	0, 0, 358, 359, 0, 0, 360, 235, 849, 361,
	850, 825, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 826, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 827, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	851, 392, 393, 394, 395, 728, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 769, 770,
	771, 772, 408, 414, 415, 788, 416, 397, 398, 417,
	852, 418, 828, 773, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 808, 425, 0, 426, 829, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 767, 439,
	0, 830, 831, 809, 0, 0, 441, 442, 832, 833,
	750, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 789, 452, 0, 774, 453, 454, 455, 247, 834,
	0, 0, 456, 249, 0, 0, 0, 0, 457, 458,
	250, 459, 460, 461, 720, 0, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 716, 717, 756,
	744, 745, 742, 743, 733, 0, 729, 0, 0, 0,
	0, 0, 732, 0, 0, 251, 252, 253, 254, 0,
	255, 0, 0, 0, 0, 791, 736, 0, 0, 0,
	256, 257, 258, 211, 810, 776, 811, 764, 797, 812,
	0, 262, 766, 765, 265, 266, 267, 739, 790, 813,
	814, 217, 0, 268, 795, 0, 781, 0, 269, 270,
	271, 272, 273, 0, 275, 276, 277, 274, 0, 278,
	0, 279, 280, 0, 837, 281, 282, 283, 784, 782,
	783, 787, 0, 785, 786, 284, 285, 481, 286, 798,
	288, 815, 816, 722, 289, 0, 290, 0, 291, 0,
	0, 799, 293, 0, 294, 295, 0, 0, 0, 727,
	299, 296, 297, 300, 301, 298, 302, 817, 818, 751,
	838, 0, 0, 0, 0, 0, 303, 304, 819, 800,
	801, 0, 307, 0, 308, 0, 0, 839, 309, 0,
	310, 820, 0, 226, 0, 311, 312, 313, 314, 315,
	316, 792, 794, 841, 0, 775, 0, 0, 0, 0,
	317, 319, 326, 0, 840, 320, 821, 779, 802, 803,
	804, 805, 822, 0, 780, 0, 327, 842, 843, 328,
	329, 330, 844, 806, 807, 0, 0, 333, 334, 335,
	0, 337, 336, 0, 823, 845, 338, 339, 846, 0,
	340, 341, 0, 0, 342, 0, 343, 724, 723, 344,
	345, 347, 768, 346, 847, 349, 350, 352, 351, 719,
	0, 848, 752, 793, 353, 824, 354, 355, 0, 777,
	778, 0, 0, 358, 359, 0, 0, 360, 235, 849,
	361, 850, 825, 362, 363, 364, 365, 366, 367, 368,
	0, 369, 826, 370, 238, 371, 0, 372, 373, 374,
	375, 376, 827, 377, 378, 0, 379, 380, 381, 382,
	383, 0, 385, 386, 384, 387, 388, 389, 390, 0,
	391, 851, 392, 393, 394, 395, 728, 396, 0, 400,
	401, 402, 403, 404, 405, 406, 0, 412, 413, 769,
	770, 771, 772, 408, 414, 415, 788, 416, 397, 398,
	417, 852, 418, 828, 773, 420, 0, 429, 421, 422,
	423, 399, 424, 427, 808, 425, 0, 426, 829, 0,
	430, 431, 0, 432, 433, 434, 435, 436, 437, 767,
	439, 0, 830, 831, 809, 0, 0, 441, 442, 832,
	833, 750, 443, 444, 445, 446, 0, 0, 447, 448,
	449, 451, 789, 452, 0, 774, 453, 454, 455, 247,
	834, 0, 0, 456, 249, 0, 0, 0, 0, 457,
	458, 250, 459, 460, 461, 720, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 716, 717,
	756, 744, 745, 742, 743, 733, 0, 729, 0, 0,
	0, 0, 0, 732, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 791, 736, 0, 0,
	0, 256, 257, 258, 211, 810, 776, 811, 764, 797,
	812, 0, 262, 766, 765, 265, 266, 267, 739, 790,
	813, 814, 217, 0, 268, 795, 0, 781, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 837, 281, 282, 2998, 784,
	782, 783, 787, 0, 785, 786, 284, 285, 481, 286,
	798, 288, 815, 816, 722, 289, 0, 290, 0, 291,
	0, 0, 799, 293, 0, 294, 295, 0, 0, 0,
	727, 299, 296, 297, 300, 301, 298, 302, 817, 818,
	751, 838, 0, 0, 0, 0, 0, 303, 304, 819,
	800, 801, 0, 307, 0, 308, 0, 0, 839, 309,
	0, 310, 820, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 792, 794, 841, 0, 775, 0, 0, 0,
	0, 317, 319, 326, 0, 840, 320, 821, 779, 802,
	803, 804, 805, 822, 0, 780, 0, 327, 842, 843,
	328, 329, 330, 844, 806, 807, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 823, 845, 338, 339, 846,
	0, 340, 341, 0, 0, 342, 0, 343, 724, 723,
	344, 345, 347, 768, 346, 847, 349, 350, 352, 351,
	719, 0, 848, 752, 793, 353, 824, 354, 355, 0,
	777, 778, 0, 0, 358, 359, 0, 0, 360, 235,
	849, 361, 850, 825, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 826, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 827, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 851, 392, 393, 394, 395, 728, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	769, 770, 771, 772, 408, 414, 415, 788, 416, 397,
	398, 417, 852, 418, 828, 773, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 808, 425, 0, 426, 829,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	767, 439, 0, 830, 831, 809, 0, 0, 441, 442,
	832, 833, 750, 443, 444, 2997, 446, 0, 0, 447,
	448, 449, 451, 789, 452, 0, 774, 453, 454, 455,
	247, 834, 0, 0, 456, 249, 0, 0, 0, 0,
	457, 458, 250, 459, 460, 461, 720, 0, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 0, 716,
	717, 756, 744, 745, 742, 743, 733, 0, 729, 0,
	0, 0, 0, 0, 732, 0, 0, 251, 252, 253,
	254, 0, 255, 0, 0, 0, 0, 791, 736, 0,
	0, 0, 256, 257, 258, 2996, 810, 776, 811, 764,
	797, 812, 0, 262, 766, 765, 265, 266, 267, 739,
	790, 813, 814, 217, 0, 268, 795, 0, 781, 0,
	269, 270, 271, 272, 273, 0, 275, 276, 277, 274,
	0, 278, 0, 279, 280, 0, 837, 281, 282, 2998,
	784, 782, 783, 787, 0, 785, 786, 284, 285, 481,
	286, 798, 288, 815, 816, 722, 289, 0, 290, 0,
	291, 0, 0, 799, 293, 0, 294, 295, 0, 0,
	0, 727, 299, 296, 297, 300, 301, 298, 302, 817,
	818, 751, 838, 0, 0, 0, 0, 0, 303, 304,
	819, 800, 801, 0, 307, 0, 308, 0, 0, 839,
	309, 0, 310, 820, 0, 226, 0, 311, 312, 313,
	314, 315, 316, 792, 794, 841, 0, 775, 0, 0,
	0, 0, 317, 319, 326, 0, 840, 320, 821, 779,
	802, 803, 804, 805, 822, 0, 780, 0, 327, 842,
	843, 328, 329, 330, 844, 806, 807, 0, 0, 333,
	334, 335, 0, 337, 336, 0, 823, 845, 338, 339,
	846, 0, 340, 341, 0, 0, 342, 0, 343, 724,
	723, 344, 345, 347, 768, 346, 847, 349, 350, 352,
	351, 719, 0, 848, 752, 793, 353, 824, 354, 355,
	0, 777, 778, 0, 0, 358, 359, 0, 0, 360,
	235, 849, 361, 850, 825, 362, 363, 364, 365, 366,
	367, 368, 0, 369, 826, 370, 238, 371, 0, 372,
	373, 374, 375, 376, 827, 377, 378, 0, 379, 380,
	381, 382, 383, 0, 385, 386, 384, 387, 388, 389,
	390, 0, 391, 851, 392, 393, 394, 395, 728, 396,
	0, 400, 401, 402, 403, 404, 405, 406, 0, 412,
	413, 769, 770, 771, 772, 408, 414, 415, 788, 416,
	397, 398, 417, 852, 418, 828, 773, 420, 0, 429,
	421, 422, 423, 399, 424, 427, 808, 425, 0, 426,
	829, 0, 430, 431, 0, 432, 433, 434, 435, 436,
	437, 767, 439, 0, 830, 831, 809, 0, 0, 441,
	442, 832, 833, 750, 443, 444, 2997, 446, 0, 0,
	447, 448, 449, 451, 789, 452, 0, 774, 453, 454,
	455, 247, 834, 0, 0, 456, 249, 0, 0, 0,
	0, 457, 458, 250, 459, 460, 461, 720, 0, 0,
	0, 0, 0, 0, 0, 718, 0, 0, 0, 0,
	716, 717, 756, 744, 745, 742, 743, 733, 0, 729,
	0, 0, 0, 0, 0, 732, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 791, 736,
	0, 0, 0, 256, 257, 258, 211, 810, 776, 811,
	764, 797, 812, 0, 262, 766, 765, 265, 266, 267,
	739, 790, 813, 814, 217, 0, 268, 795, 0, 781,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 784, 782, 783, 787, 0, 785, 786, 284, 285,
	481, 286, 798, 288, 815, 816, 0, 289, 0, 290,
	0, 291, 0, 0, 799, 293, 0, 294, 295, 0,
	0, 0, 727, 299, 296, 297, 300, 301, 298, 302,
	817, 818, 751, 838, 0, 0, 0, 0, 0, 303,
	304, 819, 800, 801, 0, 307, 0, 308, 0, 0,
	839, 309, 0, 310, 820, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 792, 794, 841, 0, 775, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 821,
	779, 802, 803, 804, 805, 822, 0, 780, 0, 327,
	842, 843, 328, 329, 330, 844, 806, 807, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 823, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	907, 906, 344, 345, 347, 768, 346, 847, 349, 350,
	352, 351, 0, 0, 848, 752, 793, 353, 824, 354,
	355, 0, 777, 778, 0, 0, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 825, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 826, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 827, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 1850,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 769, 770, 771, 772, 408, 414, 415, 788,
	416, 397, 398, 417, 852, 418, 828, 773, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 808, 425, 0,
	426, 829, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 767, 439, 0, 830, 831, 809, 0, 0,
	441, 442, 832, 833, 750, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 789, 452, 0, 774, 453,
	454, 455, 247, 834, 0, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 756, 744,
	745, 742, 743, 733, 0, 0, 1848, 0, 0, 0,
	0, 1846, 1847, 0, 251, 252, 253, 254, 0, 255,
	1849, 0, 0, 0, 791, 736, 732, 0, 0, 256,
	257, 258, 0, 810, 776, 811, 764, 797, 812, 0,
	262, 766, 765, 265, 266, 267, 739, 790, 813, 814,
	217, 0, 268, 795, 0, 781, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 837, 281, 282, 2998, 784, 782, 783,
	787, 0, 785, 786, 284, 285, 481, 286, 798, 288,
	815, 816, 722, 289, 0, 290, 0, 291, 0, 0,
	799, 293, 0, 294, 295, 0, 0, 0, 727, 299,
	296, 297, 300, 301, 298, 302, 817, 818, 751, 838,
	0, 0, 0, 0, 0, 303, 304, 819, 800, 801,
	0, 307, 0, 308, 0, 0, 839, 309, 0, 310,
	820, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	792, 794, 0, 0, 775, 0, 0, 0, 0, 317,
	319, 326, 0, 840, 320, 821, 779, 802, 803, 804,
	805, 822, 0, 780, 0, 327, 0, 0, 328, 329,
	330, 844, 806, 807, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 823, 845, 338, 339, 0, 0, 340,
	341, 0, 0, 342, 0, 343, 724, 723, 344, 345,
	347, 768, 346, 847, 349, 350, 352, 351, 719, 0,
	0, 752, 793, 353, 824, 354, 355, 0, 777, 778,
	0, 0, 358, 359, 0, 0, 360, 235, 849, 361,
	850, 825, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 826, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 827, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	851, 392, 393, 394, 395, 728, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 769, 770,
	771, 772, 408, 414, 415, 788, 416, 397, 398, 417,
	0, 418, 828, 773, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 808, 425, 0, 426, 829, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 767, 439,
	0, 830, 831, 809, 0, 0, 441, 442, 832, 833,
	750, 443, 444, 2997, 446, 0, 0, 447, 448, 449,
	451, 789, 452, 0, 774, 453, 454, 455, 247, 834,
	0, 0, 456, 249, 0, 0, 0, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	704, 0, 903, 0, 0, 0, 0, 716, 717, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 251, 252,
	253, 254, 732, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 905,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 0, 899, 900, 0, 0, 901, 902, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	817, 818, 0, 838, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	839, 309, 0, 310, 820, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 841, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	842, 843, 328, 329, 330, 844, 331, 332, 0, 0,
	333, 334, 335, 891, 337, 336, 0, 823, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	907, 906, 344, 345, 347, 348, 346, 847, 349, 350,
	352, 351, 0, 0, 848, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 897, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 825, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 826, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 168,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 852, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 829, 0, 430, 431, 170, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 832, 833, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 1117, 248, 0, 0, 456, 249, 0, 0,
	903, 162, 457, 458, 250, 459, 460, 461, 0, 163,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 888, 0,
	1413, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 905, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 837, 281, 282, 283, 0,
	899, 900, 0, 0, 901, 902, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 817, 818,
	0, 838, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 839, 309,
	0, 310, 820, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 841, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 840, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 842, 843,
	328, 329, 330, 844, 331, 332, 0, 0, 333, 334,
	335, 891, 337, 336, 0, 823, 845, 338, 339, 846,
	0, 340, 341, 0, 0, 342, 0, 343, 907, 906,
	344, 345, 347, 348, 346, 847, 349, 350, 352, 351,
	0, 0, 848, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 897, 358, 359, 0, 0, 360, 235,
	849, 361, 850, 825, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 826, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 851, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 168, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 852, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 829,
	0, 430, 431, 170, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	832, 833, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	1117, 248, 0, 0, 456, 249, 0, 0, 903, 162,
	457, 458, 250, 459, 460, 461, 0, 163, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 791, 0, 888, 0, 1413, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 790, 215, 216,
	217, 0, 268, 795, 0, 781, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 837, 281, 282, 283, 784, 782, 783,
	787, 0, 785, 786, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 817, 818, 0, 838,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 839, 309, 0, 310,
	820, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	792, 794, 841, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 840, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 842, 843, 328, 329,
	330, 844, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 823, 845, 338, 339, 846, 0, 340,
	341, 0, 0, 342, 0, 343, 907, 906, 344, 345,
	347, 348, 346, 847, 349, 350, 352, 351, 0, 0,
	848, 0, 793, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 849, 361,
	850, 825, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 826, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	851, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 788, 416, 397, 398, 417,
	852, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 829, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 832, 833,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 789, 452, 0, 450, 453, 454, 455, 247, 248,
	0, 0, 456, 249, 2230, 0, 903, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 2548, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 905, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 837, 281, 282, 283, 0, 899, 900, 0, 0,
	901, 902, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 817, 818, 0, 838, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 839, 309, 0, 310, 820, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 227, 228,
	841, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 840, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 842, 843, 328, 329, 330, 844,
	331, 332, 0, 0, 333, 334, 335, 891, 337, 336,
	0, 823, 845, 338, 339, 846, 0, 340, 341, 0,
	0, 342, 0, 343, 907, 906, 344, 345, 347, 348,
	346, 847, 349, 350, 352, 351, 0, 0, 848, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 897,
	358, 359, 0, 0, 360, 235, 849, 361, 850, 825,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 826,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 851, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 852, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 829, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 832, 833, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 0, 0,
	456, 249, 887, 0, 903, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 888, 0, 895, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 905, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 837,
	281, 282, 283, 0, 899, 900, 0, 0, 901, 902,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 817, 818, 0, 838, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 839, 309, 0, 310, 820, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 841, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 840,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 842, 843, 328, 329, 330, 844, 331, 332,
	0, 0, 333, 334, 335, 891, 337, 336, 0, 823,
	845, 338, 339, 846, 0, 340, 341, 0, 0, 342,
	0, 343, 907, 906, 344, 345, 347, 348, 346, 847,
	349, 350, 352, 351, 0, 0, 848, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 897, 358, 359,
	0, 0, 360, 235, 849, 361, 850, 825, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 826, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 851, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 852, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 829, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 832, 833, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	0, 0, 903, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	888, 0, 895, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 905,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 0, 899, 900, 0, 0, 901, 902, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	817, 818, 0, 838, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	839, 309, 0, 310, 820, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 841, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	842, 843, 328, 329, 330, 844, 331, 332, 0, 0,
	333, 334, 335, 891, 337, 336, 0, 823, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	907, 906, 344, 345, 347, 348, 346, 847, 349, 350,
	352, 351, 0, 0, 848, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 897, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 825, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 826, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 852, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 829, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 832, 833, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 0, 0, 456, 249, 1114, 0,
	928, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 888, 0,
	895, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 905, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 837, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 838, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 839, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 841, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 840, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 842, 843,
	328, 329, 330, 844, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 845, 338, 339, 846,
	0, 340, 341, 0, 0, 342, 0, 343, 907, 906,
	344, 345, 347, 348, 346, 847, 349, 350, 352, 351,
	0, 0, 848, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	849, 361, 850, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 851, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 168, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 852, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 170, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	1117, 248, 0, 0, 456, 249, 0, 0, 903, 162,
	457, 458, 250, 459, 460, 461, 0, 163, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 135, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 268, 218, 0, 905, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 837, 281, 282, 283, 0, 899, 900,
	0, 0, 901, 902, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 817, 818, 0, 838,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 839, 309, 0, 310,
	820, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	227, 228, 841, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 840, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 842, 843, 328, 329,
	330, 844, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 823, 845, 338, 339, 846, 0, 340,
	341, 0, 0, 342, 0, 343, 907, 906, 344, 345,
	347, 348, 346, 847, 349, 350, 352, 351, 0, 0,
	848, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 849, 361,
	850, 825, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 826, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	851, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	852, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 829, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 832, 833,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	0, 0, 456, 249, 704, 0, 478, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 1319, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 227, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 168, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 170,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 1117, 248, 0, 0,
	456, 249, 0, 0, 0, 162, 457, 458, 250, 459,
	460, 461, 0, 163, 756, 744, 745, 742, 743, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 135, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 810,
	776, 811, 764, 797, 812, 0, 262, 766, 765, 265,
	266, 267, 0, 0, 813, 814, 217, 0, 268, 218,
	0, 905, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 837,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 798, 288, 815, 816, 0, 289,
	0, 290, 0, 291, 0, 0, 799, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 751, 838, 0, 0, 0, 0,
	0, 303, 304, 819, 800, 801, 0, 307, 0, 308,
	0, 0, 839, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 841, 0,
	775, 0, 0, 0, 0, 317, 319, 326, 0, 840,
	320, 821, 779, 802, 803, 804, 805, 822, 0, 780,
	0, 327, 842, 843, 328, 329, 330, 844, 806, 807,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	845, 338, 339, 846, 0, 340, 341, 0, 0, 342,
	0, 343, 907, 906, 344, 345, 347, 768, 346, 847,
	349, 350, 352, 351, 0, 0, 848, 752, 233, 353,
	824, 354, 355, 0, 777, 778, 0, 0, 358, 359,
	0, 0, 360, 235, 849, 361, 850, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 827, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 851, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 769, 770, 771, 772, 408, 414,
	415, 0, 416, 397, 398, 417, 852, 418, 828, 773,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 808,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 767, 439, 0, 830, 831, 809,
	0, 0, 441, 442, 245, 246, 750, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	774, 453, 454, 455, 247, 834, 478, 0, 456, 249,
	0, 0, 0, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 227, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 0, 0,
	456, 249, 0, 0, 478, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 2030, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	0, 0, 478, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 2460, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 0, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 1186, 0,
	928, 927, 0, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	1417, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 905, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 837, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 838, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 839, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 841, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 840, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 842, 843,
	328, 329, 330, 844, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 845, 338, 339, 846,
	0, 340, 341, 0, 0, 342, 0, 343, 907, 906,
	344, 345, 347, 348, 346, 847, 349, 350, 352, 351,
	0, 0, 848, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	849, 361, 850, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 851, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 852, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 0, 0, 456, 249, 0, 0, 0, 0,
	457, 458, 250, 459, 460, 461, 1110, 0, 928, 927,
	0, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 268, 218, 0, 905, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 837, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 838,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 839, 309, 0, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	1109, 228, 841, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 840, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 842, 843, 328, 329,
	330, 844, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 845, 338, 339, 846, 0, 340,
	341, 0, 0, 342, 0, 343, 907, 906, 344, 345,
	347, 348, 346, 847, 349, 350, 352, 351, 0, 0,
	848, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 849, 361,
	850, 236, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	851, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	852, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	0, 0, 456, 249, 0, 0, 0, 0, 457, 458,
	250, 459, 460, 461, 1106, 0, 928, 927, 0, 0,
	0, 925, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 905, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 837, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 838, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 839, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 1105, 228,
	841, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 840, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 842, 843, 328, 329, 330, 844,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 845, 338, 339, 846, 0, 340, 341, 0,
	0, 342, 0, 343, 907, 906, 344, 345, 347, 348,
	346, 847, 349, 350, 352, 351, 0, 0, 848, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 849, 361, 850, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 851, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 852, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 0, 0,
	456, 249, 0, 0, 0, 0, 457, 458, 250, 459,
	460, 461, 1067, 0, 928, 927, 0, 0, 0, 925,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 905, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 837,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 838, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 839, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 1066, 228, 841, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 840,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 842, 843, 328, 329, 330, 844, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	845, 338, 339, 846, 0, 340, 341, 0, 0, 342,
	0, 343, 907, 906, 344, 345, 347, 348, 346, 847,
	349, 350, 352, 351, 0, 0, 848, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 849, 361, 850, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 851, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 852, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	0, 0, 0, 0, 457, 458, 250, 459, 460, 461,
	1064, 0, 928, 927, 0, 0, 0, 925, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 905,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 838, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	839, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 1063, 228, 841, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	842, 843, 328, 329, 330, 844, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	907, 906, 344, 345, 347, 348, 346, 847, 349, 350,
	352, 351, 0, 0, 848, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 852, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 0, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 921, 0,
	928, 927, 0, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 905, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 837, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 838, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 839, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 923, 228, 841, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 840, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 842, 843,
	328, 329, 330, 844, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 845, 338, 339, 846,
	0, 340, 341, 0, 0, 342, 0, 343, 907, 906,
	344, 345, 347, 348, 346, 847, 349, 350, 352, 351,
	0, 0, 848, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	849, 361, 850, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 851, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 852, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 928, 927, 456, 249, 0, 925, 0, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 905,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 837, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 838, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	839, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 841, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 840, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	842, 843, 328, 329, 330, 844, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 845, 338,
	339, 846, 0, 340, 341, 0, 0, 342, 0, 343,
	907, 906, 344, 345, 347, 348, 346, 847, 349, 350,
	352, 351, 0, 0, 848, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 849, 361, 850, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 851, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 852, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 928, 927, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 905, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 837,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 838, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 839, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 841, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 840,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 842, 843, 328, 329, 330, 844, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	845, 338, 339, 846, 0, 340, 341, 0, 0, 342,
	0, 343, 907, 906, 344, 345, 347, 348, 346, 847,
	349, 350, 352, 351, 0, 0, 848, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 849, 361, 850, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 851, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 852, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 928, 0, 456, 249,
	0, 0, 0, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 905, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 837, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 838, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 839, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 227, 228,
	841, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 840, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 842, 843, 328, 329, 330, 844,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 845, 338, 339, 846, 0, 340, 341, 0,
	0, 342, 0, 343, 907, 906, 344, 345, 347, 348,
	346, 847, 349, 350, 352, 351, 0, 0, 848, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 849, 361, 850, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 851, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 852, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 0, 0,
	456, 249, 576, 0, 203, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 209, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 208, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	202, 0, 203, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 464, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	209, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 208, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 203, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 464, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 209, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 1646, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 208, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 203, 0, 456, 249,
	0, 0, 0, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 464, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 209, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 227, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 208,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 478, 0,
	456, 249, 0, 0, 0, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 464, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 268, 218, 0, 0, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 0, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 0, 309, 0, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	227, 228, 0, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 0, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 0, 0, 328, 329,
	330, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 0, 338, 339, 0, 0, 340,
	341, 0, 0, 342, 0, 343, 0, 0, 344, 345,
	347, 348, 346, 0, 349, 350, 352, 351, 0, 0,
	0, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 0, 361,
	0, 236, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	0, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	478, 0, 456, 249, 0, 0, 0, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 0, 464,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 1925, 268, 218, 0, 0, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 1922,
	278, 0, 279, 280, 0, 0, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 2000, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 1928, 0, 0, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 0, 0, 318, 0, 0, 0,
	1998, 317, 319, 326, 0, 0, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 1997, 0, 0,
	328, 329, 330, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 0, 338, 339, 0,
	0, 340, 341, 0, 0, 342, 0, 343, 0, 0,
	344, 345, 347, 348, 346, 0, 349, 350, 352, 351,
	0, 0, 0, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	0, 361, 0, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 1927, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 0, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 1999, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 478, 0, 456, 249, 0, 0, 0, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 1925, 268, 218, 0, 0,
	1919, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 1922, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 1928, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 1918, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 1927,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	1926, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 0, 0, 456, 249, 582, 0,
	478, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 581,
	563, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 0, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 566, 0, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 0, 309,
	567, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 0, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 0, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 0, 0,
	328, 329, 330, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 0, 338, 339, 0,
	0, 340, 341, 0, 0, 342, 0, 343, 0, 0,
	344, 345, 347, 348, 346, 0, 349, 350, 352, 351,
	0, 0, 0, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	0, 361, 0, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 568, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 0, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 0, 0, 456, 249, 562, 0, 478, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 563, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 268, 218, 0, 0, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 566, 0, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 0, 309, 567, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	227, 228, 0, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 0, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 0, 0, 328, 329,
	330, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 0, 338, 339, 0, 0, 340,
	341, 0, 0, 342, 0, 343, 0, 0, 344, 345,
	347, 348, 346, 0, 349, 350, 352, 351, 0, 0,
	0, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 0, 361,
	0, 236, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 568, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	0, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	478, 0, 456, 249, 0, 0, 0, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 0, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 566, 0, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 0, 309,
	567, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 0, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 0, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 0, 0,
	328, 329, 330, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 0, 338, 339, 0,
	0, 340, 341, 0, 0, 342, 0, 343, 0, 0,
	344, 345, 347, 348, 346, 0, 349, 350, 352, 351,
	0, 0, 0, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	0, 361, 0, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 568, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 0, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 0, 0, 456, 249, 1085, 0, 478, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 268, 218, 0, 0, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 0, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 0, 309, 0, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	227, 228, 0, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 0, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 0, 0, 328, 329,
	330, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 0, 338, 339, 0, 0, 340,
	341, 0, 0, 342, 0, 343, 0, 0, 344, 345,
	347, 348, 346, 0, 349, 350, 352, 351, 0, 0,
	0, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 897, 358, 359, 0, 0, 360, 235, 0, 361,
	0, 236, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	0, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	0, 0, 456, 249, 916, 0, 478, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 918, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 897,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 0, 0,
	456, 249, 913, 0, 478, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 915, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 897, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	909, 0, 478, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 911, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 897, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 0, 0, 456, 249, 501, 0,
	478, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	500, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 0, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 0, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 0, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 0, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 0, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 0, 0,
	328, 329, 330, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 0, 338, 339, 0,
	0, 340, 341, 0, 0, 342, 0, 343, 0, 0,
	344, 345, 347, 348, 346, 0, 349, 350, 352, 351,
	0, 0, 0, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	0, 361, 0, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 499, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 0, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 478, 0, 456, 249, 0, 0, 0, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	1905, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 478, 2396, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 478, 2396, 456, 249,
	0, 0, 0, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 227, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 2393, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 478, 0,
	456, 249, 0, 0, 0, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 268, 218, 0, 0, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 0, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 0, 309, 0, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	227, 228, 0, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 0, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 0, 0, 328, 329,
	330, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 0, 338, 339, 0, 0, 340,
	341, 0, 0, 342, 0, 343, 0, 0, 344, 345,
	347, 348, 346, 0, 349, 350, 352, 351, 0, 0,
	0, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 897, 358, 359, 0, 0, 360, 235, 0, 361,
	0, 236, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	0, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	0, 0, 456, 249, 1666, 0, 478, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 227, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 0, 0,
	456, 249, 1664, 0, 478, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	1662, 0, 478, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 478, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	251, 252, 253, 254, 1639, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	1599, 0, 478, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 0, 0, 456, 249, 1597, 0,
	478, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 0, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 0, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 0, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 0, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 0, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 0, 0,
	328, 329, 330, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 0, 338, 339, 0,
	0, 340, 341, 0, 0, 342, 0, 343, 0, 0,
	344, 345, 347, 348, 346, 0, 349, 350, 352, 351,
	0, 0, 0, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	0, 361, 0, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 0, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 0, 0, 456, 249, 608, 0, 478, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	1159, 0, 268, 218, 0, 0, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 0, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 0, 309, 0, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	227, 228, 0, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 0, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 0, 0, 328, 329,
	330, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 0, 338, 339, 0, 0, 340,
	341, 0, 0, 342, 0, 343, 0, 0, 344, 345,
	347, 348, 609, 0, 349, 350, 352, 351, 0, 0,
	0, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 0, 361,
	0, 236, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	605, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	0, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 604, 244, 440, 0, 0, 441, 442, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	0, 0, 456, 249, 1497, 0, 478, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 1496, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 0, 0,
	456, 249, 608, 0, 478, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 1159, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 609, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 605, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 604, 244, 440,
	0, 0, 441, 1160, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	608, 0, 478, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 598, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 609, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 605, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 1135, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 604, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 0, 0, 456, 249, 1103, 0,
	478, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 0, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 0, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 0, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 1102, 228, 0, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 0, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 0, 0,
	328, 329, 330, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 0, 338, 339, 0,
	0, 340, 341, 0, 0, 342, 0, 343, 0, 0,
	344, 345, 347, 348, 346, 0, 349, 350, 352, 351,
	0, 0, 0, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	0, 361, 0, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 0, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 0, 0, 456, 249, 1099, 0, 478, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 268, 218, 0, 0, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 0, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 0, 309, 0, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	1098, 228, 0, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 0, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 0, 0, 328, 329,
	330, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 0, 338, 339, 0, 0, 340,
	341, 0, 0, 342, 0, 343, 0, 0, 344, 345,
	347, 348, 346, 0, 349, 350, 352, 351, 0, 0,
	0, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 0, 361,
	0, 236, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	0, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	0, 0, 456, 249, 1096, 0, 478, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 1095, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 0, 0,
	456, 249, 1093, 0, 478, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 1092, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	1089, 0, 478, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 1088, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 478, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	251, 252, 253, 254, 1077, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	1075, 0, 478, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 1074, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 0, 0, 456, 249, 1069, 0,
	478, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 0, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 0, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 0, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 0, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 0, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 0, 0,
	328, 329, 330, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 0, 338, 339, 0,
	0, 340, 341, 0, 0, 342, 0, 343, 0, 0,
	344, 345, 347, 348, 346, 0, 349, 350, 352, 351,
	0, 0, 0, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	0, 361, 0, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 0, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 0, 0, 456, 249, 1060, 0, 478, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 268, 218, 0, 0, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 0, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 0, 309, 0, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	1059, 228, 0, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 0, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 0, 0, 328, 329,
	330, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 0, 338, 339, 0, 0, 340,
	341, 0, 0, 342, 0, 343, 0, 0, 344, 345,
	347, 348, 346, 0, 349, 350, 352, 351, 0, 0,
	0, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 0, 361,
	0, 236, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	0, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	0, 0, 456, 249, 1055, 0, 478, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 227, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 0, 0,
	456, 249, 1051, 0, 478, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 1053, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	935, 0, 478, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 937, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 0, 0, 456, 249, 932, 0,
	478, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 0, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 0, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 0, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 0, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 0, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 0, 0,
	328, 329, 330, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 0, 338, 339, 0,
	0, 340, 341, 0, 0, 342, 0, 343, 0, 0,
	344, 345, 347, 348, 346, 0, 349, 350, 352, 351,
	0, 0, 0, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	0, 361, 0, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 0, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 0, 0, 456, 249, 608, 0, 478, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 598, 218, 0, 0, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 0, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 0, 309, 0, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	227, 228, 0, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 0, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 0, 0, 328, 329,
	330, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 0, 338, 339, 0, 0, 340,
	597, 0, 0, 342, 0, 343, 0, 0, 344, 345,
	347, 348, 609, 0, 349, 350, 352, 351, 0, 0,
	0, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 0, 361,
	0, 236, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 599, 396, 0, 400, 401,
	605, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 600, 415, 0, 416, 397, 398, 417,
	0, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 604, 244, 440, 0, 0, 441, 602, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	0, 0, 456, 249, 588, 0, 478, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 227, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 589, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 0, 0,
	456, 249, 584, 0, 478, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 227, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 0, 0, 456, 249,
	574, 0, 478, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 0, 0, 456, 249, 523, 0,
	478, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 0, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 0, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 0, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 0, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 0, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 0, 0,
	328, 329, 330, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 0, 338, 339, 0,
	0, 340, 341, 0, 0, 342, 0, 343, 0, 0,
	344, 345, 347, 348, 346, 0, 349, 350, 352, 351,
	0, 0, 0, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	0, 361, 0, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 240, 396, 0,
	400, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 0, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 478, 0, 456, 249, 0, 0, 0, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	0, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	416, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 478, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 2287, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 478, 0, 456, 249,
	0, 0, 0, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 2285, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	377, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 478, 0,
	456, 249, 0, 0, 0, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 268, 218, 0, 0, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 0, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 0, 309, 0, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	2274, 228, 0, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 0, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 0, 0, 328, 329,
	330, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 0, 338, 339, 0, 0, 340,
	341, 0, 0, 342, 0, 343, 0, 0, 344, 345,
	347, 348, 346, 0, 349, 350, 352, 351, 0, 0,
	0, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 0, 361,
	0, 236, 362, 363, 364, 365, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 375,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 240, 396, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	0, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	478, 0, 456, 249, 0, 0, 0, 0, 457, 458,
	250, 459, 460, 461, 0, 0, 251, 252, 253, 254,
	0, 255, 0, 0, 0, 0, 210, 0, 0, 0,
	0, 256, 257, 258, 211, 212, 259, 213, 260, 261,
	214, 0, 262, 263, 264, 265, 266, 267, 0, 0,
	215, 216, 217, 0, 268, 218, 0, 0, 0, 269,
	270, 271, 272, 273, 0, 275, 276, 277, 274, 0,
	278, 0, 279, 280, 0, 0, 281, 282, 283, 0,
	0, 0, 0, 0, 0, 0, 284, 285, 481, 286,
	287, 288, 219, 220, 0, 289, 0, 290, 0, 291,
	0, 0, 292, 293, 0, 294, 295, 0, 0, 0,
	221, 299, 296, 297, 300, 301, 298, 302, 222, 223,
	0, 0, 0, 0, 0, 0, 0, 303, 304, 224,
	305, 306, 0, 307, 0, 308, 0, 0, 0, 309,
	0, 310, 225, 0, 226, 0, 311, 312, 313, 314,
	315, 316, 227, 228, 0, 0, 318, 0, 0, 0,
	0, 317, 319, 326, 0, 0, 320, 229, 322, 321,
	323, 324, 325, 230, 0, 231, 0, 327, 0, 0,
	328, 329, 330, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 337, 336, 0, 232, 0, 338, 339, 0,
	0, 340, 341, 0, 0, 342, 0, 343, 0, 0,
	344, 345, 347, 348, 346, 0, 349, 350, 352, 351,
	0, 0, 0, 0, 233, 353, 234, 354, 355, 0,
	356, 357, 0, 0, 358, 359, 0, 0, 360, 235,
	0, 361, 0, 236, 362, 363, 364, 365, 366, 367,
	368, 0, 369, 237, 370, 238, 371, 0, 372, 373,
	374, 375, 376, 239, 377, 378, 0, 379, 380, 381,
	382, 383, 0, 385, 386, 384, 387, 388, 389, 390,
	0, 391, 0, 392, 393, 394, 395, 240, 396, 0,
	589, 401, 402, 403, 404, 405, 406, 0, 412, 413,
	407, 409, 410, 411, 408, 414, 415, 0, 416, 397,
	398, 417, 0, 418, 241, 419, 420, 0, 429, 421,
	422, 423, 399, 424, 427, 428, 425, 0, 426, 242,
	0, 430, 431, 0, 432, 433, 434, 435, 436, 437,
	438, 439, 0, 243, 244, 440, 0, 0, 441, 442,
	245, 246, 0, 443, 444, 445, 446, 0, 0, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	247, 248, 478, 0, 456, 249, 0, 0, 0, 0,
	457, 458, 250, 459, 460, 461, 0, 0, 251, 252,
	253, 254, 0, 255, 0, 0, 0, 0, 210, 0,
	1510, 0, 0, 256, 257, 258, 211, 212, 259, 213,
	260, 261, 214, 0, 262, 263, 264, 265, 266, 267,
	0, 0, 215, 216, 217, 0, 268, 218, 0, 0,
	0, 269, 270, 271, 272, 273, 0, 275, 276, 277,
	274, 0, 278, 0, 279, 280, 0, 0, 281, 282,
	283, 0, 0, 0, 0, 0, 0, 0, 284, 285,
	481, 286, 287, 288, 219, 220, 0, 289, 0, 290,
	0, 291, 0, 0, 292, 293, 0, 294, 295, 0,
	0, 0, 221, 299, 296, 297, 300, 301, 298, 302,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 224, 305, 306, 0, 307, 0, 308, 0, 0,
	0, 309, 0, 310, 225, 0, 226, 0, 311, 312,
	313, 314, 315, 316, 227, 228, 0, 0, 318, 0,
	0, 0, 0, 317, 319, 326, 0, 0, 320, 229,
	322, 321, 323, 324, 325, 230, 0, 231, 0, 327,
	0, 0, 328, 329, 330, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 337, 336, 0, 232, 0, 338,
	339, 0, 0, 340, 341, 0, 0, 342, 0, 343,
	0, 0, 344, 345, 347, 348, 346, 0, 349, 350,
	352, 351, 0, 0, 0, 0, 233, 353, 234, 354,
	355, 0, 356, 357, 0, 0, 358, 359, 0, 0,
	360, 235, 0, 361, 0, 236, 362, 363, 364, 365,
	366, 367, 368, 0, 369, 237, 370, 238, 371, 0,
	372, 373, 374, 375, 376, 239, 377, 378, 0, 379,
	380, 381, 382, 383, 0, 385, 386, 384, 387, 388,
	389, 390, 0, 391, 0, 392, 393, 394, 395, 240,
	396, 0, 400, 401, 402, 403, 404, 405, 406, 0,
	412, 413, 407, 409, 410, 411, 408, 414, 415, 0,
	0, 397, 398, 417, 0, 418, 241, 419, 420, 0,
	429, 421, 422, 423, 399, 424, 427, 428, 425, 0,
	426, 242, 0, 430, 431, 0, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 243, 244, 440, 0, 0,
	441, 442, 245, 246, 0, 443, 444, 445, 446, 0,
	0, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 247, 248, 478, 0, 456, 249, 0, 0,
	0, 0, 457, 458, 250, 459, 460, 461, 0, 0,
	251, 252, 253, 254, 0, 255, 0, 0, 0, 0,
	210, 0, 0, 0, 0, 256, 257, 258, 211, 212,
	259, 213, 260, 261, 214, 0, 262, 263, 264, 265,
	266, 267, 0, 0, 215, 216, 217, 0, 268, 218,
	0, 0, 0, 269, 270, 271, 272, 273, 0, 275,
	276, 277, 274, 0, 278, 0, 279, 280, 0, 0,
	281, 282, 283, 0, 0, 0, 0, 0, 0, 0,
	284, 285, 481, 286, 287, 288, 219, 220, 0, 289,
	0, 290, 0, 291, 0, 0, 292, 293, 0, 294,
	295, 0, 0, 0, 221, 299, 296, 297, 300, 301,
	298, 302, 222, 223, 0, 0, 0, 0, 0, 0,
	0, 303, 304, 224, 305, 306, 0, 307, 0, 308,
	0, 0, 0, 309, 0, 310, 225, 0, 226, 0,
	311, 312, 313, 314, 315, 316, 1501, 228, 0, 0,
	318, 0, 0, 0, 0, 317, 319, 326, 0, 0,
	320, 229, 322, 321, 323, 324, 325, 230, 0, 231,
	0, 327, 0, 0, 328, 329, 330, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 337, 336, 0, 232,
	0, 338, 339, 0, 0, 340, 341, 0, 0, 342,
	0, 343, 0, 0, 344, 345, 347, 348, 346, 0,
	349, 350, 352, 351, 0, 0, 0, 0, 233, 353,
	234, 354, 355, 0, 356, 357, 0, 0, 358, 359,
	0, 0, 360, 235, 0, 361, 0, 236, 362, 363,
	364, 365, 366, 367, 368, 0, 369, 237, 370, 238,
	371, 0, 372, 373, 374, 375, 376, 239, 377, 378,
	0, 379, 380, 381, 382, 383, 0, 385, 386, 384,
	387, 388, 389, 390, 0, 391, 0, 392, 393, 394,
	395, 240, 396, 0, 400, 401, 402, 403, 404, 405,
	406, 0, 412, 413, 407, 409, 410, 411, 408, 414,
	415, 0, 416, 397, 398, 417, 0, 418, 241, 419,
	420, 0, 429, 421, 422, 423, 399, 424, 427, 428,
	425, 0, 426, 242, 0, 430, 431, 0, 432, 433,
	434, 435, 436, 437, 438, 439, 0, 243, 244, 440,
	0, 0, 441, 442, 245, 246, 0, 443, 444, 445,
	446, 0, 0, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 247, 248, 478, 0, 456, 249,
	0, 0, 0, 0, 457, 458, 250, 459, 460, 461,
	0, 0, 251, 252, 253, 254, 0, 255, 0, 0,
	0, 0, 210, 0, 0, 0, 0, 256, 257, 258,
	211, 212, 259, 213, 260, 261, 214, 0, 262, 263,
	264, 265, 266, 267, 0, 0, 215, 216, 217, 0,
	268, 218, 0, 0, 0, 269, 270, 271, 272, 273,
	0, 275, 276, 277, 274, 0, 278, 0, 279, 280,
	0, 0, 281, 282, 283, 0, 0, 0, 0, 0,
	0, 0, 284, 285, 481, 286, 287, 288, 219, 220,
	0, 289, 0, 290, 0, 291, 0, 0, 292, 293,
	0, 294, 295, 0, 0, 0, 221, 299, 296, 297,
	300, 301, 298, 302, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 303, 304, 224, 305, 306, 0, 307,
	0, 308, 0, 0, 0, 309, 0, 310, 225, 0,
	226, 0, 311, 312, 313, 314, 315, 316, 227, 228,
	0, 0, 318, 0, 0, 0, 0, 317, 319, 326,
	0, 0, 320, 229, 322, 321, 323, 324, 325, 230,
	0, 231, 0, 327, 0, 0, 328, 329, 330, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 337, 336,
	0, 232, 0, 338, 339, 0, 0, 340, 341, 0,
	0, 342, 0, 343, 0, 0, 344, 345, 347, 348,
	346, 0, 349, 350, 352, 351, 0, 0, 0, 0,
	233, 353, 234, 354, 355, 0, 356, 357, 0, 0,
	358, 359, 0, 0, 360, 235, 0, 361, 0, 236,
	362, 363, 364, 365, 366, 367, 368, 0, 369, 237,
	370, 238, 371, 0, 372, 373, 374, 375, 376, 239,
	870, 378, 0, 379, 380, 381, 382, 383, 0, 385,
	386, 384, 387, 388, 389, 390, 0, 391, 0, 392,
	393, 394, 395, 240, 396, 0, 400, 401, 402, 403,
	404, 405, 406, 0, 412, 413, 407, 409, 410, 411,
	408, 414, 415, 0, 416, 397, 398, 417, 0, 418,
	241, 419, 420, 0, 429, 421, 422, 423, 399, 424,
	427, 428, 425, 0, 426, 242, 0, 430, 431, 0,
	432, 433, 434, 435, 436, 437, 438, 439, 0, 243,
	244, 440, 0, 0, 441, 442, 245, 246, 0, 443,
	444, 445, 446, 0, 0, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 247, 248, 478, 0,
	456, 249, 0, 0, 0, 0, 457, 458, 250, 459,
	460, 461, 0, 0, 251, 252, 253, 254, 0, 255,
	0, 0, 0, 0, 210, 0, 0, 0, 0, 256,
	257, 258, 211, 212, 259, 213, 260, 261, 214, 0,
	262, 263, 264, 265, 266, 267, 0, 0, 215, 216,
	217, 0, 268, 218, 0, 0, 0, 269, 270, 271,
	272, 273, 0, 275, 276, 277, 274, 0, 278, 0,
	279, 280, 0, 0, 281, 282, 283, 0, 0, 0,
	0, 0, 0, 0, 284, 285, 481, 286, 287, 288,
	219, 220, 0, 289, 0, 290, 0, 291, 0, 0,
	292, 293, 0, 294, 295, 0, 0, 0, 221, 299,
	296, 297, 300, 301, 298, 302, 222, 223, 0, 0,
	0, 0, 0, 0, 0, 303, 304, 224, 305, 306,
	0, 307, 0, 308, 0, 0, 0, 309, 0, 310,
	225, 0, 226, 0, 311, 312, 313, 314, 315, 316,
	227, 228, 0, 0, 318, 0, 0, 0, 0, 317,
	319, 326, 0, 0, 320, 229, 322, 321, 323, 324,
	325, 230, 0, 231, 0, 327, 0, 0, 328, 329,
	330, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	337, 336, 0, 232, 0, 338, 339, 0, 0, 340,
	341, 0, 0, 342, 0, 343, 0, 0, 344, 345,
	347, 348, 346, 0, 349, 350, 352, 351, 0, 0,
	0, 0, 233, 353, 234, 354, 355, 0, 356, 357,
	0, 0, 358, 359, 0, 0, 360, 235, 0, 361,
	0, 236, 362, 363, 364, 0, 366, 367, 368, 0,
	369, 237, 370, 238, 371, 0, 372, 373, 374, 0,
	376, 239, 377, 378, 0, 379, 380, 381, 382, 383,
	0, 385, 386, 384, 387, 388, 389, 390, 0, 391,
	0, 392, 393, 394, 395, 240, 0, 0, 400, 401,
	402, 403, 404, 405, 406, 0, 412, 413, 407, 409,
	410, 411, 408, 414, 415, 0, 416, 397, 398, 417,
	0, 418, 241, 419, 420, 0, 429, 421, 422, 423,
	399, 424, 427, 428, 425, 0, 426, 242, 0, 430,
	431, 0, 432, 433, 434, 435, 436, 437, 438, 439,
	0, 243, 244, 440, 0, 0, 441, 442, 245, 246,
	0, 443, 444, 445, 446, 0, 0, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 247, 248,
	0, 0, 456, 249, 0, 0, 0, 0, 457, 458,
	250, 459, 460, 461, 1256, 1257, 0, 1289, 1290, 1291,
	1299, 1300, 1301, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1292, 0, 0, 0, 0, 0, 0, 1259,
	0, 0, 1305, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1256, 1257, 0, 1289, 1290, 1291, 1299, 1300,
	1301, 0, 0, 0, 1258, 0, 0, 0, 0, 0,
	1292, 0, 1278, 0, 0, 0, 0, 1259, 0, 1275,
	1305, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 0, 0, 0, 0, 0, 0, 0,
	1278, 0, 0, 0, 0, 0, 0, 1275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 1282, 1283, 1284, 0, 0, 0, 0, 0,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1296, 1306, 0, 1286, 1287, 1288, 0, 1281,
	1282, 1283, 1284, 0, 0, 0, 0, 0, 1264, 0,
	0, 0, 0, 0, 0, 0, 1302, 1303, 0, 0,
	0, 0, 0, 0, 1273, 1274, 0, 0, 0, 0,
	1296, 1306, 0, 1286, 1287, 1288, 0, 1294, 0, 0,
	0, 0, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1302, 1303, 0, 0, 0, 0,
	1304, 0, 1273, 1274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1293, 1294, 0, 0, 0, 0,
	0, 0, 1279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1285, 0, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1280, 0, 0,
	0, 0, 0, 0, 0, 1256, 1257, 0, 1289, 1290,
	1291, 1299, 1300, 1301, 0, 0, 0, 0, 1285, 0,
	1297, 0, 0, 1292, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 1305, 0, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1258, 0, 0, 1297, 0,
	0, 0, 0, 1278, 0, 0, 0, 0, 0, 0,
	1275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 1270, 1271, 1277,
	1276, 1272, 1298, 0, 1269, 1267, 1268, 1260, 1261, 1262,
	1263, 1265, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 2165, 1281, 1282, 1283, 1284, 0, 0, 0, 0,
	0, 1264, 1295, 0, 0, 1270, 1271, 1277, 1276, 1272,
	1298, 0, 1269, 1267, 1268, 1260, 1261, 1262, 1263, 1265,
	1266, 0, 0, 1296, 1306, 2961, 1286, 1287, 1288, 0,
	0, 0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291,
	1299, 1300, 1301, 0, 0, 0, 0, 1302, 1303, 0,
	0, 0, 1292, 0, 0, 1273, 1274, 0, 0, 1259,
	0, 0, 1305, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 0, 0, 0, 0, 0,
	0, 1304, 1278, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 1282, 1283, 1284, 0, 0, 0, 1280, 0,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1256, 1257, 0, 1289, 1290, 1291, 1299, 1300, 1301, 0,
	0, 1297, 1296, 1306, 0, 1286, 1287, 1288, 1292, 0,
	0, 0, 0, 0, 0, 1259, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 1302, 1303, 0, 0,
	0, 0, 0, 0, 1273, 1274, 0, 0, 0, 0,
	1258, 0, 0, 0, 0, 0, 0, 1294, 1278, 0,
	0, 0, 0, 0, 1279, 1275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 0, 1295, 0, 0, 1270, 1271,
	1277, 1276, 1272, 1298, 1293, 1269, 1267, 1268, 1260, 1261,
	1262, 1263, 1265, 1266, 0, 0, 0, 0, 2957, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 1282, 1283,
	1284, 0, 0, 0, 0, 0, 1264, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1280, 1296, 1306,
	0, 1286, 1287, 1288, 0, 0, 0, 0, 0, 1256,
	1257, 0, 1289, 1290, 1291, 1299, 1300, 1301, 0, 0,
	1297, 0, 1302, 1303, 0, 0, 0, 1292, 0, 0,
	1273, 1274, 0, 0, 1259, 0, 0, 1305, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 1258,
	0, 0, 0, 0, 0, 0, 1304, 1278, 0, 0,
	0, 0, 0, 0, 1275, 0, 0, 0, 0, 0,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 1270, 1271, 1277,
	1276, 1272, 1298, 0, 1269, 1267, 1268, 1260, 1261, 1262,
	1263, 1265, 1266, 0, 0, 0, 1285, 2897, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 1282, 1283, 1284,
	0, 0, 0, 1280, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1256, 1257, 0, 1289, 1290,
	1291, 1299, 1300, 1301, 0, 0, 1297, 1296, 1306, 0,
	1286, 1287, 1288, 1292, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	0, 1302, 1303, 0, 0, 0, 0, 0, 0, 1273,
	1274, 0, 0, 0, 0, 1258, 0, 0, 0, 0,
	0, 0, 1294, 1278, 0, 0, 0, 0, 0, 1279,
	1275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1304, 0, 0, 0, 0,
	1295, 0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 1293,
	1269, 1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 0,
	0, 0, 0, 2846, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 1282, 1283, 1284, 0, 0, 0, 0,
	0, 1264, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1280, 1296, 1306, 0, 1286, 1287, 1288, 0,
	0, 0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291,
	1299, 1300, 1301, 0, 0, 1297, 0, 1302, 1303, 0,
	0, 0, 1292, 0, 0, 1273, 1274, 0, 0, 1259,
	0, 0, 1305, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 0, 0, 0, 0, 0,
	0, 1304, 1278, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 0, 1269,
	1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 0, 0,
	0, 1285, 2813, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 1282, 1283, 1284, 0, 0, 0, 1280, 0,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1256, 1257, 0, 1289, 1290, 1291, 1299, 1300, 1301, 0,
	0, 1297, 1296, 1306, 0, 1286, 1287, 1288, 1292, 0,
	0, 0, 0, 0, 0, 1259, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 1302, 1303, 0, 0,
	0, 0, 0, 0, 1273, 1274, 0, 0, 0, 0,
	1258, 0, 0, 0, 0, 0, 0, 1294, 1278, 0,
	0, 0, 0, 0, 1279, 1275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 0, 1295, 0, 0, 1270, 1271,
	1277, 1276, 1272, 1298, 1293, 1269, 1267, 1268, 1260, 1261,
	1262, 1263, 1265, 1266, 0, 0, 0, 0, 2807, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 1282, 1283,
	1284, 0, 0, 0, 0, 0, 1264, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1280, 1296, 1306,
	0, 1286, 1287, 1288, 0, 0, 0, 0, 0, 1256,
	1257, 0, 1289, 1290, 1291, 1299, 1300, 1301, 0, 0,
	1297, 0, 1302, 1303, 0, 0, 0, 1292, 0, 0,
	1273, 1274, 0, 0, 1259, 0, 0, 1305, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 1258,
	0, 0, 0, 0, 0, 0, 1304, 1278, 0, 0,
	0, 0, 0, 0, 1275, 0, 0, 0, 0, 0,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 1270, 1271, 1277,
	1276, 1272, 1298, 0, 1269, 1267, 1268, 1260, 1261, 1262,
	1263, 1265, 1266, 0, 0, 0, 1285, 2801, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 1282, 1283, 1284,
	0, 0, 0, 1280, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1256, 1257, 0, 1289, 1290,
	1291, 1299, 1300, 1301, 0, 0, 1297, 1296, 1306, 0,
	1286, 1287, 1288, 1292, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	0, 1302, 1303, 0, 0, 0, 0, 0, 0, 1273,
	1274, 0, 0, 0, 0, 1258, 0, 0, 0, 0,
	0, 0, 1294, 1278, 0, 0, 0, 0, 0, 1279,
	1275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1304, 0, 0, 0, 0,
	1295, 0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 1293,
	1269, 1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 0,
	0, 0, 0, 2718, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 1282, 1283, 1284, 0, 0, 0, 0,
	0, 1264, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1280, 1296, 1306, 0, 1286, 1287, 1288, 0,
	0, 0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291,
	1299, 1300, 1301, 0, 0, 1297, 0, 1302, 1303, 0,
	0, 0, 1292, 0, 0, 1273, 1274, 0, 0, 1259,
	0, 0, 1305, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 0, 0, 0, 0, 0,
	0, 1304, 1278, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 0, 1269,
	1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 0, 0,
	0, 1285, 2673, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 1282, 1283, 1284, 0, 0, 0, 1280, 0,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1256, 1257, 0, 1289, 1290, 1291, 1299, 1300, 1301, 0,
	0, 1297, 1296, 1306, 0, 1286, 1287, 1288, 1292, 0,
	0, 0, 0, 0, 0, 1259, 0, 0, 1305, 0,
	0, 0, 0, 0, 0, 0, 1302, 1303, 0, 0,
	0, 0, 0, 0, 1273, 1274, 0, 0, 0, 0,
	1258, 0, 0, 0, 0, 0, 0, 1294, 1278, 0,
	0, 0, 0, 0, 1279, 1275, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 0, 1295, 0, 0, 1270, 1271,
	1277, 1276, 1272, 1298, 1293, 1269, 1267, 1268, 1260, 1261,
	1262, 1263, 1265, 1266, 0, 0, 0, 0, 2672, 0,
	0, 0, 0, 0, 0, 0, 0, 1281, 1282, 1283,
	1284, 0, 0, 0, 0, 0, 1264, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1280, 1296, 1306,
	0, 1286, 1287, 1288, 0, 0, 0, 0, 0, 1256,
	1257, 0, 1289, 1290, 1291, 1299, 1300, 1301, 0, 0,
	1297, 0, 1302, 1303, 0, 0, 0, 1292, 0, 0,
	1273, 1274, 0, 0, 1259, 0, 0, 1305, 0, 0,
	0, 0, 0, 1294, 0, 0, 0, 0, 0, 0,
	1279, 0, 0, 0, 0, 0, 0, 0, 0, 1258,
	0, 0, 0, 0, 0, 0, 1304, 1278, 0, 0,
	0, 0, 0, 0, 1275, 0, 0, 0, 0, 0,
	1293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1295, 0, 0, 1270, 1271, 1277,
	1276, 1272, 1298, 0, 1269, 1267, 1268, 1260, 1261, 1262,
	1263, 1265, 1266, 0, 0, 0, 1285, 2644, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 1282, 1283, 1284,
	0, 0, 0, 1280, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1256, 1257, 0, 1289, 1290,
	1291, 1299, 1300, 1301, 0, 0, 1297, 1296, 1306, 0,
	1286, 1287, 1288, 1292, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 1305, 0, 0, 0, 0, 0, 0,
	0, 1302, 1303, 0, 0, 0, 0, 0, 0, 1273,
	1274, 0, 0, 0, 0, 1258, 0, 0, 0, 0,
	0, 0, 1294, 1278, 0, 0, 0, 0, 0, 1279,
	1275, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1304, 0, 0, 0, 0,
	1295, 0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 1293,
	1269, 1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 0,
	0, 0, 0, 2464, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 1282, 1283, 1284, 0, 0, 0, 0,
	0, 1264, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1280, 1296, 1306, 0, 1286, 1287, 1288, 0,
	0, 0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291,
	1299, 1300, 1301, 0, 0, 1297, 0, 1302, 1303, 0,
	0, 0, 1292, 0, 0, 1273, 1274, 0, 0, 1259,
	0, 0, 1305, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 0, 0, 0, 0, 0,
	0, 1304, 1278, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 1293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 0, 1269,
	1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 0, 0,
	0, 1285, 2437, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 1282, 1283, 1284, 0, 0, 0, 1280, 0,
	1264, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1297, 1296, 1306, 0, 1286, 1287, 1288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1302, 1303, 0, 0,
	0, 0, 0, 0, 1273, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 0, 0,
	0, 0, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 0, 1295, 0, 0, 1270, 1271,
	1277, 1276, 1272, 1298, 1293, 1269, 1267, 1268, 1260, 1261,
	1262, 1263, 1265, 1266, 0, 0, 0, 0, 1776, 0,
	0, 0, 0, 0, 0, 1256, 1257, 0, 1289, 1290,
	1291, 1299, 1300, 1301, 0, 0, 0, 0, 0, 0,
	1285, 0, 0, 1292, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 1305, 0, 0, 0, 1280, 0, 0,
	0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291, 1299,
	1300, 1301, 0, 0, 0, 1258, 0, 0, 0, 0,
	1297, 1292, 0, 1278, 0, 0, 0, 0, 1259, 0,
	1275, 1305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 1282, 1283, 1284, 0, 0, 0, 0,
	0, 1264, 3039, 0, 1295, 0, 0, 1270, 1271, 1277,
	1276, 1272, 1298, 0, 1269, 1267, 1268, 1260, 1261, 1262,
	1263, 1265, 1266, 1296, 1306, 2134, 1286, 1287, 1288, 0,
	1281, 1282, 1283, 1284, 0, 0, 0, 0, 0, 1264,
	0, 2214, 0, 0, 2213, 0, 0, 1302, 1303, 0,
	0, 0, 0, 0, 0, 1273, 1274, 0, 0, 0,
	0, 1296, 1306, 0, 1286, 1287, 1288, 0, 1294, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1302, 1303, 0, 0, 0,
	0, 1304, 0, 1273, 1274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1293, 1294, 0, 0, 0,
	0, 0, 0, 1279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3038, 0, 0, 0, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1280, 0,
	0, 0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291,
	1299, 1300, 1301, 0, 0, 0, 0, 0, 0, 1285,
	0, 1297, 1292, 0, 0, 0, 0, 2107, 0, 1259,
	0, 0, 1305, 0, 0, 0, 1280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 0, 0, 0, 0, 1297,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1295, 2108, 0, 1270, 1271,
	1277, 1276, 1272, 1298, 0, 1269, 1267, 1268, 1260, 1261,
	1262, 1263, 1265, 1266, 0, 0, 0, 0, 0, 0,
	0, 1281, 1282, 1283, 1284, 0, 0, 0, 0, 0,
	1264, 0, 0, 1295, 0, 0, 1270, 1271, 1277, 1276,
	1272, 1298, 0, 1269, 1267, 1268, 1260, 1261, 1262, 1263,
	1265, 1266, 1296, 1306, 0, 1286, 1287, 1288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1302, 1303, 0, 0,
	0, 0, 0, 0, 1273, 1274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1294, 0, 0,
	0, 0, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1874,
	0, 0, 0, 0, 0, 1256, 1257, 0, 1289, 1290,
	1291, 1299, 1300, 1301, 0, 0, 0, 0, 0, 0,
	1285, 0, 0, 1292, 0, 0, 0, 1873, 0, 0,
	1259, 0, 0, 1305, 0, 0, 0, 1280, 0, 0,
	0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291, 1299,
	1300, 1301, 0, 0, 0, 1258, 0, 0, 0, 0,
	1297, 1292, 0, 1278, 0, 0, 0, 0, 1259, 0,
	1275, 1305, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 0, 0, 0, 0, 0, 0,
	0, 1278, 0, 0, 0, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1281, 1282, 1283, 1284, 0, 0, 0, 0,
	0, 1264, 0, 0, 1295, 0, 0, 1270, 1271, 1277,
	1276, 1272, 1298, 0, 1269, 1267, 1268, 1260, 1261, 1262,
	1263, 1265, 1266, 1296, 1306, 0, 1286, 1287, 1288, 0,
	1281, 1282, 1283, 1284, 0, 0, 0, 0, 0, 1264,
	0, 0, 0, 0, 0, 0, 0, 1302, 1303, 0,
	0, 0, 0, 0, 0, 1273, 1274, 0, 0, 0,
	0, 1296, 1306, 0, 1286, 1287, 1288, 0, 1294, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1302, 1303, 0, 0, 0,
	0, 1304, 0, 1273, 1274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1293, 1294, 0, 0, 0,
	0, 0, 0, 1279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 1293, 701, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1280, 0,
	0, 0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291,
	1299, 1300, 1301, 0, 0, 0, 0, 0, 0, 1285,
	0, 1297, 1292, 0, 0, 0, 0, 0, 0, 1259,
	0, 0, 1305, 0, 0, 0, 1280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1258, 0, 0, 0, 0, 1297,
	0, 0, 1278, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1295, 0, 0, 1270, 1271,
	1277, 1276, 1272, 1298, 0, 1269, 1267, 1268, 1260, 1261,
	1262, 1263, 1265, 1266, 0, 0, 0, 0, 0, 0,
	0, 1281, 1282, 1283, 1284, 0, 0, 0, 0, 0,
	1264, 0, 0, 1295, 0, 0, 1270, 1271, 1277, 1276,
	1272, 1298, 0, 1269, 1267, 1268, 1260, 1261, 1262, 1263,
	1265, 1266, 1296, 1306, 0, 1286, 1287, 1288, 0, 0,
	0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291, 1299,
	1300, 1301, 0, 0, 0, 0, 1302, 1303, 0, 0,
	0, 1292, 0, 0, 1273, 1274, 0, 0, 1259, 0,
	0, 1305, 0, 0, 0, 0, 0, 1294, 0, 0,
	0, 0, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 0, 0, 0, 0, 0, 0,
	1304, 1278, 0, 0, 0, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1281, 1282, 1283, 1284, 0, 0, 0, 1280, 0, 1264,
	0, 0, 0, 0, 2223, 0, 0, 0, 0, 1256,
	1257, 0, 1289, 1290, 1291, 1299, 1300, 1301, 0, 0,
	1297, 1296, 1306, 0, 1286, 1287, 1288, 1292, 0, 0,
	0, 2218, 0, 0, 1259, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 0, 1302, 1303, 0, 0, 0,
	2441, 0, 0, 1273, 1274, 0, 0, 0, 0, 1258,
	0, 0, 0, 0, 0, 0, 1294, 1278, 0, 0,
	0, 0, 0, 1279, 1275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 0, 0, 1295, 0, 0, 1270, 1271, 1277,
	1276, 1272, 1298, 1293, 1269, 1267, 1268, 1260, 1261, 1262,
	1263, 1265, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 1282, 1283, 1284,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1280, 1296, 1306, 0,
	1286, 1287, 1288, 0, 0, 0, 0, 0, 1256, 1257,
	0, 1289, 1290, 1291, 1299, 1300, 1301, 0, 0, 1297,
	0, 1302, 1303, 0, 0, 0, 1292, 0, 0, 1273,
	1274, 0, 0, 1259, 0, 0, 1305, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 0, 0, 0, 0, 0, 1258, 0,
	0, 0, 0, 0, 0, 1304, 1278, 0, 0, 0,
	0, 0, 0, 1275, 0, 0, 0, 0, 0, 1293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 1270, 1271, 1277, 1276,
	1272, 1298, 0, 1269, 1267, 1268, 1260, 1261, 1262, 1263,
	1265, 1266, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 1282, 1283, 1284, 0,
	0, 0, 1280, 0, 1264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291,
	1299, 1300, 1301, 0, 0, 1297, 1296, 1306, 0, 1286,
	1287, 1288, 1292, 0, 0, 0, 2164, 0, 0, 1259,
	0, 0, 1305, 0, 0, 0, 0, 0, 0, 0,
	1302, 1303, 0, 0, 0, 0, 0, 0, 1273, 1274,
	0, 0, 0, 0, 1258, 0, 0, 0, 0, 0,
	0, 1294, 1278, 0, 0, 0, 0, 0, 1279, 1275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1304, 0, 0, 0, 0, 1295,
	0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 1293, 1269,
	1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 0, 0,
	0, 0, 0, 2180, 0, 0, 0, 0, 0, 0,
	0, 1281, 1282, 1283, 1284, 0, 0, 0, 0, 0,
	1264, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1280, 1296, 1306, 0, 1286, 1287, 1288, 0, 0,
	0, 0, 0, 1256, 1257, 0, 1289, 1290, 1291, 1299,
	1300, 1301, 0, 0, 1297, 0, 1302, 1303, 0, 0,
	0, 1292, 0, 0, 1273, 1274, 0, 0, 1259, 0,
	0, 1305, 0, 0, 0, 0, 0, 1294, 0, 0,
	0, 0, 0, 0, 1279, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 0, 0, 0, 0, 0, 0,
	1304, 1278, 0, 0, 0, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 1293, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1295, 0,
	0, 1270, 1271, 1277, 1276, 1272, 1298, 0, 1269, 1267,
	1268, 1260, 1261, 1262, 1263, 1265, 1266, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1281, 1282, 1283, 1284, 0, 0, 0, 1280, 0, 1264,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1256,
	1257, 0, 1289, 1290, 1291, 1299, 1300, 1301, 0, 0,
	1297, 1296, 1306, 0, 1286, 1287, 1288, 1292, 0, 0,
	0, 0, 0, 0, 1259, 0, 0, 1305, 0, 0,
	0, 0, 0, 0, 0, 1302, 1303, 0, 0, 0,
	0, 0, 0, 1273, 1274, 0, 0, 0, 0, 1258,
	0, 0, 0, 0, 0, 0, 1294, 1278, 0, 0,
	0, 0, 0, 1279, 1275, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1304,
	0, 0, 0, 0, 1295, 0, 0, 1270, 1271, 1277,
	1276, 1272, 1298, 1293, 1269, 1267, 1268, 1260, 1261, 1262,
	1263, 1265, 1266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1281, 1282, 1283, 1284,
	0, 0, 0, 0, 0, 1264, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1280, 1296, 1306, 0,
	1286, 1287, 1288, 0, 0, 0, 0, 0, 1256, 1257,
	0, 1289, 1290, 1291, 1299, 1300, 1301, 0, 0, 1297,
	0, 1302, 1303, 0, 0, 0, 0, 0, 0, 1273,
	1274, 0, 0, 1259, 0, 0, 1305, 0, 0, 0,
	0, 0, 1294, 0, 0, 0, 0, 0, 0, 1279,
	0, 0, 0, 0, 0, 0, 0, 0, 1258, 0,
	0, 0, 0, 0, 0, 1304, 1278, 0, 0, 0,
	0, 0, 0, 1275, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 0, 0, 1270, 1271, 1277, 1276,
	1272, 1298, 0, 1269, 1267, 1268, 1260, 1261, 1262, 1263,
	1265, 1266, 0, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1281, 1282, 1283, 1284, 0,
	0, 0, 1280, 0, 1264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1297, 1296, 1306, 0, 1286,
	1287, 1288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 1274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 1279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	0, 0, 1270, 1271, 1277, 1276, 1272, 1298, 0, 1269,
	1267, 1268, 1260, 1261, 1262, 1263, 1265, 1266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1285, 0, 0, 0, 0, 0,
	1560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1297, 1571, 1556, 1561, 1544, 1581,
	1580, 0, 0, 1546, 1545, 0, 0, 0, 0, 0,
	1589, 1588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1582, 0, 1578, 1577, 0, 0, 0, 0, 0, 0,
	0, 0, 1576, 0, 0, 0, 0, 0, 1295, 0,
	0, 1270, 1271, 1277, 1276, 1272, 1298, 0, 1269, 1267,
	1268, 1260, 1261, 1262, 1263, 1265, 1266, 0, 0, 1575,
	1573, 1574, 634, 0, 665, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 641, 0, 1555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 639, 1564, 1559, 1565,
	1566, 1567, 1568, 1569, 0, 1563, 0, 0, 0, 0,
	0, 0, 0, 0, 1586, 1587, 0, 0, 640, 0,
	0, 0, 0, 642, 0, 0, 0, 670, 0, 0,
	0, 0, 0, 648, 649, 0, 0, 0, 660, 0,
	0, 0, 0, 1548, 0, 0, 0, 0, 0, 0,
	0, 0, 666, 643, 0, 0, 1579, 0, 0, 0,
	1557, 1558, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 664, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 644, 0, 0, 0, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 645, 646, 0, 0, 0, 0,
	1549, 1550, 1551, 1552, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1570, 1553, 652, 0, 0, 0,
	0, 0, 0, 647, 0, 1591, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 651, 0, 0, 0,
	1547, 0, 0, 1583, 1584, 1585, 0, 0, 667, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1554, 0, 0, 0,
	0, 1590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 650, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 662, 0,
	0, 0, 0, 0, 0, 0, 0, 657, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 636,
	655, 668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 658, 0, 0, 656, 0,
	0, 0, 663, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 661,
}
var sqlPact = [...]int{

	621, -1000, -11, -1000, -1000, -1000, 224, -1000, -1000, -1000,
	-1000, 222, 221, 220, -1000, 219, 217, 212, 202, 201,
	195, 194, 191, 190, 189, 188, -1000, -1000, 187, -1000,
	-1000, -1000, -1000, 185, 184, 182, -1000, 179, 1603, 30498,
	178, 176, 170, 1562, 47808, 1470, 164, 163, -1000, 160,
	1479, 35376, 1103, 1490, -1000, 150, 147, 1863, 47436, 5534,
	33114, 1299, 1853, 47058, 30120, 1843, 32736, 46680, -1000, -1000,
	1042, -1000, -1000, 46302, 143, 141, 140, 139, 138, -1000,
	137, 45924, 134, 132, 130, 129, 127, 125, 121, 116,
	115, 111, 110, 100, 99, 98, 95, 92, 87, 81,
	80, 71, -1000, 70, 68, 67, -1000, 55920, 66, 64,
	63, -1000, 1291, 62, 61, 60, 59, 57, -1000, -1000,
	49, 48, 47, 46, 45, 44, -1000, 131, 43, 42,
	41, 37, 34, -1000, 1140, 582, 3240, 12388, 1235, 1224,
	1209, 1192, 1206, 767, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 50412, 47808, 33, -32, 32, -1000, 2334, 765,
	23270, 621, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 34998, 34620, 34242, 28626, 45546, 45168, 9565,
	9565, 932, -1000, -1000, -1000, -1000, -1000, -15, 31614, 47808,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 259, -1000, -1000, -1000, -1000, -1000, -1000,
	19374, 18959, 18544, 406, -1000, -1000, -1000, 258, -1000, -1000,
	-1000, -1000, 1241, -1000, -1000, -1000, -1000, 44790, 44412, 2163,
	44034, 28238, 27850, 43656, 1748, 1747, 43278, -1000, -1000, 42900,
	-1000, -1000, 2118, 1896, 1892, 33864, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42528, 42150, 41772, 41394, 41016,
	27462, 27074, 591, -1000, -1000, -1000, -1000, 24026, -1000, -1000,
	-1000, -1000, -1000, 31, -1000, 30, 29, -1000, 27, 20,
	19, 16, 15, 14, 2, -2, -1000, -3, -5, -1000,
	-6, -7, -1000, -8, -12, 1533, 1423, 1266, 40638, 1009,
	1469, -13, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 47808,
	-1000, 19775, -1000, 590, -1000, 1914, -1000, 19775, -1000, 1468,
	211, 1341, -1000, -1000, -1000, 1290, 1053, -1000, -1000, 47808,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2505, 1384, 589,
	40260, -1000, 1734, -1000, 728, 13190, -1000, 889, -1000, 13190,
	256, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1709, 1150, 2470, 26686,
	1399, 2317, 2113, 2504, 1642, 2083, 2058, 2048, 2042, 2010,
	2501, 1075, 2500, 991, 834, 2499, 1986, 1966, 2484, 1430,
	853, 2498, 2496, 1906, 1902, -1000, -1000, -1000, -1000, 1083,
	-1000, -1000, -1000, -1000, 36864, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1140, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1611, 2280, 2280,
	2280, 2340, 379, 374, -1000, 131, -1000, 1686, -1000, 1329,
	-1000, -1000, -1000, 55213, -1000, -1000, 19775, 19775, 19775, 19775,
	19775, 1259, -1000, -1000, -1000, 608, -1000, 588, 577, 10769,
	-1000, -1000, 2451, -1000, -1000, -1000, 404, -1000, -1000, 19775,
	-1000, 247, -1000, -1000, -1000, -1000, 573, 2487, -1000, 784,
	-1000, -1000, -1000, 738, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1964, 542, 537, -1000, 536, 535, -1000, -1000, -1000,
	572, 571, 570, 569, 568, 567, -1000, -1000, -1000, 1185,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 762, -1000, 762, 762, 522, 522, 565, 564, 523,
	563, -1000, -1000, 562, 522, 560, 558, -1000, -1000, 557,
	684, 689, 555, 549, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1462, -1000, -1000, 1462, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 927, 49296, -1000, -1000, -1000, -18,
	47808, -1000, 406, -18, -1000, -1000, 545, -1000, 14006, 14006,
	14006, -1000, -1000, 1465, 19775, -1000, 2094, -1000, 3872, -225,
	543, 24404, 675, 675, -1000, 22136, 624, 26298, -1000, 542,
	537, 536, 535, -1000, 246, -1000, -1000, -1000, -1000, -1000,
	1582, 2156, 925, -1000, 1123, 2155, -1000, 1904, 2150, 1111,
	-1000, -1000, 746, 2141, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1324, -1000, -1000, 1466, 2139, -175, 2020,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1498, -1000,
	28998, 31614, -19, -1000, -1000, -64, -1000, 9179, 55213, -1000,
	55213, 683, -1000, 55213, 680, -1000, 1899, 47808, 9565, 47808,
	47808, -1000, 534, 1573, 1463, -1000, -1000, 31242, 1904, 1572,
	-1000, -1000, 743, 1571, -1000, -1000, 1565, -1000, 406, -1000,
	-1000, 39882, 50040, 743, 1560, -1000, -1000, -1000, 36864, -1000,
	47808, -1000, 47808, -1000, 1025, -1000, 49668, 156, 2138, -1000,
	-1000, 156, 2137, -1000, 156, 2121, -1000, 155, 2120, -1000,
	-1000, 1338, 2106, -1000, -72, 2102, -1000, -1000, -72, 2097,
	-1000, -1000, 19775, -35, -1000, -1000, -1000, 765, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 39504, 31242, 47808, 33486, 713,
	55213, 2383, 55786, 28998, 55213, 31242, 47808, 1942, -1000, 39126,
	38748, 2299, 727, -1000, -1000, 47808, -1000, 19775, -1000, 2381,
	1621, -37, -1000, -1000, -1000, -1000, -1000, 1612, 1629, 882,
	1036, -1000, 13190, 13190, 2234, -1000, 240, 9565, -1000, -1000,
	963, 1646, -1000, -1000, -1000, -1000, -1000, 38370, -1000, -1000,
	-1000, 1342, 47808, -1000, -1000, 1937, -1000, 30870, 47808, -1000,
	47808, -1000, 47808, -1000, 47808, -1000, 47808, -1000, -1000, -1000,
	-1000, -1000, 2002, 1189, 1936, -1000, 47808, -1000, 47808, -1000,
	-1000, -1000, 1610, -1000, -1000, -1000, 37998, 37620, 37242, -1000,
	-1000, 1069, 961, -1000, -1000, 157, -1000, -1000, 1611, -1000,
	1482, 1692, 18129, 1671, 19775, 131, -1000, -1000, 131, 131,
	11973, -1000, -1000, -1000, 47808, -1000, 6408, 55786, 9565, 940,
	19775, 19775, 19775, 19775, 19775, 19775, 19775, 19775, 19775, 19775,
	19775, 19775, 19775, 19775, 19775, 19775, 19775, 19775, 19775, 19775,
	19775, 19775, 19775, 19775, 19775, 19775, 19775, 19775, 19775, 19775,
	19775, 19775, 19775, 19775, 19775, 1669, 19775, 926, 19775, 19775,
	19775, 19775, 1230, -1000, -1000, 1279, 457, 1303, -1000, 2439,
	2439, 2439, 3650, 3650, 499, 608, -1000, 19775, -1000, 186,
	19775, 374, 53225, -16, 10368, -1000, -1000, -1000, -1000, 17714,
	755, 55213, 8793, 9953, -1000, 2478, 1184, 1974, 1802, 532,
	663, 662, 654, 546, 19775, 19775, 19775, 19775, 19775, 19775,
	-1000, -1000, -1000, -1000, -1000, -1000, 2451, -1000, 17313, 16898,
	-1000, 2477, 16483, 16068, -1000, 15653, 20978, 15238, 939, 936,
	934, 19775, 11170, -1000, -37, -1000, 49296, -1000, 47808, -18,
	2378, 19775, 133, -1000, 54175, -1000, 133, 133, 531, -36,
	55213, 1666, 1662, 23648, 1688, 1264, 1264, 1264, -1000, 527,
	600, 675, 6844, 14823, 526, 675, 675, 228, 35748, 1270,
	35748, 242, 373, 21758, 2094, -1000, -1000, 47808, 9565, -25,
	1205, -1000, 32358, 2292, 2270, 2251, 1017, -1000, 995, 2336,
	36864, 2357, 186, 2278, 1894, 924, 36864, 1904, -1000, 55786,
	-1000, 1712, 2332, 1030, 1084, 1030, 1030, 1052, 36864, 921,
	1210, 28998, 2276, 916, -27, 2353, 186, 2274, 1893, 908,
	-1000, -1000, 47808, 9565, 2273, 960, 664, -19, 31614, 47808,
	239, -1000, 19775, 19775, 990, -41, 238, 1687, 1682, 228,
	-1000, 31986, 2376, 2074, 47808, 901, -1000, 1904, 2067, -1000,
	1208, -1000, 2064, 2056, 2369, 1457, 1558, -1000, -1000, -1000,
	1449, 1550, 949, 2054, 751, 516, 2365, 516, 25542, -1000,
	47808, -1000, 47808, -1000, -1000, 47808, -1000, 47808, -1000, 47808,
	-1000, 47808, 47808, -1000, 47808, 28998, 28998, 28998, -42, 4636,
	29742, 899, -101, -1000, 789, 31986, 3591, -43, -1000, 986,
	-1000, -1000, -1000, 289, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 762, 525, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 523, 1185, 522, 522, 522,
	-1000, -1000, -1000, 684, 689, -1000, -1000, -1000, 762, 762,
	-1000, -1000, -181, 1877, -64, 33486, 664, -1000, 664, -1000,
	1933, -1000, 2283, 720, -44, 823, -37, -1000, 1462, -1000,
	1388, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2485, -1000, 2457, -1000, -1000, 2475,
	-20, -1000, -20, -1000, 9565, -1000, 47808, 1931, -1000, -1000,
	-1000, -1000, -1000, -1000, 47808, -1000, 47808, -1000, -1000, -1000,
	-1000, -1000, -1000, 3988, -1000, 1924, -1000, 4636, 237, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 47808, 47808, 47808,
	-1000, 36864, -1000, -1000, -1000, -1000, 55213, -1000, 420, -1000,
	-1000, 55213, 1077, 1695, -1000, 1695, -21, -1000, 53924, 1655,
	47808, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 724, 694, 694, 931, 931, 931, 931,
	2445, 4377, 3176, 3060, 5288, 5288, 5288, 5288, 5288, 5288,
	5288, 5288, 376, 354, 354, 376, 376, 376, 376, 376,
	354, 354, 354, 5288, 5288, 5288, 3650, 55349, 5424, 19775,
	19775, 896, 1277, 457, 5424, 19775, 5424, 5424, 5424, 5424,
	-1000, 1379, -1000, -1000, -1000, -1000, 1869, 520, 20978, 20978,
	-1000, -1000, -1000, 10769, 19775, -1000, -1000, -1000, -1000, 519,
	19775, -1000, 53384, -236, 372, -134, -1000, 19775, 599, -51,
	-1000, 1034, -1000, 19775, 235, -1000, -1000, -49, 19775, 19775,
	19775, 362, -1000, 357, -1000, 895, -1000, 894, 893, 888,
	-1000, 518, 1261, 517, 515, 19775, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 55054, 51164, 6130, 6091, 4799, -55,
	-62, 356, -1000, 1854, -134, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 355, -1000, 353, -71, -1000, -73, -1000, 351,
	-1000, 54918, -134, 350, 4150, -1000, 20978, 20978, 20978, 10769,
	514, 343, -1000, 53673, -1000, 723, 709, 708, 54759, 14408,
	14408, 14408, 340, 54623, 19775, -134, -1000, -1000, 513, -74,
	751, 14006, 22892, 9565, -1000, 751, 751, 19775, -1000, 19775,
	23648, 23648, 2328, 1661, 23648, -1000, -1000, -1000, -1000, 35748,
	539, 675, 35748, -1000, 2451, 1618, -1000, 339, -1000, 13605,
	35748, 35748, 9565, -1000, -1000, 47808, 406, -1000, -1000, 675,
	337, 234, 1633, 47808, 47808, 47808, -1000, -1000, 1545, 48924,
	1539, 55786, 47808, -1000, -1000, 512, 511, 1647, 1645, 47808,
	47808, 48552, 48180, 47808, 1233, 19775, 1493, 1331, 186, -1000,
	707, 509, 47808, 1110, -1000, -1000, -1000, -1000, -1000, 47808,
	-1000, -1000, 2468, -1000, 1030, -1000, -1000, -1000, 1030, 1904,
	1089, 47808, 28998, 745, 704, 47808, 1228, 186, -1000, 700,
	508, 9565, 1125, -1000, 697, 47808, 1766, -1000, 1488, -1000,
	-1000, 8407, 55213, 55213, -1000, -1000, 9565, 1729, 1729, 335,
	-22, -1000, -1000, -1000, -1000, -1000, -1000, 1744, 47808, 587,
	47808, 186, 47808, 112, 2440, 47808, 28998, 28998, 28998, 186,
	47808, 2053, 47808, 2050, 2062, 639, 47808, 1283, 19775, 1223,
	-1000, 24782, 774, 47808, 1079, 84, -1000, -1000, -1000, 11,
	47808, -1000, -1000, 156, 156, 156, -1000, 155, 1338, -1000,
	-72, -72, -1000, -1000, -1000, 47808, 2406, 28998, -79, -1000,
	805, 883, 874, -1000, 55786, -1000, 606, 911, -1000, 2464,
	505, 2451, -1000, 741, 36492, 47808, 82, -1000, 744, 1281,
	-1000, 13190, 13190, -1000, 1462, -1000, -1000, 1113, -1000, 1161,
	-1000, -1000, -1000, -1000, 13190, -1000, -1000, 954, -64, -64,
	-1000, -1000, 3097, -1000, 47808, -1000, -1000, -1000, -1000, 1077,
	-1000, 19775, -1000, -1000, -1000, 11973, -1000, -1000, -1000, 47808,
	-213, 19775, 5424, 5424, 19775, 20978, 20978, -1000, 5424, -1000,
	-1000, -1000, -1000, -1000, 1849, 504, 19775, 55786, 5609, 5365,
	-81, 376, 19775, -23, -1000, 19775, -1000, 53089, -1000, -1000,
	603, 2051, -1000, 19775, 54464, 8021, 334, 12789, -1000, 54213,
	-50, -50, -1000, 2483, 1583, 1445, 1148, 1047, 2462, -1000,
	25920, 752, 1283, 52930, 6408, 55786, 19775, 19775, 19775, -1000,
	-1000, 2451, -1000, 19775, -1000, -1000, -1000, -1000, -1000, 1834,
	19775, -1000, 6408, 55786, 20978, 20978, 20978, 20978, 20978, 20978,
	20978, 20978, 20978, 20978, 20978, 20978, 20978, 20978, 20978, 20978,
	20978, 20978, 20978, 1658, 20978, 2437, 2437, 2437, -24, 19775,
	-1000, 1919, 1834, 19775, 19775, -1000, -1000, -1000, 55786, 333,
	332, 330, -1000, 19775, -134, 3591, -1000, 1797, -1000, -154,
	-1000, 2094, -1000, -1000, 1797, 1797, -82, 55213, -1000, 2328,
	-1000, 502, 19775, 23648, -1000, 598, -1000, -84, -1000, 35748,
	-1000, 596, -230, -1000, 660, -1000, 675, 328, -1000, -1000,
	-1000, 233, 406, -1000, 35748, -1000, 9565, -1000, -1000, 886,
	884, -1000, 2049, -1000, 1528, -1000, 778, -1000, 1159, 19775,
	22514, 497, 496, 1317, -1000, 2046, 1338, 2033, 1338, -1000,
	-1000, 731, -1000, 55213, 491, 484, -1000, -25, 1199, -1000,
	25170, 19775, -1000, 881, -1000, -1000, -1000, 1904, 875, -1000,
	-1000, 1201, 25170, -1000, -1000, -1000, 25170, 19775, -1000, -27,
	873, 25170, 2016, 741, 1832, 966, -1000, -1000, -1000, -1000,
	-1000, -1000, 1732, 31986, 47808, 483, 47808, 482, -1000, -1000,
	481, 47808, 664, 1904, -1000, 743, -1000, -1000, 788, 9565,
	480, 9565, 1627, 639, 29370, -1000, 743, 1692, 55213, -1000,
	1079, 11571, 2258, -87, -1000, 230, -1000, -1000, -1000, 751,
	25542, 23648, 19775, 2492, -89, -1000, -1000, -1000, -1000, -1000,
	-64, 1323, 2241, 2241, -1000, 2453, -1000, 595, 327, 2451,
	326, -1000, -29, 477, -1000, 658, 651, -64, 47808, -1000,
	1301, 9565, 47808, 47808, 9565, 47808, -1000, -1000, -37, -1000,
	-1000, -1000, -1000, 47808, -1000, -1000, -1000, 1354, 52794, -1000,
	2285, 9565, 2407, 5424, 456, 218, 19775, 55786, 55508, -90,
	19775, 19775, -1000, 323, 19775, 594, 55213, -1000, -1000, -1000,
	55213, 19775, 229, -1000, 2482, 19775, 322, 321, 314, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 313, -1000, -1000,
	50784, -1000, 19775, 312, -1000, 305, 304, 405, 52635, 52499,
	303, 55213, 1919, 55213, -1000, -1000, 857, 857, 1004, 1004,
	1004, 1004, 2437, 761, 987, 703, 619, 619, 619, 288,
	657, 657, 619, 619, 619, 1826, 1650, 468, 6025, 19775,
	302, -1000, -1000, 55213, 55213, 295, -1000, -1000, -1000, -134,
	294, 1786, 2331, -1000, 23648, 1786, 1786, -1000, -1000, 47808,
	55213, -1000, -225, -1000, 2451, -1000, -1000, 1618, -1000, 7244,
	35748, 675, 9565, -1000, -1000, 12, 47808, 47808, 47808, 2031,
	-1000, 3121, -1000, 52340, -92, -1000, 2314, 2314, 19775, 228,
	-1000, -1000, 467, 22514, 47808, -1000, 1673, 1689, 816, 47808,
	-1000, 47808, -1000, -1000, 47808, 47808, 47808, 47808, 47808, -1000,
	466, -95, 47808, 47808, 28998, -1000, -1000, -98, 9565, -1000,
	2260, -1000, 28998, 877, 1228, 1760, -1000, 465, 22514, 464,
	47808, 31986, 2364, -1000, 741, -1000, -1000, 463, 1815, 1417,
	22514, 1405, 1636, 639, 29370, -1000, 949, 1079, -1000, -1000,
	-38, -1000, 475, 186, 47808, 2491, 1283, -1000, -54, 55213,
	-1000, 644, -1000, 2224, -1000, 2221, 540, -1000, -1000, 293,
	-1000, 36120, 36120, 28998, 28998, -64, 1653, -1000, -1000, 1240,
	1485, -1000, -1000, -1000, -1000, -1000, 2285, 19775, 19775, 55508,
	-100, -1000, 5424, 5424, -1000, 52204, -1000, 55213, 7635, -1000,
	54213, -1000, -1000, -1000, -1000, 1247, -1000, 52045, -1000, -1000,
	-1000, 19775, -1000, -1000, -1000, -1000, 20978, 1823, 460, 55786,
	51909, -1000, -1000, -1000, 749, 19775, 19775, 2094, 749, 749,
	-103, 675, -1000, -1000, -1000, 2451, -1000, 35748, 12, 9565,
	-1000, -1000, -1000, 47808, -1000, 47808, -1000, 9565, 47808, 1801,
	1522, -1000, -1000, 1644, 458, 20978, 47808, 682, -1000, 1238,
	22514, 2285, 9565, 2285, 51750, 9953, -105, -108, 1514, -1000,
	1504, 19775, -1000, 55786, 1338, 1338, -110, -111, -1000, 871,
	868, 19775, 850, -1000, -1000, -1000, 842, -1000, 693, -72,
	25170, -1000, -1000, 1255, 22514, -116, 22514, -123, 270, 186,
	-1000, 22514, -1000, 47808, -124, 47808, -1000, 639, 29370, -1000,
	2062, -1000, 2172, 47808, 2249, -1000, -1000, -1000, 1692, 457,
	453, 443, -1000, -1000, -1000, -125, -1000, -1000, -117, -1000,
	678, 676, -1000, -1000, -1000, 9565, 953, -1000, 5424, 5424,
	-1000, -1000, -1000, -1000, 269, 1283, 2330, -1000, 51614, 440,
	20978, 55786, -133, -1000, -1000, 47808, 55213, -134, -1000, -1000,
	-1000, 35748, 441, -1000, -1000, 1762, -1000, -1000, -1000, 47808,
	1527, -1000, -1000, 19775, 6025, 442, 19775, -1000, 1732, 426,
	-1000, -1000, -1000, -1000, -1000, -1000, 2314, -49, -1000, 1151,
	-1000, -1000, 55213, 2297, -1000, -1000, 425, 424, 47808, 47808,
	-50, 419, 415, 25170, -1000, 47808, -136, 1238, -142, -1000,
	1732, -1000, -145, 788, -1000, 414, 29370, -1000, 1627, 948,
	-147, 47808, 1079, -1000, 28998, 28998, -1000, 1653, -1000, 47808,
	-1000, 47808, -1000, 47808, -1000, 1105, 19775, -1000, 440, -152,
	-1000, -126, -1000, 2361, -1000, -1000, -1000, -1000, 2028, 51455,
	1575, 47808, 51202, 1228, 47808, 2285, 267, 47808, 785, 9565,
	1240, 1240, -1000, -1000, 265, 19775, 19775, -1000, 413, -1000,
	1732, 1238, 1228, 1238, 409, 22514, -1000, 1636, 1013, -1000,
	751, -1000, -1000, -153, -155, -1000, -158, -161, -1000, 263,
	20577, 20577, -134, -1000, 47808, 407, 1912, -1000, 1363, 1179,
	261, 810, -1000, -163, -1000, -1000, 406, -1000, 19775, -1000,
	-168, -1000, 771, -169, -1000, 769, 2482, -176, -178, 47808,
	1228, 1732, -1000, 1732, 22514, -187, -1000, 25542, -1000, 741,
	741, -1000, -1000, -1000, -1000, -1000, 21364, 1340, 1059, 53635,
	-1000, -1000, -1000, 47808, -1000, 1404, 1386, 1094, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1575, 55213, -1000, 1240, 1758,
	-1000, 1240, 1818, -1000, -1000, -193, -1000, 1228, 1228, -196,
	-1000, -177, -1000, -1000, 2391, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2210, -1000, 811, 1327, 1327, 1363, -1000, 403,
	-1000, 392, 1333, -1000, -1000, 1238, -1000, 20176, -1000, 2419,
	-1000, -1000, 1640, -1000, -1000, 19775, 19775, -1000, -1000, -1000,
	1732, -1000, -1000, -1000, -1000, -198, -199, 1228, 1228, 837,
	-1000, -1000, 384, 19775, -201, 1228, -1000,
}
var sqlPgo = [...]int{

	0, 2979, 2977, 1892, 2974, 2309, 2973, 2971, 2970, 2969,
	2968, 2301, 2966, 2964, 2962, 2959, 2958, 2953, 2952, 2951,
	2947, 2946, 2944, 2942, 2940, 2937, 2935, 2931, 2930, 2929,
	2922, 2921, 2285, 2908, 2282, 2907, 2906, 2904, 2900, 2899,
	2897, 2896, 2895, 25, 2893, 2891, 2889, 2888, 2274, 2881,
	2879, 2248, 2876, 2872, 2244, 2870, 2869, 2865, 2226, 2218,
	2863, 2862, 2209, 2858, 2857, 2195, 2855, 2192, 2854, 2853,
	2190, 2851, 97, 119, 2179, 2847, 2845, 2176, 2174, 2157,
	2844, 2153, 2838, 2837, 2148, 2135, 2836, 124, 2834, 2828,
	2827, 2826, 2067, 2029, 2820, 2809, 2808, 172, 2807, 2015,
	2806, 2804, 2803, 2802, 2801, 2799, 2798, 2797, 2793, 2792,
	2791, 2790, 2788, 2787, 2785, 2778, 2777, 2771, 2770, 2760,
	2757, 2755, 2753, 2746, 2744, 183, 122, 2742, 2741, 1951,
	1947, 2740, 2736, 50, 43, 17, 78, 175, 176, 3362,
	167, 2735, 2734, 2733, 2730, 2729, 2726, 32, 126, 123,
	117, 121, 2722, 257, 2721, 2719, 46, 47, 26, 23,
	85, 2715, 2714, 2713, 1612, 95, 2710, 2707, 171, 162,
	2705, 551, 36, 60, 73, 89, 341, 53, 2703, 105,
	16, 2702, 115, 118, 2701, 77, 37, 29, 3945, 116,
	76, 80, 182, 148, 152, 150, 120, 356, 2696, 173,
	70, 144, 2694, 2692, 2689, 54, 139, 3, 5, 141,
	10, 2686, 8, 2683, 14, 2681, 2677, 2674, 2667, 15,
	112, 99, 55, 2664, 27, 75, 136, 2658, 156, 2651,
	79, 180, 145, 1, 98, 2648, 83, 22, 81, 2647,
	2645, 103, 166, 2643, 34, 129, 91, 92, 184, 154,
	88, 155, 157, 2639, 2638, 2636, 131, 2631, 140, 132,
	2629, 2627, 110, 28, 2626, 33, 169, 35, 2624, 2623,
	108, 2620, 142, 2618, 2617, 178, 109, 135, 7, 63,
	100, 9, 158, 107, 62, 58, 2610, 3358, 1404, 1254,
	72, 2609, 104, 48, 41, 71, 106, 170, 31, 2608,
	2606, 165, 2604, 2599, 2598, 2597, 2596, 127, 2594, 2593,
	2590, 94, 189, 69, 2589, 111, 44, 56, 149, 153,
	181, 130, 2582, 137, 84, 147, 2580, 49, 2577, 1103,
	2570, 143, 2563, 2561, 2559, 2558, 38, 2557, 2556, 2554,
	114, 2553, 93, 2552, 138, 134, 128, 51, 113, 168,
	160, 509, 2551, 151, 66, 2550, 90, 39, 0, 3359,
	3277, 2549, 146, 87, 2548, 2545, 2541, 2540, 30, 12,
	4, 6, 13, 11, 24, 18, 96, 2536, 2535, 86,
	101, 2534, 186, 159, 2532, 2529, 2527, 42, 2526, 21,
	2525, 19, 2524, 2523, 20, 2, 2522, 2519, 177, 2518,
	2517, 2516, 2370, 2514, 2513, 2512, 2014, 2511, 2509, 57,
	133,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	9, 9, 9, 31, 31, 11, 11, 10, 10, 10,
	12, 7, 7, 7, 7, 7, 7, 7, 14, 14,
	23, 23, 15, 25, 18, 27, 13, 21, 19, 19,
	28, 17, 17, 24, 24, 149, 149, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 403, 403, 151, 151, 150,
	146, 146, 153, 153, 153, 155, 155, 152, 152, 145,
	145, 32, 32, 85, 85, 85, 136, 78, 78, 78,
	356, 356, 357, 357, 132, 132, 133, 133, 133, 133,
	134, 134, 135, 135, 135, 46, 34, 34, 34, 34,
	34, 34, 34, 35, 35, 36, 36, 36, 37, 37,
	37, 44, 44, 126, 126, 47, 47, 47, 47, 47,
	47, 47, 47, 48, 48, 48, 48, 48, 48, 48,
	48, 48, 48, 48, 48, 48, 48, 58, 58, 56,
	59, 59, 60, 60, 60, 60, 60, 60, 61, 61,
	61, 61, 61, 61, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 68, 68, 68, 69, 69, 69,
	66, 66, 66, 64, 64, 64, 63, 63, 63, 67,
	67, 67, 65, 65, 65, 232, 232, 70, 70, 70,
	70, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 73, 73, 73,
	73, 73, 73, 73, 73, 326, 326, 71, 71, 299,
	299, 74, 74, 257, 257, 75, 75, 75, 75, 75,
	76, 76, 76, 76, 86, 86, 86, 86, 402, 402,
	226, 226, 168, 168, 168, 168, 81, 81, 81, 81,
	82, 82, 82, 83, 83, 131, 131, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 38, 38, 38,
	39, 39, 40, 40, 41, 41, 42, 42, 43, 43,
	43, 43, 43, 93, 93, 93, 95, 92, 92, 92,
	94, 94, 94, 94, 96, 96, 97, 97, 97, 97,
	97, 97, 98, 98, 350, 350, 235, 235, 348, 348,
	349, 349, 203, 203, 203, 203, 203, 204, 204, 204,
	355, 355, 355, 355, 355, 355, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 115, 115, 115, 125, 125,
	125, 125, 125, 125, 125, 117, 117, 117, 109, 109,
	100, 100, 106, 106, 106, 106, 106, 101, 101, 107,
	107, 108, 108, 110, 110, 110, 110, 110, 110, 102,
	102, 102, 102, 112, 112, 112, 112, 111, 111, 121,
	121, 121, 121, 121, 121, 121, 314, 314, 116, 116,
	116, 116, 119, 119, 119, 119, 114, 114, 114, 118,
	118, 122, 122, 122, 122, 103, 103, 104, 104, 105,
	105, 123, 123, 113, 113, 124, 124, 124, 124, 124,
	124, 124, 120, 120, 120, 400, 400, 398, 398, 398,
	398, 398, 398, 398, 399, 399, 401, 401, 79, 79,
	52, 52, 53, 53, 205, 205, 206, 206, 280, 280,
	280, 280, 207, 207, 154, 154, 154, 210, 211, 211,
	208, 208, 209, 209, 209, 213, 213, 212, 215, 215,
	214, 279, 366, 366, 367, 367, 367, 367, 367, 367,
	367, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 364, 364, 364, 365, 362, 362, 363, 363, 363,
	363, 404, 404, 278, 278, 219, 219, 369, 369, 369,
	369, 370, 370, 370, 370, 370, 373, 372, 371, 371,
	371, 371, 371, 310, 310, 310, 57, 57, 57, 246,
	246, 245, 245, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 128, 128, 54, 54,
	54, 160, 160, 51, 51, 51, 55, 55, 50, 50,
	50, 50, 50, 263, 263, 261, 261, 224, 224, 316,
	316, 316, 172, 172, 147, 147, 147, 20, 22, 22,
	16, 16, 16, 16, 16, 16, 29, 29, 30, 30,
	26, 26, 262, 262, 264, 264, 80, 80, 84, 84,
	90, 90, 127, 127, 127, 127, 127, 127, 127, 33,
	33, 33, 33, 45, 45, 45, 45, 88, 407, 407,
	407, 89, 89, 406, 406, 167, 167, 167, 167, 169,
	169, 275, 275, 276, 276, 408, 408, 277, 277, 277,
	162, 161, 163, 163, 49, 49, 49, 156, 156, 157,
	157, 158, 158, 159, 159, 409, 409, 77, 77, 77,
	130, 130, 199, 199, 272, 272, 272, 220, 220, 177,
	177, 274, 274, 273, 273, 273, 244, 244, 244, 129,
	129, 229, 229, 237, 237, 238, 238, 322, 322, 239,
	87, 87, 139, 139, 137, 137, 137, 137, 137, 137,
	138, 138, 138, 140, 140, 140, 140, 140, 140, 140,
	143, 143, 143, 143, 144, 144, 144, 142, 142, 380,
	380, 380, 382, 382, 383, 379, 379, 381, 381, 405,
	405, 248, 248, 248, 217, 218, 216, 216, 222, 222,
	221, 223, 223, 315, 315, 315, 242, 242, 242, 242,
	267, 267, 265, 265, 266, 266, 268, 268, 269, 269,
	269, 270, 270, 271, 271, 241, 241, 295, 295, 141,
	141, 141, 228, 228, 228, 230, 230, 285, 285, 285,
	286, 286, 284, 284, 284, 284, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 396,
	396, 396, 397, 397, 313, 313, 318, 318, 318, 318,
	318, 318, 311, 311, 312, 312, 323, 324, 324, 251,
	251, 251, 251, 249, 249, 250, 250, 319, 319, 319,
	319, 243, 243, 320, 320, 320, 281, 281, 327, 327,
	327, 342, 342, 227, 227, 227, 337, 337, 328, 328,
	328, 328, 328, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 331, 331, 331, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 341, 341, 341, 341,
	341, 332, 332, 338, 339, 333, 334, 340, 340, 340,
	340, 344, 344, 335, 335, 335, 335, 335, 335, 335,
	336, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 259, 259, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 289, 289, 289,
	289, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 374, 374, 374, 374, 374, 374, 374, 374,
	377, 377, 378, 378, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 384, 384, 385, 385,
	387, 387, 388, 388, 389, 390, 390, 390, 391, 392,
	392, 386, 386, 393, 393, 393, 394, 394, 395, 395,
	395, 395, 395, 301, 301, 302, 303, 309, 309, 309,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 170, 170, 170, 170,
	170, 234, 234, 233, 233, 298, 298, 296, 296, 300,
	300, 252, 252, 343, 343, 343, 343, 343, 343, 343,
	253, 253, 253, 260, 254, 254, 255, 255, 255, 255,
	255, 292, 293, 256, 256, 256, 294, 294, 304, 308,
	308, 307, 306, 306, 305, 305, 282, 282, 283, 283,
	240, 240, 410, 410, 236, 236, 321, 321, 321, 321,
	201, 201, 231, 231, 200, 200, 194, 194, 195, 195,
	195, 195, 225, 225, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 345, 345, 345, 346, 347,
	297, 187, 186, 174, 175, 185, 184, 183, 173, 176,
	180, 181, 182, 178, 179, 190, 189, 188, 325, 196,
	196, 197, 197, 197, 198, 198, 198, 198, 171, 171,
	191, 191, 192, 193, 193, 164, 164, 164, 165, 165,
	166, 166, 354, 354, 352, 352, 352, 353, 353, 353,
	353, 351, 351, 351, 351, 351, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 4, 6, 1, 3, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 6, 5, 5, 7, 7, 7, 10,
	7, 4, 12, 4, 12, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 1, 3, 2, 1, 1, 3, 1,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 5, 6, 2, 1, 12, 12, 2,
	1, 1, 1, 3, 3, 0, 3, 1, 3, 1,
	1, 3, 2, 5, 0, 5, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 3, 5, 3, 3, 5,
	3, 6, 6, 1, 1, 1, 2, 1, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 1, 2, 1, 7, 3, 8,
	8, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	2, 1, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 4, 6, 3, 3,
	5, 3, 3, 5, 3, 1, 3, 2, 2, 5,
	3, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 5, 2, 3,
	0, 3, 2, 3, 0, 2, 3, 2, 3, 2,
	6, 4, 7, 2, 6, 4, 7, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 3, 1, 1, 3,
	5, 4, 6, 4, 3, 0, 1, 3, 2, 4,
	2, 4, 1, 6, 6, 3, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 3, 1, 3, 2, 1,
	3, 1, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 3, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 5, 7, 3, 3, 3,
	3, 3, 4, 4, 3, 4, 4, 4, 3, 2,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 2, 3, 3, 3, 2, 3, 5,
	4, 6, 4, 5, 6, 5, 1, 0, 2, 3,
	3, 3, 6, 4, 2, 3, 4, 2, 3, 3,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 2, 3, 2, 3, 7, 7, 8, 10, 7,
	4, 5, 5, 5, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 2,
	8, 11, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 2, 1, 0,
	1, 0, 9, 9, 3, 1, 3, 7, 1, 3,
	11, 3, 2, 0, 3, 1, 2, 2, 3, 2,
	6, 2, 1, 1, 2, 4, 2, 5, 5, 5,
	2, 8, 9, 6, 5, 3, 1, 4, 7, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 7, 3, 1,
	0, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	2, 2, 2, 2, 2, 3, 4, 2, 4, 7,
	3, 3, 0, 3, 6, 3, 6, 3, 13, 16,
	9, 12, 4, 2, 0, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 1, 1,
	0, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 1, 3, 1,
	3, 8, 5, 4, 3, 0, 2, 2, 0, 10,
	3, 2, 0, 1, 3, 1, 1, 3, 3, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 5, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 7,
	3, 4, 3, 4, 3, 4, 1, 5, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 3, 2, 1, 0, 5, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 5, 2, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 2, 4, 2, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 1, 1, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 3,
	4, 1, 1, 1, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 8, 6, 6, 4, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 5, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 3, 1, 1, 1, 1, 5,
	3, 1, 1, 3, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 7, 1, 7, 5, 3, 1, 1,
	1, 1, 1, 3, 5, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 415, -4, -32, -34, -46, -44,
	-47, -75, -59, -60, -61, -74, -70, -76, -77, -78,
	-79, -71, -85, -84, -86, -90, -38, -87, -80, -81,
	-91, -99, -127, -128, -129, -130, -5, -11, 25, 36,
	-35, -36, -37, 50, 76, 64, -54, -51, -48, -58,
	78, 99, -381, 103, -62, -65, -67, 107, 116, 121,
	144, 153, 253, 260, 281, 283, 285, 294, -40, -39,
	117, -137, -139, 279, -82, -83, -92, -93, -94, -95,
	-131, 312, -100, -101, -102, -103, -104, -105, -106, -107,
	-108, -109, -110, -111, -112, -113, -114, -115, -116, -117,
	-118, -119, -120, -121, -122, -123, -124, 315, -33, -45,
	-89, -88, 357, -6, -7, -8, -9, -10, -12, -22,
	-49, -50, -52, -53, -55, -57, -56, -380, -63, -64,
	-66, -68, -69, -140, -138, 412, 280, 366, 37, 324,
	65, 111, 289, 20, -14, -15, -18, -17, -19, -16,
	-23, -25, -27, -24, -26, -28, -29, -30, -31, -20,
	-21, -13, 383, 391, -143, -141, -142, -144, 301, 374,
	337, 416, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 2, 337, 377, 302, 367, 92, 164, 265,
	251, -398, 2, 4, -360, -358, -195, -194, 337, 92,
	30, 38, 39, 41, 44, 54, 55, 56, 59, 96,
	97, 114, 122, 123, 133, 146, 148, 156, 157, 171,
	177, 179, 199, 228, 230, 243, 247, 257, 259, 267,
	291, 318, 333, 347, 348, 354, 355, 374, 375, 379,
	386, 20, 21, 22, 23, 25, 35, 36, 37, 40,
	42, 43, 46, 47, 48, 49, 50, 51, 58, 63,
	64, 65, 66, 67, 72, 69, 70, 71, 74, 76,
	77, 80, 81, 82, 90, 91, 93, 94, 95, 99,
	101, 103, 106, 107, 109, 110, 116, 117, 120, 115,
	118, 119, 121, 131, 132, 134, 135, 137, 139, 143,
	145, 150, 151, 152, 153, 154, 155, 165, 160, 166,
	170, 173, 172, 174, 175, 176, 167, 181, 184, 185,
	186, 188, 189, 192, 193, 194, 197, 196, 201, 202,
	205, 206, 209, 211, 214, 215, 218, 216, 217, 220,
	221, 223, 222, 229, 231, 232, 234, 235, 238, 239,
	242, 245, 248, 249, 250, 251, 252, 253, 254, 256,
	258, 260, 262, 263, 264, 265, 266, 268, 269, 271,
	272, 273, 274, 275, 279, 277, 278, 280, 281, 282,
	283, 285, 287, 288, 289, 290, 292, 313, 314, 326,
	294, 295, 296, 297, 298, 299, 300, 304, 308, 305,
	306, 307, 302, 303, 309, 310, 312, 315, 317, 319,
	320, 323, 324, 325, 327, 330, 332, 328, 329, 322,
	335, 336, 338, 339, 340, 341, 342, 343, 344, 345,
	349, 352, 353, 357, 358, 359, 360, 363, 364, 365,
	370, 366, 368, 371, 372, 373, 378, 384, 385, 387,
	388, 389, -193, -164, 405, -192, 415, 415, 415, 2,
	185, 264, 309, -188, -191, -192, -193, -164, 4, -358,
	-360, 92, 236, 415, 415, 415, 2, 337, 325, 115,
	302, 367, 287, 377, -261, 181, 92, 362, -164, 260,
	24, 2, 101, 170, 365, 364, 24, 256, 303, 339,
	341, 2, 415, 415, 2, 377, 302, 337, 164, 92,
	367, 287, -182, 2, -164, -73, 2, 412, -72, -5,
	-48, -58, -62, -74, -70, -11, -32, -34, -54, -51,
	-59, -65, -67, -78, -77, -79, -81, -85, -84, -87,
	-92, -93, -99, -129, -130, 78, 25, 107, 312, 117,
	-402, -226, 2, 24, -168, -164, 78, 144, 301, 337,
	2, 185, 2, -182, 2, -398, 2, 185, 2, -402,
	-226, 23, 2, -164, 2, 298, 315, -169, 2, 294,
	-164, 415, 415, 415, 415, 415, 415, 206, 58, 291,
	309, -97, 353, -96, 347, 296, -98, -350, 2, 218,
	-164, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 2, -125, 309, 325, 151, 36,
	58, 24, 63, 93, 145, 164, 165, 193, 73, 74,
	263, 206, 186, -314, 119, 310, 338, 297, 335, 353,
	78, 368, 288, 342, 118, 4, 92, 218, 311, 347,
	67, 415, 415, 415, -405, 2, 337, 415, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, -138, -140,
	-139, 415, 415, 415, 415, 415, -221, -222, 361, 178,
	113, 241, -137, -139, 2, -380, -125, 309, 2, 58,
	24, -348, 2, -287, 236, -289, 403, 404, 398, 224,
	390, -301, 98, 213, 212, -291, -304, 114, 291, 412,
	-198, -290, 418, 9, -377, -139, 31, -302, -303, 52,
	-196, -164, 7, 8, 5, 6, -171, -329, -297, -336,
	356, 124, 227, -374, -375, -197, 4, -358, -352, -330,
	-339, -334, -335, -337, 42, 48, 47, 344, 217, 304,
	305, 306, 307, 319, 370, 160, 40, 234, 235, 172,
	179, 61, 84, 85, 83, 88, 89, 86, 311, 367,
	53, 30, 156, 228, 157, 59, -376, 43, 94, 106,
	134, 135, 173, 174, 175, 176, 188, 189, 329, 349,
	39, 41, 44, 54, 55, 96, 97, 122, 123, 133,
	146, 171, 177, 199, 230, 247, 257, 267, 318, 333,
	347, 348, 354, 355, 375, -359, -340, 79, 125, 142,
	169, 158, 182, 183, 187, 200, 203, 219, 226, 244,
	246, 286, 316, -406, 2, 353, 353, 2, -406, 2,
	-406, 2, -167, 2, 353, 350, -407, 353, 386, -382,
	268, -383, -182, -382, 415, 415, 417, 415, -216, -217,
	-218, 2, 24, 104, 412, 2, -317, 2, 410, -319,
	-171, 195, -376, -139, -318, 412, -188, 237, -197, 84,
	85, 88, 89, 4, -164, 61, 213, 212, -3, 2,
	-319, 156, -188, 2, -319, 156, 2, -189, 156, -319,
	-191, 2, -356, 156, -354, 9, -353, 5, 4, -358,
	-360, -359, 2, -173, -164, 2, -200, 156, -188, -185,
	-351, 4, -358, -360, -359, -361, 24, 26, 27, 28,
	29, 31, 32, 33, 34, 45, 52, 53, 57, 60,
	62, 73, 78, 83, 84, 86, 85, 87, 88, 89,
	98, 100, 102, 104, 105, 108, 111, 113, 124, 126,
	138, 140, 141, 144, 147, 149, 159, 164, 168, 178,
	180, 195, 198, 204, 207, 208, 224, 225, 227, 233,
	236, 237, 240, 241, 255, 261, 270, 284, 301, 311,
	321, 331, 334, 337, 346, 350, 351, 356, 361, 362,
	367, 369, 376, 377, 380, 381, 382, 383, -186, -351,
	350, 417, -231, -194, -195, -225, -164, 414, -287, 2,
	-287, 156, 2, -287, 156, 2, -219, 412, 414, 337,
	62, 2, -188, 156, -178, 2, -164, 109, -189, 156,
	2, -191, -356, 156, 2, -356, 156, 2, -190, 2,
	-188, 164, 164, -173, 156, 2, -164, 24, 141, 2,
	180, 2, 180, 2, -320, 2, -319, -232, 156, 2,
	-188, -232, 156, 2, -232, 156, 2, -201, 156, 2,
	-200, -173, 156, 2, -357, 156, 2, -356, -357, 156,
	2, -257, 412, -326, 2, -325, -353, 374, 415, 415,
	415, 415, 415, 415, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 415, 415, 309, 236, 350, 417, -188,
	-287, -299, 412, 141, -287, 236, 141, 238, 2, 92,
	337, 389, 24, -164, 2, 313, 2, 412, -97, 56,
	353, -276, 2, -277, -161, -162, -163, 184, 262, 266,
	389, -348, 350, 395, 141, -348, -235, 414, -125, 2,
	138, 369, 2, 7, 2, -356, 2, 313, 2, 263,
	310, 58, 141, 2, 2, -400, 2, 236, 141, 2,
	141, 2, 141, 2, 141, 2, 141, 2, 2, 263,
	310, 2, 352, 194, 352, 2, 141, 2, 141, 2,
	5, 2, 184, 262, 326, 2, 337, 377, 302, 2,
	2, 141, 141, 389, 2, -243, -319, -221, -222, -242,
	-265, -266, 204, 126, 233, -248, 24, 104, -248, -248,
	46, 413, 413, -125, 313, 2, 10, 11, 60, 35,
	403, 404, 405, 406, 136, 407, 408, 401, 402, 400,
	393, 394, 397, 190, 191, 75, 396, 395, 68, 210,
	293, 127, 128, 129, 130, 276, 161, 162, 163, 13,
	14, 15, 28, 240, 203, 390, 158, 316, 398, 16,
	17, 18, 182, 183, 226, 38, 159, -170, -202, -287,
	-287, -287, -287, -287, 246, -240, -282, 410, -139, 412,
	412, -139, -287, -233, 412, -347, 7, -139, -296, 410,
	-305, -287, 414, 412, 5, 412, 5, -384, 384, 138,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	259, -344, 378, -344, -344, -331, 412, -331, 412, 412,
	-332, 412, 412, 412, -331, 412, 412, 412, 385, 385,
	391, 412, 412, -275, -276, -275, 350, -169, 417, -382,
	-219, 412, -236, -321, -287, 405, -236, -236, 236, -233,
	-287, 79, -251, 187, 219, 142, 200, 286, 169, -347,
	-73, -284, 418, 412, -171, -376, -139, -164, -313, 391,
	-313, -139, -318, 412, -317, 405, -188, 412, 414, -149,
	277, -148, 22, 25, 107, 372, 120, -209, 166, 251,
	114, 322, 343, 117, 295, 277, 114, -245, -247, 32,
	90, 221, 248, 49, 154, 212, 213, 324, 114, 277,
	383, 114, 117, 277, -151, 322, 343, 117, 295, 277,
	-150, -209, 114, 418, 117, 231, -356, -231, 417, 417,
	-351, 405, 114, 114, 141, -225, -351, -188, -196, -164,
	-197, 412, -219, 224, 236, -398, -246, -245, 224, -160,
	-379, 383, 224, 224, -219, -175, 156, 2, -165, -164,
	-175, 156, -379, 224, -320, -199, -188, -199, 312, -182,
	32, -153, 417, 51, 282, 114, -153, 114, -153, 114,
	-153, 417, 114, -153, 114, 417, 114, 114, -233, 413,
	417, -398, -225, -168, 78, 412, 32, -298, -327, -328,
	-329, -338, -333, -336, 42, 48, 47, 344, 217, 304,
	305, 306, 307, 319, 370, 160, 40, 234, 235, 172,
	4, 41, -340, 179, 171, 173, 174, 175, 176, 177,
	318, 39, 267, 134, 135, 133, 106, 97, 96, 230,
	44, 43, 94, 347, 348, 349, 188, 189, 55, 54,
	375, 329, -357, -398, -225, 138, -173, 2, -188, 2,
	69, 70, 389, -350, -233, 32, -276, 2, -408, 417,
	202, -204, 209, 223, 150, 237, 387, -355, 5, 4,
	-297, -310, 98, 206, -336, 8, 404, -345, 7, 403,
	-349, -348, -349, 82, 414, -351, 337, 188, -350, 24,
	314, 2, -188, -401, 138, -399, 287, -398, -188, -188,
	-188, -188, -188, 138, 2, 352, 2, 138, -164, -164,
	202, -188, 2, -190, 2, -189, 2, 337, 164, 337,
	-153, 417, -242, -266, -265, -268, -287, 24, -271, 132,
	220, -287, -289, -138, -138, -138, -223, -315, -287, 261,
	164, -350, -342, -327, -341, 272, 273, 271, 275, 274,
	-327, -187, -351, 347, -287, -287, -287, -287, -287, -287,
	-287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
	-287, -287, -287, -287, -287, -287, -287, -287, -287, -287,
	-287, -287, -287, -287, -287, -287, -287, -287, -287, 203,
	158, 316, 38, 159, -287, 350, -287, -287, -287, -287,
	216, 224, 227, 356, 124, 363, 104, 231, -410, 334,
	34, -294, -139, 412, -309, 29, 321, 24, -301, 291,
	412, -282, -287, -283, -234, -233, 413, 417, -234, -300,
	-296, -308, -307, 380, -351, 405, 413, -233, 376, 24,
	104, 405, 2, 7, -258, 388, 215, 95, 152, 214,
	-259, 300, -385, 131, 147, 412, 413, 2, 413, 2,
	413, 2, 413, 2, -287, -287, -287, -287, -287, -233,
	-347, -252, 2, -343, -233, 4, 388, 215, 95, 152,
	214, 300, -252, 2, 7, -233, 2, -233, 2, -253,
	2, -287, -233, -254, -288, -289, 403, 404, 398, 412,
	291, -255, 2, -287, -234, 347, 347, 347, -287, 45,
	198, 351, -256, -287, 141, -233, -169, -383, 32, -233,
	-228, 417, 141, 32, 4, -228, -228, 412, 413, 417,
	187, 187, -317, -251, 187, -249, 244, -249, -249, -396,
	412, 411, -313, -174, 410, 419, -351, -234, 2, 412,
	-313, -313, 414, -312, -311, 32, -182, 242, -312, 413,
	-188, -351, 417, 350, -262, 73, 62, -279, 156, 62,
	-362, -176, 73, -363, -164, 57, 362, 261, 140, -262,
	73, -262, 73, 73, 312, 325, 46, -319, 35, -87,
	71, 141, 350, -319, -247, -327, 90, 212, 213, 46,
	-346, -345, 404, -346, 46, -346, -346, -346, 383, -189,
	-319, 350, 252, -356, 71, 350, 417, 35, -87, 71,
	141, 350, -200, -174, 71, 337, -324, -323, 392, -194,
	-164, 414, -287, -287, 327, 413, 414, 182, 182, -205,
	-206, -164, -280, -279, -364, -365, -362, 181, 164, 362,
	125, 32, 114, -225, 350, 114, 252, 114, 114, 32,
	236, 224, 236, 224, -156, 340, 114, -281, 381, -272,
	-87, 412, 98, 32, -272, -237, -238, -322, -239, -176,
	412, -182, -188, -232, -232, -232, -200, -201, -173, -356,
	-357, -357, 413, -73, -325, 350, 383, 369, -206, -72,
	25, 78, 107, 413, 417, -227, 31, 410, -258, 412,
	-344, 412, -135, -323, 383, 141, -226, -324, -324, 138,
	70, 395, 350, 413, 353, -277, -203, 266, 320, 278,
	308, 8, 7, 7, 417, -351, -188, 138, -225, -225,
	309, -73, 138, -73, 414, -188, -200, -188, -319, -269,
	-345, 412, -270, 291, 292, 417, -147, 33, 102, 192,
	-188, 389, -287, -287, 350, -410, 334, -294, -287, 216,
	227, 356, 124, 363, 104, 231, 141, 412, -288, -288,
	-233, -287, 412, -233, 411, 421, 413, -287, 411, 411,
	417, -306, -307, 108, -287, 414, -222, 417, -221, -287,
	-233, -233, 413, 413, 350, 350, 350, 350, 412, -390,
	245, 412, 412, -287, 32, 417, 417, 417, 417, 413,
	413, 417, 413, 141, 413, 413, 413, 413, 413, -260,
	255, 413, 10, 11, 403, 404, 405, 406, 136, 407,
	408, 401, 402, 400, 393, 394, 395, 68, 210, 293,
	13, 14, 15, 182, 159, -288, -288, -288, -233, 412,
	413, -292, -293, 141, 138, 389, 389, 389, 32, -256,
	-256, -256, 413, 141, -233, 412, 413, -281, -321, -230,
	2, -317, -184, -351, -281, -281, -233, -287, -317, -317,
	-250, 369, 236, 187, -317, -311, 413, -397, -347, -313,
	-312, -347, -286, -285, 139, 222, 413, -234, 2, -312,
	-312, -351, -182, -219, -313, 413, 414, -148, -188, -176,
	-183, -164, 224, -279, 156, -155, 224, -327, -183, 412,
	412, 192, 192, -176, -183, 156, -176, 156, -183, -183,
	-403, 266, 232, -287, 205, 265, 225, -149, 277, -87,
	389, 412, -190, 277, -196, -346, -346, -245, 277, -189,
	-356, 383, 389, -173, -150, -87, 389, 412, -174, -151,
	277, 389, -188, -132, 155, 231, 405, -351, -126, 5,
	227, -126, 413, 417, 164, -175, 164, -181, -165, -87,
	-188, 141, 4, -189, -356, -356, -356, -87, -188, 114,
	-188, 114, -157, 110, -409, 395, -173, -222, -287, -244,
	-274, 284, 236, -220, -177, -176, 374, -182, -244, -229,
	417, 141, 395, 414, -220, -153, -153, -153, -153, -153,
	-225, 23, -356, 413, -327, 410, 411, 7, 7, 412,
	-347, -135, -134, 239, -133, -164, 5, -225, 141, -41,
	383, 265, 92, 337, 251, 164, -348, -348, -276, 360,
	66, 266, -348, 337, 309, -73, -164, -270, -287, -315,
	-188, 418, -287, -287, -288, -288, 141, 412, -287, -298,
	28, 28, 413, -234, 417, -283, -287, 413, -296, 111,
	-287, 346, -351, 405, 413, 376, -222, -222, -222, 5,
	215, 152, 214, -259, 214, -259, -259, 7, -391, -179,
	412, -164, 381, -221, 413, -342, -327, -287, -287, -287,
	-347, -287, -292, -287, -342, -327, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, -288, -288, -288, -288, -288,
	-288, -288, -288, -288, -288, 104, 224, 231, -288, 417,
	-234, -293, -292, -287, -287, -327, 413, 413, 413, -233,
	-72, -241, 147, -324, 417, -241, -241, 413, -250, 412,
	-287, -317, 411, 413, 417, -312, 411, 417, 420, 395,
	-313, 413, 414, -219, -311, -351, 350, 350, 114, 224,
	371, -366, -363, -287, -224, -316, -176, -378, 412, -164,
	-374, -375, -171, 412, 412, -146, 107, 312, -264, 114,
	-153, 114, -153, 387, 412, 412, 350, -262, 73, -290,
	-171, -233, 350, 350, 252, -290, -290, -233, 350, -290,
	117, -135, 141, 336, -207, 167, -280, -165, 412, -175,
	412, 412, -219, -188, -324, -246, -160, -263, 369, -174,
	412, -174, -158, 197, -409, -354, -379, -267, -265, -244,
	-236, 225, 72, 413, 417, 414, -281, -238, -230, -287,
	2, 413, 238, -136, 80, -136, 7, 411, 413, -347,
	413, 417, 412, 395, 395, -225, 239, -185, -173, -188,
	-186, -200, -188, 237, 413, -147, -174, 28, 28, -287,
	-298, 413, -287, -287, 413, -287, 411, -287, 414, 5,
	-287, 413, 413, 413, 413, -392, -164, -287, 413, 413,
	413, 417, 413, 413, 413, -293, 141, 104, 231, 412,
	-287, 413, 413, 413, -295, 149, 46, -317, -295, -295,
	-225, -284, -347, -285, -174, 410, -312, -313, -351, 414,
	-176, -183, -279, 114, -367, 73, -368, 60, 125, 78,
	224, 227, 362, 261, 57, 98, 270, 32, 413, 413,
	417, -172, 60, -172, -287, 412, -224, -225, 224, 98,
	224, 98, 91, 358, -176, -183, -225, -225, -188, -176,
	-183, 412, 413, -190, -189, -356, 413, -174, 71, -357,
	347, -208, -209, 159, 412, -224, 412, -225, -205, 32,
	-135, 412, 143, 236, -224, 236, -159, 196, -409, -354,
	-156, -244, -273, 412, 236, -87, -177, 2, -222, 395,
	91, 91, 411, 413, -133, -134, -356, -356, -42, -43,
	164, 73, 254, -211, -210, 251, 231, -147, -287, -287,
	413, 413, -351, 405, -222, -386, 251, 413, -287, -288,
	141, 412, -298, 413, -387, 382, -287, -233, -387, -387,
	413, -313, -347, -312, -279, -183, -187, -180, -164, 125,
	156, 227, 192, 412, -288, -188, 412, 2, -278, -404,
	77, 332, -316, -147, -187, -147, 413, -233, 413, 413,
	227, 227, -287, -327, -153, -153, 413, 413, 350, 350,
	-233, 350, 350, 389, -290, 249, -224, 413, -224, 413,
	413, -87, -224, -188, 413, -188, -409, -354, -157, 105,
	-225, 73, -267, -294, 412, 412, 413, 417, 24, 412,
	24, 412, -186, 337, 413, -222, 46, 413, -288, -298,
	413, -388, -389, -179, -312, 411, -368, -180, 224, -287,
	-166, 412, -287, -207, 412, -172, -222, 270, -152, 60,
	412, 412, -176, -183, -222, 412, 412, -290, -188, 413,
	-278, 413, -207, 413, -263, 412, -354, -158, 364, 225,
	413, -183, -244, -357, -357, -43, -225, -225, -188, -393,
	265, 292, -233, 413, 417, 32, 114, 413, -369, 211,
	-164, 413, -208, -225, -147, 413, -188, -145, 369, -187,
	-213, -212, -210, -215, -214, -210, 413, -233, -233, 412,
	-207, -278, -208, -278, 412, -224, -159, 312, -281, 413,
	413, 413, 413, 413, -394, -395, 38, 359, 82, -287,
	-394, -389, -391, 125, -370, -373, -372, 236, 142, 250,
	317, 413, 331, 379, 413, -219, -287, 413, 417, 374,
	413, 417, 374, 413, 413, -225, -208, -207, -207, -224,
	413, -237, -135, -135, -395, 258, 137, 291, 258, 137,
	-180, -372, 236, -373, 236, 364, 101, -369, -212, 159,
	-214, 141, 413, -208, -208, 413, -281, 28, -371, 221,
	282, 51, 312, -371, -370, 412, 412, -154, 51, 282,
	-278, -395, 21, 227, 98, -233, -233, -207, 413, 413,
	-208, -208, 350, 412, -233, 413, -208,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 43, 45,
	46, 47, 48, 49, 51, 53, 56, 57, 0, 0,
	176, 178, 180, 0, 0, 0, 195, 197, 199, 200,
	-2, 0, 0, 0, 228, 229, 231, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	0, 830, -2, 0, 346, 348, 357, 359, 361, 363,
	364, 0, 426, 428, 430, 432, 434, 436, 438, 440,
	442, 444, 446, 448, 450, 452, 454, 456, 458, 460,
	462, 464, 466, 467, 469, 471, 473, -2, 742, 744,
	746, 748, -2, 60, 62, 64, 66, 68, 70, 85,
	203, 205, 207, 209, 212, 214, 216, 867, 234, 236,
	238, 240, 242, -2, 879, 0, 0, 0, -2, 0,
	-2, -2, -2, 760, 71, 72, 73, 74, 75, 76,
	91, 92, 93, 94, 95, 96, 78, 80, 81, 87,
	88, 90, 0, 0, 843, 845, 847, 849, -2, 0,
	0, -2, 7, 13, 15, 17, 20, 22, 24, 26,
	28, 30, 32, 34, 36, 38, 40, 44, 50, 52,
	54, 58, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 152, -2, -2, -2, -2, 0, 0, 1491,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605,
	1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
	1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625,
	1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635,
	1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,
	1666, 1667, 1378, 1432, 1381, 1376, 177, 179, 181, 182,
	0, 0, 0, 646, 1417, 1430, 1431, 1432, 1435, 1436,
	1437, 1491, 0, 196, 198, 201, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 705, 325, 1577,
	327, 329, 0, 0, 0, 0, 222, 223, 224, 225,
	226, 227, 230, 232, 233, 0, 0, 0, 0, 0,
	0, 0, 324, 322, 1412, 267, 268, 0, 307, 308,
	309, 310, 311, 312, 314, 271, 273, 275, 276, 278,
	280, 282, 284, 286, 288, 290, 292, 293, 295, 297,
	298, 300, 302, 303, 305, 706, 0, 0, 0, 0,
	0, 339, 333, 338, 340, 342, 343, 344, 345, 0,
	159, 0, 579, 320, 318, 0, 155, 0, 739, 0,
	339, 1459, 337, 740, 741, 0, 0, 736, 737, 1606,
	770, 347, 349, 358, 360, 362, 365, -2, -2, 1698,
	-2, 388, -2, 396, 1701, 1608, 399, 0, 401, -2,
	404, 427, 429, 431, 433, 435, 437, 439, 441, 443,
	445, 447, 449, 451, 453, 455, 457, 459, 461, 463,
	465, 468, 470, 472, 474, 475, 0, 0, 0, 0,
	0, 479, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, -2, 0, 0,
	0, -2, -2, 0, 0, 478, 480, 481, 482, 0,
	526, 743, 745, 747, 0, 687, 869, 61, 63, 65,
	67, 69, 204, 206, 208, 210, 213, 215, -2, 841,
	842, 235, 237, 239, 241, 243, -2, 0, 873, 873,
	873, 0, 0, 842, 840, 0, 350, 0, 352, 0,
	479, 355, 356, 408, 409, 1077, 0, 0, 0, 0,
	0, 0, 1155, -2, -2, 1187, 1189, 1679, 1698, 0,
	1191, 1192, 0, 1194, 1196, 1197, 0, 1200, 1201, 1355,
	1424, 1419, 1384, 1385, 1386, 1387, 0, 0, 1390, 0,
	1392, 1393, 1394, 1257, 1211, -2, -2, -2, 1428, 993,
	994, 995, 996, 997, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1709, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
	0, 1668, 1685, 1691, 1686, 1676, 1229, -2, -2, 1498,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1680, 1681, -2,
	1683, -2, -2, 1690, -2, 1694, 1695, -2, -2, 1700,
	-2, -2, 1703, 1704, -2, 1446, 1046, 1710, 1711, 1712,
	1713, 1714, 1715, 1716, 1717, 1718, 1719, 1722, 1723, 1724,
	1725, 1726, 1727, 772, 750, 763, 772, 752, 753, 754,
	755, 756, 761, 762, 765, 0, 757, 758, 759, 859,
	1583, 862, 646, 860, 844, 846, 0, 848, 0, 0,
	0, 853, 876, 874, 0, 910, 857, 858, 868, 925,
	0, 0, 945, 945, 936, 0, 967, 0, 1429, 0,
	0, 0, 0, -2, 1432, 1709, 1720, 1721, 2, 77,
	0, 1685, 967, 79, 0, 1685, 82, 0, 1685, 0,
	-2, 86, 0, 1685, 160, 161, 1442, 1443, 1447, 1448,
	1449, 1450, 89, 0, 1408, 97, 0, 1685, 1375, 0,
	1405, 1451, 1452, 1453, 1454, 1455, 1728, 1729, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 0, 1402,
	0, 0, 572, 1372, 1377, 573, 1382, 0, 183, 184,
	185, 1685, 187, 188, 1685, 190, 0, 0, 0, 0,
	0, 211, 646, 1685, 0, 218, 1413, 0, 670, 1685,
	668, 1416, -2, 1685, 690, 693, 1685, 695, 646, 697,
	1415, -2, 1439, 866, 1685, 786, 326, 328, 0, 221,
	0, 799, 0, 801, 0, 820, 973, 144, 1685, 246,
	265, 144, 1685, 249, 144, 1685, 252, 144, 1685, 255,
	1370, 144, 1685, 258, 259, 1685, 261, 162, 262, 1685,
	264, 321, 0, 0, -2, 315, 1418, -2, 313, 272,
	274, 277, 279, 281, 283, 285, 287, 289, 291, 294,
	296, 299, 301, 304, 306, -2, 0, 0, 0, 0,
	578, 0, 0, 0, 738, 0, 0, 0, 369, 0,
	0, 0, 0, 769, 366, 0, 385, 0, 387, 1675,
	-2, -2, 391, 773, 777, 778, 779, 0, 0, 0,
	0, 398, 0, 0, 0, 402, 405, 0, 476, 477,
	0, 0, 487, 488, 489, 490, 491, 0, 494, 515,
	530, 0, 0, 498, 500, 577, 502, 0, 0, 504,
	0, 506, 0, 508, 0, 510, 0, 512, 514, 516,
	531, 518, 0, 0, 0, 529, 0, 535, 0, 538,
	539, 540, 0, 542, 543, 544, 0, 0, 0, 552,
	554, 0, 0, 483, 484, 144, 971, -2, 0, 836,
	888, 889, 0, 0, 0, 0, 871, 872, 0, 0,
	0, 832, 833, 351, 0, 354, 0, 0, 0, 0,
	1290, 1291, 1292, 1293, 1294, 1295, 1298, 1299, 1296, 1297,
	1300, 1301, 0, 0, 0, 0, 0, 1302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1303,
	1304, 1305, 0, 0, 1307, 0, 1309, 0, 0, 0,
	0, 0, 0, 1134, 1136, 1363, 0, 0, 1306, 1082,
	1083, 1084, 1119, 1120, 0, 1188, 1360, 1359, 1190, 0,
	1312, -2, 1313, 0, 0, 1193, 1399, 1198, 1199, 1312,
	0, 1354, 0, 0, 1389, 0, 1074, 1259, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 1044, 1051, 1048, 1047, 1032, 0, 1031, 0, 0,
	1029, 0, 0, 0, 1033, 0, 1335, -2, 0, 0,
	0, 0, 0, 749, -2, 751, 0, 767, 0, 861,
	0, 0, 914, 1364, 1368, 1369, 914, 914, 0, 0,
	1313, 0, 0, 0, 0, 964, 964, 964, 962, 939,
	0, 945, 0, -2, 0, 945, 945, 0, 955, 0,
	955, -2, 936, 0, 0, 968, 969, 0, 0, 98,
	733, 115, 0, 733, 733, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 83, 671, 0,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 113, 0,
	137, 139, 0, 0, 0, 0, 958, 571, 0, 0,
	1433, 1380, 0, 0, 0, 0, 1433, 0, 0, 1419,
	1420, 585, 0, 0, 0, 0, 666, 669, 0, 688,
	0, 865, 0, 0, 0, 0, 1685, 702, 1404, 1438,
	0, 1685, 788, 0, 977, 0, 802, 0, 0, 974,
	0, 244, 0, 142, 143, 0, 247, 0, 250, 0,
	253, 0, 0, 256, 0, 0, 0, 0, 0, 868,
	0, 0, 331, 341, 0, 0, 868, 0, 1315, 985,
	988, 989, 990, 1074, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1052, 1046, 1060, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1042, 0, 1017, 1017, 1017,
	1034, 1035, 1053, 1054, 1056, 1058, 986, 987, 1052, 1052,
	1049, 1050, 174, 0, 335, 0, 958, 371, 958, 373,
	0, 560, 0, 0, 0, 0, -2, 393, 0, 775,
	0, 780, 417, 418, 419, 782, 783, 397, 420, 421,
	422, 423, 424, 425, 0, 663, 0, 665, 1395, 0,
	394, 410, 395, 400, 0, 406, 0, 0, 492, 493,
	495, 496, 497, 501, 0, 565, 1598, 575, 503, 505,
	507, 509, 511, 868, 520, 0, 522, 868, 533, 536,
	541, 545, 546, 547, 548, 549, 550, 0, 0, 0,
	686, 0, 839, 886, 887, 892, 896, 897, 900, 903,
	904, 894, 1077, 854, 855, 856, 880, 881, 716, 0,
	0, 353, 1078, 981, 982, 1036, 1037, 1038, 1039, 1040,
	1079, 1080, 1401, 0, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, -2, -2, -2, -2, -2, -2,
	-2, -2, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, -2, -2, -2, 1117, 1118, -2, 1308,
	1310, 0, 1363, 0, -2, 0, -2, -2, -2, -2,
	1131, 0, 1133, 1138, 1140, 1142, 0, 0, 0, 0,
	1362, 1152, 1346, 0, 0, 1287, 1288, 1289, 1137, 0,
	0, 1361, 1358, 0, 0, 1311, 1195, 0, 0, 0,
	1319, 1353, 1349, 0, 1421, 1427, 1202, 879, 0, 0,
	0, 0, 1209, 0, 1400, 1061, 1062, 1063, 1064, 1065,
	1066, 1075, 1267, 0, 0, 0, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 0, 0, 0, 0, 0, 0,
	0, 0, 1239, 0, 1322, -2, -2, -2, -2, -2,
	-2, -2, 0, 1241, 0, 0, 1253, 0, 1255, 0,
	1243, 1313, 1332, 0, 0, 1158, 0, 0, 0, 0,
	1698, 0, 1246, 1313, 1340, 0, 0, 0, 0, 0,
	0, 0, 0, 1313, 0, 1345, 766, 863, 0, 0,
	977, 0, 0, 0, 1367, 977, 977, 0, 909, 0,
	0, 0, 0, 0, 0, 959, 963, 960, 961, 0,
	0, 945, 955, 922, 0, 0, 1403, 0, 930, -2,
	955, 955, 0, 932, 954, 0, 646, 944, 934, -2,
	0, -2, 0, 0, 0, 0, 732, 117, 1685, 0,
	146, 0, 0, 636, 1409, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 672, 673, 675, 681, 683, 0,
	677, 1398, 0, 678, 0, 680, 682, 684, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 1374, 0, 0, 165, 957, 0, 1373,
	1383, 0, 186, 189, 175, 645, 0, 0, 0, 0,
	584, -2, 586, 588, 589, 590, 591, 1533, 1439, 0,
	1439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 790, 796, 0, 879, 0, 818,
	804, 0, 0, 0, 818, 822, 823, 825, 826, 0,
	0, 975, 266, 144, 144, 144, 1371, 144, 144, 163,
	260, 263, 323, 269, 316, 0, 0, 0, 0, 317,
	0, 0, 0, 319, 0, 978, 980, 0, 991, 0,
	1044, 0, 153, 174, 0, 0, 0, 370, 375, 0,
	561, 0, 0, 386, 0, 774, 781, 0, 414, 0,
	416, 664, 1397, 1396, 0, 407, 485, 0, 576, 574,
	519, 523, 868, 525, 0, 562, 563, 564, 972, 0,
	898, 0, 895, 901, 902, 0, 883, 714, 715, 0,
	0, 0, -2, -2, 0, 0, 0, 1153, -2, 1132,
	1135, 1139, 1141, 1143, 0, 0, 0, 0, 0, 0,
	0, 1154, 1312, 0, 1356, 1359, -2, 1314, 1317, 1318,
	0, 0, 1350, 0, 0, 0, 0, 0, 878, 879,
	879, 879, 1208, 0, 0, 0, 0, 0, 0, 1210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1228,
	1015, 0, 1238, 0, 1240, 1041, 1252, 1254, 1242, 0,
	0, 1244, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1161, 1162, 1163, 0, 1312,
	1245, 1338, 1339, 0, 0, 1055, 1057, 1059, 0, 0,
	0, 0, 1251, 0, 1344, 868, 911, 906, 1365, 958,
	913, 915, 1366, 1406, 906, 906, 0, 1314, 947, 0,
	949, 0, 0, 0, 951, 0, 940, 0, 942, 955,
	927, 0, 0, 920, 0, 919, 945, 0, 931, 933,
	935, 1421, 646, 953, 0, 970, 0, 116, 720, 0,
	0, 1407, 0, 119, 1685, 127, 0, 613, 0, 0,
	0, 0, 0, 735, 128, 1685, 144, 1685, 144, 129,
	132, 0, 136, 134, 0, 0, 604, 99, 733, 102,
	0, 0, 726, 0, 676, 679, 685, 84, 0, 728,
	718, 0, 0, 717, 138, 103, 0, 0, 730, 101,
	0, 0, 0, 174, 0, 0, 1379, 1434, 191, 193,
	194, 192, 593, 0, 1439, 0, 1439, 0, 1411, 582,
	646, 0, 958, 670, 691, -2, 694, 696, 704, 0,
	0, 0, 792, 796, 0, 795, 866, 891, 976, 797,
	818, 0, 0, 0, 807, 809, 806, 803, 800, 977,
	0, 0, 0, 0, 0, 245, 248, 251, 254, 257,
	330, 0, 0, 0, 1316, 0, 983, 0, 0, 0,
	0, 154, 172, 1565, 170, 167, 169, 334, 0, 372,
	0, 0, 0, 0, 0, 0, 383, 384, -2, 412,
	413, 415, 411, 0, 521, 524, 532, 0, 0, 882,
	716, 0, 1081, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1347, 0, 0, 0, 1358, -2, 1320, 1348,
	1352, 0, 1422, 1426, 1203, 0, 0, 0, 0, 1391,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 0, 1265, 1266,
	1270, 1414, 0, 0, 1214, 0, 0, 0, 0, 0,
	0, 1321, 1331, 1333, 1159, 1160, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, -2, -2, -2, 1177,
	1178, 1179, -2, -2, -2, 0, 0, 0, 1334, 0,
	0, 1336, 1337, 1341, 1342, 0, 1248, 1249, 1250, 1343,
	0, 908, 0, 912, 0, 908, 908, 875, 948, 0,
	966, 950, 925, 941, 0, 938, 923, 0, 924, 0,
	955, 945, 0, 952, 937, -2, 0, 0, 0, 0,
	145, 611, 635, 0, 0, 707, 713, 713, 0, 1409,
	1212, 1213, 0, 0, 0, 121, 0, 0, 0, 0,
	125, 0, 131, 135, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 107, 110, 0, 0, 106,
	0, 151, 0, 0, 601, 0, 587, 0, 0, 0,
	0, 585, 0, 217, 174, 667, 689, 0, 0, 0,
	0, 0, 794, 796, 0, 787, 788, 818, 890, 798,
	816, 817, 815, 0, 0, 0, 879, 824, 821, 827,
	828, 0, 332, 0, 156, 0, 0, 984, 992, 0,
	1045, 0, 0, 0, 0, 336, 0, 555, 556, 599,
	0, 559, 486, 893, 899, 884, 716, 0, 0, -2,
	0, 1146, -2, -2, 1283, 1314, 1357, 1351, 0, 1388,
	879, 1204, 1206, 1207, 1076, 1272, 1269, 0, 1256, 1223,
	1224, 0, 1226, 1227, 1016, 1330, 0, 0, 0, 0,
	1314, 1285, 1247, 864, 1261, 0, 0, 916, 1261, 1261,
	0, 945, 943, 921, 917, 0, 928, 955, 1422, 0,
	722, 724, 118, 0, 612, 0, 615, 0, 0, 0,
	0, 622, 623, 0, 0, 0, 0, 0, 637, 644,
	0, 716, 0, 716, 0, 0, 0, 0, 0, 141,
	0, 0, 734, 0, 144, 144, 0, 0, 721, 0,
	0, 0, 0, 727, 729, 719, 0, 731, 0, 164,
	0, 580, 600, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 703, 0, 0, 0, 784, 796, 0, 789,
	790, 220, 0, 0, 0, 805, 808, 810, 891, 0,
	0, 0, 979, 1043, 171, 0, 166, 168, 374, 376,
	0, 0, 382, 557, 598, 0, 0, 885, -2, -2,
	1147, 1284, 1423, 1425, 0, 879, 0, 1258, 0, -2,
	0, 0, 0, 1286, 850, 0, 907, 905, 851, 852,
	965, 955, 0, 929, 120, 0, 616, 617, 1410, 619,
	0, 621, 624, 0, 626, 1441, 0, 630, 593, 0,
	641, 642, 708, 709, 712, 710, 713, 879, 639, 0,
	122, 123, 140, 148, 124, 130, 0, 0, 0, 0,
	879, 0, 0, 0, 956, 0, 0, 644, 0, 634,
	593, 583, 0, 704, 700, 0, 0, 791, 792, 0,
	0, 0, 818, 829, 0, 0, 173, 0, 378, 0,
	380, 0, 597, 0, 1205, 1275, 0, 1225, -2, 0,
	1185, 1260, 1262, 0, 926, 918, 614, 618, 0, 0,
	650, 0, 0, 601, 0, 716, 0, 0, 150, 0,
	0, 0, 723, 725, 0, 0, 0, 109, 0, 633,
	593, 644, 601, 644, 0, 0, 793, 794, 0, 812,
	977, 814, 819, 0, 0, 377, 0, 0, 558, 0,
	0, 0, 1271, 1186, 0, 0, 0, 625, 655, 0,
	0, 0, 638, 0, 711, 1203, 646, 126, 0, 147,
	0, 605, 0, 0, 608, 0, 0, 0, 0, 0,
	601, 593, 581, 593, 0, 0, 785, 0, 813, 174,
	174, 379, 381, 1268, 1273, 1276, -2, 1651, 1488, 0,
	1274, 1263, 1264, 0, 627, 651, 652, 0, 647, 648,
	649, 1440, 628, 629, 643, 650, 149, 602, 0, 0,
	603, 0, 0, 112, 114, 0, 631, 601, 601, 0,
	701, 977, 157, 158, 0, 1278, 1279, 1280, 1281, 1282,
	620, 653, 0, 654, 0, 0, 0, 655, 606, 0,
	609, 0, 596, 632, 698, 644, 811, 0, 656, 0,
	659, 660, 0, 657, 640, 0, 0, 592, 594, 595,
	593, 1277, 658, 661, 662, 0, 0, 601, 601, 0,
	699, 607, 0, 0, 0, 601, 610,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 401, 3, 407, 402, 3,
	412, 413, 405, 403, 417, 404, 414, 406, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 421, 416,
	393, 395, 394, 397, 418, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 410, 3, 411, 408, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 419, 400, 420, 398,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 396, 57736, 399, 57737, 409, 57738, 415, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []tree.Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []tree.Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1025
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1039
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1056
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1057
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1068
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1069
		{
			return helpWith(sqllex, "ALTER")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1074
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1075
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1076
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1124
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1195
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &tree.Split{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[6].union.slct()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1231
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), Rows: sqlDollar[5].union.slct()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1237
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1243
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1252
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1261
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()},
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1270
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[6].union.normalizableTableNameFromUnresolvedName()},
					Partition:    tree.Name(sqlDollar[3].str),
				},
				YAMLConfig: sqlDollar[10].union.expr(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1282
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetZoneConfig{
				ZoneSpecifier: tree.ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
				},
				YAMLConfig: sqlDollar[7].union.expr(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &tree.Scatter{Table: sqlDollar[3].union.newNormalizableTableNameFromUnresolvedName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{ColumnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{ColumnKeyword: sqlDollar[2].union.bool(), Column: tree.Name(sqlDollar[3].str)}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        tree.Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				ColumnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        tree.Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1376
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1490
		{
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			return unimplemented(sqllex, "alter using")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1494
		{
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.str = "CSV"
		}
	case 157:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &tree.Import{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1658
		{
		}
	case 175:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &tree.CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1688
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &tree.CancelQuery{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[3].union.expr(), IfExists: false}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &tree.CancelSession{ID: sqlDollar[5].union.expr(), IfExists: true}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "CANCEL SESSION")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1722
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1726
		{
			/* SKIP DOC */
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.str = ""
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1744
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			return helpWith(sqllex, "CREATE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1773
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1777
		{
			/* SKIP DOC */
			// TODO(dan): This reuses the `AS OF SYSTEM TIME` syntax for convenience,
			// but it means something different here than SELECT and BACKUP. On the
			// other hand, RESTORE already stretches the definition a bit. Revisit.
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets:  sqlDollar[4].union.targetList(),
				SinkType: sqlDollar[6].str,
				AsOf:     sqlDollar[7].union.asOfClause(),
				Options:  sqlDollar[8].union.kvOptions(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1808
		{
			return helpWith(sqllex, "DELETE")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1819
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			return helpWith(sqllex, "DROP")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1855
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1870
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.normalizableTableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.normalizableTableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2001
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2005
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2007
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2008
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			return helpWith(sqllex, "DELETE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2011
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			return helpWith(sqllex, "INSERT")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2016
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2026
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2035
		{ /* SKIP DOC */
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "GRANT")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "RESET")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "RESET")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2260
		{
			return helpWith(sqllex, "USE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{ /* SKIP DOC */
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			return helpWith(sqllex, "USE")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return unimplemented(sqllex, "set local")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2303
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.normalizableTableNameFromUnresolvedName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2329
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2442
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2468
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2473
		{
			return unimplemented(sqllex, "set from current")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2486
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = tree.SnapshotIsolation
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = tree.Low
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = tree.Normal
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = tree.High
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2599
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2601
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2603
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2608
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2609
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2611
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2613
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2621
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2622
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			return helpWith(sqllex, "SHOW")
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.str = "client_encoding"
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.str = "timezone"
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2648
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName(), UsingJSON: true}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2669
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2680
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2688
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &tree.ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2716
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2721
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2732
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2756
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2764
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2775
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &tree.ShowIndex{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2785
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2801
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2812
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2844
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: nil, TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2849
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[6].union.stmt(), TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2859
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTrace{Statement: sqlDollar[5].union.stmt(), TraceType: tree.ShowTraceReplica}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = true
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = false
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2876
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				// Note: the schema name may be interpreted as database name,
				// see name_resolution.go.
				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2937
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2945
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2949
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2953
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2956
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &tree.ShowCreateTable{Table: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2967
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &tree.ShowCreateView{View: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2978
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = &tree.ShowCreateSequence{Sequence: sqlDollar[4].union.normalizableTableNameFromUnresolvedName()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2988
		{
			return helpWith(sqllex, "SHOW CREATE SEQUENCE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2999
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3014
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[7].str)}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3018
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[7].str)}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3022
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableNameFromUnresolvedName()},
			}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3028
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: sqlDollar[10].union.normalizableTableNameFromUnresolvedName()},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
			}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3041
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3045
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3051
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3055
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3059
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableNameFromUnresolvedName()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3065
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
			// This sub-rule is meant to support both ROLE and other keywords
			// used as table name without the TABLE prefix. The keyword ROLE
			// here can have two meanings:
			//
			// - for all statements except SHOW GRANTS, it must be interpreted
			//   as a plain table name.
			// - for SHOW GRANTS specifically, it must be handled as an ON ROLE
			//   specifier without a name list (the rule with a name list is separate,
			//   see above).
			//
			// Yet we want to use a single "targets" non-terminal for all
			// statements that use targets, to share the code. This action
			// achieves this as follows:
			//
			// - for all statements (including SHOW GRANTS), it populates the
			//   Tables list in TargetList{} with the given name. This will
			//   include the given keyword as table pattern in all cases,
			//   including when the keyword was ROLE.
			//
			// - if ROLE was specified, it remembers this fact in the ForRoles
			//   field.  This distinguishes `ON ROLE` (where "role" is
			//   specified as keyword), which triggers the special case in
			//   SHOW GRANTS, from `ON "role"` (where "role" is specified as
			//   identifier), which is always handled as a table name.
			//
			//   Both `ON ROLE` and `ON "role"` populate the Tables list in the same way,
			//   so that other statements than SHOW GRANTS don't observe any difference.
			//
			// Arguably this code is a bit too clever. Future work should aim
			// to remove the special casing of SHOW GRANTS altogether instead
			// of increasing (or attempting to modify) the grey magic occurring
			// here.
			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role", // backdoor for "SHOW GRANTS ON ROLE" (no name list)
			}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &tree.PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    sqlDollar[10].union.interleave(),
				Defs:          sqlDollar[8].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[11].union.partitionBy(),
			}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[6].union.slct(),
				AsColumnNames: sqlDollar[4].union.nameList(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &tree.CreateTable{
				Table:         sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[9].union.slct(),
				AsColumnNames: sqlDollar[7].union.nameList(),
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableNameFromUnresolvedName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropCascade
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3417
		{
			/* SKIP DOC */
			sqlVAL.union.val = tree.DropRestrict
		}
	case 596:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.str = ""
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 607:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 610:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         &tree.Tuple{Exprs: sqlDollar[5].union.exprs()},
				To:           &tree.Tuple{Exprs: sqlDollar[9].union.exprs()},
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableNameFromUnresolvedName(),
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3607
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 631:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableNameFromUnresolvedName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			return unimplemented(sqllex, "match full")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3744
		{
			return unimplemented(sqllex, "match partial")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3745
		{
			return unimplemented(sqllex, "match simple")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3746
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3837
		{
			node := &tree.CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3845
		{
			node := &tree.CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3864
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{ /* SKIP DOC */
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3868
		{ /* SKIP DOC */
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3870
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3872
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3877
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3880
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.normalizableTableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = nil
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &tree.CreateView{
				Name:        sqlDollar[3].union.normalizableTableNameFromUnresolvedName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3949
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-16 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:     tree.Name(sqlDollar[4].str),
				Table:    sqlDollar[6].union.normalizableTableNameFromUnresolvedName(),
				Inverted: true,
				Columns:  sqlDollar[8].union.idxElems(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableNameFromUnresolvedName(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4012
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = true
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = false
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = true
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = false
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4054
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4057
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4058
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = tree.Descending
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: false}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: false}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[6].str), NewName: tree.Name(sqlDollar[8].str), IfExists: false}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &tree.RenameColumn{Table: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), Name: tree.Name(sqlDollar[8].str), NewName: tree.Name(sqlDollar[10].str), IfExists: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4109
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4111
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsView: true}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsView: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[3].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[6].union.normalizableTableNameFromUnresolvedName(), IfExists: false, IsSequence: true}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &tree.RenameTable{Name: sqlDollar[5].union.normalizableTableNameFromUnresolvedName(), NewName: sqlDollar[8].union.normalizableTableNameFromUnresolvedName(), IfExists: true, IsSequence: true}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = true
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = false
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4154
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4155
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4166
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &tree.ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4177
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4188
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4192
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4194
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4213
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4218
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4231
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4247
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4255
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4262
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4266
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.str = ""
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.str = ""
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4312
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4327
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 784:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4391
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.str = ""
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.str = ""
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.str = ""
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.str = ""
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4435
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4461
		{
			return helpWith(sqllex, "INSERT")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4479
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4535
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4549
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4553
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4561
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 819:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4598
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4602
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4603
		{
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4627
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4726
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4761
		{
			return helpWith(sqllex, "SELECT")
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4762
		{
			return helpWith(sqllex, "VALUES")
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4763
		{
			return helpWith(sqllex, "TABLE")
		}
	case 850:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4824
		{
			return helpWith(sqllex, "SELECT")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4868
		{
			return helpWith(sqllex, "TABLE")
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4884
		{
			return unimplemented(sqllex, "with recursive")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4907
		{
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4914
		{
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4917
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4918
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = true
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = false
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = false
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = true
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
		}
	case 877:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4948
		{
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableNameFromUnresolvedName()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableNameFromUnresolvedName(), Index: tree.UnrestrictedName(sqlDollar[4].str)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4995
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5019
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5071
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5072
		{
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5075
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5076
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &tree.ValuesClause{Tuples: []*tree.Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5134
		{
			return helpWith(sqllex, "VALUES")
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5136
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &tree.Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5151
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5173
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &tree.IndexHints{NoIndexJoin: true}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5212
		{
			sqlVAL.union.val = &tree.IndexHints{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5216
		{
			sqlVAL.union.val = &tree.IndexHints{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5220
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5224
		{
			sqlVAL.union.val = (*tree.IndexHints)(nil)
		}
	case 926:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5251
		{
			/* SKIP DOC */
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5264
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5268
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5271
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5272
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5273
		{
			return helpWithFunction(sqllex, sqlDollar[2].union.resolvableFuncRefFromName())
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.expr().(tree.TableExpr), Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5278
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5283
		{
			return unimplementedWithIssue(sqllex, 24560)
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = nil
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5320
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = true
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = false
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5428
		{
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5429
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 970:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = tree.NormalizableTableNames{sqlDollar[1].union.normalizableTableNameFromUnresolvedName()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.normalizableTableNames(), sqlDollar[3].union.normalizableTableNameFromUnresolvedName())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName()
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5481
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableNameFromUnresolvedName(), As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 977:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5503
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5517
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5525
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 983:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5549
		{
			/* SKIP DOC */
			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 986:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = coltypes.JSONB
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5574
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = coltypes.Blob
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = coltypes.Bytea
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = coltypes.Text
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = coltypes.SmallSerial
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = coltypes.BigSerial
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5656
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.Char
			} else {
				var err error
				sqlVAL.union.val, err = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5676
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5680
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = nil
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5691
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5695
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5703
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5707
		{
			sqlVAL.union.val = coltypes.Int64
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = coltypes.Integer
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = coltypes.SmallInt
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = coltypes.BigInt
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = coltypes.Real
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5735
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = coltypes.NewFloat(int(prec), len(nv.OrigString) > 0)
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = coltypes.Double
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DECIMAL"
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Dec
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "DEC"
			}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Numeric
			} else {
				sqlVAL.union.val.(*coltypes.TDecimal).Name = "NUMERIC"
			}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = coltypes.Boolean
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5803
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(0)}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5819
		{
			bit, err := coltypes.NewIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &coltypes.TString{N: int(n)}
				strType.Name = sqlVAL.union.val.(*coltypes.TString).Name
				sqlVAL.union.val = strType
			}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5871
		{
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5872
		{
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5889
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = tree.Year
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = tree.Month
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = tree.Day
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = tree.Month
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = nil
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = tree.Second
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5975
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6010
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6031
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6115
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6139
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6159
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6171
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6175
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6179
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6187
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6211
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6223
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6227
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6238
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6240
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6244
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6248
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6252
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6264
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6300
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6304
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6321
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6325
		{
			sqlVAL.union.val = tree.MaxVal{}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6329
		{
			sqlVAL.union.val = tree.MinVal{}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6344
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6348
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6352
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6356
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6360
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6364
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6368
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6372
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6384
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6388
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6396
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6400
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6404
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6408
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6412
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6424
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6428
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6432
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6436
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6444
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:6452
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6466
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6474
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6510
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6515
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6524
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6529
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6534
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6538
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6542
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6546
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6550
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6558
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6562
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6565
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6566
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6568
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6572
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6576
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6579
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6590
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6597
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6606
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6607
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6611
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6613
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6617
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6623
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6627
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6631
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6637
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6641
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6645
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6649
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6653
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:6657
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6661
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6665
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6669
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6676
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6679
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6681
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6684
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6686
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6689
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6691
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6694
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6696
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6699
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6701
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6704
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6706
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6709
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6711
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6715
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6718
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6719
		{
			return unimplemented(sqllex, "treat")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6721
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6725
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6729
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6733
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6737
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6740
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6742
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6745
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6750
		{
			return unimplemented(sqllex, "within group")
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6751
		{
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6755
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6759
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6766
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6770
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6776
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6786
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6794
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6798
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6802
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6809
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6828
		{
			sqlVAL.str = ""
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6834
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6838
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6848
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6849
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6850
		{
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6853
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6854
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6860
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6861
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6862
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6863
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6864
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6875
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6879
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6885
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6891
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6897
		{
			sqlVAL.union.val = tree.Any
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6901
		{
			sqlVAL.union.val = tree.Some
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6905
		{
			sqlVAL.union.val = tree.All
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6910
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6911
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6912
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6913
		{
			sqlVAL.union.val = tree.Div
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6914
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6915
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6916
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6917
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6918
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6919
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6920
		{
			sqlVAL.union.val = tree.LT
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6921
		{
			sqlVAL.union.val = tree.GT
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6922
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6923
		{
			sqlVAL.union.val = tree.LE
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6924
		{
			sqlVAL.union.val = tree.GE
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6925
		{
			sqlVAL.union.val = tree.NE
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6929
		{
			sqlVAL.union.val = tree.Like
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6930
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6931
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6932
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6944
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6950
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6954
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6960
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6964
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6970
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6974
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6980
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6984
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6990
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6994
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7016
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7020
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7024
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7030
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7037
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7041
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7058
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7062
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7066
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7070
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7074
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7080
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7086
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7092
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7096
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7100
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7106
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7110
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7121
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7128
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7132
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:7138
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7144
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7148
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7155
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7161
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7165
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7172
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7178
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7187
		{
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7188
		{
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7192
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7196
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7202
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7211
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7215
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7219
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7227
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7237
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7241
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7247
		{
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7254
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see tree.TableNameWithIndex).
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       sqlDollar[1].union.normalizableTableNameFromUnresolvedName(),
				SearchTable: true,
			}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7282
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7286
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7290
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7296
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7307
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7311
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7315
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7319
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:7322
		{
			return unimplemented(sqllex, "func const")
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7324
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7328
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7331
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7333
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7337
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7341
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7348
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:7352
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7361
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7372
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7382
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7478
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7485
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7489
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7493
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:7507
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7511
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7515
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7528
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:7546
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7556
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:7560
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7574
		{
			sqlVAL.str = ""
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:7580
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:7584
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
